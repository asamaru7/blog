<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

<title>이 세상에 하나는 남기고 가자</title><id>https://blog.asamaru.net/</id><updated>2018-10-11T09:19:22+09:00</updated><subtitle>세상에 필요한 소스코드 한줄 남기고 가자</subtitle><link href="https://blog.asamaru.net/" rel="alternate" type="text/html" /><link href="https://blog.asamaru.net/atom.xml" rel="self" type="application/atom+xml" /><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author>
<entry><id>https://blog.asamaru.net/2018/05/18/custom-domain-in-github-page-support-https/</id><title type="html">Github Pages Custom Domain Https 지원</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2018/05/18/custom-domain-in-github-page-support-https/"/><published>2018-05-18T16:20:06+09:00</published><updated>2018-05-18T16:20:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ssl" label="ssl" /><category term="tip" label="tip" /><summary><![CDATA[드디어 Github Pages에서 Custom Domain을 사용할 때에도 HTTPS를 사용할 수 있다. 정확한 공지는 Custom domains on GitHub Pages gain support for HTTPS를 참고. 현재 이 블로그도 Github Pages를 사용하고 있다. "블로그를 리뉴얼 하다"에서 언급했던 것 처럼 Octopress에서 Jekyll을 거쳐 직접 개발한 정적 파일 기반 블로그를 사용하고 있으니 무료에 트래픽도 넉넉한 Github Pages 만한 것도 없다(GitHub Pages에 대한 제약사항은 What is GitHub Pages?에서 확인할 수 있다). 게다가 git에 의한 버전관리까지. 그런데 사실 이 블로그도 얼마전까지는 Firebase 호스팅 을 통해 서비스하고 있었다. Firebase는 무료의 경우 개설 프로젝트의 개수에 제한이 있고, 호스팅의 경우도 용량과 트래픽에 제한이 있지만 HTTPS와 전세계에 퍼져있는 CDN을 무료로 사용할 수 있기 때문이다. Firebase 호스팅을 사용하기 전에는 Github Pages + Cloudflare를 통해서 무료 HTTPS + CDN을 사용했다(Github Pages에서 HTTPS 를 지원하지 않았기 때문에 Cloudflare의 무료 SSL을 사용했음). 그런데 "클라우드플레어(Cloudflare)가 한국에서 느린 이유"에 나오는 것처럼 속도가 너무 느려 Firebase 호스팅으로 옮겼다. 단, 개인적으로 Firebase 호스팅은 배포가 좀 불편해서 불만이 있었다(편리한 CLI를 제공하지만 그냥 웬지 불편했다). 그렇게 지내던 중 Github Pages에서 HTTPS 지원을 시작했다는 소식을 접하고 급하게 블로그와 기타 웹페이지들을 다시 이전했다. 결과는 대만족. 속도도 빠르고 HTTPS 설정도 아주 간단하다. 이전하던 웹페이지들 중 하나는 아직 Firebase에 있는데 그 이유는 그 웹페이지 도메인만 SSL 생성이 완료되지 않는 상황에 부딪쳤기 때문이다. 이미 서비스 중인 웹페이지라 SSL 오류가 나는 상태로 계속 둘 순 없었다. Github 고객센터에 안되는 영어로 문의를 남겼으나 아직 해결하진 못했다. 빠르게 답변을 받았으나 내가 DNS 설정을 미리 바꿔두지 않는한 자신들이 확인할 수가 없다는 것이었다. 그래서 현재는 도메인을 아예 이전하는 방법을 고민 중이다(그 정도로 Firebase에서 Github로 옮기고 싶다). "개발자스럽다" 님의 "Github Pages 개인 도메인도 무료로 HTTPS 지원 시작!"에 보면 이 소식과 함께 적용 방법을 잘 설명해 두셨다. 한가지 보강하자면 "A 레코드의 IP를 변경"하는 방법을 설명하고 있지만 CNAME을 설정(USERNAME.github.io)하는 것이 향후 IP 변경에 유연하므로 더 좋다. 요즘엔 대부분의 DNS 서비스에서 CNAME을 지원한다.]]></summary><content type="html"><![CDATA[<p><strong>드디어 <a href="https://pages.github.com/">Github Pages</a>에서 Custom Domain을 사용할 때에도 HTTPS를 사용할 수 있다.</strong></p>
<p>정확한 공지는 <a href="https://blog.github.com/2018-05-01-github-pages-custom-domains-https/">Custom domains on GitHub Pages gain support for HTTPS</a>를 참고.</p>
<hr />
<p>현재 이 블로그도 <a href="https://pages.github.com/">Github Pages</a>를 사용하고 있다.</p>
<p>&quot;<a href="https://blog.asamaru.net/2016/12/14/renewal-blog/">블로그를 리뉴얼 하다</a>&quot;에서 언급했던 것 처럼 Octopress에서 Jekyll을 거쳐 직접 개발한 정적 파일 기반 블로그를 사용하고 있으니 무료에 트래픽도 넉넉한 Github Pages 만한 것도 없다(GitHub Pages에 대한 제약사항은 <a href="https://help.github.com/articles/what-is-github-pages/">What is GitHub Pages?</a>에서 확인할 수 있다).</p>
<p>게다가 git에 의한 버전관리까지.</p>
<p>그런데 사실 이 블로그도 얼마전까지는 <a href="https://firebase.google.com/docs/hosting/">Firebase 호스팅</a> 을 통해 서비스하고 있었다. Firebase는 무료의 경우 개설 프로젝트의 개수에 제한이 있고, 호스팅의 경우도 용량과 트래픽에 제한이 있지만 HTTPS와 전세계에 퍼져있는 CDN을 무료로 사용할 수 있기 때문이다.</p>
<p>Firebase 호스팅을 사용하기 전에는 Github Pages + <a href="https://www.cloudflare.com/">Cloudflare</a>를 통해서 무료 HTTPS + CDN을 사용했다(Github Pages에서 HTTPS 를 지원하지 않았기 때문에 Cloudflare의 무료 SSL을 사용했음).</p>
<p>그런데 &quot;<a href="http://ryush00.tistory.com/448">클라우드플레어(Cloudflare)가 한국에서 느린 이유</a>&quot;에 나오는 것처럼 속도가 너무 느려 Firebase 호스팅으로 옮겼다. 단, 개인적으로 Firebase 호스팅은 배포가 좀 불편해서 불만이 있었다(편리한 CLI를 제공하지만 그냥 웬지 불편했다).</p>
<p>그렇게 지내던 중 Github Pages에서 HTTPS 지원을 시작했다는 소식을 접하고 급하게 블로그와 기타 웹페이지들을 다시 이전했다.</p>
<p><strong>결과는 대만족. 속도도 빠르고 HTTPS 설정도 아주 간단하다.</strong></p>
<p>이전하던 웹페이지들 중 하나는 아직 Firebase에 있는데 그 이유는 그 웹페이지 도메인만 SSL 생성이 완료되지 않는 상황에 부딪쳤기 때문이다. 이미 서비스 중인 웹페이지라 SSL 오류가 나는 상태로 계속 둘 순 없었다.</p>
<p>Github 고객센터에 안되는 영어로 문의를 남겼으나 아직 해결하진 못했다. 빠르게 답변을 받았으나 내가 DNS 설정을 미리 바꿔두지 않는한 자신들이 확인할 수가 없다는 것이었다. 그래서 현재는 도메인을 아예 이전하는 방법을 고민 중이다(그 정도로 Firebase에서 Github로 옮기고 싶다).</p>
<hr />
<p>&quot;<a href="https://blog.gaerae.com/">개발자스럽다</a>&quot; 님의 &quot;<a href="https://blog.gaerae.com/2018/05/github-pages-custom-domains-https.html">Github Pages 개인 도메인도 무료로 HTTPS 지원 시작!</a>&quot;에 보면 이 소식과 함께 적용 방법을 잘 설명해 두셨다.</p>
<p>한가지 보강하자면 &quot;A 레코드의 IP를 변경&quot;하는 방법을 설명하고 있지만 CNAME을 설정(USERNAME.github.io)하는 것이 향후 IP 변경에 유연하므로 더 좋다. 요즘엔 대부분의 DNS 서비스에서 CNAME을 지원한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2018/02/14/install-php-7-2-on-centos-with-remi-rpm-repository/</id><title type="html">PHP 7.2 설치(업그레이드) [CentOS 7 / remi RPM repository]</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2018/02/14/install-php-7-2-on-centos-with-remi-rpm-repository/"/><published>2018-02-14T10:47:57+09:00</published><updated>2018-02-14T10:47:57+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="linux" label="linux" /><summary><![CDATA[PHP를 CentOS에 설치하는 방법은 소스를 컴파일하거나 yum을 사용하는 방법이 주로 사용된다. 나의 경우는 예전엔 컴파일 방법을 주로 사용했었으나 RPM 기반으로 설치하는 것이 더 편리하기도 하고 성능 최적화에 유리하다는 소식을 접하고 yum을 주로 사용하고 있다(yum을 사용해서 PHP를 설치할 경우 CentOS에 포함된 PHP의 버전은 매우 낮기 때문에 외부 RPM repository를 사용하는 경우가 많다). PHP 최신 버전을 제공하는 외부 repository 중 유명한 곳은 webtatic과 remi 등이 있다. 이중에서 webtatic을 주로 사용하다가 이번에 PHP 7.2로 버전업하는 과정에서 remi로 갈아탔다. 내가 remi를 선택한 이유는 다음과 같다. webtatic이 mcrypt를 지원하지 않는다(PHP 7.2에서 보안 문제로 제거). webtatic에서는 openssl 또는 libsodium 사용을 권장 굳이 필요하면 phpseclib/mcrypt_compat을 사용 (packagist에서 mcrypt로 검색하면 다른 프로젝트들도 있음) 참고 : PHP 7.2.1 on CentOS/RHEL 7.4 via Yum webtatic 보다 다양한 extension을 제공 운영중인 서비스로 인해 gearman, oci8 등이 추가로 필요했다. 빠른 업데이트 webtatic의 경우 최신 버전에 대한 업데이트가 조금 늦는 경우가 많다. 위에 나열한 이유는 크게 중요한 문제들은 아니며 대안이 존재하지만 간편한 사용을 위해 갈아탔다. 사실 굳이 다른 repository를 알아봤던 이유는 mcrypt 때문이다. 보안상의 문제로 사용이 권장되지 않는 모듈이지만 PG(결제대행)사에서 제공하는 모듈이 mcrypt를 필수로 요구하고 있는 상황이라 사용하지 않을 수 없었다. 사설이 길었는데 이제 본격적으로 설치에 대해 알아보자(yum을 이용한 설치는 무척 간단하다). 설치환경 CentOS 7.2 Extra Packages for Enterprise Linux (EPEL) repository를 사용하고 있어야 한다. 설치과정 1. 우선 remi repository를 yum 에 추가 한다. $ wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm $ rpm -Uvh epel-release-latest-7.noarch.rpm $ wget http://rpms.remirepo.net/enterprise/remi-release-7.rpm $ rpm -Uvh remi-release-7.rpm $ yum install -y yum-utils $ yum-config-manager --enable remi-php72 repository 주소는 OS/Version 별로 차이가 있다. 다른 OS를 사용하고 있거나 자세한 내용을 확인하고 싶다면 Remi's RPM repository를 참고하자. 2. 기존 설치된 PHP를 제거하고 7.2 버전을 설치 $ yum remove -y `yum list installed | cut -d " " -f 1 | grep php` 위 명령을 실행하기 전에 yum list installed | cut -d " " -f 1 | grep php 만 먼저 실행해서 삭제될 패키지를 확인하는 것이 좋다(잘못된 패키지가 삭제되지 않도록). $ yum install -y php-common php-fpm php-cli \ php-process \ php-opcache php-pecl-apcu \ php-mysqlnd php-pdo \ php-gd \ php-mbstring php-xml \ php-pecl-zip \ php-bcmath "php-common" 외의 패키지는 자신의 상황에 맞게 조정해서 설치한다. "php-common" 대신 "php72w-common"과 같이 PHP 버전을 지정한 패키지를 사용해도 된다. 항상 최신 버전을 사용할 것이 아니라 특정 버전대를 사용해야 한다면 이 방법을 사용하자. 향후 PHP가 버전업되면 운영중인 프로그램과의 호환에 문제가 발생할 수 있으므로 이 방법이 더 안전하다. 단, 메이저 버전업시 기존 패키지를 지우고 설치하는 방법을 사용해야 하므로 불편하다. 기존에 yum으로 설치된 PHP가 존재하고 해당 패키지의 이름이 "php-"로 시작한다면(위에 설명한 것과 같이 "php72w-"로 시작하는 패키지가 설치된 경우가 아닌) 기존 패키지를 지우고 재설치하는 것보다 아래처럼 그냥 update 받는 방법도 있다. $ yum update php-* 나의 경우는 기존에 webtatic을 사용했기 때문에 패키지들의 이름이 "php70w-"로 시작해서 기존 패키지를 지우고 새로 설치했다. 대신, 이번에 "php-"로 시작하는 패키지들을 설치했기 때문에 향후 버전업 시에는 update 방식을 사용할 수 있다. 3. 설치된 php 버전 확인 $ php -v PHP 7.2.2 (cli) (built: Jan 30 2018 13:44:49) ( NTS ) Copyright (c) 1997-2018 The PHP Group Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies with Zend OPcache v7.2.2, Copyright (c) 1999-2018, by Zend Technologies 이것으로 PHP 7.2 버전의 설치가 끝났다. yum을 이용한 PHP의 설치는 앞서 보는 것과 같이 아주 간단하다. "php-" 패키지를 설치할지 "php72w-" 패키지를 설치할지는 자신의 관리 성향에 맞추어 잘 선택하길 바란다(생각보다 중요한 문제다).]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/">PHP</a>를 <a href="https://www.centos.org/">CentOS</a>에 설치하는 방법은 소스를 컴파일하거나 <a href="https://ko.wikipedia.org/wiki/Yum">yum</a>을 사용하는 방법이 주로 사용된다.</p>
<p>나의 경우는 예전엔 컴파일 방법을 주로 사용했었으나 RPM 기반으로 설치하는 것이 더 편리하기도 하고 성능 최적화에 유리하다는 소식을 접하고 yum을 주로 사용하고 있다(yum을 사용해서 PHP를 설치할 경우 CentOS에 포함된 PHP의 버전은 매우 낮기 때문에 외부 RPM repository를 사용하는 경우가 많다).</p>
<p>PHP 최신 버전을 제공하는 외부 repository 중 유명한 곳은 <a href="https://webtatic.com/">webtatic</a>과 <a href="https://blog.remirepo.net/">remi</a> 등이 있다. 이중에서 webtatic을 주로 사용하다가 이번에 PHP 7.2로 버전업하는 과정에서 remi로 갈아탔다. 내가 remi를 선택한 이유는 다음과 같다.</p>
<ul>
<li>webtatic이 <a href="http://php.net/manual/en/book.mcrypt.php">mcrypt</a>를 지원하지 않는다(PHP 7.2에서 보안 문제로 제거).
<ul>
<li>webtatic에서는 openssl 또는 libsodium 사용을 권장</li>
<li>굳이 필요하면 <a href="https://packagist.org/packages/phpseclib/mcrypt_compat">phpseclib/mcrypt_compat</a>을 사용 (<a href="https://packagist.org/search/?q=mcrypt">packagist에서 mcrypt로 검색</a>하면 다른 프로젝트들도 있음)</li>
<li>참고 : <a href="https://webtatic.com/packages/php72/">PHP 7.2.1 on CentOS/RHEL 7.4 via Yum</a></li>
</ul></li>
<li>webtatic 보다 다양한 extension을 제공
<ul>
<li>운영중인 서비스로 인해 gearman, oci8 등이 추가로 필요했다.</li>
</ul></li>
<li>빠른 업데이트
<ul>
<li>webtatic의 경우 최신 버전에 대한 업데이트가 조금 늦는 경우가 많다.</li>
</ul></li>
</ul>
<p>위에 나열한 이유는 크게 중요한 문제들은 아니며 대안이 존재하지만 간편한 사용을 위해 갈아탔다. 사실 굳이 다른 repository를 알아봤던 이유는 mcrypt 때문이다. 보안상의 문제로 사용이 권장되지 않는 모듈이지만 PG(결제대행)사에서 제공하는 모듈이 mcrypt를 필수로 요구하고 있는 상황이라 사용하지 않을 수 없었다.</p>
<p>사설이 길었는데 이제 본격적으로 설치에 대해 알아보자(yum을 이용한 설치는 무척 간단하다).</p>
<hr />
<h3>설치환경</h3>
<ul>
<li>CentOS 7.2</li>
<li>Extra Packages for Enterprise Linux (<a href="https://fedoraproject.org/wiki/EPEL">EPEL</a>) repository를 사용하고 있어야 한다.</li>
</ul>
<h3>설치과정</h3>
<h4>1. 우선 remi repository를 yum 에 추가 한다.</h4>
<pre class="hljs bash">$ wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
$ rpm -Uvh epel-release-latest-7.noarch.rpm
$ wget http://rpms.remirepo.net/enterprise/remi-release-7.rpm
$ rpm -Uvh remi-release-7.rpm

$ yum install -y yum-utils
$ yum-config-manager --<span class="hljs-built_in">enable</span> remi-php72</pre>
<p>repository 주소는 OS/Version 별로 차이가 있다. 다른 OS를 사용하고 있거나 자세한 내용을 확인하고 싶다면 <a href="https://blog.remirepo.net/post/2017/12/04/Install-PHP-7.2-on-CentOS-RHEL-or-Fedora">Remi's RPM repository</a>를 참고하자.</p>
<h4>2. 기존 설치된 PHP를 제거하고 7.2 버전을 설치</h4>
<pre class="hljs bash">$ yum remove -y `yum list installed | cut -d <span class="hljs-string">" "</span> -f 1  | grep php`</pre>
<p>위 명령을 실행하기 전에 <code>yum list installed | cut -d " " -f 1  | grep php</code> 만 먼저 실행해서 삭제될 패키지를 확인하는 것이 좋다(잘못된 패키지가 삭제되지 않도록).</p>
<pre class="hljs bash">$ yum install -y php-common php-fpm php-cli \
        php-process \
        php-opcache php-pecl-apcu \
        php-mysqlnd php-pdo \
        php-gd \
        php-mbstring php-xml \
        php-pecl-zip \
        php-bcmath</pre>
<p>&quot;php-common&quot; 외의 패키지는 자신의 상황에 맞게 조정해서 설치한다.</p>
<blockquote>
<p>&quot;php-common&quot; 대신 &quot;php72w-common&quot;과 같이 PHP 버전을 지정한 패키지를 사용해도 된다.
항상 최신 버전을 사용할 것이 아니라 특정 버전대를 사용해야 한다면 이 방법을 사용하자.
향후 PHP가 버전업되면 운영중인 프로그램과의 호환에 문제가 발생할 수 있으므로 이 방법이 더 안전하다. 단, 메이저 버전업시 기존 패키지를 지우고 설치하는 방법을 사용해야 하므로 불편하다.</p>
</blockquote>
<hr />
<p>기존에 yum으로 설치된 PHP가 존재하고 해당 패키지의 이름이 &quot;php-&quot;로 시작한다면(위에 설명한 것과 같이 &quot;php72w-&quot;로 시작하는 패키지가 설치된 경우가 아닌) 기존 패키지를 지우고 재설치하는 것보다 아래처럼 그냥 update 받는 방법도 있다.</p>
<pre class="hljs bash">$ yum update php-*</pre>
<p>나의 경우는 기존에 webtatic을 사용했기 때문에 패키지들의 이름이 &quot;php70w-&quot;로 시작해서 기존 패키지를 지우고 새로 설치했다. 대신, 이번에 &quot;php-&quot;로 시작하는 패키지들을 설치했기 때문에 향후 버전업 시에는 update 방식을 사용할 수 있다.</p>
<h4>3. 설치된 php 버전 확인</h4>
<pre class="hljs bash">$ php -v

PHP 7.2.2 (cli) (built: Jan 30 2018 13:44:49) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies
    with Zend OPcache v7.2.2, Copyright (c) 1999-2018, by Zend Technologies</pre>
<p>이것으로 PHP 7.2 버전의 설치가 끝났다.</p>
<hr />
<p>yum을 이용한 PHP의 설치는 앞서 보는 것과 같이 아주 간단하다. &quot;php-&quot; 패키지를 설치할지 &quot;php72w-&quot; 패키지를 설치할지는 자신의 관리 성향에 맞추어 잘 선택하길 바란다(생각보다 중요한 문제다).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2018/02/01/let-s-encrypt-acme-v2-protocol-api-endpoint-and-support-for-wildcard-certificates/</id><title type="html">Let's Encrypt : ACME v2 protocol API 및 wildcard certificates 지원</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2018/02/01/let-s-encrypt-acme-v2-protocol-api-endpoint-and-support-for-wildcard-certificates/"/><published>2018-02-01T17:00:35+09:00</published><updated>2018-02-01T17:00:35+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ssl" label="ssl" /><category term="linux" label="linux" /><summary><![CDATA[Let's Encrypt는 2017년 12월 Looking Forward to 2018라는 글을 통해 ACME v2 protocol API와 와일드카드 SSL 인증서를 1월 4일까지 공개 테스트하고 2월 27일부터 정식 배포 하겠다고 밝혔다. 두가지 지원 사항 중 하나인 ACME는 위키피디아에서 아래와 같이 설명하고 있다. The Automatic Certificate Management Environment (ACME) protocol is a communications protocol for automating interactions between certificate authorities and their users' web servers, allowing the automated deployment of public key infrastructure at very low cost.[1][2] It was designed by the Internet Security Research Group (ISRG) for their Let's Encrypt service. ACME v2 protocol에 대해서는 명확한 설명을 찾지 못했지만 이 링크를 통해 비교해 볼 수는 있다. 사실 그냥 무료 인증서가 필요해서 사용하는 입장에서는 ACME protocol의 상세는 중요하지 않다고 본다. 이번 업데이트에서 가장 중요한 부분은 와일드카드 SSL 인증서를 지원한다는 것이다. 기존에는 SSL을 사용하고자 하는 모든 도메인을 일일이 세팅해 주었어야 하지만 와일드카드를 지원하게 됨으로써 하나의 SSL 인증서를 발급받아 여러 서브 도메인에서 사용할 수 있게 된다. 업데이트 이전에는 해당 도메인에 접속하여 인증한 후 SSL 인증서를 발급하는 방식이었다. 하지만 와일드카드를 지원하게 되면 발급 과정이 어떻게 변경되는지 궁금해서 찾아보았으나 아직 찾지는 못했다. 기존에 주로 certbot을 이용해 발급/갱신 했었기 때문에 해당 사이트도 대충 둘러 보았으나 찾지 못했다(1월 4일까지 공개 테스트를 한다고 했기 때문에 어딘가엔 방법이 있을 듯한데). 어쨌든 2월 27일이되면 상세한 설명이 나올 것으로 보이니 기다려봐야 겠다. 결론적으로 와일드카드 SSL을 무료로 사용할 수 있게 된다니 아주 기대된다.]]></summary><content type="html"><![CDATA[<p><a href="https://letsencrypt.org">Let's Encrypt</a>는 2017년 12월 <a href="https://letsencrypt.org/2017/12/07/looking-forward-to-2018.html">Looking Forward to 2018</a>라는 글을 통해 <a href="https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment">ACME</a> v2 protocol API와 와일드카드 SSL 인증서를 1월 4일까지 공개 테스트하고 2월 27일부터 정식 배포 하겠다고 밝혔다.</p>
<p>두가지 지원 사항 중 하나인 <a href="https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment">ACME</a>는 위키피디아에서 아래와 같이 설명하고 있다.</p>
<blockquote>
<p>The Automatic Certificate Management Environment (ACME) protocol is a communications protocol for automating interactions between certificate authorities and their users' web servers, allowing the automated deployment of public key infrastructure at very low cost.[1][2] It was designed by the Internet Security Research Group (ISRG) for their Let's Encrypt service.</p>
</blockquote>
<p>ACME v2 protocol에 대해서는 명확한 설명을 찾지 못했지만 이 <a href="https://tools.ietf.org/rfcdiff?url1=https://tools.ietf.org/id/draft-ietf-acme-acme-01.txt&amp;url2=https://tools.ietf.org/id/draft-ietf-acme-acme-07.txt">링크</a>를 통해 비교해 볼 수는 있다.</p>
<p>사실 그냥 무료 인증서가 필요해서 사용하는 입장에서는 ACME protocol의 상세는 중요하지 않다고 본다.</p>
<p>이번 업데이트에서 가장 중요한 부분은 와일드카드 SSL 인증서를 지원한다는 것이다.</p>
<p>기존에는 SSL을 사용하고자 하는 모든 도메인을 일일이 세팅해 주었어야 하지만 와일드카드를 지원하게 됨으로써 하나의 SSL 인증서를 발급받아 여러 서브 도메인에서 사용할 수 있게 된다.</p>
<p>업데이트 이전에는 해당 도메인에 접속하여 인증한 후 SSL 인증서를 발급하는 방식이었다. 하지만 와일드카드를 지원하게 되면 발급 과정이 어떻게 변경되는지 궁금해서 찾아보았으나 아직 찾지는 못했다.</p>
<p>기존에 주로 <a href="https://certbot.eff.org/">certbot</a>을 이용해 발급/갱신 했었기 때문에 해당 사이트도 대충 둘러 보았으나 찾지 못했다(1월 4일까지 공개 테스트를 한다고 했기 때문에 어딘가엔 방법이 있을 듯한데).</p>
<p>어쨌든 2월 27일이되면 상세한 설명이 나올 것으로 보이니 기다려봐야 겠다.</p>
<p>결론적으로 <strong>와일드카드 SSL을 무료로 사용할 수 있게 된다니 아주 기대된다</strong>.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/08/14/top-10-es6-features/</id><title type="html">개발자가 필히 알아야 할 ES6 10가지 기능</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/08/14/top-10-es6-features/"/><published>2017-08-14T17:42:35+09:00</published><updated>2017-08-14T17:42:35+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[ES6(ECMAScript 표준의 6번째 에디션, ECMAScript2015)에 대한 이야기를 하기 전에 자바스크립트와 ECMAScript에 대한 것부터 간략히 소개한다. 넷스케이프(Netscape)에서 1995년 개발한 자바스크립트(javascript)는 웹 브라우저에서 동적인 기능을 제공하기 위한 언어다. 현재는 대부분의 브라우저에서 이 언어를 제공하고 있다. 그런데 표준 규격없이 여러 브라우저에서 독자적인 특성이 추가되면서 호환성 문제가 발생하기 시작했다. 이에 ECMA 국제 기구에서 “ECMAScript Standard”라는 표준을 만들게 되었다. 정확히 이야기 하자면 현재의 자바스크립트는 ECMAScript와 BOM(Browser Object Model)와 DOM(Document Object Model)을 포괄하는 개념이다. 개별적인 설명에 앞서 개발자가 필히 알아야 할 ES6 10가지 기능을 나열하자면 아래와 같다. 기본 매개 변수 (Default Parameters) 템플릿 리터럴 (Template Literals) 멀티 라인 문자열 (Multi-line Strings) 비구조화 할당 (Destructuring Assignment) 향상된 객체 리터럴 (Enhanced Object Literals) 화살표 함수 (Arrow Functions) Promises 블록 범위 생성자 Let 및 Const (Block-Scoped Constructs Let and Const) 클래스 (Classes) 모듈 (Modules) 이제부터 하나씩 알아보자. 1. 기본 매개 변수 (Default Parameters) var link = function (height, color, url) { var height = height || 50 var color = color || 'red' var url = url || 'http://azat.co' ... } 함수에 넘겨주는 인자값에 대한 default 처리를 위해 위와 같이 처리 했었다면 ES6에서는 아래와 같이 간단히 처리할 수 있다. var link = function(height = 50, color = 'red', url = 'http://azat.co') { ... } 단, 주의해야 할 점이 있다. 인자값으로 0 또는 false가 입력될 때 두 예시의 결과는 다르다. ES5에서는 || 처리 시 0 또는 false 값이 입력 되어도 거짓이 되므로 기본값으로 대체된다. 하지만 ES6의 기본 매개 변수를 사용하면 undefined 를 제외한 입력된 모든 값(0, false, null 등)을 인정한다. 2. 템플릿 리터럴 (Template Literals) ES5에서는 아래와 같이 문자열을 처리해야 했다. var name = 'Your name is ' + first + ' ' + last + '.' var url = 'http://localhost:3000/api/messages/' + id 하지만 ES6에서는 템플릿 리터럴을 제공하므로 "`" (back-ticked) 문자열 안에 ${NAME}라는 새로운 구문을 사용해서 아래와 같이 간단히 처리할 수 있다. var name = `Your name is ${first} ${last}.` var url = `http://localhost:3000/api/messages/${id}` 3. 멀티 라인 문자열 (Multi-line Strings) ES5에서는 멀티 라인 문자열을 처리하기 위해 아래와 같은 방법들을 사용해야 했다. var roadPoem = 'Then took the other, as just as fair,\n\t' + 'And having perhaps the better claim\n\t' + 'Because it was grassy and wanted wear,\n\t' + 'Though as for that the passing there\n\t' + 'Had worn them really about the same,\n\t' var fourAgreements = 'You have the right to be you.\n\ You can only be you when you do your best.' 하지만 ES6에서는 "`" (back-ticked) 문자열을 이용해서 아래와 같이 간단히 처리할 수 있다. var roadPoem = `Then took the other, as just as fair, And having perhaps the better claim Because it was grassy and wanted wear, Though as for that the passing there Had worn them really about the same,` var fourAgreements = `You have the right to be you. You can only be you when you do your best.` 4. 비구조화 할당 (Destructuring Assignment) ES5에서는 구조화된 데이터를 변수로 받기 위해 아래와 같이 처리해야 했다. // browser var data = $('body').data(), // data has properties house and mouse house = data.house, mouse = data.mouse // Node.js var jsonMiddleware = require('body-parser').json var body = req.body, // body has username and password username = body.username, password = body.password 하지만 ES6에서는 비구조화 할당을 사용해 아래와 같이 처리할 수 있다. var {house, mouse} = $('body').data() // we'll get house and mouse variables var {jsonMiddleware} = require('body-parser') var {username, password} = req.body 주의할 점은 var로 할당하려는 변수명과 구조화된 데이터의 property명이 같아야 한다. 또한 구조화된 데이터가 아니라 배열의 경우 {} 대신 []를 사용해서 위와 유사하게 사용할 수 있다. var [col1, col2] = $('.column'), [line1, line2, line3, , line5] = file.split('\n') 5. 향상된 객체 리터럴 (Enhanced Object Literals) ES5에서는 아래와 같이 JSON을 사용해서 객체 리터럴을 만들 수 있었다. var serviceBase = {port: 3000, url: 'azat.co'}, getAccounts = function(){return [1,2,3]} var accountServiceES5 = { port: serviceBase.port, url: serviceBase.url, getAccounts: getAccounts, toString: function() { return JSON.stringify(this.valueOf()) }, getUrl: function() {return "http://" + this.url + ':' + this.port}, valueOf_1_2_3: getAccounts() } 위 예시와 달리 serviceBase를 확장하길 원한다면 Object.create 로 프로토타입화하여 상속 받을 수 있다. var accountServiceES5ObjectCreate = { getAccounts: getAccounts, toString: function() { return JSON.stringify(this.valueOf()) }, getUrl: function() {return "http://" + this.url + ':' + this.port}, valueOf_1_2_3: getAccounts() } accountServiceES5ObjectCreate.__proto__ = Object.create(serviceBase) accountServiceES5ObjectCreate와 accountServiceES5는 동일하게 사용할 수 있으나 다른 구조를 가진다. accountServiceES5ObjectCreate는 accountServiceES5와 다르게 __proto__ 에 port 와 url 속성을 가진 객체를 담고 있다. ES6에서는 아래와 같이 처리할 수 있다. var serviceBase = {port: 3000, url: 'azat.co'}, getAccounts = function(){return [1,2,3]} var accountService = { __proto__: serviceBase, getAccounts, toString() { return JSON.stringify((super.valueOf())) }, getUrl() {return "http://" + this.url + ':' + this.port}, [ 'valueOf_' + getAccounts().join('_') ]: getAccounts() }; 위 예시에 대해 ES5와의 차이를 요약하면 아래와 같다. __proto__ 속성을 사용해서 바로 프로토타입을 설정할 수 있다. getAccounts: getAccounts, 대신 getAccounts, 를 사용할 수 있다 (변수명으로 속성 이름을 지정). [ 'valueOf_' + getAccounts().join('_') ] 와 같이 동적으로 속성 이름을 정의할 수 있다. 조금 더 자세한 내용을 보고 싶다면 gsfe/es2015features 를 참고하자. 6. 화살표 함수 (Arrow Functions) 화살표 함수는 항상 익명 함수이며 this의 값을 현재 문맥에 바인딩 시킨다. 아래의 예시는 화살표 함수가 지원되지 않는 ES5에서 this를 사용하기 위한 처리 예시다. var _this = this $('.btn').click(function(event){ _this.sendData() }) 다음은 위 예시를 화살표 함수로 대체한 ES6 예시이다. $('.btn').click((event) => { this.sendData() }) 다음은 ES5에서 call을 사용하여 context를 logUpperCase() 함수에 전달하는 또 다른 예제다. var logUpperCase = function() { var _this = this this.string = this.string.toUpperCase() return function () { return console.log(_this.string) } } logUpperCase.call({ string: 'es6 rocks' })() ES6에서는 화살표 함수를 사용하면 _this 를 사용할 필요가 없다. var logUpperCase = function() { this.string = this.string.toUpperCase() return () => console.log(this.string) } logUpperCase.call({ string: 'es6 rocks' })() 화살표 함수가 한 줄의 명령문과 함께 사용되면 표현식이 되어 명령문의 결과를 암시적으로 반환한다. ES5에서의 처리 예시. var ids = ['5632953c4e345e145fdf2df8','563295464e345e145fdf2df9'] var messages = ids.map(function (value) { return "ID is " + value // explicit return }); ES6에서의 처리 예시. var ids = ['5632953c4e345e145fdf2df8','563295464e345e145fdf2df9'] var messages = ids.map(value => `ID is ${value}`) // implicit return 여러 개의 인자를 사용하는 경우는 변수 목록을 () 로 감싸줘야 한다. ES5에서의 처리 예시. var ids = ['5632953c4e345e145fdf2df8', '563295464e345e145fdf2df9']; var messages = ids.map(function (value, index, list) { return 'ID of ' + index + ' element is ' + value + ' ' // explicit return }); ES6에서의 처리 예시. var ids = ['5632953c4e345e145fdf2df8','563295464e345e145fdf2df9'] var messages = ids.map((value, index, list) => `ID of ${index} element is ${value} `) // implicit return 또한 본문을 괄호로 감싸 객체 표현식을 반환할 수 있으며 ... 을 이용해 가변 파라미터를 사용할 수도 있다. var ids = ['5632953c4e345e145fdf2df8','563295464e345e145fdf2df9'] var messages = ids.map((value, index, ...abc) => ({v:value, i:index, a:abc})) 7. Promises ES6에서는 표준 Promise가 제공된다. 아래는 setTimeout 을 이용한 지연된 비동기 실행에 대한 ES5 예시다. setTimeout(function(){ console.log('Yay!') }, 1000) 위 예시를 ES6에서 Promise를 사용해서 재작성하면 아래와 같다. var wait1000 = new Promise(function(resolve, reject) { setTimeout(resolve, 1000) }).then(function() { console.log('Yay!') }) 위 예시를 화살표 함수를 사용해 재작성한 예시는 아래와 같다. var wait1000 = new Promise((resolve, reject)=> { setTimeout(resolve, 1000) }).then(()=> { console.log('Yay!') }) ES5 보다 ES6의 Promise를 사용한 예시가 더 복잡해 보이지만 아래와 같이 중첩된 setTimeout 예시를 보면 Promise의 이점을 확인할 수 있다. setTimeout(function(){ console.log('Yay!') setTimeout(function(){ console.log('Wheeyee!') }, 1000) }, 1000) 아래는 ES6 Promise 로 작성된 예시. var wait1000 = ()=> new Promise((resolve, reject)=> {setTimeout(resolve, 1000)}) wait1000() .then(function() { console.log('Yay!') return wait1000() }) .then(function() { console.log('Wheeyee!') }); 조금 더 자세한 내용을 보고 싶다면 Introduction to ES6 Promises – The Four Functions You Need To Avoid Callback Hell 또는 gsfe/es2015features 를 참고하자. 8. 블록 범위 생성자 Let 및 Const (Block-Scoped Constructs Let and Const) let과 const는 중괄호("{}")로 정의된 블록으로 유효 범위(스코프)를 지정하는 새로운 var이다. 단, let은 변수를 const는 상수를 선언한다. function calculateTotalAmount (vip) { var amount = 0 if (vip) { var amount = 1 } { // more crazy blocks! var amount = 100 { var amount = 1000 } } return amount } console.log(calculateTotalAmount(true)) 위 예시의 결과는 1000 이다. var는 전역 또는 함수 내부로 유효 범위를 갖기 때문에 예시에 사용된 함수 내부의 "{}" 들은 아무런 역할을 하지 못한다. 아래는 위 예시에서 var를 let으로 바꾼 ES6 예시다. function calculateTotalAmount (vip) { var amount = 0 // probably should also be let, but you can mix var and let if (vip) { let amount = 1 // first amount is still 0 } { // more crazy blocks! let amount = 100 // first amount is still 0 { let amount = 1000 // first amount is still 0 } } return amount } console.log(calculateTotalAmount(true)) 이 예시의 결과는 0 이다. let 으로 선언된 변수는 "{}" 블록 내부로 유효 범위가 한정되므로 100, 1000으로 할당된 변수는 해당 블록 내부에서만 유효하기 때문이다. if 블록 내부에서 let으로 선언된 amount 또한 해당 if 블록 내에서만 유효하므로 아무런 변경이 일어나지 않는다. 아래의 예시는 const를 사용한 예시다. const는 상수를 선언하는 것으로 여러번 선언될 수 없지만 let과 같이 블록 내부로 유효 범위가 한정되므로 아래의 예시는 오류가 발생하지 않는다. function calculateTotalAmount (vip) { const amount = 0 if (vip) { const amount = 1 } { // more crazy blocks! const amount = 100 { const amount = 1000 } } return amount } console.log(calculateTotalAmount(true)) 9. 클래스 (Classes) ES6에는 class 키워드가 추가되어 ES5의 prototype 기반 상속보다 명확하게 class를 정의할 수 있다. get 과 set 키워드 외에도 static 키워드를 사용해 static 메소드를 정의하는 것도 가능하다. class baseModel { constructor(options = {}, data = []) { // class constructor this.name = 'Base' this.url = 'http://azat.co/api' this.data = data this.options = options } getName() { // class method console.log(`Class name: ${this.name}`) } } constructor 는 class 내부에 하나만 존재할 수 있으며 메소드 정의에 function 또는 콜론(":")이 더이상 필요하지 않다. 단, property의 경우 메소드와 달리 생성자에서 값을 할당해야 한다. 또한 아래의 예시와 같이 class NAME extends PARENT_NAME 형식으로 상속이 가능하다. 상속시 부모 생성자를 호출하기 위해 super() 를 사용할 수 있다. 생성자가 아닌 메소드에서는 super 키워드를 사용해서 부모 메소드에 접근한다. class AccountModel extends baseModel { constructor(options, data) { super({private: true}, ['32113123123', '524214691']) //call the parent method with super this.name = 'Account Model' this.url +='/accounts/' } get accountsData() { //calculated attribute getter // ... make XHR return this.data } } class 는 get 과 set 키워드를 사용할 수 있으며 선언된 함수는 아래와 같이 사용할 수 있다. let accounts = new AccountModel(5) accounts.getName() console.log('Data is %s', accounts.accountsData) 위 예시를 실행하면 아래와 같은 결과를 얻을 수 있다. Class name: Account Model Data is %s 32113123123,524214691 10. 모듈 (Modules) ES6 에서 모듈을 공식적으로 제공하기 전까지는 CommonJS, AMD, RequireJS 등의 비공식 모듈 스펙을 사용해 왔다. ES6에서 제공하는 모듈 스펙은 기존과 유사하지만 차이가 있다. ES5에서 CommonJS를 이용해서 모듈을 사용하는 예시는 아래와 같다(module.js). module.exports = { port: 3000, getAccounts: function() { ... } } main.js 파일에서 위에서 정의한 모듈을 불러서 사용하는 예시는 아래와 같다. var service = require('module.js') console.log(service.port) // 3000 여기서 부터는 ES6의 import 와 export 를 사용해서 유사한 기능을 구현한 예시다(module.js). export var port = 3000 export function getAccounts(url) { ... } main.js 파일에서는 import 를 사용해서 module.js 모듈을 불러올 수 있다. import {port, getAccounts} from 'module' console.log(port) // 3000 위와 유사하지만 export 된 모든 변수를 아래와 같이 하나의 구조화된 데이터로 받을 수도 있다. import * as service from 'module' console.log(service.port) // 3000 ES6 당장 사용할 수 있는 방법 (Babel) ES6는 확정되었지만 아직 모든 브라우저에서 완전하게 지원되지 않는다. 따라서 지금 당장 ES6 사용하고 싶다면 Babel과 같은 컴파일러를 사용해야 한다. Babel은 독립 실행형 도구로 실행하거나 빌드 시스템에서 사용할 수 있다. Grunt, Gulp 및 Webpack 용 Babel 플러그인이 있다. ES6의 기타 특징 참고로 이 외에도 여러가지 특징이 있으니 관심이 있다면 git.io/es6features를 번역한 ECMAScript 6 Features를 참고하면 된다. 참고 Top 10 ES6 Features Every Busy JavaScript Developer Must Know 자바스크립트-위키피디아 ECMA스크립트-위키피디아 ECMAScript, ES6란?-워너비스페셜]]></summary><content type="html"><![CDATA[<p>ES6(ECMAScript 표준의 6번째 에디션, ECMAScript2015)에 대한 이야기를 하기 전에 자바스크립트와 <a href="http://www.ecmascript.org/">ECMAScript</a>에 대한 것부터 간략히 소개한다.</p>
<blockquote>
<p>넷스케이프(Netscape)에서 1995년 개발한 자바스크립트(javascript)는 웹 브라우저에서 동적인 기능을 제공하기 위한 언어다. 현재는 대부분의 브라우저에서 이 언어를 제공하고 있다. 그런데 표준 규격없이 여러 브라우저에서 독자적인 특성이 추가되면서 호환성 문제가 발생하기 시작했다. 이에 ECMA 국제 기구에서 “ECMAScript Standard”라는 표준을 만들게 되었다. 정확히 이야기 하자면 현재의 자바스크립트는 ECMAScript와 BOM(Browser Object Model)와 DOM(Document Object Model)을 포괄하는 개념이다.</p>
</blockquote>
<p>개별적인 설명에 앞서 개발자가 필히 알아야 할 ES6 10가지 기능을 나열하자면 아래와 같다.</p>
<ol>
<li>기본 매개 변수 (Default Parameters)</li>
<li>템플릿 리터럴 (Template Literals)</li>
<li>멀티 라인 문자열 (Multi-line Strings)</li>
<li>비구조화 할당 (Destructuring Assignment)</li>
<li>향상된 객체 리터럴 (Enhanced Object Literals)</li>
<li>화살표 함수 (Arrow Functions)</li>
<li>Promises</li>
<li>블록 범위 생성자 Let 및 Const (Block-Scoped Constructs Let and Const)</li>
<li>클래스 (Classes)</li>
<li>모듈 (Modules)</li>
</ol>
<p>이제부터 하나씩 알아보자.</p>
<h3>1. 기본 매개 변수 (Default Parameters)</h3>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> link = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">height, color, url</span>) </span>{
    <span class="hljs-keyword">var</span> height = height || <span class="hljs-number">50</span>
    <span class="hljs-keyword">var</span> color = color || <span class="hljs-string">'red'</span>
    <span class="hljs-keyword">var</span> url = url || <span class="hljs-string">'http://azat.co'</span>
    ...
}</pre>
<p>함수에 넘겨주는 인자값에 대한 default 처리를 위해 위와 같이 처리 했었다면 ES6에서는 아래와 같이 간단히 처리할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> link = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">height = <span class="hljs-number">50</span>, color = <span class="hljs-string">'red'</span>, url = <span class="hljs-string">'http://azat.co'</span></span>) </span>{
  ...
}</pre>
<p>단, 주의해야 할 점이 있다. 인자값으로 0 또는 false가 입력될 때 두 예시의 결과는 다르다. ES5에서는 <code>||</code> 처리 시 0 또는 false 값이 입력 되어도 거짓이 되므로 기본값으로 대체된다. 하지만 ES6의 기본 매개 변수를 사용하면 undefined 를 제외한 입력된 모든 값(0, false, null 등)을 인정한다.</p>
<h3>2. 템플릿 리터럴 (Template Literals)</h3>
<p>ES5에서는 아래와 같이 문자열을 처리해야 했다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">'Your name is '</span> + first + <span class="hljs-string">' '</span> + last + <span class="hljs-string">'.'</span>
<span class="hljs-keyword">var</span> url = <span class="hljs-string">'http://localhost:3000/api/messages/'</span> + id</pre>
<p>하지만 ES6에서는 템플릿 리터럴을 제공하므로 &quot;`&quot; (back-ticked) 문자열 안에 <code>${NAME}</code>라는 새로운 구문을 사용해서 아래와 같이 간단히 처리할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">`Your name is <span class="hljs-subst">${first}</span> <span class="hljs-subst">${last}</span>.`</span>
<span class="hljs-keyword">var</span> url = <span class="hljs-string">`http://localhost:3000/api/messages/<span class="hljs-subst">${id}</span>`</span></pre>
<h3>3. 멀티 라인 문자열 (Multi-line Strings)</h3>
<p>ES5에서는 멀티 라인 문자열을 처리하기 위해 아래와 같은 방법들을 사용해야 했다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> roadPoem = <span class="hljs-string">'Then took the other, as just as fair,\n\t'</span>
    + <span class="hljs-string">'And having perhaps the better claim\n\t'</span>
    + <span class="hljs-string">'Because it was grassy and wanted wear,\n\t'</span>
    + <span class="hljs-string">'Though as for that the passing there\n\t'</span>
    + <span class="hljs-string">'Had worn them really about the same,\n\t'</span>

<span class="hljs-keyword">var</span> fourAgreements = <span class="hljs-string">'You have the right to be you.\n\
    You can only be you when you do your best.'</span></pre>
<p>하지만 ES6에서는 &quot;`&quot; (back-ticked) 문자열을 이용해서 아래와 같이 간단히 처리할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> roadPoem = <span class="hljs-string">`Then took the other, as just as fair,
    And having perhaps the better claim
    Because it was grassy and wanted wear,
    Though as for that the passing there
    Had worn them really about the same,`</span>

<span class="hljs-keyword">var</span> fourAgreements = <span class="hljs-string">`You have the right to be you.
    You can only be you when you do your best.`</span></pre>
<h3>4. 비구조화 할당 (Destructuring Assignment)</h3>
<p>ES5에서는 구조화된 데이터를 변수로 받기 위해 아래와 같이 처리해야 했다.</p>
<pre class="hljs javascript"><span class="hljs-comment">// browser</span>
<span class="hljs-keyword">var</span> data = $(<span class="hljs-string">'body'</span>).data(), <span class="hljs-comment">// data has properties house and mouse</span>
  house = data.house,
  mouse = data.mouse

<span class="hljs-comment">// Node.js</span>
<span class="hljs-keyword">var</span> jsonMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">'body-parser'</span>).json

<span class="hljs-keyword">var</span> body = req.body, <span class="hljs-comment">// body has username and password</span>
  username = body.username,
  password = body.password</pre>
<p>하지만 ES6에서는 비구조화 할당을 사용해 아래와 같이 처리할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> {house, mouse} = $(<span class="hljs-string">'body'</span>).data() <span class="hljs-comment">// we'll get house and mouse variables</span>

<span class="hljs-keyword">var</span> {jsonMiddleware} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'body-parser'</span>)

<span class="hljs-keyword">var</span> {username, password} = req.body</pre>
<p>주의할 점은 var로 할당하려는 변수명과 구조화된 데이터의 property명이 같아야 한다. 또한 구조화된 데이터가 아니라 배열의 경우 <code>{}</code> 대신 <code>[]</code>를 사용해서 위와 유사하게 사용할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> [col1, col2]  = $(<span class="hljs-string">'.column'</span>),
  [line1, line2, line3, , line5] = file.split(<span class="hljs-string">'\n'</span>)</pre>
<h3>5. 향상된 객체 리터럴 (Enhanced Object Literals)</h3>
<p>ES5에서는 아래와 같이 JSON을 사용해서 객체 리터럴을 만들 수 있었다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> serviceBase = {<span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">'azat.co'</span>},
    getAccounts = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]}

<span class="hljs-keyword">var</span> accountServiceES5 = {
  <span class="hljs-attr">port</span>: serviceBase.port,
  <span class="hljs-attr">url</span>: serviceBase.url,
  <span class="hljs-attr">getAccounts</span>: getAccounts,
  <span class="hljs-attr">toString</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-keyword">this</span>.valueOf())
  },
  <span class="hljs-attr">getUrl</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<span class="hljs-keyword">return</span> <span class="hljs-string">"http://"</span> + <span class="hljs-keyword">this</span>.url + <span class="hljs-string">':'</span> + <span class="hljs-keyword">this</span>.port},
  <span class="hljs-attr">valueOf_1_2_3</span>: getAccounts()
}</pre>
<p>위 예시와 달리 serviceBase를 확장하길 원한다면 <code>Object.create</code> 로 프로토타입화하여 상속 받을 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> accountServiceES5ObjectCreate = {
  <span class="hljs-attr">getAccounts</span>: getAccounts,
  <span class="hljs-attr">toString</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-keyword">this</span>.valueOf())
  },
  <span class="hljs-attr">getUrl</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<span class="hljs-keyword">return</span> <span class="hljs-string">"http://"</span> + <span class="hljs-keyword">this</span>.url + <span class="hljs-string">':'</span> + <span class="hljs-keyword">this</span>.port},
  <span class="hljs-attr">valueOf_1_2_3</span>: getAccounts()
}
accountServiceES5ObjectCreate.__proto__ = <span class="hljs-built_in">Object</span>.create(serviceBase)</pre>
<p>accountServiceES5ObjectCreate와 accountServiceES5는 동일하게 사용할 수 있으나 다른 구조를 가진다. accountServiceES5ObjectCreate는 accountServiceES5와 다르게 <code>__proto__</code> 에 <code>port</code> 와 <code>url</code> 속성을 가진 객체를 담고 있다.</p>
<p>ES6에서는 아래와 같이 처리할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> serviceBase = {<span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">'azat.co'</span>},
    getAccounts = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]}
<span class="hljs-keyword">var</span> accountService = {
    <span class="hljs-attr">__proto__</span>: serviceBase,
    getAccounts,
    toString() {
     <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify((<span class="hljs-keyword">super</span>.valueOf()))
    },
    getUrl() {<span class="hljs-keyword">return</span> <span class="hljs-string">"http://"</span> + <span class="hljs-keyword">this</span>.url + <span class="hljs-string">':'</span> + <span class="hljs-keyword">this</span>.port},
    [ <span class="hljs-string">'valueOf_'</span> + getAccounts().join(<span class="hljs-string">'_'</span>) ]: getAccounts()
};</pre>
<p>위 예시에 대해 ES5와의 차이를 요약하면 아래와 같다.</p>
<ul>
<li><code>__proto__</code> 속성을 사용해서 바로 프로토타입을 설정할 수 있다.</li>
<li><code>getAccounts: getAccounts,</code> 대신 <code>getAccounts,</code> 를 사용할 수 있다 (변수명으로 속성 이름을 지정).</li>
<li><code>[ 'valueOf_' + getAccounts().join('_') ]</code> 와 같이 동적으로 속성 이름을 정의할 수 있다.</li>
</ul>
<p>조금 더 자세한 내용을 보고 싶다면 <a href="https://github.com/gsfe/es2015features/tree/master/enhanced-object-literals">gsfe/es2015features</a> 를 참고하자.</p>
<h3>6. 화살표 함수 (Arrow Functions)</h3>
<p>화살표 함수는 항상 익명 함수이며 <code>this</code>의 값을 현재 문맥에 바인딩 시킨다.</p>
<p>아래의 예시는 화살표 함수가 지원되지 않는 ES5에서 <code>this</code>를 사용하기 위한 처리 예시다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> _this = <span class="hljs-keyword">this</span>
$(<span class="hljs-string">'.btn'</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{
  _this.sendData()
})</pre>
<p>다음은 위 예시를 화살표 함수로 대체한 ES6 예시이다.</p>
<pre class="hljs javascript">$(<span class="hljs-string">'.btn'</span>).click(<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
  <span class="hljs-keyword">this</span>.sendData()
})</pre>
<p>다음은 ES5에서 <code>call</code>을 사용하여 <code>context</code>를 <code>logUpperCase()</code> 함수에 전달하는 또 다른 예제다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> logUpperCase = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> _this = <span class="hljs-keyword">this</span>

  <span class="hljs-keyword">this</span>.string = <span class="hljs-keyword">this</span>.string.toUpperCase()
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(_this.string)
  }
}
logUpperCase.call({ <span class="hljs-attr">string</span>: <span class="hljs-string">'es6 rocks'</span> })()</pre>
<p>ES6에서는 화살표 함수를 사용하면 <code>_this</code> 를 사용할 필요가 없다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> logUpperCase = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">this</span>.string = <span class="hljs-keyword">this</span>.string.toUpperCase()
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.string)
}
logUpperCase.call({ <span class="hljs-attr">string</span>: <span class="hljs-string">'es6 rocks'</span> })()</pre>
<p>화살표 함수가 한 줄의 명령문과 함께 사용되면 표현식이 되어 명령문의 결과를 암시적으로 반환한다.</p>
<p>ES5에서의 처리 예시.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> ids = [<span class="hljs-string">'5632953c4e345e145fdf2df8'</span>,<span class="hljs-string">'563295464e345e145fdf2df9'</span>]
<span class="hljs-keyword">var</span> messages = ids.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-string">"ID is "</span> + value <span class="hljs-comment">// explicit return</span>
});</pre>
<p>ES6에서의 처리 예시.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> ids = [<span class="hljs-string">'5632953c4e345e145fdf2df8'</span>,<span class="hljs-string">'563295464e345e145fdf2df9'</span>]
<span class="hljs-keyword">var</span> messages = ids.map(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-string">`ID is <span class="hljs-subst">${value}</span>`</span>) <span class="hljs-comment">// implicit return</span></pre>
<p>여러 개의 인자를 사용하는 경우는 변수 목록을 <code>()</code> 로 감싸줘야 한다.</p>
<p>ES5에서의 처리 예시.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> ids = [<span class="hljs-string">'5632953c4e345e145fdf2df8'</span>, <span class="hljs-string">'563295464e345e145fdf2df9'</span>];
<span class="hljs-keyword">var</span> messages = ids.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, index, list</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-string">'ID of '</span> + index + <span class="hljs-string">' element is '</span> + value + <span class="hljs-string">' '</span> <span class="hljs-comment">// explicit return</span>
});</pre>
<p>ES6에서의 처리 예시.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> ids = [<span class="hljs-string">'5632953c4e345e145fdf2df8'</span>,<span class="hljs-string">'563295464e345e145fdf2df9'</span>]
<span class="hljs-keyword">var</span> messages = ids.map(<span class="hljs-function">(<span class="hljs-params">value, index, list</span>) =&gt;</span> <span class="hljs-string">`ID of <span class="hljs-subst">${index}</span> element is <span class="hljs-subst">${value}</span> `</span>) <span class="hljs-comment">// implicit return</span></pre>
<p>또한 본문을 괄호로 감싸 객체 표현식을 반환할 수 있으며 <code>...</code> 을 이용해 가변 파라미터를 사용할 수도 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> ids = [<span class="hljs-string">'5632953c4e345e145fdf2df8'</span>,<span class="hljs-string">'563295464e345e145fdf2df9'</span>]
<span class="hljs-keyword">var</span> messages = ids.map(<span class="hljs-function">(<span class="hljs-params">value, index, ...abc</span>) =&gt;</span> ({<span class="hljs-attr">v</span>:value, <span class="hljs-attr">i</span>:index, <span class="hljs-attr">a</span>:abc}))</pre>
<h3>7. Promises</h3>
<p>ES6에서는 표준 Promise가 제공된다.</p>
<p>아래는 <code>setTimeout</code> 을 이용한 지연된 비동기 실행에 대한 ES5 예시다.</p>
<pre class="hljs javascript">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Yay!'</span>)
}, <span class="hljs-number">1000</span>)</pre>
<p>위 예시를 ES6에서 Promise를 사용해서 재작성하면 아래와 같다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> wait1000 =  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{
  setTimeout(resolve, <span class="hljs-number">1000</span>)
}).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Yay!'</span>)
})</pre>
<p>위 예시를 화살표 함수를 사용해 재작성한 예시는 아래와 같다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> wait1000 =  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span> {
  setTimeout(resolve, <span class="hljs-number">1000</span>)
}).then(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span> {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Yay!'</span>)
})</pre>
<p>ES5 보다 ES6의 Promise를 사용한 예시가 더 복잡해 보이지만 아래와 같이 중첩된 <code>setTimeout</code> 예시를 보면 Promise의 이점을 확인할 수 있다.</p>
<pre class="hljs javascript">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Yay!'</span>)
  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Wheeyee!'</span>)
  }, <span class="hljs-number">1000</span>)
}, <span class="hljs-number">1000</span>)</pre>
<p>아래는 ES6 Promise 로 작성된 예시.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> wait1000 =  <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span> {setTimeout(resolve, <span class="hljs-number">1000</span>)})

wait1000()
    .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Yay!'</span>)
        <span class="hljs-keyword">return</span> wait1000()
    })
    .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Wheeyee!'</span>)
    });</pre>
<p>조금 더 자세한 내용을 보고 싶다면 <a href="http://jamesknelson.com/grokking-es6-promises-the-four-functions-you-need-to-avoid-callback-hell/">Introduction to ES6 Promises – The Four Functions You Need To Avoid Callback Hell</a> 또는 <a href="https://github.com/gsfe/es2015features/tree/master/promise">gsfe/es2015features</a> 를 참고하자.</p>
<h3>8. 블록 범위 생성자 Let 및 Const (Block-Scoped Constructs Let and Const)</h3>
<p>let과 const는 중괄호(&quot;{}&quot;)로 정의된 블록으로 유효 범위(스코프)를 지정하는 새로운 var이다. 단, let은 변수를 const는 상수를 선언한다.</p>
<pre class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateTotalAmount</span> (<span class="hljs-params">vip</span>) </span>{
  <span class="hljs-keyword">var</span> amount = <span class="hljs-number">0</span>
  <span class="hljs-keyword">if</span> (vip) {
    <span class="hljs-keyword">var</span> amount = <span class="hljs-number">1</span>
  }
  { <span class="hljs-comment">// more crazy blocks!</span>
    <span class="hljs-keyword">var</span> amount = <span class="hljs-number">100</span>
    {
      <span class="hljs-keyword">var</span> amount = <span class="hljs-number">1000</span>
      }
  }
  <span class="hljs-keyword">return</span> amount
}
<span class="hljs-built_in">console</span>.log(calculateTotalAmount(<span class="hljs-literal">true</span>))</pre>
<p>위 예시의 결과는 1000 이다. var는 전역 또는 함수 내부로 유효 범위를 갖기 때문에 예시에 사용된 함수 내부의 &quot;{}&quot; 들은 아무런 역할을 하지 못한다. 아래는 위 예시에서 var를 let으로 바꾼 ES6 예시다.</p>
<pre class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateTotalAmount</span> (<span class="hljs-params">vip</span>) </span>{
  <span class="hljs-keyword">var</span> amount = <span class="hljs-number">0</span> <span class="hljs-comment">// probably should also be let, but you can mix var and let</span>
  <span class="hljs-keyword">if</span> (vip) {
    <span class="hljs-keyword">let</span> amount = <span class="hljs-number">1</span> <span class="hljs-comment">// first amount is still 0</span>
  }
  { <span class="hljs-comment">// more crazy blocks!</span>
    <span class="hljs-keyword">let</span> amount = <span class="hljs-number">100</span> <span class="hljs-comment">// first amount is still 0</span>
    {
      <span class="hljs-keyword">let</span> amount = <span class="hljs-number">1000</span> <span class="hljs-comment">// first amount is still 0</span>
      }
  }
  <span class="hljs-keyword">return</span> amount
}
<span class="hljs-built_in">console</span>.log(calculateTotalAmount(<span class="hljs-literal">true</span>))</pre>
<p>이 예시의 결과는 0 이다. let 으로 선언된 변수는 &quot;{}&quot; 블록 내부로 유효 범위가 한정되므로 100, 1000으로 할당된 변수는 해당 블록 내부에서만 유효하기 때문이다. <code>if</code> 블록 내부에서 let으로 선언된 amount 또한 해당 <code>if</code> 블록 내에서만 유효하므로 아무런 변경이 일어나지 않는다.</p>
<p>아래의 예시는 const를 사용한 예시다. const는 상수를 선언하는 것으로 여러번 선언될 수 없지만 let과 같이 블록 내부로 유효 범위가 한정되므로 아래의 예시는 오류가 발생하지 않는다.</p>
<pre class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateTotalAmount</span> (<span class="hljs-params">vip</span>) </span>{
  <span class="hljs-keyword">const</span> amount = <span class="hljs-number">0</span>
  <span class="hljs-keyword">if</span> (vip) {
    <span class="hljs-keyword">const</span> amount = <span class="hljs-number">1</span>
  }
  { <span class="hljs-comment">// more crazy blocks!</span>
    <span class="hljs-keyword">const</span> amount = <span class="hljs-number">100</span>
    {
      <span class="hljs-keyword">const</span> amount = <span class="hljs-number">1000</span>
      }
  }
  <span class="hljs-keyword">return</span> amount
}
<span class="hljs-built_in">console</span>.log(calculateTotalAmount(<span class="hljs-literal">true</span>))</pre>
<h3>9. 클래스 (Classes)</h3>
<p>ES6에는 class 키워드가 추가되어 ES5의 prototype 기반 상속보다 명확하게 class를 정의할 수 있다. <code>get</code> 과 <code>set</code> 키워드 외에도 <code>static</code> 키워드를 사용해 static 메소드를 정의하는 것도 가능하다.</p>
<pre class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">baseModel</span> </span>{
  <span class="hljs-keyword">constructor</span>(options = {}, data = []) { <span class="hljs-comment">// class constructor</span>
        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">'Base'</span>
    <span class="hljs-keyword">this</span>.url = <span class="hljs-string">'http://azat.co/api'</span>
        <span class="hljs-keyword">this</span>.data = data
    <span class="hljs-keyword">this</span>.options = options
    }

    getName() { <span class="hljs-comment">// class method</span>
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Class name: <span class="hljs-subst">${<span class="hljs-keyword">this</span>.name}</span>`</span>)
    }
}</pre>
<p>constructor 는 class 내부에 하나만 존재할 수 있으며 메소드 정의에 function 또는 콜론(&quot;:&quot;)이 더이상 필요하지 않다. 단, property의 경우 메소드와 달리 생성자에서 값을 할당해야 한다.</p>
<p>또한 아래의 예시와 같이 <code>class NAME extends PARENT_NAME</code> 형식으로 상속이 가능하다.  상속시 부모 생성자를 호출하기 위해 <code>super()</code> 를 사용할 수 있다. 생성자가 아닌 메소드에서는 <code>super</code> 키워드를 사용해서 부모 메소드에 접근한다.</p>
<pre class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountModel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">baseModel</span> </span>{
    <span class="hljs-keyword">constructor</span>(options, data) {
      <span class="hljs-keyword">super</span>({<span class="hljs-attr">private</span>: <span class="hljs-literal">true</span>}, [<span class="hljs-string">'32113123123'</span>, <span class="hljs-string">'524214691'</span>]) <span class="hljs-comment">//call the parent method with super</span>
      <span class="hljs-keyword">this</span>.name = <span class="hljs-string">'Account Model'</span>
      <span class="hljs-keyword">this</span>.url +=<span class="hljs-string">'/accounts/'</span>
    }

    get accountsData() { <span class="hljs-comment">//calculated attribute getter</span>
      <span class="hljs-comment">// ... make XHR</span>
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.data
    }
}</pre>
<p>class 는 <code>get</code> 과 <code>set</code> 키워드를 사용할 수 있으며 선언된 함수는 아래와 같이 사용할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">let</span> accounts = <span class="hljs-keyword">new</span> AccountModel(<span class="hljs-number">5</span>)
accounts.getName()
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Data is %s'</span>, accounts.accountsData)</pre>
<p>위 예시를 실행하면 아래와 같은 결과를 얻을 수 있다.</p>
<pre class="hljs javascript">Class name: Account Model
Data is %s <span class="hljs-number">32113123123</span>,<span class="hljs-number">524214691</span></pre>
<h3>10. 모듈 (Modules)</h3>
<p>ES6 에서 모듈을 공식적으로 제공하기 전까지는 CommonJS, AMD, RequireJS 등의 비공식 모듈 스펙을 사용해 왔다. ES6에서 제공하는 모듈 스펙은 기존과 유사하지만 차이가 있다.</p>
<p>ES5에서 CommonJS를 이용해서 모듈을 사용하는 예시는 아래와 같다(module.js).</p>
<pre class="hljs javascript"><span class="hljs-built_in">module</span>.exports = {
  <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,
  <span class="hljs-attr">getAccounts</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    ...
  }
}</pre>
<p>main.js 파일에서 위에서 정의한 모듈을 불러서 사용하는 예시는 아래와 같다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> service = <span class="hljs-built_in">require</span>(<span class="hljs-string">'module.js'</span>)
<span class="hljs-built_in">console</span>.log(service.port) <span class="hljs-comment">// 3000</span></pre>
<p>여기서 부터는 ES6의 <code>import</code> 와 <code>export</code> 를 사용해서 유사한 기능을 구현한 예시다(module.js).</p>
<pre class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> port = <span class="hljs-number">3000</span>
<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAccounts</span>(<span class="hljs-params">url</span>) </span>{
  ...
}</pre>
<p>main.js 파일에서는 <code>import</code> 를 사용해서 module.js 모듈을 불러올 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">import</span> {port, getAccounts} <span class="hljs-keyword">from</span> <span class="hljs-string">'module'</span>
<span class="hljs-built_in">console</span>.log(port) <span class="hljs-comment">// 3000</span></pre>
<p>위와 유사하지만 <code>export</code> 된 모든 변수를 아래와 같이 하나의 구조화된 데이터로 받을 수도 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> service <span class="hljs-keyword">from</span> <span class="hljs-string">'module'</span>
<span class="hljs-built_in">console</span>.log(service.port) <span class="hljs-comment">// 3000</span></pre>
<h3>ES6 당장 사용할 수 있는 방법 (<a href="https://babeljs.io/">Babel</a>)</h3>
<p>ES6는 확정되었지만 아직 모든 브라우저에서 완전하게 지원되지 않는다. 따라서 지금 당장 ES6 사용하고 싶다면 <a href="https://babeljs.io/">Babel</a>과 같은 컴파일러를 사용해야 한다.
Babel은 독립 실행형 도구로 실행하거나 빌드 시스템에서 사용할 수 있다. <a href="https://gruntjs.com/">Grunt</a>, <a href="https://gulpjs.com/">Gulp</a> 및 <a href="https://webpack.github.io/">Webpack</a> 용 Babel 플러그인이 있다.</p>
<h3>ES6의 기타 특징</h3>
<p>참고로 이 외에도 여러가지 특징이 있으니 관심이 있다면 <a href="https://github.com/lukehoban/es6features/">git.io/es6features</a>를 번역한  <a href="http://seokjun.kr/ecmascript-6-features/">ECMAScript 6 Features</a>를 참고하면 된다.</p>
<hr />
<p>참고</p>
<ul>
<li><a href="https://webapplog.com/es6/">Top 10 ES6 Features Every Busy JavaScript Developer Must Know</a></li>
<li><a href="https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8">자바스크립트-위키피디아</a></li>
<li><a href="https://ko.wikipedia.org/wiki/ECMA%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8">ECMA스크립트-위키피디아</a></li>
<li><a href="http://takeuu.tistory.com/93">ECMAScript, ES6란?-워너비스페셜</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/07/14/composer-autoloader-optimization/</id><title type="html">PHP Composer Autoloader 최적화</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/07/14/composer-autoloader-optimization/"/><published>2017-07-14T12:42:35+09:00</published><updated>2017-07-14T12:42:35+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Composer Autoloader 최적화 Composer Autoloader는 상대적으로 빠르게 실행되나 PSR-4 및 PSR-0 autoload 규칙이 설정되는 방식으로 인해 클래스 이름을 확인하기 전에 파일 시스템을 검사해야 한다. 이 경우 성능이 떨어지지만 개발 환경에서는 새로운 Class를 추가할 때 autoload 구성을 다시 작성하지 않고도 즉시 사용할 수 있으므로 편리하다. 그러나 production 환경에서는 클래스의 추가가 발생하지 않기 때문에 성능을 위해서 파일 시스템을 검사하지 않고 클래스를 로드하는 것이 좋다. Composer는 이러한 문제를 개선하기 위해 autoload 최적화 옵션을 제공한다. 최적화 레벨 1 : 클래스 맵 생성 autoload 최적화를 위한 클래스 맵을 생성하는 방법은 다음과 같은 몇가지가 존재한다. composer.json에 optimize-autoloader을 추가 install 또는 update 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다. { "name": "project", ... "config": { "optimize-autoloader": true } } composer install / update 시 -o 또는 --optimize-autoloader 옵션을 추가 install 또는 update 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다. $ composer install -o $ composer update --optimize-autoloader composer dump-autoload를 -o 또는 --optimize 옵션과 함께 실행 패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다. $ composer dump-autoload --optimize 클래스 맵 생성은 기본적으로 PSR-4 / PSR-0 규칙을 클래스 맵 규칙으로 변환한다. 클래스 맵이 클래스의 존재와 위치를 보장하므로 Composer는 파일 시스템을 검사하지 않고 빠르게 클래스를 로드할 수 있다. 특히 PHP 5.6 이상에서는 opcache가 활성화되어 있는 경우 클래스 맵이 opcache에도 캐시될 수 있으므로 초기화 시간을 크게 향상된다. Trade-offs 최적화 레벨 1의 경우 특별한 Trade-offs가 없으므로 production 환경에서는 항상 활성화하는 것이 좋다. 단, 클래스 맵에 누락된 클래스를 호출하는 경우 PSR-4 규칙이 대체되어 파일 시스템 검사가 발생할 수 있다. 하지만 모든 클래스를 검사하는 것보다는 당연히 성능이 뛰어나므로 사용하지 않을 이유가 없다. 누락된 클래스에 의한 성능 저하를 해결하기 위해서 두가지의 레벨 2 최적화 옵션이 존재한다. 이 옵션들은 프로젝트에 존재하지 않는 클래스에 대한 class_exists 검사가 많은 경우 사용할 수 있다. 최적화 레벨 2/A : 신뢰할 수 있는 클래스 맵 autoload 최적화를 위한 신뢰할 수 있는 클래스 맵을 생성하는 방법은 다음과 같은 몇가지가 존재한다. composer.json에 classmap-authoritative을 추가 install 또는 update 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다. { "name": "project", ... "config": { "classmap-authoritative": true } } composer install / update 시 -a 또는 --classmap-authoritative 옵션을 추가 install 또는 update 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다. $ composer install -a $ composer update --classmap-authoritative composer dump-autoload를 -a 또는 --classmap-authoritative 옵션과 함께 실행 패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다. $ composer dump-autoload --classmap-authoritative 이 옵션이 활성화될 경우 클래스맵에 찾는 클래스가 없더라도 PSR-4 규칙에 따른 파일 시스템 조사를 하지 않도록 하는 것이다. 또한 이 옵션을 사용하면 레벨 1 최적화는 자동적으로 활성화 된다. 이 옵션의 추가 전후의 autoload_real.php 파일 변화를 보면 차이가 명확히 보인다. public static function getLoader() { ... } else { $map = require __DIR__ . '/autoload_namespaces.php'; foreach ($map as $namespace => $path) { $loader->set($namespace, $path); } $map = require __DIR__ . '/autoload_psr4.php'; foreach ($map as $namespace => $path) { $loader->setPsr4($namespace, $path); } $classMap = require __DIR__ . '/autoload_classmap.php'; if ($classMap) { $loader->addClassMap($classMap); } } ... } public static function getLoader() { ... } else { $classMap = require __DIR__ . '/autoload_classmap.php'; if ($classMap) { $loader->addClassMap($classMap); } } ... } Trade-offs 이 욥션을 사용하면 PSR-4 규칙을 통한 파일 시스템 검사를하지 않으므로 autoloader가 항상 빠르게 동작한다. 하지만 이로 인해 런타임 상에서 클래스가 생성되는 경우 클래스를 찾을 수 없으므로 "class not found" 오류가 날 수 있으므로 주의해서 사용해야 한다. 특히 개발 환경에서는 클래스의 추가가 자주 일어날 수 있으므로 불편하다(클래스 추가시마다 클래스 맵을 재생성 해야 함). 또한 이 최적화 옵션은 최적화 레벨 2/B와 동시에 사용할 수 없다. 최적화 수준 2 / B : APCu 캐시 autoload 최적화를 위한 APCu 캐시를 사용하는 방법은 다음과 같은 몇가지가 존재한다. composer.json에 apcu-autoloader을 추가 install 또는 update 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다. { "name": "project", ... "config": { "apcu-autoloader": true } } composer install / update 시 --apcu-autoloader 옵션을 추가 install 또는 update 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다. $ composer install --apcu-autoloader $ composer update --apcu-autoloader composer dump-autoload를 --apcu 옵션과 함께 실행 패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다. $ composer dump-autoload --apcu 이 옵션은 APCu 캐시를 클래스 맵의 fallback으로 추가한다. 발견된 class는 APCu에 캐시되므로 다음 요청시에는 빠르게 반환한다. 최적화 레벨 2/A와 달리 레벨 1 최적화를 자동적으로 활성화하지 않으므로 필요시 수동으로 활성화 해야 한다. Trade-offs APCu가 사용 가능해야 하는 제약이 있으며 APCu 메모리를 사용해 autoload를 수행하지만 신뢰할 수 있는 클래스 맵에서와 같이 클래스를 찾지 못하는 오류가 발생할 수 있다. 또한 이 최적화 옵션은 최적화 레벨 2/A와 동시에 사용할 수 없다. 결론 위에서 소개한 바와 같이 클래스 맵을 생성하는 최적화 레벨 1은 기본적으로 항상하는 것이 좋다. 최적화 레벨 2의 경우는 성능 상의 이점이 있으나 프로그램의 상황에 따라 오류 발생 가능성이 있으니 production 환경에서 상황에 맞게 선택적으로 사용하는 것이 좋다. 참고 : PHP Composer Autoloader Optimization]]></summary><content type="html"><![CDATA[<h3>Composer Autoloader 최적화</h3>
<p>Composer Autoloader는 상대적으로 빠르게 실행되나 PSR-4 및 PSR-0 autoload 규칙이 설정되는 방식으로 인해 클래스 이름을 확인하기 전에 파일 시스템을 검사해야 한다.
이 경우 성능이 떨어지지만 개발 환경에서는 새로운 Class를 추가할 때 autoload 구성을 다시 작성하지 않고도 즉시 사용할 수 있으므로 편리하다.
그러나 production 환경에서는 클래스의 추가가 발생하지 않기 때문에 성능을 위해서 파일 시스템을 검사하지 않고 클래스를 로드하는 것이 좋다.</p>
<p>Composer는 이러한 문제를 개선하기 위해 autoload 최적화 옵션을 제공한다.</p>
<h3>최적화 레벨 1 : 클래스 맵 생성</h3>
<p>autoload 최적화를 위한 클래스 맵을 생성하는 방법은 다음과 같은 몇가지가 존재한다.</p>
<ul>
<li><code>composer.json</code>에 <code>optimize-autoloader</code>을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다.</p>
</blockquote>
<pre class="hljs json">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"project"</span>,
  ...
  <span class="hljs-attr">"config"</span>: {
    <span class="hljs-attr">"optimize-autoloader"</span>: <span class="hljs-literal">true</span>
  }
}</pre>
<ul>
<li><code>composer install</code> / <code>update</code> 시 <code>-o</code> 또는 <code>--optimize-autoloader</code> 옵션을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다.</p>
</blockquote>
<pre class="hljs bash">$ composer install -o
$ composer update --optimize-autoloader</pre>
<ul>
<li><code>composer dump-autoload</code>를 <code>-o</code> 또는 <code>--optimize</code> 옵션과 함께 실행</li>
</ul>
<blockquote>
<p>패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다.</p>
</blockquote>
<pre class="hljs bash">$ composer dump-autoload --optimize</pre>
<p>클래스 맵 생성은 기본적으로 PSR-4 / PSR-0 규칙을 클래스 맵 규칙으로 변환한다.
클래스 맵이 클래스의 존재와 위치를 보장하므로 Composer는 파일 시스템을 검사하지 않고 빠르게 클래스를 로드할 수 있다.</p>
<p>특히 PHP 5.6 이상에서는 opcache가 활성화되어 있는 경우 클래스 맵이 opcache에도 캐시될 수 있으므로 초기화 시간을 크게 향상된다.</p>
<h4>Trade-offs</h4>
<p>최적화 레벨 1의 경우 특별한 Trade-offs가 없으므로 production 환경에서는 항상 활성화하는 것이 좋다.</p>
<p>단, 클래스 맵에 누락된 클래스를 호출하는 경우 PSR-4 규칙이 대체되어 파일 시스템 검사가 발생할 수 있다.
하지만 모든 클래스를 검사하는 것보다는 당연히 성능이 뛰어나므로 사용하지 않을 이유가 없다.</p>
<p>누락된 클래스에 의한 성능 저하를 해결하기 위해서 두가지의 레벨 2 최적화 옵션이 존재한다. 이 옵션들은 프로젝트에 존재하지 않는 클래스에 대한 <code>class_exists</code> 검사가 많은 경우 사용할 수 있다.</p>
<h3>최적화 레벨 2/A : 신뢰할 수 있는 클래스 맵</h3>
<p>autoload 최적화를 위한 신뢰할 수 있는 클래스 맵을 생성하는 방법은 다음과 같은 몇가지가 존재한다.</p>
<ul>
<li><code>composer.json</code>에 <code>classmap-authoritative</code>을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다.</p>
</blockquote>
<pre class="hljs json">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"project"</span>,
  ...
  <span class="hljs-attr">"config"</span>: {
    <span class="hljs-attr">"classmap-authoritative"</span>: <span class="hljs-literal">true</span>
  }
}</pre>
<ul>
<li><code>composer install</code> / <code>update</code> 시 <code>-a</code> 또는 <code>--classmap-authoritative</code> 옵션을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다.</p>
</blockquote>
<pre class="hljs bash">$ composer install -a
$ composer update --classmap-authoritative</pre>
<ul>
<li><code>composer dump-autoload</code>를 <code>-a</code> 또는 <code>--classmap-authoritative</code> 옵션과 함께 실행</li>
</ul>
<blockquote>
<p>패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다.</p>
</blockquote>
<pre class="hljs bash">$ composer dump-autoload --classmap-authoritative</pre>
<p>이 옵션이 활성화될 경우 클래스맵에 찾는 클래스가 없더라도 PSR-4 규칙에 따른 파일 시스템 조사를 하지 않도록 하는 것이다.
또한 이 옵션을 사용하면 레벨 1 최적화는 자동적으로 활성화 된다.</p>
<p>이 옵션의 추가 전후의 <code>autoload_real.php</code> 파일 변화를 보면 차이가 명확히 보인다.</p>
<pre class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLoader</span><span class="hljs-params">()</span>
</span>{
    ...
    } <span class="hljs-keyword">else</span> {
        $map = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/autoload_namespaces.php'</span>;
        <span class="hljs-keyword">foreach</span> ($map <span class="hljs-keyword">as</span> $namespace =&gt; $path) {
            $loader-&gt;set($namespace, $path);
        }

        $map = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/autoload_psr4.php'</span>;
        <span class="hljs-keyword">foreach</span> ($map <span class="hljs-keyword">as</span> $namespace =&gt; $path) {
            $loader-&gt;setPsr4($namespace, $path);
        }

        $classMap = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/autoload_classmap.php'</span>;
        <span class="hljs-keyword">if</span> ($classMap) {
            $loader-&gt;addClassMap($classMap);
        }
    }
    ...
}</pre>
<pre class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLoader</span><span class="hljs-params">()</span>
</span>{
    ...
    } <span class="hljs-keyword">else</span> {
        $classMap = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/autoload_classmap.php'</span>;
        <span class="hljs-keyword">if</span> ($classMap) {
            $loader-&gt;addClassMap($classMap);
        }
    }
    ...
}</pre>
<h4>Trade-offs</h4>
<p>이 욥션을 사용하면 PSR-4 규칙을 통한 파일 시스템 검사를하지 않으므로 autoloader가 항상 빠르게 동작한다.
하지만 이로 인해 런타임 상에서 클래스가 생성되는 경우 클래스를 찾을 수 없으므로 &quot;class not found&quot; 오류가 날 수 있으므로 주의해서 사용해야 한다.
특히 개발 환경에서는 클래스의 추가가 자주 일어날 수 있으므로 불편하다(클래스 추가시마다 클래스 맵을 재생성 해야 함). </p>
<p>또한 이 최적화 옵션은 최적화 레벨 2/B와 동시에 사용할 수 없다.  </p>
<h3>최적화 수준 2 / B : APCu 캐시</h3>
<p>autoload 최적화를 위한 APCu 캐시를 사용하는 방법은 다음과 같은 몇가지가 존재한다.</p>
<ul>
<li><code>composer.json</code>에 <code>apcu-autoloader</code>을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다.</p>
</blockquote>
<pre class="hljs json">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"project"</span>,
  ...
  <span class="hljs-attr">"config"</span>: {
    <span class="hljs-attr">"apcu-autoloader"</span>: <span class="hljs-literal">true</span>
  }
}</pre>
<ul>
<li><code>composer install</code> / <code>update</code> 시 <code>--apcu-autoloader</code> 옵션을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다.</p>
</blockquote>
<pre class="hljs bash">$ composer install --apcu-autoloader
$ composer update --apcu-autoloader</pre>
<ul>
<li><code>composer dump-autoload</code>를 <code>--apcu</code> 옵션과 함께 실행</li>
</ul>
<blockquote>
<p>패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다.</p>
</blockquote>
<pre class="hljs bash">$ composer dump-autoload --apcu</pre>
<p>이 옵션은 APCu 캐시를 클래스 맵의 fallback으로 추가한다. 발견된 class는 APCu에 캐시되므로 다음 요청시에는 빠르게 반환한다.
최적화 레벨 2/A와 달리 레벨 1 최적화를 자동적으로 활성화하지 않으므로 필요시 수동으로 활성화 해야 한다.</p>
<h4>Trade-offs</h4>
<p>APCu가 사용 가능해야 하는 제약이 있으며 APCu 메모리를 사용해 autoload를 수행하지만 신뢰할 수 있는 클래스 맵에서와 같이 클래스를 찾지 못하는 오류가 발생할 수 있다.</p>
<p>또한 이 최적화 옵션은 최적화 레벨 2/A와 동시에 사용할 수 없다.</p>
<h3>결론</h3>
<p>위에서 소개한 바와 같이 클래스 맵을 생성하는 최적화 레벨 1은 기본적으로 항상하는 것이 좋다.
최적화 레벨 2의 경우는 성능 상의 이점이 있으나 프로그램의 상황에 따라 오류 발생 가능성이 있으니 production 환경에서 상황에 맞게 선택적으로 사용하는 것이 좋다.</p>
<hr />
<p>참고 : <a href="https://getcomposer.org/doc/articles/autoloader-optimization.md">PHP Composer Autoloader Optimization</a></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/06/26/mac-os-git-korean-file-name-corequotepath/</id><title type="html">Mac 에서 git 사용시 한글 파일명 문제 2</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/06/26/mac-os-git-korean-file-name-corequotepath/"/><published>2017-06-26T17:25:35+09:00</published><updated>2017-06-26T17:36:27+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><category term="git" label="git" /><summary><![CDATA[Mac 에서 git 사용시 한글 파일명 문제 라는 글에서 core.precomposeunicode 옵션을 설정해서 한글 파일명 사용시 자소 단위로 분리되는 문제를 해결하는 방법을 소개 했었다. 그런데 맥에서 한글 파일명을 사용할 경우에 다른 문제가 하나더 있다. git status 명령으로 변경 파일을 보면 한글이 \306\301... 와 같이 보이는 문제가 있다. 보이기만 이렇게 보이는 것이면 그냥 참겠지만 commit 하는 등의 과정에서 파일명을 지정하는게 어려워진다. 이 문제를 해결하는 방법은 아래와 같다. git config --global core.quotepath false git config --local core.quotepath false Git Documentation core.quotePath Commands that output paths (e.g. ls-files, diff), will quote "unusual" characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. \t for TAB, \n for LF, \ for backslash) or bytes with values larger than 0x80 (e.g. octal \302\265 for "micro" in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered "unusual" any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered "unusual". Many commands can output pathnames completely verbatim using the -z option. The default value is true. 결론을 이야기 하자면 특별한 이유가 있지 않는 이상 한글 파일명은 사용하지 않는 것이 정신 건강에 좋다. 그래서 나는 가급적 사용하지 않으려고 하지만 간혹 어쩔 수 없이 써야하는 경우가 있어 위 방법들을 남겨둔다.]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2016/10/19/mac-os-git-korean-file-name-error/">Mac 에서 git 사용시 한글 파일명 문제</a> 라는 글에서 <code>core.precomposeunicode</code> 옵션을 설정해서 한글 파일명 사용시 자소 단위로 분리되는 문제를 해결하는 방법을 소개 했었다.
그런데 맥에서 한글 파일명을 사용할 경우에 다른 문제가 하나더 있다. <code>git status</code> 명령으로 변경 파일을 보면 한글이 <code>\306\301...</code> 와 같이 보이는 문제가 있다. 보이기만 이렇게 보이는 것이면 그냥 참겠지만 commit 하는 등의 과정에서 파일명을 지정하는게 어려워진다.
이 문제를 해결하는 방법은 아래와 같다.</p>
<pre class="hljs bash">git config --global core.quotepath <span class="hljs-literal">false</span>
git config --<span class="hljs-built_in">local</span> core.quotepath <span class="hljs-literal">false</span></pre>
<blockquote>
<p><a href="http://git-scm.com/docs/git-config">Git Documentation</a></p>
<p><strong>core.quotePath</strong></p>
<p>Commands that output paths (e.g. ls-files, diff), will quote &quot;unusual&quot; characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. \t for TAB, \n for LF, \ for backslash) or bytes with values larger than 0x80 (e.g. octal \302\265 for &quot;micro&quot; in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered &quot;unusual&quot; any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered &quot;unusual&quot;. Many commands can output pathnames completely verbatim using the -z option. The default value is true.</p>
</blockquote>
<hr />
<p>결론을 이야기 하자면 특별한 이유가 있지 않는 이상 한글 파일명은 사용하지 않는 것이 정신 건강에 좋다. 그래서 나는 가급적 사용하지 않으려고 하지만 간혹 어쩔 수 없이 써야하는 경우가 있어 위 방법들을 남겨둔다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/06/05/bitbar-os-x-menu-bar-app/</id><title type="html">BitBar 소개 - OS X Menu Bar에 원하는 모니터링 정보 넣기 </title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/06/05/bitbar-os-x-menu-bar-app/"/><published>2017-06-05T13:50:43+09:00</published><updated>2017-06-05T13:50:43+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><summary><![CDATA[BitBar 를 사용하면 Mac OS X 메뉴 막대에 모든 스크립트나 프로그램의 출력을 넣을 수 있다. 이미 BitBar 사이트에서 제공하고 있는 다양한 플러그인이 존재하지만 출력 결과에 대한 규칙만 지킨다면 어떤 내용이라도 들어갈 수 있으므로 다양한 분야에 활용할 수 있다. 나의 경우는 서버 또는 서비스의 상태를 모니터링 하거나 구글 어날리틱스, 애드센스 등의 현황을 Menu Bar에서 바로 확인하기 위해 사용한다. 하지만 앞서 이야기한 것처럼 활용에 제한이 없으므로 자신이 모니터링하고자하는 모든 정보를 만들어 추가할 수 있다(게다가 간단하다). 설치 https://github.com/matryer/bitbar/releases 에 가서 최신 버전을 다운 받는다. BitBar 와 BitBarDistro 가 있는데 그냥 BitBar를 다운 받으면 된다. 압축을 풀어서 응용 프로그램 폴더에 넣고 실행한다. 플러그인 설치 BitBar에 표시되는 내용은 플러그인에서 출력한 결과들이므로 원하는 정보를 출력해 줄 플러그인들이 필요하다. 플러그인의 설치는 간단하다. 지정된 플러그인 폴더에 원하는 플러그인 파일을 넣고 메뉴에서 'Refresh' 를 실행하면 된다. BitBar는 플러그인을 실행해서 결과를 출력해주므로 해당 플러그인들은 실행 권한을 가지고 있어야 한다. chmod +x plugin.sh 플러그인 폴더의 위치를 확인하거나 변경하려면 Preferences 하위의 메뉴에서 원하는 메뉴를 고르면 된다. 플러그인 갱신 시간 설정 플러그인 실행 결과에 대한 갱신 시간은 플러그인의 파일 이름에 아래의 형식을 사용함으로써 지정 가능하다. {name}.{time}.{ext} name - 파일명 time - 새로 고침 빈도 10s - ten seconds 1m - one minute 2h - two hours 1d - a day ext - 파일 확장명 예를들어 date.1m.sh 플러그인은 1분 간격으로 실행되어 출력된 결과로 갱신된다. 플러그인 만들기 이미 만들어진 플러그인을 사용한 것뿐 아니라 Plugin API를 이용해서 원하는 플러그인을 직접 만들 수도 있다. 표준 출력을 사용하는 실행 가능한 스크립트 형식을 작성하는 것으로 플러그인을 만들 수 있다. 스크립트에서 사용하는 언어는 ruby, python php, bash 등 사용하는 시스템에서 사용 가능한 어떠한 언어도 사용할 수 있다. 여러 줄이 반복해서 출력할 수 있다. ---만으로 구성된 행이 있으면 그 아래의 행은 해당 플러그인의 드롬 다운에 표시되지만 메뉴 표시 줄 자체에는 나타나지 않는다. --로 시작하는 줄은 하위 메뉴로 나타난다. | 를 이용해서 해당 줄에 여러가지 정보를 포함할 수 있다. href=.. to make the item clickable color=.. to change their text color. eg. color=red or color=#ff0000 font=.. to change their text font. eg. font=UbuntuMono-Bold size=.. to change their text size. eg. size=12 bash=.. to make the item run a given script terminal with your script e.g. bash=/Users/user/BitBar_Plugins/scripts/nginx.restart.sh if there are spaces in the file path you will need quotes e.g. bash="/Users/user/BitBar Plugins/scripts/nginx.restart.sh" param1= to specify arguments to the script. additional params like this param2=foo param3=bar full example bash="/Users/user/BitBar_Plugins/scripts/nginx.restart.sh" param1=- verbose assuming that nginx.restart.sh is executable or bash=/usr/bin/ruby param1=/Users/user/rubyscript.rb param2=arg1 param3=arg2 if script is not executable terminal=.. start bash script without opening Terminal. true or false refresh=.. to make the item refresh the plugin it belongs to. If the item runs a script, refresh is performed after the script finishes. eg. refresh=true dropdown=.. May be set to true or false. If false, the line will only appear and cycle in the status bar but not in the dropdown length=.. to truncate the line to the specified number of characters. A … will be added to any truncated strings, as well as a tooltip displaying the full string. eg. length=10 trim=.. whether to trim leading/trailing whitespace from the title. true or false (defaults to true) alternate=true to mark a line as an alternate to the previous one for when the Option key is pressed in the dropdown templateImage=.. set an image for this item. The image data must be passed as base64 encoded string and should consist of only black and clear pixels. The alpha channel in the image can be used to adjust the opacity of black content, however. This is the recommended way to set an image for the statusbar. Use a 144 DPI resolution to support Retina displays. The imageformat can be any of the formats supported by Mac OS X image=.. set an image for this item. The image data must be passed as base64 encoded string. Use a 144 DPI resolution to support Retina displays. The imageformat can be any of the formats supported by Mac OS X emojize=false will disable parsing of github style :mushroom: into 🍄 ansi=false turns off parsing of ANSI codes. 아래는 matryer/bitbar 에 소개된 예시들이다. 예시들을 보면 알겠지만 자신이 익숙한 언어와 BitBar API를 사용해서 간단히 만들 수 있다. One line plugin #!/bin/bash date Multi-line plugin #!/bin/bash # the current date and time date # the current username echo $USER # the current user id id -u Multi-line plugin with extra data #!/bin/bash echo "One" echo "Two" echo "Three" echo "---" echo "Four" echo "Five" echo "Six" Only One, Two and Three will appear in the top bar Clicking the plugin menu item will show all lines Multi-line plugin with links and colors #!/bin/bash curl -m 1 http://example.com -I >/dev/null 2>&1 [ $? -gt 0 ] && echo "FAIL | color=red" || echo "OK | color=green" echo "---" echo "Show Graphs | color=#123def href=http://example.com/graph?foo=bar" echo "Show KPI Report | color=purple href=http://example.com/report"]]></summary><content type="html"><![CDATA[<p><a href="https://getbitbar.com/">BitBar</a> 를 사용하면 Mac OS X 메뉴 막대에 모든 스크립트나 프로그램의 출력을 넣을 수 있다. 이미 <a href="https://getbitbar.com/">BitBar</a> 사이트에서 제공하고 있는 다양한 플러그인이 존재하지만 출력 결과에 대한 규칙만 지킨다면 어떤 내용이라도 들어갈 수 있으므로 다양한 분야에 활용할 수 있다. </p>
<p>나의 경우는 서버 또는 서비스의 상태를 모니터링 하거나 구글 어날리틱스, 애드센스 등의 현황을 Menu Bar에서 바로 확인하기 위해 사용한다. 하지만 앞서 이야기한 것처럼 활용에 제한이 없으므로 자신이 모니터링하고자하는 모든 정보를 만들어 추가할 수 있다(게다가 간단하다).</p>
<hr />
<h3>설치</h3>
<ul>
<li><a href="https://github.com/matryer/bitbar/releases">https://github.com/matryer/bitbar/releases</a> 에 가서 최신 버전을 다운 받는다.
<ul>
<li>BitBar 와 BitBarDistro 가 있는데 그냥 BitBar를 다운 받으면 된다.</li>
</ul></li>
<li>압축을 풀어서 응용 프로그램 폴더에 넣고 실행한다.</li>
</ul>
<h3>플러그인 설치</h3>
<p>BitBar에 표시되는 내용은 플러그인에서 출력한 결과들이므로 원하는 정보를 출력해 줄 플러그인들이 필요하다.<br />
플러그인의 설치는 간단하다. 지정된 플러그인 폴더에 원하는 플러그인 파일을 넣고 메뉴에서 'Refresh' 를 실행하면 된다.  </p>
<p>BitBar는 플러그인을 실행해서 결과를 출력해주므로 해당 플러그인들은 실행 권한을 가지고 있어야 한다.</p>
<pre class="hljs bash">chmod +x plugin.sh</pre>
<p>플러그인 폴더의 위치를 확인하거나 변경하려면 Preferences 하위의 메뉴에서 원하는 메뉴를 고르면 된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/06/bitbar-os-x-menu-bar-app.png" alt="bitbar-os-x-menu-bar-app" width="503" height="414" /></p>
<h3>플러그인 갱신 시간 설정</h3>
<p>플러그인 실행 결과에 대한 갱신 시간은 플러그인의 파일 이름에 아래의 형식을 사용함으로써 지정 가능하다.</p>
<p><code>{name}.{time}.{ext}</code></p>
<ul>
<li>name - 파일명</li>
<li>time - 새로 고침 빈도
<ul>
<li>10s - ten seconds</li>
<li>1m - one minute</li>
<li>2h - two hours</li>
<li>1d - a day</li>
</ul></li>
<li>ext - 파일 확장명</li>
</ul>
<p>예를들어 <code>date.1m.sh</code> 플러그인은 1분 간격으로 실행되어 출력된 결과로 갱신된다.</p>
<h3>플러그인 만들기</h3>
<p>이미 만들어진 플러그인을 사용한 것뿐 아니라 <a href="https://github.com/matryer/bitbar#plugin-api">Plugin API</a>를 이용해서 원하는 플러그인을 직접 만들 수도 있다.</p>
<ul>
<li>표준 출력을 사용하는 실행 가능한 스크립트 형식을 작성하는 것으로 플러그인을 만들 수 있다. 
<ul>
<li>스크립트에서 사용하는 언어는 ruby, python php, bash 등 사용하는 시스템에서 사용 가능한 어떠한 언어도 사용할 수 있다.</li>
</ul></li>
<li>여러 줄이 반복해서 출력할 수 있다.</li>
<li><code>---</code>만으로 구성된 행이 있으면 그 아래의 행은 해당 플러그인의 드롬 다운에 표시되지만 메뉴 표시 줄 자체에는 나타나지 않는다.</li>
<li><code>--</code>로 시작하는 줄은 하위 메뉴로 나타난다.</li>
<li><code>|</code> 를 이용해서 해당 줄에 여러가지 정보를 포함할 수 있다.
<ul>
<li>href=.. to make the item clickable</li>
<li>color=.. to change their text color. eg. color=red or color=#ff0000</li>
<li>font=.. to change their text font. eg. font=UbuntuMono-Bold</li>
<li>size=.. to change their text size. eg. size=12</li>
<li>bash=.. to make the item run a given script terminal with your script e.g. bash=/Users/user/BitBar_Plugins/scripts/nginx.restart.sh if there are spaces in the file path you will need quotes
e.g. bash=&quot;/Users/user/BitBar Plugins/scripts/nginx.restart.sh&quot;</li>
<li>param1= to specify arguments to the script. additional params like this param2=foo param3=bar full example bash=&quot;/Users/user/BitBar_Plugins/scripts/nginx.restart.sh&quot; param1=- verbose assuming that nginx.restart.sh is executable or bash=/usr/bin/ruby param1=/Users/user/rubyscript.rb param2=arg1 param3=arg2 if script is not executable</li>
<li>terminal=.. start bash script without opening Terminal. true or false</li>
<li>refresh=.. to make the item refresh the plugin it belongs to. If the item runs a script, refresh is performed after the script finishes. eg. refresh=true</li>
<li>dropdown=.. May be set to true or false. If false, the line will only appear and cycle in the status bar but not in the dropdown</li>
<li>length=.. to truncate the line to the specified number of characters. A … will be added to any truncated strings, as well as a tooltip displaying the full string. eg. length=10</li>
<li>trim=.. whether to trim leading/trailing whitespace from the title. true or false (defaults to true)</li>
<li>alternate=true to mark a line as an alternate to the previous one for when the Option key is pressed in the dropdown</li>
<li>templateImage=.. set an image for this item. The image data must be passed as base64 encoded string and should consist of only black and clear pixels. The alpha channel in the image  can be used to adjust the opacity of black content, however. This is the recommended way to set an image for the statusbar. Use a 144 DPI resolution to support Retina displays. The  imageformat can be any of the formats supported by Mac OS X</li>
<li>image=.. set an image for this item. The image data must be passed as base64 encoded string. Use a 144 DPI resolution to support Retina displays. The imageformat can be any of the  formats supported by Mac OS X</li>
<li>emojize=false will disable parsing of github style :mushroom: into 🍄</li>
<li>ansi=false turns off parsing of ANSI codes.</li>
</ul></li>
</ul>
<hr />
<p>아래는 <a href="https://github.com/matryer/bitbar">matryer/bitbar</a> 에 소개된 예시들이다. 예시들을 보면 알겠지만 자신이 익숙한 언어와 BitBar API를 사용해서 간단히 만들 수 있다.</p>
<h4>One line plugin</h4>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>
date</pre>
<h4>Multi-line plugin</h4>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash
</span>
<span class="hljs-comment"># the current date and time</span>
date

<span class="hljs-comment"># the current username</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$USER</span>

<span class="hljs-comment"># the current user id</span>
id -u</pre>
<h4>Multi-line plugin with extra data</h4>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"One"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Two"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Three"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"---"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Four"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Five"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Six"</span></pre>
<ul>
<li>Only One, Two and Three will appear in the top bar</li>
<li>Clicking the plugin menu item will show all lines</li>
</ul>
<h4>Multi-line plugin with links and colors</h4>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>
curl -m 1 http://example.com -I &gt;/dev/null 2&gt;&amp;1
[ $? -gt 0 ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">"FAIL | color=red"</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">"OK | color=green"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"---"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Show Graphs | color=#123def href=http://example.com/graph?foo=bar"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Show KPI Report | color=purple href=http://example.com/report"</span></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/04/script-async-defer/</id><title type="html">script의 async와 defer 속성</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/04/script-async-defer/"/><published>2017-05-04T13:23:55+09:00</published><updated>2017-05-04T13:23:55+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[웹 브라우저는 html을 랜더링하는 과정에서 css(<link type='text/css'>) 또는 js(<script>) 를 만나면 동기적으로 처리한다. 다시 말해 해당 내용이 해석되고 실행되기 전에는 뒤에 나오는 내용을 처리하지 않는다는 것이다. 이 부분은 화면의 랜더링 속도에 큰 영향을 줄 수 있다(사용자 경험 측면에서 큰 영향을 주며 SEO와도 관련된다). 이와 관련된 자세한 내용은 HTML Critical rendering path의 이해라는 글에 있으니 필요하면 참고 바란다. css의 경우는 화면을 랜더링하는데 필요한 정보를 담고 있으므로 해당 내용을 출력하기 전에 해석되는 것이 당연히 유리하다(화면이 여러번 랜더링되는 것을 줄일 수 있다). css에 대한 부분도 최적화를 위해 화면에 보여지는 영역과 숨겨진 영역에 대한 css를 분리 호출하는 것을 권장하는 등 최적화에 관련된 여러가지 이슈가 있다. 하지만 이 부분은 여기서 다루고자하는 내용이 아니므로 일단 넘어가자. js의 경우 대부분 화면 출력과 관련되기 보다 기능적 처리에 관련된 경우가 많다. 웹앱 등의 경우 출력과 직접적인 관련이 있을 수도 있으나 이 또한 기본적인 화면이 출력된 이후에 처리되는 것이 웹 페이지를 빠르게 랜더링하는데 유리하기 때문에 처리를 지연하는 것이 좋다. 이러한 이유로 대부분의 경우 css는 <head> 영역에 js는 </body> 바로 앞에 선언하는 것을 추천한다. 이 방식은 아래에 기술하겠지만 오래된 브라우저에서도 동일한 효과를 얻는 좋은 방법이 될 수 있다. 하지만 이 방법 외에도 <script>에는 async 속성과 defer 속성을 사용하는 방법이 있다. 이 글에서는 이 두가지 속성에 대해서 이야기 하고자 한다. 일반적인 실행 async와 defer의 동작에 대해 알아보기 전에 기본적인 <script>의 실행 과정에 대해 알아보자. 기본적으로 <script>는 인라인 코드의 경우 즉시 해석되고 실행될 수 있지만 그렇지 않은 경우는 해당 파일을 가져올 때까지 HTML 문서의 구문 분석을 중단한다. 위 그림에서 보여주듯이 스크립트를 가져 와서 실행하기 위해 HTML 구문 분석이 일시 중지되므로 HTML이 화면에 출력되는 시간이 길어진다. async 속성이 추가된 경우의 실행 async 속성은 브라우저에 스크립트 파일이 비동기적으로 실행될 수 있음을 나타내기 위해 사용된다. HTML 구문 분석기는 스크립트 태그에 도달한 지점에서 스크립트를 가져오고 실행하기 위해 일시 중지 할 필요가 없다. 따라서 HTML 구문 분석과 병행하여 스크립트를 가져온 후 스크립트가 준비 될 때마다 즉시 실행이 가능하다. 그러므로 실행의 순서가 다운로드 완료 시점의 결정되므로 실행 순서가 중요한 스크립트들에 async를 사용할 때는 유의해야 한다(HTML5 spec에 async=false 속성 지정시 호출 순서대로 실행되도록 추가됨(default : true)). <script async src="script.js"> 이 속성은 외부에 위치한 스크립트 파일에서만 사용할 수 있다. 외부 스크립트에 이 속성이 있으면 HTML 문서가 여전히 구문 분석되는 동안 파일을 다운로드 할 수 있으며 다운로드가 완료되면 스크립트가 실행될 수 있도록 구문 분석이 일시 중지 된다. defer 속성이 추가된 경우의 실행 defer 속성은 HTML 구문 분석이 완전히 완료되면 스크립트 파일을 실행하도록 브라우저에 지시한다. <script defer src="script.js"> 비동기적으로 로드된 스크립트와 마찬가지로, HTML 구문 분석이 실행되는 동안 파일을 다운로드 할 수 있다. 그러나 HTML 구문 분석이 완료되기 전에 스크립트 다운로드가 완료 되더라도 구문 분석이 완료 될 때까지 스크립트는 실행되지 않는다. 또한, async와는 다르게 호출된 순서대로 실행된다. 언제 사용할 것인가? 일반적인 스크립트 실행과 aync, defer 실행을 결정하기 위해서는 몇가지 확인해야 할 사항이 있다. <script> 요소는 어디에 있는가? <script> 요소가 문서 맨 끝에 있지 않으면 스크립트의 비동기 및 지연 실행이 더 중요하다. HTML 문서는 첫 번째 여는 <html> 요소부터 닫히는 순서로 파싱됩니다. 외부 소스 JavaScript 파일이 닫는 </body> 요소 바로 앞에 있으면, async 또는 defer 속성을 사용하는 것이 큰 효과가 없다(HTML 파서가 그 시점까지 문서의 대다수를 완성 했기 때문에 지연에 의미가 크게 없다는 것이다). 스크립트 자체가 포함되어 있는가? 다른 파일들에 종속적이지 않거나 종속성 자체가 없는 스크립트 파일의 경우 async 속성이 특히 유용하다. 파일이 어느 지점에서 실행되는지 정확히 알 필요가 없기 때문에 비동기 로드가 가장 적합하다. 스크립트가 완전히 구문 분석 된 DOM에 의존하는가? 대부분의 경우 스크립트 파일에는 DOM과의 상호 작용이 필요한 기능이 포함되어 있거나 페이지에 포함된 다른 파일에 대한 종속성이 있을 수 있다. 이러한 경우 스크립트를 실행하기 전에 DOM이 완전히 해석되어야 정상적인 동작을 할 수 있다. 일반적으로 이러한 스크립트 파일은 페이지의 맨 아래에 배치되어 모든 내용이 파싱된 후에 동작하도록 해야 한다. 그러나 어떤 이유로 든 문제의 파일을 다른 위치에 배치해야 하는 상황에서는 defer 속성을 사용할 수 있다. 스크립트가 작고 종속성을 가지는가? 마지막으로 스크립트가 비교적 작고 다른 파일에 의존하는 경우 인라인으로 정의하는 것이 더 유용 할 수 있다. 인라인을 사용하면 HTML 문서의 구문 분석이 차단되지만 크기가 작으면 큰 문제가 되지 않는다. 또한 다른 파일에 의존하는 경우 차단이 필요할 수 있다. async와 defer를 지원하는 브라우저 async 및 defer 속성은 최신 브라우저를 기준으로 보자면 매우 광범위하게 지원된다. 단, 이러한 속성의 동작은 JavaScript 엔진마다 약간 다를 수 있다. 예를 들어 V8(Chromium에서 사용됨)에서는 스크립트 실행을 위한 별도의 전용 스레드에서 속성에 관계없이 모든 스크립트를 구문 분석하려고 한다(New JavaScript techniques for rapid page loads). 지원하는 브라우저를 알아보기 전에 일부만 지원되는 경우에 대한 동작 과정을 알아보자. defer 속성만 있다면 스크립트는 페이지의 파싱이 완료된 후에 실행된다. 단, async와 defer 속성이 모두 지정된 경우 async 속성을 지원하는 최신 브라우저는 기본적으로 async 속성을 따른다. 하지만 async 속성을 지원하지 않는 구형 브라우저는 defer 속성의 지원 여부에 따라 결과가 다르다. defer 속성을 지원하는 경우 defer 속성에 의해 비동기적으로 스크립트를 실행한다. defer 조차도 지원하지 않는 구형 브라우저는 동기적으로 스크립트를 실행한다. IE는 defer의 경우 예전부터 부분 지원하고 있으나 async 속성은 10 버전 이상부터 지원(defer 완전 지원 포함) Firefox는 3.6 버전부터 모두 지원 chrome은 8 버전부터 모두 지원 safari는 5 버전부터 모두 지원(단, 5버전에서는 async=false 지원 안함) ios safari는 5.1 버전부터 모두 지원 android는 3 버전부터 모두 지원 결론적으로는 원만하면 다 지원한다. IE의 경우가 예외적이긴 하지만 IE 10 미만의 점유율이 극히 낮아진 이 시점에서 무시해도 될 듯하다(굳이 지원해야 한다면 aync, defer 속성을 사용하기 보다 </body> 바로 앞에 스크립트를 위치시키는 방법이 가장 낫다). 보다 상세한 지원 여부는 아래의 caniuse.com 을 참고하자. caniuse.com async 지원 확인 caniuse.com defer 지원 확인]]></summary><content type="html"><![CDATA[<p>웹 브라우저는 html을 랜더링하는 과정에서 css(<code>&lt;link type='text/css'&gt;</code>) 또는 js(<code>&lt;script&gt;</code>) 를 만나면 동기적으로 처리한다. 다시 말해 해당 내용이 해석되고 실행되기 전에는 뒤에 나오는 내용을 처리하지 않는다는 것이다. 이 부분은 화면의 랜더링 속도에 큰 영향을 줄 수 있다(사용자 경험 측면에서 큰 영향을 주며 SEO와도 관련된다). 이와 관련된 자세한 내용은 <a href="https://blog.asamaru.net/2017/05/04/understanding-the-critical-rendering-path/">HTML Critical rendering path의 이해</a>라는 글에 있으니 필요하면 참고 바란다.</p>
<p>css의 경우는 화면을 랜더링하는데 필요한 정보를 담고 있으므로 해당 내용을 출력하기 전에 해석되는 것이 당연히 유리하다(화면이 여러번 랜더링되는 것을 줄일 수 있다). css에 대한 부분도 최적화를 위해 화면에 보여지는 영역과 숨겨진 영역에 대한 css를 분리 호출하는 것을 권장하는 등 최적화에 관련된 여러가지 이슈가 있다. 하지만 이 부분은 여기서 다루고자하는 내용이 아니므로 일단 넘어가자.</p>
<p>js의 경우 대부분 화면 출력과 관련되기 보다 기능적 처리에 관련된 경우가 많다. 웹앱 등의 경우 출력과 직접적인 관련이 있을 수도 있으나 이 또한 기본적인 화면이 출력된 이후에 처리되는 것이 웹 페이지를 빠르게 랜더링하는데 유리하기 때문에 처리를 지연하는 것이 좋다.</p>
<p>이러한 이유로 대부분의 경우 css는 <code>&lt;head&gt;</code> 영역에 js는 <code>&lt;/body&gt;</code> 바로 앞에 선언하는 것을 추천한다. 이 방식은 아래에 기술하겠지만 오래된 브라우저에서도 동일한 효과를 얻는 좋은 방법이 될 수 있다. 하지만 이 방법 외에도 <code>&lt;script&gt;</code>에는 <a href="https://www.w3schools.com/tags/att_script_async.asp">async</a> 속성과 <a href="https://www.w3schools.com/tags/att_script_defer.asp">defer</a> 속성을 사용하는 방법이 있다. 이 글에서는 이 두가지 속성에 대해서 이야기 하고자 한다.</p>
<h3>일반적인 실행</h3>
<p>async와 defer의 동작에 대해 알아보기 전에 기본적인 <code>&lt;script&gt;</code>의 실행 과정에 대해 알아보자. 기본적으로 <code>&lt;script&gt;</code>는 인라인 코드의 경우 즉시 해석되고 실행될 수 있지만 그렇지 않은 경우는 해당 파일을 가져올 때까지 HTML 문서의 구문 분석을 중단한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/script-async-defer-1.png" alt="javascript-execution" width="780" height="152" /></p>
<p>위 그림에서 보여주듯이 스크립트를 가져 와서 실행하기 위해 HTML 구문 분석이 일시 중지되므로 HTML이 화면에 출력되는 시간이 길어진다.</p>
<h3>async 속성이 추가된 경우의 실행</h3>
<p>async 속성은 브라우저에 스크립트 파일이 비동기적으로 실행될 수 있음을 나타내기 위해 사용된다. HTML 구문 분석기는 스크립트 태그에 도달한 지점에서 스크립트를 가져오고 실행하기 위해 일시 중지 할 필요가 없다. 따라서 HTML 구문 분석과 병행하여 스크립트를 가져온 후 스크립트가 준비 될 때마다 즉시 실행이 가능하다. 그러므로 <strong>실행의 순서가 다운로드 완료 시점의 결정되므로 실행 순서가 중요한 스크립트들에 async를 사용할 때는 유의해야 한다(HTML5 spec에 async=false 속성 지정시 호출 순서대로 실행되도록 추가됨(default : true)).</strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"script.js"</span>&gt;</span><span class=""></span></pre>
<p>이 속성은 외부에 위치한 스크립트 파일에서만 사용할 수 있다. 외부 스크립트에 이 속성이 있으면 HTML 문서가 여전히 구문 분석되는 동안 파일을 다운로드 할 수 있으며 다운로드가 완료되면 스크립트가 실행될 수 있도록 구문 분석이 일시 중지 된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/script-async-defer-2.png" alt="javascript-async-execution" width="780" height="152" /></p>
<h3>defer 속성이 추가된 경우의 실행</h3>
<p>defer 속성은 HTML 구문 분석이 완전히 완료되면 스크립트 파일을 실행하도록 브라우저에 지시한다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"script.js"</span>&gt;</span><span class=""></span></pre>
<p>비동기적으로 로드된 스크립트와 마찬가지로, HTML 구문 분석이 실행되는 동안 파일을 다운로드 할 수 있다. 그러나 HTML 구문 분석이 완료되기 전에 스크립트 다운로드가 완료 되더라도 구문 분석이 완료 될 때까지 스크립트는 실행되지 않는다. 또한, <strong>async와는 다르게 호출된 순서대로 실행된다.</strong></p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/script-async-defer-3.png" alt="javascript-defer-execution" width="780" height="152" /></p>
<h3>언제 사용할 것인가?</h3>
<p>일반적인 스크립트 실행과 aync, defer 실행을 결정하기 위해서는 몇가지 확인해야 할 사항이 있다.</p>
<h4><code>&lt;script&gt;</code> 요소는 어디에 있는가?</h4>
<p><code>&lt;script&gt;</code> 요소가 문서 맨 끝에 있지 않으면 스크립트의 비동기 및 지연 실행이 더 중요하다. HTML 문서는 첫 번째 여는 <code>&lt;html&gt;</code> 요소부터 닫히는 순서로 파싱됩니다. 외부 소스 JavaScript 파일이 닫는 <code>&lt;/body&gt;</code> 요소 바로 앞에 있으면, async 또는 defer 속성을 사용하는 것이 큰 효과가 없다(HTML 파서가 그 시점까지 문서의 대다수를 완성 했기 때문에 지연에 의미가 크게 없다는 것이다).</p>
<h4>스크립트 자체가 포함되어 있는가?</h4>
<p>다른 파일들에 종속적이지 않거나 종속성 자체가 없는 스크립트 파일의 경우 async 속성이 특히 유용하다. 파일이 어느 지점에서 실행되는지 정확히 알 필요가 없기 때문에 비동기 로드가 가장 적합하다.</p>
<h4>스크립트가 완전히 구문 분석 된 DOM에 의존하는가?</h4>
<p>대부분의 경우 스크립트 파일에는 DOM과의 상호 작용이 필요한 기능이 포함되어 있거나 페이지에 포함된 다른 파일에 대한 종속성이 있을 수 있다. 이러한 경우 스크립트를 실행하기 전에 DOM이 완전히 해석되어야 정상적인 동작을 할 수 있다. 일반적으로 이러한 스크립트 파일은 페이지의 맨 아래에 배치되어 모든 내용이 파싱된 후에 동작하도록 해야 한다. 그러나 어떤 이유로 든 문제의 파일을 다른 위치에 배치해야 하는 상황에서는 defer 속성을 사용할 수 있다.</p>
<h4>스크립트가 작고 종속성을 가지는가?</h4>
<p>마지막으로 스크립트가 비교적 작고 다른 파일에 의존하는 경우 인라인으로 정의하는 것이 더 유용 할 수 있다. 인라인을 사용하면 HTML 문서의 구문 분석이 차단되지만 크기가 작으면 큰 문제가 되지 않는다. 또한 다른 파일에 의존하는 경우 차단이 필요할 수 있다.</p>
<h3>async와 defer를 지원하는 브라우저</h3>
<p>async 및 defer 속성은 최신 브라우저를 기준으로 보자면 매우 광범위하게 지원된다. 단, 이러한 속성의 동작은 JavaScript 엔진마다 약간 다를 수 있다. 예를 들어 V8(Chromium에서 사용됨)에서는 스크립트 실행을 위한 별도의 전용 스레드에서 속성에 관계없이 모든 스크립트를 구문 분석하려고 한다(<a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html">New JavaScript techniques for rapid page loads</a>).</p>
<p>지원하는 브라우저를 알아보기 전에 일부만 지원되는 경우에 대한 동작 과정을 알아보자. defer 속성만 있다면 스크립트는 페이지의 파싱이 완료된 후에 실행된다. 단, async와 defer 속성이 모두 지정된 경우 async 속성을 지원하는 최신 브라우저는 기본적으로 async 속성을 따른다. 하지만 async 속성을 지원하지 않는 구형 브라우저는 defer 속성의 지원 여부에 따라 결과가 다르다. defer 속성을 지원하는 경우 defer 속성에 의해 비동기적으로 스크립트를 실행한다. defer 조차도 지원하지 않는 구형 브라우저는 동기적으로 스크립트를 실행한다.</p>
<ul>
<li>IE는 defer의 경우 예전부터 부분 지원하고 있으나 async 속성은 10 버전 이상부터 지원(defer 완전 지원 포함)</li>
<li>Firefox는 3.6 버전부터 모두 지원</li>
<li>chrome은 8 버전부터 모두 지원</li>
<li>safari는 5 버전부터 모두 지원(단, 5버전에서는 async=false 지원 안함)</li>
<li>ios safari는 5.1 버전부터 모두 지원</li>
<li>android는 3 버전부터 모두 지원</li>
</ul>
<p>결론적으로는 원만하면 다 지원한다. IE의 경우가 예외적이긴 하지만 IE 10 미만의 점유율이 극히 낮아진 이 시점에서 무시해도 될 듯하다(굳이 지원해야 한다면 aync, defer 속성을 사용하기 보다 <code>&lt;/body&gt;</code> 바로 앞에 스크립트를 위치시키는 방법이 가장 낫다).</p>
<p>보다 상세한 지원 여부는 아래의 caniuse.com 을 참고하자.</p>
<ul>
<li><a href="http://caniuse.com/#feat=script-async">caniuse.com async 지원 확인</a></li>
<li><a href="http://caniuse.com/#feat=script-defer">caniuse.com defer 지원 확인</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/04/understanding-the-critical-rendering-path/</id><title type="html">HTML Critical rendering path의 이해</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/04/understanding-the-critical-rendering-path/"/><published>2017-05-04T10:50:36+09:00</published><updated>2017-05-04T10:52:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="html" label="html" /><category term="js" label="js" /><category term="css" label="css" /><summary><![CDATA[아래의 글은 "Understanding the Critical Rendering Path"의 내용을 번역한 글이다. 브라우저가 서버에서 페이지에 대한 HTML 응답을 받으면 화면에 표시되기 전에 많은 단계를 거쳐야 한다. 브라우저가 페이지의 초기 출력을 위해 실행해야하는 이 순서를 "Critical Rendering Path"(이하 CRP)라고 한다. 사이트의 성능을 향상시키는 방법을 이해하는데 CRP에 대한 지식은 매우 유용하다. CRP는 아래와 같이 6단계로 구성된다. DOM 트리 구축(Constructing the DOM Tree) CSSOM 트리 구축(Constructing the CSSOM Tree) JavaScript 실행(Running JavaScript) 랜더링 트리 구축(Creating the Render Tree) 레이아웃 생성(Generating the Layout) 페인팅(Painting) 1. DOM 트리 구축(Constructing the DOM Tree) DOM(Document Object Model) 트리는 완전히 구문 분석된 HTML 페이지의 Object 표현이다. 루트 요소 <html>로 시작하여 페이지의 각 element/text에 대한 노드가 만들어진다. 다른 요소 내에 중첩된 요소는 자식 노드로 표시되며 각 노드에는 해당 요소의 전체 특성이 포함된다. 예를 들어, <a> 요소는 노드와 관련된 href 속성을 갖는다. 예를들어 아래의 html 문서를 보자. <html> <head> <title>Understanding the Critical Rendering Path</title> <link rel="stylesheet" href="style.css"> </head> <body> <header> <h1>Understanding the Critical Rendering Path</h1> </header> <main> <h2>Introduction</h2> <p>Lorem ipsum dolor sit amet</p> </main> <footer> <small>Copyright 2017</small> </footer> </body> </html> 위 html 문서는 다음과 같은 DOM 트리를 생성한다. HTML의 장점은 부분적으로 실행될 수 있다는 것이다. 페이지에 내용이 표시하기 위해 전체 문서를 로드할 필요가 없다. 그러나 다른 리소스인 CSS와 JavaScript는 페이지 렌더링을 차단할 수 있다. 2. CSSOM 트리 구축(Constructing the CSSOM Tree) CSSOM(CSS Object Model)은 DOM과 연관된 스타일의 Object 표현이다. 이것은 DOM과 비슷한 방식으로 표현되지만 명시적 또는 암시적 선언과 상속 여부에 관계없이 각 노드의 관련 스타일로 표시된다. 위에서 언급한 html 문서의 style.css 파일에는 아래와 같은 style이 정의되어 있다. body { font-size: 18px; } header { color: plum; } h1 { font-size: 28px; } main { color: firebrick; } h2 { font-size: 20px; } footer { display: none; } 위 CSS는 다음과 같은 CSSOM 트리를 생성한다. CSS는 "렌더링 차단 리소스(render blocking resource)"로 간주된다. 즉, 먼저 리소스를 완전히 파싱하지 않으면 렌더링 트리를 구성 할 수 없다. HTML과 달리 CSS는 계단식 상속 특성 때문에 부분적으로 실행될 수 없다. 문서의 뒷부분에 정의된 스타일은 이전에 정의된 스타일을 무시하고 변경할 수 있다. 따라서 스타일 시트 전체가 파싱되기 전에 스타일 시트에서 앞에서 정의한 CSS 스타일을 사용하기 시작하면 잘못된 CSS가 적용되는 상황이 발생할 수 있다. 즉, 다음 단계로 넘어 가기 전에 CSS를 완전히 파싱 해야 한다. CSS 파일은 현재 장치에 적용되는 경우에만 렌더링 차단 리소스로 간주된다. <link rel = "stylesheet"> 태그는 미디어 속성을 받아 들일 수 있다. 미디어 속성은 스타일이 적용되는 미디어 쿼리를 지정할 수 있다. 예를 들어 media 속성이 orientation:landscape 인 스타일 시트가 있고 페이지를 세로 모드로 보고 있는 경우 해당 리소스는 렌더링 차단 리소스로 간주되지 않는다. CSS는 "script blocking"일 수도 있다. 이것은 JavaScript 파일이 실행되기 전에 CSSOM이 생성 될 때까지 기다려야 하기 때문이다. 3. JavaScript 실행(Running JavaScript) JavaScript는 "파서 차단 리소스(parser blocking resource)"로 간주된다. 즉, HTML 문서 자체의 구문 분석은 JavaScript에 의해 차단된다. 파서가 내부 태그이든 외부 태그이든 <script> 태그에 도달하면 (외부 태그 인 경우) fetch를 중단하고 실행한다. 따라서 문서 내의 요소를 참조하는 JavaScript 파일이 있는 경우 해당 문서가 표시된 후에 배치 해야 한다. JavaScript가 파서 차단(parser blocking)되는 것을 피하기 위해 async 속성을 적용하여 비동기적으로 로드 할 수 있다. <script async src="script.js"> 4. 랜더링 트리 구축(Creating the Render Tree) 렌더링 트리는 DOM과 CSSOM의 조합이다. 페이지에서 최종적으로 렌더링 될 내용을 나타내는 트리다. 즉, 표시되는 내용만 캡쳐하가 때문에 display:none을 사용하여 CSS로 숨겨진 요소는 포함하지 않는다. 위의 예제 DOM과 CSSOM을 사용하여 다음 렌더링 트리가 생성된다. 5. 레이아웃 생성(Generating the Layout) 레이아웃은 뷰포트의 크기에 관련된 CSS 스타일에 대한 컨텍스트에 의해 뷰포트의 크기를 결정한다. 비율 또는 뷰포트 단위. 뷰포트 크기는 문서 헤드에 제공된 메타 뷰포트 태그에 의해 결정되거나, 태그가 제공되지 않으면 기본 뷰포트 너비 인 980px가 사용된다. 예를 들어 가장 일반적인 메타 뷰포트 값은 뷰포트 크기를 장치 너비에 맞게 설정하는 것이다. <meta name="viewport" content="width=device-width,initial-scale=1"> 예를 들어 사용자가 너비가 1000px 인 기기에서 웹 페이지를 방문하면 뷰포트 크기는 해당 값을 기반으로 합니다. 뷰포트의 절반은 500px이고, 10vw는 100px이 된다. 6. 페인팅(Painting) 마지막으로 Painting 단계에서 페이지의 가시적인 내용을 픽셀로 변환하여 화면에 표시 할 수 있다. 페인트 단계에서 처리에 걸리는 시간은 DOM의 크기와 적용되는 스타일에 따라 다르다. 어떤 스타일은 다른 스타일보다 더 많은 작업을 필요로 한다. 예를 들어, 복잡한 그래디언트 배경 이미지는 단순한 단색 배경색보다 더 많은 시간을 필요로 한다. 종합(Putting it All Together) Critical Rendering Path를 진행하는 과정을 DevTools로 확인 할 수 있다(Chrome에서는 DevTools의 Performance에서 확인 할 수 있다). 예를 들어 위의 샘플 HTML (<script> 태그가 추가 된 경우) - <html> <head> <title>Understanding the Critical Rendering Path</title> <link rel="stylesheet" href="style.css"> </head> <body> <header> <h1>Understanding the Critical Rendering Path</h1> </header> <main> <h2>Introduction</h2> <p>Lorem ipsum dolor sit amet</p> </main> <footer> <small>Copyright 2017</small> </footer> <script src="main.js"></script> </body> </html> 페이지 로드에 대한 이벤트 로그를 보면 아래와 같은 결과를 볼 수 있다. Send Request - index.html에 대한 GET 요청 전송 Parse HTML and Send Request - HTML 및 DOM 구문 분석을 시작. style.css 및 main.js에 대한 GET 요청 Parse Stylesheet - CSSOM이 style.css 용으로 생성 Evaluate Script - main.js 평가 Layout - HTML의 메타 뷰포트 태그를 기반으로 레이아웃 생성 Paint - 문서의 픽셀을 페인트 이 정보를 바탕으로 Critical Rendering Path를 최적화하는 방법을 결정할 수 있다.]]></summary><content type="html"><![CDATA[<blockquote>
<p>아래의 글은 &quot;<a href="https://bitsofco.de/understanding-the-critical-rendering-path/">Understanding the Critical Rendering Path</a>&quot;의 내용을 번역한 글이다.</p>
</blockquote>
<p>브라우저가 서버에서 페이지에 대한 HTML 응답을 받으면 화면에 표시되기 전에 많은 단계를 거쳐야 한다. 브라우저가 페이지의 초기 출력을 위해 실행해야하는 이 순서를 &quot;Critical Rendering Path&quot;(이하 CRP)라고 한다.</p>
<p>사이트의 성능을 향상시키는 방법을 이해하는데 CRP에 대한 지식은 매우 유용하다. CRP는 아래와 같이 6단계로 구성된다.</p>
<ol>
<li>DOM 트리 구축(Constructing the DOM Tree)</li>
<li>CSSOM 트리 구축(Constructing the CSSOM Tree)</li>
<li>JavaScript 실행(Running JavaScript)</li>
<li>랜더링 트리 구축(Creating the Render Tree)</li>
<li>레이아웃 생성(Generating the Layout)</li>
<li>페인팅(Painting)</li>
</ol>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/understanding-the-critical-rendering-path.png" alt="understanding-the-critical-rendering-path" width="742" height="214" /></p>
<h3>1.  DOM 트리 구축(Constructing the DOM Tree)</h3>
<p>DOM(Document Object Model) 트리는 완전히 구문 분석된 HTML 페이지의 Object 표현이다. 루트 요소 <code>&lt;html&gt;</code>로 시작하여 페이지의 각 element/text에 대한 노드가 만들어진다. 다른 요소 내에 중첩된 요소는 자식 노드로 표시되며 각 노드에는 해당 요소의 전체 특성이 포함된다. 예를 들어, <code>&lt;a&gt;</code> 요소는 노드와 관련된 <code>href</code> 속성을 갖는다.</p>
<p>예를들어 아래의 html 문서를 보자.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style.css"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Introduction<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Copyright 2017<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>  </pre>
<p>위 html 문서는 다음과 같은 DOM 트리를 생성한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/understanding-the-critical-rendering-path-1.png" alt="understanding-the-critical-rendering-path-1" width="780" height="411" /></p>
<p>HTML의 장점은 부분적으로 실행될 수 있다는 것이다. 페이지에 내용이 표시하기 위해 전체 문서를 로드할 필요가 없다. 그러나 다른 리소스인 CSS와 JavaScript는 페이지 렌더링을 차단할 수 있다.</p>
<h3>2. CSSOM 트리 구축(Constructing the CSSOM Tree)</h3>
<p>CSSOM(CSS Object Model)은 DOM과 연관된 스타일의 Object 표현이다. 이것은 DOM과 비슷한 방식으로 표현되지만 명시적 또는 암시적 선언과 상속 여부에 관계없이 각 노드의 관련 스타일로 표시된다.</p>
<p>위에서 언급한 html 문서의 <code>style.css</code> 파일에는 아래와 같은 style이 정의되어 있다.</p>
<pre class="hljs css"><span class="hljs-selector-tag">body</span> { <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>; }

<span class="hljs-selector-tag">header</span> { <span class="hljs-attribute">color</span>: plum; }  
<span class="hljs-selector-tag">h1</span> { <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>; }

<span class="hljs-selector-tag">main</span> { <span class="hljs-attribute">color</span>: firebrick; }  
<span class="hljs-selector-tag">h2</span> { <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>; }

<span class="hljs-selector-tag">footer</span> { <span class="hljs-attribute">display</span>: none; }  </pre>
<p>위 CSS는 다음과 같은 CSSOM 트리를 생성한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/understanding-the-critical-rendering-path-2.png" alt="understanding-the-critical-rendering-path-2" width="780" height="411" /></p>
<p>CSS는 &quot;<strong>렌더링 차단 리소스(render blocking resource)</strong>&quot;로 간주된다. 즉, 먼저 리소스를 완전히 파싱하지 않으면 렌더링 트리를 구성 할 수 없다. HTML과 달리 CSS는 계단식 상속  특성 때문에 부분적으로 실행될 수 없다. 문서의 뒷부분에 정의된 스타일은 이전에 정의된 스타일을 무시하고 변경할 수 있다. 따라서 스타일 시트 전체가 파싱되기 전에 스타일 시트에서 앞에서 정의한 CSS 스타일을 사용하기 시작하면 잘못된 CSS가 적용되는 상황이 발생할 수 있다. 즉, 다음 단계로 넘어 가기 전에 CSS를 완전히 파싱 해야 한다.</p>
<p>CSS 파일은 현재 장치에 적용되는 경우에만 렌더링 차단 리소스로 간주된다. <code>&lt;link rel = "stylesheet"&gt;</code> 태그는 미디어 속성을 받아 들일 수 있다. 미디어 속성은 스타일이 적용되는 미디어 쿼리를 지정할 수 있다. 예를 들어 media 속성이 <code>orientation:landscape</code> 인 스타일 시트가 있고 페이지를 세로 모드로 보고 있는 경우 해당 리소스는 렌더링 차단 리소스로 간주되지 않는다.</p>
<p>CSS는 &quot;script blocking&quot;일 수도 있다. 이것은 JavaScript 파일이 실행되기 전에 CSSOM이 생성 될 때까지 기다려야 하기 때문이다.</p>
<h3>3. JavaScript 실행(Running JavaScript)</h3>
<p>JavaScript는 &quot;<strong>파서 차단 리소스(parser blocking resource)</strong>&quot;로 간주된다. 즉, HTML 문서 자체의 구문 분석은 JavaScript에 의해 차단된다.</p>
<p>파서가 내부 태그이든 외부 태그이든 <code>&lt;script&gt;</code> 태그에 도달하면 (외부 태그 인 경우) fetch를 중단하고 실행한다. 따라서 문서 내의 요소를 참조하는 JavaScript 파일이 있는 경우 해당 문서가 표시된 후에 배치 해야 한다.</p>
<p>JavaScript가 파서 차단(parser blocking)되는 것을 피하기 위해 <code>async</code> 속성을 적용하여 비동기적으로 로드 할 수 있다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"script.js"</span>&gt;</span><span class=""></span></pre>
<h3>4. 랜더링 트리 구축(Creating the Render Tree)</h3>
<p>렌더링 트리는 DOM과 CSSOM의 조합이다. 페이지에서 최종적으로 렌더링 될 내용을 나타내는 트리다. 즉, 표시되는 내용만 캡쳐하가 때문에 <code>display:none</code>을 사용하여 CSS로 숨겨진 요소는 포함하지 않는다.</p>
<p>위의 예제 DOM과 CSSOM을 사용하여 다음 렌더링 트리가 생성된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/understanding-the-critical-rendering-path-3.png" alt="understanding-the-critical-rendering-path-3" width="780" height="411" /></p>
<h3>5. 레이아웃 생성(Generating the Layout)</h3>
<p>레이아웃은 뷰포트의 크기에 관련된 CSS 스타일에 대한 컨텍스트에 의해 뷰포트의 크기를 결정한다. 비율 또는 뷰포트 단위. 뷰포트 크기는 문서 헤드에 제공된 메타 뷰포트 태그에 의해 결정되거나, 태그가 제공되지 않으면 기본 뷰포트 너비 인 980px가 사용된다.</p>
<p>예를 들어 가장 일반적인 메타 뷰포트 값은 뷰포트 크기를 장치 너비에 맞게 설정하는 것이다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width,initial-scale=1"</span>&gt;</span>  </pre>
<p>예를 들어 사용자가 너비가 1000px 인 기기에서 웹 페이지를 방문하면 뷰포트 크기는 해당 값을 기반으로 합니다. 뷰포트의 절반은 500px이고, 10vw는 100px이 된다.</p>
<h3>6. 페인팅(Painting)</h3>
<p>마지막으로 Painting 단계에서 페이지의 가시적인 내용을 픽셀로 변환하여 화면에 표시 할 수 있다.</p>
<p>페인트 단계에서 처리에 걸리는 시간은 DOM의 크기와 적용되는 스타일에 따라 다르다. 어떤 스타일은 다른 스타일보다 더 많은 작업을 필요로 한다. 예를 들어, 복잡한 그래디언트 배경 이미지는 단순한 단색 배경색보다 더 많은 시간을 필요로 한다.</p>
<h3>종합(Putting it All Together)</h3>
<p>Critical Rendering Path를 진행하는 과정을 DevTools로 확인 할 수 있다(Chrome에서는 DevTools의 Performance에서 확인 할 수 있다).</p>
<p>예를 들어 위의 샘플 HTML (<code>&lt;script&gt;</code> 태그가 추가 된 경우) -</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style.css"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Introduction<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Copyright 2017<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"main.js"</span>&gt;</span><span class=""></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>  </pre>
<p>페이지 로드에 대한 이벤트 로그를 보면 아래와 같은 결과를 볼 수 있다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/understanding-the-critical-rendering-path-4.png" alt="understanding-the-critical-rendering-path-4" width="568" height="681" /></p>
<ol>
<li>Send Request - index.html에 대한 GET 요청 전송</li>
<li>Parse HTML and Send Request - HTML 및 DOM 구문 분석을 시작. style.css 및 main.js에 대한 GET 요청</li>
<li>Parse Stylesheet - CSSOM이 style.css 용으로 생성</li>
<li>Evaluate Script - main.js 평가</li>
<li>Layout - HTML의 메타 뷰포트 태그를 기반으로 레이아웃 생성</li>
<li>Paint - 문서의 픽셀을 페인트</li>
</ol>
<p>이 정보를 바탕으로 Critical Rendering Path를 최적화하는 방법을 결정할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/02/absolute-enable-right-click-copy/</id><title type="html">마우스 우클릭/드래그 방지 해제 방법(북마크릿)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/02/absolute-enable-right-click-copy/"/><published>2017-05-02T14:25:31+09:00</published><updated>2017-05-02T15:09:52+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[웹사이트를 서핑하다가 필요한 내용이 있어 복사하려고 하면 우클릭이나 드래그를 막아놔서 복사를 할 수 없도록 하는 사이트들이 있다. 이런 경우라면 javascript를 끄고 해당 사이트를 방문하면 대부분 복사가 가능하다. 하지만 매번 이렇게 하기에는 귀찮다. 그래서 찾아보니 기존에 돌아다니는 우클릭 해제에 관련된 스크립트들은 대부분이 지금은 동작하지 않았다. 그래서 그런대로 잘 동작하는 스크립트를 가져다가 조금 개선해서 gist에 올려 놨다. 코드를 소개하기에 앞서 무단 복제는 지양하기를 바란다. 나도 나름의 콘텐츠를 생산하는 입장에서 불펌은 반대한다. 내용을 퍼간다면 최소한 출처를 남겨주는 예의만이라도... 다만, 개발 관련된 문서를 보다 보면 소개한 내용 중 일부(쉘 명령어 등)을 복사해서 사용해야 하는데 복사하기가 막혀 너무 불편한 부분을 해소하기 위해 만든 것이다. 일단 원 소스는 asamaru7/right-click.js에 공개되어 있으니 개선이 필요한 부분은 직접 개선해서 사용해도 된다. 위 소스를 북마크릿으로 변형한 소스는 아래와 같다. javascript:(function () %7B%0A%09if (window.subvaAllowRightClick === undefined) %7B%0A%09%09// https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code%0A%09%09window.subvaAllowRightClick = function (dom) %7B%0A%09%09%09(function GetSelection() %7B%0A%09%09%09%09var Style = dom.createElement('style');%0A%09%09%09%09Style.type = 'text/css';%0A%09%09%09%09var TextNode = '*%7Buser-select:text!important;-webkit-user-select:text!important;%7D';%0A%09%09%09%09if (Style.styleSheet) %7B%0A%09%09%09%09%09Style.styleSheet.cssText = TextNode;%0A%09%09%09%09%7D%0A%09%09%09%09else %7B%0A%09%09%09%09%09Style.appendChild(dom.createTextNode(TextNode));%0A%09%09%09%09%7D%0A%09%09%09%09dom.getElementsByTagName('head')%5B0%5D.appendChild(Style);%0A%09%09%09%7D)();%0A%0A%09%09%09(function SetEvents() %7B%0A%09%09%09%09var events = %5B'copy', 'cut', 'paste', 'select', 'selectstart'%5D;%0A%09%09%09%09for (var i = 0; i < events.length; i++)%0A%09%09%09%09%09dom.addEventListener(events%5Bi%5D, function (e) %7B%0A%09%09%09%09%09%09e.stopPropagation();%0A%09%09%09%09%09%7D, true);%0A%09%09%09%7D)();%0A%0A%09%09%09(function RestoreEvents() %7B%0A%09%09%09%09var n = null;%0A%09%09%09%09var d = document;%0A%09%09%09%09var b = dom.body;%0A%09%09%09%09var SetEvents = %5Bd.oncontextmenu = n, d.onselectstart = n, d.ondragstart = n, d.onmousedown = n%5D;%0A%09%09%09%09var GetEvents = %5Bb.oncontextmenu = n, b.onselectstart = n, b.ondragstart = n, b.onmousedown = n, b.oncut = n, b.oncopy = n, b.onpaste = n%5D;%0A%09%09%09%7D)();%0A%0A%09%09%09(function RightClickButton() %7B%0A%09%09%09%09setTimeout(function () %7B%0A%09%09%09%09%09dom.oncontextmenu = null;%0A%09%09%09%09%7D, 2000);%0A%09%09%09%09function EventsCall(callback) %7B%0A%09%09%09%09%09this.events = %5B'DOMAttrModified', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMCharacterDataModified', 'DOMSubtreeModified'%5D;%0A%09%09%09%09%09this.bind();%0A%09%09%09%09%7D%0A%0A%09%09%09%09EventsCall.prototype.bind = function () %7B%0A%09%09%09%09%09this.events.forEach(function (event) %7B%0A%09%09%09%09%09%09dom.addEventListener(event, this, true);%0A%09%09%09%09%09%7D.bind(this));%0A%09%09%09%09%7D;%0A%09%09%09%09EventsCall.prototype.handleEvent = function () %7B%0A%09%09%09%09%09this.isCalled = true;%0A%09%09%09%09%7D;%0A%09%09%09%09EventsCall.prototype.unbind = function () %7B%0A%09%09%09%09%09this.events.forEach(function (event) %7B%0A%09%09%09%09%09%7D.bind(this));%0A%09%09%09%09%7D;%0A%09%09%09%09function EventHandler(event) %7B%0A%09%09%09%09%09this.event = event;%0A%09%09%09%09%09this.contextmenuEvent = this.createEvent(this.event.type);%0A%09%09%09%09%7D%0A%0A%09%09%09%09EventHandler.prototype.createEvent = function (type) %7B%0A%09%09%09%09%09var target = this.event.target;%0A%09%09%09%09%09var event = target.ownerDocument.createEvent('MouseEvents');%0A%09%09%09%09%09event.initMouseEvent(type, this.event.bubbles, this.event.cancelable,%0A%09%09%09%09%09%09target.ownerDocument.defaultView, this.event.detail,%0A%09%09%09%09%09%09this.event.screenX, this.event.screenY, this.event.clientX, this.event.clientY,%0A%09%09%09%09%09%09this.event.ctrlKey, this.event.altKey, this.event.shiftKey, this.event.metaKey,%0A%09%09%09%09%09%09this.event.button, this.event.relatedTarget);%0A%09%09%09%09%09return event;%0A%09%09%09%09%7D;%0A%09%09%09%09EventHandler.prototype.fire = function () %7B%0A%09%09%09%09%09var target = this.event.target;%0A%09%09%09%09%09var contextmenuHandler = function (event) %7B%0A%09%09%09%09%09%09event.preventDefault();%0A%09%09%09%09%09%7D.bind(this);%0A%09%09%09%09%09target.dispatchEvent(this.contextmenuEvent);%0A%09%09%09%09%09this.isCanceled = this.contextmenuEvent.defaultPrevented;%0A%09%09%09%09%7D;%0A%09%09%09%09window.addEventListener('contextmenu', handleEvent, true);%0A%09%09%09%09function handleEvent(event) %7B%0A%09%09%09%09%09event.stopPropagation();%0A%09%09%09%09%09event.stopImmediatePropagation();%0A%09%09%09%09%09var handler = new EventHandler(event);%0A%09%09%09%09%09window.removeEventListener(event.type, handleEvent, true);%0A%09%09%09%09%09var EventsCallBback = new EventsCall(function () %7B%0A%09%09%09%09%09%7D);%0A%09%09%09%09%09handler.fire();%0A%09%09%09%09%09window.addEventListener(event.type, handleEvent, true);%0A%09%09%09%09%09if (handler.isCanceled && (EventsCallBback.isCalled))%0A%09%09%09%09%09%09event.preventDefault();%0A%09%09%09%09%7D%0A%09%09%09%7D)();%0A%0A%09%09%09// function KeyPress(e) %7B%0A%09%09%09// %09if (e.altKey && e.ctrlKey) %7B%0A%09%09%09// %09%09if (confirm("Activate Absolute Right Click Mode!") === true) %7B%0A%09%09%09// %09%09%09Absolute_Mod();%0A%09%09%09// %09%09%7D%0A%09%09%09// %09%7D%0A%09%09%09// %7D%0A%09%09%09// dom.addEventListener("keydown", KeyPress);%0A%0A%09%09%09(function Absolute_Mod() %7B%0A%09%09%09%09var events = %5B'contextmenu', 'copy', 'cut', 'paste', 'mouseup', 'mousedown', 'keyup', 'keydown', 'drag', 'dragstart', 'select', 'selectstart'%5D;%0A%09%09%09%09for (var i = 0; i < events.length; i++) %7B%0A%09%09%09%09%09dom.addEventListener(events%5Bi%5D, function (e) %7B%0A%09%09%09%09%09%09e.stopPropagation();%0A%09%09%09%09%09%7D, true);%0A%09%09%09%09%7D%0A%09%09%09%7D)();%0A%09%09%7D;%0A%0A//%09%09window.subvaAllowRightClick(document);%0A%0A%09%09function runAll(w) %7B%0A%09%09%09try %7B%0A%09%09%09%09window.subvaAllowRightClick(w.document);%0A%09%09%09%7D catch (e) %7B%0A%09%09%09%7D%0A%09%09%09for (var i = 0; i < w.frames.length; i++) %7B%0A%09%09%09%09runAll(w.frames%5Bi%5D);%0A%09%09%09%7D%0A%09%09%7D%0A%09%7D%0A%09runAll(window);%0A%7D)(); 사용하는 브라우저에서 북마크를 하나 만들고 위 소스를 복사해서 url에 입력하면 된다. 사용 방법은 당연히 우클릭이 막힌 페이지에 가서 새로 만든 북마크를 누르면 해당 페이지에서 우클릭을 사용할 수 있다. 위 방법이 어렵다면 "북마크릿 생성기-우클릭 해제"에 가서 아래쪽에 있는 "DRAG INTO YOUR BOOKMARK-TOOLBAR" 링크를 드래그해서 북마크바에 올려 놓으면 자동 추가된다. gist에 공개되어 있지만 여기에도 소스를 남겨둔다. (function () { if (window.subvaAllowRightClick === undefined) { // https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code window.subvaAllowRightClick = function (dom) { (function GetSelection() { var Style = dom.createElement('style'); Style.type = 'text/css'; var TextNode = '*{user-select:text!important;-webkit-user-select:text!important;}'; if (Style.styleSheet) { Style.styleSheet.cssText = TextNode; } else { Style.appendChild(dom.createTextNode(TextNode)); } dom.getElementsByTagName('head')[0].appendChild(Style); })(); (function SetEvents() { var events = ['copy', 'cut', 'paste', 'select', 'selectstart']; for (var i = 0; i < events.length; i++) dom.addEventListener(events[i], function (e) { e.stopPropagation(); }, true); })(); (function RestoreEvents() { var n = null; var d = document; var b = dom.body; var SetEvents = [d.oncontextmenu = n, d.onselectstart = n, d.ondragstart = n, d.onmousedown = n]; var GetEvents = [b.oncontextmenu = n, b.onselectstart = n, b.ondragstart = n, b.onmousedown = n, b.oncut = n, b.oncopy = n, b.onpaste = n]; })(); (function RightClickButton() { setTimeout(function () { dom.oncontextmenu = null; }, 2000); function EventsCall(callback) { this.events = ['DOMAttrModified', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMCharacterDataModified', 'DOMSubtreeModified']; this.bind(); } EventsCall.prototype.bind = function () { this.events.forEach(function (event) { dom.addEventListener(event, this, true); }.bind(this)); }; EventsCall.prototype.handleEvent = function () { this.isCalled = true; }; EventsCall.prototype.unbind = function () { this.events.forEach(function (event) { }.bind(this)); }; function EventHandler(event) { this.event = event; this.contextmenuEvent = this.createEvent(this.event.type); } EventHandler.prototype.createEvent = function (type) { var target = this.event.target; var event = target.ownerDocument.createEvent('MouseEvents'); event.initMouseEvent(type, this.event.bubbles, this.event.cancelable, target.ownerDocument.defaultView, this.event.detail, this.event.screenX, this.event.screenY, this.event.clientX, this.event.clientY, this.event.ctrlKey, this.event.altKey, this.event.shiftKey, this.event.metaKey, this.event.button, this.event.relatedTarget); return event; }; EventHandler.prototype.fire = function () { var target = this.event.target; var contextmenuHandler = function (event) { event.preventDefault(); }.bind(this); target.dispatchEvent(this.contextmenuEvent); this.isCanceled = this.contextmenuEvent.defaultPrevented; }; window.addEventListener('contextmenu', handleEvent, true); function handleEvent(event) { event.stopPropagation(); event.stopImmediatePropagation(); var handler = new EventHandler(event); window.removeEventListener(event.type, handleEvent, true); var EventsCallBback = new EventsCall(function () { }); handler.fire(); window.addEventListener(event.type, handleEvent, true); if (handler.isCanceled && (EventsCallBback.isCalled)) event.preventDefault(); } })(); // function KeyPress(e) { // if (e.altKey && e.ctrlKey) { // if (confirm("Activate Absolute Right Click Mode!") === true) { // Absolute_Mod(); // } // } // } // dom.addEventListener("keydown", KeyPress); (function Absolute_Mod() { var events = ['contextmenu', 'copy', 'cut', 'paste', 'mouseup', 'mousedown', 'keyup', 'keydown', 'drag', 'dragstart', 'select', 'selectstart']; for (var i = 0; i < events.length; i++) { dom.addEventListener(events[i], function (e) { e.stopPropagation(); }, true); } })(); }; // window.subvaAllowRightClick(document); function runAll(w) { try { window.subvaAllowRightClick(w.document); } catch (e) { } for (var i = 0; i < w.frames.length; i++) { runAll(w.frames[i]); } } } runAll(window); })();]]></summary><content type="html"><![CDATA[<p>웹사이트를 서핑하다가 필요한 내용이 있어 복사하려고 하면 우클릭이나 드래그를 막아놔서 복사를 할 수 없도록 하는 사이트들이 있다. 이런 경우라면 javascript를 끄고 해당 사이트를 방문하면 대부분 복사가 가능하다.</p>
<p>하지만 매번 이렇게 하기에는 귀찮다. 그래서 찾아보니 기존에 돌아다니는 우클릭 해제에 관련된 스크립트들은 대부분이 지금은 동작하지 않았다. 그래서 <a href="https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code">그런대로 잘 동작하는 스크립트</a>를 가져다가 조금 개선해서 <a href="https://gist.github.com/asamaru7/ebab2459eaae6d33f87dba328d435a84">gist</a>에 올려 놨다.</p>
<p>코드를 소개하기에 앞서 무단 복제는 지양하기를 바란다. 나도 나름의 콘텐츠를 생산하는 입장에서 불펌은 반대한다. 내용을 퍼간다면 최소한 출처를 남겨주는 예의만이라도...
다만, 개발 관련된 문서를 보다 보면 소개한 내용 중 일부(쉘 명령어 등)을 복사해서 사용해야 하는데 복사하기가 막혀 너무 불편한 부분을 해소하기 위해 만든 것이다.</p>
<p>일단 원 소스는 <a href="https://gist.github.com/asamaru7/ebab2459eaae6d33f87dba328d435a84">asamaru7/right-click.js</a>에 공개되어 있으니 개선이 필요한 부분은 직접 개선해서 사용해도 된다.</p>
<p>위 소스를 북마크릿으로 변형한 소스는 아래와 같다.</p>
<pre class="hljs javascript">javascript:(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09<span class="hljs-title">if</span> (<span class="hljs-params">window.subvaAllowRightClick === undefined</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09// <span class="hljs-title">https</span>://<span class="hljs-title">greasyfork</span>.<span class="hljs-title">org</span>/<span class="hljs-title">en</span>/<span class="hljs-title">scripts</span>/23772-<span class="hljs-title">absolute</span>-<span class="hljs-title">enable</span>-<span class="hljs-title">right</span>-<span class="hljs-title">click</span>-<span class="hljs-title">copy</span>/<span class="hljs-title">code</span>%0<span class="hljs-title">A</span>%09%09<span class="hljs-title">window</span>.<span class="hljs-title">subvaAllowRightClick</span> = <span class="hljs-title">function</span> (<span class="hljs-params">dom</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function GetSelection(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">Style</span> = <span class="hljs-title">dom</span>.<span class="hljs-title">createElement</span>(<span class="hljs-params"><span class="hljs-string">'style'</span></span>);%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">Style</span>.<span class="hljs-title">type</span> = '<span class="hljs-title">text</span>/<span class="hljs-title">css</span>';%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">TextNode</span> = '*%7<span class="hljs-title">Buser</span>-<span class="hljs-title">select</span>:<span class="hljs-title">text</span>!<span class="hljs-title">important</span>;-<span class="hljs-title">webkit</span>-<span class="hljs-title">user</span>-<span class="hljs-title">select</span>:<span class="hljs-title">text</span>!<span class="hljs-title">important</span>;%7<span class="hljs-title">D</span>';%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">if</span> (<span class="hljs-params">Style.styleSheet</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">Style</span>.<span class="hljs-title">styleSheet</span>.<span class="hljs-title">cssText</span> = <span class="hljs-title">TextNode</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">else</span> %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">Style</span>.<span class="hljs-title">appendChild</span>(<span class="hljs-params">dom.createTextNode(TextNode</span>));%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">getElementsByTagName</span>(<span class="hljs-params"><span class="hljs-string">'head'</span></span>)%5<span class="hljs-title">B0</span>%5<span class="hljs-title">D</span>.<span class="hljs-title">appendChild</span>(<span class="hljs-params">Style</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function SetEvents(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">events</span> = %5<span class="hljs-title">B</span>'<span class="hljs-title">copy</span>', '<span class="hljs-title">cut</span>', '<span class="hljs-title">paste</span>', '<span class="hljs-title">select</span>', '<span class="hljs-title">selectstart</span>'%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">for</span> (<span class="hljs-params">var i = <span class="hljs-number">0</span>; i &lt; events.length; i++</span>)%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">events%<span class="hljs-number">5</span>Bi%<span class="hljs-number">5</span>D, function (e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">e</span>.<span class="hljs-title">stopPropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>, <span class="hljs-title">true</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function RestoreEvents(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">n</span> = <span class="hljs-title">null</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">d</span> = <span class="hljs-title">document</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">b</span> = <span class="hljs-title">dom</span>.<span class="hljs-title">body</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">SetEvents</span> = %5<span class="hljs-title">Bd</span>.<span class="hljs-title">oncontextmenu</span> = <span class="hljs-title">n</span>, <span class="hljs-title">d</span>.<span class="hljs-title">onselectstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">d</span>.<span class="hljs-title">ondragstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">d</span>.<span class="hljs-title">onmousedown</span> = <span class="hljs-title">n</span>%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">GetEvents</span> = %5<span class="hljs-title">Bb</span>.<span class="hljs-title">oncontextmenu</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">onselectstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">ondragstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">onmousedown</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">oncut</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">oncopy</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">onpaste</span> = <span class="hljs-title">n</span>%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function RightClickButton(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">setTimeout</span>(<span class="hljs-params">function (</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">oncontextmenu</span> = <span class="hljs-title">null</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>, 2000);%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">function</span> <span class="hljs-title">EventsCall</span>(<span class="hljs-params">callback</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">events</span> = %5<span class="hljs-title">B</span>'<span class="hljs-title">DOMAttrModified</span>', '<span class="hljs-title">DOMNodeInserted</span>', '<span class="hljs-title">DOMNodeRemoved</span>', '<span class="hljs-title">DOMCharacterDataModified</span>', '<span class="hljs-title">DOMSubtreeModified</span>'%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">bind</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventsCall</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">bind</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">events</span>.<span class="hljs-title">forEach</span>(<span class="hljs-params">function (event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">event, this, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>.<span class="hljs-title">bind</span>(<span class="hljs-params">this</span>));%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventsCall</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">handleEvent</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">isCalled</span> = <span class="hljs-title">true</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventsCall</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">unbind</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">events</span>.<span class="hljs-title">forEach</span>(<span class="hljs-params">function (event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>.<span class="hljs-title">bind</span>(<span class="hljs-params">this</span>));%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">function</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">event</span> = <span class="hljs-title">event</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">contextmenuEvent</span> = <span class="hljs-title">this</span>.<span class="hljs-title">createEvent</span>(<span class="hljs-params">this.event.type</span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventHandler</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">createEvent</span> = <span class="hljs-title">function</span> (<span class="hljs-params">type</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">target</span> = <span class="hljs-title">this</span>.<span class="hljs-title">event</span>.<span class="hljs-title">target</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">event</span> = <span class="hljs-title">target</span>.<span class="hljs-title">ownerDocument</span>.<span class="hljs-title">createEvent</span>(<span class="hljs-params"><span class="hljs-string">'MouseEvents'</span></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">initMouseEvent</span>(<span class="hljs-params">type, this.event.bubbles, this.event.cancelable,%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>target.ownerDocument.defaultView, this.event.detail,%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>this.event.screenX, this.event.screenY, this.event.clientX, this.event.clientY,%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>this.event.ctrlKey, this.event.altKey, this.event.shiftKey, this.event.metaKey,%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>this.event.button, this.event.relatedTarget</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">return</span> <span class="hljs-title">event</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventHandler</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">fire</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">target</span> = <span class="hljs-title">this</span>.<span class="hljs-title">event</span>.<span class="hljs-title">target</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">contextmenuHandler</span> = <span class="hljs-title">function</span> (<span class="hljs-params">event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">preventDefault</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>.<span class="hljs-title">bind</span>(<span class="hljs-params">this</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">target</span>.<span class="hljs-title">dispatchEvent</span>(<span class="hljs-params">this.contextmenuEvent</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">isCanceled</span> = <span class="hljs-title">this</span>.<span class="hljs-title">contextmenuEvent</span>.<span class="hljs-title">defaultPrevented</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params"><span class="hljs-string">'contextmenu'</span>, handleEvent, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">function</span> <span class="hljs-title">handleEvent</span>(<span class="hljs-params">event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">stopPropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">stopImmediatePropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">handler</span> = <span class="hljs-title">new</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">event</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">removeEventListener</span>(<span class="hljs-params">event.type, handleEvent, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">EventsCallBback</span> = <span class="hljs-title">new</span> <span class="hljs-title">EventsCall</span>(<span class="hljs-params">function (</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">handler</span>.<span class="hljs-title">fire</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">event.type, handleEvent, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">if</span> (<span class="hljs-params">handler.isCanceled &amp;&amp; (EventsCallBback.isCalled</span>))%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">preventDefault</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09// <span class="hljs-title">function</span> <span class="hljs-title">KeyPress</span>(<span class="hljs-params">e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09// %09<span class="hljs-title">if</span> (<span class="hljs-params">e.altKey &amp;&amp; e.ctrlKey</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09// %09%09<span class="hljs-title">if</span> (<span class="hljs-params">confirm(<span class="hljs-string">"Activate Absolute Right Click Mode!"</span></span>) === <span class="hljs-title">true</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09// %09%09%09<span class="hljs-title">Absolute_Mod</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09// %09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09// %09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09// %7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09// <span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params"><span class="hljs-string">"keydown"</span>, KeyPress</span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function Absolute_Mod(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">events</span> = %5<span class="hljs-title">B</span>'<span class="hljs-title">contextmenu</span>', '<span class="hljs-title">copy</span>', '<span class="hljs-title">cut</span>', '<span class="hljs-title">paste</span>', '<span class="hljs-title">mouseup</span>', '<span class="hljs-title">mousedown</span>', '<span class="hljs-title">keyup</span>', '<span class="hljs-title">keydown</span>', '<span class="hljs-title">drag</span>', '<span class="hljs-title">dragstart</span>', '<span class="hljs-title">select</span>', '<span class="hljs-title">selectstart</span>'%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">for</span> (<span class="hljs-params">var i = <span class="hljs-number">0</span>; i &lt; events.length; i++</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">events%<span class="hljs-number">5</span>Bi%<span class="hljs-number">5</span>D, function (e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">e</span>.<span class="hljs-title">stopPropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>, <span class="hljs-title">true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>//%09%09<span class="hljs-title">window</span>.<span class="hljs-title">subvaAllowRightClick</span>(<span class="hljs-params">document</span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09<span class="hljs-title">function</span> <span class="hljs-title">runAll</span>(<span class="hljs-params">w</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09<span class="hljs-title">try</span> %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">subvaAllowRightClick</span>(<span class="hljs-params">w.document</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span> <span class="hljs-title">catch</span> (<span class="hljs-params">e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09<span class="hljs-title">for</span> (<span class="hljs-params">var i = <span class="hljs-number">0</span>; i &lt; w.frames.length; i++</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">runAll</span>(<span class="hljs-params">w.frames%<span class="hljs-number">5</span>Bi%<span class="hljs-number">5</span>D</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09<span class="hljs-title">runAll</span>(<span class="hljs-params">window</span>);%0<span class="hljs-title">A</span>%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);</span></pre>
<p>사용하는 브라우저에서 북마크를 하나 만들고 위 소스를 복사해서 url에 입력하면 된다. 사용 방법은 당연히 우클릭이 막힌 페이지에 가서 새로 만든 북마크를 누르면 해당 페이지에서 우클릭을 사용할 수 있다.</p>
<p>위 방법이 어렵다면 &quot;<a href="https://bookmarklet.asamaru.net/recipes/right-click/">북마크릿 생성기-우클릭 해제</a>&quot;에 가서 아래쪽에 있는 &quot;DRAG INTO YOUR BOOKMARK-TOOLBAR&quot; 링크를 드래그해서 북마크바에 올려 놓으면 자동 추가된다.</p>
<p>gist에 공개되어 있지만 여기에도 소스를 남겨둔다.</p>
<pre class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.subvaAllowRightClick === <span class="hljs-literal">undefined</span>) {
        <span class="hljs-comment">// https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code</span>
        <span class="hljs-built_in">window</span>.subvaAllowRightClick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">dom</span>) </span>{
            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetSelection</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> Style = dom.createElement(<span class="hljs-string">'style'</span>);
                Style.type = <span class="hljs-string">'text/css'</span>;
                <span class="hljs-keyword">var</span> TextNode = <span class="hljs-string">'*{user-select:text!important;-webkit-user-select:text!important;}'</span>;
                <span class="hljs-keyword">if</span> (Style.styleSheet) {
                    Style.styleSheet.cssText = TextNode;
                }
                <span class="hljs-keyword">else</span> {
                    Style.appendChild(dom.createTextNode(TextNode));
                }
                dom.getElementsByTagName(<span class="hljs-string">'head'</span>)[<span class="hljs-number">0</span>].appendChild(Style);
            })();

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SetEvents</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> events = [<span class="hljs-string">'copy'</span>, <span class="hljs-string">'cut'</span>, <span class="hljs-string">'paste'</span>, <span class="hljs-string">'select'</span>, <span class="hljs-string">'selectstart'</span>];
                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; events.length; i++)
                    dom.addEventListener(events[i], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{
                        e.stopPropagation();
                    }, <span class="hljs-literal">true</span>);
            })();

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RestoreEvents</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> n = <span class="hljs-literal">null</span>;
                <span class="hljs-keyword">var</span> d = <span class="hljs-built_in">document</span>;
                <span class="hljs-keyword">var</span> b = dom.body;
                <span class="hljs-keyword">var</span> SetEvents = [d.oncontextmenu = n, d.onselectstart = n, d.ondragstart = n, d.onmousedown = n];
                <span class="hljs-keyword">var</span> GetEvents = [b.oncontextmenu = n, b.onselectstart = n, b.ondragstart = n, b.onmousedown = n, b.oncut = n, b.oncopy = n, b.onpaste = n];
            })();

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RightClickButton</span>(<span class="hljs-params"></span>) </span>{
                setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    dom.oncontextmenu = <span class="hljs-literal">null</span>;
                }, <span class="hljs-number">2000</span>);
                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">EventsCall</span>(<span class="hljs-params">callback</span>) </span>{
                    <span class="hljs-keyword">this</span>.events = [<span class="hljs-string">'DOMAttrModified'</span>, <span class="hljs-string">'DOMNodeInserted'</span>, <span class="hljs-string">'DOMNodeRemoved'</span>, <span class="hljs-string">'DOMCharacterDataModified'</span>, <span class="hljs-string">'DOMSubtreeModified'</span>];
                    <span class="hljs-keyword">this</span>.bind();
                }

                EventsCall.prototype.bind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">this</span>.events.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{
                        dom.addEventListener(event, <span class="hljs-keyword">this</span>, <span class="hljs-literal">true</span>);
                    }.bind(<span class="hljs-keyword">this</span>));
                };
                EventsCall.prototype.handleEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">this</span>.isCalled = <span class="hljs-literal">true</span>;
                };
                EventsCall.prototype.unbind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">this</span>.events.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{
                    }.bind(<span class="hljs-keyword">this</span>));
                };
                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">event</span>) </span>{
                    <span class="hljs-keyword">this</span>.event = event;
                    <span class="hljs-keyword">this</span>.contextmenuEvent = <span class="hljs-keyword">this</span>.createEvent(<span class="hljs-keyword">this</span>.event.type);
                }

                EventHandler.prototype.createEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">type</span>) </span>{
                    <span class="hljs-keyword">var</span> target = <span class="hljs-keyword">this</span>.event.target;
                    <span class="hljs-keyword">var</span> event = target.ownerDocument.createEvent(<span class="hljs-string">'MouseEvents'</span>);
                    event.initMouseEvent(type, <span class="hljs-keyword">this</span>.event.bubbles, <span class="hljs-keyword">this</span>.event.cancelable,
                        target.ownerDocument.defaultView, <span class="hljs-keyword">this</span>.event.detail,
                        <span class="hljs-keyword">this</span>.event.screenX, <span class="hljs-keyword">this</span>.event.screenY, <span class="hljs-keyword">this</span>.event.clientX, <span class="hljs-keyword">this</span>.event.clientY,
                        <span class="hljs-keyword">this</span>.event.ctrlKey, <span class="hljs-keyword">this</span>.event.altKey, <span class="hljs-keyword">this</span>.event.shiftKey, <span class="hljs-keyword">this</span>.event.metaKey,
                        <span class="hljs-keyword">this</span>.event.button, <span class="hljs-keyword">this</span>.event.relatedTarget);
                    <span class="hljs-keyword">return</span> event;
                };
                EventHandler.prototype.fire = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">var</span> target = <span class="hljs-keyword">this</span>.event.target;
                    <span class="hljs-keyword">var</span> contextmenuHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{
                        event.preventDefault();
                    }.bind(<span class="hljs-keyword">this</span>);
                    target.dispatchEvent(<span class="hljs-keyword">this</span>.contextmenuEvent);
                    <span class="hljs-keyword">this</span>.isCanceled = <span class="hljs-keyword">this</span>.contextmenuEvent.defaultPrevented;
                };
                <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'contextmenu'</span>, handleEvent, <span class="hljs-literal">true</span>);
                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleEvent</span>(<span class="hljs-params">event</span>) </span>{
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    <span class="hljs-keyword">var</span> handler = <span class="hljs-keyword">new</span> EventHandler(event);
                    <span class="hljs-built_in">window</span>.removeEventListener(event.type, handleEvent, <span class="hljs-literal">true</span>);
                    <span class="hljs-keyword">var</span> EventsCallBback = <span class="hljs-keyword">new</span> EventsCall(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    });
                    handler.fire();
                    <span class="hljs-built_in">window</span>.addEventListener(event.type, handleEvent, <span class="hljs-literal">true</span>);
                    <span class="hljs-keyword">if</span> (handler.isCanceled &amp;&amp; (EventsCallBback.isCalled))
                        event.preventDefault();
                }
            })();

            <span class="hljs-comment">// function KeyPress(e) {</span>
            <span class="hljs-comment">//  if (e.altKey &amp;&amp; e.ctrlKey) {</span>
            <span class="hljs-comment">//      if (confirm("Activate Absolute Right Click Mode!") === true) {</span>
            <span class="hljs-comment">//          Absolute_Mod();</span>
            <span class="hljs-comment">//      }</span>
            <span class="hljs-comment">//  }</span>
            <span class="hljs-comment">// }</span>
            <span class="hljs-comment">// dom.addEventListener("keydown", KeyPress);</span>

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Absolute_Mod</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> events = [<span class="hljs-string">'contextmenu'</span>, <span class="hljs-string">'copy'</span>, <span class="hljs-string">'cut'</span>, <span class="hljs-string">'paste'</span>, <span class="hljs-string">'mouseup'</span>, <span class="hljs-string">'mousedown'</span>, <span class="hljs-string">'keyup'</span>, <span class="hljs-string">'keydown'</span>, <span class="hljs-string">'drag'</span>, <span class="hljs-string">'dragstart'</span>, <span class="hljs-string">'select'</span>, <span class="hljs-string">'selectstart'</span>];
                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; events.length; i++) {
                    dom.addEventListener(events[i], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{
                        e.stopPropagation();
                    }, <span class="hljs-literal">true</span>);
                }
            })();
        };

<span class="hljs-comment">//      window.subvaAllowRightClick(document);</span>

        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAll</span>(<span class="hljs-params">w</span>) </span>{
            <span class="hljs-keyword">try</span> {
                <span class="hljs-built_in">window</span>.subvaAllowRightClick(w.document);
            } <span class="hljs-keyword">catch</span> (e) {
            }
            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; w.frames.length; i++) {
                runAll(w.frames[i]);
            }
        }
    }
    runAll(<span class="hljs-built_in">window</span>);
})();</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/02/virtualbox-5-1-20-vagrant-shared-folders-mount-error/</id><title type="html">VirtualBox 5.1.20 버전업 후 Vagrant Shared Folders mount 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/02/virtualbox-5-1-20-vagrant-shared-folders-mount-error/"/><published>2017-05-02T13:51:56+09:00</published><updated>2017-05-02T14:02:44+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[개발 환경 구성을 위해 Vagrant를 사용중이다. 그런데 얼마전 VirtualBox를 5.1.20으로 업데이트하고 나니 Shared Folders를 mount 하는 과정에서 오류가 발생했다. Vagrant was unable to mount VirtualBox shared folders. This is usually because the filesystem "vboxsf" is not available. This filesystem is made available via the VirtualBox Guest Additions and kernel module. Please verify that these guest additions are properly installed in the guest. This is not a bug in Vagrant and is usually caused by a faulty Vagrant box. For context, the command attempted was: mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant The error output from the command was: mount: wrong fs type, bad option, bad superblock on vagrant, missing codepage or helper program, or other error In some cases useful info is found in syslog - try dmesg | tail or so. 나의 경우는 shared folders를 사용하지 않고 nfs mount를 사용하고 있어 사용 상에 문제가 되는 부분은 없었으나 실행시 마다 오류가 나타나는 것도 보기 싫고 vagrant up을 한번 더 해줘야 시작시 실행되는 스크립트가 정상 실행되었기 때문에 해결하기 위해 찾아봤다(사실 비슷한 문제에 대해 "VirtualBox 버전업 후 Vagrant synced_folder 설정에서 오류가 날 경우"라는 글을 쓴 적이 있었지만 이번엔 다른 문제였다). 검색해보니 일본어로 되어 있긴 하지만 "VirtualBox 5.1.20で共有フォルダーが動かなくなる対策" 글에 해결 방법이 나와 있었다. 간단한 해결 방법을 소개하자면 아래의 명령을 vagrant vm 내부에서 실행하면 된다. sudo rm /sbin/mount.vboxsf && sudo ln -s /usr/lib/VBoxGuestAdditions/mount.vboxsf /sbin/mount.vboxsf 이후에 vagrant를 재시작 해주면 문제는 해결된다. 재시작하기 싫다면 아래의 명령을 추가로 실행해서 즉시 mount 하는 것도 가능하다. sudo mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant]]></summary><content type="html"><![CDATA[<p>개발 환경 구성을 위해 <a href="https://www.vagrantup.com/">Vagrant</a>를 사용중이다. 그런데 얼마전 VirtualBox를 5.1.20으로 업데이트하고 나니 Shared Folders를 mount 하는 과정에서 오류가 발생했다.</p>
<pre><code>Vagrant was unable to mount VirtualBox shared folders. This is usually
because the filesystem "vboxsf" is not available. This filesystem is
made available via the VirtualBox Guest Additions and kernel module.
Please verify that these guest additions are properly installed in the
guest. This is not a bug in Vagrant and is usually caused by a faulty
Vagrant box. For context, the command attempted was:

mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant

The error output from the command was:

mount: wrong fs type, bad option, bad superblock on vagrant,
       missing codepage or helper program, or other error

       In some cases useful info is found in syslog - try
       dmesg | tail or so.</code></pre>
<p>나의 경우는 shared folders를 사용하지 않고 nfs mount를 사용하고 있어 사용 상에 문제가 되는 부분은 없었으나 실행시 마다 오류가 나타나는 것도 보기 싫고 <code>vagrant up</code>을 한번 더 해줘야 시작시 실행되는 스크립트가 정상 실행되었기 때문에 해결하기 위해 찾아봤다(사실 비슷한 문제에 대해 &quot;<a href="https://blog.asamaru.net/2015/12/02/vagrant-cant-mount-shared-folder/">VirtualBox 버전업 후 Vagrant synced_folder 설정에서 오류가 날 경우</a>&quot;라는 글을 쓴 적이 있었지만 이번엔 다른 문제였다).</p>
<p>검색해보니 일본어로 되어 있긴 하지만 &quot;<a href="http://qiita.com/poad1010/items/675ffe46e70135fff839">VirtualBox 5.1.20で共有フォルダーが動かなくなる対策</a>&quot; 글에 해결 방법이 나와 있었다.</p>
<p>간단한 해결 방법을 소개하자면 아래의 명령을 vagrant vm 내부에서 실행하면 된다.</p>
<pre class="hljs bash">sudo rm /sbin/mount.vboxsf &amp;&amp; sudo ln -s /usr/lib/VBoxGuestAdditions/mount.vboxsf /sbin/mount.vboxsf</pre>
<p>이후에 vagrant를 재시작 해주면 문제는 해결된다. </p>
<p>재시작하기 싫다면 아래의 명령을 추가로 실행해서 즉시 mount 하는 것도 가능하다.</p>
<pre class="hljs bash">sudo mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/25/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8/</id><title type="html">PHP 에서 한글 파일명 사용시 pathinfo(), basename() 결과가 맞지 않는 문제 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/25/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8/"/><published>2017-04-25T20:27:54+09:00</published><updated>2017-04-25T21:59:55+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP에서 path에 대한 정보를 얻기 위해 pathinfo()와 basename()을 많이 사용한다. 그런데 path 내에 한글과 같이 UTF-8 문자열이 포함될 경우 결과가 이상하게 나올 수 있다. 일단 아래의 소스 코드와 실행 결과를 보자. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; echo '<br />'; $locales = explode("\n", trim(shell_exec('locale -a'))); foreach ($locales as $locale) { setlocale(LC_ALL, $locale); $info = pathinfo($filepath); if (strcmp($info['basename'], '가 나 다.txt') != 0) { echo $locale . ' -> ' . $info['basename'] . '<br />'; } } /* 실행 결과 Current Location : C C -> 나 다.txt C -> 나 다.txt POSIX -> 나 다.txt */ 위 코드는 현재 system 내에서 사용 가능한 모든 locale에 대해 실행 결과를 테스트한 결과다. 결과를 보면 정상적으로 처리되지 않고 첫글자가 잘려나간 잘못된 결과를 반환하는 경우가 있다. 바로 locale이 C 또는 POSIX인 경우다. 서버 환경 구성에 따른 차이가 있겠지만 나의 경우는 nobody 권한으로 실행되는 웹서버 상에서 현재 locale이 C로 나왔다. 따라서 한글 파일명이 포함된 path에 대해서는 pathinfo()를 사용할 수 없다. 이 문제에 대해 검색하다 Make PHP pathinfo() return the correct filename if the filename is UTF-8 라는 글을 찾았다. 여기서 질문을 한 aä.pdf path에 대해서는 현재 시점(PHP 7)에서 locale C와 POSIX에서도 문제가 없었다. 이 버그와 관련하여 패치가 되었지만 아직 한글에 대한 버그는 남아 있는 것으로 보인다. 혹시나 해서 아래와 같이 일본어로도 동일한 테스트를 해보니 역시나 문제가 발생한다. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/うながす.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; echo '<br />'; $locales = explode("\n", trim(shell_exec('locale -a'))); foreach ($locales as $locale) { setlocale(LC_ALL, $locale); $info = pathinfo($filepath); if (strcmp($info['basename'], 'うながす.txt') != 0) { echo $locale . ' -> ' . $info['basename'] . '<br />'; } } /* 실행 결과 Current Location : C C -> .txt C -> .txt POSIX -> .txt ja_JP -> ��ながす.txt ja_JP.eucjp -> ��ながす.txt ja_JP.ujis -> ��ながす.txt japanese -> ��ながす.txt japanese.euc -> ��ながす.txt ko_KR -> ��ながす.txt ko_KR.euckr -> ��ながす.txt korean -> ��ながす.txt korean.euc -> ��ながす.txt mt_MT -> ��ながす.txt mt_MT.iso88593 -> ��ながす.txt yi_US -> �ながす.txt yi_US.cp1255 -> �ながす.txt zh_CN -> .txt zh_CN.gb2312 -> .txt zh_HK -> �がす.txt zh_HK.big5hkscs -> �がす.txt zh_SG -> .txt zh_SG.gb2312 -> .txt zh_TW -> �がす.txt zh_TW.big5 -> �がす.txt zh_TW.euctw -> .txt */ 결론적으로 이 문제를 해결하기 위해서는 아래와 같이 간단히 해결 가능하다. <?php setlocale(LC_ALL,'ko_KR.UTF-8'); $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; /* 실행 결과 Current Location : ko_KR.UTF-8 ko_KR.UTF-8 -> 가 나 다.txt */ setlocale(LC_ALL,'ko_KR.UTF-8')와 같이 UTF-8을 사용하는 locale로 변경하면 한글 파일명을 가진 path에 대해서도 pathinfo는 정상적으로 동작한다(ko_KR임에도 불구하고 일본어도 정상 동작한다). 이 문제에서의 특징은 한가지가 더 있다. 파일명 앞에 영문자와 같이 한글이 아닌 글자가 있다면 이 문제가 발생하지 않는다는 것이다. 아래의 예시를 보자. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/a가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; /* 실행 결과 Current Location : C C -> a가 나 다.txt */ 이러한 원리를 이용한 방법으로 Make PHP pathinfo() return the correct filename if the filename is UTF-8에서는 아래와 같이 처리하는 방법을 제시하고 있다. <?php function getFilename($path) { // if there's no '/', we're probably dealing with just a filename // so just put an 'a' in front of it if (strpos($path, '/') === false) { $path_parts = pathinfo('a'.$path); } else { $path= str_replace('/', '/a', $path); $path_parts = pathinfo($path); } return substr($path_parts["filename"],1); } 하지만 이 방법 보다는 아래의 방법이 조금 더 나아 보인다(urlencode()를 이용하는 방법이다). <php function _pathinfo($path, $options = null) { $path = urlencode($path); $parts = null === $options ? pathinfo($path) : pathinfo($path, $options); foreach ($parts as $field => $value) { $parts[$field] = urldecode($value); } return $parts; } 결론적으로는 위 두가지 방법 보다는 setlocale(LC_ALL,'ko_KR.UTF-8') 을 이용해서 locale을 변경하는 것을 권장한다. 사용하는 라이브러리 내부 등에서도 pathinfo를 사용하는 경우가 있을 수 있으므로 프로그램이 시작시 locale을 변경하는 것이 좋을 것이다(단, locale이 다른 프로그램 영역에 영향을 줄 수 있는지에 대해서는 검토를 해보는 것이 좋다).]]></summary><content type="html"><![CDATA[<p>PHP에서 path에 대한 정보를 얻기 위해 <a href="http://php.net/manual/kr/function.pathinfo.php">pathinfo()</a>와 <a href="http://php.net/manual/kr/function.basename.php">basename()</a>을 많이 사용한다. 그런데 path 내에 한글과 같이 UTF-8 문자열이 포함될 경우 결과가 이상하게 나올 수 있다. 일단 아래의 소스 코드와 실행 결과를 보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$currentLocal = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . $currentLocal . <span class="hljs-string">"&lt;br/&gt;"</span>;

$filepath = <span class="hljs-string">'/home/가 나 다.txt'</span>;
$info = pathinfo($filepath);
<span class="hljs-keyword">echo</span> $currentLocal . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br /&gt;'</span>;

$locales = explode(<span class="hljs-string">"\n"</span>, trim(shell_exec(<span class="hljs-string">'locale -a'</span>)));
<span class="hljs-keyword">foreach</span> ($locales <span class="hljs-keyword">as</span> $locale) {
    setlocale(LC_ALL, $locale);
    $info = pathinfo($filepath);
    <span class="hljs-keyword">if</span> (strcmp($info[<span class="hljs-string">'basename'</span>], <span class="hljs-string">'가 나 다.txt'</span>) != <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">echo</span> $locale . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;
    }
}

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; 나 다.txt

C -&gt; 나 다.txt
POSIX -&gt; 나 다.txt
*/</span></pre>
<p>위 코드는 현재 system 내에서 사용 가능한 모든 locale에 대해 실행 결과를 테스트한 결과다. 결과를 보면 정상적으로 처리되지 않고 첫글자가 잘려나간 잘못된 결과를 반환하는 경우가 있다. 바로 locale이 <code>C</code> 또는 <code>POSIX</code>인 경우다.</p>
<p>서버 환경 구성에 따른 차이가 있겠지만 나의 경우는 nobody 권한으로 실행되는 웹서버 상에서 현재 locale이 <code>C</code>로 나왔다. 따라서 한글 파일명이 포함된 path에 대해서는 pathinfo()를 사용할 수 없다.</p>
<p>이 문제에 대해 검색하다 <a href="http://stackoverflow.com/questions/4451664/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8">Make PHP pathinfo() return the correct filename if the filename is UTF-8</a> 라는 글을 찾았다. 여기서 질문을 한 <code>aä.pdf</code> path에 대해서는 현재 시점(PHP 7)에서 locale <code>C</code>와 <code>POSIX</code>에서도 문제가 없었다. 이 버그와 관련하여 패치가 되었지만 아직 한글에 대한 버그는 남아 있는 것으로 보인다. 혹시나 해서 아래와 같이 일본어로도 동일한 테스트를 해보니 역시나 문제가 발생한다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$currentLocal = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . $currentLocal . <span class="hljs-string">"&lt;br/&gt;"</span>;

$filepath = <span class="hljs-string">'/home/うながす.txt'</span>;
$info = pathinfo($filepath);
<span class="hljs-keyword">echo</span> $currentLocal . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br /&gt;'</span>;

$locales = explode(<span class="hljs-string">"\n"</span>, trim(shell_exec(<span class="hljs-string">'locale -a'</span>)));
<span class="hljs-keyword">foreach</span> ($locales <span class="hljs-keyword">as</span> $locale) {
    setlocale(LC_ALL, $locale);
    $info = pathinfo($filepath);
    <span class="hljs-keyword">if</span> (strcmp($info[<span class="hljs-string">'basename'</span>], <span class="hljs-string">'うながす.txt'</span>) != <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">echo</span> $locale . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;
    }
}

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; .txt

C -&gt; .txt
POSIX -&gt; .txt
ja_JP -&gt; ��ながす.txt
ja_JP.eucjp -&gt; ��ながす.txt
ja_JP.ujis -&gt; ��ながす.txt
japanese -&gt; ��ながす.txt
japanese.euc -&gt; ��ながす.txt
ko_KR -&gt; ��ながす.txt
ko_KR.euckr -&gt; ��ながす.txt
korean -&gt; ��ながす.txt
korean.euc -&gt; ��ながす.txt
mt_MT -&gt; ��ながす.txt
mt_MT.iso88593 -&gt; ��ながす.txt
yi_US -&gt; �ながす.txt
yi_US.cp1255 -&gt; �ながす.txt
zh_CN -&gt; .txt
zh_CN.gb2312 -&gt; .txt
zh_HK -&gt; �がす.txt
zh_HK.big5hkscs -&gt; �がす.txt
zh_SG -&gt; .txt
zh_SG.gb2312 -&gt; .txt
zh_TW -&gt; �がす.txt
zh_TW.big5 -&gt; �がす.txt
zh_TW.euctw -&gt; .txt
*/</span></pre>
<p>결론적으로 이 문제를 해결하기 위해서는 아래와 같이 간단히 해결 가능하다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
setlocale(LC_ALL,<span class="hljs-string">'ko_KR.UTF-8'</span>);

$currentLocal = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . $currentLocal . <span class="hljs-string">"&lt;br/&gt;"</span>;

$filepath = <span class="hljs-string">'/home/가 나 다.txt'</span>;
$info = pathinfo($filepath);
<span class="hljs-keyword">echo</span> $currentLocal . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-comment">/*
실행 결과

Current Location : ko_KR.UTF-8
ko_KR.UTF-8 -&gt; 가 나 다.txt
*/</span></pre>
<p><code>setlocale(LC_ALL,'ko_KR.UTF-8')</code>와 같이 <code>UTF-8</code>을 사용하는 locale로 변경하면 한글 파일명을 가진 path에 대해서도 pathinfo는 정상적으로 동작한다(<code>ko_KR</code>임에도 불구하고 일본어도 정상 동작한다).</p>
<p>이 문제에서의 특징은 한가지가 더 있다. 파일명 앞에 영문자와 같이 한글이 아닌 글자가 있다면 이 문제가 발생하지 않는다는 것이다. 아래의 예시를 보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$currentLocal = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . $currentLocal . <span class="hljs-string">"&lt;br/&gt;"</span>;

$filepath = <span class="hljs-string">'/home/a가 나 다.txt'</span>;
$info = pathinfo($filepath);
<span class="hljs-keyword">echo</span> $currentLocal . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; a가 나 다.txt
*/</span></pre>
<p>이러한 원리를 이용한 방법으로 <a href="http://stackoverflow.com/questions/4451664/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8">Make PHP pathinfo() return the correct filename if the filename is UTF-8</a>에서는 아래와 같이 처리하는 방법을 제시하고 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFilename</span><span class="hljs-params">($path)</span>
</span>{
    <span class="hljs-comment">// if there's no '/', we're probably dealing with just a filename</span>
    <span class="hljs-comment">// so just put an 'a' in front of it</span>
    <span class="hljs-keyword">if</span> (strpos($path, <span class="hljs-string">'/'</span>) === <span class="hljs-keyword">false</span>)
    {
        $path_parts = pathinfo(<span class="hljs-string">'a'</span>.$path);
    }
    <span class="hljs-keyword">else</span>
    {
        $path= str_replace(<span class="hljs-string">'/'</span>, <span class="hljs-string">'/a'</span>, $path);
        $path_parts = pathinfo($path);
    }
    <span class="hljs-keyword">return</span> substr($path_parts[<span class="hljs-string">"filename"</span>],<span class="hljs-number">1</span>);
}</pre>
<p>하지만 이 방법 보다는 아래의 방법이 조금 더 나아 보인다(<a href="http://php.net/manual/kr/function.urldecode.php">urlencode()</a>를 이용하는 방법이다).</p>
<pre class="hljs php">&lt;php
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_pathinfo</span><span class="hljs-params">($path, $options = null)</span>
</span>{
    $path = urlencode($path);
    $parts = <span class="hljs-keyword">null</span> === $options ? pathinfo($path) : pathinfo($path, $options);
    <span class="hljs-keyword">foreach</span> ($parts <span class="hljs-keyword">as</span> $field =&gt; $value) {
        $parts[$field] = urldecode($value);
    }
    <span class="hljs-keyword">return</span> $parts;
}</pre>
<p>결론적으로는 위 두가지 방법 보다는 <code>setlocale(LC_ALL,'ko_KR.UTF-8')</code> 을 이용해서 locale을 변경하는 것을 권장한다. 사용하는 라이브러리 내부 등에서도 pathinfo를 사용하는 경우가 있을 수 있으므로 프로그램이 시작시 locale을 변경하는 것이 좋을 것이다(단, locale이 다른 프로그램 영역에 영향을 줄 수 있는지에 대해서는 검토를 해보는 것이 좋다). </p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/12/could-not-find-comandroidsupportconstraintconstraint-layout/</id><title type="html">Could not find com.android.support.constraint:constraint-layout 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/12/could-not-find-comandroidsupportconstraintconstraint-layout/"/><published>2017-04-12T17:02:44+09:00</published><updated>2017-04-12T17:02:44+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 ConstraintLayout를 사용하기 위해 아래와 같이 gradle에 설정했었다. dependencies { compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha9' } 업데이트가 있는지 확인해 보니 1.0.1이 있기에 아래와 같이 변경했다. dependencies { compile 'com.android.support.constraint:constraint-layout:1.0.1' } 그리고 빌드를 해려고 했더니 아래와 같은 오류가 났다. Error:Could not find com.android.support.constraint:constraint-layout:1.0.1. Required by:myapp:app:unspecified 관련 정보를 검색해 보니 아래와 같이 설정이 필요하다. "Settings -> Appearance & Behavior -> System Settings -> Android SDK -> SDK Tools" 에서 "ConstraintLayout for Android" 를 체크해서 사용 가능하도록 해줘야 한다. 나의 경우는 기존에 사용했었기 때문에 체크는 되어 있었으나 업데이트가 되지 않아서 발생한 문제였다. 다시 체크하여 업데이트를 받고 나니 정상적으로 빌드가 완료되었다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 <a href="https://developer.android.com/training/constraint-layout/index.html">ConstraintLayout</a>를 사용하기 위해 아래와 같이 gradle에 설정했었다.</p>
<pre class="hljs gradle"><span class="hljs-keyword">dependencies</span> {
    <span class="hljs-keyword">compile</span> <span class="hljs-string">'com.android.support.constraint:constraint-layout:1.0.0-alpha9'</span>
}</pre>
<p>업데이트가 있는지 확인해 보니 1.0.1이 있기에 아래와 같이 변경했다.</p>
<pre class="hljs gradle"><span class="hljs-keyword">dependencies</span> {
    <span class="hljs-keyword">compile</span> <span class="hljs-string">'com.android.support.constraint:constraint-layout:1.0.1'</span>
}</pre>
<p>그리고 빌드를 해려고 했더니 아래와 같은 오류가 났다.</p>
<pre><code>Error:Could not find com.android.support.constraint:constraint-layout:1.0.1.
Required by:myapp:app:unspecified</code></pre>
<p>관련 정보를 검색해 보니 아래와 같이 설정이 필요하다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/04/could-not-find-comandroidsupportconstraintconstraint-layout-1.png" alt="could-not-find-comandroidsupportconstraintconstraint-layout-1" width="988" height="699" /></p>
<p>&quot;Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK -&gt; SDK Tools&quot; 에서 &quot;ConstraintLayout for Android&quot; 를 체크해서 사용 가능하도록 해줘야 한다.</p>
<p>나의 경우는 기존에 사용했었기 때문에 체크는 되어 있었으나 업데이트가 되지 않아서 발생한 문제였다. 다시 체크하여 업데이트를 받고 나니 정상적으로 빌드가 완료되었다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/11/target-overrides-the-always-embed-swift-standard-libraries-build-setting/</id><title type="html">target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/11/target-overrides-the-always-embed-swift-standard-libraries-build-setting/"/><published>2017-04-11T21:40:03+09:00</published><updated>2017-04-11T21:40:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="swift" label="swift" /><summary><![CDATA[Xcode 8에서 cocoapods 사용시 아래와 같은 오류가 발생하는 경우가 있다. [!] The `xproject [Debug]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.debug.xcconfig'. This can lead to problems with the CocoaPods installation - Use the `$(inherited)` flag, or - Remove the build settings from the target. [!] The `xproject [Release]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.release.xcconfig'. This can lead to problems with the CocoaPods installation - Use the `$(inherited)` flag, or - Remove the build settings from the target. 최근 Xcode와 cocoapods를 업데이트하고 위와 같은 오류가 발생해서 찾아보니 Errors after updating to Xcode 8: "No such module" and "target overrides the EMBEDDED_CONTENT_CONTAINS_SWIFTbuild setting" 에서 해결 방법을 설명하고 있었다. Project/Targets -> [Project Name] -> Build Settings -> "ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES" 를 "$(inherited)"로 변경하는 것으로 위 문제는 간단히 해결된다. Xcode 8 Release Notes 주요 내용 정리를 보면 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES에 대해 다음과 같이 설명하고 있다. EMBEDDED_CONTENT_CONTAINS_SWIFT는 없어지고 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES가 추가되었다. 이 새로운 설정은 Xcode에서 항상 Swift Standard Libearies를 채워넣도록 지정하는 것이다. 대상에 직접 사용하거나 덧붙여 다른 제품이 Swift를 사용하는 경우에만 이 설정을 사용할 수 있다.]]></summary><content type="html"><![CDATA[<p>Xcode 8에서 <a href="https://cocoapods.org/">cocoapods</a> 사용시  아래와 같은 오류가 발생하는 경우가 있다.</p>
<pre class="hljs bash">[!] The `xproject [Debug]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined <span class="hljs-keyword">in</span> `Pods/Target Support Files/Pods-xproject/Pods-xproject.debug.xcconfig<span class="hljs-string">'. This can lead to problems with the CocoaPods installation
    - Use the `$(inherited)` flag, or
    - Remove the build settings from the target.

[!] The `xproject [Release]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.release.xcconfig'</span>. This can lead to problems with the CocoaPods installation
    - Use the `$(inherited)` flag, or
    - Remove the build settings from the target.</pre>
<p>최근 Xcode와 cocoapods를 업데이트하고 위와 같은 오류가 발생해서 찾아보니 <a href="http://stackoverflow.com/a/39686652">Errors after updating to Xcode 8: &quot;No such module&quot; and &quot;target overrides the <code>EMBEDDED_CONTENT_CONTAINS_SWIFT</code>build setting&quot;</a> 에서 해결 방법을 설명하고 있었다.</p>
<p>Project/Targets -&gt; [Project Name] -&gt; Build Settings -&gt;  &quot;ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES&quot; 를 &quot;$(inherited)&quot;로 변경하는 것으로 위 문제는 간단히 해결된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/04/target-overrides-the-always-embed-swift-standard-libraries-build-setting-1.png" alt="target-overrides-the-always-embed-swift-standard-libraries-build-setting-1" width="1123" height="247" /></p>
<p><a href="https://swifter.kr/2016/09/26/xcode-8-release-notes-%EC%A3%BC%EC%9A%94-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC/">Xcode 8 Release Notes 주요 내용 정리</a>를 보면 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES에 대해 다음과 같이 설명하고 있다.</p>
<blockquote>
<p>EMBEDDED_CONTENT_CONTAINS_SWIFT는 없어지고 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES가 추가되었다. 이 새로운 설정은 Xcode에서 항상 Swift Standard Libearies를 채워넣도록 지정하는 것이다. 대상에 직접 사용하거나 덧붙여 다른 제품이 Swift를 사용하는 경우에만 이 설정을 사용할 수 있다.</p>
</blockquote>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/04/css-image-vertical-center/</id><title type="html">CSS로 이미지 세로 중앙 정렬(Vertical align)하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/04/css-image-vertical-center/"/><published>2017-04-04T17:14:41+09:00</published><updated>2017-04-04T17:14:41+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="css" label="css" /><summary><![CDATA[HTML에서 <img>를 CSS만으로 비율을 유지한 채로 특정 영역의 중앙에 출력하는 방법은 다음과 같다. <!DOCTYPE html> <html> <head> <meta charset="utf-8"/> <style type="text/css"> /* 예시를 위한 css */ dl { float:left; margin-right:20px; } dt { clear:both; } dd { margin:0 0 20px 0; padding:10px; float:left; } dd > img, dd > div { border:#ccc solid 1px; float:left; margin-right:10px; } /* position 을 이용한 방법 */ div.box1 { position:relative; width:150px; height:200px; } div.box1 > img { position:absolute; max-width:100%; max-height:100%; width:auto; height:auto; margin:auto; top:0; bottom:0; left:0; right:0; } /* line-height 를 이용한 방법 */ div.box2 { width:150px; height:200px; line-height:200px; text-align:center; } div.box2 > img { max-width:100%; max-height:100%; vertical-align:middle; } /* :before / content 를 이용한 방법 */ div.box3 { width:150px; height:200px; text-align:center; white-space:nowrap; font:0/0 a; } div.box3:before { content:""; display:inline-block; vertical-align:middle; height:100%; } div.box3 > img { max-width:100%; max-height:100%; display:inline-block; vertical-align:middle; } /* flex 를 이용한 방법 */ div.box4 { width:150px; height:200px; display:flex; justify-content:center; align-items:center; } div.box4 > img { max-width:100%; max-height:100%; } </style> </head> <body> <dl> <dt>position 을 이용한 방법</dt> <dd> <div class="box1"> <img src="test_100px.png" alt="test image"/> </div> <div class="box1"> <img src="test_550px.png" alt="test image"/> </div> </dd> <dt>line-height 를 이용한 방법</dt> <dd> <div class="box2"> <img src="test_100px.png" alt="test image"/> </div> <div class="box2"> <img src="test_550px.png" alt="test image"/> </div> </dd> </dl> <dl> <dt>:before / content 를 이용한 방법</dt> <dd> <div class="box3"> <img src="test_100px.png" alt="test image"/> </div> <div class="box3"> <img src="test_550px.png" alt="test image"/> </div> </dd> <dt>flex 를 이용한 방법</dt> <dd> <div class="box4"> <img src="test_100px.png" alt="test image"/> </div> <div class="box4"> <img src="test_550px.png" alt="test image"/> </div> </dd> </dl> </body> </html> 총 4가지 방법을 예시로 나열했지만 나의 경우는 크로스 브라우징을 위해 "position 을 이용한 방법"이나 "line-height 를 이용한 방법"을 주로 사용한다. 하지만 상황에 따라서는 다른 방법이 유용할 수도 있기에 함께 남겨둔다. 그리고 여기서 사용된 원리를 잘 이용하면 다른 레이아웃을 구성하는데도 도움이 되니 한번쯤은 원리를 참고해보면 좋을 듯하다.]]></summary><content type="html"><![CDATA[<p>HTML에서 <code>&lt;img&gt;</code>를 CSS만으로 비율을 유지한 채로 특정 영역의 중앙에 출력하는 방법은 다음과 같다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/04/image_align_center.png" alt="phpstorm formatter markers" width="706" height="509" /></p>
<pre class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css">
        <span class="hljs-comment">/* 예시를 위한 css */</span>
        <span class="hljs-selector-tag">dl</span> { <span class="hljs-attribute">float</span>:left; <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">20px</span>; }
        <span class="hljs-selector-tag">dt</span> { <span class="hljs-attribute">clear</span>:both; }
        <span class="hljs-selector-tag">dd</span> { <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>; <span class="hljs-attribute">float</span>:left; }
        <span class="hljs-selector-tag">dd</span> &gt; <span class="hljs-selector-tag">img</span>,
        <span class="hljs-selector-tag">dd</span> &gt; <span class="hljs-selector-tag">div</span> { <span class="hljs-attribute">border</span>:<span class="hljs-number">#ccc</span> solid <span class="hljs-number">1px</span>; <span class="hljs-attribute">float</span>:left; <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">10px</span>; }
        <span class="hljs-comment">/* position 을 이용한 방법 */</span>
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box1</span> {
            <span class="hljs-attribute">position</span>:relative;
            <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;
        }
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box1</span> &gt; <span class="hljs-selector-tag">img</span> {
            <span class="hljs-attribute">position</span>:absolute;
            <span class="hljs-attribute">max-width</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">max-height</span>:<span class="hljs-number">100%</span>;
            <span class="hljs-attribute">width</span>:auto; <span class="hljs-attribute">height</span>:auto;
            <span class="hljs-attribute">margin</span>:auto;
            <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;
        }
        <span class="hljs-comment">/* line-height 를 이용한 방법 */</span>
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box2</span> {
            <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>; <span class="hljs-attribute">line-height</span>:<span class="hljs-number">200px</span>;
            <span class="hljs-attribute">text-align</span>:center;
        }
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box2</span> &gt; <span class="hljs-selector-tag">img</span> {
            <span class="hljs-attribute">max-width</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">max-height</span>:<span class="hljs-number">100%</span>;
            <span class="hljs-attribute">vertical-align</span>:middle;
        }
        <span class="hljs-comment">/* :before / content 를 이용한 방법 */</span>
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box3</span> {
            <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;
            <span class="hljs-attribute">text-align</span>:center;
            <span class="hljs-attribute">white-space</span>:nowrap;
            <span class="hljs-attribute">font</span>:<span class="hljs-number">0</span>/<span class="hljs-number">0</span> a;
        }
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box3</span><span class="hljs-selector-pseudo">:before</span> {
            <span class="hljs-attribute">content</span>:<span class="hljs-string">""</span>;
            <span class="hljs-attribute">display</span>:inline-block;
            <span class="hljs-attribute">vertical-align</span>:middle;
            <span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;
        }
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box3</span> &gt; <span class="hljs-selector-tag">img</span> {
            <span class="hljs-attribute">max-width</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">max-height</span>:<span class="hljs-number">100%</span>;
            <span class="hljs-attribute">display</span>:inline-block;
            <span class="hljs-attribute">vertical-align</span>:middle;
        }
        <span class="hljs-comment">/* flex 를 이용한 방법 */</span>
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box4</span> {
            <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;
            <span class="hljs-attribute">display</span>:flex;
            <span class="hljs-attribute">justify-content</span>:center;
            <span class="hljs-attribute">align-items</span>:center;
        }
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box4</span> &gt; <span class="hljs-selector-tag">img</span> {
            <span class="hljs-attribute">max-width</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">max-height</span>:<span class="hljs-number">100%</span>;
        }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>position 을 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box1"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_100px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box1"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_550px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>line-height 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box2"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_100px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box2"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_550px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>:before / content 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box3"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_100px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box3"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_550px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>flex 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box4"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_100px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box4"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_550px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></pre>
<p>총 4가지 방법을 예시로 나열했지만 나의 경우는 크로스 브라우징을 위해 &quot;position 을 이용한 방법&quot;이나 &quot;line-height 를 이용한 방법&quot;을 주로 사용한다. 하지만 상황에 따라서는 다른 방법이 유용할 수도 있기에 함께 남겨둔다. 그리고 여기서 사용된 원리를 잘 이용하면 다른 레이아웃을 구성하는데도 도움이 되니 한번쯤은 원리를 참고해보면 좋을 듯하다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/02/php-lock-file-using-symlink/</id><title type="html">PHP에서 symlink()를 이용해 lock 구현하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/02/php-lock-file-using-symlink/"/><published>2017-04-02T17:26:08+09:00</published><updated>2017-04-02T17:26:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP에서 외부 Extensions 없이 간단히 lock을 구현하고자 할 때 file을 이용하는 경우가 많다(file에 대한 읽기/쓰기 lock을 말하는 것이 아니다). 예를들어 어떤 프로세스가 중첩되어 실행되는 것을 막기 위한 lock이 필요할 수 있다. 나의 경우는 Laravel의 Queue를 사용하면서 Daemon을 동시에 여러개를 띄운 상황에서 특정 작업의 중첩을 막기 위해 필요했다. Job에 대한 중복 실행은 Laravel의 Queue가 DB lock을 이용해 자체적으로 처리한다. 하지만 나는 Job의 중복 실행을 막는 것이 아닌 프로세스의 중첩을 막는 것이 필요했다. 가장 간단한 구현을 생각하면 아래와 같이 할 수 있다. #!/usr/bin/php <?php define('LOCK_FILE', "/var/run/" . basename($argv[0], ".php") . ".lock"); if (isLocked()) { die("Already running.\n"); } # The rest of your script goes here.... echo "Hello world!\n"; sleep(30); unlink(LOCK_FILE); exit(0); function isLocked() { # If lock file exists, check if stale. If exists and is not stale, return TRUE # Else, create lock file and return FALSE. if (file_exists(LOCK_FILE)) { # check if it's stale $lockingPID = trim(file_get_contents(LOCK_FILE)); # Get all active PIDs. $pids = explode("\n", trim(`ps -e | awk '{print $1}'`)); # If PID is still active, return true if (in_array($lockingPID, $pids)) { return true; } # Lock-file is stale, so kill it. Then move on to re-creating it. echo "Removing stale lock file.\n"; unlink(LOCK_FILE); } file_put_contents(LOCK_FILE, getmypid() . "\n"); return false; } 위 코드는 Kevin Traas가 제시한 코드다. 내가 laravel에서 구현 했던 코드는 예시로 사용하기엔 여러 가지 다른 코드가 섞여있어 이해하기 쉬운 코드로 예를 들었다. 어차피 원리는 거의 유사하다. 위 코드는 잘 동작할 것처럼 보이지만 그렇지 않다(일반적인 상황에서는 잘 동작한다). 이유는 lock을 검사하는 코드와 lock을 생성하는 코드 사이에 다른 프로세스가 끼어들 수 있기 때문이다. 위에서 이야기한 것처럼 Daemon이 동시에 여러개 떠 있는 상황에서 동시에 lock을 사용하다보면 생각보다 빈번하게 오작동 한다(프로세스가 중첩된다). 이 문제를 해결하기 위해서는 symlink()를 이용하는 방법이 있다. 아래는 Kevin Traas가 제시한 코드의 문제와 해결 방법을 제시한 Radu Cristescu의 코드다. #!/usr/bin/php <?php define('LOCK_FILE', "/var/run/" . basename($argv[0], ".php") . ".lock"); if (!tryLock()) { die("Already running.\n"); } # remove the lock on exit (Control+C doesn't count as 'exit'?) register_shutdown_function('unlink', LOCK_FILE); # The rest of your script goes here.... echo "Hello world!\n"; sleep(30); exit(0); function tryLock() { # If lock file exists, check if stale. If exists and is not stale, return TRUE # Else, create lock file and return FALSE. if (@symlink("/proc/" . getmypid(), LOCK_FILE) !== false) # the @ in front of 'symlink' is to suppress the NOTICE you get if the LOCK_FILE exists { return true; } # link already exists # check if it's stale if (is_link(LOCK_FILE) && !is_dir(LOCK_FILE)) { unlink(LOCK_FILE); # try to lock again return tryLock(); } return false; } 간단히 설명하자면 symlink()를 이용해서 lock이 걸려 있는지를 검사하는 과정과 lock을 생성하는 과정을 한번에 처리하는 것이다. 이 방법을 사용하면 보다 안전하게 lock-file 매커니즘을 사용할 수 있다.]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/">PHP</a>에서 외부 Extensions 없이 간단히 lock을 구현하고자 할 때 file을 이용하는 경우가 많다(file에 대한 읽기/쓰기 lock을 말하는 것이 아니다).</p>
<p>예를들어 어떤 프로세스가 중첩되어 실행되는 것을 막기 위한 lock이 필요할 수 있다. 나의 경우는 <a href="https://laravel.com/">Laravel</a>의 <a href="https://laravel.com/docs/master/queues">Queue</a>를 사용하면서 Daemon을 동시에 여러개를 띄운 상황에서 특정 작업의 중첩을 막기 위해 필요했다. Job에 대한 중복 실행은 Laravel의 Queue가 DB lock을 이용해 자체적으로 처리한다. 하지만 나는 Job의 중복 실행을 막는 것이 아닌 프로세스의 중첩을 막는 것이 필요했다.</p>
<p>가장 간단한 구현을 생각하면 아래와 같이 할 수 있다.</p>
<pre class="hljs php"><span class="hljs-comment">#!/usr/bin/php</span>
<span class="hljs-meta">&lt;?php</span>
define(<span class="hljs-string">'LOCK_FILE'</span>, <span class="hljs-string">"/var/run/"</span> . basename($argv[<span class="hljs-number">0</span>], <span class="hljs-string">".php"</span>) . <span class="hljs-string">".lock"</span>);
<span class="hljs-keyword">if</span> (isLocked()) {
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"Already running.\n"</span>);
}

<span class="hljs-comment"># The rest of your script goes here....</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">"Hello world!\n"</span>;
sleep(<span class="hljs-number">30</span>);

unlink(LOCK_FILE);
<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isLocked</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment"># If lock file exists, check if stale.  If exists and is not stale, return TRUE</span>
    <span class="hljs-comment"># Else, create lock file and return FALSE.</span>

    <span class="hljs-keyword">if</span> (file_exists(LOCK_FILE)) {
        <span class="hljs-comment"># check if it's stale</span>
        $lockingPID = trim(file_get_contents(LOCK_FILE));

        <span class="hljs-comment"># Get all active PIDs.</span>
        $pids = explode(<span class="hljs-string">"\n"</span>, trim(`ps -e | awk <span class="hljs-string">'{print $1}'</span>`));

        <span class="hljs-comment"># If PID is still active, return true</span>
        <span class="hljs-keyword">if</span> (in_array($lockingPID, $pids)) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
        }

        <span class="hljs-comment"># Lock-file is stale, so kill it.  Then move on to re-creating it.</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"Removing stale lock file.\n"</span>;
        unlink(LOCK_FILE);
    }

    file_put_contents(LOCK_FILE, getmypid() . <span class="hljs-string">"\n"</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;

}</pre>
<p>위 코드는 <a href="http://php.net/manual/en/function.getmypid.php#93753">Kevin Traas가 제시한 코드</a>다. 내가 laravel에서 구현 했던 코드는 예시로 사용하기엔 여러 가지 다른 코드가 섞여있어 이해하기 쉬운 코드로 예를 들었다. 어차피 원리는 거의 유사하다.</p>
<p>위 코드는 잘 동작할 것처럼 보이지만 그렇지 않다(일반적인 상황에서는 잘 동작한다). 이유는 lock을 검사하는 코드와 lock을 생성하는 코드 사이에 다른 프로세스가 끼어들 수 있기 때문이다.</p>
<p>위에서 이야기한 것처럼 Daemon이 동시에 여러개 떠 있는 상황에서 동시에 lock을 사용하다보면 생각보다 빈번하게 오작동 한다(프로세스가 중첩된다).</p>
<p>이 문제를 해결하기 위해서는 <a href="http://php.net/manual/en/function.symlink.php">symlink()</a>를 이용하는 방법이 있다.</p>
<p>아래는 Kevin Traas가 제시한 코드의 문제와 해결 방법을 제시한 <a href="http://php.net/manual/en/function.getmypid.php#112782">Radu Cristescu의 코드</a>다.</p>
<pre class="hljs php"><span class="hljs-comment">#!/usr/bin/php</span>
<span class="hljs-meta">&lt;?php</span>

define(<span class="hljs-string">'LOCK_FILE'</span>, <span class="hljs-string">"/var/run/"</span> . basename($argv[<span class="hljs-number">0</span>], <span class="hljs-string">".php"</span>) . <span class="hljs-string">".lock"</span>);

<span class="hljs-keyword">if</span> (!tryLock()) {
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"Already running.\n"</span>);
}

<span class="hljs-comment"># remove the lock on exit (Control+C doesn't count as 'exit'?)</span>
register_shutdown_function(<span class="hljs-string">'unlink'</span>, LOCK_FILE);

<span class="hljs-comment"># The rest of your script goes here....</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">"Hello world!\n"</span>;
sleep(<span class="hljs-number">30</span>);

<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment"># If lock file exists, check if stale.  If exists and is not stale, return TRUE</span>
    <span class="hljs-comment"># Else, create lock file and return FALSE.</span>

    <span class="hljs-keyword">if</span> (@symlink(<span class="hljs-string">"/proc/"</span> . getmypid(), LOCK_FILE) !== <span class="hljs-keyword">false</span>) <span class="hljs-comment"># the @ in front of 'symlink' is to suppress the NOTICE you get if the LOCK_FILE exists</span>
    {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
    }

    <span class="hljs-comment"># link already exists</span>
    <span class="hljs-comment"># check if it's stale</span>
    <span class="hljs-keyword">if</span> (is_link(LOCK_FILE) &amp;&amp; !is_dir(LOCK_FILE)) {
        unlink(LOCK_FILE);
        <span class="hljs-comment"># try to lock again</span>
        <span class="hljs-keyword">return</span> tryLock();
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
}</pre>
<p>간단히 설명하자면 <a href="http://php.net/manual/en/function.symlink.php">symlink()</a>를 이용해서 lock이 걸려 있는지를 검사하는 과정과 lock을 생성하는 과정을 한번에 처리하는 것이다. 이 방법을 사용하면 보다 안전하게 lock-file 매커니즘을 사용할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/01/phpstorm-disable-code-formatting-for-part-of-code/</id><title type="html">PhpStorm에서 부분적으로 코드 포멧팅(code formatting) disable 하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/01/phpstorm-disable-code-formatting-for-part-of-code/"/><published>2017-04-01T17:27:25+09:00</published><updated>2017-04-01T17:27:25+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="tip" label="tip" /><summary><![CDATA[PhpStorm을 사용하면서 자주 이용하는 기능 중 하나가 code formatting 기능이다. 코드의 가독성을 높이고 code style을 유지하는데 도움이 되기 때문이다. 이 기능을 사용하면서 항상 불편했던 것 중 하나가 부분적으로 code formatting을 제외할 수 없다는 것이었다. 그런데 알고 보니 이미 부분적으로 code formatting을 제외하는 기능이 존재했다. PhpStorm 중 2016.x 와 2017.x 기준으로 Preferences > Editor > Code Style > Formatter Control에서 'Enable formatter markers in comments'를 체크 해주고 code formatting 을 제외하고 싶은 곳을 @formatter:off와 @formatter:on으로 둘러싸주면 된다(설정을 보면 알겠지만 문구는 변경이 가능하다). PhpStorm 중 version 14의 경우는 Preferences > Editor > Code Style > Formatter Control에서 설정 가능하다고 한다. PHP를 기준으로 아래와 같이 사용 할 수 있다. <?php // @formatter:off $a = 1; $b = 2; // @formatter:on 또한, blade 템플릿을 기준으로 아래와 같이 사용 할 수 있다. {{--@formatter:off--}} @if(!empty($conf['site']['googleAnalytics'])) <script> if (typeof window.GoogleAnalyticsObject == 'undefined') { (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https://www.google-analytics.com/analytics.js','ga'); ga('create', '{{$conf['site']['googleAnalytics']}}', 'auto'); ga('send', 'pageview'); } </script> @endif {{--@formatter:on--}} 위의 예시를 보면 알겠지만 @formatter 문구는 주석으로 처리하면 된다(다른 언어의 경우도 해당 언어에서의 주석으로 처리하면 된다). 참고 : How to disable code formatting for some part of the code using comments?]]></summary><content type="html"><![CDATA[<p><a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a>을 사용하면서 자주 이용하는 기능 중 하나가 code formatting 기능이다. 코드의 가독성을 높이고 code style을 유지하는데 도움이 되기 때문이다.</p>
<p>이 기능을 사용하면서 항상 불편했던 것 중 하나가 부분적으로 code formatting을 제외할 수 없다는 것이었다. 그런데 알고 보니 이미 부분적으로 code formatting을 제외하는 기능이 존재했다.</p>
<p>PhpStorm 중 2016.x 와 2017.x 기준으로 <code>Preferences &gt; Editor &gt; Code Style &gt; Formatter Control</code>에서 'Enable formatter markers in comments'를 체크 해주고 code formatting 을 제외하고 싶은 곳을 <code>@formatter:off</code>와 <code>@formatter:on</code>으로 둘러싸주면 된다(설정을 보면 알겠지만 문구는 변경이 가능하다).</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/04/phpstorm_formatter_markers.png" alt="phpstorm formatter markers" width="1035" height="734" /></p>
<p>PhpStorm 중 version 14의 경우는 <code>Preferences &gt; Editor &gt; Code Style &gt; Formatter Control</code>에서 설정 가능하다고 한다.</p>
<p>PHP를 기준으로 아래와 같이 사용 할 수 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-comment">// @formatter:off</span>
$a = <span class="hljs-number">1</span>;
$b = <span class="hljs-number">2</span>;
<span class="hljs-comment">// @formatter:on</span></pre>
<p>또한, blade 템플릿을 기준으로 아래와 같이 사용 할 수 있다.</p>
<pre class="hljs xml">{{--@formatter:off--}}
@if(!empty($conf['site']['googleAnalytics']))
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span>.GoogleAnalyticsObject == <span class="hljs-string">'undefined'</span>) {
      (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i,s,o,g,r,a,m</span>)</span>{i[<span class="hljs-string">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
          (i[r].q=i[r].q||[]).push(<span class="hljs-built_in">arguments</span>)},i[r].l=<span class="hljs-number">1</span>*<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();a=s.createElement(o),
        m=s.getElementsByTagName(o)[<span class="hljs-number">0</span>];a.async=<span class="hljs-number">1</span>;a.src=g;m.parentNode.insertBefore(a,m)
      })(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'https://www.google-analytics.com/analytics.js'</span>,<span class="hljs-string">'ga'</span>);

      ga(<span class="hljs-string">'create'</span>, <span class="hljs-string">'{{$conf['</span>site<span class="hljs-string">']['</span>googleAnalytics<span class="hljs-string">']}}'</span>, <span class="hljs-string">'auto'</span>);
      ga(<span class="hljs-string">'send'</span>, <span class="hljs-string">'pageview'</span>);
    }
  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
@endif
{{--@formatter:on--}}</pre>
<p>위의 예시를 보면 알겠지만 <code>@formatter</code> 문구는 주석으로 처리하면 된다(다른 언어의 경우도 해당 언어에서의 주석으로 처리하면 된다).</p>
<hr />
<p>참고 : <a href="http://stackoverflow.com/a/19492318">How to disable code formatting for some part of the code using comments?</a></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/03/17/laravel-schedule-artisan-commands-in-a-package/</id><title type="html">laravel(또는 lumen) package 에서 schedule 추가</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/03/17/laravel-schedule-artisan-commands-in-a-package/"/><published>2017-03-17T11:25:36+09:00</published><updated>2017-03-17T11:25:36+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="laravel" label="laravel" /><summary><![CDATA[laravel을 사용하는 프로젝트에서 schedule 처리는 Task Scheduling에 안내되어 있는 것처럼 \App\Console\Kernel의 schedule(Schedule $schedule) 메서드 내에서 정의해서 사용한다. laravel 기반 프로젝트에 추가한 package(module)에서 직접 schedule을 추가하고 싶다면 어떻게 해야 할까? 이 부분에 대해서는 메뉴얼 상에 안내된 내용이 없다. 하지만 "How to schedule Artisan commands in a package?" 글을 참고하면 아래와 같이 처리할 수 있다. use Illuminate\Support\ServiceProvider; use Illuminate\Console\Scheduling\Schedule; class ScheduleServiceProvider extends ServiceProvider { public function boot() { $this->app->booted(function () { $schedule = $this->app->make(Schedule::class); $schedule->command('some:command')->everyMinute(); }); } public function register() { } } Application Class의 booted($callback) 함수를 사용해서 schedule을 추가하는 것이다. 그런데 이 booted 함수가 lumen에서는 존재하지 않는다. booted 함수가 없는 것이 문제가 되는 이유는 schedule 개체를 만드는 Kernel Class의 defineConsoleSchedule() 메서드가 아래와 같이 구현되어 있으며 이 메서드는 Provider가 구성된 이후에 실행 되므로 $schedule 개체에 추가적인 schedule을 추가할 수 있는 진입 지점이 없다. protected function defineConsoleSchedule() { $this->app->instance( 'Illuminate\Console\Scheduling\Schedule', $schedule = new Schedule($this->app[Cache::class]) ); $this->schedule($schedule); } 따라서 lumen 프로젝트에서는 package 내부에서 직접적으로 schedule을 추가하는 것은 불가능해 보인다. 굳이 해야 한다면 Kernel 클래스의 defineConsoleSchedule() 메서드를 override 하여 아래와 같이 구현해야 한다. protected function defineConsoleSchedule() { $this->app->instance( 'Illuminate\Console\Scheduling\Schedule', $schedule = ScheduleHelper::get() ); $this->schedule($schedule); } new Schedule($this->app[Cache::class]) 대신에 ScheduleHelper::get()에서 인스턴스를 받아서 사용한다. use Illuminate\Console\Scheduling\Schedule; use Illuminate\Contracts\Cache\Repository as Cache; class ScheduleHelper { /** @var Schedule */ private static $scheduleInstance = null; /** * @return Schedule */ static public function &get() { if (empty(static::$scheduleInstance)) { static::$scheduleInstance = new Schedule(app(Cache::class)); } return static::$scheduleInstance; } } ScheduleHelper에서는 schedule 인스턴스를 싱글톤으로 반환한다. use Illuminate\Support\ServiceProvider; use Illuminate\Console\Scheduling\Schedule; class ScheduleServiceProvider extends ServiceProvider { public function boot() { $schedule = ScheduleHelper::get(); $schedule->command('some:command')->everyMinute(); } public function register() { } } Provider 에서는 ScheduleHelper::get()를 이용해서 schedule 인스턴스를 받아 schedule을 추가 한다. 위 방법은 lumen 프로젝트와 package 간의 종속 관계가 생기므로 권장할만한 방법은 아니다. 다만, 나의 경우는 lumen 프로젝트 개설시 기본적으로 직접 개발한 package를 사용하고 해당 package에서 기본 제어를 하도록 되어 있기 때문에 위 방법이 유용하게 사용될 수 있다(사실 대부분의 개발자들의 의견은 lumen은 간단한 프로젝트에서만 사용하고 다소 복잡해질 수 있는 프로젝트는 그냥 laravel을 쓰라는 것이다).]]></summary><content type="html"><![CDATA[<p><a href="https://laravel.com">laravel</a>을 사용하는 프로젝트에서 schedule 처리는 <a href="https://laravel.com/docs/5.4/scheduling">Task Scheduling</a>에 안내되어 있는 것처럼 <code>\App\Console\Kernel</code>의 <code>schedule(Schedule $schedule)</code> 메서드 내에서 정의해서 사용한다.</p>
<p>laravel 기반 프로젝트에 추가한 package(module)에서 직접 schedule을 추가하고 싶다면 어떻게 해야 할까? 이 부분에 대해서는 메뉴얼 상에 안내된 내용이 없다. 하지만 &quot;<a href="http://stackoverflow.com/a/36630136">How to schedule Artisan commands in a package?</a>&quot; 글을 참고하면 아래와 같이 처리할 수 있다.</p>
<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Scheduling</span>\<span class="hljs-title">Schedule</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduleServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;app-&gt;booted(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
            $schedule = <span class="hljs-keyword">$this</span>-&gt;app-&gt;make(Schedule::class);
            $schedule-&gt;command(<span class="hljs-string">'some:command'</span>)-&gt;everyMinute();
        });
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>
    </span>{
    }
}</pre>
<p>Application Class의 <code>booted($callback)</code> 함수를 사용해서 schedule을 추가하는 것이다.</p>
<hr />
<p>그런데 이 <code>booted</code> 함수가 <a href="https://lumen.laravel.com/">lumen</a>에서는 존재하지 않는다. <code>booted</code> 함수가 없는 것이 문제가 되는 이유는 schedule 개체를 만드는 Kernel Class의 <code>defineConsoleSchedule()</code> 메서드가 아래와 같이 구현되어 있으며 이 메서드는 Provider가 구성된 이후에 실행 되므로 <code>$schedule</code> 개체에 추가적인 schedule을 추가할 수 있는 진입 지점이 없다.</p>
<pre class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineConsoleSchedule</span><span class="hljs-params">()</span>
</span>{
  <span class="hljs-keyword">$this</span>-&gt;app-&gt;instance(
      <span class="hljs-string">'Illuminate\Console\Scheduling\Schedule'</span>, $schedule = <span class="hljs-keyword">new</span> Schedule(<span class="hljs-keyword">$this</span>-&gt;app[Cache::class])
  );

  <span class="hljs-keyword">$this</span>-&gt;schedule($schedule);
}</pre>
<p>따라서 lumen 프로젝트에서는 package 내부에서 직접적으로 schedule을 추가하는 것은 불가능해 보인다. 굳이 해야 한다면 Kernel 클래스의 <code>defineConsoleSchedule()</code> 메서드를 override 하여 아래와 같이 구현해야 한다.</p>
<pre class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineConsoleSchedule</span><span class="hljs-params">()</span>
</span>{
  <span class="hljs-keyword">$this</span>-&gt;app-&gt;instance(
    <span class="hljs-string">'Illuminate\Console\Scheduling\Schedule'</span>, $schedule = ScheduleHelper::get()
  );

  <span class="hljs-keyword">$this</span>-&gt;schedule($schedule);
}</pre>
<p><code>new Schedule($this-&gt;app[Cache::class])</code> 대신에 <code>ScheduleHelper::get()</code>에서 인스턴스를 받아서 사용한다.</p>
<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Scheduling</span>\<span class="hljs-title">Schedule</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Repository</span> <span class="hljs-title">as</span> <span class="hljs-title">Cache</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduleHelper</span>
</span>{
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Schedule */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> $scheduleInstance = <span class="hljs-keyword">null</span>;

    <span class="hljs-comment">/**
     * <span class="hljs-doctag">@return</span> Schedule
     */</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> &amp;<span class="hljs-title">get</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">static</span>::$scheduleInstance)) {
            <span class="hljs-keyword">static</span>::$scheduleInstance = <span class="hljs-keyword">new</span> Schedule(app(Cache::class));
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">static</span>::$scheduleInstance;
    }
}</pre>
<p><code>ScheduleHelper</code>에서는 schedule 인스턴스를 싱글톤으로 반환한다.</p>
<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Scheduling</span>\<span class="hljs-title">Schedule</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduleServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>
</span>{
  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>
  </span>{
    $schedule = ScheduleHelper::get();
    $schedule-&gt;command(<span class="hljs-string">'some:command'</span>)-&gt;everyMinute();
  }

  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>
  </span>{
  }
}</pre>
<p>Provider 에서는 <code>ScheduleHelper::get()</code>를 이용해서 schedule 인스턴스를 받아 schedule을 추가 한다.</p>
<hr />
<p>위 방법은 lumen 프로젝트와 package 간의 종속 관계가 생기므로 권장할만한 방법은 아니다. 다만, 나의 경우는 lumen 프로젝트 개설시 기본적으로 직접 개발한 package를 사용하고 해당 package에서 기본 제어를 하도록 되어 있기 때문에 위 방법이 유용하게 사용될 수 있다(사실 대부분의 개발자들의 의견은 lumen은 간단한 프로젝트에서만 사용하고 다소 복잡해질 수 있는 프로젝트는 그냥 laravel을 쓰라는 것이다).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/03/08/laravel-log-files-permisson-change/</id><title type="html">라라벨(laravel) log 파일 권한 변경</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/03/08/laravel-log-files-permisson-change/"/><published>2017-03-08T10:37:02+09:00</published><updated>2017-03-08T10:37:02+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="laravel" label="laravel" /><summary><![CDATA[laravel 에서는 기본적으로 오류 로그를 "storage/logs"에 저장한다. 별다른 설정이 없다면 해당 경로에 실행 프로세스의 권한으로 로그 파일이 저장되는데 이것이 문제가 되는 경우가 있다. 예를들어 web server는 nobody 권한을 사용하고 crontab의 경우 root를 사용한다고 가정하다. crontab에 의해서 실행된 laravel 프로세스에서 오류가 발생하여 로그 파일이 생성 되었다면 이 파일의 권한은 기본적으로 root permission 에 644(-rw-r--r--)로 저장된다(서버 설정에 따라 다소 다를 수 있음). 이 상태에서 web server에서 실행한 프로세스에서 오류가 발생한다면 로그 파일에 접근할 권한이 없어 파일 저장 오류가 발생한다. 이 문제를 권한 변경없이 해결 할 수 있는 방법은 다음과 같다. <?php $app->configureMonologUsing(function(Monolog\Logger $monolog) { $filename = storage_path('/logs/laravel-' . php_sapi_name() . '.log'); $handler = new Monolog\Handler\RotatingFileHandler($filename, 5); $monolog->pushHandler($handler); }); 위 내용을 bootstrap이나 Provider에 추가한다. 이 방법은 php_sapi_name() 함수를 사용해서 인터페이스 형식을 로그 파일명에 추가함으로써 shell과 web의 로그 파일을 분리하는 것이다(권한 문제와는 상관없지만 RotatingFileHandler의 두번째 인자로 5가 추가되어 일단위로 5개의 파일까지 로그를 분할 저장하도록 되어있다). 일반적인 경우라면 이 정도로 문제는 모두 해결된다. 그리고 대부분 권한을 변경하기 보다는 위 방법을 권장한다. 하지만 다음의 경우를 생각해보자. crontab은 root에서 실행되나 작업 또는 테스트 등의 이유로 root가 아닌 사용자 계정의 shell에서 laravel 프로세스를 실행하는 경우 이미 root에 의해 로그 파일이 이미 생성되었다면 위 방법으로는 완전히 해결되지 않는다. 이러한 경우라면 아래와 같이 직접 permisson을 변경하는 방법도 가능하다. <?php $app->configureMonologUsing(function(Monolog\Logger $monolog) { $filename = storage_path('/logs/laravel-' . php_sapi_name() . '.log'); $handler = new Monolog\Handler\RotatingFileHandler($filename, 5, \Monolog\Logger::DEBUG, true, 0666); $monolog->pushHandler($handler); }); RotatingFileHandler에 추가 인자를 넘겨주어 로그 파일의 권한을 666(-rw-rw-rw-)으로 주도록 변경한 것이다. 혹 로그 파일의 수를 줄이고 싶거나 shell과 web의 로그가 분리되는 것이 싫다면 $filename 부분에서 php_sapi_name()를 제거하면 된다.]]></summary><content type="html"><![CDATA[<p><a href="https://laravel.com/">laravel</a> 에서는 기본적으로 오류 로그를 &quot;storage/logs&quot;에 저장한다. 별다른 설정이 없다면 해당 경로에 실행 프로세스의 권한으로 로그 파일이 저장되는데 이것이 문제가 되는 경우가 있다.</p>
<p>예를들어 web server는 nobody 권한을 사용하고 crontab의 경우 root를 사용한다고 가정하다. crontab에 의해서 실행된 laravel 프로세스에서 오류가 발생하여 로그 파일이 생성 되었다면 이 파일의 권한은 기본적으로 root permission 에 <code>644(-rw-r--r--)</code>로 저장된다(서버 설정에 따라 다소 다를 수 있음). 이 상태에서 web server에서 실행한 프로세스에서 오류가 발생한다면 로그 파일에 접근할 권한이 없어 파일 저장 오류가 발생한다.</p>
<p>이 문제를 권한 변경없이 해결 할 수 있는 방법은 다음과 같다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$app-&gt;configureMonologUsing(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(Monolog\Logger $monolog)</span> </span>{
    $filename = storage_path(<span class="hljs-string">'/logs/laravel-'</span> . php_sapi_name() . <span class="hljs-string">'.log'</span>);
    $handler = <span class="hljs-keyword">new</span> Monolog\Handler\RotatingFileHandler($filename, <span class="hljs-number">5</span>);  
    $monolog-&gt;pushHandler($handler);
});</pre>
<p>위 내용을 bootstrap이나 Provider에 추가한다.</p>
<p>이 방법은 <a href="http://php.net/manual/kr/function.php-sapi-name.php">php_sapi_name()</a> 함수를 사용해서 인터페이스 형식을 로그 파일명에 추가함으로써 shell과 web의 로그 파일을 분리하는 것이다(권한 문제와는 상관없지만 RotatingFileHandler의 두번째 인자로 5가 추가되어 일단위로 5개의 파일까지 로그를 분할 저장하도록 되어있다).</p>
<p>일반적인 경우라면 이 정도로 문제는 모두 해결된다. 그리고 대부분 권한을 변경하기 보다는 위 방법을 권장한다. 하지만 다음의 경우를 생각해보자.</p>
<p>crontab은 root에서 실행되나 작업 또는 테스트 등의 이유로 root가 아닌 사용자 계정의 shell에서 laravel 프로세스를 실행하는 경우 이미 root에 의해 로그 파일이 이미 생성되었다면 위 방법으로는 완전히 해결되지 않는다. 이러한 경우라면 아래와 같이 직접 permisson을 변경하는 방법도 가능하다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$app-&gt;configureMonologUsing(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(Monolog\Logger $monolog)</span> </span>{
    $filename = storage_path(<span class="hljs-string">'/logs/laravel-'</span> . php_sapi_name() . <span class="hljs-string">'.log'</span>);
    $handler = <span class="hljs-keyword">new</span> Monolog\Handler\RotatingFileHandler($filename, <span class="hljs-number">5</span>, \Monolog\Logger::DEBUG, <span class="hljs-keyword">true</span>, <span class="hljs-number">0666</span>);  
    $monolog-&gt;pushHandler($handler);
});</pre>
<p>RotatingFileHandler에 추가 인자를 넘겨주어 로그 파일의 권한을 <code>666(-rw-rw-rw-)</code>으로 주도록 변경한 것이다.</p>
<p>혹 로그 파일의 수를 줄이고 싶거나 shell과 web의 로그가 분리되는 것이 싫다면 <code>$filename</code> 부분에서 <code>php_sapi_name()</code>를 제거하면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/02/15/named-backreferences-with-preg-replace/</id><title type="html">preg_replace()의 치환 문자열에서 이름이 지정된 서브 패턴의 역 참조 사용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/02/15/named-backreferences-with-preg-replace/"/><published>2017-02-15T15:36:32+09:00</published><updated>2017-02-15T15:36:32+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[preg_replace()는 이름이 지정된 서브 패턴에 대한 역 참조(named backreferences)를 지원하지 않는다. 일단 일반적인 역 참조를 사용하는 방법에 대한 예시를 보자. <?php $string = 'user/foo'; echo preg_replace('/^user\\/(?P<id>[^\\/]+)$/', 'user/profile/\\1', $string); // user/profile/foo 위의 예시에서 치환 문자열의 \\1 대신에 패턴에서 지정된 이름("id")을 사용하고자 한다고 가정하자. <?php $string = 'user/foo'; echo preg_replace('/^user\\/(?P<id>[^\\/]+)$/', 'user/profile/\\id', $string); user/profile/\id 결과에서 보듯이 역 참조는 패턴에서 지정된 이름으로는 사용할 수 없다. 이런 경우라면 아래와 같이 preg_replace_callback()을 사용해야 한다. $string = 'user/foo'; echo preg_replace_callback('/^user\\/(?P<id>[^\\/]+)$/', function ($matches) { return 'user/profile/' . $matches['id']; }, $string) . "\n"; // user/profile/foo 위 예시를 봤을 때는 "굳이 복잡하게 서브 패턴에 이름을 지정해서 사용해야 하는가?" 하는 의문이 들겠지만 정규식이 복잡해 진다면 명시적으로 이름을 붙여서 사용하는 것이 유지 보수와 코드를 읽는데 도움이 된다. 서브 패턴과 역 참조에 대한 자세한 내용은 아래의 글을 참고하자. PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/manual/kr/function.preg-replace.php">preg_replace()</a>는 이름이 지정된 <a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">서브 패턴</a>에 대한 <a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">역 참조</a>(named backreferences)를 지원하지 않는다.</p>
<p>일단 일반적인 역 참조를 사용하는 방법에 대한 예시를 보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">'user/foo'</span>;
<span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">'/^user\\/(?P&lt;id&gt;[^\\/]+)$/'</span>, <span class="hljs-string">'user/profile/\\1'</span>, $string);

<span class="hljs-comment">// user/profile/foo</span></pre>
<p>위의 예시에서 치환 문자열의 <code>\\1</code> 대신에 패턴에서 지정된 이름(&quot;id&quot;)을 사용하고자 한다고 가정하자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">'user/foo'</span>;
<span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">'/^user\\/(?P&lt;id&gt;[^\\/]+)$/'</span>, <span class="hljs-string">'user/profile/\\id'</span>, $string);

user/profile/\id</pre>
<p>결과에서 보듯이 역 참조는 패턴에서 지정된 이름으로는 사용할 수 없다. 이런 경우라면 아래와 같이 <a href="http://php.net/manual/kr/function.preg-replace-callback.php">preg_replace_callback()</a>을 사용해야 한다.</p>
<pre class="hljs php">$string = <span class="hljs-string">'user/foo'</span>;
<span class="hljs-keyword">echo</span> preg_replace_callback(<span class="hljs-string">'/^user\\/(?P&lt;id&gt;[^\\/]+)$/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($matches)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">'user/profile/'</span> . $matches[<span class="hljs-string">'id'</span>];
    }, $string) . <span class="hljs-string">"\n"</span>;

<span class="hljs-comment">// user/profile/foo</span></pre>
<p>위 예시를 봤을 때는 &quot;굳이 복잡하게 서브 패턴에 이름을 지정해서 사용해야 하는가?&quot; 하는 의문이 들겠지만 정규식이 복잡해 진다면 명시적으로 이름을 붙여서 사용하는 것이 유지 보수와 코드를 읽는데 도움이 된다.</p>
<p>서브 패턴과 역 참조에 대한 자세한 내용은 아래의 글을 참고하자.</p>
<ul>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/02/06/difference-between-bindparam-and-bindvalue-in-php-pdo/</id><title type="html">PHP PDO의 bindParam와 bindValue의 차이</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/02/06/difference-between-bindparam-and-bindvalue-in-php-pdo/"/><published>2017-02-06T14:18:01+09:00</published><updated>2017-02-06T14:18:01+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PDO(PHP Data Objects)에서 Prepared statements 사용시 값을 bind하기 위해 PDOStatement::bindParam 또는 PDOStatement::bindValue를 주로 사용한다. 두개의 함수는 사용법이 거의 유사해서 어떤 차이가 있는지 알아둘 필요가 있다. 아래의 예시를 보면 정확한 차이를 바로 알 수 있다. <?php $sex = 'male'; $s = $dbh->prepare('SELECT name FROM students WHERE sex = :sex'); $s->bindParam(':sex', $sex); // use bindParam to bind the variable $sex = 'female'; $s->execute(); // executed with WHERE sex = 'female' <?php $sex = 'male'; $s = $dbh->prepare('SELECT name FROM students WHERE sex = :sex'); $s->bindValue(':sex', $sex); // use bindValue to bind the variable's value $sex = 'female'; $s->execute(); // executed with WHERE sex = 'male' 결론은 PDOStatement::bindParam는 변수의 레퍼런스로 바인딩 되므로 PDOStatement::execute가 호출될 때 값이 반영된다.]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/manual/en/book.pdo.php">PDO(PHP Data Objects)</a>에서 Prepared statements 사용시 값을 bind하기 위해  <a href="http://php.net/manual/en/pdostatement.bindparam.php">PDOStatement::bindParam</a> 또는
<a href="http://php.net/manual/en/pdostatement.bindvalue.php">PDOStatement::bindValue</a>를 주로 사용한다. 두개의 함수는 사용법이 거의 유사해서 어떤 차이가 있는지 알아둘 필요가 있다.</p>
<p>아래의 예시를 보면 정확한 차이를 바로 알 수 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$sex = <span class="hljs-string">'male'</span>;
$s = $dbh-&gt;prepare(<span class="hljs-string">'SELECT name FROM students WHERE sex = :sex'</span>);
$s-&gt;bindParam(<span class="hljs-string">':sex'</span>, $sex); <span class="hljs-comment">// use bindParam to bind the variable</span>
$sex = <span class="hljs-string">'female'</span>;
$s-&gt;execute(); <span class="hljs-comment">// executed with WHERE sex = 'female'</span></pre>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$sex = <span class="hljs-string">'male'</span>;
$s = $dbh-&gt;prepare(<span class="hljs-string">'SELECT name FROM students WHERE sex = :sex'</span>);
$s-&gt;bindValue(<span class="hljs-string">':sex'</span>, $sex); <span class="hljs-comment">// use bindValue to bind the variable's value</span>
$sex = <span class="hljs-string">'female'</span>;
$s-&gt;execute(); <span class="hljs-comment">// executed with WHERE sex = 'male'</span></pre>
<p>결론은 <a href="http://php.net/manual/en/pdostatement.bindparam.php">PDOStatement::bindParam</a>는 변수의 레퍼런스로 바인딩 되므로 <a href="http://php.net/manual/kr/pdostatement.execute.php">PDOStatement::execute</a>가 호출될 때 값이 반영된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/25/php-regex-epilogue/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 에필로그</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/"/><published>2017-01-25T11:45:13+09:00</published><updated>2017-01-25T11:45:13+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[앞선 글들에서 PCRE에 대한 전반적인 내용을 소개 했다. 일부는 내용이 이해하기 어려울 수 있다. 나름 이해가 어려운 부분은 예시를 추가해서 이해를 돕고자 했으나 부족할 것으로 보인다. PCRE를 익히는 가장 좋은 방법은 직접 패턴을 만들어 보면서 학습하는 것이다. PCRE에 대한 소개를 마치며 학습 및 활용에 도움이 될 수 있는 몇가지 사이트와 예시들을 남겨둔다. 정규식을 웹 상에서 테스트해 볼 수 있는 사이트를 소개한다(검색해보면 더 많은 사이트들이 존재하니 자신에게 맞는 사이트를 사용하면 된다). regular xpressions 101 : PHP, PCRE, Python, Golang, JavaScript 정규식을 테스트 할 수 있다. 그리고 입력한 정규식 패턴에 대한 설명과 매칭 결과를 상세히 보여줘서 상당히 유용하다. PHP Live Regex : PHP 정규식(PCRE)만 지원하지만 preg_match, preg_replace 등의 함수 등의 실행 결과를 바로 확인 할 수 있어 편리하다. REGEXPER : 정규식을 Railroad Diagrams으로 보여준다. 단, PCRE와 완전히 호환되지 않기 때문에 PCRE 문법이 포함된 정규식은 오류가 난다. 다음은 정규식 사용 예시를 몇가지 남겨둔다. 웹 상에서 공개되어 있는 예시들도 있고 직접 만들어 사용했던 정규식도 포함되어 있다. 유니코드 공백 문자들을 일반 공백 문자(0x20)로 치환 <?php $result = trim(preg_replace('/[\\pZ\\pC]+/u', ' ', $str)); 이와 관련된 유사한 내용은 htmlspecialchars_decode와 html_entity_decode의 문자열 처리의 다른 점을 참고하자. 한글 추출 / 제외 <?php // http://phpschool.com/link/tipntech/77239 $text = '!@#$%^&*()_+ 가나다라 1234567890 abcdefgh'; echo preg_replace('/\p{Hangul}/u', '', $text) . "\n"; // 한글 제외 echo preg_replace('/\P{Hangul}/u', '', $text) . "\n"; // 한글만 남김 // !@#$%^&*()_+ 1234567890 abcdefgh // 가나다라 // 한글 범위 // [\x{ac00}-\x{d7a3}] 가-힣 // [\x{3131}-\x{314e}] ㄱ-ㅎ // [\x{314f}-\x{3163}] ㅏ-ㅣ // 무슨 문자가 더 있나 찍어보기 // for($i = 0x31; $i < 0xff; $i ++) { // echo iconv('UCS-2BE', 'UTF-8', pack('H*', '31'.strtolower(dechex($i)))); // } 대상 내에서 문자열로 정의된 영역을 추출하는 예시 <?php $string = <<<STR \$a = "123test-string"; "test-string\"test-string" 'test-string"test-string\'test-string' 'test-string" test-string\'test-string' sample "" '"' '' STR; $regex = '/(?P<string>(["\'])(?s:(?=(\\\\?))\g{-1}.)*?\g{-2})/'; preg_match_all($regex, $string, $matches); print_r($matches['string']); 위 예시를 응용해서 html에서 이미지 url만 추출하는 예시다. <?php $string = <<<STR <img src="test url" /> <img alt="ver" src="http://test/\"'url" /> <img alt="v\"er" src="test url" /> STR; $regex = '/<img\s+[^>]*src\s*=\s*(?P<images>(["\'])(?s:(?=(\\\\?))\g{-1}.)*?\g{-2})/'; preg_match_all($regex, $string, $matches); print_r($matches['images']); 더 간단히 아래와 같이 해도 상관없다(url 내에 ' 또는 " 가 나올 수 없으므로). <?php preg_match_all('/<img\s+[^>]*src\s*=\s*[\'"]([^\'"]+)[\'"][^>]*>/', $string, $matches); 기타 간단한 정규식 이하 내용은 예시로 웹 상에 공개된 정규식들로 검증을 거치지 않았으니 참고만 하자. 숫자만 체크 정규식 /^[0-9]+$/ 이메일 체크 정규식 /^[0-9A-Z]([-_\.]?[0-9A-Z])*@[0-9A-Z]([-_\.]?[0-9A-Z])*\.[A-Z]{2,20}$/i 전화번호 정규식 /^\d{3}-\d{3,4}-\d{4}$/ : 휴대전화 /^01([0|1|6|7|8|9]?)-?([0-9]{3,4})-?([0-9]{4})$/ : 휴대전화 /^\d{2,3}-\d{3,4}-\d{4}$/ : 일반 전화번호 아이디나 비밀번호 정규식 /^[a-z0-9_]{4,20}$/ : 4자 이상 20자 이하 영소문자/숫자/_ 허용 태그(#) / 맨션(@) 추출 /(?:@|#)[^\s\t\n\r]+/ : @나 #으로 시작되는 문자열 추출 PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) > PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<p>앞선 글들에서 PCRE에 대한 전반적인 내용을 소개 했다. 일부는 내용이 이해하기 어려울 수 있다. 나름 이해가 어려운 부분은 예시를 추가해서 이해를 돕고자 했으나 부족할 것으로 보인다. PCRE를 익히는 가장 좋은 방법은 직접 패턴을 만들어 보면서 학습하는 것이다.</p>
<p>PCRE에 대한 소개를 마치며 학습 및 활용에 도움이 될 수 있는 몇가지 사이트와 예시들을 남겨둔다.</p>
<hr />
<p>정규식을 웹 상에서 테스트해 볼 수 있는 사이트를 소개한다(검색해보면 더 많은 사이트들이 존재하니 자신에게 맞는 사이트를 사용하면 된다).</p>
<ul>
<li><a href="https://regex101.com/">regular xpressions 101</a> : PHP, PCRE, Python, Golang, JavaScript 정규식을 테스트 할 수 있다. 그리고 입력한 정규식 패턴에 대한 설명과 매칭 결과를 상세히 보여줘서 상당히 유용하다.</li>
<li><a href="http://www.phpliveregex.com/">PHP Live Regex</a> : PHP 정규식(PCRE)만 지원하지만 preg_match, preg_replace 등의 함수 등의 실행 결과를 바로 확인 할 수 있어 편리하다.</li>
<li><a href="https://regexper.com/">REGEXPER</a> : 정규식을 <a href="http://tiddlywiki.com/languages/ko-KR/static/Railroad%2520Diagrams.html">Railroad Diagrams</a>으로 보여준다. 단, PCRE와 완전히 호환되지 않기 때문에 PCRE 문법이 포함된 정규식은 오류가 난다.</li>
</ul>
<hr />
<p>다음은 정규식 사용 예시를 몇가지 남겨둔다. 웹 상에서 공개되어 있는 예시들도 있고 직접 만들어 사용했던 정규식도 포함되어 있다.</p>
<h4>유니코드 공백 문자들을 일반 공백 문자(0x20)로 치환</h4>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$result = trim(preg_replace(<span class="hljs-string">'/[\\pZ\\pC]+/u'</span>, <span class="hljs-string">' '</span>, $str));</pre>
<p>이와 관련된 유사한 내용은 <a href="https://blog.asamaru.net/2015/09/10/htmlspecialchars-decode-html-entity-decode-spaces/">htmlspecialchars_decode와 html_entity_decode의 문자열 처리의 다른 점</a>을 참고하자.</p>
<h3>한글 추출 / 제외</h3>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">// http://phpschool.com/link/tipntech/77239</span>
$text = <span class="hljs-string">'!@#$%^&amp;*()_+ 가나다라 1234567890 abcdefgh'</span>;
<span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">'/\p{Hangul}/u'</span>, <span class="hljs-string">''</span>, $text) . <span class="hljs-string">"\n"</span>;   <span class="hljs-comment">// 한글 제외</span>
<span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">'/\P{Hangul}/u'</span>, <span class="hljs-string">''</span>, $text) . <span class="hljs-string">"\n"</span>;   <span class="hljs-comment">// 한글만 남김</span>

<span class="hljs-comment">// !@#$%^&amp;*()_+  1234567890 abcdefgh</span>
<span class="hljs-comment">// 가나다라</span>

<span class="hljs-comment">// 한글 범위</span>
<span class="hljs-comment">// [\x{ac00}-\x{d7a3}] 가-힣</span>
<span class="hljs-comment">// [\x{3131}-\x{314e}] ㄱ-ㅎ</span>
<span class="hljs-comment">// [\x{314f}-\x{3163}] ㅏ-ㅣ</span>

<span class="hljs-comment">// 무슨 문자가 더 있나 찍어보기</span>
<span class="hljs-comment">// for($i = 0x31; $i &lt; 0xff; $i ++) {</span>
<span class="hljs-comment">//     echo iconv('UCS-2BE', 'UTF-8', pack('H*', '31'.strtolower(dechex($i))));</span>
<span class="hljs-comment">// }</span></pre>
<h4>대상 내에서 문자열로 정의된 영역을 추출하는 예시</h4>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">&lt;&lt;&lt;STR
\$a = "123test-string";
"test-string\"test-string"
'test-string"test-string\'test-string'

'test-string"
        test-string\'test-string'

sample</span>

<span class="hljs-string">""</span>
<span class="hljs-string">'"'</span>
<span class="hljs-string">''</span>
STR;

$regex = <span class="hljs-string">'/(?P&lt;string&gt;(["\'])(?s:(?=(\\\\?))\g{-1}.)*?\g{-2})/'</span>;
preg_match_all($regex, $string, $matches);
print_r($matches[<span class="hljs-string">'string'</span>]);</pre>
<h4>위 예시를 응용해서 html에서 이미지 url만 추출하는 예시다.</h4>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">&lt;&lt;&lt;STR
&lt;img src="test url" /&gt;
&lt;img alt="ver" src="http://test/\"'url" /&gt;
&lt;img alt="v\"er" src="test url" /&gt;
STR;</span>

$regex = <span class="hljs-string">'/&lt;img\s+[^&gt;]*src\s*=\s*(?P&lt;images&gt;(["\'])(?s:(?=(\\\\?))\g{-1}.)*?\g{-2})/'</span>;
preg_match_all($regex, $string, $matches);
print_r($matches[<span class="hljs-string">'images'</span>]);</pre>
<p>더 간단히 아래와 같이 해도 상관없다(url 내에 ' 또는 &quot; 가 나올 수 없으므로).</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
preg_match_all(<span class="hljs-string">'/&lt;img\s+[^&gt;]*src\s*=\s*[\'"]([^\'"]+)[\'"][^&gt;]*&gt;/'</span>, $string, $matches);</pre>
<h4>기타 간단한 정규식</h4>
<p>이하 내용은 예시로 웹 상에 공개된 정규식들로 검증을 거치지 않았으니 참고만 하자.</p>
<ul>
<li>
<p>숫자만 체크 정규식</p>
<ul>
<li><code>/^[0-9]+$/</code></li>
</ul>
</li>
<li>
<p>이메일 체크 정규식</p>
<ul>
<li><code>/^[0-9A-Z]([-_\.]?[0-9A-Z])*@[0-9A-Z]([-_\.]?[0-9A-Z])*\.[A-Z]{2,20}$/i</code></li>
</ul>
</li>
<li>
<p>전화번호 정규식</p>
<ul>
<li><code>/^\d{3}-\d{3,4}-\d{4}$/</code> : 휴대전화</li>
<li><code>/^01([0|1|6|7|8|9]?)-?([0-9]{3,4})-?([0-9]{4})$/</code> : 휴대전화</li>
<li><code>/^\d{2,3}-\d{3,4}-\d{4}$/</code> : 일반 전화번호</li>
</ul>
</li>
<li>
<p>아이디나 비밀번호 정규식</p>
<ul>
<li><code>/^[a-z0-9_]{4,20}$/</code> : 4자 이상 20자 이하 영소문자/숫자/_ 허용</li>
</ul>
</li>
<li>
<p>태그(#) / 맨션(@) 추출</p>
<ul>
<li><code>/(?:@|#)[^\s\t\n\r]+/</code> : <code>@</code>나 <code>#</code>으로 시작되는 문자열 추출</li>
</ul>
</li>
</ul>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 에필로그</strong></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/"/><published>2017-01-24T11:22:11+09:00</published><updated>2017-01-24T11:22:11+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Recursive patterns (재귀 패턴) 무한대의 중첩 괄호를 허용하면서 괄호 안의 문자열을 일치시키는 문제를 고려해 보자. 재귀를 사용하지 않고 수행 할 수 있는 최상의 방법은 중첩의 고정된 깊이까지 일치하는 패턴을 사용하는 것이다. 임의의 중첩 깊이는 처리 할 수 ​​없다. Perl 5.6은 정규식을 반복 할 수 있는 실험적 기능을 제공한다. 특수 항목 (?R)은 재귀의 특정 경우에 대해 제공된다. \( ( (?>[^()]+) | (?R) )* \) 이 PCRE 패턴은 괄호 문제를 해결한다(공백을 무시하도록 PCRE_EXTENDED 옵션이 설정되어 있다고 가정한다). 먼저 여는 괄호와 일치한다. 그런 다음 괄호가 아닌 시퀀스 또는 패턴 자체의 재귀 일치 (예 : 올바르게 괄호로 묶은 부분 문자열)가 될 수 있는 임의의 수의 하위 문자열을 찾는다. 마지막으로 닫는 괄호가 있다. 이 특정 예제 패턴에는 중첩된 무제한 반복이 포함되어 있으므로 일치하지 않는 문자열에 패턴을 적용 할 때 괄호가 아닌 문자열을 일치 시키는데 한 번만 사용하는 서브 패턴을 사용하는 것이 중요하다. 예를 들어 "(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()"에 적용하면 신속하게 "일치하지 않음"을 나타낸다. 그러나 once-only 서브 패턴이 사용되지 않으면 매우 오랜 시간 동안 검사가 실행된다. + 및 *의 반복은 모든 경우의 수에 대해 실패할 때까지 테스트해야 하기 때문이다. 캡춰 서브 패턴에 설정되는 값은 서브 패턴 값이 설정되어 있는 재귀의 최외각 레벨의 값이다. 위의 패턴이 (ab(cd)ef)와 일치하면 캡처 괄호의 값은 최상위 수준에서 마지막으로 취해진 값인 "ef"이다. 추가 괄호가 추가되면 \( ( ( (?>[^()]+) | (?R) )* ) \) 다음에 캡처하는 문자열은 "ab(cd)ef" 수준 괄호 패턴에 15개 이상의 캡처 괄호가 있는 경우 PCRE는 재귀 중에 데이터를 저장하기 위해 추가 메모리를 확보해야 한다. 재귀는 pcre_malloc을 사용하여 수행 한 후 나중에 pcre_free를 통해 해제 한다. 메모리를 확보 할 수 없으면 재귀 내에서 메모리 부족 오류를 제공 할 방법이 없기 때문에 처음 15개의 캡처링 괄호에 대한 데이터만 저장한다. (?1), (?2) 등은 재귀 서브 패턴에도 사용될 수있다. 또한 이름이 지정된 서브 패턴 (?P>name) 또는 (?P&name)을 사용할 수도 있다. 재귀적 서브 패턴 참조 (숫자 또는 이름 기준)의 구문이 참조되는 괄호 밖에서 사용되면 프로그래밍 언어의 서브 루틴처럼 작동한다. 앞의 예는 패턴 (sens|respons)e and \1ibility가 "sense and sensibility", "response and responsibility"와 일치하지만 "sense and responsibility"와는 일치하지 않는다고 지적했다. 대신에 패턴 (sens|respons)e and (?1)ibility가 사용되면 다른 두 문자열과 마찬가지로 "sense and responsibility"와 일치한다. 그러나 이러한 참조는 참조하는 서브 패턴을 따라야 한다. 문자열의 최대 길이는 정수 변수가 가질 수 있는 최대 양수이다. 그러나 PCRE는 재귀를 사용하여 서브 패턴과 무한 반복을 처리한다. 이는 사용 가능한 스택 공간이 특정 패턴으로 처리 할 수 있는 제목 문자열의 크기를 제한 할 수 있음을 의미한다. 아래의 예시는 주어진 문장이 회문(palindrome)인지를 판별하는 정규식 예시이다. <?php $strs = ["saippuakauppias", "A man, a plan, a canal: Panama!"]; foreach ($strs as $str) { if (preg_match('/^(\W* (?: (\w) (?1) \g{-1} | \w? ) \W*)$/ix', $str)) { printf("'%s' is a palindrome\n", $str); } else { printf("'%s' is not a palindrome\n", $str); } } // 'saippuakauppias' is a palindrome // 'A man, a plan, a canal: Panama!' is a palindrome 다음의 예시는 중첩된 balanced text(좌우에 대칭되는 표식에 의해 둘러싸여 있는 text)를 추출하는 정규식에 대한 예시이다. Can I use Perl regular expressions to match balanced text? <?php $str = <<<STR I have some <brackets in <nested brackets> > and <another group <nested once <nested twice> > > and that's it. <div>sfsd</div> STR; $regex = '/ ( (?# 캡처 버퍼 1의 시작) < (?# 여는 부등호에 일치) (?: [^<>]++ (?# 부등호를 제외한 문자들이 반복, 백트래킹하지 않음) | (?1) (?# < 또는 > 발견, 캡처 버퍼 1을 재귀적으로 부름) )* > (?# 닫는 부등호에 일치) ) (?# 캡처 버퍼 1의 끝) /ix'; preg_match_all($regex, $str, $matches); print_r($matches); //Array //( // [0] => Array // ( // [0] => <brackets in <nested brackets> > // [1] => <another group <nested once <nested twice> > > // [2] => <div> // [3] => </div> // ) // [1] => Array // ( // [0] => <brackets in <nested brackets> > // [1] => <another group <nested once <nested twice> > > // [2] => <div> // [3] => </div> // ) //) PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) > PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.recursive.php">Recursive patterns</a> (재귀 패턴)</h3>
<p>무한대의 중첩 괄호를 허용하면서 괄호 안의 문자열을 일치시키는 문제를 고려해 보자. 재귀를 사용하지 않고 수행 할 수 있는 최상의 방법은 중첩의 고정된 깊이까지 일치하는 패턴을 사용하는 것이다. 임의의 중첩 깊이는 처리 할 수 ​​없다. Perl 5.6은 정규식을 반복 할 수 있는 실험적 기능을 제공한다. 특수 항목 <code>(?R)</code>은 재귀의 특정 경우에 대해 제공된다.</p>
<p><code>\( ( (?&gt;[^()]+) | (?R) )* \)</code></p>
<p>이 PCRE 패턴은 괄호 문제를 해결한다(공백을 무시하도록 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTENDED</a> 옵션이 설정되어 있다고 가정한다).</p>
<p>먼저 여는 괄호와 일치한다. 그런 다음 괄호가 아닌 시퀀스 또는 패턴 자체의 재귀 일치 (예 : 올바르게 괄호로 묶은 부분 문자열)가 될 수 있는 임의의 수의 하위 문자열을 찾는다. 마지막으로 닫는 괄호가 있다.</p>
<p>이 특정 예제 패턴에는 중첩된 무제한 반복이 포함되어 있으므로 일치하지 않는 문자열에 패턴을 적용 할 때 괄호가 아닌 문자열을 일치 시키는데 한 번만 사용하는 서브 패턴을 사용하는 것이 중요하다. 예를 들어 &quot;(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()&quot;에 적용하면 신속하게 &quot;일치하지 않음&quot;을 나타낸다. 그러나 once-only 서브 패턴이 사용되지 않으면 매우 오랜 시간 동안 검사가 실행된다. <code>+</code> 및 <code>*</code>의 반복은 모든 경우의 수에 대해 실패할 때까지 테스트해야 하기 때문이다.</p>
<p>캡춰 서브 패턴에 설정되는 값은 서브 패턴 값이 설정되어 있는 재귀의 최외각 레벨의 값이다. 위의 패턴이 <code>(ab(cd)ef)</code>와 일치하면 캡처 괄호의 값은 최상위 수준에서 마지막으로 취해진 값인 &quot;ef&quot;이다. 추가 괄호가 추가되면 <code>\( ( ( (?&gt;[^()]+) | (?R) )* ) \)</code> 다음에 캡처하는 문자열은 &quot;ab(cd)ef&quot; 수준 괄호 패턴에 15개 이상의 캡처 괄호가 있는 경우 PCRE는 재귀 중에 데이터를 저장하기 위해 추가 메모리를 확보해야 한다. 재귀는 pcre_malloc을 사용하여 수행 한 후 나중에 pcre_free를 통해 해제 한다. 메모리를 확보 할 수 없으면 재귀 내에서 메모리 부족 오류를 제공 할 방법이 없기 때문에 처음 15개의 캡처링 괄호에 대한 데이터만 저장한다.</p>
<p><code>(?1)</code>, <code>(?2)</code> 등은 재귀 서브 패턴에도 사용될 수있다. 또한 이름이 지정된 서브 패턴 <code>(?P&gt;name)</code> 또는 <code>(?P&amp;name)</code>을 사용할 수도 있다.</p>
<p>재귀적 서브 패턴 참조 (숫자 또는 이름 기준)의 구문이 참조되는 괄호 밖에서 사용되면 프로그래밍 언어의 서브 루틴처럼 작동한다. 앞의 예는 패턴 <code>(sens|respons)e and \1ibility</code>가 &quot;sense and sensibility&quot;, &quot;response and responsibility&quot;와 일치하지만 &quot;sense and responsibility&quot;와는 일치하지 않는다고 지적했다. 대신에 패턴 <code>(sens|respons)e and (?1)ibility</code>가 사용되면 다른 두 문자열과 마찬가지로 &quot;sense and responsibility&quot;와 일치한다. 그러나 이러한 참조는 참조하는 서브 패턴을 따라야 한다.</p>
<p>문자열의 최대 길이는 정수 변수가 가질 수 있는 최대 양수이다. 그러나 PCRE는 재귀를 사용하여 서브 패턴과 무한 반복을 처리한다. 이는 사용 가능한 스택 공간이 특정 패턴으로 처리 할 수 있는 제목 문자열의 크기를 제한 할 수 있음을 의미한다.</p>
<p>아래의 예시는 주어진 문장이 회문(palindrome)인지를 판별하는 정규식 예시이다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$strs = [<span class="hljs-string">"saippuakauppias"</span>, <span class="hljs-string">"A man, a plan, a canal: Panama!"</span>];
<span class="hljs-keyword">foreach</span> ($strs <span class="hljs-keyword">as</span> $str) {
    <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/^(\W* (?: (\w) (?1) \g{-1} | \w? ) \W*)$/ix'</span>, $str)) {
        printf(<span class="hljs-string">"'%s' is a palindrome\n"</span>, $str);
    } <span class="hljs-keyword">else</span> {
        printf(<span class="hljs-string">"'%s' is not a palindrome\n"</span>, $str);
    }
}
<span class="hljs-comment">// 'saippuakauppias' is a palindrome</span>
<span class="hljs-comment">// 'A man, a plan, a canal: Panama!' is a palindrome</span></pre>
<p>다음의 예시는 중첩된 balanced text(좌우에 대칭되는 표식에 의해 둘러싸여 있는 text)를 추출하는 정규식에 대한 예시이다.</p>
<p><a href="http://learn.perl.org/faq/perlfaq6.html#Can-I-use-Perl-regular-expressions-to-match-balanced-text">Can I use Perl regular expressions to match balanced text?</a></p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">&lt;&lt;&lt;STR
I have some &lt;brackets in &lt;nested brackets&gt; &gt; and &lt;another group &lt;nested once &lt;nested twice&gt; &gt; &gt;
and that's it.
&lt;div&gt;sfsd&lt;/div&gt;
STR;</span>

$regex = <span class="hljs-string">'/
        (                   (?# 캡처 버퍼 1의 시작)
        &lt;                   (?# 여는 부등호에 일치)
            (?:
                [^&lt;&gt;]++     (?# 부등호를 제외한 문자들이 반복, 백트래킹하지 않음)
                  |
                (?1)        (?# &lt; 또는 &gt; 발견, 캡처 버퍼 1을 재귀적으로 부름)
            )*
        &gt;                   (?# 닫는 부등호에 일치)
        )                   (?# 캡처 버퍼 1의 끝)
        /ix'</span>;
preg_match_all($regex, $str, $matches);
print_r($matches);

<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; Array</span>
<span class="hljs-comment">//      (</span>
<span class="hljs-comment">//          [0] =&gt; &lt;brackets in &lt;nested brackets&gt; &gt;</span>
<span class="hljs-comment">//            [1] =&gt; &lt;another group &lt;nested once &lt;nested twice&gt; &gt; &gt;</span>
<span class="hljs-comment">//            [2] =&gt; &lt;div&gt;</span>
<span class="hljs-comment">//          [3] =&gt; &lt;/div&gt;</span>
<span class="hljs-comment">//      )</span>
<span class="hljs-comment">//    [1] =&gt; Array</span>
<span class="hljs-comment">//      (</span>
<span class="hljs-comment">//          [0] =&gt; &lt;brackets in &lt;nested brackets&gt; &gt;</span>
<span class="hljs-comment">//            [1] =&gt; &lt;another group &lt;nested once &lt;nested twice&gt; &gt; &gt;</span>
<span class="hljs-comment">//            [2] =&gt; &lt;div&gt;</span>
<span class="hljs-comment">//          [3] =&gt; &lt;/div&gt;</span>
<span class="hljs-comment">//      )</span>
<span class="hljs-comment">//)</span>
</pre>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/23/php-regex-comments/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/23/php-regex-comments/"/><published>2017-01-23T14:12:12+09:00</published><updated>2017-01-23T14:12:12+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Comments (주석) 시퀀스 (?#는 다음 닫는 괄호까지 이어지는 주석의 시작을 표시한다. 중첩된 괄호는 허용되지 않으며 주석을 구성하는 문자는 패턴 일치에 전혀 영향을 미치지 않는다. PCRE_EXTENDED 옵션을 설정하면 캐릭터 클래스 외부의 이스케이프 처리되지 않은 # 문자가 패턴의 다음 줄바꿈 문자까지 이어지는 주석을 나타낸다. <?php $string = 'test'; echo preg_match('/te(?# 주석테스트)st/', $string) . "\n"; echo preg_match('/te#~~~~ st/', $string) . "\n"; echo preg_match('/te#~~~~ st/x', $string) . "\n"; // result // 1 // 0 // 1 // 두 번째 정규식의 경우 x(PCRE_EXTENDED) 옵션이 없으므로 #~~~~을 주석으로 인정하지 않아 실패를 반환 PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) > PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.comments.php">Comments</a> (주석)</h3>
<p>시퀀스 <code>(?#</code>는 다음 닫는 괄호까지 이어지는 주석의 시작을 표시한다.
중첩된 괄호는 허용되지 않으며 주석을 구성하는 문자는 패턴 일치에 전혀 영향을 미치지 않는다.</p>
<p><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTENDED</a> 옵션을 설정하면 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 외부의 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a> 처리되지 않은 <code>#</code> 문자가 패턴의 다음 줄바꿈 문자까지 이어지는 주석을 나타낸다.</p>
<pre><code>&lt;?php
$string = 'test';
echo preg_match('/te(?# 주석테스트)st/', $string) . "\n";
echo preg_match('/te#~~~~
st/', $string) . "\n";
echo preg_match('/te#~~~~
st/x', $string) . "\n";

// result
// 1
// 0
// 1
// 두 번째 정규식의 경우 x(PCRE_EXTENDED) 옵션이 없으므로 #~~~~을 주석으로 인정하지 않아 실패를 반환</code></pre>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/"/><published>2017-01-22T09:18:45+09:00</published><updated>2017-01-22T09:18:45+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Conditional subpatterns (조건부 서브 패턴) 조건부로 서브 패턴을 따르거나 어설션의 결과에 따라 두 개의 대체 서브 패턴 중 하나를 선택하거나 이전 캡처 서브 패턴이 일치하는지 여부를 결정할 수 있다. 조건부 서브 패턴의 가능한 두 가지 형태는 다음과 같다. (?(condition)yes-pattern) (?(condition)yes-pattern|no-pattern) 조건이 충족되면 "yes-pattern"이 사용된다. 그렇지 않으면 "no-pattern"(존재한다면)이 사용된다. 서브 패턴에 두 개 이상의 선택이 있는 경우 컴파일 타임 오류가 발생한다. 아래에 두 가지 종류의 조건이 있다. 괄호 사이의 텍스트가 일련의 숫자로 구성되어 있으면 해당 숫자의 캡처 서브 패턴이 이전에 일치 한 경우 조건이 충족된다. 읽기 쉽도록 하기 위해 의미 없는 공백을 포함해서 세 부분으로 나눈 다음 패턴을 고려해 보자(PCRE_EXTENDED 옵션을 가정). ( \( )? [^()]+ (?(1) \) ) 첫 번째 부분은 선택적 여는 괄호와 일치하며, 해당 문자가 있는 경우 첫 번째 부분 문자열로 설정한다. 두 번째 부분은 괄호가 아닌 하나 이상의 문자와 일치한다. 세 번째 파트는 첫 번째 괄호 세트가 일치하는지 여부를 테스트하는 조건부 서브 패턴이다. 만약 그렇다면, 즉, 시작 괄호로 시작한 문자열은 조건이 참이므로 "yes-pattern"이 실행되고 닫는 괄호가 필요하다. 그렇지 않으면 "no-pattern"이 없으므로 서브 패턴은 아무것도 일치하지 않는다. 즉, 이 패턴은 괄호 안에 괄호로 묶지 않은 비괄호의 시퀀스와 일치한다. 조건이 문자열 "(R)" 인 경우 패턴 또는 서브 패턴에 대한 재귀 호출이 수행되면 만족된다. "top level"에서 조건은 거짓이다. 조건이 일련의 숫자나 "(R)"이 아닌 경우 조건이 어설션이어야 한다. 이것은 positive 또는 negative lookahead 또는 lookbehind assertion 일 수 있다. 중요하지 않은 공백을 포함하는 이 패턴을 고려하고 두 번째 줄에 있는 두 가지 선택을 고려하자. (?(?=[^a-z]*[a-z]) \d{2}-[a-z]{3}-\d{2} | \d{2}-\d{2}-\d{2} ) 조건은 비문자와 문자가 뒤에 붙는 선택적 순서와 일치하는 positive lookahead이다. 즉, 문자열에 적어도 하나의 문자가 있는지 테스트 한다. 문자가 발견되면, 첫 번째 선택에 대해 대상이 대조된다. 그렇지 않으면 두 번째와 일치한다. 이 패턴은 두 형식 "dd-aaa-dd" 또는 "dd-dd-dd" 중 하나의 문자열을 일치시킨다. 여기서 "aaa"는 문자이고 "dd"는 숫자다. PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) > PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.conditional.php">Conditional subpatterns</a> (조건부 서브 패턴)</h3>
<p>조건부로 서브 패턴을 따르거나 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>의 결과에 따라 두 개의 대체 서브 패턴 중 하나를 선택하거나 이전 캡처 서브 패턴이 일치하는지 여부를 결정할 수 있다. 조건부 서브 패턴의 가능한 두 가지 형태는 다음과 같다.</p>
<pre><code>(?(condition)yes-pattern)
(?(condition)yes-pattern|no-pattern)</code></pre>
<p>조건이 충족되면 &quot;yes-pattern&quot;이 사용된다. 그렇지 않으면 &quot;no-pattern&quot;(존재한다면)이 사용된다. 서브 패턴에 두 개 이상의 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>이 있는 경우 컴파일 타임 오류가 발생한다.</p>
<p>아래에 두 가지 종류의 조건이 있다.</p>
<p>괄호 사이의 텍스트가 일련의 숫자로 구성되어 있으면 해당 숫자의 캡처 서브 패턴이 이전에 일치 한 경우 조건이 충족된다. 읽기 쉽도록 하기 위해 의미 없는 공백을 포함해서 세 부분으로 나눈 다음 패턴을 고려해 보자(<a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTENDED</a> 옵션을 가정).</p>
<p><code>( \( )? [^()]+ (?(1) \) )</code></p>
<ul>
<li>첫 번째 부분은 선택적 여는 괄호와 일치하며, 해당 문자가 있는 경우 첫 번째 부분 문자열로 설정한다.</li>
<li>두 번째 부분은 괄호가 아닌 하나 이상의 문자와 일치한다.</li>
<li>세 번째 파트는 첫 번째 괄호 세트가 일치하는지 여부를 테스트하는 조건부 서브 패턴이다.</li>
</ul>
<p>만약 그렇다면, 즉, 시작 괄호로 시작한 문자열은 조건이 참이므로 &quot;yes-pattern&quot;이 실행되고 닫는 괄호가 필요하다. 그렇지 않으면 &quot;no-pattern&quot;이 없으므로 서브 패턴은 아무것도 일치하지 않는다. 즉, 이 패턴은 괄호 안에 괄호로 묶지 않은 비괄호의 시퀀스와 일치한다.</p>
<p>조건이 문자열 &quot;(R)&quot; 인 경우 패턴 또는 서브 패턴에 대한 재귀 호출이 수행되면 만족된다. &quot;top level&quot;에서 조건은 거짓이다.</p>
<p>조건이 일련의 숫자나 &quot;(R)&quot;이 아닌 경우 조건이 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>이어야 한다. 이것은 positive 또는 negative lookahead 또는 lookbehind assertion 일 수 있다. 중요하지 않은 공백을 포함하는 이 패턴을 고려하고 두 번째 줄에 있는 두 가지 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>을 고려하자.</p>
<pre><code>(?(?=[^a-z]*[a-z])
\d{2}-[a-z]{3}-\d{2}  |  \d{2}-\d{2}-\d{2} )</code></pre>
<p>조건은 비문자와 문자가 뒤에 붙는 선택적 순서와 일치하는 positive lookahead이다. 즉, 문자열에 적어도 하나의 문자가 있는지 테스트 한다. 문자가 발견되면, 첫 번째 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>에 대해 대상이 대조된다. 그렇지 않으면 두 번째와 일치한다. 이 패턴은 두 형식 &quot;dd-aaa-dd&quot; 또는 &quot;dd-dd-dd&quot; 중 하나의 문자열을 일치시킨다. 여기서 &quot;aaa&quot;는 문자이고 &quot;dd&quot;는 숫자다.</p>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/"/><published>2017-01-21T18:25:01+09:00</published><updated>2017-01-21T18:25:01+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Once-​only subpatterns (단일 서브 패턴) 반복을 최대/최소화하면서 일치가 실패하면 반복되는 항목을 재평가하여 다른 반복 횟수로 나머지 패턴을 일치시킬 수 있는지 확인한다. 때로는 패턴의 작성자가 반복적인 일치를 수행 할 필요가 없음을 알 때는 이를 방지하거나 일치 성질을 변경하거나 다른 방법보다 먼저 실패하게하는 것이 유용하다. 예를 들어, 문자열 "123456bar"에 \d+foo 패턴을 적용하는 것을 고려해 보자. 6자리 모두를 일치한 다음 "foo"와 일치하지 않으면, 정규식의 정상적인 동작은 \d+ 항목과 일치하는 5자리 숫자로 다시 시도한다. 그리고는 4자리로 다시 시도하여 궁극적으로 실패한다. Once-only 서브 패턴은 패턴의 일부가 일치되면 이 방법으로 재평가 되지 않게하기 위해서 최초로 "foo"와의 일치가 실패 했을 경우는 즉시 포기할 것을 지정하는 수단을 제공한다. 이 표기법은 또 다른 종류의 특수 괄호로 (?>\d+)bar와 같이 (?>로 시작한다. 이런 종류의 괄호는 패턴이 일치하면 패턴의 일부를 잠근다("locks up"). 그리고 패턴이 더 이상의 실패하는 패턴으로 되돌아가는 것을 방지한다. 그러나 이전 항목으로 이동(Backtracking)하면 정상적으로 작동한다. 또 다른 설명은 이 유형의 서브 패턴이 문자열의 현재 위치에 고정되어 있으면 동일한 독립형 패턴이 일치하는 문자의 문자열과 일치한다는 것이다. Once-only 서브 패턴은 서브 패턴을 캡처하지 않는다. 위의 예제와 같은 간단한 경우는 가능한 모든 것을 일치 해야하는 최대화 반복으로 생각할 수 있다. 그래서 \d+와 \d+?는 둘 다 나머지 패턴을 일치시키기 위해 일치하는 자릿수를 조정할 준비가되어 있다. 물론이 구조는 임의로 복잡한 서브 패턴을 포함할 수 있으며 중첩 될 수 있다. Once-only 서브 패턴은 look-behind 어설션과 함께 사용하여 문자열 끝에 효율적인 일치를 지정한다. 일치하지 않는 긴 문자열에 적용 할 때 abcd$와 같은 간단한 패턴을 고려하자. 매칭은 왼쪽에서 오른쪽으로 진행되기 때문에, PCRE는 대상의 각 "a"를 찾아 다음 패턴이 나머지 패턴과 일치하는지 확인한다. 패턴이 ^.*abcd$로 지정되면 초기 .*는 처음에는 전체 문자열과 일치한다. 그러나 이것이 실패 할 때(다음 "a"가 없기 때문에) 마지막 문자를 제외한 모든 문자와 일치하도록 역 추적하고, 마지막 문자는 제외하고 모두 반복한다. 다시 한 번 "a"에 대한 검색은 오른쪽에서 왼쪽으로 전체 문자열을 포함하므로 더 나아지지 않는다. 그러나 패턴이 ^(?>.*)(?<=abcd)로 쓰여진 경우 .* 항목에 대해 역 추적이 불가능 할 수 있다. 그것은 전체 문자열만 일치시킬 수 있다. 후속 look-behind 어설션은 마지막 네 문자에 대해 단일 테스트를 수행한다. 실패하면 즉시 일치하지 않는다. 긴 문자열의 경우 이 접근 방식은 처리 시간에 중요한 차이를 만든다. 패턴이 무한히 반복 될 수 있는 서브 패턴 내부에 무제한 반복을 포함하는 패턴은 한 번만 서브 패턴을 사용하는 것이 매우 오랜 시간 동안 실패한 일부 일치를 피할 수 있는 유일한 방법이다. 패턴 (\D+|<\d+>)*[!?]는 숫자가 아닌 문자 또는 <>로 묶인 숫자 뒤에 ! 또는 ? 문자가 일치하는 부분 문자열을 무제한으로 일치한다. 이 일치가 성공한다면 빠르게 실행이 완료된다. 그러나 "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"에 적용되면 실패를 보고 하기까지 시간이 오래 걸린다. 이것은 문자열이 여러 가지 방법으로 두 반복 사이에서 나눌 수 있기 때문에 모두 시도해야한다. (PCRE와 Perl은 단일 문자가 사용될 때 빠른 오류를 허용하는 최적화 기능을 가지고 있기 때문에 끝에 있는 단일 문자 대신 [!?]를 사용한다. 패턴이 ((?>\D+)|<\d+>)*[!?]로 변경되면 일치하는데 필요한 마지막 단일 문자를 기억하고 숫자가 아닌 시퀀스는 깨질 수 없으므로 오류가 빠르게 발생한다. PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) > PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.onlyonce.php">Once-​only subpatterns</a> (단일 서브 패턴)</h3>
<p>반복을 최대/최소화하면서 일치가 실패하면 반복되는 항목을 재평가하여 다른 반복 횟수로 나머지 패턴을 일치시킬 수 있는지 확인한다. 때로는 패턴의 작성자가 반복적인 일치를 수행 할 필요가 없음을 알 때는 이를 방지하거나 일치 성질을 변경하거나 다른 방법보다 먼저 실패하게하는 것이 유용하다.</p>
<p>예를 들어, 문자열 &quot;123456bar&quot;에 <code>\d+foo</code> 패턴을 적용하는 것을 고려해 보자.</p>
<p>6자리 모두를 일치한 다음 &quot;foo&quot;와 일치하지 않으면, 정규식의 정상적인 동작은 <code>\d+</code> 항목과 일치하는 5자리 숫자로 다시 시도한다. 그리고는 4자리로 다시 시도하여 궁극적으로 실패한다.
Once-only 서브 패턴은 패턴의 일부가 일치되면 이 방법으로 재평가 되지 않게하기 위해서 최초로 &quot;foo&quot;와의 일치가 실패 했을 경우는 즉시 포기할 것을 지정하는 수단을 제공한다. 이 표기법은 또 다른 종류의 특수 괄호로 <code>(?&gt;\d+)bar</code>와 같이 <code>(?&gt;</code>로 시작한다.</p>
<p>이런 종류의 괄호는 패턴이 일치하면 패턴의 일부를 잠근다(&quot;locks up&quot;). 그리고 패턴이 더 이상의 실패하는 패턴으로 되돌아가는 것을 방지한다. 그러나 이전 항목으로 이동(Backtracking)하면 정상적으로 작동한다.</p>
<p>또 다른 설명은 이 유형의 서브 패턴이 문자열의 현재 위치에 고정되어 있으면 동일한 독립형 패턴이 일치하는 문자의 문자열과 일치한다는 것이다.</p>
<p>Once-only 서브 패턴은 서브 패턴을 캡처하지 않는다. 위의 예제와 같은 간단한 경우는 가능한 모든 것을 일치 해야하는 최대화 반복으로 생각할 수 있다. 그래서 <code>\d+</code>와 <code>\d+?</code>는 둘 다 나머지 패턴을 일치시키기 위해 일치하는 자릿수를 조정할 준비가되어 있다.</p>
<p>물론이 구조는 임의로 복잡한 서브 패턴을 포함할 수 있으며 중첩 될 수 있다.</p>
<p>Once-only 서브 패턴은 look-behind <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>과 함께 사용하여 문자열 끝에 효율적인 일치를 지정한다. 일치하지 않는 긴 문자열에 적용 할 때 <code>abcd$</code>와 같은 간단한 패턴을 고려하자. 매칭은 왼쪽에서 오른쪽으로 진행되기 때문에, PCRE는 대상의 각 &quot;a&quot;를 찾아 다음 패턴이 나머지 패턴과 일치하는지 확인한다.</p>
<p>패턴이 <code>^.*abcd$</code>로 지정되면 초기 <code>.*</code>는 처음에는 전체 문자열과 일치한다. 그러나 이것이 실패 할 때(다음 &quot;a&quot;가 없기 때문에) 마지막 문자를 제외한 모든 문자와 일치하도록 역 추적하고, 마지막 문자는 제외하고 모두 반복한다. 다시 한 번 &quot;a&quot;에 대한 검색은 오른쪽에서 왼쪽으로 전체 문자열을 포함하므로 더 나아지지 않는다. 그러나 패턴이 <code>^(?&gt;.*)(?&lt;=abcd)</code>로 쓰여진 경우 <code>.*</code> 항목에 대해 역 추적이 불가능 할 수 있다. 그것은 전체 문자열만 일치시킬 수 있다. 후속 look-behind <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>은 마지막 네 문자에 대해 단일 테스트를 수행한다. 실패하면 즉시 일치하지 않는다. 긴 문자열의 경우 이 접근 방식은 처리 시간에 중요한 차이를 만든다.</p>
<p>패턴이 무한히 반복 될 수 있는 서브 패턴 내부에 무제한 반복을 포함하는 패턴은 한 번만 서브 패턴을 사용하는 것이 매우 오랜 시간 동안 실패한 일부 일치를 피할 수 있는 유일한 방법이다. 패턴 <code>(\D+|&lt;\d+&gt;)*[!?]</code>는 숫자가 아닌 문자 또는 <code>&lt;&gt;</code>로 묶인 숫자 뒤에 <code>!</code> 또는 <code>?</code> 문자가 일치하는 부분 문자열을 무제한으로 일치한다. 이 일치가 성공한다면 빠르게 실행이 완료된다. 그러나 &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;에 적용되면 실패를 보고 하기까지 시간이 오래 걸린다. 이것은 문자열이 여러 가지 방법으로 두 반복 사이에서 나눌 수 있기 때문에 모두 시도해야한다. (PCRE와 Perl은 단일 문자가 사용될 때 빠른 오류를 허용하는 최적화 기능을 가지고 있기 때문에 끝에 있는 단일 문자 대신 <code>[!?]</code>를 사용한다. 패턴이 <code>((?&gt;\D+)|&lt;\d+&gt;)*[!?]</code>로 변경되면 일치하는데 필요한 마지막 단일 문자를 기억하고 숫자가 아닌 시퀀스는 깨질 수 없으므로 오류가 빠르게 발생한다.</p>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/20/php-regex-assertions/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/"/><published>2017-01-20T19:54:12+09:00</published><updated>2017-01-20T19:54:12+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Assertions (어설션, 단정) 어설션은 실제로 어떤 문자도 사용하지 않고 현재 일치 지점의 앞/뒤 문자에 대한 테스트이다. \b, \B, \A, \Z, \z, ^ 및 $로 코딩된 간단한 어설션은 앞서 설명했다. 더 복잡한 어서션은 서브 패턴으로 코딩 된다. 이 어설션은 대상 문자열의 현재 위치보다 앞을 검사하는 look-ahead와 뒤를 검사하는 look-behind 두 가지 종류가 있다. 어설션 서브 패턴은 현재 일치하는 위치가 변경되지 않는다는 점을 제외하면 일반적인 방법으로 일치한다. Look-ahead 어설션은 (?= 긍정 어설션, (?!은 부정 어설션을 나타낸다. 예를 들어, \w+(?=;)는 단어 뒤에 세미콜론이 있는 단어를 일치하지만 세미콜론은 포함하지 않는다. <?php $str = 'abc;def'; preg_match('/\w+(?=;)/', $str, $matches); print_r($matches); // Array // ( // [0] => abc // ) foo(?!bar)는 "bar"가 뒤에 붙지 않는 "foo"와 일치한다. 기억할 점은 유사한 패턴인 (?!foo)bar는 "foo"로 시작되지 않는 "bar" 항목을 찾지 않는다는 것이다. 다음 3개의 문자가 "bar"일 때 어설션 (?!foo)은 항상 TRUE 이므로 모든 항목을 찾는다. 아래의 예시를 참고하자. <?php $string = "fooXbar"; echo preg_match('/foo(?!bar)/', $string) . "\n"; // 1 $string = "foobar"; echo preg_match('/(?!foo)bar/', $string) . "\n"; // 1 원하는 결과를 얻으려면 look-behind 어설션이 필요하다. look-behind 어설션은 (?<= 긍정 어설션, (?<!은 부정 어설션을 나타낸다. 예를 들어, (?<!foo)bar는 "foo"가 앞에 붙지 않는 "bar"의 항목을 찾는다. look-behind 어설션은 일치하는 모든 문자열이 고정 길이가 되도록 제한되지만, 여러 가지 선택이 있는 경우 모든 선택이 동일한 고정 길이를 가져야 하는 것은 아니다. 따라서 (?<=bullock|donkey)는 허용된다. 그러나 (?<!dogs?|cats?)는 컴파일 타임에 오류가 발생한다. 다른 길이의 문자열에 일치하는 분기는 look-behind 어설션의 최상위 수준에서만 허용된다. 이것은 모든 분기에서 동일한 길이를 요구하는 Perl 5.005와 비교되는 확장이다. (?<=ab(c|de))와 같은 어설션은 허용되지 않는다. 왜냐하면 단일 최상위 분기가 두 개의 다른 길이를 일치시킬 수 있기 때문이다. 그러나 두 개의 최상위 레벨 분기를 사용하도록 (?<=abc|abde)로 다시 작성하면 허용된다. look-behind 어설션의 구현은 각 선택에 따라 현재 위치를 고정폭 만큼 임시로 이동시킨 다음 일치시키려고 시도한다. 현재 위치 앞에 문자가 충분하지 않으면 일치가 실패한 것으로 간주된다. 한 번만 사용할 수 있는 서브 패턴과 관련된 look-behind는 특히 문자열 끝에 매칭하는데 유용 할 수 있다. once-only subpatterns에 대한 섹션에 예제가 있다. 여러 어설션이 연속해서 발생할 수 있다. 예를 들어, (?<=\d{3})(?<!999)foo는 "foo" 앞에 "999"가 아닌 세 자리를 찾는다. 각 어설션은 주제 문자열의 동일한 지점에서 독립적으로 적용된다. 먼저 앞의 세 문자가 모두 숫자임을 확인한 다음 동일한 세 문자가 "999"가 아닌지 확인한다. 이 패턴은 "foo"와 6 문자 앞의 문자는 일치하지 않는다. 첫 번째 문자는 숫자이고 마지막 세 문자는 "999"가 아니다. 예를 들어, "123abcfoo"와 일치하지 않는다((?<=\d{3}...)(?<!999)foo를 사용하면 일치한다). <?php $string = "123abcfoo"; echo preg_match('/(?<=\d{3})(?<!999)foo/', $string) . "\n"; // 0 echo preg_match('/(?<=\d{3}...)(?<!999)foo/', $string) . "\n"; // 1 이번에는 첫 번째 어설션은 앞의 여섯개 문자를 살펴보고 첫 번째 세 개가 숫자 임을 확인한 다음 두 번째 어설션은 앞의 세 문자가 "999"가 아님을 확인한다. 어설션은 임의의 조합으로 중첩 될 수 있다. 예를 들어 (?<=(?<!foo)bar)baz는 앞에 "foo"가 없는 "bar"가 앞에 오는 "baz"의 발생과 일치하지만 (?<=\d{3}...(?<!999))foo는 "foo"앞에 3 자리 숫자와 "999"가 아닌 3 자와 일치하는 다른 패턴이다. 어설션 서브 패턴은 서브 패턴을 캡쳐하지 않으며 반복되지 않을 수 있다. 동일한 것을 여러 번 선언하는 것은 의미가 없기 때문이다. 임의의 종류의 어설션에 서브 패턴 캡처가 포함되어 있으면 이러한 패턴은 전체 패턴에서 캡처하는 서브 패턴에 번호를 매기는 목적으로 계산된다. 그러나 부분 문자열 캡처는 긍정적인 어설션에 대해서만 수행된다. 왜냐하면 부정적인 어설션에 대해서는 의미가 없기 때문이다. 어설션은 최대 200개의 괄호로 묶은 서브 패턴으로 계산된다. PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) > PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.assertions.php">Assertions</a> (어설션, 단정)</h3>
<p>어설션은 실제로 어떤 문자도 사용하지 않고 현재 일치 지점의 앞/뒤 문자에 대한 테스트이다. <code>\b</code>, <code>\B</code>, <code>\A</code>, <code>\Z</code>, <code>\z</code>, <code>^</code> 및 <code>$</code>로 코딩된 간단한 어설션은 앞서 설명했다. 더 복잡한 어서션은 서브 패턴으로 코딩 된다. 이 어설션은 대상 문자열의 현재 위치보다 앞을 검사하는 look-ahead와 뒤를 검사하는 look-behind 두 가지 종류가 있다.</p>
<p>어설션 서브 패턴은 현재 일치하는 위치가 변경되지 않는다는 점을 제외하면 일반적인 방법으로 일치한다.</p>
<p>Look-ahead 어설션은 <code>(?=</code> 긍정 어설션, <code>(?!</code>은 부정 어설션을 나타낸다. 예를 들어, <code>\w+(?=;)</code>는 단어 뒤에 세미콜론이 있는 단어를 일치하지만 세미콜론은 포함하지 않는다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'abc;def'</span>;
preg_match(<span class="hljs-string">'/\w+(?=;)/'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//  [0] =&gt; abc</span>
<span class="hljs-comment">// )</span></pre>
<p><code>foo(?!bar)</code>는 &quot;bar&quot;가 뒤에 붙지 않는 &quot;foo&quot;와 일치한다. 기억할 점은 유사한 패턴인 <code>(?!foo)bar</code>는 &quot;foo&quot;로 시작되지 않는 &quot;bar&quot; 항목을 찾지 않는다는 것이다. 다음 3개의 문자가 &quot;bar&quot;일 때 어설션 <code>(?!foo)</code>은 항상 TRUE 이므로 모든 항목을 찾는다. 아래의 예시를 참고하자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">"fooXbar"</span>;
<span class="hljs-keyword">echo</span> preg_match(<span class="hljs-string">'/foo(?!bar)/'</span>, $string) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// 1</span>

$string = <span class="hljs-string">"foobar"</span>;
<span class="hljs-keyword">echo</span> preg_match(<span class="hljs-string">'/(?!foo)bar/'</span>, $string) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// 1</span></pre>
<p>원하는 결과를 얻으려면 look-behind 어설션이 필요하다.</p>
<p>look-behind 어설션은 <code>(?&lt;=</code> 긍정 어설션, <code>(?&lt;!</code>은 부정 어설션을 나타낸다. 예를 들어, <code>(?&lt;!foo)bar</code>는 &quot;foo&quot;가 앞에 붙지 않는 &quot;bar&quot;의 항목을 찾는다. look-behind 어설션은 일치하는 모든 문자열이 고정 길이가 되도록 제한되지만, 여러 가지 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>이 있는 경우 모든 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>이 동일한 고정 길이를 가져야 하는 것은 아니다. 따라서 <code>(?&lt;=bullock|donkey)</code>는 허용된다. 그러나 <code>(?&lt;!dogs?|cats?)</code>는 컴파일 타임에 오류가 발생한다.
다른 길이의 문자열에 일치하는 분기는 look-behind 어설션의 최상위 수준에서만 허용된다. 이것은 모든 분기에서 동일한 길이를 요구하는 Perl 5.005와 비교되는 확장이다.
<code>(?&lt;=ab(c|de))</code>와 같은 어설션은 허용되지 않는다. 왜냐하면 단일 최상위 분기가 두 개의 다른 길이를 일치시킬 수 있기 때문이다. 그러나 두 개의 최상위 레벨 분기를 사용하도록 <code>(?&lt;=abc|abde)</code>로 다시 작성하면 허용된다.
look-behind 어설션의 구현은 각 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>에 따라 현재 위치를 고정폭 만큼 임시로 이동시킨 다음 일치시키려고 시도한다. 현재 위치 앞에 문자가 충분하지 않으면 일치가 실패한 것으로 간주된다. 한 번만 사용할 수 있는 서브 패턴과 관련된 look-behind는 특히 문자열 끝에 매칭하는데 유용 할 수 있다. <a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">once-only subpatterns</a>에 대한 섹션에 예제가 있다.</p>
<p>여러 어설션이 연속해서 발생할 수 있다. 예를 들어, <code>(?&lt;=\d{3})(?&lt;!999)foo</code>는 &quot;foo&quot; 앞에 &quot;999&quot;가 아닌 세 자리를 찾는다. 각 어설션은 주제 문자열의 동일한 지점에서 독립적으로 적용된다. 먼저 앞의 세 문자가 모두 숫자임을 확인한 다음 동일한 세 문자가 &quot;999&quot;가 아닌지 확인한다. 이 패턴은 &quot;foo&quot;와 6 문자 앞의 문자는 일치하지 않는다. 첫 번째 문자는 숫자이고 마지막 세 문자는 &quot;999&quot;가 아니다. 예를 들어, &quot;123abcfoo&quot;와 일치하지 않는다(<code>(?&lt;=\d{3}...)(?&lt;!999)foo</code>를 사용하면 일치한다).</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">"123abcfoo"</span>;
<span class="hljs-keyword">echo</span> preg_match(<span class="hljs-string">'/(?&lt;=\d{3})(?&lt;!999)foo/'</span>, $string) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// 0</span>

<span class="hljs-keyword">echo</span> preg_match(<span class="hljs-string">'/(?&lt;=\d{3}...)(?&lt;!999)foo/'</span>, $string) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// 1</span></pre>
<p>이번에는 첫 번째 어설션은 앞의 여섯개 문자를 살펴보고 첫 번째 세 개가 숫자 임을 확인한 다음 두 번째 어설션은 앞의 세 문자가 &quot;999&quot;가 아님을 확인한다.</p>
<p>어설션은 임의의 조합으로 중첩 될 수 있다. 예를 들어 <code>(?&lt;=(?&lt;!foo)bar)baz</code>는 앞에 &quot;foo&quot;가 없는 &quot;bar&quot;가 앞에 오는 &quot;baz&quot;의 발생과 일치하지만 <code>(?&lt;=\d{3}...(?&lt;!999))foo</code>는 &quot;foo&quot;앞에 3 자리 숫자와 &quot;999&quot;가 아닌 3 자와 일치하는 다른 패턴이다.</p>
<p>어설션 서브 패턴은 서브 패턴을 캡쳐하지 않으며 반복되지 않을 수 있다. 동일한 것을 여러 번 선언하는 것은 의미가 없기 때문이다. 임의의 종류의 어설션에 서브 패턴 캡처가 포함되어 있으면 이러한 패턴은 전체 패턴에서 캡처하는 서브 패턴에 번호를 매기는 목적으로 계산된다. 그러나 부분 문자열 캡처는 긍정적인 어설션에 대해서만 수행된다. 왜냐하면 부정적인 어설션에 대해서는 의미가 없기 때문이다.</p>
<p>어설션은 최대 200개의 괄호로 묶은 서브 패턴으로 계산된다.</p>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/19/php-regex-back-references/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/"/><published>2017-01-19T19:56:12+09:00</published><updated>2017-02-15T14:14:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Back references (역 참조) 캐릭터 클래스 밖에서 백 슬래시 다음에 0 보다 큰 숫자는 패턴에서 이전(즉, 왼쪽으로) 캡처 서브 패턴에 대한 역 참조다(주어진 수보다 캡처된 서브 패턴의 수가 같거나 더 많을 경우). 그러나 백 슬래시 뒤의 10진수가 10 보다 작은 경우에는 항상 역 참조로 사용되며 전체 패턴에 많은 왼쪽 여는 괄호(()가 없는 경우에만 오류가 발생한다. 즉, 참조된 괄호는 10 보다 작은 숫자의 참조 왼쪽에 있을 필요는 없다. "전방 참조"는 반복이 관련되어 있고 오른쪽의 서브 패턴이 이전 반복에 참여했을 때 의미가 있다. 백 슬래시 뒤에 나오는 숫자 처리에 대한 자세한 내용은 위의 "백 슬래시"절을 참조하자. 역 참조는 현재 문자열에서 캡처하는 서브 패턴과 실제로 일치하는 것과 일치한다. 그래서 패턴 (sens|respons)e and \1ibility는 "sense and sensibility"와 "response and responsibility"와 일치하지만 "sense and responsibility"은 일치하지 않는다. 대소문자를 구분하는(caseful) 일치일 경우 역 참조 또한 문자의 대소문자를 일치한다. 예를 들어 ((?i)rah)\s+\1은 "rah rah"및 "RAH RAH"와 일치하지만 "RAH rah"와 일치하지 않는다(원래 캡처 서브 패턴이 대소문자를 구분하지 않더라도). <?php $str = 'RAH rah'; preg_match('/((?i)rah)\s+\1/', $str, $matches); print_r($matches); //Array //( //) preg_match('/(RAH)\s+(?i)\1/', $str, $matches); print_r($matches); //Array //( // [0] => RAH rah //[1] => RAH //) 같은 서브 패턴에 대한 복수의 역 참조가 있을 수 있다. 특정 패턴에서 실제로 서브 패턴을 사용하지 않은 경우 항상 실패한다. 예를 들어 패턴 (a|(bc))\2는 "bc"가 아닌 "a"와 일치하기 시작하면 항상 실패한다. <?php $str = 'abc'; preg_match('/(a|(bc))\2/', $str, $matches); print_r($matches); //Array //( //) $str = 'bcbc'; preg_match('/(a|(bc))\2/', $str, $matches); print_r($matches); //Array //( // [0] => bcbc // [1] => bc // [2] => bc //) 최대 99개의 역 참조가 있을 수 있으므로 백 슬래시 뒤의 모든 숫자는 잠재적인 참조 번호의 일부로 사용된다. 패턴이 숫자로 계속되면 뒤로 구분을 종료하기 위한 구분 기호를 사용해야 한다. PCRE_EXTENDED 옵션이 설정되면 공백이 될 수 있다. 그렇지 않으면 빈 주석을 사용할 수 있다. <?php $str = 'bcbc2'; preg_match('/(a|(bc))\2(?#)2/', $str, $matches); print_r($matches); //Array //( // [0] => bcbc2 // [1] => bc // [2] => bc //) 서브 패턴이 처음 사용될 때 참조하는 괄호 안쪽에서 발생하는 역 참조는 실패한다. 예를 들어, (a\1)은 결코 일치하지 않는다. 그러나 이러한 참조는 반복되는 서브 패턴 내부에서 유용할 수 있다. 예를 들어, 패턴 (a|b\1)+는 "a" 및 "aba", "ababba" 등의 임의의 수와 일치한다. 서브 패턴의 각 반복에서 이전 참조는 이전 반복에 해당하는 문자열과 일치한다. 이 작업을 수행하려면 첫 번째 반복이 역 참조와 일치할 필요가 없는 패턴이어야 한다. 위의 예와 같이 한정 기호를 사용하거나 최솟값이 0인 수량 기호를 사용하여 이 작업을 수행 할 수 있다. PHP 5.2.2부터는 \g 이스케이프 시퀀스를 사용하여 서브 패턴의 절대 참조 및 상대 참조를 사용할 수 있다. 이 이스케이프 시퀀스 뒤에는 부호없는 숫자 또는 음수가 와야하며, 선택적으로 중괄호로 묶을 수 있다. \1, \g1 및 \g{1}은 서로 동의어다. 역 참조 뒤에 문자 숫자(\g{2}1)가 나타나는 경우 중괄호를 사용하면 모호성을 제거하는데 도움이 된다. 음수와 함께 \g 시퀀스를 사용하면 상대 참조를 의미한다. 예를 들어 (foo)(bar)\g{-1}은 "foobarbar"와 (foo)(bar)\g{-2}는 "foobarfoo"와 일치한다. 이것은 긴 패턴에서 특정 이전 서브 패턴을 참조하기 위해 서브 패턴의 수를 추적하는 대신에 사용하면 유용하다. 이름이 지정된 서브 패턴에 대한 역 참조는 (?P=name) 또는 PHP 5.2.2 이후 \k<name> 또는 \k'name'을 사용하여 수행 할 수 있다. 또한 PHP 5.2.4에서는 \k{name} 및 \g{name}에 대한 지원이 추가되었다. PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) > PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.back-references.php">Back references</a> (역 참조)</h3>
<p><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 밖에서 백 슬래시 다음에 0 보다 큰 숫자는 패턴에서 이전(즉, 왼쪽으로) 캡처 <a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">서브 패턴</a>에 대한 역 참조다(주어진 수보다 캡처된 서브 패턴의 수가 같거나 더 많을 경우).</p>
<p>그러나 백 슬래시 뒤의 10진수가 10 보다 작은 경우에는 항상 역 참조로 사용되며 전체 패턴에 많은 왼쪽 여는 괄호(<code>(</code>)가 없는 경우에만 오류가 발생한다. 즉, 참조된 괄호는 10 보다 작은 숫자의 참조 왼쪽에 있을 필요는 없다. &quot;전방 참조&quot;는 반복이 관련되어 있고 오른쪽의 서브 패턴이 이전 반복에 참여했을 때 의미가 있다. 백 슬래시 뒤에 나오는 숫자 처리에 대한 자세한 내용은 위의 &quot;<a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">백 슬래시</a>&quot;절을 참조하자.</p>
<p>역 참조는 현재 문자열에서 캡처하는 서브 패턴과 실제로 일치하는 것과 일치한다. 그래서 패턴 <code>(sens|respons)e and \1ibility</code>는 &quot;sense and sensibility&quot;와 &quot;response and responsibility&quot;와 일치하지만 &quot;sense and responsibility&quot;은 일치하지 않는다. 대소문자를 구분하는(caseful) 일치일 경우 역 참조 또한 문자의 대소문자를 일치한다. 예를 들어 <code>((?i)rah)\s+\1</code>은 &quot;rah rah&quot;및 &quot;RAH RAH&quot;와 일치하지만 &quot;RAH rah&quot;와 일치하지 않는다(원래 캡처 서브 패턴이 대소문자를 구분하지 않더라도).</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'RAH rah'</span>;
preg_match(<span class="hljs-string">'/((?i)rah)\s+\1/'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//)</span>

preg_match(<span class="hljs-string">'/(RAH)\s+(?i)\1/'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; RAH rah</span>
<span class="hljs-comment">//[1] =&gt; RAH</span>
<span class="hljs-comment">//)</span></pre>
<p>같은 서브 패턴에 대한 복수의 역 참조가 있을 수 있다. 특정 패턴에서 실제로 서브 패턴을 사용하지 않은 경우 항상 실패한다. 예를 들어 패턴 <code>(a|(bc))\2</code>는 &quot;bc&quot;가 아닌 &quot;a&quot;와 일치하기 시작하면 항상 실패한다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'abc'</span>;
preg_match(<span class="hljs-string">'/(a|(bc))\2/'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//)</span>

$str = <span class="hljs-string">'bcbc'</span>;
preg_match(<span class="hljs-string">'/(a|(bc))\2/'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; bcbc</span>
<span class="hljs-comment">//  [1] =&gt; bc</span>
<span class="hljs-comment">//  [2] =&gt; bc</span>
<span class="hljs-comment">//)</span></pre>
<p>최대 99개의 역 참조가 있을 수 있으므로 백 슬래시 뒤의 모든 숫자는 잠재적인 참조 번호의 일부로 사용된다. 패턴이 숫자로 계속되면 뒤로 구분을 종료하기 위한 구분 기호를 사용해야 한다. <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTENDED</a> 옵션이 설정되면 공백이 될 수 있다. 그렇지 않으면 빈 주석을 사용할 수 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'bcbc2'</span>;
preg_match(<span class="hljs-string">'/(a|(bc))\2(?#)2/'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; bcbc2</span>
<span class="hljs-comment">//  [1] =&gt; bc</span>
<span class="hljs-comment">//  [2] =&gt; bc</span>
<span class="hljs-comment">//)</span></pre>
<p>서브 패턴이 처음 사용될 때 참조하는 괄호 안쪽에서 발생하는 역 참조는 실패한다. 예를 들어, <code>(a\1)</code>은 결코 일치하지 않는다. 그러나 이러한 참조는 반복되는 서브 패턴 내부에서 유용할 수 있다. 예를 들어, 패턴 <code>(a|b\1)+</code>는 &quot;a&quot; 및 &quot;aba&quot;, &quot;ababba&quot; 등의 임의의 수와 일치한다. 서브 패턴의 각 반복에서 이전 참조는 이전 반복에 해당하는 문자열과 일치한다. 이 작업을 수행하려면 첫 번째 반복이 역 참조와 일치할 필요가 없는 패턴이어야 한다. 위의 예와 같이 한정 기호를 사용하거나 최솟값이 0인 수량 기호를 사용하여 이 작업을 수행 할 수 있다.</p>
<p>PHP 5.2.2부터는 <code>\g</code> <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프 시퀀스</a>를 사용하여 서브 패턴의 절대 참조 및 상대 참조를 사용할 수 있다. 이 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프 시퀀스</a> 뒤에는 부호없는 숫자 또는 음수가 와야하며, 선택적으로 중괄호로 묶을 수 있다. <code>\1</code>, <code>\g1</code> 및 <code>\g{1}</code>은 서로 동의어다. 역 참조 뒤에 문자 숫자(<code>\g{2}1</code>)가 나타나는 경우 중괄호를 사용하면 모호성을 제거하는데 도움이 된다.</p>
<p>음수와 함께 <code>\g</code> 시퀀스를 사용하면 상대 참조를 의미한다. 예를 들어 <code>(foo)(bar)\g{-1}</code>은 &quot;foobarbar&quot;와 <code>(foo)(bar)\g{-2}</code>는 &quot;foobarfoo&quot;와 일치한다. 이것은 긴 패턴에서 특정 이전 서브 패턴을 참조하기 위해 서브 패턴의 수를 추적하는 대신에 사용하면 유용하다.</p>
<p>이름이 지정된 서브 패턴에 대한 역 참조는 <code>(?P=name)</code> 또는 PHP 5.2.2 이후 <code>\k&lt;name&gt;</code> 또는 <code>\k'name'</code>을 사용하여 수행 할 수 있다. 또한 PHP 5.2.4에서는 <code>\k{name}</code> 및 <code>\g{name}</code>에 대한 지원이 추가되었다.</p>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/18/php-regex-repetition/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/"/><published>2017-01-18T18:58:11+09:00</published><updated>2017-02-15T14:44:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Repetition (반복) 반복은 다음 항목 중 하나를 따를 수 있는 한정 기호로 지정된다. 이스케이프 가능한 단일 문자 . 메타 문자 캐릭터 클래스 back reference(역 참조) 어설션이 아닌 괄호로 묶인 서브 패턴 일반적으로 반복 수량어는 괄호({}) 안에 쉼표로 구분된 두 개의 숫자를 입력하여 허용되는 일치의 최소 및 최대 수를 지정한다. 숫자는 65536 보다 작아야 하며 첫 번째 숫자는 두 번째 숫자보다 작거나 같아야 한다. 예를 들어, z{2,4}는 "zz", "zzz" 또는 "zzzz"와 일치한다. 단독으로 닫는 중괄호는 특수 문자가 아니다. 두 번째 숫자가 생략 되었으나 쉼표가 있으면 상한이 없다. 두 번째 숫자와 쉼표가 둘 다 생략되면 수량 기호는 필요한 일치 항목의 정확한 수를 지정한다. 따라서 [aeiou]{3,}는 최소 3개의 연속 모음과 일치하지만 \d{8}은 정확히 8자리 숫자와 일치한다. 한정 기호가 허용되지 않는 위치나 한정 기호의 구문과 일치하지 않는 위치에 나타나는 여는 중괄호({)는 리터럴 문자로 사용된다. 예를 들어, {,6}은 한정 기호가 아니라 4자의 리터럴 문자열이다. 한정자 {0}이 허용되어 표현식이 이전 항목 및 한정 기호가 없는 것처럼 동작한다. 편의상 (그리고 전통적인 호환성) 세 가지 가장 일반적인 수량 기호는 한 문자로 된 단일 표현을 사용한다 : Single-character quantifiers 문자 설명 * {0,}와 같다 + {1,}와 같다 ? {0,1}와 같다 상한이 없는 수량 기호와 일치하지 않는 서브 패턴을 따라 무한 루프를 구성 할 수 있다(예 : (a?)*). 이전 버전의 Perl과 PCRE는 그러한 패턴을 컴파일 할 때 오류를 내기도 했다. 그러나 이 방법이 유용 할 수 있기 때문에 이러한 패턴이 이제 허용되지만 실제로 서브 패턴의 반복이 실제로 문자와 일치하지 않으면 루프가 강제로 끊어진다. 기본적으로 한정 기호는 "greedy" 즉 패턴의 나머지 부분을 실패시키지 않고 가능한 한 최대 허용 횟수까지 일치시킨다. 이것이 문제를 일으키는 곳의 고전적인 예는 C 프로그램의 주석과 일치하는 것이다. 시퀀스 /*와 */ 사이에 나타나며 시퀀스 내에서 개별 * 및 / 문자가 나타날 수 있다. 첫 번째 주석 */ 주석 /* 두 번째 주석 */에 문자열 /**.*\*/ 패턴을 적용하여 C 주석을 일치 시키려는 시도는 .*의 탐욕("greedy")으로 인해 전체 문자열과 일치하기 때문에 실패한다. 그러나 수량 기호 다음에 물음표가 오는 경우에는 게으르며(lazy) 가능한 최소 횟수와 일치하므로 패턴 /\*.*?\*/는 C 주석과 함께 올바른 작업을 수행한다. 다양한 한정어의 의미는 다른 방식으로 변경되지 않으며 선호하는 일치 개수만 변경된다. 이 ? 사용을 그 자체로 한정 기호로 사용하는 것과 혼동하지 말아야 한다. 두 가지 용도로 사용되기 때문에 \d??\d와 같이 두 글자로 표시되는 경우가 있다. 한 글자가 기본 설정과 일치하지만 나머지 패턴 일치하는 경우 두 글자와 일치할 수 있다. PCRE_UNGREEDY 옵션이 설정되어 있으면 (Perl에서는 사용할 수없는 옵션) 수량 한정자는 기본적으로 탐욕(greedy)이 없다. 하지만 개별적인 물음표는 물음표를 따라 가면서 탐욕이 적용된다. 즉, 기본 동작을 반전한다. +를 따르는 한정 기호는 "possessive"이다. 가능한 한 많은 문자와 일치하고 나머지 패턴과 일치하도록 돌아가지 않는다. 따라서 .*abc는 "aabc"와 일치하지만 .*+는 전체 문자와 일치하기 때문에 .*+abc는 일치하지 않는다. Possessive 지정자는 처리 속도를 높이는 데 사용할 수 있다. <?php $str = 'aabc'; preg_match('/.*abc/', $str, $matches); print_r($matches); // Array // ( // [0] => aabc // ) preg_match('/.*+abc/', $str, $matches); print_r($matches); // Array // ( // ) 괄호로 둘러싼 서브 패턴이 2 이상의 최소 반복이나 최대 제한을 가지면, 컴파일한 패턴은 최소 / 최대의 크기에 따라서 더 많은 공간이 필요하다. 패턴이 .* 또는 .{0,}으로 시작하고 PCRE_DOTALL 옵션(Perl의 /s와 동일)이 설정되어 .이 개행 문자와도 일치하게 되면 패턴은 암시적으로 고정된다. 왜냐하면 뒤에 오는 것은 문자열의 모든 문자 위치에 대해 시도된다. 따라서 첫 번째 이후의 모든 위치에서 전체 일치를 다시 시도할 필요가 없다. PCRE(Perl Compatible Regular Expressions)는 앞에 \A가 붙은 것처럼 패턴을 취급한다. 대상 문자열에 개행 문자가 없는 것을 알 경우, 최적화를 위해 .*로 시작하는 패턴에 PCRE_DOTALL을 설정하거나 ^를 사용하여 명시적으로 고정을 나타낼 수 있다. 캡처 서브 패턴이 반복되면 캡처된 문자열은 마지막 반복에 일치한다. 예를 들어, (tweedle[dume]{3}\s*)+가 "tweedledum tweedledee"와 일치하면 캡처된 부분 문자열의 값은 "tweedledee"이다. 그러나 중첩된 캡처 서브 패턴이 있으면 해당 캡처 값이 이전 반복에서 설정 되었을 수 있다. 예를 들어, /(a|(b))+/가 "aba"와 일치하면 두 번째로 캡처된 하위 문자열의 값은 "b"가 된다. <?php preg_match('/(tweedle[dume]{3}\s*)+/', 'tweedledum tweedledee', $matches); print_r($matches); // Array // ( // [0] => tweedledum tweedledee // [1] => tweedledee // ) preg_match('/(a|(b))+/', 'aba', $matches); print_r($matches); // Array // ( // [0] => aba // [1] => a // [2] => b // ) PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) > PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.repetition.php">Repetition</a> (반복)</h3>
<p>반복은 다음 항목 중 하나를 따를 수 있는 한정 기호로 지정된다.</p>
<ul>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a> 가능한 단일 문자</li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/"><code>.</code> 메타 문자</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">back reference(역 참조)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">어설션</a>이 아닌 괄호로 묶인 <a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">서브 패턴</a></li>
</ul>
<p>일반적으로 반복 수량어는 괄호(<code>{}</code>) 안에 쉼표로 구분된 두 개의 숫자를 입력하여 허용되는 일치의 최소 및 최대 수를 지정한다. 숫자는 65536 보다 작아야 하며 첫 번째 숫자는 두 번째 숫자보다 작거나 같아야 한다. 예를 들어, <code>z{2,4}</code>는 &quot;zz&quot;, &quot;zzz&quot; 또는 &quot;zzzz&quot;와 일치한다.</p>
<p>단독으로 닫는 중괄호는 특수 문자가 아니다. 두 번째 숫자가 생략 되었으나 쉼표가 있으면 상한이 없다. 두 번째 숫자와 쉼표가 둘 다 생략되면 수량 기호는 필요한 일치 항목의 정확한 수를 지정한다. 따라서 <code>[aeiou]{3,}</code>는 최소 3개의 연속 모음과 일치하지만 <code>\d{8}</code>은 정확히 8자리 숫자와 일치한다. 한정 기호가 허용되지 않는 위치나 한정 기호의 구문과 일치하지 않는 위치에 나타나는 여는 중괄호(<code>{</code>)는 리터럴 문자로 사용된다. 예를 들어, <code>{,6}</code>은 한정 기호가 아니라 4자의 리터럴 문자열이다.</p>
<p>한정자 <code>{0}</code>이 허용되어 표현식이 이전 항목 및 한정 기호가 없는 것처럼 동작한다.</p>
<p>편의상 (그리고 전통적인 호환성) 세 가지 가장 일반적인 수량 기호는 한 문자로 된 단일 표현을 사용한다 :</p>
<h4>Single-character quantifiers</h4>
<table>
<thead>
<tr>
<th style="text-align: center;">문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><code>*</code></td>
<td><code>{0,}</code>와 같다</td>
</tr>
<tr>
<td style="text-align: center;"><code>+</code></td>
<td><code>{1,}</code>와 같다</td>
</tr>
<tr>
<td style="text-align: center;"><code>?</code></td>
<td><code>{0,1}</code>와 같다</td>
</tr>
</tbody>
</table>
<p>상한이 없는 수량 기호와 일치하지 않는 서브 패턴을 따라 무한 루프를 구성 할 수 있다(예 : <code>(a?)*</code>).</p>
<p>이전 버전의 Perl과 PCRE는 그러한 패턴을 컴파일 할 때 오류를 내기도 했다. 그러나 이 방법이 유용 할 수 있기 때문에 이러한 패턴이 이제 허용되지만 실제로 서브 패턴의 반복이 실제로 문자와 일치하지 않으면 루프가 강제로 끊어진다.</p>
<p>기본적으로 한정 기호는 &quot;greedy&quot; 즉 패턴의 나머지 부분을 실패시키지 않고 가능한 한 최대 허용 횟수까지 일치시킨다. 이것이 문제를 일으키는 곳의 고전적인 예는 C 프로그램의 주석과 일치하는 것이다. 시퀀스 <code>/*</code>와 <code>*/</code> 사이에 나타나며 시퀀스 내에서 개별 <code>*</code> 및 <code>/</code> 문자가 나타날 수 있다. 첫 번째 주석 <code>*/</code> 주석 <code>/*</code> 두 번째 주석 <code>*/</code>에 문자열 <code>/**.*\*/</code> 패턴을 적용하여 C 주석을 일치 시키려는 시도는 <code>.*</code>의 탐욕(&quot;greedy&quot;)으로 인해 전체 문자열과 일치하기 때문에 실패한다.</p>
<p>그러나 수량 기호 다음에 물음표가 오는 경우에는 게으르며(lazy) 가능한 최소 횟수와 일치하므로 패턴 <code>/\*.*?\*/</code>는 C 주석과 함께 올바른 작업을 수행한다. 다양한 한정어의 의미는 다른 방식으로 변경되지 않으며 선호하는 일치 개수만 변경된다. 이 <code>?</code> 사용을 그 자체로 한정 기호로 사용하는 것과 혼동하지 말아야 한다. 두 가지 용도로 사용되기 때문에 <code>\d??\d</code>와 같이 두 글자로 표시되는 경우가 있다. 한 글자가 기본 설정과 일치하지만 나머지 패턴 일치하는 경우 두 글자와 일치할 수 있다.</p>
<p><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_UNGREEDY</a> 옵션이 설정되어 있으면 (Perl에서는 사용할 수없는 옵션) 수량 한정자는 기본적으로 탐욕(greedy)이 없다. 하지만 개별적인 물음표는 물음표를 따라 가면서 탐욕이 적용된다. 즉, 기본 동작을 반전한다.</p>
<p><code>+</code>를 따르는 한정 기호는 &quot;possessive&quot;이다. 가능한 한 많은 문자와 일치하고 나머지 패턴과 일치하도록 돌아가지 않는다. 따라서 <code>.*abc</code>는 &quot;aabc&quot;와 일치하지만 <code>.*+</code>는 전체 문자와 일치하기 때문에 <code>.*+abc</code>는 일치하지 않는다. Possessive 지정자는 처리 속도를 높이는 데 사용할 수 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'aabc'</span>;
preg_match(<span class="hljs-string">'/.*abc/'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//  [0] =&gt; aabc</span>
<span class="hljs-comment">// )</span>

preg_match(<span class="hljs-string">'/.*+abc/'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">// )</span></pre>
<p>괄호로 둘러싼 서브 패턴이 2 이상의 최소 반복이나 최대 제한을 가지면, 컴파일한 패턴은 최소 / 최대의 크기에 따라서 더 많은 공간이 필요하다.</p>
<p>패턴이 <code>.*</code> 또는 <code>.{0,}</code>으로 시작하고 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_DOTALL</a> 옵션(Perl의 <code>/s</code>와 동일)이 설정되어 <code>.</code>이 개행 문자와도 일치하게 되면 패턴은 암시적으로 고정된다. 왜냐하면 뒤에 오는 것은 문자열의 모든 문자 위치에 대해 시도된다. 따라서 첫 번째 이후의 모든 위치에서 전체 일치를 다시 시도할 필요가 없다. PCRE(Perl Compatible Regular Expressions)는 앞에 <code>\A</code>가 붙은 것처럼 패턴을 취급한다. 대상 문자열에 개행 문자가 없는 것을 알 경우, 최적화를 위해 <code>.*</code>로 시작하는 패턴에  <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_DOTALL</a>을 설정하거나 <code>^</code>를 사용하여 명시적으로 고정을 나타낼 수 있다.</p>
<p>캡처 서브 패턴이 반복되면 캡처된 문자열은 마지막 반복에 일치한다. 예를 들어, <code>(tweedle[dume]{3}\s*)+</code>가 &quot;tweedledum tweedledee&quot;와 일치하면 캡처된 부분 문자열의 값은 &quot;tweedledee&quot;이다. 그러나 중첩된 캡처 서브 패턴이 있으면 해당 캡처 값이 이전 반복에서 설정 되었을 수 있다. 예를 들어, <code>/(a|(b))+/</code>가 &quot;aba&quot;와 일치하면 두 번째로 캡처된 하위 문자열의 값은 &quot;b&quot;가 된다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
preg_match(<span class="hljs-string">'/(tweedle[dume]{3}\s*)+/'</span>, <span class="hljs-string">'tweedledum tweedledee'</span>, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//  [0] =&gt; tweedledum tweedledee</span>
<span class="hljs-comment">//  [1] =&gt; tweedledee</span>
<span class="hljs-comment">// )</span>

preg_match(<span class="hljs-string">'/(a|(b))+/'</span>, <span class="hljs-string">'aba'</span>, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//  [0] =&gt; aba</span>
<span class="hljs-comment">//  [1] =&gt; a</span>
<span class="hljs-comment">//  [2] =&gt; b</span>
<span class="hljs-comment">// )</span></pre>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/"/><published>2017-01-17T17:57:41+09:00</published><updated>2017-02-15T13:44:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Subpatterns (서브 패턴) 서브 패턴은 둥근 괄호(())로 구분되며 중첩 될 수 있다. 패턴의 일부를 서브 패턴으로 표시하는 것은 다음 두 가지를 수행한다. 선택 집합을 지역화 한다. 예를 들어 cat(aract|erpillar|) 패턴은 "cat", "cataract" 또는 "caterpillar" 중 하나와 일치한다. 괄호가 없으면 "cataract", "erpillar" 또는 빈 문자열과 일치한다. 서브 패턴을 캡처 서브 패턴으로 설정한다. 모든 패턴이 일치하면 서브 패턴과 일치하는 문자열의 부분은 pcre_exec()의 ovector 인수를 통해 호출자에게 다시 전달된다. 여는 괄호는 왼쪽에서 오른쪽으로 (1부터 시작) 카운트하여 캡처 서브 패턴의 수를 부여한다. 예를 들어 문자열 "the red king"이 ((red|white) (king|queen)) 패턴과 일치하면 캡처된 부분 문자열이 "red king", "red" 및 "king"이며 아래와 같이 번호가 부여된다. <?php $string = 'the red king'; preg_match('/((red|white) (king|queen))/', $string, $matches); print_r($matches); //Array //( // [0] => red king // [1] => red king // [2] => red // [3] => king //) 평범한 괄호가 두 가지 기능을 수행한다는 사실이 항상 도움이 되는 것은 아니다. 캡처 요구 사항없이 그룹화 서브 패턴이 필요한 경우가 종종 있다. 여는 괄호 뒤에 "?:"가 오는 경우 서브 패턴은 캡처를 수행하지 않으며 후속 캡처 서브 패턴의 수를 계산할 때는 계산되지 않는다. 예를 들어 문자열 "the white queen"이 ((?:red|white) (king|queen)) 패턴과 일치하면 캡처 된 부분 문자열은 "white queen"과 "queen"이며 1과 2로 번호가 매겨진다. 캡처된 부분 문자열의 최대 수는 99이며 캡처 및 캡처하지 않는 모든 서브 패턴의 최대 수는 200개다. <?php $string = 'the white queen'; preg_match('/((?:red|white) (king|queen))/', $string, $matches); print_r($matches); //Array //( // [0] => white queen // [1] => white queen // [2] => queen //) 캡처하지 않는 서브 패턴의 옵션이 필요한 경우 아래의 두 예시 처럼 "?" 그리고 ":" 사이에 옵션을 표기할 수 있다. (?i:saturday|sunday) (?:(?i)saturday|sunday) 정확히 동일한 문자열 세트와 일치해야 한다. 대체 분기는 왼쪽에서 오른쪽으로 시도되고 서브 패턴의 끝에 도달 할 때까지 옵션이 재설정 되지 않아 한 분기의 옵션 설정이 후속 분기에 영향을 미치므로 위 패턴은 "SUNDAY"및 "Saturday"와 일치한다. <?php preg_match('/(?i:saturday|sunday)/','Saturday', $matches); print_r($matches); // Array // ( // [0] => Saturday // ) preg_match('/(?:(?i)saturday|sunday)/','SUNDAY', $matches); print_r($matches); // Array // ( // [0] => SUNDAY // ) 구문 (?P<name>pattern)을 사용하여 서브 패턴의 이름을 지정할 수 있다. 그런 다음이 서브 패턴은 matches 배열에서 일반 숫자 위치와 이름을 기준으로 인덱싱 된다(PHP 5.2.2에서는 두 가지 대체 구문 (?<name>pattern)과 (?'name'pattern)을 사용할 수 있다). <?php $string = 'the white queen'; preg_match('/(?P<name>the)/', $string, $matches); print_r($matches); preg_match("/(?'name'the)/", $string, $matches); print_r($matches); //Array //( // [0] => the // [name] => the // [1] => the //) //Array //( // [0] => the // [name] => the // [1] => the //) 때로는 일치하는 여러 개의 서브 그룹을 정규식에 포함시켜야 할 필요가 있다. 일반적으로 이들 중 하나만 일치할 가능성이 있더라도 각각의 고유한 역 참조 번호가 부여된다. 이 문제를 극복하기 위해 (?| 구문을 사용하면 중복되는 숫자를 가질 수 있다. 다음 정규식 (?:(Sat)ur|(Sun))day을 "Sunday" 문자열과 비교해보자. <?php $string = 'Sunday'; preg_match('/(?:(Sat)ur|(Sun))day/', $string, $matches); print_r($matches); //Array //( // [0] => Sunday // [1] => // [2] => Sun //) 여기에서 "Sun"은 역 참조 2에 저장되고 역 참조 1은 비어 있다. 역 참조 1에서의 "Sat"는 역 참조 2에서 존재하지 않는다. (?|를 사용하여 패턴을 변경하면 이 문제가 해결된다. <?php $string = 'Sunday'; preg_match('/(?|(Sat)ur|(Sun))day/', $string, $matches); print_r($matches); //Array //( // [0] => Sunday // [1] => Sun //) 이 패턴을 사용하면 Sun과 Sat가 모두 역 참조 1에 저장된다. PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) > PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.subpatterns.php">Subpatterns</a> (서브 패턴)</h3>
<p>서브 패턴은 둥근 괄호(<code>()</code>)로 구분되며 중첩 될 수 있다. 패턴의 일부를 서브 패턴으로 표시하는 것은 다음 두 가지를 수행한다.</p>
<ol>
<li>
<p><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a> 집합을 지역화 한다. 예를 들어 <code>cat(aract|erpillar|)</code> 패턴은 &quot;cat&quot;, &quot;cataract&quot; 또는 &quot;caterpillar&quot; 중 하나와 일치한다. 괄호가 없으면 &quot;cataract&quot;, &quot;erpillar&quot; 또는 빈 문자열과 일치한다.</p>
</li>
<li>
<p>서브 패턴을 캡처 서브 패턴으로 설정한다. 모든 패턴이 일치하면 서브 패턴과 일치하는 문자열의 부분은 <code>pcre_exec()</code>의 <code>ovector</code> 인수를 통해 호출자에게 다시 전달된다. 여는 괄호는 왼쪽에서 오른쪽으로 (1부터 시작) 카운트하여 캡처 서브 패턴의 수를 부여한다.</p>
</li>
</ol>
<p>예를 들어 문자열 &quot;the red king&quot;이 <code>((red|white) (king|queen))</code> 패턴과 일치하면 캡처된 부분 문자열이 &quot;red king&quot;, &quot;red&quot; 및 &quot;king&quot;이며 아래와 같이 번호가 부여된다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">'the red king'</span>;
preg_match(<span class="hljs-string">'/((red|white) (king|queen))/'</span>, $string, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; red king</span>
<span class="hljs-comment">//  [1] =&gt; red king</span>
<span class="hljs-comment">//  [2] =&gt; red</span>
<span class="hljs-comment">//  [3] =&gt; king</span>
<span class="hljs-comment">//)</span></pre>
<p>평범한 괄호가 두 가지 기능을 수행한다는 사실이 항상 도움이 되는 것은 아니다. 캡처 요구 사항없이 그룹화 서브 패턴이 필요한 경우가 종종 있다. 여는 괄호 뒤에 &quot;<code>?:</code>&quot;가 오는 경우 서브 패턴은 캡처를 수행하지 않으며 후속 캡처 서브 패턴의 수를 계산할 때는 계산되지 않는다.</p>
<p>예를 들어 문자열 &quot;the white queen&quot;이 <code>((?:red|white) (king|queen))</code> 패턴과 일치하면 캡처 된 부분 문자열은 &quot;white queen&quot;과 &quot;queen&quot;이며 1과 2로 번호가 매겨진다. 캡처된 부분 문자열의 최대 수는 99이며 캡처 및 캡처하지 않는 모든 서브 패턴의 최대 수는 200개다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">'the white queen'</span>;
preg_match(<span class="hljs-string">'/((?:red|white) (king|queen))/'</span>, $string, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; white queen</span>
<span class="hljs-comment">//  [1] =&gt; white queen</span>
<span class="hljs-comment">//  [2] =&gt; queen</span>
<span class="hljs-comment">//)</span></pre>
<p>캡처하지 않는 서브 패턴의 옵션이 필요한 경우 아래의 두 예시 처럼 &quot;?&quot; 그리고 &quot;:&quot; 사이에 옵션을 표기할 수 있다.</p>
<pre><code>(?i:saturday|sunday)
(?:(?i)saturday|sunday)</code></pre>
<p>정확히 동일한 문자열 세트와 일치해야 한다. 대체 분기는 왼쪽에서 오른쪽으로 시도되고 서브 패턴의 끝에 도달 할 때까지 옵션이 재설정 되지 않아 한 분기의 옵션 설정이 후속 분기에 영향을 미치므로 위 패턴은 &quot;SUNDAY&quot;및 &quot;Saturday&quot;와 일치한다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
preg_match(<span class="hljs-string">'/(?i:saturday|sunday)/'</span>,<span class="hljs-string">'Saturday'</span>, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//     [0] =&gt; Saturday</span>
<span class="hljs-comment">// )</span>

preg_match(<span class="hljs-string">'/(?:(?i)saturday|sunday)/'</span>,<span class="hljs-string">'SUNDAY'</span>, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//     [0] =&gt; SUNDAY</span>
<span class="hljs-comment">// )</span></pre>
<p>구문 <code>(?P&lt;name&gt;pattern)</code>을 사용하여 서브 패턴의 이름을 지정할 수 있다. 그런 다음이 서브 패턴은 matches 배열에서 일반 숫자 위치와 이름을 기준으로 인덱싱 된다(PHP 5.2.2에서는 두 가지 대체 구문 <code>(?&lt;name&gt;pattern)</code>과 <code>(?'name'pattern)</code>을 사용할 수 있다).</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">'the white queen'</span>;
preg_match(<span class="hljs-string">'/(?P&lt;name&gt;the)/'</span>, $string, $matches);
print_r($matches);
preg_match(<span class="hljs-string">"/(?'name'the)/"</span>, $string, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; the</span>
<span class="hljs-comment">//  [name] =&gt; the</span>
<span class="hljs-comment">//  [1] =&gt; the</span>
<span class="hljs-comment">//)</span>
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; the</span>
<span class="hljs-comment">//  [name] =&gt; the</span>
<span class="hljs-comment">//  [1] =&gt; the</span>
<span class="hljs-comment">//)</span></pre>
<p>때로는 일치하는 여러 개의 서브 그룹을 정규식에 포함시켜야 할 필요가 있다. 일반적으로 이들 중 하나만 일치할 가능성이 있더라도 각각의 고유한 역 참조 번호가 부여된다. 이 문제를 극복하기 위해 <code>(?|</code> 구문을 사용하면 중복되는 숫자를 가질 수 있다. 다음 정규식 <code>(?:(Sat)ur|(Sun))day</code>을 &quot;Sunday&quot; 문자열과 비교해보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">'Sunday'</span>;
preg_match(<span class="hljs-string">'/(?:(Sat)ur|(Sun))day/'</span>, $string, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; Sunday</span>
<span class="hljs-comment">//  [1] =&gt;</span>
<span class="hljs-comment">//  [2] =&gt; Sun</span>
<span class="hljs-comment">//)</span></pre>
<p>여기에서 &quot;Sun&quot;은 역 참조 2에 저장되고 역 참조 1은 비어 있다. 역 참조 1에서의 &quot;Sat&quot;는 역 참조 2에서 존재하지 않는다. <code>(?|</code>를 사용하여 패턴을 변경하면 이 문제가 해결된다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">'Sunday'</span>;
preg_match(<span class="hljs-string">'/(?|(Sat)ur|(Sun))day/'</span>, $string, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; Sunday</span>
<span class="hljs-comment">//  [1] =&gt; Sun</span>
<span class="hljs-comment">//)</span></pre>
<p>이 패턴을 사용하면 Sun과 Sat가 모두 역 참조 1에 저장된다.</p>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/"/><published>2017-01-16T14:36:21+09:00</published><updated>2017-02-15T10:54:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Internal option setting (내부 옵션 설정) PHP 정규표현식 패턴에 존재하는 변경자와 유사하게 사용되나 사용 위치가 다르다. PCRE_CASELESS, PCRE_MULTILINE,PCRE_DOTALL, PCRE_UNGREEDY, PCRE_EXTRA, PCRE_EXTENDED 및 PCRE_DUPNAMES의 설정은 "(?" 및 ")"로 묶인 Perl 옵션 문자 시퀀스에 의해 패턴 내에서 변경할 수 있다. 옵션 문자는 다음과 같다. Internal option letters(내부 옵션 문자) 옵션 설명 i PCRE_CASELESS m PCRE_MULTILINE s PCRE_DOTALL x PCRE_EXTENDED U PCRE_UNGREEDY X PCRE_EXTRA J PCRE_INFO_JCHANGED 예를 들어, (?im)은 대소문자를 구분하지 않고(caseless) 여러 줄 일치를 설정한다. 문자 앞에 하이픈을 붙여 이러한 옵션의 설정을 해제 할 수도 있다. (?im-sx)를 지정하면, PPCRE_DOTALL 및 PCRE_EXTENDED 설정을 해제 하면서 PCRE_CASELESS 및 PCRE_MULTILINE을 설정한다. 하이픈 앞과 뒤 모두에 옵션이 나타나면 옵션을 해제한다. 옵션 변경이 최상위 레벨에서 발생하면(즉, 서브 패턴 괄호 밖에 있는 경우), 변경 사항은 뒤 따르는 패턴의 나머지 부분에 적용된다. 그래서 /ab(?i)c/는 "abc"와 "abC"에만 일치한다(이 작동은 PCRE 4.0에서 변경되었으며, PHP 4.3.3부터 포함되었다). 서브 패턴 내에서 옵션 변경이 발생하면 효과가 달라진다. 이것은 Perl 5.005에서 동작이 변경된 부분이다. 서브 패턴 내부의 옵션 변경은 그 뒤에 오는 서브 패턴의 해당 부분에만 영향을 미치므로 a(?i)b)c는 abc 및 aBc와 일치하며 다른 문자열은 없다 (PCRE_CASELESS가 사용되지 않는다고 가정). 이 방법을 사용하면 패턴의 다른 부분에서 옵션을 다르게 설정할 수 있다. 하나의 선택에서 변경한 사항은 동일한 서브 패턴 내에서 지속적으로 사용된다. 예를 들어 (a(?i)b|c)는 "ab", "aB", "c"및 "C"와 일치한다. "C"는 옵션을 설정하기 전에 나누어진 분기에 해당하지만, 이상한 동작일지라도, 처리 시에 옵션 설정의 효율성을 위해서 일치한다. PCRE 전용 옵션 PCRE_UNGREEDY 및 PCRE_EXTRA는 각각 U 및 X 문자를 사용하여 Perl 호환 옵션과 동일한 방식으로 변경할 수 있다. (?X) 플래그 설정은 최상위 레벨에서 활성화 되는 추가 기능보다 항상 먼저 실행되어야 하는 점에서 특별하다. 따라서 시작 부분에 넣는 것이 가장 좋다. <?php // PCRE_EXTRA (?X) Strict escape parsing echo (preg_match('/\y/', 'abc\ydef') ? 'true' : 'false') . "\n"; // true echo (preg_match('/\y/X', 'abc\ydef') ? 'true' : 'false') . "\n"; // Warning: preg_match(): Compilation failed: unrecognized character follows \ at offset 1 in _test.php on line 7 // false echo (preg_match('/\\\\y/X', 'abc\ydef') ? 'true' : 'false') . "\n"; // true echo (preg_match('/(?X)\ydef/', 'abc\ydef') ? 'true' : 'false') . "\n"; // Warning: preg_match(): Compilation failed: unrecognized character follows \ at offset 5 in _test.php on line 14 // false echo (preg_match('/(?X)\\\\ydef/', 'abc\ydef') ? 'true' : 'false') . "\n"; // true echo (preg_match('/\y(?X)def/', 'abc\ydef') ? 'true' : 'false') . "\n"; // true PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) > PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.internal-options.php">Internal option setting</a> (내부 옵션 설정)</h3>
<p><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PHP 정규표현식 패턴에 존재하는 변경자</a>와 유사하게 사용되나 사용 위치가 다르다.</p>
<p><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_CASELESS</a>, <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_MULTILINE</a>,<a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_DOTALL</a>, <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_UNGREEDY</a>, <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTRA</a>, <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTENDED</a> 및 PCRE_DUPNAMES의 설정은 &quot;<code>(?</code>&quot; 및 &quot;<code>)</code>&quot;로 묶인 Perl 옵션 문자 시퀀스에 의해 패턴 내에서 변경할 수 있다.</p>
<p>옵션 문자는 다음과 같다.</p>
<h4>Internal option letters(내부 옵션 문자)</h4>
<table>
<thead>
<tr>
<th>옵션</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_CASELESS</a></td>
</tr>
<tr>
<td>m</td>
<td><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_MULTILINE</a></td>
</tr>
<tr>
<td>s</td>
<td><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_DOTALL</a></td>
</tr>
<tr>
<td>x</td>
<td><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTENDED</a></td>
</tr>
<tr>
<td>U</td>
<td><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_UNGREEDY</a></td>
</tr>
<tr>
<td>X</td>
<td><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTRA</a></td>
</tr>
<tr>
<td>J</td>
<td><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_INFO_JCHANGED</a></td>
</tr>
</tbody>
</table>
<p>예를 들어, <code>(?im)</code>은 대소문자를 구분하지 않고(caseless) 여러 줄 일치를 설정한다. 문자 앞에 하이픈을 붙여 이러한 옵션의 설정을 해제 할 수도 있다. <code>(?im-sx)</code>를 지정하면, P<a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_DOTALL</a> 및 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTENDED</a> 설정을 해제 하면서 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_CASELESS</a> 및 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_MULTILINE</a>을 설정한다. 하이픈 앞과 뒤 모두에 옵션이 나타나면 옵션을 해제한다.</p>
<p>옵션 변경이 최상위 레벨에서 발생하면(즉, 서브 패턴 괄호 밖에 있는 경우), 변경 사항은 뒤 따르는 패턴의 나머지 부분에 적용된다. 그래서 <code>/ab(?i)c/</code>는 &quot;abc&quot;와 &quot;abC&quot;에만 일치한다(이 작동은 PCRE 4.0에서 변경되었으며, PHP 4.3.3부터 포함되었다).</p>
<p>서브 패턴 내에서 옵션 변경이 발생하면 효과가 달라진다. 이것은 Perl 5.005에서 동작이 변경된 부분이다. 서브 패턴 내부의 옵션 변경은 그 뒤에 오는 서브 패턴의 해당 부분에만 영향을 미치므로 <code>a(?i)b)c</code>는 abc 및 aBc와 일치하며 다른 문자열은 없다 (<a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_CASELESS</a>가 사용되지 않는다고 가정).</p>
<p>이 방법을 사용하면 패턴의 다른 부분에서 옵션을 다르게 설정할 수 있다. 하나의 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>에서 변경한 사항은 동일한 서브 패턴 내에서 지속적으로 사용된다. 예를 들어 <code>(a(?i)b|c)</code>는 &quot;ab&quot;, &quot;aB&quot;, &quot;c&quot;및 &quot;C&quot;와 일치한다. &quot;C&quot;는 옵션을 설정하기 전에 나누어진 분기에 해당하지만, 이상한 동작일지라도, 처리 시에 옵션 설정의 효율성을 위해서 일치한다.</p>
<p>PCRE 전용 옵션 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_UNGREEDY</a> 및 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTRA</a>는 각각 <code>U</code> 및 <code>X</code> 문자를 사용하여 Perl 호환 옵션과 동일한 방식으로 변경할 수 있다. <code>(?X)</code> 플래그 설정은 최상위 레벨에서 활성화 되는 추가 기능보다 항상 먼저 실행되어야 하는 점에서 특별하다. 따라서 시작 부분에 넣는 것이 가장 좋다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">// PCRE_EXTRA   (?X)    Strict escape parsing</span>

<span class="hljs-keyword">echo</span> (preg_match(<span class="hljs-string">'/\y/'</span>, <span class="hljs-string">'abc\ydef'</span>) ? <span class="hljs-string">'true'</span> : <span class="hljs-string">'false'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// true</span>

<span class="hljs-keyword">echo</span> (preg_match(<span class="hljs-string">'/\y/X'</span>, <span class="hljs-string">'abc\ydef'</span>) ? <span class="hljs-string">'true'</span> : <span class="hljs-string">'false'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// Warning: preg_match(): Compilation failed: unrecognized character follows \ at offset 1 in _test.php on line 7</span>
<span class="hljs-comment">// false</span>

<span class="hljs-keyword">echo</span> (preg_match(<span class="hljs-string">'/\\\\y/X'</span>, <span class="hljs-string">'abc\ydef'</span>) ? <span class="hljs-string">'true'</span> : <span class="hljs-string">'false'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// true</span>

<span class="hljs-keyword">echo</span> (preg_match(<span class="hljs-string">'/(?X)\ydef/'</span>, <span class="hljs-string">'abc\ydef'</span>) ? <span class="hljs-string">'true'</span> : <span class="hljs-string">'false'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// Warning: preg_match(): Compilation failed: unrecognized character follows \ at offset 5 in _test.php on line 14</span>
<span class="hljs-comment">// false</span>

<span class="hljs-keyword">echo</span> (preg_match(<span class="hljs-string">'/(?X)\\\\ydef/'</span>, <span class="hljs-string">'abc\ydef'</span>) ? <span class="hljs-string">'true'</span> : <span class="hljs-string">'false'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// true</span>

<span class="hljs-keyword">echo</span> (preg_match(<span class="hljs-string">'/\y(?X)def/'</span>, <span class="hljs-string">'abc\ydef'</span>) ? <span class="hljs-string">'true'</span> : <span class="hljs-string">'false'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// true</span></pre>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/15/php-regex-alternation/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/"/><published>2017-01-15T12:36:31+09:00</published><updated>2017-01-15T12:36:31+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Alternation (선택) 수직 막대 문자(|)는 선택 패턴을 분리하는데 사용된다(논리 연산의 or과 동일하게 생각하면 된다). 예를 들어, gilbert|sullivan 패턴은 "gilbert" 또는 "sullivan"과 일치한다. 임의의 수의 선택 패턴이 나타날 수 있으며 빈 선택 패턴을 허용한다(빈 문자열과 일치). 일치 여부에 대한 프로세스는 왼쪽에서 오른쪽으로 각 선택 패턴을 차례로 시도하고 성공한 첫 번째가 사용된다. 선택 패턴이 서브 패턴 내에 있는 경우 "성공"은 나머지 기본 패턴과 서브 패턴의 선택을 일치시키는 것을 의미한다. PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) > PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.alternation.php">Alternation</a> (선택)</h3>
<p>수직 막대 문자(<code>|</code>)는 선택 패턴을 분리하는데 사용된다(논리 연산의 <code>or</code>과 동일하게 생각하면 된다). 예를 들어, <code>gilbert|sullivan</code> 패턴은 &quot;gilbert&quot; 또는 &quot;sullivan&quot;과 일치한다. 임의의 수의 선택 패턴이 나타날 수 있으며 빈 선택 패턴을 허용한다(빈 문자열과 일치). 일치 여부에 대한 프로세스는 왼쪽에서 오른쪽으로 각 선택 패턴을 차례로 시도하고 성공한 첫 번째가 사용된다. 선택 패턴이 서브 패턴 내에 있는 경우 &quot;성공&quot;은 나머지 기본 패턴과 서브 패턴의 선택을 일치시키는 것을 의미한다.</p>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/14/php-regex-character-classes/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/"/><published>2017-01-14T18:16:21+09:00</published><updated>2017-02-15T10:54:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Character classes (캐릭터 클래스) 캐릭터 클래스는 여는 대괄호([)와 닫는 대괄호(])로 영역을 선언한다. 닫는 대괄호는 그 자체만으로는 특별한 의미를 가지지 않는다. 닫는 대괄호가 클래스의 멤버로 필요하면 클래스의 첫 번째 데이터 문자(곡절 부호(^)로 시작하는 경우) 뒤에 있거나 백 슬래시로 이스케이프되어야 한다. 캐릭터 클래스는 문장의 단일 문자와 일치한다(단어가 아닌 단일 문자 단위로 일치한다). 캐릭터 클래스의 첫 번째 문자가 곡절 부호(^)가 아닌 경우 캐릭터 클래스에 정의된 문자 세트가 있으면 일치한다. 반대로 곡절 부호로 시작하는 경우 캐릭터 클래스에서 정의한 문자 세트가 없으면 일치한다. 곡절 부호(^)가 실제로 클래스의 구성원으로 필요하면 첫 번째 문자가 아닌지 확인하거나 백 슬래시로 이스케이프 처리해야 한다. 예를 들어, 캐릭터 클래스 [aeiou]는 소문자 모음과 일치하지만 [^aeiou]는 소문자 모음이 아닌 문자와 일치한다. 곡절 부호는 어설션이 아니며 클래스에 있는 문자를 열거하여 지정하는 편리한 표기법이다. 목표 문자열에서 문자를 찾아내며, 현재 위치가 문자열의 끝이면 실패한다. 대소문자를 구분하지 않으면(caseless) 클래스의 문자는 모든 대문자와 소문자를 나타낸다. 예를 들어 대소문자를 구분하지 않는 [aeiou]는 "A"와 "a"에 일치되나, 대소문자를 구분하지 않는 [^aeiou]는 구분하는 경우에 일치하는 "A"에는 일치하지 않는다. <?php $str = 'a'; echo ((preg_match('/[aeiou]/', $str)) ? 'matched' : 'not matched') . "\n"; //matched echo ((preg_match('/[^aeiou]/', $str)) ? 'matched' : 'not matched') . "\n"; //not matched echo ((preg_match('/[aeiou]/i', $str)) ? 'matched' : 'not matched') . "\n"; //matched echo ((preg_match('/[^aeiou]/i', $str)) ? 'matched' : 'not matched') . "\n"; //not matched $str = 'A'; echo ((preg_match('/[aeiou]/', $str)) ? 'matched' : 'not matched') . "\n"; //not matched echo ((preg_match('/[^aeiou]/', $str)) ? 'matched' : 'not matched') . "\n"; //matched echo ((preg_match('/[aeiou]/i', $str)) ? 'matched' : 'not matched') . "\n"; //matched echo ((preg_match('/[^aeiou]/i', $str)) ? 'matched' : 'not matched') . "\n"; //not matched 개행 문자는 PCRE_DOTALL 또는 PCRE_MULTILINE 옵션의 설정에 관계없이 캐릭터 클래스에서 특별한 방법으로 처리되지 않는다. [^a]와 같은 캐릭터 클래스는 항상 개행 문자와 일치한다. 하이픈(-) 문자를 사용하여 캐릭터 클래스의 문자 범위를 지정할 수 있다. 예를 들어, [d-m]은 d와 m 사이의 모든 문자를 찾는다. 클래스에서 하이픈 문자가 필요하면 백 슬래시로 이스케이프하거나 범위를 나타내는 것으로 해석할 수 없는 위치(일반적으로 클래스의 시작 또는 마지막 문자)에 표시해야 한다. 리터럴 문자 "]"는 범위의 끝 문자로 사용할 수 없다. [W-]46]과 같은 패턴은 두 문자 ("W" 및 "-")의 리터럴 문자열 "46]"로 해석되므로 "W46]"또는 "-46"과 일치한다. 그러나 "]"이 역 슬래시로 이스케이프되면 범위 끝으로 해석되므로 [W-\]46]은 두 개의 개별 문자가 뒤에 오는 범위를 포함하는 단일 클래스로 해석된다. "]"의 8진수 또는 16진수 표현을 사용하여 범위를 끝낼 수도 있다. 범위는 ASCII 조합 순서로 정해진다. [\000-\037]와 같이 숫자로 지정된 문자를 사용할 수도 있다. 대소문자를 구분하지 않는(caseless) 일치가 설정 되었을 때는 범위 안의 문자들도 대소문자 구별없이 일치한다. 예를 들어 대소문자를 구분하지 않는 경우 [Wc]는 [][\^_`wxyzabc]와 동일하며 "fr" locale 문자표를 사용하는 경우 [\xc8-\xcb]는 악센트 부호가 있는 E 문자와 일치한다. 두 경우 모두. <?php $str = '[][^_`xyzabc]'; preg_match('/[W-c]*/i', $str, $matches); print_r($matches); // Array // ( // [0] => [][^_`xyzabc] // ) preg_match('/[\[\]\^_`xyzabc]*/i', $str, $matches); print_r($matches); // Array // ( // [0] => [][^_`xyzabc] // ) 문자 유형 \d, \D, \s, \S, \w 및 \W는 캐릭터 클래스에도 사용할 수 있으며 일치하는 문자를 클래스에 추가한다. 예를 들어, [\dABCDEF]는 모든 16진수 형식과 일치한다. 곡절 부호는 대문자 문자 유형과 함께 사용하여 소문자 유형 보다 더 제한된 문자 집합을 편리하게 지정할 수 있다. 예를 들어 [^\W_] 캐릭터 클래스는 문자 또는 숫자와 일치하지만 밑줄은 사용할 수 없다. \, -, ^(시작 부분) 및 종료 ]를 제외한 영숫자가 아닌 문자는 모두 캐릭터 클래스에서 특별한 의미를 가지지 않지만 이스케이프해도 문제가 되지 않는다. 패턴 종결자는 항상 특별하며 표현식 내에서 사용될 때는 이스케이프해야 한다. Perl은 캐릭터 클래스에 대한 POSIX 표기법을 지원한다. 이것은 둘러싸는 대괄호 안에 [:와 :]로 묶인 이름을 사용한다. PCRE는 또한 이 표기법을 지원한다. 예를 들어, [01[:alpha:]%]는 "0", "1", 모든 알파벳 문자 또는 "%"와 일치한다. 지원되는 클래스 이름은 다음과 같다. Character classes class 설명 alnum letters and digits alpha letters ascii character codes 0 - 127 blank space or tab only cntrl control characters digit decimal digits (same as \d) graph printing characters, excluding space lower lower case letters print printing characters, including space punct printing characters, excluding letters and digits space white space (not quite the same as \s) upper upper case letters word "word" characters (same as \w) xdigit hexadecimal digits 공백 문자는 HT(9), LF(10), VT(11), FF(12), CR(13) 및 공백(32)이다. 이 목록에는 VT 문자 (코드 11)가 포함되어 있다. 이렇게 하면 "space"가 \s와 다른데, 이는 VT (Perl 호환성)를 포함하지 않는다. word는 Perl extension이며 blank는 Perl 5.8의 GNU extension이다. 또 다른 Perl 확장은 콜론(:) 다음에 ^ 문자로 표시되는 부정이다. 예를 들어 [12[:^digit:]]는 "1", "2"또는 임의의 비 숫자와 일치한다. UTF-8 모드에서 값이 128보다 큰 문자는 POSIX 캐릭터 클래스와 일치하지 않는다. PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) > PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.character-classes.php">Character classes</a> (캐릭터 클래스)</h3>
<p>캐릭터 클래스는 여는 대괄호(<code>[</code>)와 닫는 대괄호(<code>]</code>)로 영역을 선언한다. 닫는 대괄호는 그 자체만으로는 특별한 의미를 가지지 않는다. 닫는 대괄호가 클래스의 멤버로 필요하면 클래스의 첫 번째 데이터 문자(곡절 부호(^)로 시작하는 경우) 뒤에 있거나 백 슬래시로 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a>되어야 한다.</p>
<p>캐릭터 클래스는 문장의 단일 문자와 일치한다(단어가 아닌 단일 문자 단위로 일치한다).</p>
<p>캐릭터 클래스의 첫 번째 문자가 곡절 부호(^)가 아닌 경우 캐릭터 클래스에 정의된 문자 세트가 있으면 일치한다. 반대로 곡절 부호로 시작하는 경우 캐릭터 클래스에서 정의한 문자 세트가 없으면 일치한다.
곡절 부호(^)가 실제로 클래스의 구성원으로 필요하면 첫 번째 문자가 아닌지 확인하거나 백 슬래시로 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a> 처리해야 한다.</p>
<p>예를 들어, 캐릭터 클래스 <code>[aeiou]</code>는 소문자 모음과 일치하지만 <code>[^aeiou]</code>는 소문자 모음이 아닌 문자와 일치한다. 곡절 부호는 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>이 아니며 클래스에 있는 문자를 열거하여 지정하는 편리한 표기법이다. 목표 문자열에서 문자를 찾아내며, 현재 위치가 문자열의 끝이면 실패한다.</p>
<p>대소문자를 구분하지 않으면(caseless) 클래스의 문자는 모든 대문자와 소문자를 나타낸다. 예를 들어 대소문자를 구분하지 않는 <code>[aeiou]</code>는 &quot;A&quot;와 &quot;a&quot;에 일치되나, 대소문자를 구분하지 않는 <code>[^aeiou]</code>는 구분하는 경우에 일치하는 &quot;A&quot;에는 일치하지 않는다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'a'</span>;
<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/[aeiou]/'</span>, $str)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">//matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/[^aeiou]/'</span>, $str)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">//not matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/[aeiou]/i'</span>, $str)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">//matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/[^aeiou]/i'</span>, $str)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">//not matched</span>

$str = <span class="hljs-string">'A'</span>;
<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/[aeiou]/'</span>, $str)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">//not matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/[^aeiou]/'</span>, $str)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">//matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/[aeiou]/i'</span>, $str)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">//matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/[^aeiou]/i'</span>, $str)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">//not matched</span></pre>
<p>개행 문자는 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_DOTALL</a> 또는 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_MULTILINE</a> 옵션의 설정에 관계없이 캐릭터 클래스에서 특별한 방법으로 처리되지 않는다. <code>[^a]</code>와 같은 캐릭터 클래스는 항상 개행 문자와 일치한다.</p>
<p>하이픈(<code>-</code>) 문자를 사용하여 캐릭터 클래스의 문자 범위를 지정할 수 있다. 예를 들어, <code>[d-m]</code>은 d와 m 사이의 모든 문자를 찾는다. 클래스에서 하이픈 문자가 필요하면 백 슬래시로 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a>하거나 범위를 나타내는 것으로 해석할 수 없는 위치(일반적으로 클래스의 시작 또는 마지막 문자)에 표시해야 한다.</p>
<p>리터럴 문자 &quot;<code>]</code>&quot;는 범위의 끝 문자로 사용할 수 없다. <code>[W-]46]</code>과 같은 패턴은 두 문자 (&quot;<code>W</code>&quot; 및 &quot;<code>-</code>&quot;)의 리터럴 문자열 &quot;<code>46]</code>&quot;로 해석되므로 &quot;W46]&quot;또는 &quot;-46&quot;과 일치한다. 그러나 &quot;<code>]</code>&quot;이 역 슬래시로 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a>되면 범위 끝으로 해석되므로 <code>[W-\]46]</code>은 두 개의 개별 문자가 뒤에 오는 범위를 포함하는 단일 클래스로 해석된다. &quot;<code>]</code>&quot;의 8진수 또는 16진수 표현을 사용하여 범위를 끝낼 수도 있다.</p>
<p>범위는 <a href="http://www.asciitable.com/">ASCII</a> 조합 순서로 정해진다. <code>[\000-\037]</code>와 같이 숫자로 지정된 문자를 사용할 수도 있다. 대소문자를 구분하지 않는(caseless) 일치가 설정 되었을 때는 범위 안의 문자들도 대소문자 구별없이 일치한다. 예를 들어 대소문자를 구분하지 않는 경우 <code>[Wc]</code>는 <code>[][\^_`wxyzabc]</code>와 동일하며 &quot;fr&quot; locale 문자표를 사용하는 경우 <code>[\xc8-\xcb]</code>는 악센트 부호가 있는 E 문자와 일치한다. 두 경우 모두.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'[][^_`xyzabc]'</span>;

preg_match(<span class="hljs-string">'/[W-c]*/i'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//     [0] =&gt; [][^_`xyzabc]</span>
<span class="hljs-comment">// )</span>

preg_match(<span class="hljs-string">'/[\[\]\^_`xyzabc]*/i'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//     [0] =&gt; [][^_`xyzabc]</span>
<span class="hljs-comment">// )</span></pre>
<p>문자 유형 <code>\d</code>, <code>\D</code>, <code>\s</code>, <code>\S</code>, <code>\w</code> 및 <code>\W</code>는 캐릭터 클래스에도 사용할 수 있으며 일치하는 문자를 클래스에 추가한다. 예를 들어, <code>[\dABCDEF]</code>는 모든 16진수 형식과 일치한다. 곡절 부호는 대문자 문자 유형과 함께 사용하여 소문자 유형 보다 더 제한된 문자 집합을 편리하게 지정할 수 있다. 예를 들어 <code>[^\W_]</code> 캐릭터 클래스는 문자 또는 숫자와 일치하지만 밑줄은 사용할 수 없다.</p>
<p><code>\</code>, <code>-</code>, <code>^</code>(시작 부분) 및 종료 <code>]</code>를 제외한 영숫자가 아닌 문자는 모두 캐릭터 클래스에서 특별한 의미를 가지지 않지만 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a>해도 문제가 되지 않는다. 패턴 종결자는 항상 특별하며 표현식 내에서 사용될 때는 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a>해야 한다.</p>
<p>Perl은 캐릭터 클래스에 대한 POSIX 표기법을 지원한다. 이것은 둘러싸는 대괄호 안에 <code>[:</code>와 <code>:]</code>로 묶인 이름을 사용한다. PCRE는 또한 이 표기법을 지원한다. 예를 들어, <code>[01[:alpha:]%]</code>는 &quot;0&quot;, &quot;1&quot;, 모든 알파벳 문자 또는 &quot;%&quot;와 일치한다. 지원되는 클래스 이름은 다음과 같다.</p>
<h4>Character classes</h4>
<table>
<thead>
<tr>
<th>class</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td>alnum</td>
<td>letters and digits</td>
</tr>
<tr>
<td>alpha</td>
<td>letters</td>
</tr>
<tr>
<td>ascii</td>
<td>character codes 0 - 127</td>
</tr>
<tr>
<td>blank</td>
<td>space or tab only</td>
</tr>
<tr>
<td>cntrl</td>
<td>control characters</td>
</tr>
<tr>
<td>digit</td>
<td>decimal digits (same as \d)</td>
</tr>
<tr>
<td>graph</td>
<td>printing characters, excluding space</td>
</tr>
<tr>
<td>lower</td>
<td>lower case letters</td>
</tr>
<tr>
<td>print</td>
<td>printing characters, including space</td>
</tr>
<tr>
<td>punct</td>
<td>printing characters, excluding letters and digits</td>
</tr>
<tr>
<td>space</td>
<td>white space (not quite the same as \s)</td>
</tr>
<tr>
<td>upper</td>
<td>upper case letters</td>
</tr>
<tr>
<td>word</td>
<td>&quot;word&quot; characters (same as \w)</td>
</tr>
<tr>
<td>xdigit</td>
<td>hexadecimal digits</td>
</tr>
</tbody>
</table>
<p>공백 문자는 HT(9), LF(10), VT(11), FF(12), CR(13) 및 공백(32)이다. 이 목록에는 VT 문자 (코드 11)가 포함되어 있다. 이렇게 하면 &quot;space&quot;가 <code>\s</code>와 다른데, 이는 VT (Perl 호환성)를 포함하지 않는다.
<code>word</code>는 Perl extension이며 <code>blank</code>는 Perl 5.8의 GNU extension이다. 또 다른 Perl 확장은 콜론(<code>:</code>) 다음에 <code>^</code> 문자로 표시되는 부정이다. 예를 들어 <code>[12[:^digit:]]</code>는 &quot;1&quot;, &quot;2&quot;또는 임의의 비 숫자와 일치한다.</p>
<p>UTF-8 모드에서 값이 128보다 큰 문자는 POSIX 캐릭터 클래스와 일치하지 않는다.</p>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/13/php-regex-dot/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/13/php-regex-dot/"/><published>2017-01-13T14:46:41+09:00</published><updated>2017-02-15T10:54:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Dot (마침표 문자) 캐릭터 클래스 밖에서도 패턴의 마침표(.)는 임의의 한 문자와 일치한다. 기본적으로 비인쇄 문자는 포함하지만 개행 문자(줄바꿈)는 포함되지 않는다. PCRE_DOTALL 옵션이 설정되면 마침표는 줄바꿈과도 일치한다. 마침표의 처리는 "^"와 "$"의 처리와는 완전히 독립적이다. 유일한 관계는 둘 다 개행 문자를 포함한다는 것이다. 마침표는 캐릭터 클래스에서 특별한 의미가 없다. \C를 사용하여 1 바이트를 일치시킬 수 있다. UTF-8 모드(u)에서는 마침표가 멀티 바이트로 구성 될 수 있는 전체 문자와 일치하기 때문에 1 바이트를 일치하려는 경우 의미가 있다. <?php $str = '가나다'; preg_match('/./u', $str, $matches); print_r($matches); // Array // ( // [0] => 가 // ) preg_match('/\C/u', $str, $matches); print_r($matches); // Array // ( // [0] => � // ) PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) > PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.dot.php">Dot</a> (마침표 문자)</h3>
<p><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 밖에서도 패턴의 마침표(<code>.</code>)는 임의의 한 문자와 일치한다. 기본적으로 비인쇄 문자는 포함하지만 개행 문자(줄바꿈)는 포함되지 않는다. <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_DOTALL</a> 옵션이 설정되면 마침표는 줄바꿈과도 일치한다. 마침표의 처리는 &quot;<code>^</code>&quot;와 &quot;<code>$</code>&quot;의 처리와는 완전히 독립적이다. 유일한 관계는 둘 다 개행 문자를 포함한다는 것이다. 마침표는 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a>에서 특별한 의미가 없다.</p>
<p><code>\C</code>를 사용하여 1 바이트를 일치시킬 수 있다. UTF-8 모드(<code>u</code>)에서는 마침표가 멀티 바이트로 구성 될 수 있는 전체 문자와 일치하기 때문에 1 바이트를 일치하려는 경우 의미가 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'가나다'</span>;
preg_match(<span class="hljs-string">'/./u'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//     [0] =&gt; 가</span>
<span class="hljs-comment">// )</span>

preg_match(<span class="hljs-string">'/\C/u'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//   [0] =&gt; �</span>
<span class="hljs-comment">// )</span></pre>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/12/php-regex-anchors/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/"/><published>2017-01-12T12:16:01+09:00</published><updated>2017-02-15T10:54:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Anchors (앵커) 곡절 부호(^) 캐릭터 클래스 외부의 기본 일치 모드에서 곡절 부호(^)는 현재 일치하는 점이 제목 문자열의 시작 부분에 있는 경우에만 참(true)인 어설션이다. 캐릭터 클래스 내에서 곡절 부호(^)는 완전히 다른 의미를 지닌다. 여러 가지 선택이 포함되어 있는 경우 곡절 부호(^)는 패턴의 첫 번째 문자일 필요는 없지만 패턴이 해당 분기와 일치하는 경우 나타나는 각 대체 방법의 첫 번째 문자여야 한다. 가능한 모든 선택이 곡절 부호(^)로 시작하는 경우, 즉 패턴이 문장 시작 부분에서만 일치하도록 제한되면 "고정(anchored)" 패턴이라고 한다. (패턴을 고정시킬 수 있는 다른 구조도 있다.) 달러 부호($) 달러 부호($)는 기본적으로 현재 일치 지점이 제목 문자열의 끝에 있거나 문자열의 마지막 문자인 줄바꿈 문자 바로 앞에 있는 경우에만 참(true)이 되는 어설션이다. 달러는 캐릭터 클래스에서 특별한 의미를 가지지 않는다. 달러 부호($)는 여러 가지 선택이 포함된 경우 패턴의 마지막 문자일 필요는 없지만 마지막을 나타내는 모든 선택에서 마지막 문자여야 한다. PCRE 변경자의 영향 PCRE_DOLLAR_ENDONLY 옵션을 컴파일 또는 매칭 시점에 설정하여 문자열의 맨 끝에서만 일치하도록 달러 부호의 의미를 변경할 수 있다. 이것은 \Z 어설션에 영향을 주지 않는다. PCRE_MULTILINE 옵션이 설정된 경우 곡절 부호 및 달러 부호의 의미가 변경된다. 이 경우, 목표 문자열의 처음과 마지막에 더하여, 내부의 "\n" 문자의 앞과 뒤에도 일치한다. 예를 들어, 패턴 /^abc$/는 여러 줄 모드에서 제목 문자열 "def\nabc"와 일치하지만 그렇지 않은 경우는 일치하지 않는다. 따라서 모든 분기가 "^"로 시작하는 분기는 단일 행 모드에서는 고정이지만, 다중 행 모드에서는 고정이 아니다. PCRE_MULTILINE이 설정되면 PCRE_DOLLAR_ENDONLY 옵션이 무시된다. \A, \Z 및 \z 시퀀스를 사용하여 두 모드 모두에서 제목의 시작과 끝을 일치시킬 수 있다. 그리고 패턴의 모든 가지가 \A로 시작하면 PCRE_MULTILINE이 설정되었는지 여부에 관계없이 항상 고정된다. PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) > PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.anchors.php">Anchors</a> (앵커)</h3>
<h4>곡절 부호(^)</h4>
<p><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 외부의 기본 일치 모드에서 곡절 부호(^)는 현재 일치하는 점이 제목 문자열의 시작 부분에 있는 경우에만 참(true)인 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>이다. <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 내에서 곡절 부호(^)는 완전히 다른 의미를 지닌다.</p>
<p>여러 가지 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>이 포함되어 있는 경우 곡절 부호(^)는 패턴의 첫 번째 문자일 필요는 없지만 패턴이 해당 분기와 일치하는 경우 나타나는 각 대체 방법의 첫 번째 문자여야 한다. 가능한 모든 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>이 곡절 부호(^)로 시작하는 경우, 즉 패턴이 문장 시작 부분에서만 일치하도록 제한되면 &quot;고정(anchored)&quot; 패턴이라고 한다. (패턴을 고정시킬 수 있는 다른 구조도 있다.)</p>
<h4>달러 부호($)</h4>
<p>달러 부호($)는 기본적으로 현재 일치 지점이 제목 문자열의 끝에 있거나 문자열의 마지막 문자인 줄바꿈 문자 바로 앞에 있는 경우에만 참(true)이 되는 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>이다. 달러는 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a>에서 특별한 의미를 가지지 않는다.</p>
<p>달러 부호($)는 여러 가지 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>이 포함된 경우 패턴의 마지막 문자일 필요는 없지만 마지막을 나타내는 모든 선택에서 마지막 문자여야 한다.</p>
<h4><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE 변경자</a>의 영향</h4>
<p><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_DOLLAR_ENDONLY</a> 옵션을 컴파일 또는 매칭 시점에 설정하여 문자열의 맨 끝에서만 일치하도록 달러 부호의 의미를 변경할 수 있다. 이것은 <code>\Z</code> <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>에 영향을 주지 않는다.</p>
<p><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_MULTILINE</a> 옵션이 설정된 경우 곡절 부호 및 달러 부호의 의미가 변경된다. 이 경우, 목표 문자열의 처음과 마지막에 더하여, 내부의 &quot;<code>\n</code>&quot; 문자의 앞과 뒤에도 일치한다. 예를 들어, 패턴 <code>/^abc$/</code>는 여러 줄 모드에서 제목 문자열 &quot;<code>def\nabc</code>&quot;와 일치하지만 그렇지 않은 경우는 일치하지 않는다. 따라서 모든 분기가 &quot;^&quot;로 시작하는 분기는 단일 행 모드에서는 고정이지만, 다중 행 모드에서는 고정이 아니다. <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_MULTILINE</a>이 설정되면 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_DOLLAR_ENDONLY</a> 옵션이 무시된다.</p>
<p><code>\A</code>, <code>\Z</code> 및 <code>\z</code> 시퀀스를 사용하여 두 모드 모두에서 제목의 시작과 끝을 일치시킬 수 있다. 그리고 패턴의 모든 가지가 <code>\A</code>로 시작하면 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_MULTILINE</a>이 설정되었는지 여부에 관계없이 항상 고정된다.</p>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/"/><published>2017-01-11T17:57:17+09:00</published><updated>2017-02-15T10:04:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Unicode character properties (유니코드 문자 속성) PHP 5.1.0 이후부터 UTF-8 모드가 선택되면 일반 문자 유형과 일치하는 세 개의 추가 이스케이프 시퀀스를 사용할 수 있다. 문자 설명 \p{xx} xx 속성을 가지는 문자 \P{xx} xx 속성을 가지지 않는 문자 \X 확장 유니코드 시퀀스 위의 xx로 표시된 속성 이름은 유니코드 일반 범주 속성으로 제한된다. 각 문자에는 정확히 두 개의 문자로 된 약어가 지정된다. Perl과의 호환성을 위해 여는 중괄호({)와 속성 이름 사이에 곡절 부호(^)를 포함하여 부정을 지정할 수 있다. 예를 들어 \p{^Ll}는 \P{Lu}와 같다(메뉴얼에는 \p{^Lu}라고 표기되어 있으나 오타다. 아래의 예시를 실행해보면 된다). <?php echo (preg_match('/\p{^Lu}/', 'ABC') ? 'true' : 'false') . "\n"; // false echo (preg_match('/\p{^Ll}/', 'ABC') ? 'true' : 'false') . "\n"; // true \p 또는 \P에 한 문자만 지정하면 해당 문자로 시작하는 모든 속성이 포함한다. 이 경우 부정이 없는 경우 이스케이프 시퀀스의 중괄호({)는 선택사항이다. 아래의 두 예제는 같다. \p{L} \pL Supported property codes Property Matches Notes C 기타(Other) Cc 제어(Control) Cf 형식(Format) Cn 미할당(Unassigned) Co 사적 사용(Private use) Cs 대리(Surrogate) L 문자(Letter) 다음의 속성을 포함 : Ll, Lm, Lo, Lt, Lu Ll 소문자(Lower case letter) Lm 변경자(Modifier letter) Lo 기타 문자(Other letter) Lt 표제 문자(Title case letter) Lu 대문자(Upper case letter) M 마크(Mark) Mc 자간 마크(Spacing mark) Me 동봉 마크(Enclosing mark) Mn 비자간 마크(Non-spacing mark) N 숫자(Number) Nd 10진수(Decimal number) Nl 문자수(Letter number) No 기타 수(Other number) P 구두(Punctuation) Pc 연결 구두(Connector punctuation) Pd 대시 구두(Dash punctuation) Pe 닫는 구두(Close punctuation) Pf 종료 구두(Final punctuation) Pi 초기 구두(Initial punctuation) Po 기타 구두(Other punctuation) Ps 열기 구두(Open punctuation) S 심볼(Symbol) Sc 통화 심볼(Currency symbol) Sk 변경 심볼(Modifier symbol) Sm 수학 심볼(Mathematical symbol) So 기타 심볼(Other symbol) Z 구분자(Separator) Zl 줄 구분자(Line separator) Zp 문단 구분자(Paragraph separator) Zs 공백 구분자(Space separator) PCRE에서는 "Greek" 또는 "InMusicalSymbols"와 같은 확장 속성을 지원하지 않는다. 대문자와 소문자를 구별하지 않는(caseless) 매칭을 지정해도 이러한 이스케이프 시퀀스에는 영향을 미치지 않는다. 예를 들어 \p{Lu}는 항상 대문자만 일치시킨다. \X 이스케이프는 확장 유니코드 시퀀스를 형성하는 모든 유니코드 문자와 일치한다. \X는 (?>\PM\pM*)와 동일하다. 즉, "mark" 속성이 없는 문자에 일치하거나, "mark" 속성에 붙는 하나 이상의 문자에 일치하고, 시퀀스를 원자 집단으로 취급한다. "mark" 속성을 가지는 문자는 일반적으로 선행 문자에 영향을 주는 엑센트다. PCRE가 15,000개가 넘는 문자가 들어있는 구조체를 검색해야 하기 때문에 유니코드 속성에 일치하는 문자가 빠르지 않다. 이것이 \d와 \w 같은 전통적인 이스케이프 시퀀스가 PCRE에서 유니코드 속성을 사용하지 않는 이유다. PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) > PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.unicode.php">Unicode character properties</a> (유니코드 문자 속성)</h3>
<p>PHP 5.1.0 이후부터 UTF-8 모드가 선택되면 일반 문자 유형과 일치하는 세 개의 추가 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프 시퀀스</a>를 사용할 수 있다.</p>
<table>
<thead>
<tr>
<th style="text-align: center;">문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><code>\p{xx}</code></td>
<td>xx 속성을 가지는 문자</td>
</tr>
<tr>
<td style="text-align: center;"><code>\P{xx}</code></td>
<td>xx 속성을 가지지 않는 문자</td>
</tr>
<tr>
<td style="text-align: center;"><code>\X</code></td>
<td>확장 유니코드 시퀀스</td>
</tr>
</tbody>
</table>
<p>위의 xx로 표시된 속성 이름은 유니코드 일반 범주 속성으로 제한된다. 각 문자에는 정확히 두 개의 문자로 된 약어가 지정된다.</p>
<p>Perl과의 호환성을 위해 여는 중괄호(<code>{</code>)와 속성 이름 사이에 곡절 부호(^)를 포함하여 부정을 지정할 수 있다. 예를 들어 <code>\p{^Ll}</code>는 <code>\P{Lu}</code>와 같다(메뉴얼에는 <code>\p{^Lu}</code>라고 표기되어 있으나 오타다. 아래의 예시를 실행해보면 된다).</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span> (preg_match(<span class="hljs-string">'/\p{^Lu}/'</span>, <span class="hljs-string">'ABC'</span>) ? <span class="hljs-string">'true'</span> : <span class="hljs-string">'false'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// false</span>
<span class="hljs-keyword">echo</span> (preg_match(<span class="hljs-string">'/\p{^Ll}/'</span>, <span class="hljs-string">'ABC'</span>) ? <span class="hljs-string">'true'</span> : <span class="hljs-string">'false'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// true</span></pre>
<p><code>\p</code> 또는 <code>\P</code>에 한 문자만 지정하면 해당 문자로 시작하는 모든 속성이 포함한다. 이 경우 부정이 없는 경우 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프 시퀀스</a>의 중괄호(<code>{</code>)는 선택사항이다. 아래의 두 예제는 같다.</p>
<pre><code>\p{L}
\pL</code></pre>
<h4>Supported property codes</h4>
<table>
<thead>
<tr>
<th style="text-align: center;">Property</th>
<th>Matches</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><code>C</code></td>
<td>기타(Other)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Cc</code></td>
<td>제어(Control)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Cf</code></td>
<td>형식(Format)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Cn</code></td>
<td>미할당(Unassigned)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Co</code></td>
<td>사적 사용(Private use)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Cs</code></td>
<td>대리(Surrogate)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>L</code></td>
<td>문자(Letter)</td>
<td>다음의 속성을 포함 : Ll, Lm, Lo, Lt, Lu</td>
</tr>
<tr>
<td style="text-align: center;"><code>Ll</code></td>
<td>소문자(Lower case letter)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Lm</code></td>
<td>변경자(Modifier letter)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Lo</code></td>
<td>기타 문자(Other letter)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Lt</code></td>
<td>표제 문자(Title case letter)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Lu</code></td>
<td>대문자(Upper case letter)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>M</code></td>
<td>마크(Mark)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Mc</code></td>
<td>자간 마크(Spacing mark)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Me</code></td>
<td>동봉 마크(Enclosing mark)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Mn</code></td>
<td>비자간 마크(Non-spacing mark)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>N</code></td>
<td>숫자(Number)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Nd</code></td>
<td>10진수(Decimal number)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Nl</code></td>
<td>문자수(Letter number)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>No</code></td>
<td>기타 수(Other number)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>P</code></td>
<td>구두(Punctuation)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Pc</code></td>
<td>연결 구두(Connector punctuation)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Pd</code></td>
<td>대시 구두(Dash punctuation)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Pe</code></td>
<td>닫는 구두(Close punctuation)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Pf</code></td>
<td>종료 구두(Final punctuation)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Pi</code></td>
<td>초기 구두(Initial punctuation)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Po</code></td>
<td>기타 구두(Other punctuation)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Ps</code></td>
<td>열기 구두(Open punctuation)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>S</code></td>
<td>심볼(Symbol)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Sc</code></td>
<td>통화 심볼(Currency symbol)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Sk</code></td>
<td>변경 심볼(Modifier symbol)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Sm</code></td>
<td>수학 심볼(Mathematical symbol)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>So</code></td>
<td>기타 심볼(Other symbol)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Z</code></td>
<td>구분자(Separator)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Zl</code></td>
<td>줄 구분자(Line separator)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Zp</code></td>
<td>문단 구분자(Paragraph separator)</td>
<td></td>
</tr>
<tr>
<td style="text-align: center;"><code>Zs</code></td>
<td>공백 구분자(Space separator)</td>
<td></td>
</tr>
</tbody>
</table>
<p>PCRE에서는 &quot;Greek&quot; 또는 &quot;InMusicalSymbols&quot;와 같은 확장 속성을 지원하지 않는다.</p>
<p>대문자와 소문자를 구별하지 않는(caseless) 매칭을 지정해도 이러한 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프 시퀀스</a>에는 영향을 미치지 않는다. 예를 들어 <code>\p{Lu}</code>는 항상 대문자만 일치시킨다.</p>
<p><code>\X</code> <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a>는 확장 유니코드 시퀀스를 형성하는 모든 유니코드 문자와 일치한다. <code>\X</code>는 <code>(?&gt;\PM\pM*)</code>와 동일하다.</p>
<p>즉, &quot;mark&quot; 속성이 없는 문자에 일치하거나, &quot;mark&quot; 속성에 붙는 하나 이상의 문자에 일치하고, 시퀀스를 원자 집단으로 취급한다. &quot;mark&quot; 속성을 가지는 문자는 일반적으로 선행 문자에 영향을 주는 엑센트다.</p>
<p>PCRE가 15,000개가 넘는 문자가 들어있는 구조체를 검색해야 하기 때문에 유니코드 속성에 일치하는 문자가 빠르지 않다. 이것이 <code>\d</code>와 <code>\w</code> 같은 전통적인 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프 시퀀스</a>가 PCRE에서 유니코드 속성을 사용하지 않는 이유다.</p>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - Escape sequences</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/"/><published>2017-01-10T16:28:08+09:00</published><updated>2017-02-15T10:04:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Escape sequences 백 슬래시 문자는 여러 용도로 사용된다. 첫 번째, 영숫자가 아닌 문자가 나오면 문자가 가질 수 있는 특별한 의미가 없어진다. 이스케이프 문자로 백 슬래시를 사용하면 캐릭터 클래스의 내부 및 외부에 모두 적용된다. 예를 들어, "*" 문자를 일치시키려면 패턴에 "\*"을 쓴다. 이것은 \ 다음 문자가 메타 문자로 해석될지 여부와 관계없이 적용되므로 영숫자가 아닌 문자 앞에 "\"를 붙이면 문자 자체를 의미하는 것으로 항상 안전하다. 단, 백 슬래시와 일치시키려면 "\\"이라고 써야 한다. ' 또는 " 따옴표가 붙은 PHP 문자열은 백 슬래시가 특별한 의미를 가진다. 따라서 \가 일반 표현식 \\과 일치해야 한다면 "\\\\" 또는 '\\\\'가 PHP 코드에서 사용 되어야 한다. 패턴이 PCRE_EXTENDED 옵션으로 컴파일 된 경우 패턴의 공백(캐릭터 클래스 제외)과 캐릭터 클래스 외부의 "#" 사이의 문자와 다음 줄바꿈 문자는 무시된다. 백 슬래시를 사용하여 공백이나 "#" 문자를 패턴의 일부로 포함 할 수 있다. 두 번째, 백 슬래시는 시각적으로 패턴의 비인쇄 문자를 인코딩하는 방법을 제공한다. 패턴 종료를 의미하는 바이너리 제로(0)를 제외하고 비인쇄 문자의 모양에는 제한이 없지만 텍스트 편집으로 패턴을 작성하는 경우 일반적으로 이진 문자 보다 다음 이스케이프 시퀀스 중 하나를 사용하는 것이 더 쉽다. 다음은 그 예시다. 문자 설명 \a 알람, 즉 BEL 문자 (hex 07) \cx "control-x", 여기서 x는 임의의 문자이다. \e escape (hex 1B) \f formfeed (hex 0C) \n newline (hex 0A) \p{xx} xx 속성을 가진 문자, 자세한 정보는 유니코드 속성을 참조 \P{xx} xx 속성이 없는 문자, 자세한 정보는 유니코드 속성을 참조 \r carriage return (hex 0D) \t tab (hex 09) \xhh 16진 코드 hh, 유니코드 문자 속성 참고 \ddd 8진 코드 ddd 또는 역 참조가 있는 문자 \cx : "control-x"를 나타낸다(ctrl키 + x). 변환과정은 다음과 같다. "x"가 소문자 인 경우 대문자로 변환된다. 그런 다음 문자의 6번 비트(16진수 40)가 반전된다. 따라서 "\cz"는 16진수 1A가 되고, "\c{"는 16진수 3B, "\c;"는 16진수 7B가 된다. 변환 과정은 아래의 코드를 보면 더 빠르게 이해가 될 것이다. <?php $tmp = ['z' => '1a', '{' => '3b', ';' => '7b']; foreach ($tmp as $from => $expect) { $fromBit = sprintf('%07s', decbin(ord(strtoupper($from)))); echo $fromBit . ' ' . "\n"; $toBit = (!substr($fromBit, -7, 1) ? '1' : '0') . substr($fromBit, -6); echo $toBit . "\n"; if (strcmp(dechex(bindec($toBit)), $expect) != 0) { throw new \Exception('변환 오류'); } echo dechex(bindec($toBit)) . ' <- ' . $expect . "\n"; echo $from . ' -> ' . chr(bindec($toBit)) . "\n"; echo "\n"; } // 1011010 // 0011010 // 1a <- 1a // z ->  // // 1111011 // 0111011 // 3b <- 3b // { -> ; // // 0111011 // 1111011 // 7b <- 7b // ; -> { \x : "\x" 뒤에 나오는 최대 두 개의 16진수를 읽는다(문자는 대문자 또는 소문자로 입력 할 수 있음). UTF-8 모드에서는 "\x{...}"가 허용되며 중괄호의 내용은 16진수 문자열이다. 주어진 16진수 코드 넘버는 UTF-8 문자로 해석된다. 원래 16진수 이스케이프 시퀀스인 \xhh가 127보다 큰 경우에는 2바이트 UTF-8 문자로 취급한다. \0 : "\0" 뒤에 나오는 최대 두 개의 8진수를 읽는다. 두 자릿수 미만이면 존재하는 숫자만 사용된다. 따라서 시퀀스 "\0\x\07"은 BEL 문자(코드 값 7)가 뒤 따르는 두 개의 2진 0을 의미한다. 뒤에 나오는 문자 그 자체가 8진수 이면 처음 0 뒤에 두 자리를 입력해야 한다. <?php $str = 'test-' . chr(0) . chr(0) . chr(7); echo ((preg_match('/\0\x\07/', $str)) ? 'matched' : 'not matched') . "\n"; // matched $str = 'test-' . chr(0) . chr(7); echo ((preg_match('/\0\x\07/', $str)) ? 'matched' : 'not matched') . "\n"; // not matched 백 슬래시 뒤에 0이 아닌 숫자가 오는 경우 처리가 복잡하다. PCRE는 캐릭터 클래스 외부에서 10진수로 그 이후의 모든 자릿수를 읽는다. 숫자가 10보다 작거나 표현식에서 이전에 캡처한 왼쪽 괄호가 많으면 전체 시퀀스가 ​​역 참조로 간주된다. 이것이 어떻게 작동하는지에 대한 설명은 괄호로 묶인 서브 패턴에 대한 설명 이후에 다시 한다. 캐릭터 클래스 안이나, 10진수가 9보다 크고 그보다 많은 패턴을 포착되지 않으면, PCRE는 백 슬래시 다음에 최대 세 개의 8진수를 다시 읽으며, 해당하는 8비트 값으로 하나의 바이트를 생성하고 이후의 숫자는 그 자체를 나타낸다. 다음의 예시를 살펴보자 : 문자 설명 \040 space(공백)의 다른 표현 \40 캡처 서브 패턴이 40개 미만인 경우 \040와 동일 \7 항상 역 참조(back reference)를 의미 \11 역 참조(back reference) 이거나 tab(탭)의 다른 표현 \011 tab(탭)의 다른 표현 \0113 탭 문자 뒤에 "3" \113 8진수 113에 해당하는 코드 문자 (99개의 역 참조가있을 수 없으므로) \377 완전히 1 비트로 구성된 바이트 \81 역 참조(back reference) 이거나 "8"과 "1"이 뒤 따르는 두 개의 2진 0 <?php echo ((preg_match('/\0113/', chr(octdec(11)) . '3')) ? 'matched' : 'not matched') . "\n"; // matched echo ((preg_match('/\113/', chr(octdec(113)))) ? 'matched' : 'not matched') . "\n"; // matched echo ((preg_match('/\377/', chr(octdec(377)))) ? 'matched' : 'not matched') . "\n"; // matched echo ((preg_match('/\81/', chr(0) . chr(0) . '81')) ? 'matched' : 'not matched') . "\n"; // matched 세 개 이상의 8진수는 읽히지 않으므로 100 이상의 8진수 값은 선행 0과 함께 사용하면 안된다. 단일 바이트 값을 정의하는 모든 시퀀스는 캐릭터 클래스의 내부 및 외부 모두에서 사용할 수 있다. 또한 캐릭터 클래스 내에서 시퀀스 "\b"는 백 스페이스 문자 (16진수 08)로 해석된다. 캐릭터 클래스 외부에는 다른 의미가 있다 (아래 참조). <?php echo ((preg_match('/[\b0-9]{2}/', chr(8) . '3')) ? 'matched' : 'not matched') . "\n"; // matched 세 번째, 일반 문자 유형을 지정하는 것이다. 문자 설명 \d 임의의 10진수 \D 10진수가 아닌 문자 \h 모든 수평 공백 문자 (PHP 5.2.4 이후) \H 수평 공백 문자가 아닌 모든 문자 (PHP 5.2.4 이후) \s 공백 문자 \S 공백이 아닌 모든 문자 \v 모든 수직 공백 문자 (PHP 5.2.4 이후) \V 수직 공백 문자가 아닌 모든 문자 (PHP 5.2.4 이후) \w 모든 "word" 문자 \W 모든 "non-word" 문자 각 이스케이프 시퀀스 조합은 완전한 문자 집합을 두 개의 분리된 집합으로 분할한다. 주어진 문자는 각 집합 중 하나에만 일치한다. "word" 문자는 임의의 문자 또는 숫자 또는 밑줄 문자(_), 즉 Perl "word"의 일부가 될 수 있는 문자이다. 문자 및 숫자의 정의는 PCRE(Perl Compatible Regular Expressions)의 문자 테이블(PCRE의 "pcre_maketables.c" 소스 참조)에 의해 제어되며 locale 특정 일치가 발생하는 경우 달라질 수 있다. 예를 들어 "fr"(프랑스어) 로켈에서 128보다 큰 일부 문자 코드는 악센트 부호가 있는 문자에 사용되며 이 문자는 \w와 일치한다. 이러한 문자 유형 시퀀스는 캐릭터 클래스의 안과 밖 모두에서 나타날 수 있다. 그것들은 각각 적절한 유형의 한 문자와 일치한다. 현재 일치하는 지점이 제목 문자열의 끝에 있으면 해당 문자가 모두 일치하지 않으므로 모두 일치하지 않는다. 네 번째, 단순한 특정 어설션을 위한 것이다. 어설션은 대상 문자열의 문자를 사용하지 않고 일치하는 특정 지점에서 충족되어야 하는 조건을 지정한다. 보다 복잡한 어설션을 위한 서브 패턴의 사용은 아래에 설명되어 있다. 문자 설명 \b 단어(word) 경계 \B 단어(not a word) 경계가 아님 \A 목표 문자열 시작 (다중 행 모드와 무관) \Z 목표 문자열 끝 또는 마지막 줄바꿈 (다중 행 모드와 무관) \z 목표 문자열 끝 (다중 행 모드와 무관) \G 주제어에서 첫 번째로 일치하는 위치 이러한 어설션은 캐릭터 클래스 안에서 사용할 수 없다. (단, "\b"는 캐릭터 클래스 내에서 백 스페이스 문자의 의미를 가진다). "word" 경계는 현재 문자와 이전 문자가 모두 \w 또는 \W와 일치하지 않는 대상 문자열에서의 위치이다(즉, 하나의 글자가 \w와 일치하고 다른 글자가 \W와 일치 경우). 또는, 시작 또는 마지막 문자가 각각 \w와 일치하면 문자열의 시작 또는 끝이 경계가 된다. <?php echo ((preg_match('/(testable|string)/', 'AtestableA')) ? 'matched' : 'not matched') . "\n"; // matched echo ((preg_match('/\b(testable|string)\b/', 'AtestableA')) ? 'matched' : 'not matched') . "\n"; // not matched echo ((preg_match('/\b(testable|string)\b/', 'A testable A')) ? 'matched' : 'not matched') . "\n"; // matched echo ((preg_match('/\B(testable|string)\B/', 'AtestableA')) ? 'matched' : 'not matched') . "\n"; // matched echo ((preg_match('/\B(testable|string)\B/', 'A testable A')) ? 'matched' : 'not matched') . "\n"; // not matched \A, \Z 및 \z 어설션은 기존 곡절 부호(^) 및 달러 부호($)와 달리 옵션이 설정 되더라도 대상 문자열의 시작과 끝 부분에서만 일치한다. 이들은 PCRE_MULTILINE 또는 PCRE_DOLLAR_ENDONLY 옵션의 영향을 받지 않는다. \Z와 \z의 차이점은 \Z는 문자열의 마지막 문자 뿐만 아니라 문자열 끝에 있는 개행 문자 앞도 일치하지만 \z는 문자열 끝에만 일치한다는 것이다. <?php $str = <<<STR A testable string E B testable string F C testable string G D testable string H STR; preg_match_all('/\AB /m', $str, $matches); print_r($matches); //Array //( // [0] => Array // ( // ) //) preg_match_all('/^B /m', $str, $matches); print_r($matches); //Array //( // [0] => Array // ( // [0] => B // ) //) preg_match_all('/H\z/m', $str, $matches); print_r($matches); //Array //( // [0] => Array // ( // ) //) preg_match_all('/G$/m', $str, $matches); print_r($matches); //Array //( // [0] => Array // ( // [0] => G // ) //) $str .= "\n"; // \Z 와 \z의 차이를 확인하기 위해 개행문자 추가 preg_match_all('/H\z/m', $str, $matches); print_r($matches); //Array //( // [0] => Array // ( // ) //) preg_match_all('/H\Z/m', $str, $matches); print_r($matches); //Array //( // [0] => Array // ( // [0] => H // ) //) \G 어설션은 현재 일치하는 위치가 preg_match()의 offset 인수에 지정된 일치 항목의 시작 지점에 있는 경우에만 일치된다. offset 값이 0이 아닌 경우 \A와 다르다(Perl에서의 \G와 다르다). <?php preg_match('/\G1234/', 'test1234', $matches, 0, 3); print_r($matches); // offset 위치의 시작이 "t"이므로 일치되지 않음 //Array //( //) preg_match('/\G1234/', 'test1234', $matches, 0, 4); print_r($matches); //Array //( // [0] => 1234 //) \Q와 \E는 패턴에서 regexp 메타 문자를 무시하는데 사용될 수 있다. 예를 들어 \w+\Q.$.\E$는 하나 이상의 단어 문자와 일치하며 리터럴 .$.이 따라 오며 문자열 끝에 고정된다. 간단히 말해 \Q로 시작해서 \E로 끝나는 내부의 글자는 리터럴로 인지한다는 것이다. <?php $str = 'asdf abc.$.'; preg_match('/\w+\Q.$.\E$/', $str, $matches); print_r($matches); // Array // ( // [0] => abc.$. // ) $str = 'asdf abc.$x'; preg_match('/\w+\Q.$.\E$/', $str, $matches); print_r($matches); // Array // ( // ) \K는 PHP 5.2.4부터 일치 시작을 초기화하는데 사용될 수 있다. 예를 들어, foo\Kbar 패턴은 "foobar"와 일치하지만 "bar"와도 일치한다고 보고한다. \K를 사용하면 캡처된 부분 문자열의 설정을 방해하지 않는다. 예를 들어, 패턴 (foo)\Kbar가 "foobar"와 일치하면 첫 번째 하위 문자열은 여전히 ​​"foo"로 설정된다. <?php $str = 'foobar'; preg_match('/foobar/', $str, $matches); print_r($matches); //Array //( // [0] => foobar //) preg_match('/(foo)bar/', $str, $matches); print_r($matches); //Array //( // [0] => foobar // [1] => foo //) preg_match('/foo\Kbar/', $str, $matches); print_r($matches); //Array //( // [0] => bar //) preg_match('/(foo)\Kbar/', $str, $matches); print_r($matches); //Array //( // [0] => bar // [1] => foo //) PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) > PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.escape.php">Escape sequences</a></h3>
<p>백 슬래시 문자는 여러 용도로 사용된다.</p>
<h4>첫 번째, 영숫자가 아닌 문자가 나오면 문자가 가질 수 있는 특별한 의미가 없어진다.</h4>
<p>이스케이프 문자로 백 슬래시를 사용하면 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a>의 내부 및 외부에 모두 적용된다.</p>
<p>예를 들어, &quot;<code>*</code>&quot; 문자를 일치시키려면 패턴에 &quot;<code>\*</code>&quot;을 쓴다. 이것은 <code>\</code> 다음 문자가 <a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">메타 문자</a>로 해석될지 여부와 관계없이 적용되므로 영숫자가 아닌 문자 앞에 &quot;<code>\</code>&quot;를 붙이면 문자 자체를 의미하는 것으로 항상 안전하다. 단, 백 슬래시와 일치시키려면 &quot;<code>\\</code>&quot;이라고 써야 한다.</p>
<blockquote>
<p>' 또는 &quot; 따옴표가 붙은 PHP 문자열은 백 슬래시가 특별한 의미를 가진다. 따라서 <code>\</code>가 일반 표현식 <code>\\</code>과 일치해야 한다면 &quot;<code>\\\\</code>&quot; 또는 '<code>\\\\</code>'가 PHP 코드에서 사용 되어야 한다.</p>
</blockquote>
<p>패턴이 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_EXTENDED</a> 옵션으로 컴파일 된 경우 패턴의 공백(<a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 제외)과 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 외부의 &quot;<code>#</code>&quot; 사이의 문자와 다음 줄바꿈 문자는 무시된다. 백 슬래시를 사용하여 공백이나 &quot;<code>#</code>&quot; 문자를 패턴의 일부로 포함 할 수 있다.</p>
<h4>두 번째, 백 슬래시는 시각적으로 패턴의 비인쇄 문자를 인코딩하는 방법을 제공한다.</h4>
<p>패턴 종료를 의미하는 바이너리 제로(0)를 제외하고 비인쇄 문자의 모양에는 제한이 없지만 텍스트 편집으로 패턴을 작성하는 경우 일반적으로 이진 문자 보다 다음 이스케이프 시퀀스 중 하나를 사용하는 것이 더 쉽다.</p>
<p>다음은 그 예시다.</p>
<table>
<thead>
<tr>
<th style="text-align: center;">문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><code>\a</code></td>
<td>알람, 즉 BEL 문자 (hex 07)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\cx</code></td>
<td>&quot;control-x&quot;, 여기서 x는 임의의 문자이다.</td>
</tr>
<tr>
<td style="text-align: center;"><code>\e</code></td>
<td>escape (hex 1B)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\f</code></td>
<td>formfeed (hex 0C)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\n</code></td>
<td>newline (hex 0A)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\p{xx}</code></td>
<td>xx 속성을 가진 문자, 자세한 정보는 유니코드 속성을 참조</td>
</tr>
<tr>
<td style="text-align: center;"><code>\P{xx}</code></td>
<td>xx 속성이 없는 문자, 자세한 정보는 유니코드 속성을 참조</td>
</tr>
<tr>
<td style="text-align: center;"><code>\r</code></td>
<td>carriage return (hex 0D)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\t</code></td>
<td>tab (hex 09)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\xhh</code></td>
<td>16진 코드 hh, <a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">유니코드 문자 속성</a> 참고</td>
</tr>
<tr>
<td style="text-align: center;"><code>\ddd</code></td>
<td>8진 코드 ddd 또는 역 참조가 있는 문자</td>
</tr>
</tbody>
</table>
<p><strong><code>\cx</code></strong> : &quot;control-x&quot;를 나타낸다(ctrl키 + x). 변환과정은 다음과 같다. &quot;x&quot;가 소문자 인 경우 대문자로 변환된다. 그런 다음 문자의 6번 비트(16진수 40)가 반전된다. 따라서 &quot;<code>\cz</code>&quot;는 16진수 1A가 되고, &quot;<code>\c{</code>&quot;는 16진수 3B, &quot;<code>\c;</code>&quot;는 16진수 7B가 된다.<br />
변환 과정은 아래의 코드를 보면 더 빠르게 이해가 될 것이다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$tmp = [<span class="hljs-string">'z'</span> =&gt; <span class="hljs-string">'1a'</span>, <span class="hljs-string">'{'</span> =&gt; <span class="hljs-string">'3b'</span>, <span class="hljs-string">';'</span> =&gt; <span class="hljs-string">'7b'</span>];
<span class="hljs-keyword">foreach</span> ($tmp <span class="hljs-keyword">as</span> $from =&gt; $expect) {
    $fromBit = sprintf(<span class="hljs-string">'%07s'</span>, decbin(ord(strtoupper($from))));
    <span class="hljs-keyword">echo</span> $fromBit . <span class="hljs-string">' '</span> . <span class="hljs-string">"\n"</span>;

    $toBit = (!substr($fromBit, <span class="hljs-number">-7</span>, <span class="hljs-number">1</span>) ? <span class="hljs-string">'1'</span> : <span class="hljs-string">'0'</span>) . substr($fromBit, <span class="hljs-number">-6</span>);

    <span class="hljs-keyword">echo</span> $toBit . <span class="hljs-string">"\n"</span>;
    <span class="hljs-keyword">if</span> (strcmp(dechex(bindec($toBit)), $expect) != <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> \<span class="hljs-keyword">Exception</span>(<span class="hljs-string">'변환 오류'</span>);
    }
    <span class="hljs-keyword">echo</span> dechex(bindec($toBit)) . <span class="hljs-string">' &lt;- '</span> . $expect . <span class="hljs-string">"\n"</span>;
    <span class="hljs-keyword">echo</span> $from . <span class="hljs-string">' -&gt; '</span> . chr(bindec($toBit)) . <span class="hljs-string">"\n"</span>;
    <span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;
}

<span class="hljs-comment">// 1011010</span>
<span class="hljs-comment">// 0011010</span>
<span class="hljs-comment">// 1a &lt;- 1a</span>
<span class="hljs-comment">// z -&gt; </span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// 1111011</span>
<span class="hljs-comment">// 0111011</span>
<span class="hljs-comment">// 3b &lt;- 3b</span>
<span class="hljs-comment">// { -&gt; ;</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// 0111011</span>
<span class="hljs-comment">// 1111011</span>
<span class="hljs-comment">// 7b &lt;- 7b</span>
<span class="hljs-comment">// ; -&gt; {</span></pre>
<p><strong><code>\x</code></strong> : &quot;<code>\x</code>&quot; 뒤에 나오는 최대 두 개의 16진수를 읽는다(문자는 대문자 또는 소문자로 입력 할 수 있음). UTF-8 모드에서는 &quot;<code>\x{...}</code>&quot;가 허용되며 중괄호의 내용은 16진수 문자열이다. 주어진 16진수 코드 넘버는 UTF-8 문자로 해석된다. 원래 16진수 이스케이프 시퀀스인 <code>\xhh</code>가 127보다 큰 경우에는 2바이트 UTF-8 문자로 취급한다.</p>
<p><strong><code>\0</code></strong> : &quot;<code>\0</code>&quot; 뒤에 나오는 최대 두 개의 8진수를 읽는다. 두 자릿수 미만이면 존재하는 숫자만 사용된다. 따라서 시퀀스 &quot;<code>\0\x\07</code>&quot;은 BEL 문자(코드 값 7)가 뒤 따르는 두 개의 2진 0을 의미한다. 뒤에 나오는 문자 그 자체가 8진수 이면 처음 0 뒤에 두 자리를 입력해야 한다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'test-'</span> . chr(<span class="hljs-number">0</span>) . chr(<span class="hljs-number">0</span>) . chr(<span class="hljs-number">7</span>);
<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/\0\x\07/'</span>, $str)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// matched</span>

$str = <span class="hljs-string">'test-'</span> . chr(<span class="hljs-number">0</span>) . chr(<span class="hljs-number">7</span>);
<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/\0\x\07/'</span>, $str)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// not matched</span></pre>
<p>백 슬래시 뒤에 0이 아닌 숫자가 오는 경우 처리가 복잡하다. PCRE는 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 외부에서 10진수로 그 이후의 모든 자릿수를 읽는다. 숫자가 10보다 작거나 표현식에서 이전에 캡처한 왼쪽 괄호가 많으면 전체 시퀀스가 ​​<a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">역 참조</a>로 간주된다. 이것이 어떻게 작동하는지에 대한 설명은 괄호로 묶인 서브 패턴에 대한 설명 이후에 다시 한다.</p>
<p><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 안이나, 10진수가 9보다 크고 그보다 많은 패턴을 포착되지 않으면, PCRE는 백 슬래시 다음에 최대 세 개의 8진수를 다시 읽으며, 해당하는 8비트 값으로 하나의 바이트를 생성하고 이후의 숫자는 그 자체를 나타낸다. 다음의 예시를 살펴보자 :</p>
<table>
<thead>
<tr>
<th style="text-align: center;">문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><code>\040</code></td>
<td>space(공백)의 다른 표현</td>
</tr>
<tr>
<td style="text-align: center;"><code>\40</code></td>
<td>캡처 서브 패턴이 40개 미만인 경우 <code>\040</code>와 동일</td>
</tr>
<tr>
<td style="text-align: center;"><code>\7</code></td>
<td>항상 <a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">역 참조(back reference)</a>를 의미</td>
</tr>
<tr>
<td style="text-align: center;"><code>\11</code></td>
<td><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">역 참조(back reference)</a> 이거나 tab(탭)의 다른 표현</td>
</tr>
<tr>
<td style="text-align: center;"><code>\011</code></td>
<td>tab(탭)의 다른 표현</td>
</tr>
<tr>
<td style="text-align: center;"><code>\0113</code></td>
<td>탭 문자 뒤에 &quot;3&quot;</td>
</tr>
<tr>
<td style="text-align: center;"><code>\113</code></td>
<td>8진수 113에 해당하는 코드 문자 (99개의 역 참조가있을 수 없으므로)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\377</code></td>
<td>완전히 1 비트로 구성된 바이트</td>
</tr>
<tr>
<td style="text-align: center;"><code>\81</code></td>
<td><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">역 참조(back reference)</a> 이거나 &quot;8&quot;과 &quot;1&quot;이 뒤 따르는 두 개의 2진 0</td>
</tr>
</tbody>
</table>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/\0113/'</span>, chr(octdec(<span class="hljs-number">11</span>)) . <span class="hljs-string">'3'</span>)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/\113/'</span>, chr(octdec(<span class="hljs-number">113</span>)))) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/\377/'</span>, chr(octdec(<span class="hljs-number">377</span>)))) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/\81/'</span>, chr(<span class="hljs-number">0</span>) . chr(<span class="hljs-number">0</span>) . <span class="hljs-string">'81'</span>)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// matched</span></pre>
<p>세 개 이상의 8진수는 읽히지 않으므로 100 이상의 8진수 값은 선행 0과 함께 사용하면 안된다.</p>
<p>단일 바이트 값을 정의하는 모든 시퀀스는 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a>의 내부 및 외부 모두에서 사용할 수 있다. 또한 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 내에서 시퀀스 &quot;<code>\b</code>&quot;는 백 스페이스 문자 (16진수 08)로 해석된다. <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 외부에는 다른 의미가 있다 (아래 참조).</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/[\b0-9]{2}/'</span>, chr(<span class="hljs-number">8</span>) . <span class="hljs-string">'3'</span>)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// matched</span></pre>
<h4>세 번째, 일반 문자 유형을 지정하는 것이다.</h4>
<table>
<thead>
<tr>
<th style="text-align: center;">문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><code>\d</code></td>
<td>임의의 10진수</td>
</tr>
<tr>
<td style="text-align: center;"><code>\D</code></td>
<td>10진수가 아닌 문자</td>
</tr>
<tr>
<td style="text-align: center;"><code>\h</code></td>
<td>모든 수평 공백 문자 (PHP 5.2.4 이후)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\H</code></td>
<td>수평 공백 문자가 아닌 모든 문자 (PHP 5.2.4 이후)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\s</code></td>
<td>공백 문자</td>
</tr>
<tr>
<td style="text-align: center;"><code>\S</code></td>
<td>공백이 아닌 모든 문자</td>
</tr>
<tr>
<td style="text-align: center;"><code>\v</code></td>
<td>모든 수직 공백 문자 (PHP 5.2.4 이후)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\V</code></td>
<td>수직 공백 문자가 아닌 모든 문자 (PHP 5.2.4 이후)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\w</code></td>
<td>모든 &quot;word&quot; 문자</td>
</tr>
<tr>
<td style="text-align: center;"><code>\W</code></td>
<td>모든 &quot;non-word&quot; 문자</td>
</tr>
</tbody>
</table>
<p>각 이스케이프 시퀀스 조합은 완전한 문자 집합을 두 개의 분리된 집합으로 분할한다. 주어진 문자는 각 집합 중 하나에만 일치한다.</p>
<p>&quot;word&quot; 문자는 임의의 문자 또는 숫자 또는 밑줄 문자(<code>_</code>), 즉 Perl &quot;word&quot;의 일부가 될 수 있는 문자이다. 문자 및 숫자의 정의는 PCRE(Perl Compatible Regular Expressions)의 문자 테이블(PCRE의 &quot;pcre_maketables.c&quot; 소스 참조)에 의해 제어되며 locale 특정 일치가 발생하는 경우 달라질 수 있다. 예를 들어 &quot;fr&quot;(프랑스어) 로켈에서 128보다 큰 일부 문자 코드는 악센트 부호가 있는 문자에 사용되며 이 문자는 <code>\w</code>와 일치한다.</p>
<p>이러한 문자 유형 시퀀스는 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a>의 안과 밖 모두에서 나타날 수 있다. 그것들은 각각 적절한 유형의 한 문자와 일치한다. 현재 일치하는 지점이 제목 문자열의 끝에 있으면 해당 문자가 모두 일치하지 않으므로 모두 일치하지 않는다.</p>
<h4>네 번째, 단순한 특정 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>을 위한 것이다.</h4>
<p><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>은 대상 문자열의 문자를 사용하지 않고 일치하는 특정 지점에서 충족되어야 하는 조건을 지정한다. 보다 복잡한 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>을 위한 서브 패턴의 사용은 아래에 설명되어 있다.</p>
<table>
<thead>
<tr>
<th style="text-align: center;">문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><code>\b</code></td>
<td>단어(word) 경계</td>
</tr>
<tr>
<td style="text-align: center;"><code>\B</code></td>
<td>단어(not a word) 경계가 아님</td>
</tr>
<tr>
<td style="text-align: center;"><code>\A</code></td>
<td>목표 문자열 시작 (다중 행 모드와 무관)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\Z</code></td>
<td>목표 문자열 끝 또는 마지막 줄바꿈 (다중 행 모드와 무관)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\z</code></td>
<td>목표 문자열 끝 (다중 행 모드와 무관)</td>
</tr>
<tr>
<td style="text-align: center;"><code>\G</code></td>
<td>주제어에서 첫 번째로 일치하는 위치</td>
</tr>
</tbody>
</table>
<p>이러한 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>은 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 안에서 사용할 수 없다. (단, &quot;<code>\b</code>&quot;는 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 내에서 백 스페이스 문자의 의미를 가진다).</p>
<p>&quot;word&quot; 경계는 현재 문자와 이전 문자가 모두 <code>\w</code> 또는 <code>\W</code>와 일치하지 않는 대상 문자열에서의 위치이다(즉, 하나의 글자가 <code>\w</code>와 일치하고 다른 글자가 <code>\W</code>와 일치 경우). 또는, 시작 또는 마지막 문자가 각각 <code>\w</code>와 일치하면 문자열의 시작 또는 끝이 경계가 된다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/(testable|string)/'</span>, <span class="hljs-string">'AtestableA'</span>)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/\b(testable|string)\b/'</span>, <span class="hljs-string">'AtestableA'</span>)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// not matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/\b(testable|string)\b/'</span>, <span class="hljs-string">'A testable A'</span>)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/\B(testable|string)\B/'</span>, <span class="hljs-string">'AtestableA'</span>)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// matched</span>

<span class="hljs-keyword">echo</span> ((preg_match(<span class="hljs-string">'/\B(testable|string)\B/'</span>, <span class="hljs-string">'A testable A'</span>)) ? <span class="hljs-string">'matched'</span> : <span class="hljs-string">'not matched'</span>) . <span class="hljs-string">"\n"</span>;
<span class="hljs-comment">// not matched</span></pre>
<p><code>\A</code>, <code>\Z</code> 및 <code>\z</code> <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>은 기존 곡절 부호(^) 및 달러 부호($)와 달리 옵션이 설정 되더라도 대상 문자열의 시작과 끝 부분에서만 일치한다. 이들은 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_MULTILINE</a> 또는 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PCRE_DOLLAR_ENDONLY</a> 옵션의 영향을 받지 않는다. <code>\Z</code>와 <code>\z</code>의 차이점은 <code>\Z</code>는 문자열의 마지막 문자 뿐만 아니라 문자열 끝에 있는 개행 문자 앞도 일치하지만 <code>\z</code>는 문자열 끝에만 일치한다는 것이다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">&lt;&lt;&lt;STR
A testable string E
B testable string F
C testable string G
D testable string H
STR;</span>

preg_match_all(<span class="hljs-string">'/\AB /m'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; Array</span>
<span class="hljs-comment">//  (</span>
<span class="hljs-comment">//  )</span>
<span class="hljs-comment">//)</span>

preg_match_all(<span class="hljs-string">'/^B /m'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; Array</span>
<span class="hljs-comment">//  (</span>
<span class="hljs-comment">//      [0] =&gt; B</span>
<span class="hljs-comment">//  )</span>
<span class="hljs-comment">//)</span>

preg_match_all(<span class="hljs-string">'/H\z/m'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; Array</span>
<span class="hljs-comment">//  (</span>
<span class="hljs-comment">//  )</span>
<span class="hljs-comment">//)</span>

preg_match_all(<span class="hljs-string">'/G$/m'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; Array</span>
<span class="hljs-comment">//  (</span>
<span class="hljs-comment">//      [0] =&gt; G</span>
<span class="hljs-comment">//  )</span>
<span class="hljs-comment">//)</span>

$str .= <span class="hljs-string">"\n"</span>;   <span class="hljs-comment">// \Z 와 \z의 차이를 확인하기 위해 개행문자 추가</span>

preg_match_all(<span class="hljs-string">'/H\z/m'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; Array</span>
<span class="hljs-comment">//  (</span>
<span class="hljs-comment">//  )</span>
<span class="hljs-comment">//)</span>

preg_match_all(<span class="hljs-string">'/H\Z/m'</span>, $str, $matches);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; Array</span>
<span class="hljs-comment">//  (</span>
<span class="hljs-comment">//      [0] =&gt; H</span>
<span class="hljs-comment">//  )</span>
<span class="hljs-comment">//)</span></pre>
<p><code>\G</code> <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">어설션</a>은 현재 일치하는 위치가 <a href="http://php.net/manual/kr/function.preg-match.php">preg_match()</a>의 offset 인수에 지정된 일치 항목의 시작 지점에 있는 경우에만 일치된다. offset 값이 0이 아닌 경우 <code>\A</code>와 다르다(Perl에서의 <code>\G</code>와 다르다).</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
preg_match(<span class="hljs-string">'/\G1234/'</span>, <span class="hljs-string">'test1234'</span>, $matches, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>);
print_r($matches);
<span class="hljs-comment">// offset 위치의 시작이 "t"이므로 일치되지 않음</span>
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//)</span>

preg_match(<span class="hljs-string">'/\G1234/'</span>, <span class="hljs-string">'test1234'</span>, $matches, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);
print_r($matches);
<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; 1234</span>
<span class="hljs-comment">//)</span></pre>
<p><code>\Q</code>와 <code>\E</code>는 패턴에서 regexp 메타 문자를 무시하는데 사용될 수 있다. 예를 들어 <code>\w+\Q.$.\E$</code>는 하나 이상의 단어 문자와 일치하며 리터럴 <code>.$.</code>이 따라 오며 문자열 끝에 고정된다. 간단히 말해 <code>\Q</code>로 시작해서 <code>\E</code>로 끝나는 내부의 글자는 리터럴로 인지한다는 것이다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'asdf abc.$.'</span>;
preg_match(<span class="hljs-string">'/\w+\Q.$.\E$/'</span>, $str, $matches);
print_r($matches);

<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">//     [0] =&gt; abc.$.</span>
<span class="hljs-comment">// )</span>

$str = <span class="hljs-string">'asdf abc.$x'</span>;
preg_match(<span class="hljs-string">'/\w+\Q.$.\E$/'</span>, $str, $matches);
print_r($matches);

<span class="hljs-comment">// Array</span>
<span class="hljs-comment">// (</span>
<span class="hljs-comment">// )</span></pre>
<p><code>\K</code>는 PHP 5.2.4부터 일치 시작을 초기화하는데 사용될 수 있다. 예를 들어, <code>foo\Kbar</code> 패턴은 &quot;foobar&quot;와 일치하지만 &quot;bar&quot;와도 일치한다고 보고한다. <code>\K</code>를 사용하면 캡처된 부분 문자열의 설정을 방해하지 않는다. 예를 들어, 패턴 <code>(foo)\Kbar</code>가 &quot;foobar&quot;와 일치하면 첫 번째 하위 문자열은 여전히 ​​&quot;foo&quot;로 설정된다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = <span class="hljs-string">'foobar'</span>;
preg_match(<span class="hljs-string">'/foobar/'</span>, $str, $matches);
print_r($matches);

<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; foobar</span>
<span class="hljs-comment">//)</span>

preg_match(<span class="hljs-string">'/(foo)bar/'</span>, $str, $matches);
print_r($matches);

<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; foobar</span>
<span class="hljs-comment">//  [1] =&gt; foo</span>
<span class="hljs-comment">//)</span>

preg_match(<span class="hljs-string">'/foo\Kbar/'</span>, $str, $matches);
print_r($matches);

<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; bar</span>
<span class="hljs-comment">//)</span>

preg_match(<span class="hljs-string">'/(foo)\Kbar/'</span>, $str, $matches);
print_r($matches);

<span class="hljs-comment">//Array</span>
<span class="hljs-comment">//(</span>
<span class="hljs-comment">//  [0] =&gt; bar</span>
<span class="hljs-comment">//  [1] =&gt; foo</span>
<span class="hljs-comment">//)</span></pre>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/"/><published>2017-01-09T09:12:18+09:00</published><updated>2017-02-15T10:04:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Meta-characters (메타 문자) 정규식은 선택과 반복을 포함 할 수 있어 강력하다. 이것들은 메타 문자의 사용에 의해 패턴으로 인코딩된다. 메타 문자는 의미를 가지지 않고 대신에 특별한 방식으로 해석된다. 대괄호([]) 안에 있는 것을 제외하고는 패턴의 어디에서나 인식되는 메타 문자와 대괄호 내에서 인식되는 메타 문자의 두 가지가 있다. 대괄호 바깥에 있는 메타 문자는 다음과 같다. 문자 설명 \ 일반적인 이스케이프 문자 ^ 문장(또는 여러 줄 모드의 줄)의 시작을 선언 $ 문장(또는 여러 줄 모드의 줄)의 끝을 선언 . 기본적으로 개행 문자를 제외한 모든 문자와 일치 [ 캐릭터 클래스 정의 시작 ] 캐릭터 클래스 정의 끝 | 선택 분기 시작 ( 서브 패턴의 시작 ) 서브 패턴의 끝 ? 0 또는 1의 한정, greedy 수량화 도구를 lazy 한다 (Repetition 참고) * 0개 이상의 한정 + 1개 이상의 한정 { 최소 / 최대 한정 기호 시작 } 최소 / 최대 한정 기호 끝 대괄호 안에 있는 패턴의 일부를 "캐릭터 클래스"라고 한다. 캐릭터 클래스에서 사용할 수 있는 메타 문자는 다음과 같다. 문자 설명 \ 일반 이스케이프 문자 ^ 캐릭터 클래스를 반전(단, 첫 번째 문자로 입력될 때) - 문자 범위 ] 캐릭터 클래스를 종료 PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) > PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.meta.php">Meta-characters</a> (메타 문자)</h3>
<p>정규식은 <a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">선택</a>과 <a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">반복</a>을 포함 할 수 있어 강력하다. 이것들은 메타 문자의 사용에 의해 패턴으로 인코딩된다. 메타 문자는 의미를 가지지 않고 대신에 특별한 방식으로 해석된다.</p>
<p>대괄호(<code>[]</code>) 안에 있는 것을 제외하고는 패턴의 어디에서나 인식되는 메타 문자와 대괄호 내에서 인식되는 메타 문자의 두 가지가 있다.</p>
<p>대괄호 바깥에 있는 메타 문자는 다음과 같다.</p>
<table>
<thead>
<tr>
<th style="text-align: center;">문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><code>\</code></td>
<td>일반적인 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a> 문자</td>
</tr>
<tr>
<td style="text-align: center;"><code>^</code></td>
<td>문장(또는 여러 줄 모드의 줄)의 시작을 선언</td>
</tr>
<tr>
<td style="text-align: center;"><code>$</code></td>
<td>문장(또는 여러 줄 모드의 줄)의 끝을 선언</td>
</tr>
<tr>
<td style="text-align: center;"><code>.</code></td>
<td>기본적으로 개행 문자를 제외한 모든 문자와 일치</td>
</tr>
<tr>
<td style="text-align: center;"><code>[</code></td>
<td><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 정의 시작</td>
</tr>
<tr>
<td style="text-align: center;"><code>]</code></td>
<td><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 정의 끝</td>
</tr>
<tr>
<td style="text-align: center;"><code>|</code></td>
<td>선택 분기 시작</td>
</tr>
<tr>
<td style="text-align: center;"><code>(</code></td>
<td>서브 패턴의 시작</td>
</tr>
<tr>
<td style="text-align: center;"><code>)</code></td>
<td>서브 패턴의 끝</td>
</tr>
<tr>
<td style="text-align: center;"><code>?</code></td>
<td>0 또는 1의 한정, greedy 수량화 도구를 lazy 한다 (<a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">Repetition</a> 참고)</td>
</tr>
<tr>
<td style="text-align: center;"><code>*</code></td>
<td>0개 이상의 한정</td>
</tr>
<tr>
<td style="text-align: center;"><code>+</code></td>
<td>1개 이상의 한정</td>
</tr>
<tr>
<td style="text-align: center;"><code>{</code></td>
<td>최소 / 최대 한정 기호 시작</td>
</tr>
<tr>
<td style="text-align: center;"><code>}</code></td>
<td>최소 / 최대 한정 기호 끝</td>
</tr>
</tbody>
</table>
<p>대괄호 안에 있는 패턴의 일부를 &quot;<a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a>&quot;라고 한다. <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a>에서 사용할 수 있는 메타 문자는 다음과 같다.</p>
<table>
<thead>
<tr>
<th style="text-align: center;">문자</th>
<th>설명</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align: center;"><code>\</code></td>
<td>일반 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a> 문자</td>
</tr>
<tr>
<td style="text-align: center;"><code>^</code></td>
<td><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a>를 반전(단, 첫 번째 문자로 입력될 때)</td>
</tr>
<tr>
<td style="text-align: center;"><code>-</code></td>
<td>문자 범위</td>
</tr>
<tr>
<td style="text-align: center;"><code>]</code></td>
<td><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a>를 종료</td>
</tr>
</tbody>
</table>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/08/php-regex-delimiters/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/"/><published>2017-01-08T19:21:01+09:00</published><updated>2017-01-08T19:21:01+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Delimiters (구분 기호) PCRE를 사용할 때 정규식 패턴은 Delimiters(구분 기호)로 묶여 있어야 한다. 구분 기호는 영숫자, 백 슬래시(\), 공백이 아닌 문자여야 한다. 자주 사용되는 구분 기호는 슬래시(/), 해쉬 기호(#) 및 물결표(~)다. /foo bar/ #^[^0-9]$# +php+ %[a-zA-Z0-9_-]% 구분 기호가 패턴 내부에서 일치해야 하는 경우 백 슬래시(\)를 사용하여 이스케이프 해야 한다. 구분 기호가 패턴 내부에 자주 나타나면 가독성을 높이기 위해 다른 구분 기호를 선택하는 것이 좋다. /http:\/\// #http://# preg_quote() 함수는 패턴을 삽입하기 위해 문자열을 이스케이프하기 위해 사용될 수 있으며 선택적인 두 번째 매개 변수를 사용하여 이스케이프 할 구분 기호를 지정할 수 있다. 앞서 언급 한 구분 기호 이외에 중괄호({}) 구분 기호는 각각 시작({) 및 끝(}) 구분 기호로 사용될 수 있다. {this is a pattern} 끝 분리 문자 뒤에 패턴 변경자를 추가 할 수 있다(자세한 내용은 PHP 정규표현식 패턴에 존재하는 변경자를 참고). 다음은 대소문자를 구분하지 않는 일치의 예이다. #[a-z]#i PHP 정규식(PCRE)의 모든 것 - 프롤로그 > PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그]]></summary><content type="html"><![CDATA[<h3><a href="http://php.net/manual/kr/regexp.reference.delimiters.php">Delimiters</a> (구분 기호)</h3>
<p>PCRE를 사용할 때 정규식 패턴은 Delimiters(구분 기호)로 묶여 있어야 한다. 구분 기호는 영숫자, 백 슬래시(<code>\</code>), 공백이 아닌 문자여야 한다. 자주 사용되는 구분 기호는 슬래시(<code>/</code>), 해쉬 기호(<code>#</code>) 및 물결표(<code>~</code>)다.</p>
<pre><code>/foo bar/
#^[^0-9]$#
+php+
%[a-zA-Z0-9_-]%</code></pre>
<p>구분 기호가 패턴 내부에서 일치해야 하는 경우 백 슬래시(<code>\</code>)를 사용하여 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a> 해야 한다. 구분 기호가 패턴 내부에 자주 나타나면 가독성을 높이기 위해 다른 구분 기호를 선택하는 것이 좋다.</p>
<pre><code>/http:\/\//
#http://#</code></pre>
<p><a href="http://php.net/manual/kr/function.preg-quote.php">preg_quote()</a> 함수는 패턴을 삽입하기 위해 문자열을 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a>하기 위해 사용될 수 있으며 선택적인 두 번째 매개 변수를 사용하여 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a> 할 구분 기호를 지정할 수 있다.
앞서 언급 한 구분 기호 이외에 중괄호(<code>{}</code>) 구분 기호는 각각 시작(<code>{</code>) 및 끝(<code>}</code>) 구분 기호로 사용될 수 있다.</p>
<pre><code>{this is a pattern}</code></pre>
<p>끝 분리 문자 뒤에 패턴 변경자를 추가 할 수 있다(자세한 내용은 <a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PHP 정규표현식 패턴에 존재하는 변경자</a>를 참고). 다음은 대소문자를 구분하지 않는 일치의 예이다.</p>
<pre><code>#[a-z]#i</code></pre>
<hr />
<ul>
<li><a href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/">PHP 정규식(PCRE)의 모든 것 - 프롤로그</a></li>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/07/php-regex-prolog/</id><title type="html">PHP 정규식(PCRE)의 모든 것 - 프롤로그</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/07/php-regex-prolog/"/><published>2017-01-07T11:22:11+09:00</published><updated>2017-01-07T11:22:11+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[정규 표현식(正規表現式, 영어: regular expression, 간단히 regexp 또는 regex) 또는 정규식(正規式)은 특정한 규칙을 가진 문자열의 집합을 표현하는 데 사용하는 형식 언어이다. - 위키백과 정규식은 프로그래밍에서 필수는 아니지만 알아두면 아주 유용하게 사용하게 된다. 그런데 이 정규식이 그리 만만하지만은 않다. 기본적인 용법만 활용 한다면 크게 어렵지는 않지만 복잡한 패턴을 적용하려고 하면 상당히 어려워진다. 이 글은 PHP 메뉴얼에 설명된 PCRE(Perl Compatible Regular Expressions)의 내용을 번역한 내용(의역과 오역이 있을 수 있다)에 부분적인 설명을 추가해서 이해를 돕고자 정리한 내용이다. 자주 사용하지 않는 속성들 중에 유용한 부분들이 많이 있으니 참고로 봐두면 도움이 될 것이다. > PHP 정규식(PCRE)의 모든 것 - 프롤로그 PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters) PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters) PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences) PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties) PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors) PHP 정규식(PCRE)의 모든 것 - 마침표(Dot) PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes) PHP 정규식(PCRE)의 모든 것 - 선택(Alternation) PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting) PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 반복(Repetition) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references) PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions) PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns) PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns) PHP 정규식(PCRE)의 모든 것 - 주석(Comments) PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns) PHP 정규식(PCRE)의 모든 것 - 에필로그 관련 링크 위키백과 - 정규_표현식 나무위키 - 정규표현식 PHP PCRE regex syntax PHP 정규표현식 패턴에 존재하는 변경자]]></summary><content type="html"><![CDATA[<blockquote>
<p>정규 표현식(正規表現式, 영어: regular expression, 간단히 regexp 또는 regex) 또는 정규식(正規式)은 특정한 규칙을 가진 문자열의 집합을 표현하는 데 사용하는 형식 언어이다. - <a href="https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D">위키백과</a></p>
</blockquote>
<p>정규식은 프로그래밍에서 필수는 아니지만 알아두면 아주 유용하게 사용하게 된다. 그런데 이 정규식이 그리 만만하지만은 않다. 기본적인 용법만 활용 한다면 크게 어렵지는 않지만 복잡한 패턴을 적용하려고 하면 상당히 어려워진다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/01/PHP_Logo.png" alt="php" width="722" height="350" /></p>
<p>이 글은 <a href="http://php.net/manual/kr/reference.pcre.pattern.syntax.php">PHP 메뉴얼</a>에 설명된 PCRE(Perl Compatible Regular Expressions)의 내용을 번역한 내용(의역과 오역이 있을 수 있다)에 부분적인 설명을 추가해서 이해를 돕고자 정리한 내용이다.</p>
<p>자주 사용하지 않는 속성들 중에 유용한 부분들이 많이 있으니 참고로 봐두면 도움이 될 것이다.</p>
<hr />
<ul>
<li>> <strong>PHP 정규식(PCRE)의 모든 것 - 프롤로그</strong></li>
<li><a href="https://blog.asamaru.net/2017/01/08/php-regex-delimiters/">PHP 정규식(PCRE)의 모든 것 - 구분기호(Delimiters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/09/php-regex-meta-characters/">PHP 정규식(PCRE)의 모든 것 - 메타문자(Meta-characters)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">PHP 정규식(PCRE)의 모든 것 - 이스케이프 시퀀스(Escape Sequences)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/11/php-regex-unicode-character-properties/">PHP 정규식(PCRE)의 모든 것 - 유니코드 문자 속성(Unicode character properties)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/12/php-regex-anchors/">PHP 정규식(PCRE)의 모든 것 - 앵커(Anchors)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/13/php-regex-dot/">PHP 정규식(PCRE)의 모든 것 - 마침표(Dot)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">PHP 정규식(PCRE)의 모든 것 - 캐릭터 클래스(Character classes)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/15/php-regex-alternation/">PHP 정규식(PCRE)의 모든 것 - 선택(Alternation)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">PHP 정규식(PCRE)의 모든 것 - 내부 옵션 설정(Internal option setting)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/18/php-regex-repetition/">PHP 정규식(PCRE)의 모든 것 - 반복(Repetition)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/20/php-regex-assertions/">PHP 정규식(PCRE)의 모든 것 - 어설션(Assertions)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/21/php-regex-once-​only-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 일회성 서브 패턴(Once-​only subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/22/php-regex-conditional-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 조건부 서브 패턴(Conditional subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/23/php-regex-comments/">PHP 정규식(PCRE)의 모든 것 - 주석(Comments)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/24/php-regex-recursive-patterns/">PHP 정규식(PCRE)의 모든 것 - 재귀 패턴(Recursive patterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/25/php-regex-epilogue/">PHP 정규식(PCRE)의 모든 것 - 에필로그</a></li>
</ul>
<h3>관련 링크</h3>
<ul>
<li><a href="https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D">위키백과 - 정규_표현식</a></li>
<li><a href="https://namu.wiki/w/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D">나무위키 - 정규표현식</a></li>
<li><a href="http://php.net/manual/kr/reference.pcre.pattern.syntax.php">PHP PCRE regex syntax</a></li>
<li><a href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/">PHP 정규표현식 패턴에 존재하는 변경자</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/04/swift-3-access-controls/</id><title type="html">Swift 3 접근 한정자</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/04/swift-3-access-controls/"/><published>2017-01-04T13:55:36+09:00</published><updated>2017-01-04T13:55:36+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><category term="swift" label="swift" /><summary><![CDATA[Swift 3 메서드에 대한 접근 한정자(엑세스 레벨)가 5가지(open, public, private, fileprivate, internal) 존재한다. 다른 언어들에 비해 많은 편이고 익숙하지 않은 개념으로 조금 복잡해 보일 수 있다. 다만, 프레임워크(모듈)를 만드는 경우가 아니라면 사용하지 않아도 되는 것들도 있다. 각각의 접근 한정자에 대해 간략히 알아보자(가장 개방된 것부터 가장 제한적인 순서로). open 가장 개방된 접근 한정자로써 소속 모듈 또는 소속 모듈을 import하는 모든 모듈에서 class와 class 멤버에 접근할 수 있으며 open class를 상속 받아 sub class를 생성하거나 메서드를 override 할 수 있다. 간단히 이야기 하자면 다른 언어에서의 public과 유사하다. public open 과 동일한 접근을 허용하지만 sub class 생성과 override에 제한이 있다. 소속 모듈 내에서는 sub class 생성과 sub class 내에서의 override가 허용된다. 이 제한은 프레임워크(모듈)을 제작하는 경우 유용하다. 프레임워크 내에서는 자유롭게 상속 받지만 외부에서는 상속을 받을 수 없기 때문에 확장을 제한할 수 있다. internal 접근 한정자가 지정되지 않은 경우 기본적으로 사용되는 접근 수준이다. 소속 모듈의 모든 소스 파일에서 사용할 수 있지만 모듈 외부에서는 접근 할 수 없다. fileprivate 소속 소스 파일 내에서만 접근이 가능하다. private 현재 소스를 둘러싸는 선언으로 내에서만 접근 가능하다. Swift 3에서는 위에서 열거한 5가지 레벨로 접근을 제한하도록 되어 있다. 단, Objective-C 클래스와 메소드는 이제 open 상태로 가져온다. 여기까지만 보면 다른 언어들에 비해 너무 복잡하다는 생각이 들 수 있다. 하지만 어플리케이션은 하나의 모듈과 동일하게 생각하면 되므로 어플리케이션 내에서 작성된 코드는 기본적으로 모든 어플리케이션 소스 내에서 접근 가능하다. 따라서 프레임워크(모듈)를 제작하는 것이 아니라면 fileprivate 과 private 를 이용해서 접근을 제한하는 경우만 고려하면 된다. fileprivate 및 private 사용 fileprivate 및 private 을 사용하는 예시를 살펴보자. 소스 파일 외부에서 액세스 하지 않으려는 속성이 있는 ViewController를 작성한다고 가정하다. Swift 2에서 private 으로 선언할 것이다. class RootViewController: UIViewController { private var someFlag = false } 불행하게도, Swift 3을 사용하면 같은 소스 파일에서 class를 확장하면서 someFlag에 접근하려고 하면 오류가 발생한다. extension RootViewController: MyGreatDelegate { func doSomething { if someFlag { // do the thing } } } // Use of unresolved identifier 'someFlag' 위에서 설명한 것과 같이 Swift 3에서 private 은 someFlag를 둘러싼 class의 선언 내로 제한되기 때문이다. 따라서 이런 경우에는 아래와 같이 fileprivate 를 사용해야 한다. class RootViewController: UIViewController { fileprivate var someFlag = false } 아래는 class를 확장하면서 확장 외부에서 접근하지 못하는 메서드를 정의하는 예시다. extension RootViewController: UITextFieldDelegate { func textFieldShouldReturn(_ textField: UITextField) -> Bool { handle(text: textField.text) textField.resignFirstResponder() return true } // Not accessible outside of this extension private func handle(text: String?) { // do something } } 기타 힌트 및 팁 Getters and Setters Setter에게 Getter 보다 낮은 접근 제한자를 지정하여 쓰기 접근을 제한 할 수 있다. class MyDataSource { // property is read-only outside of this class definition private(set) var someFlag = false // ... } 이 예시에서도 위에서 언급했던 private 상황은 동일하다. 확장 등의 이유로 소스 파일 내에서 접근이 필요하다면 fileprivate 를 사용하면 된다. fileprivate(set) var someFlag = false 단위 테스트 대상 단위 테스트 대상은 자체 모듈이므로 기본적으로 internal 인 Application 모듈의 모든 메서드 또는 변수에 접근할 수 없다. 이런 경우는 @testable 속성을 사용해서 import 한다. import XCTest @testable import MyDataSource class MyDataSourceTests: XCTestCase { // func testSomething() {...} } 관련링크 Swift 3 Access Controls 새로운 접근한정자 open, fileprivate에 대해 SE-0025 Scoped Access Level SE-0117 Allow distinguishing between public access and public overridability]]></summary><content type="html"><![CDATA[<p>Swift 3 메서드에 대한 접근 한정자(엑세스 레벨)가 5가지(open, public, private, fileprivate, internal) 존재한다. 다른 언어들에 비해 많은 편이고 익숙하지 않은 개념으로 조금 복잡해 보일 수 있다. 다만, 프레임워크(모듈)를 만드는 경우가 아니라면 사용하지 않아도 되는 것들도 있다.</p>
<p>각각의 접근 한정자에 대해 간략히 알아보자(가장 개방된 것부터 가장 제한적인 순서로).</p>
<h3>open</h3>
<p>가장 개방된 접근 한정자로써 소속 모듈 또는 소속 모듈을 import하는 모든 모듈에서 class와 class 멤버에 접근할 수 있으며 open class를 상속 받아 sub class를 생성하거나 메서드를 override 할 수 있다. 간단히 이야기 하자면 다른 언어에서의 public과 유사하다.</p>
<h3>public</h3>
<p><strong>open</strong> 과 동일한 접근을 허용하지만 sub class 생성과 override에 제한이 있다. 소속 모듈 내에서는 sub class 생성과 sub class 내에서의 override가 허용된다. 이 제한은 프레임워크(모듈)을 제작하는 경우 유용하다. 프레임워크 내에서는 자유롭게 상속 받지만 외부에서는 상속을 받을 수 없기 때문에 확장을 제한할 수 있다.</p>
<h3>internal</h3>
<p>접근 한정자가 지정되지 않은 경우 기본적으로 사용되는 접근 수준이다. 소속 모듈의 모든 소스 파일에서 사용할 수 있지만 모듈 외부에서는 접근 할 수 없다.</p>
<h3>fileprivate</h3>
<p>소속 소스 파일 내에서만 접근이 가능하다.</p>
<h3>private</h3>
<p>현재 소스를 둘러싸는 선언으로 내에서만 접근 가능하다.</p>
<p>Swift 3에서는 위에서 열거한 5가지 레벨로 접근을 제한하도록 되어 있다. 단, Objective-C 클래스와 메소드는 이제 <strong>open</strong> 상태로 가져온다.</p>
<hr />
<p>여기까지만 보면 다른 언어들에 비해 너무 복잡하다는 생각이 들 수 있다. 하지만 어플리케이션은 하나의 모듈과 동일하게 생각하면 되므로 어플리케이션 내에서 작성된 코드는 기본적으로 모든 어플리케이션 소스 내에서 접근 가능하다. 따라서 프레임워크(모듈)를 제작하는 것이 아니라면 <strong>fileprivate</strong> 과 <strong>private</strong> 를 이용해서 접근을 제한하는 경우만 고려하면 된다.</p>
<h3>fileprivate 및 private 사용</h3>
<p><strong>fileprivate</strong> 및 <strong>private</strong> 을 사용하는 예시를 살펴보자. 소스 파일 외부에서 액세스 하지 않으려는 속성이 있는 ViewController를 작성한다고 가정하다. Swift 2에서 <strong>private</strong> 으로 선언할 것이다.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RootViewController</span>: <span class="hljs-title">UIViewController</span> </span>{
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> someFlag = <span class="hljs-literal">false</span>
}</pre>
<p>불행하게도, Swift 3을 사용하면 같은 소스 파일에서 class를 확장하면서 <code>someFlag</code>에 접근하려고 하면 오류가 발생한다.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">RootViewController</span>: <span class="hljs-title">MyGreatDelegate</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">doSomething</span> </span>{
    <span class="hljs-keyword">if</span> someFlag {
      <span class="hljs-comment">// do the thing</span>
    }
  }
}

<span class="hljs-comment">// Use of unresolved identifier 'someFlag'</span></pre>
<p>위에서 설명한 것과 같이 Swift 3에서 <strong>private</strong> 은 <code>someFlag</code>를 둘러싼 class의 선언 내로 제한되기 때문이다. 따라서 이런 경우에는 아래와 같이 <strong>fileprivate</strong> 를 사용해야 한다.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RootViewController</span>: <span class="hljs-title">UIViewController</span> </span>{
  <span class="hljs-keyword">fileprivate</span> <span class="hljs-keyword">var</span> someFlag = <span class="hljs-literal">false</span>
}</pre>
<p>아래는 class를 확장하면서 확장 외부에서 접근하지 못하는 메서드를 정의하는 예시다.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">RootViewController</span>: <span class="hljs-title">UITextFieldDelegate</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">textFieldShouldReturn</span><span class="hljs-params">(<span class="hljs-number">_</span> textField: UITextField)</span></span> -&gt; <span class="hljs-type">Bool</span> {
    handle(text: textField.text)
    textField.resignFirstResponder()
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
  }

  <span class="hljs-comment">// Not accessible outside of this extension</span>
  <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handle</span><span class="hljs-params">(text: String?)</span></span> {
    <span class="hljs-comment">// do something</span>
  }
}</pre>
<h3>기타 힌트 및 팁</h3>
<h4>Getters and Setters</h4>
<p>Setter에게 Getter 보다 낮은 접근 제한자를 지정하여 쓰기 접근을 제한 할 수 있다.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDataSource</span> </span>{
  <span class="hljs-comment">// property is read-only outside of this class definition</span>
  <span class="hljs-keyword">private</span>(<span class="hljs-keyword">set</span>) <span class="hljs-keyword">var</span> someFlag = <span class="hljs-literal">false</span>

  <span class="hljs-comment">// ...</span>
}</pre>
<p>이 예시에서도 위에서 언급했던 <strong>private</strong> 상황은 동일하다. 확장 등의 이유로 소스 파일 내에서 접근이 필요하다면 <strong>fileprivate</strong> 를 사용하면 된다.</p>
<pre class="hljs swift"><span class="hljs-keyword">fileprivate</span>(<span class="hljs-keyword">set</span>) <span class="hljs-keyword">var</span> someFlag = <span class="hljs-literal">false</span></pre>
<h4>단위 테스트 대상</h4>
<p>단위 테스트 대상은 자체 모듈이므로 기본적으로 <strong>internal</strong> 인 Application 모듈의 모든 메서드 또는 변수에 접근할 수 없다. 이런 경우는 <code>@testable</code> 속성을 사용해서 import 한다.</p>
<pre class="hljs swift"><span class="hljs-keyword">import</span> XCTest
<span class="hljs-meta">@testable</span> <span class="hljs-keyword">import</span> MyDataSource

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyDataSourceTests</span>: <span class="hljs-title">XCTestCase</span> </span>{
  <span class="hljs-comment">// func testSomething() {...}</span>
}</pre>
<h3>관련링크</h3>
<ul>
<li><a href="http://useyourloaf.com/blog/swift-3-access-controls/">Swift 3 Access Controls</a></li>
<li><a href="https://swifter.kr/2016/10/09/%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%A0%91%EA%B7%BC%ED%95%9C%EC%A0%95%EC%9E%90-open-fileprivate%EC%97%90-%EB%8C%80%ED%95%B4/">새로운 접근한정자 open, fileprivate에 대해</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0025-scoped-access-level.md">SE-0025 Scoped Access Level</a></li>
<li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0117-non-public-subclassable-by-default.md">SE-0117 Allow distinguishing between public access and public overridability</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/</id><title type="html">PHP(PCRE) 정규표현식 패턴에 존재하는 변경자</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/04/php-pcre-pattern-modifiers/"/><published>2017-01-04T10:46:22+09:00</published><updated>2017-01-04T10:46:22+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP에서 PCRE(Perl Compatible Regular Expressions) 정규식을 사용하다 보면 패턴 변경자를 자주 이용하게 되는데 이 부분이 항상 헛갈려서 관련 내용을 남겨 둔다. 그리고 유사하지만 서브 패턴 내에서 사용할 수 있는 Internal option setting도 있으니 참고하면 도움이 된다. 주로 사용하게 되는 변경자 몇가지를 간단히 소개하자면 다음과 같다. i : 대소문자 구분을 하지 않음 m : 검사 대상이 여러줄로 이루어져 있을 경우 "\n" 문자를 기준으로 분리하여 각각의 줄로 패턴을 검사한다(^ 또는 $ 패턴을 사용하지 않으면 아무런 동작이 없다). s : 점(.) 메타문자가 줄바꿈을 포함하도록 한다. 여러줄에 걸쳐서 패턴을 검사하고자 할 경우 사용한다. 위 변경자 중 m, s에 대한 적용 결과를 정리하면 아래와 같다. /pattern/ . : \n을 제외한 모든 문자에 일치 ^ : 문자열의 처음에 일치 $ : 문자열의 제일 끝, 또는 제일 끝에 있는 newline 직전에 일치 /pattern/s : single line - 문자열을 하나의 긴 라인으로 취급 . : \n을 포함하는 모든 문자에 일치 ^ : 문자열의 처음에 일치 $ : 문자열의 제일 끝, 또는 제일 끝에 있는 newline 직전에 일치 /pattern/m : multi-line - 문자열을 여러 라인들의 집합으로 취급 . : \n을 제외한 모든 문자에 일치 ^ : 문자열 안의 각 라인의 시작에 일치 $ : 문자열 안의 각 라인의 끝에 일치 /pattern/ms : 문자열을 하나의 긴 라인으로 취급하되, 라인들을 구분 . : \n을 포함하는 모든 문자에 일치 ^ : 문자열 안의 각 라인의 시작에 일치 $ : 문자열 안의 각 라인의 끝에 일치 아래는 PHP 매뉴얼 > 패턴 변경자 내용을 옮겨온 것이니 참고하기 바란다. 아래 목록은 현재 존재하는 PCRE 변경자입니다. 괄호 안의 이름은 각 변경자에 대한 PCRE 내부의 이름입니다. 공백과 줄바꿈은 변경자에서 무시되며, 다른 문자는 오류를 발생합니다. i (PCRE_CASELESS) 이 변경자를 지정하면, 패턴의 문자는 대문자와 소문자를 구별하지 않습니다. m (PCRE_MULTILINE) 기본적으로, PCRE는 주어진 문자열을 하나의 "줄"로 취급합니다. (실제로 몇개의 라인을 가지더라도) "줄 시작" 메타문자(^)는 문자열의 처음만을 인식하며, "줄 끝" 메타문자($)는 문자열의 끝이나 (D 변경자가 지정되지 않는 한) 마지막 뉴라인의 직전만을 인식합니다. 이는 펄과 같습니다. 이 변경자를 지정하면, "줄 시작"과 "줄 끝"은 주어진 문자열의 모든 뉴라인 직후와 직전을 인식합니다. respectively, as well as at the very start and end. 이는 펄의 /m 변경자와 동일합니다. 주어진 문자열에 "\n" 문자가 존재하지 않거나 ^나 $ 패턴이 일어나지 않으면 이 변경자는 아무런 효과가 없습니다. s (PCRE_DOTALL) 이 변경자가 지정되면, 패턴의 점 메타문자는 뉴라인을 포함하는 모든 문자를 인식합니다. 지정하지 않으면, 뉴라인은 제외됩니다. 이 변경자는 펄의 /s 변경자와 동일합니다. [^a]와 같은 부정클래스는 이 변경자에 관계 없이 항상 뉴라인 문자를 포함합니다. x (PCRE_EXTENDED) 이 변경자가 지정되면, 공백 문자는 이스케이프 되거나 캐릭터 클래스 안에 있을 경우를 제외하고, 완전히 무시합니다. 캐릭터 클래스 밖에서 이스케이프 되지 않은 # 사이와 뉴라인 문자 다음의 문자도 무시합니다. 이는 펄의 /x 변경자와 같고, 복잡한 패턴 안에 코멘트를 사용할 수 있게 합니다. 그러나 이는 데이터 문자에만 해당하는 점에 주의하십시오. 공백 문자는 패턴의 특별한 문자 시퀀스 안에는 존재할 수 없습니다. 예를 들면, 조건 서브 패턴을 나타내는 (?( 시퀀스에는 나와서는 안됩니다. e (PCRE_REPLACE_EVAL) 이 변경자를 지정하면, preg_replace()는 변경할 문자열을 PHP 코드로 처리하고, 그 결과를 검색된 문자열의 이용하여 일반적인 치환을 합니다. 작은 따옴표, 큰 따옴표, 백슬래시와 NULL 문자는 백슬래시로 이스케이프됩니다. preg_replace()만 이 변경자를 사용합니다; 다른 PCRE 함수는 무시합니다. Note: 이 변경자는 PHP 3에서는 사용할 수 없습니다. A (PCRE_ANCHORED) 이 변경자를 지정하면, 패턴을 강제적으로 "고정"합니다. 이는 ("주어진 문자열"에서) 검색된 문자열의 시작에만 일치하도록 강제합니다. 패턴 자체에서 특정한 구조를 가지게 하는, 펄에서는 유일한 방법으로 같은 효과를 얻을 수 있습니다. D (PCRE_DOLLAR_ENDONLY) 이 변경자가 설정되면, 패턴의 달러 부호($) 메타문자는 주어진 문자열의 마지막에만 대응합니다. 이 변경자 없이는, 달러는 마지막 문자가 뉴라인일 경우에는 바로 직전의 문자에도 매칭합니다. (마지막이 아닌 뉴라인은 제외합니다) 이 변경자는 m 변경자가 지정되었을때는 무시됩니다. 펄에는 이 변경자가 존재하지 않습니다. S 패턴이 여러번 이용되면, 매칭에 걸리는 시간을 절약하기 위해서 분석에 더 많은 시간을 들일 가치가 있습니다. 이 변경자를 지정하면, 추가 분석을 행합니다. 현 시점에서, 패턴의 분석은 하나의 고정된 시작 문자를 가지지 않는 비고정 패턴에만 유용합니다. U (PCRE_UNGREEDY) 이 변경자는 수량 지시의 "greediness"를 뒤집습니다. 그리하여 기본값으로 not greedy하게 합니다. 하지만 "?"가 붙으면 greedy하게 됩니다. 이는 펄과 호환되지 않습니다. 패턴 안에서 변경자 설정으로 (?U)처럼 지정하거나, 수량지시어 뒤의 물음표로 지정할 수 있습니다. (예. .*?) X (PCRE_EXTRA) 이 변경자는 펄과 호환되지 않는 PCRE의 추가 기능을 사용하게 합니다. 패턴의 문자와 결합된 백슬래시가 특별한 의미를 지니지 않을 경우에 에러를 발생시켜서, 차후에 추가 기능을 위해 예약해 둡니다. 기본적으로 펄은, 문자와 결합된 백슬래시가 특별한 의미를 지니지 않을 경우에는 글자로 취급합니다. 이 변경자는 다른 기능을 제어하지 않습니다. J (PCRE_INFO_JCHANGED) 내부 옵션 (?J) 설정은 영역의 PCRE_DUPNAMES 옵션을 변경합니다. 서브패턴에 동일한 이름을 허용합니다. u (PCRE_UTF8) 이 변경자는 펄과 호환되지 않는 PCRE의 추가 기능을 사용하게 합니다. 패턴 문자열을 UTF-8으로 취급합니다. 유닉스에서는 PHP 4.1.0부터, win32에서는 PHP 4.2.3부터 사용할 수 있습니다. PHP 4.3.5부터 패턴의 UTF-8 유효성이 검사됩니다.]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/">PHP</a>에서 PCRE(Perl Compatible Regular Expressions) 정규식을 사용하다 보면 패턴 변경자를 자주 이용하게 되는데 이 부분이 항상 헛갈려서 관련 내용을 남겨 둔다. 그리고 유사하지만 서브 패턴 내에서 사용할 수 있는 <a href="https://blog.asamaru.net/2017/01/16/php-regex-internal-option-setting/">Internal option setting</a>도 있으니 참고하면 도움이 된다.</p>
<p>주로 사용하게 되는 변경자 몇가지를 간단히 소개하자면 다음과 같다.</p>
<ul>
<li><strong>i</strong> : 대소문자 구분을 하지 않음</li>
<li><strong>m</strong> : 검사 대상이 여러줄로 이루어져 있을 경우 &quot;\n&quot; 문자를 기준으로 분리하여 각각의 줄로 패턴을 검사한다(^ 또는 $ 패턴을 사용하지 않으면 아무런 동작이 없다).</li>
<li><strong>s</strong> : 점(.) 메타문자가 줄바꿈을 포함하도록 한다. 여러줄에 걸쳐서 패턴을 검사하고자 할 경우 사용한다.</li>
</ul>
<p>위 변경자 중 <code>m</code>, <code>s</code>에 대한 적용 결과를 정리하면 아래와 같다.</p>
<ul>
<li><code>/pattern/</code>
<ul>
<li><code>.</code> : <code>\n</code>을 제외한 모든 문자에 일치</li>
<li><code>^</code> : 문자열의 처음에 일치</li>
<li><code>$</code> : 문자열의 제일 끝, 또는 제일 끝에 있는 newline 직전에 일치</li>
</ul></li>
<li><code>/pattern/s</code> : single line - 문자열을 하나의 긴 라인으로 취급
<ul>
<li><code>.</code> : <code>\n</code>을 포함하는 모든 문자에 일치</li>
<li><code>^</code> : 문자열의 처음에 일치</li>
<li><code>$</code> : 문자열의 제일 끝, 또는 제일 끝에 있는 newline 직전에 일치</li>
</ul></li>
<li><code>/pattern/m</code> : multi-line - 문자열을 여러 라인들의 집합으로 취급
<ul>
<li><code>.</code> : <code>\n</code>을 제외한 모든 문자에 일치</li>
<li><code>^</code> : 문자열 안의 각 라인의 시작에 일치</li>
<li><code>$</code> : 문자열 안의 각 라인의 끝에 일치</li>
</ul></li>
<li><code>/pattern/ms</code> : 문자열을 하나의 긴 라인으로 취급하되, 라인들을 구분
<ul>
<li><code>.</code> : <code>\n</code>을 포함하는 모든 문자에 일치</li>
<li><code>^</code> : 문자열 안의 각 라인의 시작에 일치</li>
<li><code>$</code> : 문자열 안의 각 라인의 끝에 일치</li>
</ul></li>
</ul>
<p>아래는 <a href="http://php.net/manual/kr/reference.pcre.pattern.modifiers.php">PHP 매뉴얼 &gt; 패턴 변경자</a> 내용을 옮겨온 것이니 참고하기 바란다.</p>
<hr />
<p>아래 목록은 현재 존재하는 PCRE 변경자입니다. 괄호 안의 이름은 각 변경자에 대한 PCRE 내부의 이름입니다. 공백과 줄바꿈은 변경자에서 무시되며, 다른 문자는 오류를 발생합니다.</p>
<h3><strong>i</strong> (PCRE_CASELESS)</h3>
<p>이 변경자를 지정하면, 패턴의 문자는 대문자와 소문자를 구별하지 않습니다.</p>
<h3><strong>m</strong> (PCRE_MULTILINE)</h3>
<p>기본적으로, PCRE는 주어진 문자열을 하나의 &quot;줄&quot;로 취급합니다. (실제로 몇개의 라인을 가지더라도) &quot;줄 시작&quot; 메타문자(^)는 문자열의 처음만을 인식하며, &quot;줄 끝&quot; 메타문자($)는 문자열의 끝이나 (D 변경자가 지정되지 않는 한) 마지막 뉴라인의 직전만을 인식합니다. 이는 펄과 같습니다. 이 변경자를 지정하면, &quot;줄 시작&quot;과 &quot;줄 끝&quot;은 주어진 문자열의 모든 뉴라인 직후와 직전을 인식합니다. respectively, as well as at the very start and end. 이는 펄의 /m 변경자와 동일합니다. 주어진 문자열에 &quot;\n&quot; 문자가 존재하지 않거나 ^나 $ 패턴이 일어나지 않으면 이 변경자는 아무런 효과가 없습니다.</p>
<h3><strong>s</strong> (PCRE_DOTALL)</h3>
<p>이 변경자가 지정되면, 패턴의 점 메타문자는 뉴라인을 포함하는 모든 문자를 인식합니다. 지정하지 않으면, 뉴라인은 제외됩니다. 이 변경자는 펄의 /s 변경자와 동일합니다. [^a]와 같은 부정클래스는 이 변경자에 관계 없이 항상 뉴라인 문자를 포함합니다.</p>
<h3><strong>x</strong> (PCRE_EXTENDED)</h3>
<p>이 변경자가 지정되면, 공백 문자는 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a> 되거나 <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 안에 있을 경우를 제외하고, 완전히 무시합니다. <a href="https://blog.asamaru.net/2017/01/14/php-regex-character-classes/">캐릭터 클래스</a> 밖에서 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a> 되지 않은 # 사이와 뉴라인 문자 다음의 문자도 무시합니다. 이는 펄의 /x 변경자와 같고, 복잡한 패턴 안에 코멘트를 사용할 수 있게 합니다. 그러나 이는 데이터 문자에만 해당하는 점에 주의하십시오. 공백 문자는 패턴의 특별한 문자 시퀀스 안에는 존재할 수 없습니다. 예를 들면, 조건 서브 패턴을 나타내는 (?( 시퀀스에는 나와서는 안됩니다.</p>
<h3><strong>e</strong> (PCRE_REPLACE_EVAL)</h3>
<p>이 변경자를 지정하면, preg_replace()는 변경할 문자열을 PHP 코드로 처리하고, 그 결과를 검색된 문자열의 이용하여 일반적인 치환을 합니다. 작은 따옴표, 큰 따옴표, 백슬래시와 NULL 문자는 백슬래시로 <a href="https://blog.asamaru.net/2017/01/10/php-regex-escape-sequences/">이스케이프</a>됩니다.
preg_replace()만 이 변경자를 사용합니다; 다른 PCRE 함수는 무시합니다.</p>
<blockquote>
<p>Note: 이 변경자는 PHP 3에서는 사용할 수 없습니다.</p>
</blockquote>
<h3><strong>A</strong> (PCRE_ANCHORED)</h3>
<p>이 변경자를 지정하면, 패턴을 강제적으로 &quot;고정&quot;합니다. 이는 (&quot;주어진 문자열&quot;에서) 검색된 문자열의 시작에만 일치하도록 강제합니다. 패턴 자체에서 특정한 구조를 가지게 하는, 펄에서는 유일한 방법으로 같은 효과를 얻을 수 있습니다.</p>
<h3><strong>D</strong> (PCRE_DOLLAR_ENDONLY)</h3>
<p>이 변경자가 설정되면, 패턴의 달러 부호($) 메타문자는 주어진 문자열의 마지막에만 대응합니다. 이 변경자 없이는, 달러는 마지막 문자가 뉴라인일 경우에는 바로 직전의 문자에도 매칭합니다. (마지막이 아닌 뉴라인은 제외합니다) 이 변경자는 m 변경자가 지정되었을때는 무시됩니다. 펄에는 이 변경자가 존재하지 않습니다.</p>
<h3><strong>S</strong></h3>
<p>패턴이 여러번 이용되면, 매칭에 걸리는 시간을 절약하기 위해서 분석에 더 많은 시간을 들일 가치가 있습니다. 이 변경자를 지정하면, 추가 분석을 행합니다. 현 시점에서, 패턴의 분석은 하나의 고정된 시작 문자를 가지지 않는 비고정 패턴에만 유용합니다.</p>
<h3><strong>U</strong> (PCRE_UNGREEDY)</h3>
<p>이 변경자는 수량 지시의 &quot;greediness&quot;를 뒤집습니다. 그리하여 기본값으로 not greedy하게 합니다. 하지만 &quot;?&quot;가 붙으면 greedy하게 됩니다. 이는 펄과 호환되지 않습니다. 패턴 안에서 변경자 설정으로 (<code>?U</code>)처럼 지정하거나, 수량지시어 뒤의 물음표로 지정할 수 있습니다. (예. <code>.*?</code>)</p>
<h3><strong>X</strong> (PCRE_EXTRA)</h3>
<p>이 변경자는 펄과 호환되지 않는 PCRE의 추가 기능을 사용하게 합니다. 패턴의 문자와 결합된 백슬래시가 특별한 의미를 지니지 않을 경우에 에러를 발생시켜서, 차후에 추가 기능을 위해 예약해 둡니다. 기본적으로 펄은, 문자와 결합된 백슬래시가 특별한 의미를 지니지 않을 경우에는 글자로 취급합니다. 이 변경자는 다른 기능을 제어하지 않습니다.</p>
<h3><strong>J</strong> (PCRE_INFO_JCHANGED)</h3>
<p>내부 옵션 (?J) 설정은 영역의 PCRE_DUPNAMES 옵션을 변경합니다. 서브패턴에 동일한 이름을 허용합니다.</p>
<h3><strong>u</strong> (PCRE_UTF8)</h3>
<p>이 변경자는 펄과 호환되지 않는 PCRE의 추가 기능을 사용하게 합니다. 패턴 문자열을 UTF-8으로 취급합니다. 유닉스에서는 PHP 4.1.0부터, win32에서는 PHP 4.2.3부터 사용할 수 있습니다. PHP 4.3.5부터 패턴의 UTF-8 유효성이 검사됩니다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/01/02/optional-cocoapod-dependencies-using-subspecs/</id><title type="html">CocoaPods Subspecs를 이용한 선택적 의존성 설정</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/02/optional-cocoapod-dependencies-using-subspecs/"/><published>2017-01-02T20:41:10+09:00</published><updated>2017-01-02T20:41:10+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[Xcode에서 CocoaPods를 이용해 sub module 만들기에서 모듈을 생성하는 것을 간단히 설명한 적이 있다. 모듈을 만들면서 여러 가지 기능을 하나의 모듈에 추가하다 보면 다른 프로젝트에서는 불필요한 코드들이 추가되는 상황이 발생한다. 이런 경우 Subspecs를 활용하면 선택적 의존성을 설정할 수 있다. 우선 Optional CocoaPod dependencies using Subspecs에 소개된 예시를 보자. # Kite-Print-SDK.podspec Pod::Spec.new do |spec| spec.name = 'Kite-Print-SDK' spec.version = '1.0.2' spec.license = 'MIT' spec.homepage = 'https://github.com/OceanLabs/iOS-Print-SDK' spec.authors = {'Deon Botha' => 'deon@oceanlabs.co'} spec.summary = '...' spec.source = { :git => 'https://github.com/OceanLabs/iOS-Print-SDK.git', :tag => '1.0.2'} spec.source_files = ['PSPrintSDK/OL*.{h,m}', 'PSPrintSDK/CardIO*.h'] spec.resources = ['PSPrintSDK/KitePrintSDK.xcassets', '*.lproj'] spec.dependency 'SDWebImage' spec.dependency 'SVProgressHUD' spec.dependency 'AFNetworking', '2.5.0' spec.dependency 'UICKeyChainStore', '~> 1.0.4' spec.requires_arc = true spec.platform = :ios, '7.0' spec.social_media_url = 'https://twitter.com/dbotha' spec.default_subspec = 'Lite' spec.subspec 'Lite' do |lite| # subspec for users who don't want the third party PayPal # & Stripe bloat end spec.subspec 'PayPal' do |paypal| paypal.xcconfig = { 'OTHER_CFLAGS' => '$(inherited) -DKITE_OFFER_PAYPAL' } paypal.dependency 'PayPal-iOS-SDK', '~> 2.4.2' end spec.subspec 'ApplePay' do |apple| apple.xcconfig = { 'OTHER_CFLAGS' => '$(inherited) -DKITE_OFFER_APPLE_PAY' } apple.dependency 'Stripe', '2.2.0' apple.dependency 'Stripe/ApplePay' end end 이 예시에서 자세히 살펴봐야 할 부분은 subspec과 default_subspecs 이다. 이 pod의 의존성을 부모 프로젝트에서 다음과 같이 지정 했다고 가정하자. pod "Kite-Print-SDK", "~> 1.0" 부모 프로젝트에는 'PayPal'과 'ApplePay' 부분을 제외한 의존성이 설정되었다. 단, default_subspecs에 의해 'Lite' 모듈은 포함된다(예시에서는 추가적인 의존성이 없으므로 차이는 없지만). 'PayPal'과 'ApplePay'에 관련된 의존성 추가는 필요에 따라 아래와 같이 지정할 수 있다. pod "Kite-Print-SDK", "~> 1.0" pod "Kite-Print-SDK/PayPal", "~> 1.0" pod "Kite-Print-SDK/ApplePay", "~> 1.0" 위 예시만으로 선택적 의존성을 설정하는 것에 대한 모든 부분을 설명한 것과 마찬가지다. 추가적으로 알아두어야 할 내용을 소개한다. 모든 subspec은 암시적으로 이를 둘러싸는 Root Spec을 상속 한다. default_subspecs는 다음과 같이 여러 개를 동시에 지정할 수 있다. spec.default_subspec = ['Lite', 'PayPal'] default_subspecs를 지정하지 않으면 모든 subspec이 포함된다. 'OTHER_CFLAGS'를 이용해서 소스 레벨에서 의존성 지정 여부를 확인 할 수 있다. #if KITE_OFFER_PAYPAL print("use PayPal") #else print("not use PayPal") #endif 마지막으로 default_subspecs에는 아래와 같이 설명되어 있다. A Pod should make available the full library by default. Users can fine tune their dependencies, and exclude unneeded subspecs, once their requirements are known. Therefore, this attribute is rarely needed. It is intended to be used to select a default if there are ‘sub-specifications’ which provide alternative incompatible implementations, or to exclude modules rarely needed (especially if they trigger dependencies on other libraries). 요약하자면 Pod는 기본적으로 전체 라이브러리를 제공해야 하므로 특별한 경우가 아니라면 사용하지 않는 것이 좋다. 하지만 이 글에서는 소개하고 있는 선택적 의존성을 지정하기 위해서는 사용하는 것이 좋다고 생각한다.]]></summary><content type="html"><![CDATA[<p><img src="https://blog.asamaru.net/res/img/post/2017/01/CocoaPodsLogo.png" alt="cocoapods" width="402" height="100" /></p>
<p><a href="https://blog.asamaru.net/2015/10/21/xcode-create-sub-module-using-cocoapods/">Xcode에서 CocoaPods를 이용해 sub module 만들기</a>에서 모듈을 생성하는 것을 간단히 설명한 적이 있다. 모듈을 만들면서 여러 가지 기능을 하나의 모듈에 추가하다 보면 다른 프로젝트에서는 불필요한 코드들이 추가되는 상황이 발생한다. 이런 경우 <a href="https://guides.cocoapods.org/syntax/podspec.html#group_subspecs">Subspecs</a>를 활용하면 선택적 의존성을 설정할 수 있다.</p>
<p>우선 <a href="http://www.dbotha.com/2014/12/04/optional-cocoapod-dependencies/">Optional CocoaPod dependencies using Subspecs</a>에 소개된 예시를 보자.</p>
<pre class="hljs ruby"><span class="hljs-comment"># Kite-Print-SDK.podspec</span>
Pod::Spec.new <span class="hljs-keyword">do</span> <span class="hljs-params">|spec|</span>
  spec.name     = <span class="hljs-string">'Kite-Print-SDK'</span>
  spec.version  = <span class="hljs-string">'1.0.2'</span>
  spec.license  =  <span class="hljs-string">'MIT'</span>
  spec.homepage = <span class="hljs-string">'https://github.com/OceanLabs/iOS-Print-SDK'</span>
  spec.authors  = {<span class="hljs-string">'Deon Botha'</span> =&gt; <span class="hljs-string">'deon@oceanlabs.co'</span>}
  spec.summary  = <span class="hljs-string">'...'</span>
  spec.source   = {
    <span class="hljs-symbol">:git</span> =&gt; <span class="hljs-string">'https://github.com/OceanLabs/iOS-Print-SDK.git'</span>,
    <span class="hljs-symbol">:tag</span> =&gt; <span class="hljs-string">'1.0.2'</span>}
  spec.source_files =
    [<span class="hljs-string">'PSPrintSDK/OL*.{h,m}'</span>, <span class="hljs-string">'PSPrintSDK/CardIO*.h'</span>]
  spec.resources =
    [<span class="hljs-string">'PSPrintSDK/KitePrintSDK.xcassets'</span>, <span class="hljs-string">'*.lproj'</span>]
  spec.dependency   <span class="hljs-string">'SDWebImage'</span>
  spec.dependency   <span class="hljs-string">'SVProgressHUD'</span>
  spec.dependency   <span class="hljs-string">'AFNetworking'</span>, <span class="hljs-string">'2.5.0'</span>
  spec.dependency   <span class="hljs-string">'UICKeyChainStore'</span>, <span class="hljs-string">'~&gt; 1.0.4'</span>
  spec.requires_arc = <span class="hljs-literal">true</span>
  spec.platform     = <span class="hljs-symbol">:ios</span>, <span class="hljs-string">'7.0'</span>
  spec.social_media_url = <span class="hljs-string">'https://twitter.com/dbotha'</span>
  spec.default_subspec = <span class="hljs-string">'Lite'</span>

  spec.subspec <span class="hljs-string">'Lite'</span> <span class="hljs-keyword">do</span> <span class="hljs-params">|lite|</span>
  <span class="hljs-comment"># subspec for users who don't want the third party PayPal</span>
  <span class="hljs-comment"># &amp; Stripe bloat</span>
  <span class="hljs-keyword">end</span>

  spec.subspec <span class="hljs-string">'PayPal'</span> <span class="hljs-keyword">do</span> <span class="hljs-params">|paypal|</span>
    paypal.xcconfig =  
        { <span class="hljs-string">'OTHER_CFLAGS'</span> =&gt; <span class="hljs-string">'$(inherited) -DKITE_OFFER_PAYPAL'</span> }
    paypal.dependency   <span class="hljs-string">'PayPal-iOS-SDK'</span>, <span class="hljs-string">'~&gt; 2.4.2'</span>
  <span class="hljs-keyword">end</span>

  spec.subspec <span class="hljs-string">'ApplePay'</span> <span class="hljs-keyword">do</span> <span class="hljs-params">|apple|</span>
    apple.xcconfig =   
        { <span class="hljs-string">'OTHER_CFLAGS'</span> =&gt; <span class="hljs-string">'$(inherited) -DKITE_OFFER_APPLE_PAY'</span> }
    apple.dependency      <span class="hljs-string">'Stripe'</span>, <span class="hljs-string">'2.2.0'</span>
    apple.dependency      <span class="hljs-string">'Stripe/ApplePay'</span>
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span></pre>
<p>이 예시에서 자세히 살펴봐야 할 부분은 <a href="https://guides.cocoapods.org/syntax/podspec.html#subspec">subspec</a>과 <a href="https://guides.cocoapods.org/syntax/podspec.html#default_subspecs">default_subspecs</a> 이다.</p>
<p>이 pod의 의존성을 부모 프로젝트에서 다음과 같이 지정 했다고 가정하자.</p>
<pre class="hljs ruby">pod <span class="hljs-string">"Kite-Print-SDK"</span>, <span class="hljs-string">"~&gt; 1.0"</span></pre>
<p>부모 프로젝트에는 'PayPal'과 'ApplePay' 부분을 제외한 의존성이 설정되었다. 단, <a href="https://guides.cocoapods.org/syntax/podspec.html#default_subspecs">default_subspecs</a>에 의해 'Lite' 모듈은 포함된다(예시에서는 추가적인 의존성이 없으므로 차이는 없지만).</p>
<p>'PayPal'과 'ApplePay'에 관련된 의존성 추가는 필요에 따라 아래와 같이 지정할 수 있다.</p>
<pre class="hljs ruby">pod <span class="hljs-string">"Kite-Print-SDK"</span>, <span class="hljs-string">"~&gt; 1.0"</span>
pod <span class="hljs-string">"Kite-Print-SDK/PayPal"</span>, <span class="hljs-string">"~&gt; 1.0"</span>
pod <span class="hljs-string">"Kite-Print-SDK/ApplePay"</span>, <span class="hljs-string">"~&gt; 1.0"</span></pre>
<p>위 예시만으로 선택적 의존성을 설정하는 것에 대한 모든 부분을 설명한 것과 마찬가지다.</p>
<hr />
<p>추가적으로 알아두어야 할 내용을 소개한다.</p>
<ul>
<li>모든 <a href="https://guides.cocoapods.org/syntax/podspec.html#subspec">subspec</a>은 암시적으로 이를 둘러싸는 Root Spec을 상속 한다.</li>
<li><a href="https://guides.cocoapods.org/syntax/podspec.html#default_subspecs">default_subspecs</a>는 다음과 같이 여러 개를 동시에 지정할 수 있다.
<ul>
<li>spec.default_subspec = ['Lite', 'PayPal']</li>
</ul></li>
<li><a href="https://guides.cocoapods.org/syntax/podspec.html#default_subspecs">default_subspecs</a>를 지정하지 않으면 모든 <a href="https://guides.cocoapods.org/syntax/podspec.html#subspec">subspec</a>이 포함된다.  </li>
<li>'OTHER_CFLAGS'를 이용해서 소스 레벨에서 의존성 지정 여부를 확인 할 수 있다.</li>
</ul>
<pre class="hljs swift">#<span class="hljs-keyword">if</span> <span class="hljs-type">KITE_OFFER_PAYPAL</span>
  <span class="hljs-built_in">print</span>(<span class="hljs-string">"use PayPal"</span>)
#<span class="hljs-keyword">else</span>
  <span class="hljs-built_in">print</span>(<span class="hljs-string">"not use PayPal"</span>)
#endif</pre>
<p>마지막으로 <a href="https://guides.cocoapods.org/syntax/podspec.html#default_subspecs">default_subspecs</a>에는 아래와 같이 설명되어 있다.</p>
<blockquote>
<p>A Pod should make available the full library by default. Users can fine tune their dependencies, and exclude unneeded subspecs, once their requirements are known. Therefore, this attribute is rarely needed. It is intended to be used to select a default if there are ‘sub-specifications’ which provide alternative incompatible implementations, or to exclude modules rarely needed (especially if they trigger dependencies on other libraries).</p>
<p>요약하자면 Pod는 기본적으로 전체 라이브러리를 제공해야 하므로 특별한 경우가 아니라면 사용하지 않는 것이 좋다.</p>
</blockquote>
<p>하지만 이 글에서는 소개하고 있는 선택적 의존성을 지정하기 위해서는 사용하는 것이 좋다고 생각한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/29/upgrading-from-mariadb-10-0-to-10-1/</id><title type="html">MariaDB 10.0에서 10.1로 업그레이드(yum)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/29/upgrading-from-mariadb-10-0-to-10-1/"/><published>2016-12-29T09:26:33+09:00</published><updated>2017-05-02T14:04:16+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[MariaDB 최신 버전 설치(yum) - CentOS 7 이라는 글에서 MariaDB를 설치하는 방법에 대해 소개 했었다. 그 글에서는 처음부터 10.1을 설치하기를 권장했었는데 회사에서 사용하는 서버 중에 10.0을 사용하는 서버가 있어 이번에 업그레이드했던 내용을 간단히 남긴다. 본론에 들어가기에 앞서 10.1에서의 변경 사항이 궁금하다면 What is MariaDB 10.1?를 참고하자. MariaDB의 메뉴얼에 보면 Upgrading from MariaDB 10.0 to 10.1에서 업그레이드 과정 및 변경 사항을 자세히 설명하고 있다. MariaDB 10.0 종료 데이터 백업 MariaDB 10.0 제거 MariaDB 10.1 설치 mysql_upgrade를 실행 Ubuntu 및 Debian 패키지는 설치시 자동으로 실행(Red Hat, CentOS 및 Fedora 패키지는 자동 실행 안함) mysql_upgrade는 두 가지 작업을 수행한다. 몇몇 새로운 필드로 mysql 데이터베이스의 권한 테이블을 업그레이드 모든 테이블을 매우 빠르게 검사하여 MariaDB 10.1과 호환되는 것으로 표시 대부분의 경우이 이 작업은 빠르게 종료된다(물론 테이블 수에 따라 다름) 기능을 사용하려면 my.cnf에 새 옵션을 추가 my.cnf를 변경하면 mysqld를 재시작 아래는 yum으로 설치된 상황에서의 처리 예시다. MariaDB 레포지토리 설정 파일을 연다. $ vi /etc/yum.repos.d/MariaDB.repo 아마도 아래와 비슷한 내용이 나올 것이다. [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 여기서 10.0 부분을 10.1로 수정하고 저장한다. Downloads Setting up MariaDB Repositories에 가면 더 정확한 레포지토리 주소를 얻을 수 있다. 하지만 이번 경우는 10.1로 고치는 것만으로도 충분하다. MariaDB를 종료한다. $ service mysql stop 데이터를 백업한다. 이 과정은 만일의 사태에 대한 대비를 위한 것이다. 실제로는 업그레이드 후 데이터를 새로 넣어야 하는 과정은 없다. 업그레이드 과정에서 데이터가 손실되는 경우에 복구를 위해 예방 차원이다. # 이 부분은 예시일 뿐이니 자신의 상황에 맞게 백업해야 한다. $ mysqldump -uroot dbname --default-character-set=utf8 --routines > dbname.sql 이제는 MariaDB를 제거한다. 이 과정에서 의존성이 있는 패키지들이 함께 제거될 수 있다(나의 경우 crontab과 postfix가 함께 제거되었다). 따라서 삭제된 패키지를 기록해 두었다가 업그레이드 후 다시 설치해 줘야 한다. 그리고 /etc/my.cnf 파일과 기타 설정 파일(/etc/my.cnf.d/)도 백업해 두길 권장한다. 기본적으로 yum remove 과정에서 /etc/my.cnf.rpmsave 파일로 자동 백업 되긴한데 혹시나 모르니. 그리도 my.cnf의 경로는 상황에 따라 차이가 있을 수 있다. $ rpm -qa | grep -i '^MariaDB' # rpm 명령으로 확인된 MariaDB 관련 패키지를 아래와 같이 나열하여 제거한다. $ yum remove MariaDB-server MariaDB-client MariaDB-compat MariaDB-common MariaDB를 다시 설치한다. $ yum install MariaDB-server MariaDB-client 설정 파일들(/etc/my.cnf, /etc/my.cnf.d/)을 복구한다. 이 과정에서 그냥 파일을 덮어쓰지 말고 기존 설정과 재설치 후 생성된 cnf 파일들을 비교해 보길 권장한다. 새로운 속성이 추가된 것들이 있을 수 있으니 변경점을 확인하기 위해서다(비교해서 추가하지 않아도 기본값으로 모두 동작 할테니 크게 문제 되진 않는다). $ mv /etc/my.cnf.rpmsave /etc/my.cnf # 추가적으로 /etc/my.cnf.d/ 를 백업했던 파일들도 복구한다. MariaDB를 다시 실행해서 정상적으로 데몬이 뜨는지 확인한다. service mysql start DB를 업그레이드 한다. 이 과정에서 주의할 것이 있다. MariaDB Documentation » Storage Engines » Archive에 안내되어 있는데 ARCHIVE Storage Engine은 10.0까지만 기본 설치된다. 따라서 10.1에서는 추가 설정이 필요하다. 따라서 관련 처리를 해주거나 mysql_upgrade 전에 미리 Engine을 변경해야 한다. mysql_upgrade -u root -p 여기까지 문제없이 진행되었다면 업그레이드 과정은 끝났다. 후기 사실 크게 복잡할 것 없는 과정인데 나의 실수로 인해 엄청난 삽질을 했다. 레포지토리 주소를 수정하는 과정에서 그냥 버전만 변경했어야 하는데 조금 더 정확히 하겠다는 생각으로 사이트에 안내된 레포지토리를 복사해서 붙여넣어 사용했다. 여기서 실수해서 centos 7 레포지토리 주소를 넣어버린 것이다. 해당 서버는 centos 6인데... 패키지는 지웠는데 다시 설치하려니 gcc++, gcc의 버전이 맞지 않다고 계속 설치 거부. 그래서 gcc++과 gcc 버전을 직접 재설치 하려는데 여러가지 문제에 부딪혔다. 특히 gcc의 경우는 무작정 버전업을 했다가는 골치 아픈 문제들을 만나게 된다. 워낙에 연결된 곳이 많다보니... 이 과정에서 참고한 사이트들은 아래와 같다. CentOS6의 libstdc++ 업데이트 CentOS6.7에 TensorFlow 설치 How to upgrade glibc from version 2.12 to 2.14 on CentOS? Glibc backward compatibility 참고삼아 위 사이트들을 소개했지만 centos 6에서 gcc를 버전업하는 것은 권장하지 않는다. 이번 작업은 어쨌든 사소한 실수 하나로 간단한 작업이 엄청난 재앙을 일으킨 작업이었다.]]></summary><content type="html"><![CDATA[<p><img src="https://blog.asamaru.net/res/img/post/2016/12/mariadb-icon.png" alt="MariaDB" width="512" height="512" /></p>
<p><a href="https://blog.asamaru.net/2015/12/04/installing-mariadb-on-centos-7/">MariaDB 최신 버전 설치(yum) - CentOS 7</a> 이라는 글에서 <a href="https://mariadb.com">MariaDB</a>를 설치하는 방법에 대해 소개 했었다. 그 글에서는 처음부터 10.1을 설치하기를 권장했었는데 회사에서 사용하는 서버 중에 10.0을 사용하는 서버가 있어 이번에 업그레이드했던 내용을 간단히 남긴다.</p>
<p>본론에 들어가기에 앞서 10.1에서의 변경 사항이 궁금하다면 <a href="https://mariadb.com/kb/en/mariadb/what-is-mariadb-101/">What is MariaDB 10.1?</a>를 참고하자.</p>
<hr />
<p><a href="https://mariadb.com">MariaDB</a>의 메뉴얼에 보면 <a href="https://mariadb.com/kb/en/mariadb/upgrading-from-mariadb-100-to-101/">Upgrading from MariaDB 10.0 to 10.1</a>에서 업그레이드 과정 및 변경 사항을 자세히 설명하고 있다.</p>
<ol>
<li><a href="https://mariadb.com">MariaDB</a> 10.0 종료</li>
<li>데이터 백업</li>
<li>MariaDB 10.0 제거</li>
<li>MariaDB 10.1 설치</li>
<li>mysql_upgrade를 실행
<ul>
<li>Ubuntu 및 Debian 패키지는 설치시 자동으로 실행(Red Hat, CentOS 및 Fedora 패키지는 자동 실행 안함)</li>
<li>mysql_upgrade는 두 가지 작업을 수행한다.</li>
<li>몇몇 새로운 필드로 mysql 데이터베이스의 권한 테이블을 업그레이드</li>
<li>모든 테이블을 매우 빠르게 검사하여 MariaDB 10.1과 호환되는 것으로 표시</li>
<li>대부분의 경우이 이 작업은 빠르게 종료된다(물론 테이블 수에 따라 다름)</li>
</ul></li>
<li>기능을 사용하려면 my.cnf에 새 옵션을 추가
<ul>
<li>my.cnf를 변경하면 mysqld를 재시작</li>
</ul></li>
</ol>
<hr />
<p>아래는 yum으로 설치된 상황에서의 처리 예시다.</p>
<p>MariaDB 레포지토리 설정 파일을 연다.</p>
<pre class="hljs bash">$ vi /etc/yum.repos.d/MariaDB.repo</pre>
<p>아마도 아래와 비슷한 내용이 나올 것이다.</p>
<pre><code>[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/10.0/centos6-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1</code></pre>
<p>여기서 10.0 부분을 10.1로 수정하고 저장한다. <a href="https://downloads.mariadb.org/mariadb/repositories/">Downloads Setting up MariaDB Repositories</a>에 가면 더 정확한 레포지토리 주소를 얻을 수 있다. 하지만 이번 경우는 10.1로 고치는 것만으로도 충분하다.</p>
<p>MariaDB를 종료한다.</p>
<pre class="hljs bash">$ service mysql stop</pre>
<p>데이터를 백업한다. 이 과정은 만일의 사태에 대한 대비를 위한 것이다. 실제로는 업그레이드 후 데이터를 새로 넣어야 하는 과정은 없다. 업그레이드 과정에서 데이터가 손실되는 경우에 복구를 위해 예방 차원이다.</p>
<pre class="hljs bash"><span class="hljs-comment"># 이 부분은 예시일 뿐이니 자신의 상황에 맞게 백업해야 한다.</span>
$ mysqldump -uroot dbname --default-character-set=utf8 --routines &gt; dbname.sql</pre>
<p>이제는 MariaDB를 제거한다. 이 과정에서 의존성이 있는 패키지들이 함께 제거될 수 있다(나의 경우 crontab과 postfix가 함께 제거되었다). 따라서 삭제된 패키지를 기록해 두었다가 업그레이드 후 다시 설치해 줘야 한다. 그리고 /etc/my.cnf 파일과 기타 설정 파일(/etc/my.cnf.d/)도 백업해 두길 권장한다. 기본적으로 yum remove 과정에서 /etc/my.cnf.rpmsave 파일로 자동 백업 되긴한데 혹시나 모르니. 그리도 my.cnf의 경로는 상황에 따라 차이가 있을 수 있다.</p>
<pre class="hljs bash">$ rpm -qa | grep -i <span class="hljs-string">'^MariaDB'</span>
<span class="hljs-comment"># rpm 명령으로 확인된 MariaDB 관련 패키지를 아래와 같이 나열하여 제거한다.</span>
$ yum remove MariaDB-server MariaDB-client MariaDB-compat MariaDB-common</pre>
<p>MariaDB를 다시 설치한다.</p>
<pre class="hljs bash">$ yum install MariaDB-server MariaDB-client</pre>
<p>설정 파일들(/etc/my.cnf, /etc/my.cnf.d/)을 복구한다. 이 과정에서 그냥 파일을 덮어쓰지 말고 기존 설정과 재설치 후 생성된 cnf 파일들을 비교해 보길 권장한다. 새로운 속성이 추가된 것들이 있을 수 있으니 변경점을 확인하기 위해서다(비교해서 추가하지 않아도 기본값으로 모두 동작 할테니 크게 문제 되진 않는다).</p>
<pre class="hljs bash">$ mv /etc/my.cnf.rpmsave /etc/my.cnf
<span class="hljs-comment"># 추가적으로 /etc/my.cnf.d/ 를 백업했던 파일들도 복구한다.</span></pre>
<p>MariaDB를 다시 실행해서 정상적으로 데몬이 뜨는지 확인한다.</p>
<pre class="hljs bash">service mysql start</pre>
<p>DB를 업그레이드 한다. 이 과정에서 주의할 것이 있다. <a href="https://mariadb.com/kb/en/mariadb/archive/">MariaDB Documentation » Storage Engines » Archive</a>에 안내되어 있는데 ARCHIVE Storage Engine은 10.0까지만 기본 설치된다. 따라서 10.1에서는 추가 설정이 필요하다. 따라서 관련 처리를 해주거나 mysql_upgrade 전에 미리 Engine을 변경해야 한다.</p>
<pre class="hljs bash">mysql_upgrade -u root -p</pre>
<p>여기까지 문제없이 진행되었다면 업그레이드 과정은 끝났다.</p>
<hr />
<p><strong>후기</strong></p>
<p>사실 크게 복잡할 것 없는 과정인데 나의 실수로 인해 엄청난 삽질을 했다. 레포지토리 주소를 수정하는 과정에서 그냥 버전만 변경했어야 하는데 조금 더 정확히 하겠다는 생각으로 사이트에 안내된 레포지토리를 복사해서 붙여넣어 사용했다. 여기서 실수해서 centos 7 레포지토리 주소를 넣어버린 것이다. 해당 서버는 centos 6인데...
패키지는 지웠는데 다시 설치하려니 gcc++, gcc의 버전이 맞지 않다고 계속 설치 거부. 그래서 gcc++과 gcc 버전을 직접 재설치 하려는데 여러가지 문제에 부딪혔다. 특히 gcc의 경우는 무작정 버전업을 했다가는 골치 아픈 문제들을 만나게 된다. 워낙에 연결된 곳이 많다보니... 이 과정에서 참고한 사이트들은 아래와 같다.</p>
<ul>
<li><a href="https://www.saintsouth.net/blog/update-libstdcpp-on-centos6/">CentOS6의 libstdc++ 업데이트</a></li>
<li><a href="http://qiita.com/Wanwannodao/items/42c93686e49498c43529">CentOS6.7에 TensorFlow 설치</a></li>
<li><a href="http://stackoverflow.com/questions/35616650/how-to-upgrade-glibc-from-version-2-12-to-2-14-on-centos">How to upgrade glibc from version 2.12 to 2.14 on CentOS?</a></li>
<li><a href="http://www.linuxquestions.org/questions/linux-general-1/glibc-backward-compatibility-4175445005/">Glibc backward compatibility</a></li>
</ul>
<p>참고삼아 위 사이트들을 소개했지만 centos 6에서 gcc를 버전업하는 것은 권장하지 않는다.
이번 작업은 어쨌든 사소한 실수 하나로 간단한 작업이 엄청난 재앙을 일으킨 작업이었다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/28/apply-amp/</id><title type="html">블로그에 AMP를 적용하다.</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/28/apply-amp/"/><published>2016-12-28T15:55:06+09:00</published><updated>2016-12-28T15:55:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="thinking" label="thinking" /><category term="blog" label="blog" /><summary><![CDATA[블로그를 리뉴얼 하다.에서 언급했던 AMP(Accelerated Mobile Pages)를 이 블로그에 적용했다. AMP를 적용한 이유는 다분히 SEO를 테스트하기 위함이다. AMP를 적용한다고 구글에서 무조건 상위에 노출시켜주는 것은 아니다. 하지만 빠른 페이지 로딩은 SEO에 도움을 주기 때문에 간접적으로 SEO에 도움이 된다. 실제로 AMP를 적용한 것은 좀 됐는데 구글에서 해당 페이지를 재색인해서 반영되는 시간을 기다리느라고 이제서야 글을 쓴다. 사실 AMP를 적용하는 것은 그리 간단하지는 않았다. AMP의 요구사항을 충족시키는 것을 간단하게 생각했으나 실제로 작업하다보니 여러가지 문제에 부딪혔다. 그중에서 몇가지와 추가적으로 알게된 사항을 나열하자면 아래와 같다. AMP 적용을 고려해서 페이지의 구조 설계해야 한다. 모든 이미지는 사이즈를 알고 있어야 한다. Google AMP Cache는 페이지를 변형한다(일종의 최적화를 하고 상단에 사이트명을 출력하는 Header를 추가한다). 블로그를 리뉴얼 하다. - 원본 블로그를 리뉴얼 하다. - Google AMP Cache에서 보여주는 화면 이로인해 페이지가 의도하지 않은 상황을 만들 수 있다. 이 블로그도 아직 몇가지를 수정해야 한다(모바일에서 우상단에 메뉴 링크가 비정상적으로 동작하는 경우가 있다). 외부 자바스크립트를 사용하지 못하므로 스크립트에 의존하는 페이지를 구성하면 안된다 완전히 불가능한 것은 아니지만 쉽지 않다. Google AMP best way to write JS script tag iframe에서 불려지는 페이지의 도메인은 서비스되는 도메인과 같을 수 없다. 일반적으로는 보안상 동일한 도메인을 요구하지만 여기서는 반대다. 인터넷에서 누군가가 보안상의 이유라고 하는데 정확한 이유는 확인해보지 않았다. 이 사항은 블로그에서 사용하는 Disqus를 AMP 페이지에도 적용하면서 알게 되었다. Disqus in Amp라는 페이지에 잘 설명되어 있는데 Disqus를 출력할 iframe 도메인 문제를 page on an s3 bucket로 해결한다. AMP Components 들의 동작이 다소 불안하다(반응형 레이아웃을 사용할 경우 : 반응형 이미지, 반응형 iframe 등). AMP Components 들은 AMP 페이지가 아니더라도 사용할 수 있다(실제로 글 하단의 SNS 공유 기능이 AMP Components에서 제공하는 기능이다). 그 외에도 Schema.org의 적용이 필요한데 여기서도 약간의 어려움이 있다(이미지와 로고가 포함되어야 하고 사이즈도 정해준 기준에 맞춰야 하는 등). 주저리주저리 여러가지 이야기를 했지만 결론은 하나다. AMP를 직접 적용해보는 것이 가장 빨리 이해할 수 있는 방법이다. 사실 누군가는 "굳이 AMP 적용을 할 필요가 있는가?"라고 이야기 한다. 나의 생각도 크게 다르지 않다. 하지만 AMP의 가이드를 따라 페이지를 제작하다보면 보다 빠른 웹페이지를 설계하고 구축할 수 있는 아이디어를 얻을 수 있을 것이다. 나 또한 앞서 이야기 한 것과 같이 다분히 실험적인 이유로 AMP를 적용해 봤다. 참고로 이 블로그는 지난 글에서 이야기한 것과 같이 PHP로 직접 만든 정적 페이지 생성기에 의해 제작된다. 그래서 markdown이 파싱된 결과를 AMP에 호환되도록 변형하는데 lullabot/amp를 사용했다. 블로그다 보니 특별히 복잡한 구조가 없어서 그런지 현재까지 큰 문제없이 사용중이다.]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2016/12/14/renewal-blog/">블로그를 리뉴얼 하다.</a>에서 언급했던 <a href="https://www.ampproject.org/">AMP</a>(Accelerated Mobile Pages)를 이 블로그에 적용했다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2016/12/apply-amp-blog.png" alt="google search result" width="355" height="413" /></p>
<p>AMP를 적용한 이유는 다분히 SEO를 테스트하기 위함이다. AMP를 적용한다고 구글에서 무조건 상위에 노출시켜주는 것은 아니다. 하지만 빠른 페이지 로딩은 SEO에 도움을 주기 때문에 간접적으로 SEO에 도움이 된다.</p>
<p>실제로 AMP를 적용한 것은 좀 됐는데 구글에서 해당 페이지를 재색인해서 반영되는 시간을 기다리느라고 이제서야 글을 쓴다.</p>
<p>사실 AMP를 적용하는 것은 그리 간단하지는 않았다. AMP의 요구사항을 충족시키는 것을 간단하게 생각했으나 실제로 작업하다보니 여러가지 문제에 부딪혔다. 그중에서 몇가지와 추가적으로 알게된 사항을 나열하자면 아래와 같다.</p>
<ul>
<li>AMP 적용을 고려해서 페이지의 구조 설계해야 한다.</li>
<li>모든 이미지는 사이즈를 알고 있어야 한다.</li>
<li><a href="https://developers.google.com/amp/cache/">Google AMP Cache</a>는 페이지를 변형한다(일종의 최적화를 하고 상단에 사이트명을 출력하는 Header를 추가한다).
<ul>
<li><a href="https://blog.asamaru.net/amp/2016/12/14/renewal-blog/">블로그를 리뉴얼 하다. - 원본</a></li>
<li><a href="https://www.google.co.kr/amp/s/blog.asamaru.net/amp/2016/12/14/renewal-blog/">블로그를 리뉴얼 하다. - Google AMP Cache에서 보여주는 화면</a></li>
<li>이로인해 페이지가 의도하지 않은 상황을 만들 수 있다. 이 블로그도 아직 몇가지를 수정해야 한다(모바일에서 우상단에 메뉴 링크가 비정상적으로 동작하는 경우가 있다).</li>
</ul></li>
<li>외부 자바스크립트를 사용하지 못하므로 스크립트에 의존하는 페이지를 구성하면 안된다
<ul>
<li>완전히 불가능한 것은 아니지만 쉽지 않다. <a href="http://stackoverflow.com/a/39363087/6736772">Google AMP best way to write JS script tag</a></li>
</ul></li>
<li>iframe에서 불려지는 페이지의 도메인은 서비스되는 도메인과 같을 수 없다.
<ul>
<li>일반적으로는 보안상 동일한 도메인을 요구하지만 여기서는 반대다. 인터넷에서 누군가가 보안상의 이유라고 하는데 정확한 이유는 확인해보지 않았다.</li>
<li>이 사항은 블로그에서 사용하는 Disqus를 AMP 페이지에도 적용하면서 알게 되었다. <a href="https://labs.tomasino.org/disqus-in-amp/">Disqus in Amp</a>라는 페이지에 잘 설명되어 있는데 Disqus를 출력할 iframe 도메인 문제를 <a href="https://s3.amazonaws.com/dangoldin.com/amp-disqus.html">page on an s3 bucket</a>로 해결한다.</li>
</ul></li>
<li>AMP Components 들의 동작이 다소 불안하다(반응형 레이아웃을 사용할 경우 : 반응형 이미지, 반응형 iframe 등).</li>
<li>AMP Components 들은 AMP 페이지가 아니더라도 사용할 수 있다(실제로 글 하단의 SNS 공유 기능이 AMP Components에서 제공하는 기능이다).</li>
</ul>
<p>그 외에도 <a href="http://schema.org/">Schema.org</a>의 적용이 필요한데 여기서도 약간의 어려움이 있다(이미지와 로고가 포함되어야 하고 사이즈도 정해준 기준에 맞춰야 하는 등).</p>
<p>주저리주저리 여러가지 이야기를 했지만 결론은 하나다.</p>
<p><strong>AMP를 직접 적용해보는 것이 가장 빨리 이해할 수 있는 방법이다.</strong></p>
<p>사실 누군가는 &quot;굳이 AMP 적용을 할 필요가 있는가?&quot;라고 이야기 한다. 나의 생각도 크게 다르지 않다. 하지만 AMP의 가이드를 따라 페이지를 제작하다보면 보다 빠른 웹페이지를 설계하고 구축할 수 있는 아이디어를 얻을 수 있을 것이다. 나 또한 앞서 이야기 한 것과 같이 다분히 실험적인 이유로 AMP를 적용해 봤다.</p>
<hr />
<p>참고로 이 블로그는 지난 글에서 이야기한 것과 같이 PHP로 직접 만든 정적 페이지 생성기에 의해 제작된다.
그래서 markdown이 파싱된 결과를 AMP에 호환되도록 변형하는데 <a href="https://github.com/Lullabot/amp-library">lullabot/amp</a>를 사용했다. 블로그다 보니 특별히 복잡한 구조가 없어서 그런지 현재까지 큰 문제없이 사용중이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/20/macos-sierra-10-12-2-xcode-8-2-cocoapods-install/</id><title type="html">macOS Sierra 10.12.2 (Xcode8.2) CocoaPods 설치</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/20/macos-sierra-10-12-2-xcode-8-2-cocoapods-install/"/><published>2016-12-20T11:10:06+09:00</published><updated>2016-12-20T11:10:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><category term="ios" label="ios" /><summary><![CDATA[예전에 CocoaPods 사용법이라는 글에서 CocoaPods을 설치하는 방법을 간단히 소개 했었다. 그런데 macOS가 버전업 되면서 이 방법으로는 설치가 되지 않는다 macOS Sierra에 CocoaPods을 설치하려는 경우 기본적으로 CocoaPods - Getting Started에 안내되어 있는 설치 방법으로는 다음과 같은 오류가 난다. $ sudo gem install cocoapods ERROR: While executing gem ... (Errno::EPERM) Operation not permitted - /usr/bin/fuzzy_match 이 문제는 사용자가 "/usr/bin/"에 프로그램을 설치하는 것을 macOS에서 막기 때문이다. 다른 방법으로는 "Sudo-less installation"에 안내되어 있는 방법으로 설치하는 방법이 있다. 아래의 내용을 ".profile" 파일에 추가한다. export GEM_HOME=$HOME/.gem export PATH=$GEM_HOME/bin:$PATH 아래와 같이 설치한다. $ gem install cocoapods --user-install $ gem which cocoapods /Users/eloy/.gem/ruby/2.0.0/gems/cocoapods-0.29.0/lib/cocoapods.rb $ /Users/eloy/.gem/ruby/2.0.0/bin/pod install 아래와 같이 rootless 속성을 변경해서 설치하는 방법도 있다. $ sudo nvram boot-args="rootless=0" $ sudo reboot $ sudo gem install cocoapods -V rootless 속성을 변경하면 다른 프로그램 설치시 유사하게 권한 문제가 발생하는 경우도 대부분 해결될 수 있지만 rootless 속성을 변경하는 것이 꺼려진다면 다음 설치 방법을 이용할 수 있다. 이 방법이 가장 간단하게 CocoaPods을 설치할 수 있는 방법이다. $ sudo gem install -n /usr/local/bin cocoapods $ pod setup --verbose pod setup 실행시 시간이 오래 걸릴 수 있으니 그냥 기다리면 된다.]]></summary><content type="html"><![CDATA[<p>예전에 <a href="https://blog.asamaru.net/2015/08/28/cocoapods-usage/">CocoaPods 사용법</a>이라는 글에서 <a href="https://cocoapods.org/">CocoaPods</a>을 설치하는 방법을 간단히 소개 했었다. 그런데 macOS가 버전업 되면서 이 방법으로는 설치가 되지 않는다</p>
<p>macOS Sierra에 <a href="https://cocoapods.org/">CocoaPods</a>을 설치하려는 경우 기본적으로 <a href="https://guides.cocoapods.org/using/getting-started.html">CocoaPods - Getting Started</a>에 안내되어 있는 설치 방법으로는 다음과 같은 오류가 난다.</p>
<pre class="hljs bash">$ sudo gem install cocoapods
ERROR:  While executing gem ... (Errno::EPERM)
    Operation not permitted - /usr/bin/fuzzy_match</pre>
<p>이 문제는 사용자가 &quot;/usr/bin/&quot;에 프로그램을 설치하는 것을 macOS에서 막기 때문이다.
다른 방법으로는 &quot;Sudo-less installation&quot;에 안내되어 있는 방법으로 설치하는 방법이 있다.</p>
<p>아래의 내용을 &quot;.profile&quot; 파일에 추가한다.</p>
<pre class="hljs bash"><span class="hljs-built_in">export</span> GEM_HOME=<span class="hljs-variable">$HOME</span>/.gem
<span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$GEM_HOME</span>/bin:<span class="hljs-variable">$PATH</span></pre>
<p>아래와 같이 설치한다.</p>
<pre class="hljs bash">$ gem install cocoapods --user-install
$ gem <span class="hljs-built_in">which</span> cocoapods
/Users/eloy/.gem/ruby/2.0.0/gems/cocoapods-0.29.0/lib/cocoapods.rb
$ /Users/eloy/.gem/ruby/2.0.0/bin/pod install</pre>
<hr />
<p>아래와 같이 rootless 속성을 변경해서 설치하는 방법도 있다.</p>
<pre class="hljs bash">$ sudo nvram boot-args=<span class="hljs-string">"rootless=0"</span>
$ sudo reboot
$ sudo gem install cocoapods -V</pre>
<p>rootless 속성을 변경하면 다른 프로그램 설치시 유사하게 권한 문제가 발생하는 경우도 대부분 해결될 수 있지만 rootless 속성을 변경하는 것이 꺼려진다면 다음 설치 방법을 이용할 수 있다.
이 방법이 가장 간단하게 <a href="https://cocoapods.org/">CocoaPods</a>을 설치할 수 있는 방법이다.</p>
<pre class="hljs bash">$ sudo gem install -n /usr/<span class="hljs-built_in">local</span>/bin cocoapods
$ pod setup --verbose</pre>
<p><code>pod setup</code> 실행시 시간이 오래 걸릴 수 있으니 그냥 기다리면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/14/renewal-blog/</id><title type="html">블로그를 리뉴얼 하다.</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/14/renewal-blog/"/><published>2016-12-14T21:41:06+09:00</published><updated>2016-12-14T21:41:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="thinking" label="thinking" /><summary><![CDATA[블로그를 시작한 것은 2012년 이었지만 제대로 관리를 시작한 것은 작년 8월 경이다. 1년 반 가량의 시간 동안 이 블로그는 Octopress에서 Jekyll로 전환 해 가면서 줄 곧 Jekyll 기반으로 운용해 왔다. Jekyll 자체는 훌륭한 편이지만 몇가지 부분에서 불편함이 있었고 디자인이 맘에 들지 않아 계속 고민을 해오던 중 이번에 회사에서 필요한 기능을 제작하면서 이 블로그를 실험 삼아 변경하는 작업을 병행했다. 드디어 오늘부로 Jekyll에서 벗어났다. 이번 작업으로 php의 lumen 기반으로 정적 페이지 생성기를 직접 만들었다. 사실 tightenco/jigsaw 기반으로 필요한 부분을 수정하려고 작업을 시작했다. 그런데 작업을 하다보니 여기저기 맘에 안드는 부분이 많아서 결국은 90% 이상 새로 만들었다. 현재 작업 상황으로는 정적 페이지를 생성하는 단계까지만 완료되었지만 이후 프로젝트의 중요 포인트 중 하나인 AMP를 적용할 예정이다. 그 외에도 몇가지 완료되지 못한 사항들이 있지만 블로그에 적용하기에는 충분한 단계가 되었다고 판단하고 변경한 것이다. 사실 오늘 오후에 적용하는 과정에 놓친 부분이 몇가지 있어서 그 시점에 블로그가 조금 불안정 하긴 했다. 어쨌든 현재 시점엔 내 눈엔 정상이니 다행이다. 이 블로그의 디자인도 내가 직접하긴 했는데... 디자인 감각이 별로라서 아주 만족스럽지는 않지만 이 정도면 봐줄만은 하다고 스스로를 위안 중이다. 어쨌든 얼른 남은 AMP와 SEO 작업 등을 마저 마무리해서 블로그를 안정시켜야겠다.]]></summary><content type="html"><![CDATA[<p>블로그를 시작한 것은 2012년 이었지만 제대로 관리를 시작한 것은 작년 8월 경이다. 1년 반 가량의 시간 동안 이 블로그는 <a href="https://blog.asamaru.net/2015/12/23/moving-from-octopress-to-jekyll/">Octopress에서 Jekyll로 전환</a> 해 가면서 줄 곧 <a href="https://jekyllrb.com/">Jekyll</a> 기반으로 운용해 왔다. <a href="https://jekyllrb.com/">Jekyll</a> 자체는 훌륭한 편이지만 몇가지 부분에서 불편함이 있었고 디자인이 맘에 들지 않아 계속 고민을 해오던 중 이번에 회사에서 필요한 기능을 제작하면서 이 블로그를 실험 삼아 변경하는 작업을 병행했다.</p>
<p>드디어 오늘부로 <a href="https://jekyllrb.com/">Jekyll</a>에서 벗어났다.</p>
<p>이번 작업으로 php의 <a href="https://lumen.laravel.com/">lumen</a> 기반으로 정적 페이지 생성기를 직접 만들었다. 사실 <a href="https://github.com/tightenco/jigsaw">tightenco/jigsaw</a> 기반으로 필요한 부분을 수정하려고 작업을 시작했다. 그런데 작업을 하다보니 여기저기 맘에 안드는 부분이 많아서 결국은 90% 이상 새로 만들었다.</p>
<p>현재 작업 상황으로는 정적 페이지를 생성하는 단계까지만 완료되었지만 이후 프로젝트의 중요 포인트 중 하나인 <a href="https://www.ampproject.org/">AMP</a>를 적용할 예정이다. 그 외에도 몇가지 완료되지 못한 사항들이 있지만 블로그에 적용하기에는 충분한 단계가 되었다고 판단하고 변경한 것이다. 사실 오늘 오후에 적용하는 과정에 놓친 부분이 몇가지 있어서 그 시점에 블로그가 조금 불안정 하긴 했다. 어쨌든 현재 시점엔 내 눈엔 정상이니 다행이다.</p>
<p>이 블로그의 디자인도 내가 직접하긴 했는데... 디자인 감각이 별로라서 아주 만족스럽지는 않지만 이 정도면 봐줄만은 하다고 스스로를 위안 중이다.</p>
<p>어쨌든 얼른 남은 <a href="https://www.ampproject.org/">AMP</a>와 SEO 작업 등을 마저 마무리해서 블로그를 안정시켜야겠다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/07/android-theme-nodisplay-did-not-call-finish-prior-to-onresume-completing/</id><title type="html">Theme.NoDisplay 테마 사용시 안드로이드 API 23에서 did not call finish() prior to onResume() completing 오류 발생</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/07/android-theme-nodisplay-did-not-call-finish-prior-to-onresume-completing/"/><published>2016-12-07T20:40:04+09:00</published><updated>2016-12-07T20:40:04+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[눈에 보이지 않는 Activity를 생성하기 위해 "Theme.NoDisplay" 테마를 사용한 앱에서 오류가 발생했다. 오류 내용을 보면 onResume()이 호출되기 전에 finish()가 호출되지 않았다는 것이다. 확인해보니 "Theme.NoDisplay" 테마가 사용된 Activity는 윈도우 자체가 생성되지 않기 때문에 onResume()이 호출되기 전에 finish()가 호출되어야 하는 조건이 있다. 예를들면 아래와 같다. public class NoDisplayActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); finish(); } } 이와 관련된 내용은 PSA: Android 6.0 Theme.NoDisplay Regression에서 자세히 설명하고 있다. 이 글에 따르면 Android 6.0의 문서화되지 않은 변경으로 인해 targetSdkVersion이 23 이상에서 실행시 오류가 발생할 수 있다고 경고하고 있다. 이 문제는 "Android M developer preview의 버그다(Issue 2353: Activity crash with @android:style/Theme.NoDisplay)"라는 이야기도 있으나 실제 Android 6에서 오류가 발생하고 있으므로 버그라 하더라도 무시할 수 없다. 나도 이번 작업에서 이 문제를 겪게 되었다. 나의 경우 targetSdkVersion이 24 였으며 오류가 보고된 기기는 모두 API 23(Android 6.0) 버전이었다. 이 문제에 대한 근본적인 문제 해결 방법은 onCreate() 또는 onStart() 단계에서 finish()를 호출하는 것이다. 비동기 처리 등의 상황으로 인해 이렇게 할 수 없는 상황이라면 Theme.NoDisplay 테마를 사용하지 말고 Android 투명 / 보이지 않는 Activity 만들기(Theme.Translucent / Theme.NoDisplay)에서 안내한 것과 같이 투명한 Activity를 만들어서 적용하는 방법 을 써야 한다. 위에서 언급한 비동기 처리 외에도 requestPermissions()을 사용하는 것과 같이 startActivityForResult()를 사용하게 되는 상황 등에서도 동일한 문제가 발생할 수 있다. 다른 해결 방법으로 아래와 같이 onStart() 함수에서 setVisible(true);를 호출해서 해결했다는 이야기도 있으나 해결되지 않는다는 이야기들이 있어 안전한 방법이라고 할 수 없다. @Override protected void onStart() { super.onStart(); setVisible(true); } 결론적으로 내가 생각하는 가장 쉽고 안전한 방법은 투명한 Activity를 이용해서 NoDisplay를 대체 구현하는 것이다. <style name="NoDisplay" parent="android:Theme"> <item name="android:windowIsTranslucent">true</item> <item name="android:windowBackground">@android:color/transparent</item> <item name="android:windowContentOverlay">@null</item> <item name="android:windowNoTitle">true</item> <item name="android:windowIsFloating">true</item> <item name="android:backgroundDimEnabled">false</item> <item name="android:colorBackgroundCacheHint">@null</item> <item name="android:windowAnimationStyle">@android:style/Animation</item> <item name="android:windowFullscreen">true</item> </style>]]></summary><content type="html"><![CDATA[<p>눈에 보이지 않는 Activity를 생성하기 위해 &quot;Theme.NoDisplay&quot; 테마를 사용한 앱에서 오류가 발생했다. 오류 내용을 보면 onResume()이 호출되기 전에 finish()가 호출되지 않았다는 것이다.
확인해보니 &quot;Theme.NoDisplay&quot; 테마가 사용된 Activity는 윈도우 자체가 생성되지 않기 때문에 onResume()이 호출되기 전에 finish()가 호출되어야 하는 조건이 있다. 예를들면 아래와 같다.</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoDisplayActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Activity</span> </span>{  
    <span class="hljs-meta">@Override</span>  
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>{  
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);  
        finish();  
    }  
}  </pre>
<p>이와 관련된 내용은 <a href="https://commonsware.com/blog/2015/11/02/psa-android-6p0-theme.nodisplay-regression.html">PSA: Android 6.0 Theme.NoDisplay Regression</a>에서 자세히 설명하고 있다. 이 글에 따르면 Android 6.0의 문서화되지 않은 변경으로 인해 targetSdkVersion이 23 이상에서 실행시 오류가 발생할 수 있다고 경고하고 있다.</p>
<p>이 문제는 &quot;Android M developer preview의 버그다(<a href="https://web.archive.org/web/20151116170752/https://code.google.com/p/android-developer-preview/issues/detail?id=2353">Issue 2353:    Activity crash with @android:style/Theme.NoDisplay</a>)&quot;라는 이야기도 있으나 실제 Android 6에서 오류가 발생하고 있으므로 버그라 하더라도 무시할 수 없다.</p>
<hr />
<p>나도 이번 작업에서 이 문제를 겪게 되었다. 나의 경우 targetSdkVersion이 24 였으며 오류가 보고된 기기는 모두 API 23(Android 6.0) 버전이었다.</p>
<p>이 문제에 대한 근본적인 문제 해결 방법은 onCreate() 또는 onStart() 단계에서 finish()를 호출하는 것이다. 비동기 처리 등의 상황으로 인해 이렇게 할 수 없는 상황이라면 <strong>Theme.NoDisplay 테마를 사용하지 말고 <a href="https://blog.asamaru.net/2016/12/07/android-transparent-no-display-activity/">Android 투명 / 보이지 않는 Activity 만들기(Theme.Translucent / Theme.NoDisplay)</a>에서 안내한 것과 같이 투명한 Activity를 만들어서 적용하는 방법</strong> 을 써야 한다.</p>
<p>위에서 언급한 비동기 처리 외에도 requestPermissions()을 사용하는 것과 같이 startActivityForResult()를 사용하게 되는 상황 등에서도 동일한 문제가 발생할 수 있다.</p>
<p>다른 해결 방법으로 아래와 같이 onStart() 함수에서 <code>setVisible(true);</code>를 호출해서 해결했다는 이야기도 있으나 해결되지 않는다는 이야기들이 있어 안전한 방법이라고 할 수 없다.</p>
<pre class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStart</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">super</span>.onStart();
    setVisible(<span class="hljs-keyword">true</span>);
}</pre>
<hr />
<p>결론적으로 내가 생각하는 가장 쉽고 안전한 방법은 투명한 Activity를 이용해서 NoDisplay를 대체 구현하는 것이다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"NoDisplay"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"android:Theme"</span>&gt;</span><span class="xml">
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowContentOverlay"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowNoTitle"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowIsFloating"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:backgroundDimEnabled"</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:colorBackgroundCacheHint"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowAnimationStyle"</span>&gt;</span>@android:style/Animation<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowFullscreen"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/07/android-transparent-no-display-activity/</id><title type="html">Android 투명 / 보이지 않는 Activity 만들기(Theme.Translucent / Theme.NoDisplay)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/07/android-transparent-no-display-activity/"/><published>2016-12-07T20:09:06+09:00</published><updated>2016-12-07T20:09:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 투명한 배경을 가진 Activity나 눈에 보이지 않는 Activity를 만드는 방법 중 가장 쉬운 방법은 Activity의 Theme를 사용하는 것이다. 이러한 Activity를 구성하기 위해 안드로이드에서 제공되는 테마 몇가지를 알아보자. 아래에 나오는 각 테마의 설정 내용은 Android SDK 24 기준임을 참고하기 바란다. Theme.Translucent Theme.Translucent 테마는 안드로이드 3.0 이전부터 존재한 테마로 투명한 배경을 가진 Activity를 만들때 사용할 수 있는 테마다. 일반적으로 구버전의 안드로이드까지 정확히 지원하려면 Theme.Translucent.NoTitleBar를 사용해서 투명한 배경을 가진 Activity를 만들어야 한다. 이 테마는 아래의 3가지 형태로 나뉜다. 각각의 특성은 이름과 설정 내용을 보면 바로 알 수 있다. Theme.Translucent <style name="Theme.Translucent"> <item name="windowBackground">@color/transparent</item> <item name="colorBackgroundCacheHint">@null</item> <item name="windowIsTranslucent">true</item> <!-- Note that we use the base animation style here (that is no animations) because we really have no idea how this kind of activity will be used. --> <item name="windowAnimationStyle">@style/Animation</item> </style> Theme.Translucent.NoTitleBar <style name="Theme.Translucent.NoTitleBar"> <item name="windowNoTitle">true</item> <item name="windowContentOverlay">@null</item> </style> Theme.Translucent.NoTitleBar_Fullscreen <style name="Theme.Translucent.NoTitleBar.Fullscreen"> <item name="windowFullscreen">true</item> </style> 기본적으로 제공되는 위 테마를 사용하는 것도 괜찮으나 필요하다면 아래와 같이 필요한 설정을 추가해서 재정의한 테마를 사용할 수 있다. <style name="NoDisplay" parent="android:Theme"> <item name="android:windowIsTranslucent">true</item> <item name="android:windowBackground">@android:color/transparent</item> <item name="android:windowContentOverlay">@null</item> <item name="android:windowNoTitle">true</item> <item name="android:windowIsFloating">true</item> <item name="android:backgroundDimEnabled">false</item> <item name="android:colorBackgroundCacheHint">@null</item> <item name="android:windowAnimationStyle">@android:style/Animation</item> <item name="android:windowFullscreen">true</item> </style> Theme.NoDisplay Theme.NoDisplay 테마는 Activity를 투명하게 만드는 것이 아니라 아예 보이지 않는 Activity를 만들어 준다. <style name="Theme.NoDisplay"> <item name="windowBackground">@null</item> <item name="windowContentOverlay">@null</item> <item name="windowIsTranslucent">true</item> <item name="windowAnimationStyle">@null</item> <item name="windowDisablePreview">true</item> <item name="windowNoDisplay">true</item> </style> 이 테마를 사용할 때는 유의할 점이 있다. did not call finish() prior to onResume() completing 오류가 발생할 수 있기 때문이다. Theme.NoDisplay 테마를 사용하는 경우에는 onResume 함수가 호출되기 전에 finish()가 호출되어야 하는데 이를 어길 경우 앱에서 오류가 발생한다. 이와 관련해서는 Theme.NoDisplay 테마 사용시 안드로이드 API 23에서 did not call finish() prior to onResume() completing 오류 발생에서 조금 더 자세히 다룬다. 마지막으로 Android cheats and tips: Invisible activity라는 글도 참고하면 좋을 듯하다. 필요에 따라 android:noHistory와 android:excludeFromRecents="true"를 함께 사용함으로써 history와 최근 사용 항목에 남지 않는 Activity를 생성하는 부분을 안내하고 있다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 투명한 배경을 가진 Activity나 눈에 보이지 않는 Activity를 만드는 방법 중 가장 쉬운 방법은 Activity의 Theme를 사용하는 것이다. 이러한 Activity를 구성하기 위해 안드로이드에서 제공되는 테마 몇가지를 알아보자.</p>
<blockquote>
<p>아래에 나오는 각 테마의 설정 내용은 Android SDK 24 기준임을 참고하기 바란다.</p>
</blockquote>
<hr />
<h3>Theme.Translucent</h3>
<p><a href="https://kairo96.gitbooks.io/android/content/ch4.11.html"></a>
Theme.Translucent 테마는 안드로이드 3.0 이전부터 존재한 테마로 투명한 배경을 가진 Activity를 만들때 사용할 수 있는 테마다. 일반적으로 구버전의 안드로이드까지 정확히 지원하려면 Theme.Translucent.NoTitleBar를 사용해서 투명한 배경을 가진 Activity를 만들어야 한다.</p>
<p>이 테마는 아래의 3가지 형태로 나뉜다. 각각의 특성은 이름과 설정 내용을 보면 바로 알 수 있다.</p>
<ul>
<li>Theme.Translucent</li>
</ul>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Theme.Translucent"</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowBackground"</span>&gt;</span>@color/transparent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"colorBackgroundCacheHint"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowIsTranslucent"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-comment">&lt;!-- Note that we use the base animation style here (that is no
         animations) because we really have no idea how this kind of
         activity will be used. --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowAnimationStyle"</span>&gt;</span>@style/Animation<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>
<ul>
<li>Theme.Translucent.NoTitleBar</li>
</ul>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Theme.Translucent.NoTitleBar"</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowNoTitle"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowContentOverlay"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>
<ul>
<li>Theme.Translucent.NoTitleBar_Fullscreen</li>
</ul>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Theme.Translucent.NoTitleBar.Fullscreen"</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowFullscreen"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>
<p>기본적으로 제공되는 위 테마를 사용하는 것도 괜찮으나 필요하다면 아래와 같이 필요한 설정을 추가해서 재정의한 테마를 사용할 수 있다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"NoDisplay"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"android:Theme"</span>&gt;</span><span class="xml">
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowContentOverlay"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowNoTitle"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowIsFloating"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:backgroundDimEnabled"</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>

  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:colorBackgroundCacheHint"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowAnimationStyle"</span>&gt;</span>@android:style/Animation<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowFullscreen"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>
<hr />
<h3>Theme.NoDisplay</h3>
<p>Theme.NoDisplay 테마는 Activity를 투명하게 만드는 것이 아니라 아예 보이지 않는 Activity를 만들어 준다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"Theme.NoDisplay"</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowBackground"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowContentOverlay"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowIsTranslucent"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowAnimationStyle"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowDisablePreview"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"windowNoDisplay"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>
<p>이 테마를 사용할 때는 유의할 점이 있다. <code>did not call finish() prior to onResume() completing</code> 오류가 발생할 수 있기 때문이다. Theme.NoDisplay 테마를 사용하는 경우에는 onResume 함수가 호출되기 전에 finish()가 호출되어야 하는데 이를 어길 경우 앱에서 오류가 발생한다.
이와 관련해서는 <a href="https://blog.asamaru.net/2016/12/07/android-theme-nodisplay-did-not-call-finish-prior-to-onresume-completing/">Theme.NoDisplay 테마 사용시 안드로이드 API 23에서 did not call finish() prior to onResume() completing 오류 발생</a>에서 조금 더 자세히 다룬다.</p>
<p>마지막으로 <a href="http://androidblog.reindustries.com/android-cheats-and-tips-invisible-activity/">Android cheats and tips: Invisible activity</a>라는 글도 참고하면 좋을 듯하다. 필요에 따라 <code>android:noHistory</code>와 <code>android:excludeFromRecents="true"</code>를 함께 사용함으로써 history와 최근 사용 항목에 남지 않는 Activity를 생성하는 부분을 안내하고 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/06/windows-shared-network-folder-disconnect/</id><title type="html">Windows에서 네트워크 상의 공유 폴더 연결 끊기(로그인 아이디/암호를 저장했을 경우)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/06/windows-shared-network-folder-disconnect/"/><published>2016-12-06T21:48:00+09:00</published><updated>2016-12-06T21:48:00+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[네트워크 상에 공유된 폴더를 연결하게되면 아이디/암호를 넣게되는 경우가 있는데 이때 암호를 저장 했다면 이후부터는 연결시 항상 그 계정을 사용하게 된다. 흔한 경우는 아니지만 이 계정을 변경하려는 경우 기존에 저장된 계정을 제거해야 하는데 그 방법은 아래와 같은 것들이 있다. net use * /d 를 사용하여 기존의 접속을 끊고 다시 연결한다. 탐색기 - 도구 - 폴더옵션 - 보기 - 모든 사용자에게 동일한 폴더 공유 권한을 지정(권장)을 체크아웃 한다. 위 방법 중 하나만 적용해도 문제가 해결될 수 있으나 그렇지 않다면 아래의 방법을 사용한다. cmd 실행 net use \\ip\공유폴더이름 /d net use /persistent:no 출처 : 네트워크 상의 다른 윈도우 운영체제에서 공유된 폴더에 접속시 로그인 암호를 저장 했을 경우 암호를 저장 해제하는 방법을 알려주십시요.]]></summary><content type="html"><![CDATA[<p>네트워크 상에 공유된 폴더를 연결하게되면 아이디/암호를 넣게되는 경우가 있는데 이때 암호를 저장 했다면 이후부터는 연결시 항상 그 계정을 사용하게 된다. 흔한 경우는 아니지만 이 계정을 변경하려는 경우 기존에 저장된 계정을 제거해야 하는데 그 방법은 아래와 같은 것들이 있다.</p>
<ul>
<li><code>net use * /d</code> 를 사용하여 기존의 접속을 끊고 다시 연결한다.</li>
<li>탐색기 - 도구 - 폴더옵션 - 보기 - 모든 사용자에게 동일한 폴더 공유 권한을 지정(권장)을 체크아웃 한다.</li>
</ul>
<p>위 방법 중 하나만 적용해도 문제가 해결될 수 있으나 그렇지 않다면 아래의 방법을 사용한다.</p>
<ul>
<li><code>cmd</code> 실행</li>
</ul>
<pre><code>net use \\ip\공유폴더이름 /d
net use /persistent:no</code></pre>
<p>출처 : <a href="https://answers.microsoft.com/ko-kr/windows/forum/windows_xp-networking/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/74c60ce5-6730-4e96-aef1-f945bf332cec">네트워크 상의 다른 윈도우 운영체제에서 공유된 폴더에 접속시 로그인 암호를 저장 했을 경우 암호를 저장 해제하는 방법을 알려주십시요.</a></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/06/how-do-i-associate-a-vagrant-project-directory-with-an-existing-virtualbox-vm/</id><title type="html">VirtualBox VM과 Vagrant 다시 연결하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/06/how-do-i-associate-a-vagrant-project-directory-with-an-existing-virtualbox-vm/"/><published>2016-12-06T21:46:09+09:00</published><updated>2016-12-06T21:46:09+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[vagrant를 사용하던 중 VirtualBox와의 연결을 잃어버린 경우 vagrant up을 하게되면 새로운 vm을 자동으로 만들게 된다. 나의 경우는 실수로 ".vagrant" 폴더를 지워버리는 바람에 연결이 끊어져 버렸다. 당연히 vagrant가 다시 vm을 만들어도 기본 환경은 모두 구성되어 있으니 크게 문제될 것이 없어야하는 것이 정상이나 나의 경우는 vm 안에 저장된 샘플 데이터를 다시 구성하기 귀찮아서 다시 연결할 방법을 알아보았다. 다시 연결하는 방법은 의외로 간단하다. "Vagrantfile" 파일이 있는 폴더(vagrnat up을 실행하는 곳)로 이동한다. VBoxManage list vms 명령을 실행해서 기존 vm의 ID를 확인한다. $ VBoxManage list vms "virtualMachine" {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx} ".vagrant/machines/default/virtualbox" 폴더로 이동한다. 없다면 이 경로로 폴더를 만든다. 파일명이 "id"인 파일을 만들어서 내용에 "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"(위에서 조회한 대상 vm의 ID)를 넣고 저장한다. 혹시라도 기존 파일이 있는 상태라면 수정하고 그 외 파일들은 지운다. 끝났다. 이제 다시 vagrant up을 실행하면 기존 vm에 연결된 상태로 정상적으로 실행될 것이다.]]></summary><content type="html"><![CDATA[<p><a href="https://www.vagrantup.com/">vagrant</a>를 사용하던 중 <a href="https://www.virtualbox.org/">VirtualBox</a>와의 연결을 잃어버린 경우 <code>vagrant up</code>을 하게되면 새로운 vm을 자동으로 만들게 된다. 나의 경우는 실수로 &quot;.vagrant&quot; 폴더를 지워버리는 바람에 연결이 끊어져 버렸다.</p>
<p>당연히 <a href="https://www.vagrantup.com/">vagrant</a>가 다시 vm을 만들어도 기본 환경은 모두 구성되어 있으니 크게 문제될 것이 없어야하는 것이 정상이나 나의 경우는 vm 안에 저장된 샘플 데이터를 다시 구성하기 귀찮아서 다시 연결할 방법을 알아보았다.</p>
<p>다시 연결하는 방법은 의외로 간단하다.</p>
<ul>
<li>&quot;Vagrantfile&quot; 파일이 있는 폴더(vagrnat up을 실행하는 곳)로 이동한다.</li>
<li><code>VBoxManage list vms</code> 명령을 실행해서 기존 vm의 ID를 확인한다.</li>
</ul>
<pre class="hljs bash">$ VBoxManage list vms
<span class="hljs-string">"virtualMachine"</span> {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</pre>
<ul>
<li>&quot;.vagrant/machines/default/virtualbox&quot; 폴더로 이동한다. 없다면 이 경로로 폴더를 만든다.</li>
<li>파일명이 &quot;id&quot;인 파일을 만들어서 내용에 &quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;(위에서 조회한 대상 vm의 ID)를 넣고 저장한다. 혹시라도 기존 파일이 있는 상태라면 수정하고 그 외 파일들은 지운다.</li>
</ul>
<p>끝났다. 이제 다시 <code>vagrant up</code>을 실행하면 기존 vm에 연결된 상태로 정상적으로 실행될 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/06/how-to-do-insertafter-in-javascript/</id><title type="html">자바스크립트 insertAfter() 구현하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/06/how-to-do-insertafter-in-javascript/"/><published>2016-12-06T10:53:25+09:00</published><updated>2016-12-06T10:53:25+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[javascript는 insertBefore()만 제공하고 insertAfter() 함수는 제공하지 않는다. 웹 UI 개발시 대부분 jQuery 같은 라이브러리를 사용하니 insertAfter() 함수를 쉽게 사용할 수 있다. 그런데 추가 라이브러리를 사용할 수 없거나 간단히 이 기능만 필요한 경우가 있다. 아래는 구글 등에서 검색시 주로 발견되는 예시 소스다. Object.prototype.insertAfter = function (newNode) { this.parentNode.insertBefore(newNode, this.nextSibling); }; // 또는 function insertAfter(referenceNode, newNode) { referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling); } 그런데 이 방식은 문제가 있다. 다음 노드를 찾는 nextSibling 값이 null이 될 수 있기 때문이다(대상이 맨 마지막 노드일때). 따라서 아래와 같이 사용해야 한다. Object.prototype.insertAfter = function (newNode) { if (!!this.nextSibling) { this.parentNode.insertBefore(newNode, this.nextSibling); } else { this.parentNode.appendChild(newNode); } }; // 또는 function insertAfter(referenceNode, newNode) { if (!!referenceNode.nextSibling) { referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling); } else { referenceNode.parentNode.appendChild(newNode); } } 여기서도 parentNode가 null인 경우에 대해서는 고려되지 않았지만 대부분의 경우 굳이 고려할 필요가 없을 것이다. 필요하다면 이 부분도 추가해주면 된다.]]></summary><content type="html"><![CDATA[<p>javascript는 <a href="http://www.w3schools.com/jsref/met_node_insertbefore.asp">insertBefore()</a>만 제공하고 <code>insertAfter()</code> 함수는 제공하지 않는다.</p>
<p>웹 UI 개발시 대부분 <a href="https://jquery.com/">jQuery</a> 같은 라이브러리를 사용하니 <code>insertAfter()</code> 함수를 쉽게 사용할 수 있다. 그런데 추가 라이브러리를 사용할 수 없거나 간단히 이 기능만 필요한 경우가 있다.</p>
<p>아래는 구글 등에서 검색시 주로 발견되는 예시 소스다.</p>
<pre class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.insertAfter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newNode</span>) </span>{     
  <span class="hljs-keyword">this</span>.parentNode.insertBefore(newNode, <span class="hljs-keyword">this</span>.nextSibling);
};
<span class="hljs-comment">// 또는</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertAfter</span>(<span class="hljs-params">referenceNode, newNode</span>) </span>{
  referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
}</pre>
<p>그런데 이 방식은 문제가 있다. 다음 노드를 찾는 <code>nextSibling</code> 값이 null이 될 수 있기 때문이다(대상이 맨 마지막 노드일때).</p>
<p>따라서 아래와 같이 사용해야 한다.</p>
<pre class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.insertAfter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newNode</span>) </span>{     
  <span class="hljs-keyword">if</span> (!!<span class="hljs-keyword">this</span>.nextSibling) {
    <span class="hljs-keyword">this</span>.parentNode.insertBefore(newNode, <span class="hljs-keyword">this</span>.nextSibling);
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">this</span>.parentNode.appendChild(newNode);
  }
};
<span class="hljs-comment">// 또는</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertAfter</span>(<span class="hljs-params">referenceNode, newNode</span>) </span>{   
  <span class="hljs-keyword">if</span> (!!referenceNode.nextSibling) {
    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
  } <span class="hljs-keyword">else</span> {
    referenceNode.parentNode.appendChild(newNode);
  }  
}</pre>
<p>여기서도 <code>parentNode</code>가 null인 경우에 대해서는 고려되지 않았지만 대부분의 경우 굳이 고려할 필요가 없을 것이다. 필요하다면 이 부분도 추가해주면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/23/php-5-3-to-7-1-for-os-x-macos-10-6-to-10-12as-binary-package/</id><title type="html">Max OSX에 PHP (5.3 ~ 7.1) 바이너리 패키지 설치</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/23/php-5-3-to-7-1-for-os-x-macos-10-6-to-10-12as-binary-package/"/><published>2016-11-23T22:30:00+09:00</published><updated>2016-11-23T22:30:00+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><category term="php" label="php" /><summary><![CDATA[대부분의 PHP 작업은 vagrant를 사용해서 linux에서 한다. 하지만 경우에 따라 OSX에서도 PHP 실행이 필요하다. 이럴때 주로 사용하는 PHP 버전과 OSX에서 제공하는 PHP의 버전이 다를 경우 다소 불편해서 가급적 버전을 맞추어 사용한다. 이런 상황에서 유용한 것이 PHP 5.3 to 7.1 for OS X / macOS 10.6 to 10.12 as binary package에서 제공하는 바이너리 패키지이다. 쉘 스크립트 한줄로 원하는 PHP 버전을 설치해 준다(/usr/local/php5에 설치한다). 이 패키지는 OSX 10.6부터 10.12(OS X 10.6 Snow Leopard, OS X 10.7 Lion, OS X 10.8 Mountain Lion, OS X 10.9 Mavericks, OS X 10.10 Yosemite, OS X 10.11 El Capitan, macOS 10.12 Sierra)를 지원하며 PHP 7.1 / 7.0 / 5.6 / 5.5 / 5.4 / 5.3을 선택할 수 있다. 아래는 각 버전별 설치 방법이다. OSX 버전은 상관없다. 설치 스크립트 내에서 OSX 버전에 따라 처리한다. 그리고 설치 과정에서 sudo 권한이 요구된다(비밀번호 입력을 요구할 수 있다). PHP 7.1 (release candidate) $ curl -s https://php-osx.liip.ch/install.sh | bash -s 7.1 PHP 7.0 (Current stable) $ curl -s https://php-osx.liip.ch/install.sh | bash -s 7.0 PHP 5.6 (Current stable) $ curl -s https://php-osx.liip.ch/install.sh | bash -s 5.6 PHP 5.5 (Old stable) $ curl -s https://php-osx.liip.ch/install.sh | bash -s 5.5 PHP 5.4 (End of life) $ curl -s https://php-osx.liip.ch/install.sh | bash -s 5.4 PHP 5.3 (End of life) $ curl -s https://php-osx.liip.ch/install.sh | bash -s 5.3 설치 후에는 /usr/local/php5/php.d/99-liip-developer.ini를 수정해야 한다. Timezone이 date.timezone = Europe/Zurich로 기본 설정되어 있어 date.timezone = Asia/Seoul로 변경한다. Timezone이 크게 중요하지 않거나 App에서 자체적으로 설정하고 있다면 굳이 바꾸지 않아도 된다. 그외 설치 상에서 발생하는 오류나 추가적 내용은 위 사이트를 참고하자(FAQ, 포함 Extentions 등이 안내되어 있다).]]></summary><content type="html"><![CDATA[<p>대부분의 PHP 작업은 <a href="https://www.vagrantup.com/">vagrant</a>를 사용해서 linux에서 한다. 하지만 경우에 따라 OSX에서도 PHP 실행이 필요하다. 이럴때 주로 사용하는 PHP 버전과 OSX에서 제공하는 PHP의 버전이 다를 경우 다소 불편해서 가급적 버전을 맞추어 사용한다.</p>
<p>이런 상황에서 유용한 것이 <a href="https://php-osx.liip.ch/">PHP 5.3 to 7.1 for OS X / macOS 10.6 to 10.12 as binary package</a>에서 제공하는 바이너리 패키지이다. 쉘 스크립트 한줄로 원하는 PHP 버전을 설치해 준다(/usr/local/php5에 설치한다).</p>
<p>이 패키지는 OSX 10.6부터 10.12(OS X 10.6 Snow Leopard, OS X 10.7 Lion, OS X 10.8 Mountain Lion, OS X 10.9 Mavericks, OS X 10.10 Yosemite, OS X 10.11 El Capitan, macOS 10.12 Sierra)를 지원하며 PHP 7.1 / 7.0 / 5.6 / 5.5 / 5.4 / 5.3을 선택할 수 있다.</p>
<p>아래는 각 버전별 설치 방법이다. OSX 버전은 상관없다. 설치 스크립트 내에서 OSX 버전에 따라 처리한다. 그리고 설치 과정에서 <code>sudo</code> 권한이 요구된다(비밀번호 입력을 요구할 수 있다).</p>
<p><strong>PHP 7.1 (release candidate)</strong></p>
<pre class="hljs bash">$ curl -s https://php-osx.liip.ch/install.sh | bash -s 7.1</pre>
<p><strong>PHP 7.0 (Current stable)</strong></p>
<pre class="hljs bash">$ curl -s https://php-osx.liip.ch/install.sh | bash -s 7.0</pre>
<p><strong>PHP 5.6 (Current stable)</strong></p>
<pre class="hljs bash">$ curl -s https://php-osx.liip.ch/install.sh | bash -s 5.6</pre>
<p><strong>PHP 5.5 (Old stable)</strong></p>
<pre class="hljs bash">$ curl -s https://php-osx.liip.ch/install.sh | bash -s 5.5</pre>
<p><strong>PHP 5.4 (End of life)</strong></p>
<pre class="hljs bash">$ curl -s https://php-osx.liip.ch/install.sh | bash -s 5.4</pre>
<p><strong>PHP 5.3 (End of life)</strong></p>
<pre class="hljs bash">$ curl -s https://php-osx.liip.ch/install.sh | bash -s 5.3</pre>
<p>설치 후에는 <code>/usr/local/php5/php.d/99-liip-developer.ini</code>를 수정해야 한다. Timezone이 <code>date.timezone = Europe/Zurich</code>로 기본 설정되어 있어 <code>date.timezone = Asia/Seoul</code>로 변경한다. Timezone이 크게 중요하지 않거나 App에서 자체적으로 설정하고 있다면 굳이 바꾸지 않아도 된다.</p>
<p>그외 설치 상에서 발생하는 오류나 추가적 내용은 <a href="https://php-osx.liip.ch/">위 사이트</a>를 참고하자(FAQ, 포함 Extentions 등이 안내되어 있다).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/21/chrome-google-start-country/</id><title type="html">Chrome에서 구글 시작 페이지가 한국이 아닌 다른 나라로 나올 경우</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/21/chrome-google-start-country/"/><published>2016-11-21T21:07:59+09:00</published><updated>2016-11-21T21:07:59+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[Chrome을 열면 시작 페이지가 구글-한국이 떠야 하는데 이상하게 구글-일본 등으로 뜨는 경우가 있다. 주변에서 이런 경우를 보면 어쩌다 한번만 그런게 아니라 한번 발생하면 지속적으로 해당 국가의 구글이 뜬다. Chrome의 설정이나 계정 정보에 관련 정보가 저장되어서 그런 경우도 있다고 하나 관련 정보를 모두 수정하고 캐시 정보를 모두 지워도 문제가 해결되지 않는 경우가 있다. 이런 경우는 아마도 사용자의 IP를 보고 국가를 판단하는 것으로 보인다. 관련해서 Chrome 사용자 게시판 - 구글, 크롬 국가 변경 이라는 글을 보면 답변 내용 중에 아래의 내용이 있다. Google 검색은 사용자의 검색 설정, 위치 설정(위치는 IP 주소, 위치 기록, Wi-Fi 연결, www.google.com/preferences 페이지에서 설정한 위치 등)을 토대로 파악하여 사용자를 알맞는 Google 도메인으로 리디렉트 시킵니다. 예를 들어서 미국에서 Google 검색을 수행하면, Google.com 도메인으로, 프랑스에서 Google 검색을 하면 google.com 대신 google.fr 도메인으로 사용자를 이동시킵니다. 한국에서 검색을 한다면 당연히 google.co.kr 로 이동시켜야 하는 것이 맞습니다만, google.co.jp 로 잘못 리디렉트된다면, 다음 몇 가지 방법을 통해 원하는 Google 도메인을 방문할 수 있습니다. 잘못된 Google 사이트로 연결된다면, Google에서 사용자의 IP 주소를 잘못 감지했을 수 있으며, 문제를 신고하면 Google에서 사용자의 IP 주소를 업데이트해 줄 수 있습니다. 보통 매우 신속하게 문제가 해결되지만 최대 한 달이 걸릴 수도 있다 합니다. 개인 검색 설정 및 위치 설정 등을 검토해보시고, 필요하면, Google에서 위치를 변경할 수 있습니다. 언제든지, www.google.co.jp 대신 google.com 또는 google.co.kr 등 원하는 도메인을 바로 방문할 수 있습니다. 구체적인 해결방법은 다음 예시를 참고하세요. 영문 Google 도메인 방문하는 방법: http://www.google.com/ncr 를 클릭하거나, http://www.google.com/ncr 을 북마크에 추가합니다. 한국 Google 도메인을 방문하는 방법: http://www.google.co.kr/ncr 를 클릭하거나, http://www.google.co.kr/ncr 를 북마크에 추가합니다. 여기서 NCR는 No Country Redirect 를 의미합니다. 같은 방법으로 한국에서 프랑스 도메인으로 이동하려면, www.google.fr 를 입력할 것이 아니라, Chrome 주소창에 www.google.fr/ncr 를 입력해야 합니다. 이 내용 중에 있는 것처럼 http://www.google.co.kr/ncr 를 접속한 후 브라우저를 껐다 켜면 정상적으로 구글 한국으로 접속되는 경우가 있으니 한번 시도해보길 바란다. 그리고 위 답변처럼 IP 문제 신고를 하는 것이 가장 확실한 해결책인 것으로 보인다.]]></summary><content type="html"><![CDATA[<p>Chrome을 열면 시작 페이지가 <a href="https://www.google.co.kr">구글-한국</a>이 떠야 하는데 이상하게 <a href="https://www.google.co.jp">구글-일본</a> 등으로 뜨는 경우가 있다. 주변에서 이런 경우를 보면 어쩌다 한번만 그런게 아니라 한번 발생하면 지속적으로 해당 국가의 구글이 뜬다. Chrome의 설정이나 계정 정보에 관련 정보가 저장되어서 그런 경우도 있다고 하나 관련 정보를 모두 수정하고 캐시 정보를 모두 지워도 문제가 해결되지 않는 경우가 있다. 이런 경우는 아마도 사용자의 IP를 보고 국가를 판단하는 것으로 보인다.</p>
<p>관련해서 <a href="https://productforums.google.com/forum/#!msg/chrome-ko/9ho5EKK3a5c/Kfh2xzEaqFMJ">Chrome 사용자 게시판 - 구글, 크롬 국가 변경</a> 이라는 글을 보면 답변 내용 중에 아래의 내용이 있다.</p>
<blockquote>
<p>Google 검색은 사용자의 검색 설정, 위치 설정(위치는 IP 주소, 위치 기록, Wi-Fi 연결, www.google.com/preferences 페이지에서 설정한 위치 등)을 토대로 파악하여 사용자를 알맞는 Google 도메인으로 리디렉트 시킵니다. 예를 들어서 미국에서 Google 검색을 수행하면, Google.com 도메인으로, 프랑스에서 Google 검색을 하면 google.com 대신 google.fr 도메인으로 사용자를 이동시킵니다. 한국에서 검색을 한다면 당연히 google.co.kr 로 이동시켜야 하는 것이 맞습니다만, google.co.jp 로 잘못 리디렉트된다면, 다음 몇 가지 방법을 통해 원하는 Google 도메인을 방문할 수 있습니다.</p>
<ol>
<li>
<p>잘못된 Google 사이트로 연결된다면, Google에서 사용자의 IP 주소를 잘못 감지했을 수 있으며, <a href="https://support.google.com/websearch/contact/ip">문제를 신고</a>하면 Google에서 사용자의 IP 주소를 업데이트해 줄 수 있습니다. 보통 매우 신속하게 문제가 해결되지만 최대 한 달이 걸릴 수도 있다 합니다.</p>
</li>
<li>
<p><a href="https://support.google.com/websearch/answer/179386">개인 검색 설정 및 위치 설정</a> 등을 검토해보시고, 필요하면, Google에서 위치를 변경할 수 있습니다.</p>
</li>
<li>
<p>언제든지, www.google.co.jp 대신 google.com 또는 google.co.kr 등 원하는 도메인을 바로 방문할 수 있습니다. 구체적인 해결방법은 다음 예시를 참고하세요.
영문 Google 도메인 방문하는 방법: <a href="http://www.google.com/ncr">http://www.google.com/ncr</a> 를 클릭하거나, <a href="http://www.google.com/ncr">http://www.google.com/ncr</a> 을 북마크에 추가합니다.
한국 Google 도메인을 방문하는 방법: <a href="http://www.google.co.kr/ncr">http://www.google.co.kr/ncr</a> 를 클릭하거나, <a href="http://www.google.co.kr/ncr">http://www.google.co.kr/ncr</a> 를 북마크에 추가합니다.
여기서 NCR는 No Country Redirect 를 의미합니다. 같은 방법으로 한국에서 프랑스 도메인으로 이동하려면, www.google.fr 를 입력할 것이 아니라, Chrome 주소창에 www.google.fr/ncr 를 입력해야 합니다.</p>
</li>
</ol>
</blockquote>
<p>이 내용 중에 있는 것처럼 <a href="http://www.google.co.kr/ncr">http://www.google.co.kr/ncr</a> 를 접속한 후 브라우저를 껐다 켜면 정상적으로 구글 한국으로 접속되는 경우가 있으니 한번 시도해보길 바란다. 그리고 위 답변처럼 <a href="https://support.google.com/websearch/contact/ip">IP 문제 신고</a>를 하는 것이 가장 확실한 해결책인 것으로 보인다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/21/php-hangul-slug/</id><title type="html">PHP 한글 slug</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/21/php-hangul-slug/"/><published>2016-11-21T20:11:27+09:00</published><updated>2016-11-21T20:11:27+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA["슬러그(Slug)란?" 글을 보면 slug에 대해 잘 설명되어 있다. PHP로 작업 중 한글로 된 이름을 URL에서 사용하기에 적합한 slug로 변환하는 것이 필요해 몇가지 자료를 참고해서 간단히 작성했다(짜집기). 간단하게 사용하려고 만든 것이다 보니 충분한 테스트가 된 코드는 아니다. 따라서 처리 과정에 대한 참고 자료로 활용하길 바란다(크게 중요한 부분이 아니라면 그대로 가져다 써도 큰 문제는 없을 듯하다). <?php class Hangul { static public function slug($str, $options = []) { // Make sure string is in UTF-8 and strip invalid UTF-8 characters $str = mb_convert_encoding((string)$str, 'UTF-8', mb_list_encodings()); $defaults = [ 'delimiter' => '-', 'limit' => null, 'lowercase' => true, 'replacements' => [], 'transliterate' => true, ]; // Merge options $options = array_merge($defaults, $options); // Make custom replacements $str = preg_replace(array_keys($options['replacements']), $options['replacements'], $str); // Transliterate characters to ASCII if ($options['transliterate']) { $str = static::han2eng($str); } // Replace non-alphanumeric characters with our delimiter $str = preg_replace('/[^\p{L}\p{Nd}]+/u', $options['delimiter'], $str); // Remove duplicate delimiters $str = preg_replace('/(' . preg_quote($options['delimiter'], '/') . '){2,}/', '$1', $str); // Truncate slug to max. characters $str = mb_substr($str, 0, ($options['limit'] ? $options['limit'] : mb_strlen($str, 'UTF-8')), 'UTF-8'); // Remove delimiter from ends $str = trim($str, $options['delimiter']); return $options['lowercase'] ? mb_strtolower($str, 'UTF-8') : $str; } static private function han2eng($text) { /* 초중성에 대응하는 영문 알파벳 배열화 */ // $LCtable = array("ㄱ", "ㄲ", "ㄴ", "ㄷ", "ㄸ", "ㄹ", "ㅁ", "ㅂ", "ㅃ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"); // $MVtable = array("ㅏ", "ㅐ", "ㅑ", "ㅒ", "ㅓ", "ㅔ", "ㅕ", "ㅖ", "ㅗ", "ㅘ", "ㅙ", "ㅚ", "ㅛ", "ㅜ", "ㅝ", "ㅞ", "ㅟ", "ㅠ", "ㅡ", "ㅢ", "ㅣ"); // $TCtable = array("", "ㄱ", "ㄲ", "ㄳ", "ㄴ", "ㄵ", "ㄶ", "ㄷ", "ㄹ", "ㄺ", "ㄻ", "ㄼ", "ㄽ", "ㄾ", "ㄿ", "ㅀ", "ㅁ", "ㅂ", "ㅄ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ"); $LCetable = ["k", "kk", "n", "d", "tt", "l", "m", "b", "pp", "s", "ss", "", "j", "jj", "ch", "k", "t", "p", "h"]; $MVetable = ["a", "ae", "ya", "yae", "eo", "e", "yeo", "ye", "o", "wa", "wae", "oe", "yo", "u", "wo", "we", "wi", "yu", "eu", "ui", "i"]; $TCetable = ["", "g", "kk", "k", "n", "n", "n", "t", "l", "l", "l", "l", "l", "l", "l", "l", "m", "p", "p", "s", "ss", "ng", "j", "ch", "k", "t", "p", "h"]; $returnValue = ''; // UTF-8로 변환된 문장을 유니코드로 변환한다. $result = static::utf8ToUnicode($text); // 유니코드로 변환된 글이 한글코드 안에 있으면 초중성으로 분리한다 // 원본에서 약간 수정함. 한글 외 글자에서 중복패턴이 나오는 부분 수정함. // 단, 한글외 [0-9a-Z]는 확인했지만 그 외 문자에서는 확인 해 보지 않음. foreach ($result AS $key => $val) { if ($val >= 44032 && $val <= 55203) { $chr = ""; $code = $val; $temp1 = $code - 44032; $T = (int)$temp1 % 28; $temp1 /= 28; $V = (int)$temp1 % 21; $temp1 /= 21; $L = (int)$temp1; $chr .= $LCetable[$L] . $MVetable[$V] . $TCetable[$T]; $returnValue .= ucfirst($chr); } else { $returnValue .= chr($val); } } return $returnValue; } static private function utf8ToUnicode($str) { $unicode = []; $values = []; $lookingFor = 1; for ($i = 0; $i < strlen($str); $i++) { $thisValue = ord($str[$i]); if ($thisValue < 128) { $unicode[] = $thisValue; } else { if (count($values) == 0) { $lookingFor = ($thisValue < 224) ? 2 : 3; } $values[] = $thisValue; if (count($values) == $lookingFor) { $number = ($lookingFor == 3) ? (($values[0] % 16) * 4096) + (($values[1] % 64) * 64) + ($values[2] % 64) : (($values[0] % 32) * 64) + ($values[1] % 64); $unicode[] = $number; $values = []; $lookingFor = 1; } } } return $unicode; } } 참고자료 : URL Slugs in PHP (with UTF-8 and Transliteration Support) PHP han2eng]]></summary><content type="html"><![CDATA[<p><a href="http://bingles1600.blogspot.kr/2012/04/slug.html">&quot;슬러그(Slug)란?&quot;</a> 글을 보면 slug에 대해 잘 설명되어 있다.</p>
<p>PHP로 작업 중 한글로 된 이름을 URL에서 사용하기에 적합한 slug로 변환하는 것이 필요해 몇가지 자료를 참고해서 간단히 작성했다(짜집기). 간단하게 사용하려고 만든 것이다 보니 충분한 테스트가 된 코드는 아니다. 따라서 처리 과정에 대한 참고 자료로 활용하길 바란다(크게 중요한 부분이 아니라면 그대로 가져다 써도 큰 문제는 없을 듯하다).</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hangul</span>
</span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">slug</span><span class="hljs-params">($str, $options = [])</span>
    </span>{
        <span class="hljs-comment">// Make sure string is in UTF-8 and strip invalid UTF-8 characters</span>
        $str = mb_convert_encoding((string)$str, <span class="hljs-string">'UTF-8'</span>, mb_list_encodings());

        $defaults = [
            <span class="hljs-string">'delimiter'</span> =&gt; <span class="hljs-string">'-'</span>,
            <span class="hljs-string">'limit'</span> =&gt; <span class="hljs-keyword">null</span>,
            <span class="hljs-string">'lowercase'</span> =&gt; <span class="hljs-keyword">true</span>,
            <span class="hljs-string">'replacements'</span> =&gt; [],
            <span class="hljs-string">'transliterate'</span> =&gt; <span class="hljs-keyword">true</span>,
        ];
        <span class="hljs-comment">// Merge options</span>
        $options = array_merge($defaults, $options);

        <span class="hljs-comment">// Make custom replacements</span>
        $str = preg_replace(array_keys($options[<span class="hljs-string">'replacements'</span>]), $options[<span class="hljs-string">'replacements'</span>], $str);

        <span class="hljs-comment">// Transliterate characters to ASCII</span>
        <span class="hljs-keyword">if</span> ($options[<span class="hljs-string">'transliterate'</span>]) {
            $str = <span class="hljs-keyword">static</span>::han2eng($str);
        }

        <span class="hljs-comment">// Replace non-alphanumeric characters with our delimiter</span>
        $str = preg_replace(<span class="hljs-string">'/[^\p{L}\p{Nd}]+/u'</span>, $options[<span class="hljs-string">'delimiter'</span>], $str);

        <span class="hljs-comment">// Remove duplicate delimiters</span>
        $str = preg_replace(<span class="hljs-string">'/('</span> . preg_quote($options[<span class="hljs-string">'delimiter'</span>], <span class="hljs-string">'/'</span>) . <span class="hljs-string">'){2,}/'</span>, <span class="hljs-string">'$1'</span>, $str);

        <span class="hljs-comment">// Truncate slug to max. characters</span>
        $str = mb_substr($str, <span class="hljs-number">0</span>, ($options[<span class="hljs-string">'limit'</span>] ? $options[<span class="hljs-string">'limit'</span>] : mb_strlen($str, <span class="hljs-string">'UTF-8'</span>)), <span class="hljs-string">'UTF-8'</span>);

        <span class="hljs-comment">// Remove delimiter from ends</span>
        $str = trim($str, $options[<span class="hljs-string">'delimiter'</span>]);

        <span class="hljs-keyword">return</span> $options[<span class="hljs-string">'lowercase'</span>] ? mb_strtolower($str, <span class="hljs-string">'UTF-8'</span>) : $str;
    }

    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">han2eng</span><span class="hljs-params">($text)</span>
    </span>{
        <span class="hljs-comment">/* 초중성에 대응하는 영문 알파벳 배열화 */</span>
        <span class="hljs-comment">// $LCtable = array("ㄱ", "ㄲ", "ㄴ", "ㄷ", "ㄸ", "ㄹ", "ㅁ", "ㅂ", "ㅃ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅉ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ");</span>
        <span class="hljs-comment">// $MVtable = array("ㅏ", "ㅐ", "ㅑ", "ㅒ", "ㅓ", "ㅔ", "ㅕ", "ㅖ", "ㅗ", "ㅘ", "ㅙ", "ㅚ", "ㅛ", "ㅜ", "ㅝ", "ㅞ", "ㅟ", "ㅠ", "ㅡ", "ㅢ", "ㅣ");</span>
        <span class="hljs-comment">// $TCtable = array("", "ㄱ", "ㄲ", "ㄳ", "ㄴ", "ㄵ", "ㄶ", "ㄷ", "ㄹ", "ㄺ", "ㄻ", "ㄼ", "ㄽ", "ㄾ", "ㄿ", "ㅀ", "ㅁ", "ㅂ", "ㅄ", "ㅅ", "ㅆ", "ㅇ", "ㅈ", "ㅊ", "ㅋ", "ㅌ", "ㅍ", "ㅎ");</span>

        $LCetable = [<span class="hljs-string">"k"</span>, <span class="hljs-string">"kk"</span>, <span class="hljs-string">"n"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"tt"</span>, <span class="hljs-string">"l"</span>, <span class="hljs-string">"m"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"pp"</span>, <span class="hljs-string">"s"</span>, <span class="hljs-string">"ss"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">"j"</span>, <span class="hljs-string">"jj"</span>, <span class="hljs-string">"ch"</span>, <span class="hljs-string">"k"</span>, <span class="hljs-string">"t"</span>, <span class="hljs-string">"p"</span>, <span class="hljs-string">"h"</span>];
        $MVetable = [<span class="hljs-string">"a"</span>, <span class="hljs-string">"ae"</span>, <span class="hljs-string">"ya"</span>, <span class="hljs-string">"yae"</span>, <span class="hljs-string">"eo"</span>, <span class="hljs-string">"e"</span>, <span class="hljs-string">"yeo"</span>, <span class="hljs-string">"ye"</span>, <span class="hljs-string">"o"</span>, <span class="hljs-string">"wa"</span>, <span class="hljs-string">"wae"</span>, <span class="hljs-string">"oe"</span>, <span class="hljs-string">"yo"</span>, <span class="hljs-string">"u"</span>, <span class="hljs-string">"wo"</span>, <span class="hljs-string">"we"</span>, <span class="hljs-string">"wi"</span>, <span class="hljs-string">"yu"</span>, <span class="hljs-string">"eu"</span>, <span class="hljs-string">"ui"</span>, <span class="hljs-string">"i"</span>];
        $TCetable = [<span class="hljs-string">""</span>, <span class="hljs-string">"g"</span>, <span class="hljs-string">"kk"</span>, <span class="hljs-string">"k"</span>, <span class="hljs-string">"n"</span>, <span class="hljs-string">"n"</span>, <span class="hljs-string">"n"</span>, <span class="hljs-string">"t"</span>, <span class="hljs-string">"l"</span>, <span class="hljs-string">"l"</span>, <span class="hljs-string">"l"</span>, <span class="hljs-string">"l"</span>, <span class="hljs-string">"l"</span>, <span class="hljs-string">"l"</span>, <span class="hljs-string">"l"</span>, <span class="hljs-string">"l"</span>, <span class="hljs-string">"m"</span>, <span class="hljs-string">"p"</span>, <span class="hljs-string">"p"</span>, <span class="hljs-string">"s"</span>, <span class="hljs-string">"ss"</span>, <span class="hljs-string">"ng"</span>, <span class="hljs-string">"j"</span>, <span class="hljs-string">"ch"</span>, <span class="hljs-string">"k"</span>, <span class="hljs-string">"t"</span>, <span class="hljs-string">"p"</span>, <span class="hljs-string">"h"</span>];

        $returnValue = <span class="hljs-string">''</span>;

        <span class="hljs-comment">// UTF-8로 변환된 문장을 유니코드로 변환한다.</span>
        $result = <span class="hljs-keyword">static</span>::utf8ToUnicode($text);

        <span class="hljs-comment">// 유니코드로 변환된 글이 한글코드 안에 있으면 초중성으로 분리한다</span>
        <span class="hljs-comment">// 원본에서 약간 수정함. 한글 외 글자에서 중복패턴이 나오는 부분 수정함.</span>
        <span class="hljs-comment">// 단, 한글외 [0-9a-Z]는 확인했지만 그 외 문자에서는 확인 해 보지 않음.</span>
        <span class="hljs-keyword">foreach</span> ($result <span class="hljs-keyword">AS</span> $key =&gt; $val) {
            <span class="hljs-keyword">if</span> ($val &gt;= <span class="hljs-number">44032</span> &amp;&amp; $val &lt;= <span class="hljs-number">55203</span>) {
                $chr = <span class="hljs-string">""</span>;
                $code = $val;
                $temp1 = $code - <span class="hljs-number">44032</span>;
                $T = (int)$temp1 % <span class="hljs-number">28</span>;
                $temp1 /= <span class="hljs-number">28</span>;
                $V = (int)$temp1 % <span class="hljs-number">21</span>;
                $temp1 /= <span class="hljs-number">21</span>;
                $L = (int)$temp1;
                $chr .= $LCetable[$L] . $MVetable[$V] . $TCetable[$T];

                $returnValue .= ucfirst($chr);
            } <span class="hljs-keyword">else</span> {
                $returnValue .= chr($val);
            }
        }
        <span class="hljs-keyword">return</span> $returnValue;
    }

    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">utf8ToUnicode</span><span class="hljs-params">($str)</span>
    </span>{
        $unicode = [];
        $values = [];
        $lookingFor = <span class="hljs-number">1</span>;

        <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; strlen($str); $i++) {
            $thisValue = ord($str[$i]);
            <span class="hljs-keyword">if</span> ($thisValue &lt; <span class="hljs-number">128</span>) {
                $unicode[] = $thisValue;
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">if</span> (count($values) == <span class="hljs-number">0</span>) {
                    $lookingFor = ($thisValue &lt; <span class="hljs-number">224</span>) ? <span class="hljs-number">2</span> : <span class="hljs-number">3</span>;
                }
                $values[] = $thisValue;
                <span class="hljs-keyword">if</span> (count($values) == $lookingFor) {

                    $number = ($lookingFor == <span class="hljs-number">3</span>) ?
                        (($values[<span class="hljs-number">0</span>] % <span class="hljs-number">16</span>) * <span class="hljs-number">4096</span>) + (($values[<span class="hljs-number">1</span>] % <span class="hljs-number">64</span>) * <span class="hljs-number">64</span>) + ($values[<span class="hljs-number">2</span>] % <span class="hljs-number">64</span>) :
                        (($values[<span class="hljs-number">0</span>] % <span class="hljs-number">32</span>) * <span class="hljs-number">64</span>) + ($values[<span class="hljs-number">1</span>] % <span class="hljs-number">64</span>);

                    $unicode[] = $number;
                    $values = [];
                    $lookingFor = <span class="hljs-number">1</span>;
                }
            }
        }
        <span class="hljs-keyword">return</span> $unicode;
    }
}</pre>
<p><strong>참고자료 :</strong></p>
<ul>
<li><a href="https://gist.github.com/sgmurphy/3098978">URL Slugs in PHP (with UTF-8 and Transliteration Support)</a></li>
<li><a href="http://bluebreeze.co.kr/818">PHP han2eng</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/16/redex-error-writing-mapping-file-no-such-file-or-directory/</id><title type="html">OSX에서 Facebook redex 사용시 Error writing mapping file: No such file or directory 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/16/redex-error-writing-mapping-file-no-such-file-or-directory/"/><published>2016-11-16T19:12:50+09:00</published><updated>2016-11-16T19:12:50+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 앱을 개발하면서 redex를 이용해 최적화를 하고 있다. 이미 proguard를 사용하고 있기 때문에 용량에서는 큰 차이가 나지 않지만 성능면에서 도움이 된다고 소개하고 있어 사용하는 것이다(체감으로는 잘 느끼지 못하겠다). 그런데 오늘 redex에서 오류가 발생했다. Error writing mapping file: No such file or directory 정확히는 내 작업 PC가 아닌 동료의 PC에서 redex를 사용하면서 발생했다. 내 작업 PC에서는 이상이 없어서 확인을 하던 중 redex의 버전 문제인가? 하고 최신 버전을 받아 빌드해서 실행해보니 동일한 오류가 발생했다. 그래서 redex 소스를 뒤져서 원인을 확인하고 오류를 해결했다. 원인은 나중에 다시 언급하도록 하고 일단 해결 방법부터 보자. 아래의 내용을 redex.conf 파일로 저장한다(파일 이름은 상관없다). { "redex": { "passes": [ "ReBindRefsPass", "BridgePass", "SynthPass", "FinalInlinePass", "DelSuperPass", "SingleImplPass", "SimpleInlinePass", "StaticReloPass", "RemoveEmptyClassesPass", "ShortenSrcStringsPass" ] }, "ShortenSrcStringsPass": { "filename_mappings": "filename_mappings.txt" } } 그리고 redex 실행시 -c CONFIG, --config CONFIG Configuration file 옵션을 추가하면 이 오류는 해결된다. 예를들면 아래와 같다(~~ 부분은 기존 옵션). $ redex ~~ -c redex.conf 오류 해결을 위해 추가된 부분은 아래와 같다. 나머지 부분은 redex 소스의 redex/config/default.config 파일 내용과 같다(이 파일이 기본 옵션이 저장된 파일이다). "ShortenSrcStringsPass": { "filename_mappings": "filename_mappings.txt" } 이 문제의 원인은 filename_mappings 옵션의 기본값인 /tmp/filename_mappings.txt 때문이다. /tmp/ 폴더가 시스템 폴더로 redex에서 접근할 권한이 없기 때문에 해당 파일을 찾을 수 없다는 오류가 나는 것이다. 아마도 머지않아 패치가 되겠지만 그 전에 이 오류가 발생하는 사람들에게 도움이 될 수 있기를 바라며 글을 남긴다.]]></summary><content type="html"><![CDATA[<p>안드로이드 앱을 개발하면서 <a href="http://fbredex.com/">redex</a>를 이용해 최적화를 하고 있다. 이미 proguard를 사용하고 있기 때문에 용량에서는 큰 차이가 나지 않지만 성능면에서 도움이 된다고 소개하고 있어 사용하는 것이다(체감으로는 잘 느끼지 못하겠다).</p>
<p>그런데 오늘 redex에서 오류가 발생했다.</p>
<p><a href="https://github.com/facebook/redex/issues/185">Error writing mapping file: No such file or directory</a></p>
<p>정확히는 내 작업 PC가 아닌 동료의 PC에서 redex를 사용하면서 발생했다. 내 작업 PC에서는 이상이 없어서 확인을 하던 중 redex의 버전 문제인가? 하고 최신 버전을 받아 빌드해서 실행해보니 동일한 오류가 발생했다.</p>
<p>그래서 redex 소스를 뒤져서 원인을 확인하고 오류를 해결했다. 원인은 나중에 다시 언급하도록 하고 일단 해결 방법부터 보자.</p>
<p>아래의 내용을 <strong>redex.conf</strong> 파일로 저장한다(파일 이름은 상관없다).</p>
<pre class="hljs json">{
    <span class="hljs-attr">"redex"</span>: {
        <span class="hljs-attr">"passes"</span>: [
            <span class="hljs-string">"ReBindRefsPass"</span>,
            <span class="hljs-string">"BridgePass"</span>,
            <span class="hljs-string">"SynthPass"</span>,
            <span class="hljs-string">"FinalInlinePass"</span>,
            <span class="hljs-string">"DelSuperPass"</span>,
            <span class="hljs-string">"SingleImplPass"</span>,
            <span class="hljs-string">"SimpleInlinePass"</span>,
            <span class="hljs-string">"StaticReloPass"</span>,
            <span class="hljs-string">"RemoveEmptyClassesPass"</span>,
            <span class="hljs-string">"ShortenSrcStringsPass"</span>
        ]
    },
    <span class="hljs-attr">"ShortenSrcStringsPass"</span>: {
        <span class="hljs-attr">"filename_mappings"</span>: <span class="hljs-string">"filename_mappings.txt"</span>
    }
}</pre>
<p>그리고 redex 실행시 <code>-c CONFIG, --config CONFIG Configuration file</code> 옵션을 추가하면 이 오류는 해결된다. 예를들면 아래와 같다(~~ 부분은 기존 옵션).</p>
<pre class="hljs bash">$ redex ~~ -c redex.conf</pre>
<p>오류 해결을 위해 추가된 부분은 아래와 같다. 나머지 부분은 redex 소스의 <code>redex/config/default.config</code> 파일 내용과 같다(이 파일이 기본 옵션이 저장된 파일이다).</p>
<pre class="hljs json"><span class="hljs-string">"ShortenSrcStringsPass"</span>: {
    <span class="hljs-attr">"filename_mappings"</span>: <span class="hljs-string">"filename_mappings.txt"</span>
}</pre>
<p>이 문제의 원인은 <code>filename_mappings</code> 옵션의 기본값인 <code>/tmp/filename_mappings.txt</code> 때문이다. <code>/tmp/</code> 폴더가 시스템 폴더로 redex에서 접근할 권한이 없기 때문에 해당 파일을 찾을 수 없다는 오류가 나는 것이다.</p>
<p>아마도 머지않아 패치가 되겠지만 그 전에 이 오류가 발생하는 사람들에게 도움이 될 수 있기를 바라며 글을 남긴다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/15/linux-find-empty-directory-and-delete/</id><title type="html">리눅스에서 모든 빈 디렉토리 찾기 / 지우기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/15/linux-find-empty-directory-and-delete/"/><published>2016-11-15T15:00:34+09:00</published><updated>2016-11-15T15:00:34+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[리눅스에서 지정한 디렉토리 하위의 모든 빈 디렉토리를 찾거나 지우려면 어떻게 하면 될까? find 명령을 사용하면 아주 간단히 해결할 수 있다. find . -empty -type d -delete -print 위 명령을 사용하면 현재 폴더 하위의 모든 빈 디렉토리를 찾아 출력하고 지운다. 빈 디렉토리를 찾기만 하려면 -delete를 제외하면 되고 반대로 출력없이 모두 지우려면 -print를 제외하면 된다. 폴더를 지정하려면 당연히 . 대신에 원하는 경로를 넣으면 되고 find의 다양한 옵션을 사용해서 원하는 조건을 추가해서 처리 할 수 있다.]]></summary><content type="html"><![CDATA[<p>리눅스에서 지정한 디렉토리 하위의 모든 빈 디렉토리를 찾거나 지우려면 어떻게 하면 될까?</p>
<p><a href="https://linux.die.net/man/1/find">find</a> 명령을 사용하면 아주 간단히 해결할 수 있다.</p>
<pre class="hljs bash">find . -empty -<span class="hljs-built_in">type</span> d -delete -<span class="hljs-built_in">print</span></pre>
<p>위 명령을 사용하면 현재 폴더 하위의 모든 빈 디렉토리를 찾아 출력하고 지운다.</p>
<p>빈 디렉토리를 찾기만 하려면 <code>-delete</code>를 제외하면 되고 반대로 출력없이 모두 지우려면 <code>-print</code>를 제외하면 된다.</p>
<p>폴더를 지정하려면 당연히 <code>.</code> 대신에 원하는 경로를 넣으면 되고 <a href="https://linux.die.net/man/1/find">find</a>의 다양한 옵션을 사용해서 원하는 조건을 추가해서 처리 할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/15/php-nfd-to-nfc/</id><title type="html">PHP에서 NFD(Normalization Form D) / NFC(Normalization Form C) 변환</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/15/php-nfd-to-nfc/"/><published>2016-11-15T13:57:44+09:00</published><updated>2016-11-15T13:57:44+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="osx" label="osx" /><summary><![CDATA[Mac OSX는 경우 문자열을 Unicode Normalization Forms 중 NFD(소리 마디를 첫가끝 코드로 분해)로 처리한다(일반적으로는 NFC(첫가끝 코드를 소리 마디로 결합)를 사용). 이는 한글(U+AC00) 영역을 사용하는 곳에서는 한글이 모두 풀어진 상태로 보이는 문제가 있다. 따라서 U+1100 영역을 U+AC00 영역으로 변환하는 과정이 필요하다. 한글 인코딩의 이해 2편: 유니코드와 Java를 이용한 한글 처리에서는 유니코드 정규화(Unicode equivalence)를 아래와 같이 소개하고 있다. 한글 소리 마디와 한글자모, 한글 자모 확장 이렇게 두 개의 코드 영역이 있다는 것은 같은 글자를 표현하는 서로 다른 두 개의 방법이 있다는 것을 말한다. 이것은 한글뿐만 아니라 다른 언어에서도 나타나는 현상이다. 가령 "ñ"을 표현할 때 U+00F1을 사용할 수도 있고, U+006E (라틴 소문자 "n") 과 U+0303( 결합 틸데 "◌̃")을 연이어 사용하여 표현할 수도 있다. 유니코드 정규화(Unicode equivalence)란 이렇게 연속적인 코드를 사용하여 표현한 어떤 글자를 처리하는 방법을 다루는 명세이다. 유니코드 정규화에는 다음과 같은 네 가지 방법이 있다. 정규화 방법 예 NFD (정준 분해) Normalization Form Canonical Decomposition À (U+00C0) → A (U+0041) + ̀ (U+0300) 위 (U+C704) → ᄋ (U+110B) + ᅱ (U+1171) NFC (정준 분해한 뒤 다시 정준 결합) Normalization Form Canonical Composition A (U+0041) + ̀ (U+0300) → À (U+00C0) ᄋ (U+110B) + ᅱ (U+1171) → 위 (U+C704) NFKD (호환 분해) Normalization Form Compatibility Decomposition ﬁ (U+FB01) → f (U+0066) + i (U+0069) NFKC (호환 분해한 뒤 다시 정준 결합) Normalization Form Compatibility Composition 樂 (U+F914), 樂 (U+F95C), 樂 (U+F9BF) → 樂 (U+6A02) 이중 한글 처리와 관련된 것은 NFD(소리 마디를 첫가끝 코드로 분해)와 NFC(첫가끝 코드를 소리 마디로 결합)이다. NFD에 관련된 내용은 위 링크들을 확인해보면 충분한 정보를 얻을 수 있을테니 오늘은 PHP에서 NFD를 다루는 부분을 소개한다. 참고로 아래의 함수를 사용하기 위해서는 intl 모듈이 설치되어 있어야 한다. 우선 간단한 코드부터 보자. <?php // setlocale(LC_ALL, 'ko_KR.UTF-8'); if (!\Normalizer::isNormalized($text)) { $text = \Normalizer::normalize($text); } 사실 위 코드를 보면 더 이상 설명이 필요 없을 정도로 간단하다. \Normalizer::isNormalized 함수를 사용해서 NFC 형식인지 검사한다. 위 예시는 두 번째 인자인 $from이 생략된 것이다(기본값 : Normalizer::FORM_C). 따라서 두 번째 인자로 Normalizer::FORM_D를 넣어주면 NFD를 검사할 수 있다. NFC 형식이 아니라면 \Normalizer::normalize 함수를 이용해서 NFC 형식으로 변환한다. 이 함수 또한 기본적으로 두 번째 인자로 Normalizer::FORM_C를 사용한다. 마지막으로 주석 처리한 setlocale 부분은 필요 시에만 추가하면 된다(상황에 따라서는 setlocale을 추가하면 한글의 일부가 깨지는 상황이 발생했다.).]]></summary><content type="html"><![CDATA[<p>Mac OSX는 경우 문자열을 <a href="http://unicode.org/reports/tr15/">Unicode Normalization Forms</a> 중 NFD(소리 마디를 첫가끝 코드로 분해)로 처리한다(일반적으로는 NFC(첫가끝 코드를 소리 마디로 결합)를 사용).
이는 한글(<a href="http://www.unicode.org/charts/PDF/UAC00.pdf">U+AC00</a>) 영역을 사용하는 곳에서는 한글이 모두 풀어진 상태로 보이는 문제가 있다.
따라서 <a href="http://www.unicode.org/charts/PDF/U1100.pdf">U+1100</a> 영역을 <a href="http://www.unicode.org/charts/PDF/UAC00.pdf">U+AC00</a> 영역으로 변환하는 과정이 필요하다.</p>
<p><a href="http://d2.naver.com/helloworld/76650">한글 인코딩의 이해 2편: 유니코드와 Java를 이용한 한글 처리</a>에서는 <a href="https://ko.wikipedia.org/wiki/%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C_%EC%A0%95%EA%B7%9C%ED%99%94">유니코드 정규화</a>(<a href="https://en.wikipedia.org/wiki/Unicode_equivalence">Unicode equivalence</a>)를 아래와 같이 소개하고 있다.</p>
<blockquote>
<p>한글 소리 마디와 한글자모, 한글 자모 확장 이렇게 두 개의 코드 영역이 있다는 것은 같은 글자를 표현하는 서로 다른 두 개의 방법이 있다는 것을 말한다.
이것은 한글뿐만 아니라 다른 언어에서도 나타나는 현상이다. 가령 &quot;ñ&quot;을 표현할 때 U+00F1을 사용할 수도 있고, U+006E (라틴 소문자 &quot;n&quot;) 과 U+0303( 결합 틸데 &quot;◌̃&quot;)을 연이어 사용하여 표현할 수도 있다.
유니코드 정규화(Unicode equivalence)란 이렇게 연속적인 코드를 사용하여 표현한 어떤 글자를 처리하는 방법을 다루는 명세이다. 유니코드 정규화에는 다음과 같은 네 가지 방법이 있다.</p>
</blockquote>
<table>
<thead>
<tr>
<th>정규화 방법</th>
<th>예</th>
</tr>
</thead>
<tbody>
<tr>
<td>NFD (정준 분해) Normalization Form Canonical Decomposition</td>
<td>À (U+00C0) → A (U+0041) + ̀ (U+0300) 위 (U+C704) → ᄋ (U+110B) + ᅱ (U+1171)</td>
</tr>
<tr>
<td>NFC (정준 분해한 뒤 다시 정준 결합) Normalization Form Canonical Composition</td>
<td>A (U+0041) + ̀ (U+0300) → À (U+00C0) ᄋ (U+110B) + ᅱ (U+1171) → 위 (U+C704)</td>
</tr>
<tr>
<td>NFKD (호환 분해)  Normalization Form Compatibility Decomposition</td>
<td>ﬁ (U+FB01) → f (U+0066) + i (U+0069)</td>
</tr>
<tr>
<td>NFKC (호환 분해한 뒤 다시 정준 결합) Normalization Form Compatibility Composition</td>
<td>樂 (U+F914), 樂 (U+F95C), 樂 (U+F9BF) → 樂 (U+6A02)</td>
</tr>
</tbody>
</table>
<blockquote>
<p>이중 한글 처리와 관련된 것은 NFD(소리 마디를 첫가끝 코드로 분해)와 NFC(첫가끝 코드를 소리 마디로 결합)이다.</p>
</blockquote>
<p>NFD에 관련된 내용은 위 링크들을 확인해보면 충분한 정보를 얻을 수 있을테니 오늘은 PHP에서 NFD를 다루는 부분을 소개한다.
참고로 아래의 함수를 사용하기 위해서는 <a href="http://php.net/manual/kr/book.intl.php">intl</a> 모듈이 설치되어 있어야 한다.</p>
<p>우선 간단한 코드부터 보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">// setlocale(LC_ALL, 'ko_KR.UTF-8');</span>
<span class="hljs-keyword">if</span> (!\Normalizer::isNormalized($text)) {
  $text = \Normalizer::normalize($text);
}</pre>
<p>사실 위 코드를 보면 더 이상 설명이 필요 없을 정도로 간단하다.
<a href="http://php.net/manual/kr/normalizer.isnormalized.php">\Normalizer::isNormalized</a> 함수를 사용해서 NFC 형식인지 검사한다.
위 예시는 두 번째 인자인 <code>$from</code>이 생략된 것이다(기본값 : <code>Normalizer::FORM_C</code>). 따라서 두 번째 인자로 <code>Normalizer::FORM_D</code>를 넣어주면 NFD를 검사할 수 있다.</p>
<p>NFC 형식이 아니라면 <a href="http://php.net/manual/kr/normalizer.normalize.php">\Normalizer::normalize</a> 함수를 이용해서 NFC 형식으로 변환한다.
이 함수 또한 기본적으로 두 번째 인자로 <code>Normalizer::FORM_C</code>를 사용한다.</p>
<p>마지막으로 주석 처리한 <code>setlocale</code> 부분은 필요 시에만 추가하면 된다(상황에 따라서는 <code>setlocale</code>을 추가하면 한글의 일부가 깨지는 상황이 발생했다.).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/07/php-ternary-operator-vs-null-coalescing-operator/</id><title type="html">PHP 삼항 연산자 : Ternary Operator 와 Null Coalesce Operator</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/07/php-ternary-operator-vs-null-coalescing-operator/"/><published>2016-11-07T08:02:12+09:00</published><updated>2016-11-07T08:02:12+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP에도 삼항 연산자:Ternary operator 가 있다. 메뉴얼에는 아래와 같이 설명되어 있다. <?php // 사용 예제: 삼항 연산자 $action = (empty($_POST['action'])) ? 'default' : $_POST['action']; // 위 예제는 다음의 if/else 구문과 동일합니다 if (empty($_POST['action'])) { $action = 'default'; } else { $action = $_POST['action']; } (expr1) ? (expr2) : (expr3) 표현은 expr1이 TRUE이면 expr2로 평가되고, expr1이 FALSE이면 expr3로 평가됩니다. PHP 5.3부터, 삼항 연산자의 중간 부분을 비울 수 있습니다. 표현식 expr1 ?: expr3은 expr1이 TRUE이면 expr1, 아니면 expr3를 반환합니다. PHP 5.3부터 expr2를 비울 수 있다고 되어 있다. 다시 말해 (expr1) ?: (expr3)라는 표현을 사용할 수 있다. 그리고 한가지. 아래와 같이 삼항식을 중첩할 경우는 괄호를 사용해서 묶어줄 것을 권장한다. 삼항 연사자를 "쌓는" 일을 피하길 권합니다. 하나의 구문에서 하나를 초과하는 삼항 연산자를 사용할 때, PHP 작동은 명확하지 않습니다: Example #3 명확하지 않은 삼항 작동 <?php // 얼핏 보기에, 'true'를 출력할 것 같습니다 echo (true?'true':false?'t':'f'); // 그러나 위의 실제 출력은 't'입니다 // 이는 삼항 표현이 왼쪽에서 오른쪽으로 평가되기 때문입니다 // 다음이 위 코드와 동일한 더 명확한 버전입니다 echo ((true ? 'true' : 'false') ? 't' : 'f'); // 여기서, 첫 표현이 'true'로 평가되고, 이것이 // (bool)true로 전환되어 평가된 후, 두 번째 // 삼항 표현의 true쪽을 반환합니다. ?> add a note add a note 이와 유사하지만 다른 삼항 연산자인 Null 병법 연산자:Null Coalesce Operator가 PHP 7부터 지원된다. 한글 이름을 딱히 뭐라 부를지가 애매한데 위키피디아에서 "Null 병법 연산자"라는 이름을 사용하고 있다. isset($_GET['mykey']) ? $_GET['mykey'] : "" 위 두가지 삼항식은 동일한 것 같지만 자세히보면 다르다. 한가지는 empty를 다른 한가지는 isset을 대체한다. 그리고 한가지 알아야할 중요한 사항이 있다. PHP ternary operator vs null coalescing operator에 예시가 나와 있듯이 ?:는 선언되지 않은 변수를 사용할 경우 E_NOTICE가 발생한다. 다시말해 완전히 empty 처럼 동작하는 것은 아니다.]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/">PHP</a>에도 <a href="http://php.net/manual/kr/language.operators.comparison.php#language.operators.comparison.ternary">삼항 연산자:Ternary operator</a>
가 있다. <a href="http://php.net/manual/kr/language.operators.comparison.php#language.operators.comparison.ternary">메뉴얼</a>에는 아래와 같이 설명되어 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">// 사용 예제: 삼항 연산자</span>
$action = (<span class="hljs-keyword">empty</span>($_POST[<span class="hljs-string">'action'</span>])) ? <span class="hljs-string">'default'</span> : $_POST[<span class="hljs-string">'action'</span>];

<span class="hljs-comment">// 위 예제는 다음의 if/else 구문과 동일합니다</span>
<span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>($_POST[<span class="hljs-string">'action'</span>])) {
    $action = <span class="hljs-string">'default'</span>;
} <span class="hljs-keyword">else</span> {
    $action = $_POST[<span class="hljs-string">'action'</span>];
}</pre>
<blockquote>
<p>(expr1) ? (expr2) : (expr3) 표현은 expr1이 TRUE이면 expr2로 평가되고, expr1이 FALSE이면 expr3로 평가됩니다.
PHP 5.3부터, 삼항 연산자의 중간 부분을 비울 수 있습니다. 표현식 expr1 ?: expr3은 expr1이 TRUE이면 expr1, 아니면 expr3를 반환합니다.</p>
</blockquote>
<p>PHP 5.3부터 <code>expr2</code>를 비울 수 있다고 되어 있다. 다시 말해 <code>(expr1) ?: (expr3)</code>라는 표현을 사용할 수 있다.</p>
<p>그리고 한가지. 아래와 같이 삼항식을 중첩할 경우는 괄호를 사용해서 묶어줄 것을 권장한다.</p>
<blockquote>
<p>삼항 연사자를 &quot;쌓는&quot; 일을 피하길 권합니다. 하나의 구문에서 하나를 초과하는 삼항 연산자를 사용할 때, PHP 작동은 명확하지 않습니다:
Example #3 명확하지 않은 삼항 작동</p>
</blockquote>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">// 얼핏 보기에, 'true'를 출력할 것 같습니다</span>
<span class="hljs-keyword">echo</span> (<span class="hljs-keyword">true</span>?<span class="hljs-string">'true'</span>:<span class="hljs-keyword">false</span>?<span class="hljs-string">'t'</span>:<span class="hljs-string">'f'</span>);

<span class="hljs-comment">// 그러나 위의 실제 출력은 't'입니다</span>
<span class="hljs-comment">// 이는 삼항 표현이 왼쪽에서 오른쪽으로 평가되기 때문입니다</span>

<span class="hljs-comment">// 다음이 위 코드와 동일한 더 명확한 버전입니다</span>
<span class="hljs-keyword">echo</span> ((<span class="hljs-keyword">true</span> ? <span class="hljs-string">'true'</span> : <span class="hljs-string">'false'</span>) ? <span class="hljs-string">'t'</span> : <span class="hljs-string">'f'</span>);

<span class="hljs-comment">// 여기서, 첫 표현이 'true'로 평가되고, 이것이</span>
<span class="hljs-comment">// (bool)true로 전환되어 평가된 후, 두 번째</span>
<span class="hljs-comment">// 삼항 표현의 true쪽을 반환합니다.</span>
<span class="hljs-meta">?&gt;</span>
add a note add a note</pre>
<p>이와 유사하지만 다른 삼항 연산자인 <a href="https://wiki.php.net/rfc/isset_ternary">Null 병법 연산자:Null Coalesce Operator</a>가 PHP 7부터 지원된다. 한글 이름을 딱히 뭐라 부를지가 애매한데 <a href="https://ko.wikipedia.org/wiki/PHP">위키피디아</a>에서 &quot;Null 병법 연산자&quot;라는 이름을 사용하고 있다.</p>
<pre class="hljs php"><span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">'mykey'</span>]) ? $_GET[<span class="hljs-string">'mykey'</span>] : <span class="hljs-string">""</span></pre>
<p>위 두가지 삼항식은 동일한 것 같지만 자세히보면 다르다. 한가지는 <a href="http://php.net/manual/kr/function.empty.php">empty</a>를 다른 한가지는 <a href="http://php.net/manual/kr/function.isset.php">isset</a>을 대체한다.</p>
<p>그리고 한가지 알아야할 중요한 사항이 있다. <a href="http://stackoverflow.com/a/34571460/6736772">PHP ternary operator vs null coalescing operator</a>에 예시가 나와 있듯이 <code>?:</code>는 선언되지 않은 변수를 사용할 경우 E_NOTICE가 발생한다. 다시말해 완전히 <a href="http://php.net/manual/kr/function.empty.php">empty</a> 처럼 동작하는 것은 아니다. </p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/04/contenteditable-set-caret-at-the-end-of-the-text-cross-browser/</id><title type="html">contenteditable이 설정된 개체의 시작 또는 끝에 커서(Caret) 넣기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/04/contenteditable-set-caret-at-the-end-of-the-text-cross-browser/"/><published>2016-11-04T12:21:39+09:00</published><updated>2016-11-04T12:21:39+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[이번에 MediumEditor를 사용하면서 추가 기능을 개발하던 중 편집 개체에 내용을 추가하는 처리가 필요했다. 커서가 편집 개체 내부에 있다면 pasteHTML() 함수를 간단하게 처리가 된다. 그런데 커서가 편집 개체 밖에 있을 경우엔 넣을 수 없다. 그래서 프로그램에서 커서를 넣어줘야 하는데 fucus를 이용하면 맨 앞으로 들어가서 원하는 결과를 얻을 수 없었다. 그레서 방법을 찾던 중 contenteditable, set caret at the end of the text (cross-browser)라는 글에서 방법을 찾았다. contenteditable="true"가 설정된 개체의 시작 또는 끝에 커서(Caret) 넣는 방법은 아래와 같다. function createCaretPlacer(atStart) { return function(el) { el.focus(); if (typeof window.getSelection != "undefined" && typeof document.createRange != "undefined") { var range = document.createRange(); range.selectNodeContents(el); range.collapse(atStart); var sel = window.getSelection(); sel.removeAllRanges(); sel.addRange(range); } else if (typeof document.body.createTextRange != "undefined") { var textRange = document.body.createTextRange(); textRange.moveToElementText(el); textRange.collapse(atStart); textRange.select(); } }; } var placeCaretAtStart = createCaretPlacer(true); var placeCaretAtEnd = createCaretPlacer(false); 이를 활용해 MediumEditor에 적용하는 코드는 아래와 같다. if (editor.exportSelection() == null) { var placeCaretAtEnd = createCaretPlacer(false); placeCaretAtEnd(document.getElementById(id)); } editor.pasteHTML(html); exportSelection를 사용해서 커서가 편집 개체 안에 있는지를 검사해서 커서가 없다면 맨 마지막에 필요한 html 코드를 추가한다.]]></summary><content type="html"><![CDATA[<p>이번에 <a href="https://github.com/yabwe/medium-editor">MediumEditor</a>를 사용하면서 추가 기능을 개발하던 중 편집 개체에 내용을 추가하는 처리가 필요했다. 커서가 편집 개체 내부에 있다면 <a href="https://github.com/yabwe/medium-editor/blob/master/API.md#pastehtmlhtml-options">pasteHTML()</a> 함수를 간단하게 처리가 된다. 그런데 커서가 편집 개체 밖에 있을 경우엔 넣을 수 없다. 그래서 프로그램에서 커서를 넣어줘야 하는데 fucus를 이용하면 맨 앞으로 들어가서 원하는 결과를 얻을 수 없었다. 그레서 방법을 찾던 중 <a href="http://stackoverflow.com/a/4238971/6736772">contenteditable, set caret at the end of the text (cross-browser)</a>라는 글에서 방법을 찾았다.</p>
<p><code>contenteditable="true"</code>가 설정된 개체의 시작 또는 끝에 커서(Caret) 넣는 방법은 아래와 같다.</p>
<pre class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createCaretPlacer</span>(<span class="hljs-params">atStart</span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">el</span>) </span>{
        el.focus();
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span>.getSelection != <span class="hljs-string">"undefined"</span>
                &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">document</span>.createRange != <span class="hljs-string">"undefined"</span>) {
            <span class="hljs-keyword">var</span> range = <span class="hljs-built_in">document</span>.createRange();
            range.selectNodeContents(el);
            range.collapse(atStart);
            <span class="hljs-keyword">var</span> sel = <span class="hljs-built_in">window</span>.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">document</span>.body.createTextRange != <span class="hljs-string">"undefined"</span>) {
            <span class="hljs-keyword">var</span> textRange = <span class="hljs-built_in">document</span>.body.createTextRange();
            textRange.moveToElementText(el);
            textRange.collapse(atStart);
            textRange.select();
        }
    };
}

<span class="hljs-keyword">var</span> placeCaretAtStart = createCaretPlacer(<span class="hljs-literal">true</span>);
<span class="hljs-keyword">var</span> placeCaretAtEnd = createCaretPlacer(<span class="hljs-literal">false</span>);</pre>
<p>이를 활용해 <a href="https://github.com/yabwe/medium-editor">MediumEditor</a>에 적용하는 코드는 아래와 같다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">if</span> (editor.exportSelection() == <span class="hljs-literal">null</span>) {
    <span class="hljs-keyword">var</span> placeCaretAtEnd = createCaretPlacer(<span class="hljs-literal">false</span>);
    placeCaretAtEnd(<span class="hljs-built_in">document</span>.getElementById(id));
}
editor.pasteHTML(html);</pre>
<p><a href="https://github.com/yabwe/medium-editor/blob/master/API.md#exportselection">exportSelection</a>를 사용해서 커서가 편집 개체 안에 있는지를 검사해서 커서가 없다면 맨 마지막에 필요한 html 코드를 추가한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/04/remove-http-referer/</id><title type="html">HTTP referrer(referer) 숨기기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/04/remove-http-referer/"/><published>2016-11-04T11:50:26+09:00</published><updated>2016-11-04T11:50:26+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="html" label="html" /><category term="js" label="js" /><summary><![CDATA[브라우저에서 http 요청을 하는 경우 대부분 referrer 정보가 넘어간다.(HTTP 리퍼러를 정의한 RFC에서 'referrer'를 'referer'라고 잘못 친 것에서 기인하여 HTTP 리퍼러는 'HTTP referer'라고 불린다 : 위키백과) 그런데 간혹 이 referrer를 숨기고 싶을 때가 있다. 현 페이지에서 resouces(js, css, image, ajax 등)를 요청할 때나 페이지를 이동할 때 referrer가 전송되는데 여기서는 resouces를 호출할 때 referrer를 숨기는 방법에 대해 설명하려고 한다. <meta> Tag를 이용한 referrer 제거 Remove http referrer에 보면 아래와 같이 referrer를 제거하는 방법을 소개하고 있다. <meta name="referrer" content="no-referrer" /> var meta = document.createElement('meta'); meta.name = "referrer"; meta.content = "no-referrer"; document.getElementsByTagName('head')[0].appendChild(meta); html, javascript로 처리하는 두가지 방식이 있는데 html의 경우 <head> 내부에 넣어주면 된다. 그리고 javascript의 경우는 필요한 시점에 실행해주면 된다. 예를들어 특정 ajax 호출시에만 referrer를 숨기고자 하는 경우 등이다. no-referrer 외에 사용할 수 있는 값은 unsafe-url, origin-when-cross-origin 등이 있는데 자세한 내용은 W3C Referrer Policy를 참고하면 된다. 여기보면 <a href="http://example.com" referrerpolicy="origin"> 와 같이 개별 링크에 Referrer 정책을 지정하는 방법들도 안내되어 있다. <IFrame> Tag를 이용한 referrer 제거 다른 방법으로는 iframe을 이용해서 referrer를 제거할 수 있다. 일단 아래의 코드를 보자. <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html> <head> <style type="text/css"> html, body { width:100%; height:100%; margin:0; padding:0; } textarea { display:none; } iframe { width:100%; height:100%; } </style> </head> <body> <textarea id="html"><!-- 실제 들어갈 HTML --></textarea> <script type="text/javascript"> var iframe = document.createElement('iframe'); document.body.appendChild(iframe); var html = document.getElementById('html').value; // 가장 간단하지만 crass domain 문제가 있을 수 있다. // iframe.src = 'data:text/html;charset=utf-8,' + encodeURI(html); // cross domain issue 해결 iframe.srcdoc = html; // (iframe.contentDefault || iframe.contentWindow.document).domain = document.domain; </script> </body> </html> srcdoc이 생소하다면 Which is the difference between srcdoc=“…” and src=“data:text/html,…” in an ?를 참고하길 바란다. 아주 간단한 코드니 굳이 설명하지 않아도 내용은 이해할 수 있으리라 본다. 원리만 간단히 설명하자면 iframe은 하나의 독립 문서이므로 새로운 iframe을 만들고 동적으로 html을 출력하면 넘겨주고 싶어도 넘겨줄 referrer가 없으므로 referrer를 제거하는 것과 같은 효과가 난다. 사실 이 방법은 referrer를 숨기는 것 외에도 여러가지로 활용될 수 있다(활용은 개인의 몫).]]></summary><content type="html"><![CDATA[<p>브라우저에서 http 요청을 하는 경우 대부분 referrer 정보가 넘어간다.(HTTP 리퍼러를 정의한 RFC에서 'referrer'를 'referer'라고 잘못 친 것에서 기인하여 HTTP 리퍼러는 'HTTP referer'라고 불린다 : <a href="https://ko.wikipedia.org/wiki/%EB%A6%AC%ED%8D%BC%EB%9F%AC">위키백과</a>)</p>
<p>그런데 간혹 이 referrer를 숨기고 싶을 때가 있다. 현 페이지에서 resouces(js, css, image, ajax 등)를 요청할 때나 페이지를 이동할 때 referrer가 전송되는데 여기서는 resouces를 호출할 때 referrer를 숨기는 방법에 대해 설명하려고 한다.</p>
<hr />
<ul>
<li><em><code>&lt;meta&gt;</code> Tag를 이용한 referrer 제거</em></li>
</ul>
<p><a href="http://stackoverflow.com/a/32014225/6736772">Remove http referrer</a>에 보면 아래와 같이 referrer를 제거하는 방법을 소개하고 있다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"referrer"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"no-referrer"</span> /&gt;</span></pre>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> meta = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'meta'</span>);
meta.name = <span class="hljs-string">"referrer"</span>;
meta.content = <span class="hljs-string">"no-referrer"</span>;
<span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'head'</span>)[<span class="hljs-number">0</span>].appendChild(meta);</pre>
<p>html, javascript로 처리하는 두가지 방식이 있는데 html의 경우 <code>&lt;head&gt;</code> 내부에 넣어주면 된다. 그리고 javascript의 경우는 필요한 시점에 실행해주면 된다. 예를들어 특정 ajax 호출시에만 referrer를 숨기고자 하는 경우 등이다.</p>
<p><code>no-referrer</code> 외에 사용할 수 있는 값은 <code>unsafe-url</code>, <code>origin-when-cross-origin</code> 등이 있는데 자세한 내용은 <a href="https://www.w3.org/TR/referrer-policy/">W3C Referrer Policy</a>를 참고하면 된다. 여기보면 <code>&lt;a href="http://example.com" referrerpolicy="origin"&gt;</code> 와 같이 개별 링크에 Referrer 정책을 지정하는 방법들도 안내되어 있다.</p>
<hr />
<ul>
<li><em><code>&lt;IFrame&gt;</code> Tag를 이용한 referrer 제거</em></li>
</ul>
<p>다른 방법으로는 iframe을 이용해서 referrer를 제거할 수 있다. 일단 아래의 코드를 보자.</p>
<pre class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css">
        <span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span> { <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>; }
        <span class="hljs-selector-tag">textarea</span> { <span class="hljs-attribute">display</span>:none; }
        <span class="hljs-selector-tag">iframe</span> { <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>; }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"html"</span>&gt;</span><span class="hljs-comment">&lt;!-- 실제 들어갈 HTML --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript">
    <span class="hljs-keyword">var</span> iframe = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'iframe'</span>);
    <span class="hljs-built_in">document</span>.body.appendChild(iframe);

    <span class="hljs-keyword">var</span> html = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'html'</span>).value;

    <span class="hljs-comment">// 가장 간단하지만 crass domain 문제가 있을 수 있다.</span>
    <span class="hljs-comment">// iframe.src = 'data:text/html;charset=utf-8,' + encodeURI(html);</span>

    <span class="hljs-comment">// cross domain issue 해결</span>
    iframe.srcdoc = html;

    <span class="hljs-comment">// (iframe.contentDefault || iframe.contentWindow.document).domain = document.domain;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></pre>
<p><code>srcdoc</code>이 생소하다면 <a href="http://stackoverflow.com/questions/19739001/which-is-the-difference-between-srcdoc-and-src-datatext-html-in-an">Which is the difference between srcdoc=“…” and src=“data:text/html,…” in an <iframe>?</a>를 참고하길 바란다.</p>
<p>아주 간단한 코드니 굳이 설명하지 않아도 내용은 이해할 수 있으리라 본다. 원리만 간단히 설명하자면 iframe은 하나의 독립 문서이므로 새로운 iframe을 만들고 동적으로 html을 출력하면 넘겨주고 싶어도 넘겨줄 referrer가 없으므로 referrer를 제거하는 것과 같은 효과가 난다. 사실 이 방법은 referrer를 숨기는 것 외에도 여러가지로 활용될 수 있다(활용은 개인의 몫).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/04/decompile-actionscript-from-swf-by-show-my-code/</id><title type="html">Flash swf 파일에서 ActionScript 추출하기(Show My Code)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/04/decompile-actionscript-from-swf-by-show-my-code/"/><published>2016-11-04T11:34:35+09:00</published><updated>2016-11-04T11:34:35+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="flash" label="flash" /><summary><![CDATA[예전에는 Flash를 가끔씩 사용했던 적이 있었지만 최근 몇년 동안에는 관련된 처리를 할 일이 없었다(요즘엔 거의 사용을 하지 않으니 개발할 이유도 없었다). 그런데 이번에 작업을 하던 중 직접 Flash를 제작하는 것이 아니라 이미 만들어진 swf 파일의 ActionScript 소스 코드를 확인해야 하는 일이 생겼다. swf Decompiler는 검색하면 많이 나오기 때문에 크게 어려운 일은 아니지만 대부분 데모 버전으로 ActionScript를 확인하는데 불편함이 있어서 찾아보던 중 ShowMyCode.com이란 사이트를 발견했다. 여기선 swf 파일을 올리면 바로 ActionScript를 확인 할 수 있고 다운 받을 수도 있다. 그런데 이 사이트는 swf decompile 만 제공하는 것이 아니라 아래의 프로그램들도 decompile 가능하다. PHP file encoded with Zend Guard Decode and get source of php files encoded with Zend Guard. This process also called dezending and the program called dezender (de-zender). So, dezend php files and get the source code! Java class Decompile java CLASS files and save source code in text. Reconstruct the original source code from the compiled binary. Adobe flash swf Decompile flash ActionScript from the swf flash file. Use this online flash swf decompiler to get the source code of the swf file. .NET application Decompile .NET application and get it source code. Now you can get close to original source code of C# (c sharp), Visual Basic .NET (VB.NET.), Visual C++ .NET (VC++.NET) and J# (jay-sharp). QR Code Image QR-code Reader. Decode a QR Code and get text! It's a two-dimensional bar code. The "QR" is derived from "Quick Response". Most current mobile phones can read this code with their camera. UTF-8 is supported. 대부분 전문적인 decompiler 들이 있겠지만 간단히 확인이 필요할 때는 유용하게 사용할 수 있을 것 같아 남겨둔다.]]></summary><content type="html"><![CDATA[<p>예전에는 Flash를 가끔씩 사용했던 적이 있었지만 최근 몇년 동안에는 관련된 처리를 할 일이 없었다(요즘엔 거의 사용을 하지 않으니 개발할 이유도 없었다). 그런데 이번에 작업을 하던 중 직접 Flash를 제작하는 것이 아니라 이미 만들어진 swf 파일의 ActionScript 소스 코드를 확인해야 하는 일이 생겼다. swf Decompiler는 검색하면 많이 나오기 때문에 크게 어려운 일은 아니지만 대부분 데모 버전으로 ActionScript를 확인하는데 불편함이 있어서 찾아보던 중 <a href="http://www.showmycode.com/">ShowMyCode.com</a>이란 사이트를 발견했다. 여기선 swf 파일을 올리면 바로 ActionScript를 확인 할 수 있고 다운 받을 수도 있다.</p>
<p>그런데 이 사이트는 swf decompile 만 제공하는 것이 아니라 아래의 프로그램들도 decompile 가능하다.</p>
<ul>
<li>
<p>PHP file encoded with Zend Guard</p>
<blockquote>
<p>Decode and get source of php files encoded with Zend Guard. This process also called dezending and the program called dezender (de-zender). So, dezend php files and get the source code!</p>
</blockquote>
</li>
<li>
<p>Java class</p>
<blockquote>
<p>Decompile java CLASS files and save source code in text. Reconstruct the original source code from the compiled binary.</p>
</blockquote>
</li>
<li>
<p>Adobe flash swf</p>
<blockquote>
<p>Decompile flash ActionScript from the swf flash file. Use this online flash swf decompiler to get the source code of the swf file.</p>
</blockquote>
</li>
<li>
<p>.NET application</p>
<blockquote>
<p>Decompile .NET application and get it source code. Now you can get close to original source code of C# (c sharp), Visual Basic .NET (VB.NET.), Visual C++ .NET (VC++.NET) and J# (jay-sharp).</p>
</blockquote>
</li>
<li>
<p>QR Code Image</p>
<blockquote>
<p>QR-code Reader. Decode a QR Code and get text! It's a two-dimensional bar code. The &quot;QR&quot; is derived from &quot;Quick Response&quot;. Most current mobile phones can read this code with their camera. UTF-8 is supported.</p>
</blockquote>
</li>
</ul>
<p>대부분 전문적인 decompiler 들이 있겠지만 간단히 확인이 필요할 때는 유용하게 사용할 수 있을 것 같아 남겨둔다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/11/01/nokogiri-libxml2-missing-mac-os-x-10-12/</id><title type="html">OSX에서 Nokogiri 설치시 'Libxml2 missing.' 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/11/01/nokogiri-libxml2-missing-mac-os-x-10-12/"/><published>2016-11-01T13:34:54+09:00</published><updated>2016-11-01T13:34:54+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><category term="jekyll" label="jekyll" /><summary><![CDATA[OSX (sierra)에서 jekyll을 설치하던 중 Nokogiri가 설치되는 과정에서 아래의 오류가 발생하고 더 이상이 진행되지 않는 문제가 발생했다. libxml2 is missing. Please locate mkmf.log to investigate how it is failing. 이 문제는 libxml2가 설치되지 않아서 발생하는 문제로 libxml2부터 설치해야 한다. $ brew install libxml2 그런데 설치 후에도 동일한 문제가 발생한다면 Nokogiri를 직접 설치하면 된다. Libxml2 missing mac os x 10.10 글에 보면 아래와 같은 방법을 제시하고 있으나 정상적으로 동작하지 않았다. $ sudo env ARCHFLAGS="-arch x86_64" gem install nokogiri:1.6.4.1 -- --use-system-libraries --with-xml=/usr/local/Cellar/libxml2/ 나의 경우는 아래와 같이 실행하면 정상적으로 Nokogiri를 설치할 수 있었다. $ gem install pkg-config -v "~> 1.1.7" $ sudo gem install -n /usr/local/bin nokogiri -- --use-system-libraries=true --with-xml2-include=/usr/include/libxml2/]]></summary><content type="html"><![CDATA[<p>OSX (sierra)에서 jekyll을 설치하던 중 <a href="http://www.nokogiri.org/">Nokogiri</a>가 설치되는 과정에서 아래의 오류가 발생하고 더 이상이 진행되지 않는 문제가 발생했다.</p>
<blockquote>
<p>libxml2 is missing.  Please locate mkmf.log to investigate how it is failing.</p>
</blockquote>
<p>이 문제는 libxml2가 설치되지 않아서 발생하는 문제로 libxml2부터 설치해야 한다.</p>
<pre class="hljs bash">$ brew install libxml2</pre>
<p>그런데 설치 후에도 동일한 문제가 발생한다면 <a href="http://www.nokogiri.org/">Nokogiri</a>를 직접 설치하면 된다.</p>
<p><a href="http://stackoverflow.com/questions/26878263/libxml2-missing-mac-os-x-10-10">Libxml2 missing mac os x 10.10</a> 글에 보면 아래와 같은 방법을 제시하고 있으나 정상적으로 동작하지 않았다.</p>
<pre class="hljs bash">$ sudo env ARCHFLAGS=<span class="hljs-string">"-arch x86_64"</span> gem install nokogiri:1.6.4.1 -- --use-system-libraries --with-xml=/usr/<span class="hljs-built_in">local</span>/Cellar/libxml2/</pre>
<p>나의 경우는 아래와 같이 실행하면 정상적으로 Nokogiri를 설치할 수 있었다.</p>
<pre class="hljs bash">$ gem install pkg-config -v <span class="hljs-string">"~&gt; 1.1.7"</span>
$ sudo gem install -n /usr/<span class="hljs-built_in">local</span>/bin nokogiri -- --use-system-libraries=<span class="hljs-literal">true</span> --with-xml2-include=/usr/include/libxml2/</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/10/26/nginx-504-error/</id><title type="html">nginx 504 Gateway Time-out 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/10/26/nginx-504-error/"/><published>2016-10-26T20:54:05+09:00</published><updated>2016-10-26T20:54:05+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[nginx에서 504 Gateway Time-out 오류가 발생할 경우는 리버스 프록시에서의 응답이 지정 시간보다 늦어질 경우다. 접속이 지연되는 경우는 서버의 부하 문제나 WAS의 오류로 인한 것이니 nginx가 아닌 WAS 쪽에서 해결해야하는 것이 맞을 것이다. 간혹 특수한 경우에 WAS 쪽의 처리가 오랜 시간을 필요로 하는 경우 어쩔 수 없이 timeout을 늘려야 하는 경우가 있을 수 있다. 이런 경우라면 proxy_connect_timeout, proxy_send_timeout, proxy_read_timeout 등을 사용해서 시간을 늘려줄 수 있다(기본은 60초다). server { ... location / { proxy_connect_timeout 300; proxy_send_timeout 300; proxy_read_timeout 300; send_timeout 300; } } 사실 이런 경우는 서비스 중에는 발생해서는 안된다. 사용자가 이렇게 오랜 시간을 기다려줄 리가 없기 때문이다. 이런 기능이 필요하다면 Job Queue를 이용하거나 사용자에게 안내 메시지를 보내고 백그라운드에서 계속 실행되도록 하는 것이 맞을 것이다. php 에서는 이런 경우에 대비해서 fastcgi_finish_request를 제공한다. 이 함수를 실행하면 사용자에게는 프로세스가 종료된 것처럼 response를 보내고 남은 작업을 계속 실행한다. 다른 방법은 ob_flush와 flush를 이용해서 response를 지속적으로 보내서 timeout이 발생하지 않도록 하는 것이다.]]></summary><content type="html"><![CDATA[<p>nginx에서 <em>504 Gateway Time-out</em> 오류가 발생할 경우는 리버스 프록시에서의 응답이 지정 시간보다 늦어질 경우다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2016/10/504.png" alt="nginx 504 Gateway Time-out" width="1254" height="186" /></p>
<p>접속이 지연되는 경우는 서버의 부하 문제나 WAS의 오류로 인한 것이니 nginx가 아닌 WAS 쪽에서 해결해야하는 것이 맞을 것이다.</p>
<p>간혹 특수한 경우에 WAS 쪽의 처리가 오랜 시간을 필요로 하는 경우 어쩔 수 없이 timeout을 늘려야 하는 경우가 있을 수 있다. 이런 경우라면 <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_connect_timeout">proxy_connect_timeout</a>, <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_send_timeout">proxy_send_timeout</a>, <a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_read_timeout">proxy_read_timeout</a> 등을 사용해서 시간을 늘려줄 수 있다(기본은 60초다).</p>
<pre class="hljs nginx"><span class="hljs-section">server</span> {
    ...

    <span class="hljs-attribute">location</span> / {
        <span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">300</span>;
        <span class="hljs-attribute">proxy_send_timeout</span> <span class="hljs-number">300</span>;
        <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">300</span>;
        <span class="hljs-attribute">send_timeout</span> <span class="hljs-number">300</span>;
    }
}</pre>
<p>사실 이런 경우는 서비스 중에는 발생해서는 안된다. 사용자가 이렇게 오랜 시간을 기다려줄 리가 없기 때문이다. 이런 기능이 필요하다면 Job Queue를 이용하거나 사용자에게 안내 메시지를 보내고 백그라운드에서 계속 실행되도록 하는 것이 맞을 것이다.</p>
<p>php 에서는 이런 경우에 대비해서 <a href="http://php.net/manual/kr/function.fastcgi-finish-request.php">fastcgi_finish_request</a>를 제공한다. 이 함수를 실행하면 사용자에게는 프로세스가 종료된 것처럼 response를 보내고 남은 작업을 계속 실행한다.</p>
<p>다른 방법은 <a href="http://php.net/manual/kr/function.ob-flush.php">ob_flush</a>와 <a href="http://php.net/manual/kr/function.flush.php">flush</a>를 이용해서 response를 지속적으로 보내서 timeout이 발생하지 않도록 하는 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/10/19/mac-os-git-korean-file-name-error/</id><title type="html">Mac 에서 git 사용시 한글 파일명 문제</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/10/19/mac-os-git-korean-file-name-error/"/><published>2016-10-19T17:51:22+09:00</published><updated>2017-06-26T17:32:39+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><category term="git" label="git" /><summary><![CDATA[맥에서 git 사용시 파일이 한글로되어 있을 경우 해당 파일을 제대로 인식하지 못하는 문제가 있다(NFD 문제로 한글 자소단위로 분리되어 저장된다). 맥에서의 한글 문제야 어제 오늘의 문제도 아니긴 하지만 한글 파일명을 사용해야 할 경우는 상당히 불편하다. 방법을 예전부터 찾고 있었는데 얼마전 우연히 관련 자료를 찾았다. 그래서 간단히 해결 방법만 남긴다. git config --global core.precomposeunicode true git config --local core.precomposeunicode true Git Documentation core.precomposeUnicode This option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git. update 위 옵션만으로는 다른 문제가 남아 있어서 Mac 에서 git 사용시 한글 파일명 문제 2에서 다른 옵션 한가지를 더 소개한다.]]></summary><content type="html"><![CDATA[<p>맥에서 git 사용시 파일이 한글로되어 있을 경우 해당 파일을 제대로 인식하지 못하는 문제가 있다(NFD 문제로 한글 자소단위로 분리되어 저장된다).
맥에서의 한글 문제야 어제 오늘의 문제도 아니긴 하지만 한글 파일명을 사용해야 할 경우는 상당히 불편하다.
방법을 예전부터 찾고 있었는데 얼마전 우연히 관련 자료를 찾았다. 그래서 간단히 해결 방법만 남긴다.</p>
<pre class="hljs bash">git config --global core.precomposeunicode <span class="hljs-literal">true</span>
git config --<span class="hljs-built_in">local</span> core.precomposeunicode <span class="hljs-literal">true</span></pre>
<blockquote>
<p><a href="http://git-scm.com/docs/git-config">Git Documentation</a></p>
<p><strong>core.precomposeUnicode</strong></p>
<p>This option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git.</p>
</blockquote>
<h3>update</h3>
<p>위 옵션만으로는 다른 문제가 남아 있어서 <a href="https://blog.asamaru.net/2017/06/26/mac-os-git-korean-file-name-corequotepath">Mac 에서 git 사용시 한글 파일명 문제 2</a>에서 다른 옵션 한가지를 더 소개한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/09/27/android-adb-device-reconnect/</id><title type="html">안드로이드 스튜디오에서 디바이스 연결이 끊어질 경우 다시 연결하는 방법</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/09/27/android-adb-device-reconnect/"/><published>2016-09-27T10:59:50+09:00</published><updated>2016-09-27T10:59:50+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 앱을 개발시 에뮬레이터를 사용하는 경우도 있으나 대부분의 경우는 실제 기기를 연결해서 작업하는 경우가 많다. 기존 에뮬레이터의 경우 너무 느린 속도와 호환 문제로 잘 사용하지 않는다. 최근 성능과 안정성이 많이 개선 되었다고는 하나 아직 여러가지 문제가 있다(예를들어 vagrant와 동시에 사용할 수 없다). 기기를 사용해서 작업하는 경우 거추장스러운 선을 제거하기 위해 WIFI를 연결해서 디버깅하는 경우(안드로이드 스튜디오에서 WIFI로 Run/Install/Debug 하기)도 있으나 연결의 귀찮음과 안정성 문제로 직접 선을 꽂아서 사용하는 경우가 많다. 그런데 선을 직접 연결해도 수시로 adb와 디바이스의 연결이 끊어지는 문제가 발생하는 경우가 있다. 나의 경우 맥을 sierra로 업데이트 후 너무 심해졌다. 수시로 끊어지고 있다. 예전의 경우엔 USB 선의 문제로 이런 경우가 많았는데 이번엔 선을 바꿔봐도 소용이 없었다. 그래서 선을 매번 뺐다 꽂아서 다시 작업을 하고 있었는데 안 그래도 아이폰에 비해 단자가 헐거워지거나 고장 나는 경우가 많은데 계속 뺐다 꽂았다하기에는 무리가 있다. 그래서 관련 자료를 찾아보니 PC에서 내보내는 전력이 안드로이드 기기에 충분하지 않지 않을 경우 이런 현상이 발생할 수 있고 최신 맥북에서 발생하는 경우가 많다는 사람이 있었다. 다른 사람은 USB 3.0을 사용하면서 그랬다는 사람도 있고... 이런 경우 아래와 같이 USB 설정을 변경해서 해결했다는 사람들도 있었으나 맥에서는 관련 설정을 찾을 수 없었다(내가 못찾는 것일지도). Scroll to the right and type 'Power Options' in the search field and click on it. Click 'Change plan setting' on your chosen plan. Click 'Change advanced power setting' on your chosen plan. Find 'USB settings' and open. Find 'USB selective suspend setting' and change it to disabled. 그래서 일단은 연결이 끊어지면 아래의 방법을 해결하고 있다. $ adb kill-server && adb start-server 귀찮기는하나 선을 매번 꽂았다 뺐다 하지 않아도 되는 것으로 일단 참고 있다.]]></summary><content type="html"><![CDATA[<p>안드로이드 앱을 개발시 에뮬레이터를 사용하는 경우도 있으나 대부분의 경우는 실제 기기를 연결해서 작업하는 경우가 많다. 기존 에뮬레이터의 경우 너무 느린 속도와 호환 문제로 잘 사용하지 않는다. 최근 성능과 안정성이 많이 개선 되었다고는 하나 아직 여러가지 문제가 있다(예를들어 vagrant와 동시에 사용할 수 없다).</p>
<p>기기를 사용해서 작업하는 경우 거추장스러운 선을 제거하기 위해 WIFI를 연결해서 디버깅하는 경우(<a href="https://blog.asamaru.net/2015/09/07/android-run-slash-install-slash-debug-applications-over-wifi/">안드로이드 스튜디오에서 WIFI로 Run/Install/Debug 하기</a>)도 있으나 연결의 귀찮음과 안정성 문제로 직접 선을 꽂아서 사용하는 경우가 많다.</p>
<p>그런데 선을 직접 연결해도 수시로 adb와 디바이스의 연결이 끊어지는 문제가 발생하는 경우가 있다. 나의 경우 맥을 sierra로 업데이트 후 너무 심해졌다. 수시로 끊어지고 있다. 예전의 경우엔 USB 선의 문제로 이런 경우가 많았는데 이번엔 선을 바꿔봐도 소용이 없었다. 그래서 선을 매번 뺐다 꽂아서 다시 작업을 하고 있었는데 안 그래도 아이폰에 비해 단자가 헐거워지거나 고장 나는 경우가 많은데 계속 뺐다 꽂았다하기에는 무리가 있다.</p>
<p>그래서 관련 자료를 찾아보니 PC에서 내보내는 전력이 안드로이드 기기에 충분하지 않지 않을 경우 이런 현상이 발생할 수 있고 최신 맥북에서 발생하는 경우가 많다는 사람이 있었다. 다른 사람은 USB 3.0을 사용하면서 그랬다는 사람도 있고...</p>
<p>이런 경우 아래와 같이 USB 설정을 변경해서 해결했다는 사람들도 있었으나 맥에서는 관련 설정을 찾을 수 없었다(내가 못찾는 것일지도).</p>
<ol>
<li>Scroll to the right and type 'Power Options' in the search field and click on it.</li>
<li>Click 'Change plan setting' on your chosen plan.</li>
<li>Click 'Change advanced power setting' on your chosen plan.</li>
<li>Find 'USB settings' and open.</li>
<li>Find 'USB selective suspend setting' and change it to disabled.</li>
</ol>
<p>그래서 일단은 연결이 끊어지면 아래의 방법을 해결하고 있다.</p>
<pre class="hljs bash">$ adb <span class="hljs-built_in">kill</span>-server &amp;&amp; adb start-server</pre>
<p>귀찮기는하나 선을 매번 꽂았다 뺐다 하지 않아도 되는 것으로 일단 참고 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/09/23/google-service-library-9-6-0-used-read-phone-state-permission/</id><title type="html">Google Service Library 9.6.0 사용시 READ_PHONE_STATE 권한이 추가되는 문제</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/09/23/google-service-library-9-6-0-used-read-phone-state-permission/"/><published>2016-09-23T07:41:21+09:00</published><updated>2016-09-23T07:41:21+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[최근 서비스 중인 앱에서 사용중이던 Google Service Library의 버전을 최신 버전으로 변경했다. 기존에 사용중이던 버전은 9.2.1 이었다. 얼마전 9.4.0으로 변경된 것을 확인하고 9.4.0을 적용했다. debug 모드와 release 모드에서의 동작을 확인한 후 "베타 테스트"에 올려 보니 이상하게도 모든 테스트 기기에서 앱이 응답하지 않는 문제가 확인되었다. 오류 보고나 기록이 나타나는 것도 아니어서 문제 확인이 어려웠고 처음엔 다른 작업 중에 변경한 코드들에서 원인이 있을 것이라고 추측 했었다. 하지만 많은 부분의 작업을 했던 터라 정확한 원인을 찾기가 어려웠다. 기존에 firebase를 사용하지만 FCM이 아닌 GCM을 그대로 사용하고 있었는데 이것이 원인일 수 있겠다는 생각으로 FCM으로 변경했으나 문제가 해결되지 않았다. 계속 테스트를 하던 중 Google Service Library를 다시 확인하니 21일자로 9.6.0이 새로 나온 것을 확인하고 혹시나하고 한번 더 버전업하고 사전 출시 테스트를 하니 앱이 응답하지 않는 문제가 해결 되었다. 아마도 9.4.0과 해당 앱의 코드가 충돌하는 문제가 있었거나 9.4.0 버전 자체에 버그가 있었던 것으로 생각된다. 하지만 문제는 여기서 다시 시작된다. 9.6.0을 사용하니 앱을 업데이트 하려고 할 때 추가 권한을 요구하고 있었다. 요구하는 권한은 아래와 같다. android.permission.READ_PHONE_STATE android.permission.READ_EXTERNAL_STORAGE android.permission.WRITE_EXTERNAL_STORAGE 문제는 다른 것은 두더라도 READ_PHONE_STATE 권한을 요구한다는 것이다. 이 부분은 사용자에게 불필요한 권한을 요구하는 부정적인 이미지를 줄 수 있어 문제가 있다고 생각하고 관련 정보를 찾아봤다. Firebase + Permissions Issue 223459: Play Services library adding unnecessary READ_PHONE_STATE permission 확인해보니 나 말고도 이런 현상을 겪는 사람들이 있었던 것이다. 9.4.0을 사용하면 앱이 응답하지 않는 문제가 발생할 확률이 있고(모두에게 발생하는 문제로는 보이지 않는다) 9.6.0은 불필요한 권한들이 추가되는 문제가 있다. 그래서 현재로써는 9.2.1로 다시 되돌린 상태다. 당분간 AOSP에서 해당 이슈를 지켜봐야 할 것 같다. 현재 나의 경우는 AdMob을 사용하는 경우에 이 문제가 발생하는 것으로 보인다. 우선은 해당 권한이 실제로 필요 없다면 아래와 같이 부모 프로젝트에서 제거 할 수는 있다. <uses-permission android:name="android.permission.READ_PHONE_STATE" tools:node="remove" /> <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" tools:node="remove" /> <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" tools:node="remove" /> update : 2016.09.27. 오늘 확인해보니 역시나 9.6.1이 새로 올라왔으며 해당 권한에 대한 patch가 포함되어 있다.]]></summary><content type="html"><![CDATA[<p>최근 서비스 중인 앱에서 사용중이던 <a href="https://developers.google.com/android/guides/releases?hl=ko">Google Service Library</a>의 버전을 최신 버전으로 변경했다.
기존에 사용중이던 버전은 9.2.1 이었다. 얼마전 9.4.0으로 변경된 것을 확인하고 9.4.0을 적용했다. debug 모드와 release 모드에서의 동작을 확인한 후 &quot;베타 테스트&quot;에 올려 보니 이상하게도 모든 테스트 기기에서 앱이 응답하지 않는 문제가 확인되었다. 오류 보고나 기록이 나타나는 것도 아니어서 문제 확인이 어려웠고 처음엔 다른 작업 중에 변경한 코드들에서 원인이 있을 것이라고 추측 했었다. 하지만 많은 부분의 작업을 했던 터라 정확한 원인을 찾기가 어려웠다.</p>
<p>기존에 firebase를 사용하지만 FCM이 아닌 GCM을 그대로 사용하고 있었는데 이것이 원인일 수 있겠다는 생각으로 FCM으로 변경했으나 문제가 해결되지 않았다.</p>
<p>계속 테스트를 하던 중 <a href="https://developers.google.com/android/guides/releases?hl=ko">Google Service Library</a>를 다시 확인하니 21일자로 9.6.0이 새로 나온 것을 확인하고 혹시나하고 한번 더 버전업하고 사전 출시 테스트를 하니 앱이 응답하지 않는 문제가 해결 되었다. 아마도 9.4.0과 해당 앱의 코드가 충돌하는 문제가 있었거나 9.4.0 버전 자체에 버그가 있었던 것으로 생각된다.</p>
<p>하지만 문제는 여기서 다시 시작된다. 9.6.0을 사용하니 앱을 업데이트 하려고 할 때 추가 권한을 요구하고 있었다. 요구하는 권한은 아래와 같다.</p>
<pre><code>android.permission.READ_PHONE_STATE
android.permission.READ_EXTERNAL_STORAGE
android.permission.WRITE_EXTERNAL_STORAGE</code></pre>
<p>문제는 다른 것은 두더라도 <code>READ_PHONE_STATE</code> 권한을 요구한다는 것이다. 이 부분은 사용자에게 불필요한 권한을 요구하는 부정적인 이미지를 줄 수 있어 문제가 있다고 생각하고 관련 정보를 찾아봤다.</p>
<ul>
<li><a href="http://stackoverflow.com/questions/38307751/firebase-permissions">Firebase + Permissions</a></li>
<li><a href="https://code.google.com/p/android/issues/detail?id=223459">Issue 223459:    Play Services library adding unnecessary READ_PHONE_STATE permission</a></li>
</ul>
<p>확인해보니 나 말고도 이런 현상을 겪는 사람들이 있었던 것이다.</p>
<p>9.4.0을 사용하면 앱이 응답하지 않는 문제가 발생할 확률이 있고(모두에게 발생하는 문제로는 보이지 않는다) 9.6.0은 불필요한 권한들이 추가되는 문제가 있다.</p>
<p>그래서 현재로써는 9.2.1로 다시 되돌린 상태다. 당분간 <a href="https://code.google.com/p/android/">AOSP</a>에서 해당 이슈를 지켜봐야 할 것 같다.</p>
<p>현재 나의 경우는 AdMob을 사용하는 경우에 이 문제가 발생하는 것으로 보인다.
우선은 해당 권한이 실제로 필요 없다면 아래와 같이 부모 프로젝트에서 제거 할 수는 있다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span>
    <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.READ_PHONE_STATE"</span>
    <span class="hljs-attr">tools:node</span>=<span class="hljs-string">"remove"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span>
    <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.READ_EXTERNAL_STORAGE"</span>
    <span class="hljs-attr">tools:node</span>=<span class="hljs-string">"remove"</span> /&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span>
    <span class="hljs-attr">android:name</span>=<span class="hljs-string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>
    <span class="hljs-attr">tools:node</span>=<span class="hljs-string">"remove"</span> /&gt;</span></pre>
<hr />
<p>update : 2016.09.27.</p>
<p>오늘 확인해보니 역시나 9.6.1이 새로 올라왔으며 해당 권한에 대한 patch가 포함되어 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/08/12/playing-html5-video-on-fullscreen-in-android-webview/</id><title type="html">안드로이드 WebView에서 HTML5 Video Full Screen 지원</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/08/12/playing-html5-video-on-fullscreen-in-android-webview/"/><published>2016-08-12T20:15:23+09:00</published><updated>2016-08-12T20:15:23+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 WebView에서 HTML5 Video를 재생할 경우 "전체창으로 보기"를 사용할 수 있다. 그런데 자동적으로 사용할 수 있는 것이 아니라 관련된 처리를 직접 해주어야 한다. 필요한 처리는 아래와 같다. WebView에 WebChromeClient를 설정해 주어야 한다. 그렇지 않으면 4.0 이후에서 NullPointerException이 발생한다. WebChromeClient를 설정하더라도 [onShowCustomView()](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowCustomView%28android.view.View, android.webkit.WebChromeClient.CustomViewCallback%29)를 구현해주지 않으면 전체창 보기 상태에서 영상은 나오지 않고 소리만 재생되는 현상이 발생한다. android:hardwareAccelerated="true" 등을 사용해서 Application 또는 해당 Activity에 하드웨어 가속을 켜줘야 한다. [onShowCustomView()](https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowCustomView%28android.view.View, android.webkit.WebChromeClient.CustomViewCallback%29)를 구현한 소스는 아래와 같다. import android.app.Activity; import android.content.Context; import android.os.Build; import android.support.v4.content.ContextCompat; import android.view.MotionEvent; import android.view.View; import android.view.ViewGroup; import android.view.Window; import android.view.WindowManager; import android.webkit.WebChromeClient; import android.widget.FrameLayout; public class FullscreenableChromeClient extends WebChromeClient { private Activity mActivity = null; private View mCustomView; private WebChromeClient.CustomViewCallback mCustomViewCallback; private int mOriginalOrientation; private FrameLayout mFullscreenContainer; private static final FrameLayout.LayoutParams COVER_SCREEN_PARAMS = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT); public FullscreenableChromeClient(Activity activity) { this.mActivity = activity; } @Override public void onShowCustomView(View view, CustomViewCallback callback) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) { if (mCustomView != null) { callback.onCustomViewHidden(); return; } mOriginalOrientation = mActivity.getRequestedOrientation(); FrameLayout decor = (FrameLayout) mActivity.getWindow().getDecorView(); mFullscreenContainer = new FullscreenHolder(mActivity); mFullscreenContainer.addView(view, COVER_SCREEN_PARAMS); decor.addView(mFullscreenContainer, COVER_SCREEN_PARAMS); mCustomView = view; setFullscreen(true); mCustomViewCallback = callback; // mActivity.setRequestedOrientation(requestedOrientation); } super.onShowCustomView(view, callback); } @SuppressWarnings("deprecation") @Override public void onShowCustomView(View view, int requestedOrientation, WebChromeClient.CustomViewCallback callback) { this.onShowCustomView(view, callback); } @Override public void onHideCustomView() { if (mCustomView == null) { return; } setFullscreen(false); FrameLayout decor = (FrameLayout) mActivity.getWindow().getDecorView(); decor.removeView(mFullscreenContainer); mFullscreenContainer = null; mCustomView = null; mCustomViewCallback.onCustomViewHidden(); mActivity.setRequestedOrientation(mOriginalOrientation); } private void setFullscreen(boolean enabled) { Window win = mActivity.getWindow(); WindowManager.LayoutParams winParams = win.getAttributes(); final int bits = WindowManager.LayoutParams.FLAG_FULLSCREEN; if (enabled) { winParams.flags |= bits; } else { winParams.flags &= ~bits; if (mCustomView != null) { mCustomView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE); } } win.setAttributes(winParams); } private static class FullscreenHolder extends FrameLayout { public FullscreenHolder(Context ctx) { super(ctx); setBackgroundColor(ContextCompat.getColor(ctx, android.R.color.black)); } @Override public boolean onTouchEvent(MotionEvent evt) { return true; } } } 사용법은 아래와 같다. webView.setWebChromeClient(new FullscreenableChromeClient(activity)); 비슷한 방법으로 Playing HTML5 video on fullscreen in android webview에서 안내하는 방법도 있다. 어쨌든 결론은 Full Screen을 위한 별도의 View를 구성해줘야 한다는 것이다. 항상 느끼는 것이지만 이런 것들은 OS 또는 SDK 차원에서 기본적으로 제공하고 Custom이 필요할 경우만 처리하도록 하면 될 텐데 안드로이드는 이런 부분들이 너무 부족하다.]]></summary><content type="html"><![CDATA[<p>안드로이드 WebView에서 HTML5 Video를 재생할 경우 &quot;전체창으로 보기&quot;를 사용할 수 있다. 그런데 자동적으로 사용할 수 있는 것이 아니라 관련된 처리를 직접 해주어야 한다.</p>
<p>필요한 처리는 아래와 같다.</p>
<ul>
<li>WebView에 WebChromeClient를 설정해 주어야 한다. 그렇지 않으면 4.0 이후에서 NullPointerException이 발생한다.</li>
<li>WebChromeClient를 설정하더라도  [onShowCustomView()](<a href="https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowCustomView%28android.view.View">https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowCustomView%28android.view.View</a>, android.webkit.WebChromeClient.CustomViewCallback%29)를 구현해주지 않으면 전체창 보기 상태에서 영상은 나오지 않고 소리만 재생되는 현상이 발생한다.</li>
<li><code>android:hardwareAccelerated="true"</code> 등을 사용해서 Application 또는 해당 Activity에 하드웨어 가속을 켜줘야 한다.</li>
</ul>
<p>[onShowCustomView()](<a href="https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowCustomView%28android.view.View">https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowCustomView%28android.view.View</a>, android.webkit.WebChromeClient.CustomViewCallback%29)를 구현한 소스는 아래와 같다.</p>
<pre class="hljs java"><span class="hljs-keyword">import</span> android.app.Activity;
<span class="hljs-keyword">import</span> android.content.Context;
<span class="hljs-keyword">import</span> android.os.Build;
<span class="hljs-keyword">import</span> android.support.v4.content.ContextCompat;
<span class="hljs-keyword">import</span> android.view.MotionEvent;
<span class="hljs-keyword">import</span> android.view.View;
<span class="hljs-keyword">import</span> android.view.ViewGroup;
<span class="hljs-keyword">import</span> android.view.Window;
<span class="hljs-keyword">import</span> android.view.WindowManager;
<span class="hljs-keyword">import</span> android.webkit.WebChromeClient;
<span class="hljs-keyword">import</span> android.widget.FrameLayout;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FullscreenableChromeClient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebChromeClient</span> </span>{
    <span class="hljs-keyword">private</span> Activity mActivity = <span class="hljs-keyword">null</span>;

    <span class="hljs-keyword">private</span> View mCustomView;
    <span class="hljs-keyword">private</span> WebChromeClient.CustomViewCallback mCustomViewCallback;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> mOriginalOrientation;

    <span class="hljs-keyword">private</span> FrameLayout mFullscreenContainer;

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> FrameLayout.LayoutParams COVER_SCREEN_PARAMS = <span class="hljs-keyword">new</span> FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FullscreenableChromeClient</span><span class="hljs-params">(Activity activity)</span> </span>{
        <span class="hljs-keyword">this</span>.mActivity = activity;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onShowCustomView</span><span class="hljs-params">(View view, CustomViewCallback callback)</span> </span>{
        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
            <span class="hljs-keyword">if</span> (mCustomView != <span class="hljs-keyword">null</span>) {
                callback.onCustomViewHidden();
                <span class="hljs-keyword">return</span>;
            }

            mOriginalOrientation = mActivity.getRequestedOrientation();
            FrameLayout decor = (FrameLayout) mActivity.getWindow().getDecorView();
            mFullscreenContainer = <span class="hljs-keyword">new</span> FullscreenHolder(mActivity);
            mFullscreenContainer.addView(view, COVER_SCREEN_PARAMS);
            decor.addView(mFullscreenContainer, COVER_SCREEN_PARAMS);
            mCustomView = view;
            setFullscreen(<span class="hljs-keyword">true</span>);
            mCustomViewCallback = callback;
<span class="hljs-comment">//          mActivity.setRequestedOrientation(requestedOrientation);</span>
        }

        <span class="hljs-keyword">super</span>.onShowCustomView(view, callback);
    }

    <span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"deprecation"</span>)
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onShowCustomView</span><span class="hljs-params">(View view, <span class="hljs-keyword">int</span> requestedOrientation, WebChromeClient.CustomViewCallback callback)</span> </span>{
        <span class="hljs-keyword">this</span>.onShowCustomView(view, callback);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onHideCustomView</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">if</span> (mCustomView == <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">return</span>;
        }

        setFullscreen(<span class="hljs-keyword">false</span>);
        FrameLayout decor = (FrameLayout) mActivity.getWindow().getDecorView();
        decor.removeView(mFullscreenContainer);
        mFullscreenContainer = <span class="hljs-keyword">null</span>;
        mCustomView = <span class="hljs-keyword">null</span>;
        mCustomViewCallback.onCustomViewHidden();
        mActivity.setRequestedOrientation(mOriginalOrientation);
    }

    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFullscreen</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> enabled)</span> </span>{
        Window win = mActivity.getWindow();
        WindowManager.LayoutParams winParams = win.getAttributes();
        <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> bits = WindowManager.LayoutParams.FLAG_FULLSCREEN;
        <span class="hljs-keyword">if</span> (enabled) {
            winParams.flags |= bits;
        } <span class="hljs-keyword">else</span> {
            winParams.flags &amp;= ~bits;
            <span class="hljs-keyword">if</span> (mCustomView != <span class="hljs-keyword">null</span>) {
                mCustomView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
            }
        }
        win.setAttributes(winParams);
    }

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FullscreenHolder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FrameLayout</span> </span>{
        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FullscreenHolder</span><span class="hljs-params">(Context ctx)</span> </span>{
            <span class="hljs-keyword">super</span>(ctx);
            setBackgroundColor(ContextCompat.getColor(ctx, android.R.color.black));
        }

        <span class="hljs-meta">@Override</span>
        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">onTouchEvent</span><span class="hljs-params">(MotionEvent evt)</span> </span>{
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
        }
    }
}</pre>
<p>사용법은 아래와 같다.</p>
<pre class="hljs java">webView.setWebChromeClient(<span class="hljs-keyword">new</span> FullscreenableChromeClient(activity));</pre>
<p>비슷한 방법으로 <a href="http://stackoverflow.com/a/16179544">Playing HTML5 video on fullscreen in android webview</a>에서 안내하는 방법도 있다.</p>
<p>어쨌든 결론은 Full Screen을 위한 별도의 View를 구성해줘야 한다는 것이다. 항상 느끼는 것이지만 이런 것들은 OS 또는 SDK 차원에서 기본적으로 제공하고 Custom이 필요할 경우만 처리하도록 하면 될 텐데 안드로이드는 이런 부분들이 너무 부족하다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/08/01/android-webview-resumetimers-pausetimers/</id><title type="html">안드로이드 WebView resumeTimers() / pauseTimers() 적용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/08/01/android-webview-resumetimers-pausetimers/"/><published>2016-08-01T16:56:09+09:00</published><updated>2016-08-01T16:56:09+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드의 WebView를 사용하다 보면 처음 페이지를 보여줄 때는 정상적으로 보이나 두 번째 이후부터 페이지를 정상적으로 표시하지 못하는 경우가 있다. 이 경우는 여러가지 이유로 발생할 수 있으나 오늘은 pauseTimers / resumeTimers 때문에 발생하는 경우에 대한 이야기를 하고자 한다. 우선 이 함수들이 필요한 이유부터 간단히 알아보자. 메뉴얼에서 pauseTimers를 찾아보면 아래와 같이 설명되어 있다. Pauses all layout, parsing, and JavaScript timers for all WebViews. This is a global requests, not restricted to just this WebView. This can be useful if the application has been paused. 현재 보여지는 웹뷰뿐만 아니라 모든 웹뷰에 대해 layout, parsing, JavaScript timers 를 멈추도록 지시한다. 이것이 왜 필요할까? 안드로이드는 기본적으로 앱이 백그라운드 상태로 들어가더라도 웹뷰의 동작은 자동적으로 멈추지 않고 계속 동작하기 때문이다. 이렇게되면 앱을 사용하지 않더라도 지속적으로 연산 작업이 일어나므로 배터리를 더 많이 사용하게 된다(이런 문제라면 OS 차원에서 알아서 처리하면 될텐데 왜 개발자가 직접이 문제를 처리해 주어야하는지 이해가 안된다). 이 문제를 해결하기 위해서는 Activity를 벗어날 때 pauseTimers를 호출해주면 된다. 그런데 이렇게 처리해 주었다면 Activity에 복귀할 때는 pauseTimers를 필히 호출해줘야 한다. 그렇지 않으면 화면이 보여지지 않는 문제를 만날 수 있다. 여러 사람들의 이야기를 들어보면 이 현상은 기기마다 차이가 있는 것으로 보인다(문제가 발생하는 기기도 있고 그렇지 않은 기기도 있다는 뜻). 간단한 해결 방법은 아래와 같이 WebView를 사용하는 Activity의 onResume, onPause에서 직접 처리해주면 된다. @Override protected void onResume() { super.onResume(); webView.resumeTimers(); } @Override protected void onPause() { super.onPause(); webView.pauseTimers(); } Activity 단위로 처리하는 것이 귀찮다면 application의 life cycle에 맞춰서 일괄적으로 처리해도 된다. 메뉴얼에 나와 있듯이 application 전체의 웹뷰에 일괄적으로 적용되므로.]]></summary><content type="html"><![CDATA[<p>안드로이드의 WebView를 사용하다 보면 처음 페이지를 보여줄 때는 정상적으로 보이나 두 번째 이후부터 페이지를 정상적으로 표시하지 못하는 경우가 있다. 이 경우는 여러가지 이유로 발생할 수 있으나 오늘은  <a href="https://developer.android.com/reference/android/webkit/WebView.html#pauseTimers%28%29">pauseTimers</a> / <a href="https://developer.android.com/reference/android/webkit/WebView.html#resumeTimers%28%29">resumeTimers</a> 때문에 발생하는 경우에 대한 이야기를 하고자 한다.</p>
<p>우선 이 함수들이 필요한 이유부터 간단히 알아보자.</p>
<p>메뉴얼에서 <a href="https://developer.android.com/reference/android/webkit/WebView.html#pauseTimers%28%29">pauseTimers</a>를 찾아보면 아래와 같이 설명되어 있다.</p>
<blockquote>
<p>Pauses all layout, parsing, and JavaScript timers for all WebViews. This is a global requests, not restricted to just this WebView. This can be useful if the application has been paused.</p>
</blockquote>
<p>현재 보여지는 웹뷰뿐만 아니라 모든 웹뷰에 대해 layout, parsing, JavaScript timers 를 멈추도록 지시한다. 이것이 왜 필요할까? 안드로이드는 기본적으로 앱이 백그라운드 상태로 들어가더라도 웹뷰의 동작은 자동적으로 멈추지 않고 계속 동작하기 때문이다. 이렇게되면 앱을 사용하지 않더라도 지속적으로 연산 작업이 일어나므로 배터리를 더 많이 사용하게 된다(이런 문제라면 OS 차원에서 알아서 처리하면 될텐데 왜 개발자가 직접이 문제를 처리해 주어야하는지 이해가 안된다).</p>
<p>이 문제를 해결하기 위해서는 Activity를 벗어날 때 <a href="https://developer.android.com/reference/android/webkit/WebView.html#pauseTimers%28%29">pauseTimers</a>를 호출해주면 된다.</p>
<p>그런데 이렇게 처리해 주었다면 Activity에 복귀할 때는 <a href="https://developer.android.com/reference/android/webkit/WebView.html#pauseTimers%28%29">pauseTimers</a>를 필히 호출해줘야 한다. 그렇지 않으면 화면이 보여지지 않는 문제를 만날 수 있다. 여러 사람들의 이야기를 들어보면 이 현상은 기기마다 차이가 있는 것으로 보인다(문제가 발생하는 기기도 있고 그렇지 않은 기기도 있다는 뜻).</p>
<p>간단한 해결 방법은 아래와 같이 WebView를 사용하는 Activity의 onResume, onPause에서 직접 처리해주면 된다.</p>
<pre class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResume</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">super</span>.onResume();

  webView.resumeTimers();
}

<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onPause</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-keyword">super</span>.onPause();

  webView.pauseTimers();
}</pre>
<p>Activity 단위로 처리하는 것이 귀찮다면 application의 life cycle에 맞춰서 일괄적으로 처리해도 된다. 메뉴얼에 나와 있듯이 application 전체의 웹뷰에 일괄적으로 적용되므로.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/07/30/android-4-4-3-4-4-4-webview-referer-doesn-t-work/</id><title type="html">Android 4.4.3, 4.4.4 Webview Referer 오류 수정</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/07/30/android-4-4-3-4-4-4-webview-referer-doesn-t-work/"/><published>2016-07-30T07:47:48+09:00</published><updated>2016-07-30T07:47:48+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 WebView를 사용하면서 특정 페이지로의 접근시 Referer를 지정해서 넘기도록 처리해서 사용중인 앱이 있다. 그런데 테스트 도중 이상한 문제가 발생했다. Android 4.4.4에서만 지정한 Referer를 무시하고 넘기지 않는 것이다. 그래서 조금 찾아보니 아래와 같은 글들이 있었다. Webview/UIWebview Header에 HTTP Referer 추가 Android OS 4.4 이상의 단말에서는 Webview가 Chromium기반으로 변경되면서 Referer 추가해도 HTTP Header에 설정이 되지 않는 문제 발생( 이건 targetSDK 버전을 올려야 적용 ) http://lapture.net/?p=2619 버그라고들 이야기 하는데 버그가 아닌 것 같다. 보안상의 문제로 Chrominum Webview에서는 ‘Referer’ Key는 추가로 설정하지 못하도록 방지한 느낌이 든다. ( 그냥 혼자만의 생각 – 혹시 아시는 분은 연락주세요 ㅜㅡㅜ ) 여기서는 버그가 아닌 보안 상의 문제로 보인다고 했지만 아래의 글을 보면 결국 버그인 것으로 보인다(보안 상 문제가 있다는 생각으로 개발자가 뺐을 수도 있겠지만...). Nexus 5 referer string value is coming as null even if we pass it Project Member #2 sgu...@android.com This is fixed and will be released in next version of Android. Thanks, 이 글에서 보면 Project Member가 다음 버전에 수정하겠다는 답변을 달아 놓았다. 그리고 이글에서 보면 4.4.3과 4.4.4에서만 이 현상이 나타난다는 댓글도 있다. 모든 기기를 테스트할 수는 없으나 내가 확인한 기기들에서는 4.4.2는 이상이 없고 4.4.4에서는 실제로 이상이 있었다. 결론은 4.4.3, 4.4.4 기기에서는 Referer를 사용할 수 없다는 것인데 이렇게 되면 이 방법을 아예 사용할 수가 없는 것과 같다. 그래서 방법을 찾아봤지만 해결책을 제시한 곳을 찾을 수 없었다. 하지만 수많은 테스트 결과 찾은 방법이 있어 아래에 공유한다. Map<String, String> extraHeaders = new HashMap<>(); String referer = "~~~"; extraHeaders.put("Referer", referer); if (("4.4.3".equals(android.os.Build.VERSION.RELEASE)) || ("4.4.4".equals(android.os.Build.VERSION.RELEASE))) { // 4.4.3 ~ 4.4.4 에서 Referer가 누락되는 문제를 수정하기 위함 extraHeaders.put("Referer ", referer); } view.loadUrl(url, extraHeaders); 아주 간단하다. "Referer" 대신 "Referer "를 사용하는 것이다. HTTP 프로토콜에서 Referer는 다음과 같은 형식이다. Referer : ~~~ 따라서 Referer 뒤에 공백하나 더 들어가도 규칙엔 문제가 없으므로 정상 동작한다. 다행히 안드로이드에서 문자열을 trim하지 않고 비교하고 있어서 간단하게 해결된다. 개발자의 실수가 다행인 경우도 있을 수 있구나.]]></summary><content type="html"><![CDATA[<p>안드로이드 WebView를 사용하면서 특정 페이지로의 접근시 Referer를 지정해서 넘기도록 처리해서 사용중인 앱이 있다. 그런데 테스트 도중 이상한 문제가 발생했다. Android 4.4.4에서만 지정한 Referer를 무시하고 넘기지 않는 것이다. 그래서 조금 찾아보니 아래와 같은 글들이 있었다.</p>
<ul>
<li><a href="https://withwontae.wordpress.com/tag/webview/">Webview/UIWebview Header에 HTTP Referer 추가</a></li>
</ul>
<blockquote>
<p>Android OS 4.4 이상의 단말에서는 Webview가 Chromium기반으로 변경되면서 Referer 추가해도 HTTP Header에 설정이 되지 않는 문제 발생( 이건 targetSDK 버전을 올려야 적용 )</p>
<p><a href="http://lapture.net/?p=2619">http://lapture.net/?p=2619</a></p>
<p>버그라고들 이야기 하는데 버그가 아닌 것 같다. 보안상의 문제로 Chrominum Webview에서는 ‘Referer’ Key는 추가로 설정하지 못하도록 방지한 느낌이 든다.  ( 그냥 혼자만의 생각 – 혹시 아시는 분은 연락주세요 ㅜㅡㅜ )</p>
</blockquote>
<p>여기서는 버그가 아닌 보안 상의 문제로 보인다고 했지만 아래의 글을 보면 결국 버그인 것으로 보인다(보안 상 문제가 있다는 생각으로 개발자가 뺐을 수도 있겠지만...).</p>
<ul>
<li><a href="https://code.google.com/p/android/issues/detail?id=72323">Nexus 5 referer string value is coming as null even if we pass it</a></li>
</ul>
<blockquote>
<p>Project Member #2 sgu...@android.com
This is fixed and will be released in next version of Android. Thanks,</p>
</blockquote>
<p>이 글에서 보면 <code>Project Member</code>가 다음 버전에 수정하겠다는 답변을 달아 놓았다.
그리고 이글에서 보면 4.4.3과 4.4.4에서만 이 현상이 나타난다는 댓글도 있다. 모든 기기를 테스트할 수는 없으나 내가 확인한 기기들에서는 4.4.2는 이상이 없고 4.4.4에서는 실제로 이상이 있었다.</p>
<hr />
<p>결론은 4.4.3, 4.4.4 기기에서는 Referer를 사용할 수 없다는 것인데 이렇게 되면 이 방법을 아예 사용할 수가 없는 것과 같다. 그래서 방법을 찾아봤지만 해결책을 제시한 곳을 찾을 수 없었다.</p>
<p>하지만 수많은 테스트 결과 찾은 방법이 있어 아래에 공유한다.</p>
<pre class="hljs java">Map&lt;String, String&gt; extraHeaders = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();
String referer = <span class="hljs-string">"~~~"</span>;
extraHeaders.put(<span class="hljs-string">"Referer"</span>, referer);

<span class="hljs-keyword">if</span> ((<span class="hljs-string">"4.4.3"</span>.equals(android.os.Build.VERSION.RELEASE))
        || (<span class="hljs-string">"4.4.4"</span>.equals(android.os.Build.VERSION.RELEASE))) {   <span class="hljs-comment">// 4.4.3 ~ 4.4.4 에서 Referer가 누락되는 문제를 수정하기 위함</span>
    extraHeaders.put(<span class="hljs-string">"Referer "</span>, referer);
}

view.loadUrl(url, extraHeaders);</pre>
<p>아주 간단하다. &quot;Referer&quot; 대신 &quot;Referer &quot;를 사용하는 것이다. HTTP 프로토콜에서 Referer는 다음과 같은 형식이다. <code>Referer : ~~~</code> 따라서 Referer 뒤에 공백하나 더 들어가도 규칙엔 문제가 없으므로 정상 동작한다.</p>
<p>다행히 안드로이드에서 문자열을 trim하지 않고 비교하고 있어서 간단하게 해결된다. 개발자의 실수가 다행인 경우도 있을 수 있구나.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/07/14/html-fromhtml-deprecated-in-android-n/</id><title type="html">Html.fromHtml deprecated(Android N)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/07/14/html-fromhtml-deprecated-in-android-n/"/><published>2016-07-14T10:33:16+09:00</published><updated>2016-07-14T10:33:16+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[Android N이 아직 developer preview 상태지만 곧 정식 버전이 나올 것으로 생각된다. 이 Android N에서 deprecated 된 것 중의 하나가 Html.fromHtml다. 공식 문서에는 다음과 같이 안내되어 있다. This method was deprecated in API level 24. use fromHtml(String, int) instead. 이와 관련해서는 길게 이야기할 것도 없으니 버전에 대응되도록 처리해 둔 함수를 아래에 남긴다. public static Spanned fromHtml(String source) { if (android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.N) { // noinspection deprecation return Html.fromHtml(source); } return Html.fromHtml(source, Html.FROM_HTML_MODE_LEGACY); }]]></summary><content type="html"><![CDATA[<p>Android N이 아직 developer preview 상태지만 곧 정식 버전이 나올 것으로 생각된다. 이 Android N에서 deprecated 된 것 중의 하나가 <a href="https://developer.android.com/reference/android/text/Html.html#fromHtml%28java.lang.String%29">Html.fromHtml</a>다.</p>
<p>공식 문서에는 다음과 같이 안내되어 있다.</p>
<blockquote>
<p>This method was deprecated in API level 24. use fromHtml(String, int) instead.</p>
</blockquote>
<p>이와 관련해서는 길게 이야기할 것도 없으니 버전에 대응되도록 처리해 둔 함수를 아래에 남긴다.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Spanned <span class="hljs-title">fromHtml</span><span class="hljs-params">(String source)</span> </span>{
  <span class="hljs-keyword">if</span> (android.os.Build.VERSION.SDK_INT &lt; android.os.Build.VERSION_CODES.N) {
    <span class="hljs-comment">// noinspection deprecation</span>
    <span class="hljs-keyword">return</span> Html.fromHtml(source);
  }
  <span class="hljs-keyword">return</span> Html.fromHtml(source, Html.FROM_HTML_MODE_LEGACY);
}</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/07/14/android-uri-getqueryparameter/</id><title type="html">android Uri.getQueryParameter() 사용시 젤리빈 이전 버전에서 공백이 +로 표시되는 문제 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/07/14/android-uri-getqueryparameter/"/><published>2016-07-14T09:53:26+09:00</published><updated>2016-07-14T09:53:26+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[Uri.getQueryParameter() 사용시 젤리빈 이전 버전을 지원해야 한다면 주의해야 할 사항이 있다. 최근에는 젤리빈 이하를 굳이 지원할 필요가 없다고 볼 수 있지만 혹시라도 지원해야 한다면 아래의 내용을 참고하자. 공식 문서에서 보면 해당 함수 설명에 아래의 내용이 있다. Warning: Prior to Jelly Bean, this decoded the '+' character as '+' rather than ' '. 젤리빈 이전 버전에서는 공백을 urlencode하여 넘겨진 +를 공백으로 치환하지 않는다. 따라서 공백으로 직접 치환해 주어야 한다. 호환 처리를 위해 만든 함수를 아래에 남긴다. @Nullable static public String getQueryParameter(@Nullable Uri uri, @NonNull String key) { String result = null; if (uri != null) { result = uri.getQueryParameter(key); if ((result != null) && (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN)) { result = result.replace('+', ' '); } } return result; }]]></summary><content type="html"><![CDATA[<p><a href="https://developer.android.com/reference/android/net/Uri.html#getQueryParameter%28java.lang.String%29">Uri.getQueryParameter()</a> 사용시 젤리빈 이전 버전을 지원해야 한다면 주의해야 할 사항이 있다. 최근에는 젤리빈 이하를 굳이 지원할 필요가 없다고 볼 수 있지만 혹시라도 지원해야 한다면 아래의 내용을 참고하자.</p>
<p>공식 문서에서 보면 해당 함수 설명에 아래의 내용이 있다.</p>
<blockquote>
<p>Warning: Prior to Jelly Bean, this decoded the '+' character as '+' rather than ' '.</p>
</blockquote>
<p>젤리빈 이전 버전에서는 공백을 urlencode하여 넘겨진 <code>+</code>를 공백으로 치환하지 않는다. 따라서 공백으로 직접 치환해 주어야 한다.</p>
<p>호환 처리를 위해 만든 함수를 아래에 남긴다.</p>
<pre class="hljs java"><span class="hljs-meta">@Nullable</span>
<span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> String <span class="hljs-title">getQueryParameter</span><span class="hljs-params">(@Nullable Uri uri, @NonNull String key)</span> </span>{
  String result = <span class="hljs-keyword">null</span>;
  <span class="hljs-keyword">if</span> (uri != <span class="hljs-keyword">null</span>) {
    result = uri.getQueryParameter(key);
    <span class="hljs-keyword">if</span> ((result != <span class="hljs-keyword">null</span>) &amp;&amp; (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN)) {
      result = result.replace(<span class="hljs-string">'+'</span>, <span class="hljs-string">' '</span>);
    }
  }
  <span class="hljs-keyword">return</span> result;
}</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/07/12/android-textview-with-a-single-line-in-viewpager-scroll-doesnt-work/</id><title type="html">안드로이드 : TextView 터치시 가로 스크롤이 되지 않는 문제 수정(ViewPager 등에서)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/07/12/android-textview-with-a-single-line-in-viewpager-scroll-doesnt-work/"/><published>2016-07-12T11:34:06+09:00</published><updated>2016-07-12T11:34:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[오늘도 역시 안드로이드는 실망시키지 않는다. 오늘의 문제는 이렇다. 가로 스크롤되는 ViewPager의 Item View에 TextView가 포함되도록 구성되어 있을 경우 TextView 위에서 터치를 하면 가로 스크롤이 동작하지 않는 문제가 발생한다. 조금 더 정확히 이야기하자면 singleLine 속성이 true로 설정된 TextView들이 가로 스크롤을 정상 동작하지 않도록 만든다. 처음엔 click 이벤트로 인한 문제로 생각했다. 실제로 아래에 깔린 View의 click 이벤트를 제거하니 스크롤이 정상적으로 동작했다. 그런데 다른 UI에서 동일한 형태로 사용중이나 그곳에서는 해당 문제가 발생하지 않기에 다른 원인이 있을 것이라는 판단으로 조금 더 찾아봤다. 결국 원인을 찾고보니 android:scrollHorizontally 속성이 true로 설정될 경우 해당 문제가 발생했다. TextView의 scroll 처리 영역과 ViewPager의 scroll 처리가 충돌하는 것이다. 그런데 나는 이 속성을 true로 주지 않았기 때문에 이상하다고 생각하고 TextView.java 파일의 내부를 보다가 아래의 코드를 찾았다. TextView.java private void applySingleLine(boolean singleLine, boolean applyTransformation, boolean changeMaxLines) { mSingleLine = singleLine; if (singleLine) { setLines(1); setHorizontallyScrolling(true); if (applyTransformation) { setTransformationMethod(SingleLineTransformationMethod.getInstance()); } } else { if (changeMaxLines) { setMaxLines(Integer.MAX_VALUE); } setHorizontallyScrolling(false); if (applyTransformation) { setTransformationMethod(null); } } } 그렇다. singleLine 속성을 사용하면 자동적으로 setHorizontallyScrolling(true);가 적용되는 것이다. 여담이지만 android:scrollHorizontally 설정 상태를 확인하기 위해 TextView.java에 있는 아래의 함수를 호출해 봤더니 해당 함수를 못찾는다. 최신 SDK에 들어간 것도 아니고 public 인데도 불구하고... 역시 이상한 안드로이드. public boolean getHorizontallyScrolling() { return mHorizontallyScrolling; } 어쨌든 이를 해결하기 위해 아래와 같이 style을 정의해서 TextView에 적용해 봤다. <style name="TextViewBaseStyle"> <!-- 가로 스크롤 문제를 발생시키는 속성 --> <item name="android:singleLine">true</item> <item name="android:ellipsize">end</item> <!-- 가로 스크롤 문제를 개선하기 위한 시도 --> <item name="android:scrollHorizontally">false</item> <item name="android:clickable">false</item> <item name="android:focusable">false</item> <item name="android:focusableInTouchMode">false</item> </style> 결론은 안된다. android:scrollHorizontally 값이 위에 보여준 코드에 의해 무시되는 결과를 가져오는 것이다. 따라서 해결 방법은 아래의 방법 밖에 없다. textView.setHorizontallyScrolling(false); 그렇다. 프로그램에서 직접 android:scrollHorizontally를 false로 설정하는 것 외에는 다른 방법이 없다. TextView.java 내부에서 직접 true를 지정하고 있으므로 해당 코드를 오버라이딩 할 것이 아니라면 이 방법 밖에는 없다. 생성자 내부에서 처리 순서가 아래와 같기 때문에 singleLine 속성을 사용한다면 다른 방법이 없는 것이다. 도대체 TextView 개발자는 무슨 생각으로 코드를 짠 것인가? ... case com.android.internal.R.styleable.TextView_scrollHorizontally: if (a.getBoolean(attr, false)) { setHorizontallyScrolling(true); } break; ... applySingleLine(singleLine, singleLine, singleLine); ... 추가 조금 더 알아보니 singleLine 속성 자체가 API 3에서 deprecated 되었다가 다시 풀린 것으로 보인다. 대신 maxLines 속성을 권장하는 것으로 보인다. 하지만 singleLine 자체도 marquee 등의 기능 사용을 위해 필요한 곳이 있다. android singleLine vs maxLines 결론은 위의 방법을 사용하거나 singleLine 속성 대신 maxLines 속성에 1을 주는 방법으로 ellipsize를 처리하는 방법이 있다. 사실 이 부분의 경우 하위 버전의 안드로이드에서 정상 동작하지 않는 문제가 있었던 것으로 보이나 현재 시점에서 테스트 해봤을 때는 정상 동작했다. singleLine 속성은 내부적으로 추가적인 처리를 하는 것으로 보이니 성능면에서도 maxLines를 사용하는 것을 권장한다.]]></summary><content type="html"><![CDATA[<p>오늘도 역시 안드로이드는 실망시키지 않는다. 오늘의 문제는 이렇다.</p>
<blockquote>
<p>가로 스크롤되는 ViewPager의 Item View에 TextView가 포함되도록 구성되어 있을 경우 TextView 위에서 터치를 하면 가로 스크롤이 동작하지 않는 문제가 발생한다. 조금 더 정확히 이야기하자면 <code>singleLine</code> 속성이 true로 설정된 TextView들이 가로 스크롤을 정상 동작하지 않도록 만든다.</p>
</blockquote>
<p>처음엔 click 이벤트로 인한 문제로 생각했다. 실제로 아래에 깔린 View의 click 이벤트를 제거하니 스크롤이 정상적으로 동작했다. 그런데 다른 UI에서 동일한 형태로 사용중이나 그곳에서는 해당 문제가 발생하지 않기에 다른 원인이 있을 것이라는 판단으로 조금 더 찾아봤다.</p>
<p>결국 원인을 찾고보니 <code>android:scrollHorizontally</code> 속성이 true로 설정될 경우 해당 문제가 발생했다. TextView의 scroll 처리 영역과 ViewPager의 scroll 처리가 충돌하는 것이다. 그런데 나는 이 속성을 true로 주지 않았기 때문에 이상하다고 생각하고 <code>TextView.java</code> 파일의 내부를 보다가 아래의 코드를 찾았다.</p>
<p><strong>TextView.java</strong></p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">applySingleLine</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> singleLine, <span class="hljs-keyword">boolean</span> applyTransformation,
        <span class="hljs-keyword">boolean</span> changeMaxLines)</span> </span>{
    mSingleLine = singleLine;
    <span class="hljs-keyword">if</span> (singleLine) {
        setLines(<span class="hljs-number">1</span>);
        setHorizontallyScrolling(<span class="hljs-keyword">true</span>);
        <span class="hljs-keyword">if</span> (applyTransformation) {
            setTransformationMethod(SingleLineTransformationMethod.getInstance());
        }
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">if</span> (changeMaxLines) {
            setMaxLines(Integer.MAX_VALUE);
        }
        setHorizontallyScrolling(<span class="hljs-keyword">false</span>);
        <span class="hljs-keyword">if</span> (applyTransformation) {
            setTransformationMethod(<span class="hljs-keyword">null</span>);
        }
    }
}</pre>
<p>그렇다. <code>singleLine</code> 속성을 사용하면 자동적으로 <code>setHorizontallyScrolling(true);</code>가 적용되는 것이다. 여담이지만 <code>android:scrollHorizontally</code> 설정 상태를 확인하기 위해 <code>TextView.java</code>에 있는 아래의 함수를 호출해 봤더니 해당 함수를 못찾는다. 최신 SDK에 들어간 것도 아니고 public 인데도 불구하고... 역시 이상한 안드로이드.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">getHorizontallyScrolling</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">return</span> mHorizontallyScrolling;
}</pre>
<p>어쨌든 이를 해결하기 위해 아래와 같이 style을 정의해서 TextView에 적용해 봤다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"TextViewBaseStyle"</span>&gt;</span><span class="xml">
  <span class="hljs-comment">&lt;!-- 가로 스크롤 문제를 발생시키는 속성 --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:singleLine"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:ellipsize"</span>&gt;</span>end<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- 가로 스크롤 문제를 개선하기 위한 시도 --&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:scrollHorizontally"</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:clickable"</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:focusable"</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:focusableInTouchMode"</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>
<p>결론은 안된다. <code>android:scrollHorizontally</code> 값이 위에 보여준 코드에 의해 무시되는 결과를 가져오는 것이다.</p>
<p>따라서 해결 방법은 아래의 방법 밖에 없다.</p>
<pre class="hljs java">textView.setHorizontallyScrolling(<span class="hljs-keyword">false</span>);</pre>
<p>그렇다. 프로그램에서 직접 <code>android:scrollHorizontally</code>를 false로 설정하는 것 외에는 다른 방법이 없다. <code>TextView.java</code> 내부에서 직접 true를 지정하고 있으므로 해당 코드를 오버라이딩 할 것이 아니라면 이 방법 밖에는 없다. 생성자 내부에서 처리 순서가 아래와 같기 때문에 <code>singleLine</code> 속성을 사용한다면 다른 방법이 없는 것이다. 도대체 TextView 개발자는 무슨 생각으로 코드를 짠 것인가?</p>
<pre class="hljs java">...
<span class="hljs-keyword">case</span> com.android.internal.R.styleable.TextView_scrollHorizontally:
    <span class="hljs-keyword">if</span> (a.getBoolean(attr, <span class="hljs-keyword">false</span>)) {
        setHorizontallyScrolling(<span class="hljs-keyword">true</span>);
    }
    <span class="hljs-keyword">break</span>;
...
applySingleLine(singleLine, singleLine, singleLine);
...          </pre>
<hr />
<p><strong>추가</strong></p>
<p>조금 더 알아보니 <code>singleLine</code> 속성 자체가 API 3에서 deprecated 되었다가 다시 풀린 것으로 보인다. 대신 <code>maxLines</code> 속성을 권장하는 것으로 보인다. 하지만 <code>singleLine</code> 자체도 <code>marquee</code> 등의 기능 사용을 위해 필요한 곳이 있다. <a href="http://stackoverflow.com/a/31871217">android singleLine vs maxLines</a></p>
<p>결론은 위의 방법을 사용하거나 <code>singleLine</code> 속성 대신 <code>maxLines</code> 속성에 1을 주는 방법으로 <code>ellipsize</code>를 처리하는 방법이 있다. 사실 이 부분의 경우 하위 버전의 안드로이드에서 정상 동작하지 않는 문제가 있었던 것으로 보이나 현재 시점에서 테스트 해봤을 때는 정상 동작했다. <code>singleLine</code> 속성은 내부적으로 추가적인 처리를 하는 것으로 보이니 성능면에서도 <code>maxLines</code>를 사용하는 것을 권장한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/07/04/php-composer-private-repository-and-proxy-toran-proxy/</id><title type="html">PHP Composer : Private Repository / Proxy / 속도 향상(Toran Proxy를 사용한)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/07/04/php-composer-private-repository-and-proxy-toran-proxy/"/><published>2016-07-04T20:09:16+09:00</published><updated>2016-07-04T20:09:16+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[오늘은 Composer에서 Packagist가 아닌 private repository를 사용할 수 있도록 Toran Proxy를 설정하는 방법을 설명하고자 한다. 사실 Toran Proxy 외에도 Satis라는 것도 있는데 관련된 내용은 Handling private packages with Satis or Toran Proxy을 참고하길 바란다(Satis를 조금 더 편하게 사용하기 위한 라이브러리들도 몇가지가 있다. 사실 Satis가 더 유명하나 Toran Proxy가 더 사용하기 편할 것 같아 선택했다). 본 설명에 앞서 Toran Proxy를 이용함으로써 얻을 수 있는 이점부터 이야기 해보자. 내가 Toran Proxy를 설치한 이유기도 하다. private repository 운영할 수 있다. public proxy를 사용해서 composer의 속도를 올릴 수 있다. 오픈소스 프로젝트를 진행하는 것이 아닌 회사의 업무 등의 이유로 composer를 사용하는 경우라면 private project로 진행하는 것이 일반적일 것이다. 나의 경우는 gitlab.com에서 private project로 git를 사용하고 composer에는 아래와 같은 형식으로 사용하고 있었다. "require": { "company/project": "dev-master" }, "repositories": [ { "type": "git", "url": "git@gitlab.com:company/project.git" } ] 이 방법은 project를 package로 배포하지 않고 최신 소스(커밋)를 composer에서 가져오도록 한 것이다. 이 경우 별도의 composer repository가 필요하지 않다. 다만, 버전을 별도로 관리할 수 없고 composer update가 느려진다. composer update가 느려지는 이유는 update시마다 해당 프로젝트의 composer.json을 읽어 변경사항을 확인하기 때문이다. 이렇게 사용하는 것이 한두개라면 모르겠지만 많다면 composer update를 실행 하기가 두려워질 정도로 느려진다(composer.json 파일을 매번 확인하는 데다가 gitlab.com / packagist.org가 해외 서비스다 보니 네트워크가 느려서 더 심하다). composer 자체도 느린데 이런 문제까지 겹치니 감당 안된다. php composer 속도 개선하기에서 언급한 방법들을 적용해도 이 문제에는 큰 효과가 없다. composer에 관해서는 더 많은 이야기가 있을 수 있으나 본 글의 주제를 벗어 나므로 이쯤에서 줄이고 본격적으로 Toran Proxy 설치를 설명하겠다. Toran Proxy는 사실 유료다. 단, 개인 사용자에게는 개발자 1명까지 무료다(무료의 경우 기술 지원을 하지 않는다). Toran Proxy에서 download 링크를 누르면 다시 download 링크와 설치 방법에 대한 안내를 볼 수 있다. 아래는 내가 설치한 과정을 정리한 것이다. 실제로는 bash shell 스크립트로 작성되어 있는데 중요한 부분만 다시 정리한 것으로 작업 상에 약간의 차이가 있을 수 있다. 또한, CentOS 7에서 작업 했으며 사용자는 web, 사용자 그룹은 usergroup이며 사용자 root directory는 /home/web/이다. 따라서 자신의 환경과 맞지 않는 부분은 맞게 고쳐서 적용해야 한다. # 소스를 다운 받아서 /home/web/에 압축을 푼다. # 최신 버전이 1.5.1이 아닐 수 있으니 다운로드 링크는 웹사이트에서 복사하는 것을 권한다. $ curl -LO https://toranproxy.com/releases/toran-proxy-v1.5.1.tgz $ tar zxvf toran-proxy-v1.5.1.tgz -C /home/web/ # 해당 폴더로 가서 $ cd /home/web/toran # 기본 설정 파일을 만든다. $ cp app/config/parameters.yml.dist app/config/parameters.yml # 아래의 app/config/parameters.yml의 설정은 직접 해당 파일을 열어서 수정해도 된다. # 나의 경우는 shell 스크립트로 제작하면서 아래와 같이 처리한 것이다. # project hash키를 난수로 만들어 넣어준다. $ hashkey=`php -r "echo sha1(rand());"` $ sed -i "s/ThisTokenIsNotSoSecret-Change-I/$hashkey/g" app/config/parameters.yml # https를 사용하도록 설정한다. 기본은 http이나 나중에 composer에서 쉽게 사용하려면 https를 사용하는 것이 좋다. sed -i "s/toran_scheme:\s*http$/toran_scheme: https/g" app/config/parameters.yml # private repository로 사용할 도메인을 지정한다. sed -i "s/toran_host:\s*example.org$/toran_host: your-private-repository.com/g" app/config/parameters.yml # 필요한 디렉토리를 생성하고 권한을 부여한다. chmod 777 app/toran app/cache app/logs web/repo app/bootstrap.php.cache mkdir -p app/toran/cache web/repo/packagist/ web/repo/private/ chmod 777 app/toran/cache web/repo/packagist/ web/repo/private/ chown web.usergroup -R /home/web/toran 여기까지가 기본 설치 과정이다. 하지만 사용을 위해서는 설정할 것들이 많이 남았다. 이 상태에서 php bin/cron -v를 실행하면 아래와 같은 결과가 나올 것이다. $ php bin/cron -v You need to setup a GitHub OAuth token because Toran makes a lot of requests and will use up the API calls limit if it is unauthenticated Head to https://github.com/settings/tokens/new to create a token. You need to select the public_repo credentials, and the repo one if you are going to use private repositories from GitHub with Toran. Token: 안내에 설명되어 있는 것과 같이 https://github.com/settings/tokens/new 에 가서 개인용 ssh token을 생성해서 넣어야 한다. 생성시 어떤 권한을 부여할지 선택하는 화면이 나오는데 다른 것은 필요 없고 public_repo만 선택해서 생성하면 된다. 사실 일반적인 경우라면 composer 사용시 미리 받아 놓은 token이 있을테니 그걸 사용해도 된다. 보통 ~/.composer/auth.json 또는 ~/.config/composer/auth.json에 등록이 되어있다. token을 입력하면 app/toran/composer/auth.json에 파일이 생성된다. 여기서는 github에 대한 token만 등록하도록 물어보는데 나의 경우처럼 gitlab.com 등의 접근이 필요하다면 아래과 같이 설정 할 수 있다. { "github-oauth": { "github.com": "[github token]" }, "gitlab-oauth": { "gitlab.com": "[gitlab token]" } } 여기서 설정된 "gitlab token"은 github와는 조금 다르다. github의 경우는 사이트에 token을 발급해서 넣었었는데 gitlab은 동일하게 사이트에서 발급 받은 token을 강제로 넣었더니 정상적으로 동작하지 않았다. 대신 gitlab에 관련된 repository가 추가된 후 php bin/cron -v를 다시 실행하면 아래와 같이 아이디와 비밀번호를 물어보는데 여기에 입력하면 "gitlab token"이 생성되어 들어가 있다. gitlab.com에 API로 token을 만들어주나 싶어 확인해 봤더니 token은 없었다(아이디 / 비밀번호를 암호화해서 보관하는 것으로 보인다). $ php bin/cron -v Initializing private repositories Initializing git@gitlab.com:company/project.git Could not fetch https://gitlab.com/api/v3/projects/company%2Fproject, enter your gitlab.com credentials to access private repos A token will be created and stored in "/home/web/toran/app/toran/composer/auth.json", your password will never be stored To revoke access to this token you can visit gitlab.com/profile/applications Username: Password: Token successfully created 여기까지 적용 했다면 이제는 웹페이지를 열어서 최종 설정을 하고 crontab에 스케쥴을 걸면 끝난다. 하지만 웹페이지 관련 설정이 조금 복잡하다. 이유는 Toran Proxy가 shell 접근과 web 접근시 동일한 퍼미션을 요구하기 때문이다. 필요한 폴더를 모두 쓰기 권한(777)을 주는 방법이 일반적이나 생성되는 파일 마다 계속 쓰기 권한을 주는 것은 무리가 있었다(몇가지를 그렇게 맞추다가 포기했다). 따라서 아래의 내용은 선택에 맡긴다. 쓰기 권한이 요구되는 상황에 맞추어 권한을 주는 방법과 아래와 같이 php-fpm에서 사용자를 변경하는 방법이 있다. 일반적인 php-fpm 설정 상태라면 pool로 www(/etc/php-fpm.d/www.conf)가 설정되어 있을 것이다. 여기에 새로운 pool을 아래와 같이 추가한다. /etc/php-fpm.d/toran.conf [toran] ... user = web group = usergroup ... listen = /dev/shm/php5-fpm.toran.sock ... 나머지 설정은 자신의 상황에 맞게하면 된다. 우선 listen의 경우 기존 unix socket 과 겹치지 않는 파일을 지정한 것인데 기존에 unix socket를 사용하지 않고 listen = 127.0.0.1:9000과 같이 사용한다면 listen = 127.0.0.1:9001와 같이 다른 포트를 지정해서 사용하면 된다. 중요한 부분은 user / group 설정 부분이다. 일반적으로 nobody / nobody를 사용하지만 여기서는 web / usergroup 를 지정해서 웹 접근시에도 shell 접속과 동일한 계정을 사용하도록 한 것이다. 일반적으로 보안 상의 이유로 이렇게 사용하지는 않으나 이 방법이 제일 쉬운 방법이다(보안에 대한 문제는 방화벽 등에서 제어하기 바란다. 어짜피 private repository로 사용할 것이므로 접근 제한은 해야할 것이다). 이제 php-fpm을 재시작하면 www와 toran 두가지 pool이 동작하고 있다. 이제부터는 nginx 설정이다. 아래의 예시를 참고해서 설정하자. ssl 관련된 설정을 위해서 ssl 인증서를 생성해야 한다(letsencrypt를 이용하면 무료로 인증서를 받을 수 있다. 이게 어렵거나 귀찮다면 https://buy.wosign.com/free/를 이용하면 3년까지 사용 가능한 ssl 인증서를 받을 수 있다). server { listen 80; listen 443 ssl; server_name your-private-repository.com; root /home/web/toran/web/; ssl_certificate /etc/nginx/ssl/toran/your-private-repository.com.crt; ssl_certificate_key /etc/nginx/ssl/toran/your-private-repository.com.key; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL; location / { try_files $uri /app.php$is_args$args; } location ~ ^/(app|cron)\.php(/|$) { # The path or IP to access your PHP FCGI/FPM processes fastcgi_pass unix:/dev/shm/php5-fpm.toran.sock; fastcgi_split_path_info ^(.+\.php)(/.*)$; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # Set this to "off" if you are not using an ssl vhost fastcgi_param HTTPS on; } } 이제는 거의 마지막이다. 이제 your-private-repository.com로 접속해 보면 설정화면이 나온다. 여기서는 내용을 보고 필요한 설정을 하면 된다. 대부분의 경우는 특별히 손댈 것이 없다. 다만, 맨 위의 라이센스 관련된 부분을 확인해서 개인 사용을 체크 해주고 저장하면 설정이 완료된다. 나머지 설정도 나중에 설정 화면에서 변경할 수 있다. 정말 마지막. 스케쥴 설정을 해준다. $ crontab -e * * * * * su - web -c "cd /home/web/toran && php bin/cron" 위 설정은 매분마다 정보를 갱신하도록 스케쥴을 설정한 것이다. 설정은 모두 끝났다. 이젠 사용하면된다. "require": { "company/project": "dev-master" }, "repositories": [ { "type": "composer", "url": "https://your-private-repository.com/repo/private/" }, { "type": "composer", "url": "https://your-private-repository.com/repo/packagist/" }, { "packagist": false } ] 간단히 설명하자면 https://your-private-repository.com/repo/packagist/와 "packagist": false는 default repository인 packagist를 제외하고 toran proxy를 추가하는 것이다. toran이 proxy / cache 처리를 해주므로 packagist는 제외해도 된다(proxy를 사용하는 경우). 이 설정을 통해 느린 packagist를 벗어나 빠른 개인 repository를 사용할 수 있다. https://your-private-repository.com/repo/private/ 설정은 말 그대로 private repository를 사용하기 위한 설정이다. private repository를 설정하는 것은 관리 화면에서 Private Repositories 메뉴로 들어가면 간단히 사용할 수 있다. 나의 경우처럼 git를 바로 연결해서 사용했었다면 간단히 Add Repository를 눌러 Type을 vcs로 선택하고 git repository 주소를 입력해주면 끝난다(참고로 설정 내용은 app/toran/config.yml 파일에 저장되어 있다). 단, 여기서 오류가 날 수 있다. 앞서 설명했던 것과 같이 해당 repository가 private project라면 접속 권한 요구에 대한 오류가 날 수 있다. 이 때는 app/toran/composer/auth.json에 접근 정보를 추가해 주면 된다(Type을 git를 선택했다면 web 계정의 auth.json(~/.composer/auth.json 또는 ~/.config/composer/auth.json)에 접근 정보를 추가해 주어야 할 수도 있다). 그리고 Type를 git로 선택할 수도 있는데 이 경우엔 composer에서 package를 받았을 때 git를 사용할 수 없다. vcs로 설정된 경우만 git를 사용할 수 있어 commit / push가 가능하다. 목적에 따라 이를 막아야 할 경우라면 git를 선택하는 것도 가능하다.]]></summary><content type="html"><![CDATA[<p>오늘은 <a href="https://getcomposer.org/">Composer</a>에서 <a href="https://packagist.org/">Packagist</a>가 아닌 private repository를 사용할 수 있도록 <a href="https://toranproxy.com/">Toran Proxy</a>를 설정하는 방법을 설명하고자 한다. 사실 Toran Proxy 외에도 <a href="https://github.com/composer/satis">Satis</a>라는 것도 있는데 관련된 내용은 <a href="https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md">Handling private packages with Satis or Toran Proxy</a>을 참고하길 바란다(Satis를 조금 더 편하게 사용하기 위한 라이브러리들도 몇가지가 있다. 사실 Satis가 더 유명하나 Toran Proxy가 더 사용하기 편할 것 같아 선택했다).</p>
<p>본 설명에 앞서 Toran Proxy를 이용함으로써 얻을 수 있는 이점부터 이야기 해보자. 내가 Toran Proxy를 설치한 이유기도 하다.</p>
<ul>
<li>private repository 운영할 수 있다.</li>
<li>public proxy를 사용해서 composer의 속도를 올릴 수 있다.</li>
</ul>
<p>오픈소스 프로젝트를 진행하는 것이 아닌 회사의 업무 등의 이유로 composer를 사용하는 경우라면 private project로 진행하는 것이 일반적일 것이다. 나의 경우는 <a href="https://gitlab.com/">gitlab.com</a>에서 private project로 git를 사용하고 composer에는 아래와 같은 형식으로 사용하고 있었다.</p>
<pre class="hljs json"><span class="hljs-string">"require"</span>: {
  <span class="hljs-attr">"company/project"</span>: <span class="hljs-string">"dev-master"</span>
},
<span class="hljs-string">"repositories"</span>: [
    {
      <span class="hljs-attr">"type"</span>: <span class="hljs-string">"git"</span>,
      <span class="hljs-attr">"url"</span>: <span class="hljs-string">"git@gitlab.com:company/project.git"</span>
    }
]    </pre>
<p>이 방법은 project를 package로 배포하지 않고 최신 소스(커밋)를 composer에서 가져오도록 한 것이다. 이 경우 별도의 composer repository가 필요하지 않다. 다만, 버전을 별도로 관리할 수 없고 <code>composer update</code>가 느려진다. <code>composer update</code>가 느려지는 이유는 update시마다 해당 프로젝트의 composer.json을 읽어 변경사항을 확인하기 때문이다. 이렇게 사용하는 것이 한두개라면 모르겠지만 많다면 <code>composer update</code>를 실행 하기가 두려워질 정도로 느려진다(composer.json 파일을 매번 확인하는 데다가 <a href="gitlab.com">gitlab.com</a> / <a href="packagist.org">packagist.org</a>가 해외 서비스다 보니 네트워크가 느려서 더 심하다). composer 자체도 느린데 이런 문제까지 겹치니 감당 안된다. <a href="https://blog.asamaru.net/2016/03/17/php-composer-speed-up/">php composer 속도 개선하기</a>에서 언급한 방법들을 적용해도 이 문제에는 큰 효과가 없다.</p>
<p>composer에 관해서는 더 많은 이야기가 있을 수 있으나 본 글의 주제를 벗어 나므로 이쯤에서 줄이고 본격적으로 Toran Proxy 설치를 설명하겠다.</p>
<hr />
<blockquote>
<p>Toran Proxy는 사실 유료다. 단, 개인 사용자에게는 개발자 1명까지 무료다(무료의 경우 기술 지원을 하지 않는다).</p>
</blockquote>
<p><a href="https://toranproxy.com/">Toran Proxy</a>에서 <a href="https://toranproxy.com/download">download 링크</a>를 누르면 다시 download 링크와 설치 방법에 대한 안내를 볼 수 있다.</p>
<p>아래는 내가 설치한 과정을 정리한 것이다. 실제로는 bash shell 스크립트로 작성되어 있는데 중요한 부분만 다시 정리한 것으로 작업 상에 약간의 차이가 있을 수 있다. 또한, CentOS 7에서 작업 했으며 사용자는 <code>web</code>, 사용자 그룹은 <code>usergroup</code>이며 사용자 root directory는 <code>/home/web/</code>이다. 따라서 자신의 환경과 맞지 않는 부분은 맞게 고쳐서 적용해야 한다.</p>
<pre class="hljs bash"><span class="hljs-comment"># 소스를 다운 받아서 /home/web/에 압축을 푼다.</span>
<span class="hljs-comment"># 최신 버전이 1.5.1이 아닐 수 있으니 다운로드 링크는 웹사이트에서 복사하는 것을 권한다.</span>
$ curl -LO https://toranproxy.com/releases/toran-proxy-v1.5.1.tgz
$ tar zxvf toran-proxy-v1.5.1.tgz -C /home/web/

<span class="hljs-comment"># 해당 폴더로 가서</span>
$ <span class="hljs-built_in">cd</span> /home/web/toran
<span class="hljs-comment"># 기본 설정 파일을 만든다.</span>
$ cp app/config/parameters.yml.dist app/config/parameters.yml

<span class="hljs-comment"># 아래의 app/config/parameters.yml의 설정은 직접 해당 파일을 열어서 수정해도 된다.</span>
<span class="hljs-comment"># 나의 경우는 shell 스크립트로 제작하면서 아래와 같이 처리한 것이다.</span>

<span class="hljs-comment"># project hash키를 난수로 만들어 넣어준다.</span>
$ hashkey=`php -r <span class="hljs-string">"echo sha1(rand());"</span>`
$ sed -i <span class="hljs-string">"s/ThisTokenIsNotSoSecret-Change-I/<span class="hljs-variable">$hashkey</span>/g"</span> app/config/parameters.yml
<span class="hljs-comment"># https를 사용하도록 설정한다. 기본은 http이나 나중에 composer에서 쉽게 사용하려면 https를 사용하는 것이 좋다.</span>
sed -i <span class="hljs-string">"s/toran_scheme:\s*http$/toran_scheme: https/g"</span> app/config/parameters.yml
<span class="hljs-comment"># private repository로 사용할 도메인을 지정한다.</span>
sed -i <span class="hljs-string">"s/toran_host:\s*example.org$/toran_host: your-private-repository.com/g"</span> app/config/parameters.yml

<span class="hljs-comment"># 필요한 디렉토리를 생성하고 권한을 부여한다.</span>
chmod 777 app/toran app/cache app/logs web/repo app/bootstrap.php.cache
mkdir -p app/toran/cache web/repo/packagist/ web/repo/private/
chmod 777 app/toran/cache web/repo/packagist/ web/repo/private/
chown web.usergroup -R /home/web/toran</pre>
<p>여기까지가 기본 설치 과정이다. 하지만 사용을 위해서는 설정할 것들이 많이 남았다. 이 상태에서 <code>php bin/cron -v</code>를 실행하면 아래와 같은 결과가 나올 것이다.</p>
<pre class="hljs bash">$ php bin/cron -v
You need to setup a GitHub OAuth token because Toran makes a lot of requests and will use up the API calls <span class="hljs-built_in">limit</span> <span class="hljs-keyword">if</span> it is unauthenticated
Head to https://github.com/settings/tokens/new to create a token. You need to select the public_repo credentials, and the repo one <span class="hljs-keyword">if</span> you are going to use private repositories from GitHub with Toran.
Token:</pre>
<p>안내에 설명되어 있는 것과 같이 <a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a> 에 가서 개인용 ssh token을 생성해서 넣어야 한다. 생성시 어떤 권한을 부여할지 선택하는 화면이 나오는데 다른 것은 필요 없고 <code>public_repo</code>만 선택해서 생성하면 된다. 사실 일반적인 경우라면 composer 사용시 미리 받아 놓은 token이 있을테니 그걸 사용해도 된다. 보통 <code>~/.composer/auth.json</code> 또는 <code>~/.config/composer/auth.json</code>에 등록이 되어있다.</p>
<p>token을 입력하면 <code>app/toran/composer/auth.json</code>에 파일이 생성된다. 여기서는 github에 대한 token만 등록하도록 물어보는데 나의 경우처럼 gitlab.com 등의 접근이 필요하다면 아래과 같이 설정 할 수 있다.</p>
<pre class="hljs json">{
    <span class="hljs-attr">"github-oauth"</span>: { <span class="hljs-attr">"github.com"</span>: <span class="hljs-string">"[github token]"</span> },
    <span class="hljs-attr">"gitlab-oauth"</span>: { <span class="hljs-attr">"gitlab.com"</span>: <span class="hljs-string">"[gitlab token]"</span> }
}</pre>
<p>여기서 설정된 &quot;gitlab token&quot;은 github와는 조금 다르다. github의 경우는 사이트에 token을 발급해서 넣었었는데 gitlab은 동일하게 <a href="https://gitlab.com/profile/personal_access_tokens">사이트에서 발급</a> 받은 token을 강제로 넣었더니 정상적으로 동작하지 않았다. 대신 gitlab에 관련된 repository가 추가된 후 <code>php bin/cron -v</code>를 다시 실행하면 아래와 같이 아이디와 비밀번호를 물어보는데 여기에 입력하면 &quot;gitlab token&quot;이 생성되어 들어가 있다. gitlab.com에 API로 token을 만들어주나 싶어 확인해 봤더니 token은 없었다(아이디 / 비밀번호를 암호화해서 보관하는 것으로 보인다).</p>
<pre class="hljs bash">$ php bin/cron -v
Initializing private repositories
Initializing git@gitlab.com:company/project.git

Could not fetch https://gitlab.com/api/v3/projects/company%2Fproject, enter your gitlab.com credentials to access private repos
A token will be created and stored <span class="hljs-keyword">in</span> <span class="hljs-string">"/home/web/toran/app/toran/composer/auth.json"</span>, your password will never be stored
To revoke access to this token you can visit gitlab.com/profile/applications
Username:
Password:
Token successfully created</pre>
<p>여기까지 적용 했다면 이제는 웹페이지를 열어서 최종 설정을 하고 crontab에 스케쥴을 걸면 끝난다. 하지만 웹페이지 관련 설정이 조금 복잡하다. 이유는 Toran Proxy가 shell 접근과 web 접근시 동일한 퍼미션을 요구하기 때문이다. 필요한 폴더를 모두 쓰기 권한(777)을 주는 방법이 일반적이나 생성되는 파일 마다 계속 쓰기 권한을 주는 것은 무리가 있었다(몇가지를 그렇게 맞추다가 포기했다).</p>
<p>따라서 아래의 내용은 선택에 맡긴다. 쓰기 권한이 요구되는 상황에 맞추어 권한을 주는 방법과 아래와 같이 php-fpm에서 사용자를 변경하는 방법이 있다.</p>
<p>일반적인 php-fpm 설정 상태라면 pool로 www(/etc/php-fpm.d/www.conf)가 설정되어 있을 것이다. 여기에 새로운 pool을 아래와 같이 추가한다.</p>
<p><strong>/etc/php-fpm.d/toran.conf</strong></p>
<pre><code>[toran]
...
user = web
group = usergroup
...
listen = /dev/shm/php5-fpm.toran.sock
...</code></pre>
<p>나머지 설정은 자신의 상황에 맞게하면 된다. 우선 listen의 경우 기존 unix socket 과 겹치지 않는 파일을 지정한 것인데 기존에 unix socket를 사용하지 않고 <code>listen = 127.0.0.1:9000</code>과 같이 사용한다면 <code>listen = 127.0.0.1:9001</code>와 같이 다른 포트를 지정해서 사용하면 된다.
중요한 부분은 user / group 설정 부분이다. 일반적으로 nobody / nobody를 사용하지만 여기서는 web / usergroup 를 지정해서 웹 접근시에도 shell 접속과 동일한 계정을 사용하도록 한 것이다. 일반적으로 보안 상의 이유로 이렇게 사용하지는 않으나 이 방법이 제일 쉬운 방법이다(보안에 대한 문제는 방화벽 등에서 제어하기 바란다. 어짜피 private repository로 사용할 것이므로 접근 제한은 해야할 것이다).</p>
<p>이제 php-fpm을 재시작하면 www와 toran 두가지 pool이 동작하고 있다.</p>
<p>이제부터는 nginx 설정이다. 아래의 예시를 참고해서 설정하자. ssl 관련된 설정을 위해서 ssl 인증서를 생성해야 한다(<a href="https://letsencrypt.org/">letsencrypt</a>를 이용하면 무료로 인증서를 받을 수 있다. 이게 어렵거나 귀찮다면 <a href="https://buy.wosign.com/free/">https://buy.wosign.com/free/</a>를 이용하면 3년까지 사용 가능한 ssl 인증서를 받을 수 있다).</p>
<pre><code>server {
    listen 80;
    listen 443 ssl;
    server_name  your-private-repository.com;
    root         /home/web/toran/web/;

    ssl_certificate /etc/nginx/ssl/toran/your-private-repository.com.crt;
    ssl_certificate_key /etc/nginx/ssl/toran/your-private-repository.com.key;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;

    location / {
        try_files $uri /app.php$is_args$args;
    }

    location ~ ^/(app|cron)\.php(/|$) {
        # The path or IP to access your PHP FCGI/FPM processes
        fastcgi_pass unix:/dev/shm/php5-fpm.toran.sock;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;

        # Set this to "off" if you are not using an ssl vhost
        fastcgi_param  HTTPS              on;
    }
}</code></pre>
<p>이제는 거의 마지막이다. 이제 your-private-repository.com로 접속해 보면 설정화면이 나온다. 여기서는 내용을 보고 필요한 설정을 하면 된다. 대부분의 경우는 특별히 손댈 것이 없다. 다만, 맨 위의 라이센스 관련된 부분을 확인해서 개인 사용을 체크 해주고 저장하면 설정이 완료된다. 나머지 설정도 나중에 설정 화면에서 변경할 수 있다.</p>
<p>정말 마지막. 스케쥴 설정을 해준다.</p>
<pre class="hljs bash">$ crontab -e

* * * * * su - web -c <span class="hljs-string">"cd /home/web/toran &amp;&amp; php bin/cron"</span></pre>
<p>위 설정은 매분마다 정보를 갱신하도록 스케쥴을 설정한 것이다.</p>
<hr />
<p>설정은 모두 끝났다. 이젠 사용하면된다.</p>
<pre class="hljs json"><span class="hljs-string">"require"</span>: {
  <span class="hljs-attr">"company/project"</span>: <span class="hljs-string">"dev-master"</span>
},
<span class="hljs-string">"repositories"</span>: [
  {
    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"composer"</span>,
    <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://your-private-repository.com/repo/private/"</span>
  },
  {
    <span class="hljs-attr">"type"</span>: <span class="hljs-string">"composer"</span>,
    <span class="hljs-attr">"url"</span>: <span class="hljs-string">"https://your-private-repository.com/repo/packagist/"</span>
  },
  {
    <span class="hljs-attr">"packagist"</span>: <span class="hljs-literal">false</span>
  }
]    </pre>
<p>간단히 설명하자면 <code>https://your-private-repository.com/repo/packagist/</code>와 <code>"packagist": false</code>는 default repository인 packagist를 제외하고 toran proxy를 추가하는 것이다. toran이 proxy / cache 처리를 해주므로 packagist는 제외해도 된다(proxy를 사용하는 경우). 이 설정을 통해 느린 packagist를 벗어나 빠른 개인 repository를 사용할 수 있다.</p>
<p><code>https://your-private-repository.com/repo/private/</code> 설정은 말 그대로 private repository를 사용하기 위한 설정이다. private repository를 설정하는 것은 관리 화면에서 <code>Private Repositories</code> 메뉴로 들어가면 간단히 사용할 수 있다.</p>
<p>나의 경우처럼 git를 바로 연결해서 사용했었다면 간단히 <code>Add Repository</code>를 눌러 Type을 <code>vcs</code>로 선택하고 git repository 주소를 입력해주면 끝난다(참고로 설정 내용은 <code>app/toran/config.yml</code> 파일에 저장되어 있다).</p>
<p>단, 여기서 오류가 날 수 있다. 앞서 설명했던 것과 같이 해당 repository가 private project라면 접속 권한 요구에 대한 오류가 날 수 있다. 이 때는 <code>app/toran/composer/auth.json</code>에 접근 정보를 추가해 주면 된다(Type을 <code>git</code>를 선택했다면 web 계정의 <code>auth.json</code>(<code>~/.composer/auth.json</code> 또는 <code>~/.config/composer/auth.json</code>)에 접근 정보를 추가해 주어야 할 수도 있다).</p>
<p>그리고 Type를 <code>git</code>로 선택할 수도 있는데 이 경우엔 composer에서 package를 받았을 때 git를 사용할 수 없다. <code>vcs</code>로 설정된 경우만 git를 사용할 수 있어 commit / push가 가능하다. 목적에 따라 이를 막아야 할 경우라면 <code>git</code>를 선택하는 것도 가능하다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/05/30/mysql-table-name-is-specified-twice-both-as-a-target-for-update-and-as-a-separate-source-for-data/</id><title type="html">Mysql: Table 'name' is specified twice, both as a target for 'UPDATE' and as a separate source for data 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/05/30/mysql-table-name-is-specified-twice-both-as-a-target-for-update-and-as-a-separate-source-for-data/"/><published>2016-05-30T20:55:10+09:00</published><updated>2016-05-30T20:55:10+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="db" label="db" /><summary><![CDATA[아래의 Query는 계층형 카테고리에서 해당 노드와 상위 노드의 'itemCount'를 모두 1 증가 시키기 위한 Query다. UPDATE `storeCategory` SET itemCount=itemCount+1 WHERE (SELECT X.`_lft` FROM `storeCategory` as X WHERE X.`fullCode` = 'ab' LIMIT 1) BETWEEN `_lft` AND `_rgt`; 위 Query 에서는 자신의 Table의 검색 결과를 자신의 데이터를 변경하는데 사용하고 있다. 이 경우 아래와 같은 오류가 난다. Table 'storeCategory' is specified twice, both as a target for 'UPDATE' and as a separate source for data 이 경우는 아래와 같은 방식으로 문제를 회피할 수 있다. UPDATE `storeCategory` SET itemCount=itemCount+1 WHERE (SELECT * FROM (SELECT X.`_lft` FROM `storeCategory` as X WHERE X.`fullCode` = new.categoryId LIMIT 1) _dummy) BETWEEN `_lft` AND `_rgt`; 검색 결과를 dummy table로 alias 하여 직접적인 접근을 우회한 것이다.]]></summary><content type="html"><![CDATA[<p>아래의 Query는 계층형 카테고리에서 해당 노드와 상위 노드의 'itemCount'를 모두 1 증가 시키기 위한 Query다.</p>
<pre class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-string">`storeCategory`</span> <span class="hljs-keyword">SET</span> itemCount=itemCount+<span class="hljs-number">1</span> <span class="hljs-keyword">WHERE</span> (<span class="hljs-keyword">SELECT</span> X.<span class="hljs-string">`_lft`</span> <span class="hljs-keyword">FROM</span> <span class="hljs-string">`storeCategory`</span> <span class="hljs-keyword">as</span> X <span class="hljs-keyword">WHERE</span> X.<span class="hljs-string">`fullCode`</span> = <span class="hljs-string">'ab'</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span>) <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">`_lft`</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">`_rgt`</span>;</pre>
<p>위 Query 에서는 자신의 Table의 검색 결과를 자신의 데이터를 변경하는데 사용하고 있다. 이 경우 아래와 같은 오류가 난다.</p>
<pre><code>Table 'storeCategory' is specified twice, both as a target for 'UPDATE' and as a separate source for data</code></pre>
<p>이 경우는 아래와 같은 방식으로 문제를 회피할 수 있다.</p>
<pre class="hljs sql"><span class="hljs-keyword">UPDATE</span> <span class="hljs-string">`storeCategory`</span> <span class="hljs-keyword">SET</span> itemCount=itemCount+<span class="hljs-number">1</span> <span class="hljs-keyword">WHERE</span> (<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> (<span class="hljs-keyword">SELECT</span> X.<span class="hljs-string">`_lft`</span> <span class="hljs-keyword">FROM</span> <span class="hljs-string">`storeCategory`</span> <span class="hljs-keyword">as</span> X <span class="hljs-keyword">WHERE</span> X.<span class="hljs-string">`fullCode`</span> = new.categoryId <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1</span>) _dummy) <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">`_lft`</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">`_rgt`</span>;</pre>
<p>검색 결과를 dummy table로 alias 하여 직접적인 접근을 우회한 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/04/26/efficiently-delete-large-directory-containing-thousands-of-files/</id><title type="html">linux에서 대량의 파일을 보다 빠르게 지우기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/04/26/efficiently-delete-large-directory-containing-thousands-of-files/"/><published>2016-04-26T21:53:55+09:00</published><updated>2016-04-26T21:53:55+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[주기적으로 실행되는 스케쥴 중에 대량의 파일을 삭제해야 하는 작업이 있었다. 데이터 수집 등의 작업으로 누적된 로그/캐시 파일들을 작업 완료 후 삭제를 해야하는 작업이었다. 그런데 파일의 수가 워낙에 많다보니 지우는 작업에 소요되는 시간이 너무 길었다. 어차피 서비스 서버가 아니고 스케쥴로 처리되는 작업이니 시간이 조금 오래 걸려도 큰 문제될 것은 없었으나 그래도 시간을 조금이라도 줄여보고자 자료를 찾아보다 Efficiently delete large directory containing thousands of files라는 글을 찾았다. 위 글에서 제시하는 방법은 rsync를 이용해서 빈 폴더와 동기화시키는 방법으로 파일들을 삭제하는 것이다. 이게 큰 차이가 있을까 싶었으나 위 글 외에도 여러 곳에서 이 방법을 제시하고 있다. $ rsync -a --delete _empty/ target_directory/ 대량의 파일을 지울 일이 있다면 한번쯤은 시도해 보는 것도 괜찮을 것 같아 소개해 본다. 추가적으로 아래와 같이 병렬 삭제를 하는 것도 방법이라고 한다. 하지만 위 방법이 훨씬 나을 것으로 본다. $ find target_directory -maxdepth 3 | tac | xargs -d \n -P 5 -n 5 rm -rf]]></summary><content type="html"><![CDATA[<p>주기적으로 실행되는 스케쥴 중에 대량의 파일을 삭제해야 하는 작업이 있었다. 데이터 수집 등의 작업으로 누적된 로그/캐시 파일들을 작업 완료 후 삭제를 해야하는 작업이었다. 그런데 파일의 수가 워낙에 많다보니 지우는 작업에 소요되는 시간이 너무 길었다. 어차피 서비스 서버가 아니고 스케쥴로 처리되는 작업이니 시간이 조금 오래 걸려도 큰 문제될 것은 없었으나 그래도 시간을 조금이라도 줄여보고자 자료를 찾아보다 <a href="http://unix.stackexchange.com/questions/37329/efficiently-delete-large-directory-containing-thousands-of-files">Efficiently delete large directory containing thousands of files</a>라는 글을 찾았다.</p>
<p>위 글에서 제시하는 방법은 <a href="https://en.wikipedia.org/wiki/Rsync">rsync</a>를 이용해서 빈 폴더와 동기화시키는 방법으로 파일들을 삭제하는 것이다. 이게 큰 차이가 있을까 싶었으나 위 글 외에도 여러 곳에서 이 방법을 제시하고 있다.</p>
<pre class="hljs bash">$ rsync -a --delete _empty/ target_directory/</pre>
<p>대량의 파일을 지울 일이 있다면 한번쯤은 시도해 보는 것도 괜찮을 것 같아 소개해 본다.</p>
<p>추가적으로 아래와 같이 병렬 삭제를 하는 것도 방법이라고 한다. 하지만 위 방법이 훨씬 나을 것으로 본다.</p>
<pre class="hljs bash">$ find target_directory -maxdepth 3 | tac | xargs -d \n -P 5 -n 5 rm -rf</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/04/26/gulp-watch-is-very-slow-to-recognize-file-modifications/</id><title type="html">NFS로 연결된 디스크에서 Gulp Watch 사용시 파일 변경 감지가 느릴 때</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/04/26/gulp-watch-is-very-slow-to-recognize-file-modifications/"/><published>2016-04-26T21:21:07+09:00</published><updated>2016-04-26T21:21:07+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[얼마 전부터 프로젝트에서 Lumen을 사용하고 있다. Laravel을 사용하려고 하다가 경량 프레임워크에 더 끌려서 Lumen을 사용중이다. 사실 이 부분에 관련해서 약간의 후회(고민)를 하고 있다. lumen은 아무래도 자료도 부족한 면이 있고 Laravel 모듈과의 연동이 원활하지 않은 부분이 있어서 불편한 면이 있다. Lumen에는 Laravel에서 기본적으로 제공하는 기능 중 많은 부분이 제외되어 있는데 그 중 하나가 Elixir이다. 하지만 Elixir를 Lumen에 연결하는 것은 크게 어렵지 않다. Elixir는 Gulp를 기반으로 제작되어 있다. 따라서 작업시 gulp의 watch 기능을 사용하게 되는데 나의 작업 환경인 vagrant(centos) 내에서 파일의 변경을 잘 인식하지 못했다. 그래서 관련자료를 찾다가 Watch is very slow to recognize file modifications라는 글을 찾았다. 여기서 원인을 찾았는데 원인은 바로 NFS로 연결된 디스크로 인한 문제였다. 이 글에서의 해결책은 아래와 같다. 중요한 부분은 actimeo=2 이다. config.vm.synced_folder "dev", "/dev/vagrant", :nfs => true, :mount_options => ['actimeo=2'] 하지만 나의 경우는 synced_folder를 사용하지 않고 부팅시 직접적으로 NFS 디스크를 마운트하고 있다. 그래서 아래와 같이 적용했다. mount -o "vers=3,udp,nolock,actimeo=2" 192.168.99.1:"/subdev/web" /home/web 그럼 여기서 actimeo는 무엇인가? Linux man page에 아래와 같이 설명되어 있다. actimeo=n Using actimeo sets all of acregmin, acregmax, acdirmin, and acdirmax to the same value. If this option is not specified, the NFS client uses the defaults for each of these options listed above. 간단히 이야기하자면 위의 방법은 NFS의 파일 cache time을 2초로 줄여서 파일의 변경을 빠르게 인지할 수 있도록 해주는 것이다. 다른 방법으로는 lookupcache=none 옵션을 사용하는 것도 가능하다(Watching files for changes on Vagrant, file modification times not updating ). config.vm.synced_folder "./", "/vagrant", type: "nfs", mount_options: ["lookupcache=none"]]]></summary><content type="html"><![CDATA[<p>얼마 전부터 프로젝트에서 <a href="https://lumen.laravel.com/">Lumen</a>을 사용하고 있다. <a href="https://laravel.com/">Laravel</a>을 사용하려고 하다가 경량 프레임워크에 더 끌려서 Lumen을 사용중이다. 사실 이 부분에 관련해서 약간의 후회(고민)를 하고 있다. lumen은 아무래도 자료도 부족한 면이 있고 Laravel 모듈과의 연동이 원활하지 않은 부분이 있어서 불편한 면이 있다.</p>
<p>Lumen에는 Laravel에서 기본적으로 제공하는 기능 중 많은 부분이 제외되어 있는데 그 중 하나가 <a href="https://laravel.com/docs/master/elixir">Elixir</a>이다. 하지만 Elixir를 Lumen에 연결하는 것은 크게 어렵지 않다. Elixir는 <a href="http://gulpjs.com/">Gulp</a>를 기반으로 제작되어 있다. 따라서 작업시 gulp의 watch 기능을 사용하게 되는데 나의 작업 환경인 vagrant(centos) 내에서 파일의 변경을 잘 인식하지 못했다.</p>
<p>그래서 관련자료를 찾다가 <a href="https://github.com/gulpjs/gulp/issues/448">Watch is very slow to recognize file modifications</a>라는 글을 찾았다. 여기서 원인을 찾았는데 원인은 바로 NFS로 연결된 디스크로 인한 문제였다.</p>
<p>이 글에서의 해결책은 아래와 같다. 중요한 부분은 <code>actimeo=2</code> 이다.</p>
<pre><code>config.vm.synced_folder "dev", "/dev/vagrant",
    :nfs =&gt; true,
    :mount_options =&gt; ['actimeo=2']</code></pre>
<p>하지만 나의 경우는 <code>synced_folder</code>를 사용하지 않고 부팅시 직접적으로 NFS 디스크를 마운트하고 있다. 그래서 아래와 같이 적용했다.</p>
<pre><code>mount -o "vers=3,udp,nolock,actimeo=2" 192.168.99.1:"/subdev/web" /home/web</code></pre>
<p>그럼 여기서 <code>actimeo</code>는 무엇인가? <a href="http://linux.die.net/man/5/nfs">Linux man page</a>에 아래와 같이 설명되어 있다.</p>
<blockquote>
<p><em>actimeo=n</em></p>
<p>Using actimeo sets all of acregmin, acregmax, acdirmin, and acdirmax to the same value. If this option is not specified, the NFS client uses the defaults for each of these options listed above.</p>
</blockquote>
<p>간단히 이야기하자면 위의 방법은 NFS의 파일 cache time을 2초로 줄여서 파일의 변경을 빠르게 인지할 수 있도록 해주는 것이다.</p>
<p>다른 방법으로는 <code>lookupcache=none</code> 옵션을 사용하는 것도 가능하다(<a href="http://stackoverflow.com/a/28571327">Watching files for changes on Vagrant, file modification times not updating</a>
).</p>
<pre><code>config.vm.synced_folder "./", "/vagrant", type: "nfs", mount_options: ["lookupcache=none"]</code></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/04/14/how-to-chmod-all-directories-or-files/</id><title type="html">chmod로 권한 변경시 디렉토리(또는 파일)만 적용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/04/14/how-to-chmod-all-directories-or-files/"/><published>2016-04-14T19:00:43+09:00</published><updated>2016-04-14T19:00:43+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[chmod로 디렉토리 또는 파일의 권한을 변경할 때 하위에 포함된 파일들까지 일괄 적용을 하기 위해 -R 옵션을 사용할 수 있다. 그런데 이 경우는 하위의 모든 디렉토리와 파일에 적용된다. 아래는 하위의 디렉토리만 또는 파일만 적용하도록 하는 방법을 안내한다. # 하위 디렉토리만 포함 find /path/to/base/dir -type d -exec chmod 755 {} + chmod 755 $(find /path/to/base/dir -type d) find /path/to/base/dir -type d -print0 | xargs -0 chmod 755 # 하위 파일만 포함 find /path/to/base/dir -type f -exec chmod 644 {} + chmod 644 $(find /path/to/base/dir -type f) find /path/to/base/dir -type f -print0 | xargs -0 chmod 644 출처 : How to chmod all directories except files (recursively)? 여러가지 방법이 있으니 상황에 따라 골라서 사용하면 된다. 위 주제와 관련있는 내용은 아니지만 덤으로 chown 사용시 기존에 지정된 사용자에 따라 적용 여부를 결정할 수 있는 명령도 아래에 안내한다. # chown 특정 사용자만 변경 chown --from=root.root web.usergroup * -R chown --from=511 -R web *]]></summary><content type="html"><![CDATA[<p>chmod로 디렉토리 또는 파일의 권한을 변경할 때 하위에 포함된 파일들까지 일괄 적용을 하기 위해 <code>-R</code> 옵션을 사용할 수 있다. 그런데 이 경우는 하위의 모든 디렉토리와 파일에 적용된다. 아래는 하위의 디렉토리만 또는 파일만 적용하도록 하는 방법을 안내한다.</p>
<pre class="hljs bash"><span class="hljs-comment"># 하위 디렉토리만 포함</span>
find /path/to/base/dir -<span class="hljs-built_in">type</span> d -<span class="hljs-built_in">exec</span> chmod 755 {} +
chmod 755 $(find /path/to/base/dir -<span class="hljs-built_in">type</span> d)
find /path/to/base/dir -<span class="hljs-built_in">type</span> d -print0 | xargs -0 chmod 755

<span class="hljs-comment"># 하위 파일만 포함</span>
find /path/to/base/dir -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">exec</span> chmod 644 {} +
chmod 644 $(find /path/to/base/dir -<span class="hljs-built_in">type</span> f)
find /path/to/base/dir -<span class="hljs-built_in">type</span> f -print0 | xargs -0 chmod 644</pre>
<p>출처 : <a href="http://superuser.com/a/91938">How to chmod all directories except files (recursively)?</a></p>
<p>여러가지 방법이 있으니 상황에 따라 골라서 사용하면 된다.</p>
<hr />
<p>위 주제와 관련있는 내용은 아니지만 덤으로 chown 사용시 기존에 지정된 사용자에 따라 적용 여부를 결정할 수 있는 명령도 아래에 안내한다.</p>
<pre class="hljs bash"><span class="hljs-comment"># chown 특정 사용자만 변경</span>
chown --from=root.root web.usergroup * -R
chown --from=511 -R web *</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/04/12/php-fpm-opcache-and-nginx-502-bad-gateaway/</id><title type="html">php-fpm opcache로 인한 Nginx - 502 bad gateaway 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/04/12/php-fpm-opcache-and-nginx-502-bad-gateaway/"/><published>2016-04-12T15:39:21+09:00</published><updated>2016-04-12T15:39:21+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[얼마 전부터 서비스 사용자로부터 이상한 오류 보고를 비주기적으로 받고 있다. 특정 페이지에 접속시 502 Bad gateaway 오류가 난다는 것이다. 하지만 그 오류가 나는 페이지에 특별히 눈에 띄는 부분은 없다. 게다가 동일한 프로그램이 몇개의 폴더에서 동시에 사용 중임에도 꼭 한군데서만 동일한 문제를 일으킨다. 게다가 일시적으로 발생하고 사라지지 않고 한번 오류가 발생하면 그 후에 해당 페이지에 접속하면 해결 전까지는 계속 502 에러를 보인다. 게다가 해당 오류가 발생하는 조건을 알 수 없어 오류 재연이 불가능한 상황이라 원인 파악에 애를 먹고 있다. 현재 해당 서버는 CentOS 6.7에 nginx + php-fpm으로 서비스 되고 있고 opcache와 apcu 등이 적용되어 있다. 오류가 난 상황에서는 로그에 아래와 같은 기록이 남는다. /var/log/nginx/error.log 2016/04/12 14:50:43 [error] 2481#2481: *1828457 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: ~~~.~~~.~~~.~~~, server: ~~~, request: "GET /~~~ HTTP/1.1", upstream: "fastcgi://~~~:", host: "~~~", referrer: "~~~" /var/log/php-fpm/error.log [12-Apr-2016 14:54:39] WARNING: [pool www] child 24352 exited on signal 11 (SIGSEGV) after 301.965713 seconds from start [12-Apr-2016 14:54:39] NOTICE: [pool www] child 24510 started 현재로써는 일단 오류가 발생하면 해당 서버의 opcache를 초기화해주면 문제는 즉시 해결된다. 따라서 opcache의 오류로 판단하고 있다. 이 문제와 관련해서 검색해보니 비슷한 증상을 보이는 사례들이 많았다. 대부분의 경우 해결책은 opcache를 끄도록 설정하는 것을 제시하고 있다. 하지만 opcache는 당연히 필요하니 사용하던 것이라 그냥 끌수는 없다. 다른 방법으로 Apache 2.4 + Opcache + APCu = 502?에 보면 아래와 같은 방법을 제시하고 있다. /etc/php.d/opcache.ini: opcache.fast_shutdown=0 opcache.enable_cli=0 하지만 fast_shutdown의 경우도 성능을 위해 사용하는 것이 권장되고 있는 옵션으로 그냥 끌수는 없다. 사실 문제가 해결된다는 보장도 없다(글쓴이도 정확하게 이해한 것이 아니라고 한다). 여기서 잠깐 fast_shutdown에 대해 조금 알아보자. PHP 매뉴얼 OPcache 설치/설정에 보면 아래와 같이 설명되어 있다. opcache.fast_shutdown boolean If enabled, a fast shutdown sequence is used that doesn't free each allocated block, but relies on the Zend Engine memory manager to deallocate the entire set of request variables en masse. 정확한 의미는 모르겠지만 메뉴얼(Recommended php.ini settings ) 상에서도 아래와 같이 fast_shutdown를 켜는 것을 권장하고 있다. opcache.memory_consumption=128 opcache.interned_strings_buffer=8 opcache.max_accelerated_files=4000 opcache.revalidate_freq=60 opcache.fast_shutdown=1 opcache.enable_cli=1 다른 문서인 Best Zend OpCache Settings/Tuning/Config에서도 켜는 것을 권장하고 있다. 따라서 이 옵션을 끄는 것도 보류. 현재 프로그램에서 의심되는 부분(다른 파일과 동일한 namespace와 class명을 사용)을 수정하고 opcache의 몇가지 옵션을 조정해서 다시 오류가 발생하는지 지켜보고 있다. 다시 오류가 재연되면 opcache 관리 페이지에서 전체 초기화가 아닌 파일 단위로 초기화하면서 원인 파일을 찾으려고 한다(진작에 했어야 하는 일이지만 서비스 중인 상태로 최대한 빨리 복구해야 해서 많은 시간을 들여 오류 위치를 찾을 수 없었다). 원인 파일을 찾고 나면 소스를 리뷰한 후 특별한 문제를 찾지 못할 경우 해당 파일만 opcache에서 제외시킬 계획이다. 제외하는 방법은 opcache.blacklist_filename에 지정된 파일에 해당 파일 경로를 추가하면 된다. 나의 경우는 opcache.blacklist_filename = /etc/php.d/opcache*.blacklist로 설정되어 있고 /etc/php.d/opcache-default.blacklist 파일이 기본적으로 생성되어 있다. 현재 테스트 서버에서 /etc/php.d/opcache-default.blacklist에 특정 파일 경로를 추가해서 opcache에서 정상적으로 제외되는지 확인은 마쳤다. php를 10여년 넘게 써오면서 이런 경우는 처음이다. 프로그램을 수정한 부분으로 문제가 해결되었으면 하는 바람이다. 첨부 위 상황과는 관련이 없지만 불특정하게 발생하지 않는 일반적인 상황에서의 502 오류라면 nginx + PHP-fpm에서 502 Bad gateway 에러 해결법 총정리를 참고하면 도움이 될 것이다. 첨부 위 현상과 유사하게 오류가 발생하는 경우가 있다(위 문제도 이것이 원인일수도 있다). 문제의 원인은 apcu의 serializer 다. 기본 설정값은 apc.serializer='default'다. 여기서 default는 php_serialize인 것 같다. 아마도 apcu에서 데이터를 캐시할 때 serializer를 사용하는 것으로 보이는데 여기서 충돌이 발생하는 것으로 보인다. serialize를 'default' 대신 'php'를 넣어주거나 아예 해당 라인은 주석 처리해서 설정을 제거하면 일단 502에러는 완전히 없어진다. apcu의 최신 버전인 5.1.7을 사용해도 문제는 동일하다. 문제는 "이 현상이 모든 환경에서 발생하지는 않는다"는 것이다. 하지만 혹시 동일한 문제로 고생하고 있는 사람이 있다면 이 부분을 한번 확인해보길 바란다.]]></summary><content type="html"><![CDATA[<p>얼마 전부터 서비스 사용자로부터 이상한 오류 보고를 비주기적으로 받고 있다.</p>
<p>특정 페이지에 접속시 <code>502 Bad gateaway</code> 오류가 난다는 것이다. 하지만 그 오류가 나는 페이지에 특별히 눈에 띄는 부분은 없다. 게다가 동일한 프로그램이 몇개의 폴더에서 동시에 사용 중임에도 꼭 한군데서만 동일한 문제를 일으킨다. 게다가 일시적으로 발생하고 사라지지 않고 한번 오류가 발생하면 그 후에 해당 페이지에 접속하면 해결 전까지는 계속 502 에러를 보인다. 게다가 해당 오류가 발생하는 조건을 알 수 없어 오류 재연이 불가능한 상황이라 원인 파악에 애를 먹고 있다.</p>
<p>현재 해당 서버는 CentOS 6.7에 nginx + php-fpm으로 서비스 되고 있고 opcache와 apcu 등이 적용되어 있다. 오류가 난 상황에서는 로그에 아래와 같은 기록이 남는다.</p>
<p><strong>/var/log/nginx/error.log</strong></p>
<pre><code>2016/04/12 14:50:43 [error] 2481#2481: *1828457 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: ~~~.~~~.~~~.~~~, server: ~~~, request: "GET /~~~ HTTP/1.1", upstream: "fastcgi://~~~:", host: "~~~", referrer: "~~~"</code></pre>
<p><strong>/var/log/php-fpm/error.log</strong></p>
<pre><code>[12-Apr-2016 14:54:39] WARNING: [pool www] child 24352 exited on signal 11 (SIGSEGV) after 301.965713 seconds from start
[12-Apr-2016 14:54:39] NOTICE: [pool www] child 24510 started</code></pre>
<p>현재로써는 일단 오류가 발생하면 해당 서버의 opcache를 초기화해주면 문제는 즉시 해결된다. 따라서 opcache의 오류로 판단하고 있다.</p>
<p>이 문제와 관련해서 검색해보니 비슷한 증상을 보이는 사례들이 많았다. 대부분의 경우 해결책은 opcache를 끄도록 설정하는 것을 제시하고 있다. 하지만 opcache는 당연히 필요하니 사용하던 것이라 그냥 끌수는 없다. 다른 방법으로 <a href="http://offandon.org/2015/12/apache-2-4-opcache-apcu-502/">Apache 2.4 + Opcache + APCu = 502?</a>에 보면 아래와 같은 방법을 제시하고 있다.</p>
<p><strong>/etc/php.d/opcache.ini:</strong></p>
<pre><code>opcache.fast_shutdown=0
opcache.enable_cli=0</code></pre>
<p>하지만 <code>fast_shutdown</code>의 경우도 성능을 위해 사용하는 것이 권장되고 있는 옵션으로 그냥 끌수는 없다. 사실 문제가 해결된다는 보장도 없다(글쓴이도 정확하게 이해한 것이 아니라고 한다).</p>
<p>여기서 잠깐 <code>fast_shutdown</code>에 대해 조금 알아보자. <a href="http://php.net/manual/kr/opcache.configuration.php#ini.opcache.fast-shutdown">PHP 매뉴얼 OPcache 설치/설정</a>에 보면 아래와 같이 설명되어 있다.</p>
<blockquote>
<p><strong>opcache.fast_shutdown boolean</strong></p>
<p>If enabled, a fast shutdown sequence is used that doesn't free each allocated block, but relies on the Zend Engine memory manager to deallocate the entire set of request variables en masse.</p>
</blockquote>
<p>정확한 의미는 모르겠지만 메뉴얼(<a href="http://php.net/manual/kr/opcache.installation.php">Recommended php.ini settings </a>) 상에서도 아래와 같이 <code>fast_shutdown</code>를 켜는 것을 권장하고 있다.</p>
<pre><code>opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.enable_cli=1</code></pre>
<p>다른 문서인 <a href="https://www.scalingphpbook.com/blog/2014/02/14/best-zend-opcache-settings.html">Best Zend OpCache Settings/Tuning/Config</a>에서도 켜는 것을 권장하고 있다. 따라서 이 옵션을 끄는 것도 보류.</p>
<p>현재 프로그램에서 의심되는 부분(다른 파일과 동일한 namespace와 class명을 사용)을 수정하고 opcache의 몇가지 옵션을 조정해서 다시 오류가 발생하는지 지켜보고 있다. 다시 오류가 재연되면 opcache 관리 페이지에서 전체 초기화가 아닌 파일 단위로 초기화하면서 원인 파일을 찾으려고 한다(진작에 했어야 하는 일이지만 서비스 중인 상태로 최대한 빨리 복구해야 해서 많은 시간을 들여 오류 위치를 찾을 수 없었다).</p>
<p>원인 파일을 찾고 나면 소스를 리뷰한 후 특별한 문제를 찾지 못할 경우 해당 파일만 opcache에서 제외시킬 계획이다.</p>
<p>제외하는 방법은 <code>opcache.blacklist_filename</code>에 지정된 파일에 해당 파일 경로를 추가하면 된다. 나의 경우는 <code>opcache.blacklist_filename = /etc/php.d/opcache*.blacklist</code>로 설정되어 있고 <code>/etc/php.d/opcache-default.blacklist</code> 파일이 기본적으로 생성되어 있다. 현재 테스트 서버에서 <code>/etc/php.d/opcache-default.blacklist</code>에 특정 파일 경로를 추가해서 opcache에서 정상적으로 제외되는지 확인은 마쳤다.</p>
<p>php를 10여년 넘게 써오면서 이런 경우는 처음이다. 프로그램을 수정한 부분으로 문제가 해결되었으면 하는 바람이다.</p>
<p><strong>첨부</strong></p>
<p>위 상황과는 관련이 없지만 불특정하게 발생하지 않는 일반적인 상황에서의 502 오류라면 <a href="https://gom2.net/502-bad-gateway-solution-on-nginx-php_fpm/">nginx + PHP-fpm에서 502 Bad gateway 에러 해결법 총정리</a>를 참고하면 도움이 될 것이다.</p>
<p><strong>첨부</strong></p>
<p>위 현상과 유사하게 오류가 발생하는 경우가 있다(위 문제도 이것이 원인일수도 있다). 문제의 원인은 apcu의 serializer 다. 기본 설정값은 <code>apc.serializer='default'</code>다. 여기서 default는 <code>php_serialize</code>인 것 같다. 아마도 apcu에서 데이터를 캐시할 때 serializer를 사용하는 것으로 보이는데 여기서 충돌이 발생하는 것으로 보인다. serialize를 'default' 대신 'php'를 넣어주거나 아예 해당 라인은 주석 처리해서 설정을 제거하면 일단 502에러는 완전히 없어진다. apcu의 최신 버전인 5.1.7을 사용해도 문제는 동일하다.</p>
<p>문제는 &quot;이 현상이 모든 환경에서 발생하지는 않는다&quot;는 것이다. 하지만 혹시 동일한 문제로 고생하고 있는 사람이 있다면 이 부분을 한번 확인해보길 바란다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/04/11/create-instance-of-generic-type-in-java/</id><title type="html">Generic Type으로 인스턴스 생성</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/04/11/create-instance-of-generic-type-in-java/"/><published>2016-04-11T19:40:32+09:00</published><updated>2016-04-11T19:40:32+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="java" label="java" /><category term="android" label="android" /><summary><![CDATA[java에서 Generic Type은 유용하고 다양한 곳에서 사용한다. 예를 들어 안드로이드에서 findViewById 사용시 Generics을 이용해 Type Casting 없애기처럼 사용도 가능하다. 이 글의 주제는 Generic Type으로 해당 class의 인스턴스를 얻는 방법에 대한 것이므로 Generic Type에 대한 기본적인 내용은 다루지 않는다(설명이 길다). 우선 class로 인스턴스를 생성하는 가장 기본적인 방법부터 보자. Class clazz = String.class; try { String a = (String) clazz.newInstance(); } catch (IllegalAccessException e) { } catch (java.lang.InstantiationException e) { e.printStackTrace(); } 위처럼 class를 가지고 있다면 인스턴스를 생성할 수 있으므로 Generic Type으로 class를 얻을 수 있다면 인스턴스 또한 생성할 수 있다. 아래는 일반적으로 Generic Type에 맞는 인스턴스를 생성하기 위한 방법에 대한 샘플 소스다. class Gen<T> { private Class<T> mClass; public Gen(Class<T> cls) { mClass = cls; } public T get() { try { return mClass.newInstance(); } catch (Exception e) { e.printStackTrace(); return null; } } } class A { public String name = "A!"; } public static void main(String[] args) { Gen<A> g = new Gen<>(A.class); A a = g.get(); System.out.println(a.name); } 그런데 위 방법은 원하는 결과를 얻을 수 있으나 Generic Type으로 인스턴스를 얻은 것은 아니다. 생성자에 Generic Type에 해당하는 class를 넘겨주고 이를 기억했다가 인스턴스를 생성하기 때문이다. Generic Type에 의해 class가 정확히 제한되는 장점은 있으나 항상 class를 넘겨줘야 한다. 위 방법을 개선해서 class를 직접 넘겨주지 않고 인스턴스를 얻는 방법을 알아보자. abstract class Gen<T> { public T get() { try { // noinspection unchecked Class<T> mClass = (Class<T>) ClassUtils.getReclusiveGenericClass(getClass(), 0); if (mClass != null) { return mClass.newInstance(); } } catch (Exception e) { e.printStackTrace(); } return null; } } class A { public String name = "A!"; } class GetT extends Gen<A> { } public static void main(String[] args) { GetT gt = new GetT(); A a = gt.get(); System.out.println(a.name); } 위 소스에서 사용된 ClassUtils의 소스는 아래와 같다. import java.lang.reflect.Array; import java.lang.reflect.GenericArrayType; import java.lang.reflect.ParameterizedType; import java.lang.reflect.Type; class ClassUtils { private static final String TYPE_NAME_PREFIX = "class "; public static Class<?> getReclusiveGenericClass(Class<?> clazz, int index) { Class<?> targetClass = clazz; while (targetClass != null) { Class<?> genericClass = getGenericClass(targetClass, index); if (genericClass != null) { return genericClass; } targetClass = targetClass.getSuperclass(); } return null; } public static Class<?> getGenericClass(Class<?> clazz, int index) { Type types[] = getParameterizedTypes(clazz); if ((types != null) && (types.length > index)) { try { return getClass(types[index]); } catch (Exception e) { e.printStackTrace(); } } return null; } static public Type[] getParameterizedTypes(Class<?> target) { Type[] types = getGenericType(target); if (types.length > 0 && types[0] instanceof ParameterizedType) { return ((ParameterizedType) types[0]).getActualTypeArguments(); } return null; } static public Class<?> getClass(Type type) throws ClassNotFoundException { if (type instanceof Class) { return (Class) type; } else if (type instanceof ParameterizedType) { return getClass(((ParameterizedType) type).getRawType()); } else if (type instanceof GenericArrayType) { Type componentType = ((GenericArrayType) type).getGenericComponentType(); Class<?> componentClass = getClass(componentType); if (componentClass != null) { return Array.newInstance(componentClass, 0).getClass(); } } String className = getClassName(type); if (className == null || className.isEmpty()) { return null; } return Class.forName(className); } static public String getClassName(Type type) { if (type == null) { return ""; } String className = type.toString(); if (className.startsWith(TYPE_NAME_PREFIX)) { className = className.substring(TYPE_NAME_PREFIX.length()); } return className; } static public Type[] getGenericType(Class<?> target) { if (target == null) { return new Type[0]; } Type[] types = target.getGenericInterfaces(); if (types.length > 0) { return types; } Type type = target.getGenericSuperclass(); if (type != null) { if (type instanceof ParameterizedType) { return new Type[]{type}; } } return new Type[0]; } } 언뜻보면 위 방법이 처음 방법에 비해 훨씬 복잡해 보일 수 있다. 하지만 이 방법이 아주 유용하게 사용되는 경우들이 많이 있다. 그리고 위 코드를 자세히 보면 알겠지만 가장 큰 단점이 있다. Generic Type 이 포함된 클래스를 바로 사용할 수 없고 상속을 한번 이상 받아야 한다는 것이다. 그럼에도 불구하고 위 방법을 응용하면 조금 더 간결한 코딩을 할 수 있다. 예를들어 아래의 volleyer 사용 예시 소스를 보자. volleyer(requestQueue).get(url) .addHeader("header1", "value1") .addHeader("header2", "value2") .withTargetClass(Person.class) .withListener(new Listener<Person>() { @Override public void onResponse(Person person) { Log.d(TAG, "person : " + person); } }) .execute(); 위 소스를 보면 .withTargetClass(Person.class)에서 Person.class를 넘겨주고 있다. 하지만 이 부분은 .withListener(new Listener<Person>()에서 보듯이 Listener의 Generic Type에 의해 유추할 수 있다. 따라서 위에 소개한 방법을 응용하면 아래와 같은 코드를 만들어 낼 수 있다. volleyer(requestQueue).get(url) .addHeader("header1", "value1") .addHeader("header2", "value2") .withListener(new Listener<Person>() { @Override public void onResponse(Person person) { Log.d(TAG, "person : " + person); } }) .execute(); 결론은 .withTargetClass(Person.class) 한줄 빠진 것이다. 굳이 저 한줄을 빼고자 이렇게 복잡하게 해야하나 생각할 수 있지만 복잡한 로직과 결합되면 이 한줄의 코드를 제거하는 것이 큰 영향을 줄 수 있다. 그리고 위 상황이라면 어짜피 Listener는 상속을 한번 받아서 사용하므로 안내한 방법의 단점이 단점이 되지 않는다. 안내한 방법을 응용하면 Method에서 Generic Type을 추출하는 방법도 있다. 그외에도 여러가지 응용 방법이 있으나 설명하자니 너무 길어질 것 같아서 줄인다. 첨부 2016.04.12 위 클래스를 사용하는 방법도 있지만 이와 관련된 라이브러리도 찾았다. jhalterman/typetools라는 것인데 사용법은 해당 사이트에 설명되어 있다. 내부적인 구현은 위에서 소개한 방법과 유사하나 조금 더 다양하게 사용이 가능하고 조금 더 여러가지 상황이 고려되어 있다. 다만, 사이트에 gradle에 추가하는 방법이 안내되어 있지 않다. 그래서 테스트하면서 적용한 방법을 아래에 남긴다. 참고로 android 프로젝트에서 unittest 시에 실행 오류가 발생할 수 있다. 이에 관련해서 오늘 오전에 이슈를 남겼는데 몇시간 지나지 않아 패치를 했다는 답변을 받았다. 하지만 현재 시점(0.4.6)에서는 아직 release되지 않았으므로 혹시 테스트를 하려면 다음의 System.setProperty("java.version", "0"); 코드를 TypeResolver.resolveRawArguments() 사용 전에 추가해주면 된다. 참고로 오류는 아래와 같다. Caused by: java.lang.NumberFormatException: For input string: "1.7.0_79" at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.lang.Integer.parseInt(Integer.java:492) at java.lang.Integer.valueOf(Integer.java:582) at net.jodah.typetools.TypeResolver.<clinit>(TypeResolver.java:54) 사용법은 gradle을 사용하는 경우 아래의 코드를 build.gradle 파일에 추가하면 사용 가능하다. repositories { mavenCentral() } dependencies { compile 'net.jodah:typetools:0.4.6' }]]></summary><content type="html"><![CDATA[<p>java에서 Generic Type은 유용하고 다양한 곳에서 사용한다. 예를 들어 <a href="https://blog.asamaru.net/2015/09/08/cleaner-view-casting-with-generics/">안드로이드에서 findViewById 사용시 Generics을 이용해 Type Casting 없애기</a>처럼 사용도 가능하다. 이 글의 주제는 Generic Type으로 해당 class의 인스턴스를 얻는 방법에 대한 것이므로 Generic Type에 대한 기본적인 내용은 다루지 않는다(설명이 길다).</p>
<p>우선 class로 인스턴스를 생성하는 가장 기본적인 방법부터 보자.</p>
<pre class="hljs java">Class clazz = String.class;
<span class="hljs-keyword">try</span> {
  String a = (String) clazz.newInstance();
} <span class="hljs-keyword">catch</span> (IllegalAccessException e) {
} <span class="hljs-keyword">catch</span> (java.lang.InstantiationException e) {
  e.printStackTrace();
}</pre>
<p>위처럼 class를 가지고 있다면 인스턴스를 생성할 수 있으므로 Generic Type으로 class를 얻을 수 있다면 인스턴스 또한 생성할 수 있다.</p>
<p>아래는 일반적으로 Generic Type에 맞는 인스턴스를 생성하기 위한 방법에 대한 샘플 소스다.</p>
<pre class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gen</span>&lt;<span class="hljs-title">T</span>&gt; </span>{
  <span class="hljs-keyword">private</span> Class&lt;T&gt; mClass;

  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Gen</span><span class="hljs-params">(Class&lt;T&gt; cls)</span> </span>{
    mClass = cls;
  }

  <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">try</span> {
      <span class="hljs-keyword">return</span> mClass.newInstance();
    } <span class="hljs-keyword">catch</span> (Exception e) {
      e.printStackTrace();
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    }
  }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{
  <span class="hljs-keyword">public</span> String name = <span class="hljs-string">"A!"</span>;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  Gen&lt;A&gt; g = <span class="hljs-keyword">new</span> Gen&lt;&gt;(A.class);
  A a = g.get();
  System.out.println(a.name);
}</pre>
<p>그런데 위 방법은 원하는 결과를 얻을 수 있으나 Generic Type으로 인스턴스를 얻은 것은 아니다. 생성자에 Generic Type에 해당하는 class를 넘겨주고 이를 기억했다가 인스턴스를 생성하기 때문이다. Generic Type에 의해 class가 정확히 제한되는 장점은 있으나 항상 class를 넘겨줘야 한다.</p>
<p>위 방법을 개선해서 class를 직접 넘겨주지 않고 인스턴스를 얻는 방법을 알아보자.</p>
<pre class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gen</span>&lt;<span class="hljs-title">T</span>&gt; </span>{
    <span class="hljs-function"><span class="hljs-keyword">public</span> T <span class="hljs-title">get</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// noinspection unchecked</span>
            Class&lt;T&gt; mClass = (Class&lt;T&gt;) ClassUtils.getReclusiveGenericClass(getClass(), <span class="hljs-number">0</span>);
            <span class="hljs-keyword">if</span> (mClass != <span class="hljs-keyword">null</span>) {
                <span class="hljs-keyword">return</span> mClass.newInstance();
            }
        } <span class="hljs-keyword">catch</span> (Exception e) {
            e.printStackTrace();
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    }
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>{
    <span class="hljs-keyword">public</span> String name = <span class="hljs-string">"A!"</span>;
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetT</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Gen</span>&lt;<span class="hljs-title">A</span>&gt; </span>{
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    GetT gt = <span class="hljs-keyword">new</span> GetT();
    A a = gt.get();
    System.out.println(a.name);
}</pre>
<p>위 소스에서 사용된 <code>ClassUtils</code>의 소스는 아래와 같다.</p>
<pre class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Array;
<span class="hljs-keyword">import</span> java.lang.reflect.GenericArrayType;
<span class="hljs-keyword">import</span> java.lang.reflect.ParameterizedType;
<span class="hljs-keyword">import</span> java.lang.reflect.Type;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassUtils</span> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String TYPE_NAME_PREFIX = <span class="hljs-string">"class "</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; getReclusiveGenericClass(Class&lt;?&gt; clazz, <span class="hljs-keyword">int</span> index) {
        Class&lt;?&gt; targetClass = clazz;
        <span class="hljs-keyword">while</span> (targetClass != <span class="hljs-keyword">null</span>) {
            Class&lt;?&gt; genericClass = getGenericClass(targetClass, index);
            <span class="hljs-keyword">if</span> (genericClass != <span class="hljs-keyword">null</span>) {
                <span class="hljs-keyword">return</span> genericClass;
            }
            targetClass = targetClass.getSuperclass();
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; getGenericClass(Class&lt;?&gt; clazz, <span class="hljs-keyword">int</span> index) {
        Type types[] = getParameterizedTypes(clazz);
        <span class="hljs-keyword">if</span> ((types != <span class="hljs-keyword">null</span>) &amp;&amp; (types.length &gt; index)) {
            <span class="hljs-keyword">try</span> {
                <span class="hljs-keyword">return</span> getClass(types[index]);
            } <span class="hljs-keyword">catch</span> (Exception e) {
                e.printStackTrace();
            }
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    }

    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> Type[] getParameterizedTypes(Class&lt;?&gt; target) {
        Type[] types = getGenericType(target);
        <span class="hljs-keyword">if</span> (types.length &gt; <span class="hljs-number">0</span> &amp;&amp; types[<span class="hljs-number">0</span>] <span class="hljs-keyword">instanceof</span> ParameterizedType) {
            <span class="hljs-keyword">return</span> ((ParameterizedType) types[<span class="hljs-number">0</span>]).getActualTypeArguments();
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    }

    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> Class&lt;?&gt; getClass(Type type) <span class="hljs-keyword">throws</span> ClassNotFoundException {
        <span class="hljs-keyword">if</span> (type <span class="hljs-keyword">instanceof</span> Class) {
            <span class="hljs-keyword">return</span> (Class) type;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type <span class="hljs-keyword">instanceof</span> ParameterizedType) {
            <span class="hljs-keyword">return</span> getClass(((ParameterizedType) type).getRawType());
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type <span class="hljs-keyword">instanceof</span> GenericArrayType) {
            Type componentType = ((GenericArrayType) type).getGenericComponentType();
            Class&lt;?&gt; componentClass = getClass(componentType);
            <span class="hljs-keyword">if</span> (componentClass != <span class="hljs-keyword">null</span>) {
                <span class="hljs-keyword">return</span> Array.newInstance(componentClass, <span class="hljs-number">0</span>).getClass();
            }
        }
        String className = getClassName(type);
        <span class="hljs-keyword">if</span> (className == <span class="hljs-keyword">null</span> || className.isEmpty()) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
        }
        <span class="hljs-keyword">return</span> Class.forName(className);
    }

    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> String <span class="hljs-title">getClassName</span><span class="hljs-params">(Type type)</span> </span>{
        <span class="hljs-keyword">if</span> (type == <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-string">""</span>;
        }
        String className = type.toString();
        <span class="hljs-keyword">if</span> (className.startsWith(TYPE_NAME_PREFIX)) {
            className = className.substring(TYPE_NAME_PREFIX.length());
        }
        <span class="hljs-keyword">return</span> className;
    }

    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> Type[] getGenericType(Class&lt;?&gt; target) {
        <span class="hljs-keyword">if</span> (target == <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Type[<span class="hljs-number">0</span>];
        }
        Type[] types = target.getGenericInterfaces();
        <span class="hljs-keyword">if</span> (types.length &gt; <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">return</span> types;
        }
        Type type = target.getGenericSuperclass();
        <span class="hljs-keyword">if</span> (type != <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">if</span> (type <span class="hljs-keyword">instanceof</span> ParameterizedType) {
                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Type[]{type};
            }
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Type[<span class="hljs-number">0</span>];
    }
}</pre>
<p>언뜻보면 위 방법이 처음 방법에 비해 훨씬 복잡해 보일 수 있다. 하지만 이 방법이 아주 유용하게 사용되는 경우들이 많이 있다.</p>
<p>그리고 위 코드를 자세히 보면 알겠지만 가장 큰 단점이 있다. Generic Type 이 포함된 클래스를 바로 사용할 수 없고 상속을 한번 이상 받아야 한다는 것이다. 그럼에도 불구하고 위 방법을 응용하면 조금 더 간결한 코딩을 할 수 있다.</p>
<p>예를들어 아래의 <a href="https://github.com/naver/volley-extensions/tree/master/volleyer">volleyer</a> 사용 예시 소스를 보자.</p>
<pre class="hljs java">volleyer(requestQueue).get(url)  
                    .addHeader(<span class="hljs-string">"header1"</span>, <span class="hljs-string">"value1"</span>)
                    .addHeader(<span class="hljs-string">"header2"</span>, <span class="hljs-string">"value2"</span>)
                    .withTargetClass(Person.class)
                    .withListener(<span class="hljs-keyword">new</span> Listener&lt;Person&gt;() {
                        <span class="hljs-meta">@Override</span>
                        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResponse</span><span class="hljs-params">(Person person)</span> </span>{
                            Log.d(TAG, <span class="hljs-string">"person : "</span> + person);        
                        }

                    })
                    .execute();</pre>
<p>위 소스를 보면 <code>.withTargetClass(Person.class)</code>에서 <code>Person.class</code>를 넘겨주고 있다. 하지만 이 부분은 <code>.withListener(new Listener&lt;Person&gt;()</code>에서 보듯이 Listener의 Generic Type에 의해 유추할 수 있다. 따라서 위에 소개한 방법을 응용하면 아래와 같은 코드를 만들어 낼 수 있다.</p>
<pre class="hljs java">volleyer(requestQueue).get(url)  
                    .addHeader(<span class="hljs-string">"header1"</span>, <span class="hljs-string">"value1"</span>)
                    .addHeader(<span class="hljs-string">"header2"</span>, <span class="hljs-string">"value2"</span>)
                    .withListener(<span class="hljs-keyword">new</span> Listener&lt;Person&gt;() {
                        <span class="hljs-meta">@Override</span>
                        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onResponse</span><span class="hljs-params">(Person person)</span> </span>{
                            Log.d(TAG, <span class="hljs-string">"person : "</span> + person);        
                        }

                    })
                    .execute();</pre>
<p>결론은 <code>.withTargetClass(Person.class)</code> 한줄 빠진 것이다. 굳이 저 한줄을 빼고자 이렇게 복잡하게 해야하나 생각할 수 있지만 복잡한 로직과 결합되면 이 한줄의 코드를 제거하는 것이 큰 영향을 줄 수 있다. 그리고 위 상황이라면 어짜피 Listener는 상속을 한번 받아서 사용하므로 안내한 방법의 단점이 단점이 되지 않는다.</p>
<p>안내한 방법을 응용하면 Method에서 Generic Type을 추출하는 방법도 있다. 그외에도 여러가지 응용 방법이 있으나 설명하자니 너무 길어질 것 같아서 줄인다.</p>
<hr />
<p><strong>첨부 2016.04.12</strong></p>
<p>위 클래스를 사용하는 방법도 있지만 이와 관련된 라이브러리도 찾았다. <a href="https://github.com/jhalterman/typetools">jhalterman/typetools</a>라는 것인데 사용법은 해당 사이트에 설명되어 있다. 내부적인 구현은 위에서 소개한 방법과 유사하나 조금 더 다양하게 사용이 가능하고 조금 더 여러가지 상황이 고려되어 있다. 다만, 사이트에 gradle에 추가하는 방법이 안내되어 있지 않다. 그래서 테스트하면서 적용한 방법을 아래에 남긴다. 참고로 android 프로젝트에서 unittest 시에 실행 오류가 발생할 수 있다. 이에 관련해서 오늘 오전에 이슈를 남겼는데 몇시간 지나지 않아 패치를 했다는 답변을 받았다. 하지만 현재 시점(0.4.6)에서는 아직 release되지 않았으므로 혹시 테스트를 하려면 다음의 <code>System.setProperty("java.version", "0");</code> 코드를 <code>TypeResolver.resolveRawArguments()</code> 사용 전에 추가해주면 된다. 참고로 오류는 아래와 같다.</p>
<pre><code>Caused by: java.lang.NumberFormatException: For input string: "1.7.0_79"
    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
    at java.lang.Integer.parseInt(Integer.java:492)
    at java.lang.Integer.valueOf(Integer.java:582)
    at net.jodah.typetools.TypeResolver.&lt;clinit&gt;(TypeResolver.java:54)</code></pre>
<p>사용법은 gradle을 사용하는 경우 아래의 코드를 build.gradle 파일에 추가하면 사용 가능하다.</p>
<pre><code>repositories {
    mavenCentral()
}

dependencies {
    compile 'net.jodah:typetools:0.4.6'
}</code></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/04/11/com-google-gson-jsonsyntaxexception-java-lang-numberformatexception-expected-an-int-but-was-2744647680/</id><title type="html">com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: Expected an int but was 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/04/11/com-google-gson-jsonsyntaxexception-java-lang-numberformatexception-expected-an-int-but-was-2744647680/"/><published>2016-04-11T12:54:28+09:00</published><updated>2016-04-11T12:54:28+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="java" label="java" /><category term="android" label="android" /><summary><![CDATA[GSON을 이용해서 JSON 데이터를 Parse하려고 할 때 아래와 같이 NumberFormatException이 발생할 수 있다. 이는 대부분의 경우 int의 최댓값을 넘어선 값을 int에 대입하려고 할 때 발생한다. com.android.volley.ParseError: com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: Expected an int but was 4291611852 at line 1 column 143 path $.items[0].items[0].borderColor 나의 경우엔 안드로이드로 color 값을 넘겨주려고 할 때 위 오류가 발생했다. 내가 지정한 값은 0xffcccccc인데 int로 4291611852이다. 그런데 안드로이드에서 int의 최댓값은 2147483647이므로 범위를 벋어난다. 그런데 안드로이드에서는 0xffcccccc와 같은 형식으로 color 값을 사용하지만 문제가 없다. 이유는 아래와 같이 0xffcccccc값을 int 범위 내로 변환하면 -3355444이 된다. System.out.println("0xffcccccc " + (int)0xffcccccc); 결론은 이런 값을 사용해야 할 경우는 GSON 객체에서 int 대신 long을 사용하고 사용하는 곳에서 int로 type casting하면 된다.]]></summary><content type="html"><![CDATA[<p><a href="https://github.com/google/gson">GSON</a>을 이용해서 JSON 데이터를 Parse하려고 할 때 아래와 같이 <code>NumberFormatException</code>이 발생할 수 있다. 이는 대부분의 경우 int의 최댓값을 넘어선 값을 int에 대입하려고 할 때 발생한다.</p>
<pre><code>com.android.volley.ParseError: com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: Expected an int but was 4291611852 at line 1 column 143 path $.items[0].items[0].borderColor</code></pre>
<p>나의 경우엔 안드로이드로 color 값을 넘겨주려고 할 때 위 오류가 발생했다. 내가 지정한 값은 <code>0xffcccccc</code>인데 int로 4291611852이다. 그런데 안드로이드에서 int의 최댓값은 2147483647이므로 범위를 벋어난다. 그런데 안드로이드에서는 <code>0xffcccccc</code>와 같은 형식으로 color 값을 사용하지만 문제가 없다. 이유는 아래와 같이 <code>0xffcccccc</code>값을 int 범위 내로 변환하면 -3355444이 된다.</p>
<pre class="hljs java">System.out.println(<span class="hljs-string">"0xffcccccc "</span> + (<span class="hljs-keyword">int</span>)<span class="hljs-number">0xffcccccc</span>);</pre>
<p>결론은 이런 값을 사용해야 할 경우는 GSON 객체에서 int 대신 long을 사용하고 사용하는 곳에서 int로 type casting하면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/04/07/how-to-protect-ssh-with-fail2ban-on-centos-6-7/</id><title type="html">SSH 무작위 로그인 시도 막기(With Fail2Ban on CentOS 6/7 + selinux)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/04/07/how-to-protect-ssh-with-fail2ban-on-centos-6-7/"/><published>2016-04-07T21:03:32+09:00</published><updated>2016-04-07T21:03:32+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[linux 서버를 공개망에서 사용하면서 방화벽을 사용하지 않는 경우 ssh 로그인을 지속적으로 시도하는 로그를 볼 수 있다. 대부분 외국 IP 대역에서 지속적으로 ssh 로그인을 시도하는데 무작위 비밀번호를 대입하는 것이다. 당연히 방화벽을 설정하는 것이 당연하나 특수한 목적으로 인해 접속 IP 대역을 제한할 수 없는 경우도 있을 수 있다. 이런 경우에 보안을 조금이나마 강화하기 위해 사용할 수 있는 것이 fail2ban 이다. 우선 실제로 해당 서버에 어떤 IP들이 ssh 로그인을 시도했는지 아래의 명령으로 확인 할 수 있다(이하는 CentOS 7 기준이다). 아래는 로그인 시도 IP를 확인하는 방법이다. $ ls /var/log/secure | xargs grep -E "[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+" -o | sort | uniq 공개망에 연결된 서버라면 생각보다 많은 IP가 나와 놀랄수도 있다. IP들 중 자신이 아는 IP를 제외하면 대부분이 위에 언급한 공격일 확률이 높다. 다른 방법으로 아래와 같이 최근 로그인 실패 기록을 확인하는 것도 가능하다. $ last -f /var/log/btmp | more 20 Linux Log Files that are Located under /var/log Directory에 보면 /var/log/btmp에 대한 설명을 확인 할 수 있다. 상황을 확인 했으니 이제 본격적으로 fail2ban을 사용해 보자. fail2ban 설치 fail2ban은 지정된 시간 내에 지정된 횟수 이상으로 ssh 로그인을 실패하면 해당 IP에서의 접근을 지정된 시간만큼 차단하는 역할을 한다. 아래의 설치 과정은 CentOS 7을 기준으로 한다. 이는 iptables 대신 firewalld가 사용되며 systemd를 사용하는 것을 기준으로 한다는 뜻이다. CentOS 6이라면 아래의 참고자료를 살펴보기 바란다. # epel-release 추가 $ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm # fail2ban 설치 $ yum install -y fail2ban # fail2ban 기본 설정 $ hostname=`/bin/hostname` $ echo "[DEFAULT]" > /etc/fail2ban/jail.local # 1시간 동안 접근 제한 $ echo "bantime = 3600" >> /etc/fail2ban/jail.local # 결과 수신 메일 지정 $ echo "destemail = ~~~@~~~.com" >> /etc/fail2ban/jail.local # 결과 발신 메일 지정 $ echo "sender = root@$hostname" >> /etc/fail2ban/jail.local $ echo "" >> /etc/fail2ban/jail.local # ssh 접근 검사 활성화 $ echo "[sshd]" >> /etc/fail2ban/jail.local $ echo "enabled = true" >> /etc/fail2ban/jail.local # nginx-http-auth 접근 검사 활성화 : 필요시에만 사용 $ echo "" >> /etc/fail2ban/jail.local $ echo "[nginx-http-auth]" >> /etc/fail2ban/jail.local $ echo "enabled = true" >> /etc/fail2ban/jail.local fail2ban 서비스 활성 $ systemctl enable fail2ban.service fail2ban 서비스 시작 $ systemctl start fail2ban.service selinux 사용시 fail2ban 관련 설정 이하는 selinux 사용시에만 적용하면 된다. $ checkmodule -M -m -o fail2ban-syslog.mod fail2ban-syslog.te $ semodule_package -o fail2ban-syslog.pp -m fail2ban-syslog.mod $ semodule -r fail2ban-syslog $ semodule -i fail2ban-syslog.pp $ rm -f fail2ban-syslog.mod $ rm -f fail2ban-syslog.pp $ semodule -l|grep fail2ban-syslog $ checkmodule -M -m -o logrotate-fail2ban.mod logrotate-fail2ban.te $ semodule_package -o logrotate-fail2ban.pp -m logrotate-fail2ban.mod $ semodule -r logrotate-fail2ban $ semodule -i logrotate-fail2ban.pp $ rm -f logrotate-fail2ban.mod $ rm -f logrotate-fail2ban.pp $ semodule -l|grep logrotate-fail2ban 아래의 2개의 파일은 위 스크립트 실행에 필요한 파일이므로 해당 파일명으로 저장해서 사용하면 된다. fail2ban-syslog.te module fail2ban-syslog 1.0; require { type syslogd_var_run_t; type fail2ban_t; class dir read; class file read; class file open; class file getattr; } #============= fail2ban_t ============== allow fail2ban_t syslogd_var_run_t:dir read; allow fail2ban_t syslogd_var_run_t:file read; allow fail2ban_t syslogd_var_run_t:file open; allow fail2ban_t syslogd_var_run_t:file getattr; logrotate-fail2ban.te module logrotate-fail2ban 1.7; require { type fail2ban_client_exec_t; type logrotate_t; type init_var_lib_t; class file { open read execute getattr write create execute_no_trans setattr unlink ioctl rename}; } #============= logrotate_t ============== allow logrotate_t fail2ban_client_exec_t:file execute_no_trans; allow logrotate_t fail2ban_client_exec_t:file { open read execute ioctl }; allow logrotate_t init_var_lib_t:file { open read getattr write create unlink setattr rename }; 설치가 다 되었다면 아래의 명령 실행시 다음과 비슷한 결과를 볼 수 있다. $ firewall-cmd --direct --get-all-rules ipv4 filter INPUT 0 -p tcp -m multiport --dports ssh -m set --match-set fail2ban-sshd src -j REJECT --reject-with icmp-port-unreachable 그리고 아래의 명령으로 적용 상황을 확인할 수 있다. # fail2ban 상태 확인 $ fail2ban-client status sshd Status for the jail: sshd |- Filter | |- Currently failed: 1 | |- Total failed: 153 | `- File list: /var/log/secure `- Actions |- Currently banned: 0 |- Total banned: 2 `- Banned IP list: # ipset에 설정(차단)된 내용 확인 $ ipset --list Name: fail2ban-sshd Type: hash:ip Revision: 1 Header: family inet hashsize 1024 maxelem 65536 timeout 3600 Size in memory: 16656 References: 1 Members: # fail2ban 로그 확인 $ cat /var/log/fail2ban.log # 차단 IP 목록 $ awk '($(NF-1) = /Ban/){print $NF}' /var/log/fail2ban.log | sort | uniq -c | sort -n 참고자료 fail2ban-client commands selinux module for fail2ban on Centos/RHEL 7 How To Protect SSH With Fail2Ban on CentOS 7 How To Protect SSH with fail2ban on CentOS 6 HOW TO INSTALL FAIL2BAN ON CENTOS Fail2ban with FirewallD System: Monitoring the fail2ban log]]></summary><content type="html"><![CDATA[<p>linux 서버를 공개망에서 사용하면서 방화벽을 사용하지 않는 경우 ssh 로그인을 지속적으로 시도하는 로그를 볼 수 있다. 대부분 외국 IP 대역에서 지속적으로 ssh 로그인을 시도하는데 무작위 비밀번호를 대입하는 것이다. 당연히 방화벽을 설정하는 것이 당연하나 특수한 목적으로 인해 접속 IP 대역을 제한할 수 없는 경우도 있을 수 있다. 이런 경우에 보안을 조금이나마 강화하기 위해 사용할 수 있는 것이 <a href="http://www.fail2ban.org/">fail2ban</a> 이다.</p>
<p>우선 실제로 해당 서버에 어떤 IP들이 ssh 로그인을 시도했는지 아래의 명령으로 확인 할 수 있다(이하는 CentOS 7 기준이다).</p>
<p>아래는 로그인 시도 IP를 확인하는 방법이다.</p>
<pre class="hljs bash">$ ls /var/<span class="hljs-built_in">log</span>/secure | xargs grep -E <span class="hljs-string">"[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+"</span> -o | sort | uniq</pre>
<p>공개망에 연결된 서버라면 생각보다 많은 IP가 나와 놀랄수도 있다. IP들 중 자신이 아는 IP를 제외하면 대부분이 위에 언급한 공격일 확률이 높다.</p>
<p>다른 방법으로 아래와 같이 최근 로그인 실패 기록을 확인하는 것도 가능하다.</p>
<pre class="hljs bash">$ last -f /var/<span class="hljs-built_in">log</span>/btmp | more</pre>
<p><a href="http://www.thegeekstuff.com/2011/08/linux-var-log-files/">20 Linux Log Files that are Located under /var/log Directory</a>에 보면 <code>/var/log/btmp</code>에 대한 설명을 확인 할 수 있다.</p>
<p>상황을 확인 했으니 이제 본격적으로 <a href="http://www.fail2ban.org/">fail2ban</a>을 사용해 보자.</p>
<hr />
<h3>fail2ban 설치</h3>
<p>fail2ban은 지정된 시간 내에 지정된 횟수 이상으로 ssh 로그인을 실패하면 해당 IP에서의 접근을 지정된 시간만큼 차단하는 역할을 한다.</p>
<p>아래의 설치 과정은 CentOS 7을 기준으로 한다. 이는 iptables 대신 firewalld가 사용되며 systemd를 사용하는 것을 기준으로 한다는 뜻이다. CentOS 6이라면 아래의 참고자료를 살펴보기 바란다.</p>
<pre class="hljs bash"><span class="hljs-comment"># epel-release 추가</span>
$ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

<span class="hljs-comment"># fail2ban 설치</span>
$ yum install -y fail2ban

<span class="hljs-comment"># fail2ban 기본 설정</span>
$ hostname=`/bin/hostname`
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"[DEFAULT]"</span> &gt; /etc/fail2ban/jail.local
<span class="hljs-comment"># 1시간 동안 접근 제한</span>
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"bantime = 3600"</span> &gt;&gt; /etc/fail2ban/jail.local
<span class="hljs-comment"># 결과 수신 메일 지정</span>
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"destemail = ~~~@~~~.com"</span> &gt;&gt; /etc/fail2ban/jail.local
<span class="hljs-comment"># 결과 발신 메일 지정</span>
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"sender = root@<span class="hljs-variable">$hostname</span>"</span> &gt;&gt; /etc/fail2ban/jail.local
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">""</span> &gt;&gt; /etc/fail2ban/jail.local
<span class="hljs-comment"># ssh 접근 검사 활성화</span>
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"[sshd]"</span> &gt;&gt; /etc/fail2ban/jail.local
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"enabled = true"</span> &gt;&gt; /etc/fail2ban/jail.local
<span class="hljs-comment"># nginx-http-auth 접근 검사 활성화 : 필요시에만 사용</span>
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">""</span> &gt;&gt; /etc/fail2ban/jail.local
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"[nginx-http-auth]"</span> &gt;&gt; /etc/fail2ban/jail.local
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"enabled = true"</span> &gt;&gt; /etc/fail2ban/jail.local</pre>
<p><strong>fail2ban 서비스 활성</strong></p>
<pre class="hljs bash">$ systemctl <span class="hljs-built_in">enable</span> fail2ban.service</pre>
<p><strong>fail2ban 서비스 시작</strong></p>
<pre class="hljs bash">$ systemctl start fail2ban.service</pre>
<h3>selinux 사용시 fail2ban 관련 설정</h3>
<p>이하는 selinux 사용시에만 적용하면 된다.</p>
<pre class="hljs bash">$ checkmodule -M -m -o fail2ban-syslog.mod fail2ban-syslog.te
$ semodule_package -o fail2ban-syslog.pp -m fail2ban-syslog.mod
$ semodule -r fail2ban-syslog
$ semodule -i fail2ban-syslog.pp
$ rm -f fail2ban-syslog.mod
$ rm -f fail2ban-syslog.pp
$ semodule -l|grep fail2ban-syslog

$ checkmodule -M -m -o logrotate-fail2ban.mod logrotate-fail2ban.te
$ semodule_package -o logrotate-fail2ban.pp -m logrotate-fail2ban.mod
$ semodule -r logrotate-fail2ban
$ semodule -i logrotate-fail2ban.pp
$ rm -f logrotate-fail2ban.mod
$ rm -f logrotate-fail2ban.pp
$ semodule -l|grep logrotate-fail2ban</pre>
<p>아래의 2개의 파일은 위 스크립트 실행에 필요한 파일이므로 해당 파일명으로 저장해서 사용하면 된다.</p>
<p><strong>fail2ban-syslog.te</strong></p>
<pre><code>module fail2ban-syslog 1.0;

require {
type syslogd_var_run_t;
type fail2ban_t;
class dir read;
class file read;
class file open;
class file getattr;
}

#============= fail2ban_t ==============
allow fail2ban_t syslogd_var_run_t:dir read;
allow fail2ban_t syslogd_var_run_t:file read;
allow fail2ban_t syslogd_var_run_t:file open;
allow fail2ban_t syslogd_var_run_t:file getattr;</code></pre>
<p><strong>logrotate-fail2ban.te</strong></p>
<pre><code>module logrotate-fail2ban 1.7;

require {
type fail2ban_client_exec_t;
type logrotate_t;
type init_var_lib_t;
class file { open read execute getattr write create execute_no_trans setattr unlink ioctl rename};
}

#============= logrotate_t ==============
allow logrotate_t fail2ban_client_exec_t:file execute_no_trans;
allow logrotate_t fail2ban_client_exec_t:file { open read execute ioctl };
allow logrotate_t init_var_lib_t:file { open read getattr write create unlink setattr rename };</code></pre>
<hr />
<p>설치가 다 되었다면 아래의 명령 실행시 다음과 비슷한 결과를 볼 수 있다.</p>
<pre class="hljs bash">$ firewall-cmd --direct --get-all-rules

ipv4 filter INPUT 0 -p tcp -m multiport --dports ssh -m <span class="hljs-built_in">set</span> --match-set fail2ban-sshd src -j REJECT --reject-with icmp-port-unreachable</pre>
<p>그리고 아래의 명령으로 적용 상황을 확인할 수 있다.</p>
<pre class="hljs bash"><span class="hljs-comment"># fail2ban 상태 확인</span>
$ fail2ban-client status sshd

Status <span class="hljs-keyword">for</span> the jail: sshd
|- Filter
|  |- Currently failed: 1
|  |- Total failed: 153
|  `- File list:    /var/<span class="hljs-built_in">log</span>/secure
`- Actions
   |- Currently banned: 0
   |- Total banned: 2
   `- Banned IP list:

<span class="hljs-comment"># ipset에 설정(차단)된 내용 확인</span>
$ ipset --list

Name: fail2ban-sshd
Type: <span class="hljs-built_in">hash</span>:ip
Revision: 1
Header: family inet hashsize 1024 maxelem 65536 timeout 3600
Size <span class="hljs-keyword">in</span> memory: 16656
References: 1
Members:

<span class="hljs-comment"># fail2ban 로그 확인</span>
$ cat /var/<span class="hljs-built_in">log</span>/fail2ban.log

<span class="hljs-comment"># 차단 IP 목록</span>
$ awk <span class="hljs-string">'($(NF-1) = /Ban/){print $NF}'</span> /var/<span class="hljs-built_in">log</span>/fail2ban.log | sort | uniq -c | sort -n</pre>
<hr />
<h3>참고자료</h3>
<ul>
<li><a href="http://www.fail2ban.org/wiki/index.php/Commands">fail2ban-client commands</a></li>
<li><a href="https://krash.be/node/27">selinux module for fail2ban on Centos/RHEL 7</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-centos-7">How To Protect SSH With Fail2Ban on CentOS 7</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-centos-6">How To Protect SSH with fail2ban on CentOS 6</a></li>
<li><a href="http://www.servermom.org/install-fail2ban-centos/1809/">HOW TO INSTALL FAIL2BAN ON CENTOS</a></li>
<li><a href="https://fedoraproject.org/wiki/Fail2ban_with_FirewallD">Fail2ban with FirewallD</a></li>
<li><a href="http://www.the-art-of-web.com/system/fail2ban-log/">System: Monitoring the fail2ban log</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/04/06/how-to-create-simple-mac-apps-from-shell-scripts/</id><title type="html">OSX : shell script 실행하는 app 파일 만들기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/04/06/how-to-create-simple-mac-apps-from-shell-scripts/"/><published>2016-04-06T19:51:12+09:00</published><updated>2016-04-06T19:51:12+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><summary><![CDATA[OSX를 사용하다 보면 자주 사용하는 shell script를 app으로 생성해 두고 싶을 때가 많다. 예를들어 나의 경우는 기본 chrome에는 개인 계정을 연결해서 사용하고 chrome의 data 저장 경로를 별도로 지정해서 회사 계정을 연결해서 사용한다. 아래는 주제에서는 벗어나지만 chrome의 data 저장 경로를 별도로 지정해서 실행하는 방법이다. /Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --user-data-dir=/chrome/subva/ > /dev/null 2>&1 & 위 스크립트를 파일로 저장해두고 필요할 경우만 shell에서 실행해서 사용하는데 매번 터미널을 여는 것이 귀찮다. 그래서 기존에는 Automator를 사용해서 app 파일을 만들어 사용했다(Executing Shell Scripts from the OS X Dock? 참고). 그런데 이 app을 만드는 것이 복잡하지는 않아도(사실 무척 간단하다) 귀찮은지라 더 간단한 방법이 없는지 찾아봤다. How to create simple Mac apps from shell scripts라는 글에 보면 아래의 스크립트를 소개하고 있다. #!/usr/bin/env bash APPNAME=${2:-$(basename "$1" ".sh")} DIR="$APPNAME.app/Contents/MacOS" if [ -a "$APPNAME.app" ]; then echo "$PWD/$APPNAME.app already exists :(" exit 1 fi mkdir -p "$DIR" cp "$1" "$DIR/$APPNAME" chmod +x "$DIR/$APPNAME" echo "$PWD/$APPNAME.app" 위 스크립트를 사용해서 shell 스크립트를 간단하게 app으로 변환(생성) 할 수 있다. 그런데 이 글이 오래되었다는 것이 함정이다. 몇 버전부터 인지는 모르지만 엘 케피탄에서 생성된 app을 실행하면 아래와 같은 오류가 나면서 실행이 되지 않는다. PowerPC 응용 프로그램이 더 이상 지원되지 않기 때문에 ‘~~~.app’ 응용 프로그램을 열 수 없습니다. 위 스크립트를 개선하고 변형한 여러 소스들(alexbarton/appify 등)을 github 등에서 찾을 수 있으나 대부분 동일한 오류를 낸다. 또 다른 방법은 Platypus를 사용하는 것이다. Platypus의 경우는 아주 다양한 활용이 가능하다. 여러가지 스크립트를 지원하며 앱 아이콘도 바로 지정 가능하다. 자세한 내용은 Platypus 공식 사이트를 참고하자. 그런데 Platypus의 경우는 지정한 스크립트가 종료되어도 앱은 종료되지 않아서 내가 원하는 결과를 얻지 못했다. 그래서 결론적으로 내가 선택한 방법은 기존처럼 Automator를 사용하는 것이다.]]></summary><content type="html"><![CDATA[<p>OSX를 사용하다 보면 자주 사용하는 shell script를 app으로 생성해 두고 싶을 때가 많다. 예를들어 나의 경우는 기본 chrome에는 개인 계정을 연결해서 사용하고 chrome의 data 저장 경로를 별도로 지정해서 회사 계정을 연결해서 사용한다. 아래는 주제에서는 벗어나지만 chrome의 data 저장 경로를 별도로 지정해서 실행하는 방법이다.</p>
<pre class="hljs bash">/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome --user-data-dir=/chrome/subva/ &gt; /dev/null 2&gt;&amp;1 &amp;</pre>
<p>위 스크립트를 파일로 저장해두고 필요할 경우만 shell에서 실행해서 사용하는데 매번 터미널을 여는 것이 귀찮다. 그래서 기존에는 <code>Automator</code>를 사용해서 app 파일을 만들어 사용했다(<a href="http://stackoverflow.com/a/281455">Executing Shell Scripts from the OS X Dock?</a> 참고). 그런데 이 app을 만드는 것이 복잡하지는 않아도(사실 무척 간단하다) 귀찮은지라 더 간단한 방법이 없는지 찾아봤다.</p>
<p><a href="https://mathiasbynens.be/notes/shell-script-mac-apps">How to create simple Mac apps from shell scripts</a>라는 글에 보면 아래의 스크립트를 소개하고 있다.</p>
<pre class="hljs bash"><span class="hljs-meta">#!/usr/bin/env bash
</span>
APPNAME=<span class="hljs-variable">${2:-$(basename "$1" ".sh")}</span>
DIR=<span class="hljs-string">"<span class="hljs-variable">$APPNAME</span>.app/Contents/MacOS"</span>

<span class="hljs-keyword">if</span> [ -a <span class="hljs-string">"<span class="hljs-variable">$APPNAME</span>.app"</span> ]; <span class="hljs-keyword">then</span>
  <span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$PWD</span>/<span class="hljs-variable">$APPNAME</span>.app already exists :("</span>
  <span class="hljs-built_in">exit</span> 1
<span class="hljs-keyword">fi</span>

mkdir -p <span class="hljs-string">"<span class="hljs-variable">$DIR</span>"</span>
cp <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> <span class="hljs-string">"<span class="hljs-variable">$DIR</span>/<span class="hljs-variable">$APPNAME</span>"</span>
chmod +x <span class="hljs-string">"<span class="hljs-variable">$DIR</span>/<span class="hljs-variable">$APPNAME</span>"</span>

<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$PWD</span>/<span class="hljs-variable">$APPNAME</span>.app"</span></pre>
<p>위 스크립트를 사용해서 shell 스크립트를 간단하게 app으로 변환(생성) 할 수 있다. 그런데 이 글이 오래되었다는 것이 함정이다. 몇 버전부터 인지는 모르지만 엘 케피탄에서 생성된 app을 실행하면 아래와 같은 오류가 나면서 실행이 되지 않는다.</p>
<blockquote>
<p>PowerPC 응용 프로그램이 더 이상 지원되지 않기 때문에 ‘~~~.app’ 응용 프로그램을 열 수 없습니다.</p>
</blockquote>
<p>위 스크립트를 개선하고 변형한 여러 소스들(<a href="https://github.com/alexbarton/appify">alexbarton/appify</a> 등)을 github 등에서 찾을 수 있으나 대부분 동일한 오류를 낸다.</p>
<p>또 다른 방법은 <a href="http://www.sveinbjorn.org/platypus">Platypus</a>를 사용하는 것이다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2016/04/2016-04-06-how-to-create-simple-mac-apps-from-shell-scripts-1.png" alt="Platypus" width="1330" height="1116" /></p>
<p>Platypus의 경우는 아주 다양한 활용이 가능하다. 여러가지 스크립트를 지원하며 앱 아이콘도 바로 지정 가능하다. 자세한 내용은 <a href="http://www.sveinbjorn.org/platypus">Platypus 공식 사이트</a>를 참고하자.</p>
<p>그런데 Platypus의 경우는 지정한 스크립트가 종료되어도 앱은 종료되지 않아서 내가 원하는 결과를 얻지 못했다.</p>
<p>그래서 결론적으로 내가 선택한 방법은 기존처럼 <code>Automator</code>를 사용하는 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/04/06/yum-error-xz-compression-not-available/</id><title type="html">yum 실행시 Error: xz compression not available 오류가 날 경우</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/04/06/yum-error-xz-compression-not-available/"/><published>2016-04-06T19:37:12+09:00</published><updated>2016-04-06T19:37:12+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[yum을 사용하다 보면 아래와 같은 오류가 나는 경우가 있다. $ yum update Loaded plugins: fastestmirror Setting up Install Process Repository 'svn-wandisco' is missing name in configuration, using id Loading mirror speeds from cached hostfile * base: ftp.daumkakao.com * epel: ftp.riken.jp * extras: ftp.daumkakao.com * updates: ftp.daumkakao.com * webtatic: sp.repo.webtatic.com Error: xz compression not available 나의 경우엔 CentOS 6.7에서 실수로 CentOS 7용 EPEL 레포지토리를 설치한 후 이런 현상이 있었다. 해결 방법은 직접 레포지토리 정보를 지워주면 된다. # epel 레포지토리 제거 rm -rf /etc/yum.repos.d/epel* # epel cache 제거 rm -rf /var/cache/yum/x86_64/6/epel EPEL이 필요하다면 다시 버전에 맞게 설치하면 된다.]]></summary><content type="html"><![CDATA[<p>yum을 사용하다 보면 아래와 같은 오류가 나는 경우가 있다.</p>
<pre class="hljs bash">$ yum update
Loaded plugins: fastestmirror
Setting up Install Process
Repository <span class="hljs-string">'svn-wandisco'</span> is missing name <span class="hljs-keyword">in</span> configuration, using id
Loading mirror speeds from cached hostfile
 * base: ftp.daumkakao.com
 * epel: ftp.riken.jp
 * extras: ftp.daumkakao.com
 * updates: ftp.daumkakao.com
 * webtatic: sp.repo.webtatic.com
Error: xz compression not available</pre>
<p>나의 경우엔 CentOS 6.7에서 실수로 CentOS 7용 EPEL 레포지토리를 설치한 후 이런 현상이 있었다.</p>
<p>해결 방법은 직접 레포지토리 정보를 지워주면 된다.</p>
<pre class="hljs bash"><span class="hljs-comment"># epel 레포지토리 제거</span>
rm -rf /etc/yum.repos.d/epel*

<span class="hljs-comment"># epel cache 제거</span>
rm -rf /var/cache/yum/x86_64/6/epel</pre>
<p>EPEL이 필요하다면 다시 버전에 맞게 설치하면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/25/php-invalid-sos-parameters-for-sequential-jpeg/</id><title type="html">PHP - Invalid SOS parameters for sequential JPEG 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/25/php-invalid-sos-parameters-for-sequential-jpeg/"/><published>2016-03-25T10:46:14+09:00</published><updated>2016-03-25T10:46:14+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP에서 GD를 이용해서 jpg 이미지를 처리할 때 아래와 같은 오류를 만날 수 있다. 나의 경우는 안드로이드에서 jpg 이미지를 PHP로 전송해서 처리하는 과정에서 이 오류를 만났다(안드로이드여 사라져라). Warning: imagecreatefromjpeg(): gd-jpeg, libjpeg: recoverable error: Invalid SOS parameters for sequential JPEG 이 오류는 PHP Bugs에 Bug #39918 imagecreatefromjpeg doesn't work라는 글로도 등록되어 있다. 일단 PHP Bugs에서는 버그가 아닌 것으로 분류해 놓았지만 대부분의 다른 커뮤니티들에서는 버그라고 이야기하고 있다. 어쨌든 해결 방법은 아래와 같다. @ini_set('gd.jpeg_ignore_warning', 1); 위 코드를 imagecreatefromjpeg를 사용하기 전에 넣으면 된다(그냥 맨 위쪽). 아니면 php.ini에 위 내용을 형식에 맞게 추가해도 된다. 그런데 문제는 이것만으로는 완전히 해결이 되지 않을 수 있다. 아래와 같은 오류가 추가적으로 날 수 있다. Warning: imagecreatefromjpeg(): '/tmp/php6eEm0r' is not a valid JPEG file in ~~ 따라서 위 처리 외에도 imagecreatefromjpeg 사용시 @를 붙여 아래와 같이 사용해야 한다. $source = @imagecreatefromjpeg($sourcePath); @를 사용하는 것은 권장되지 않지만 이 경우는 어쩔 수 없다(오류 출력 범위를 변경하는 등의 방법이 있으나 이 부분만 이렇게 처리하는게 낫다). 이렇게 처리하고 나면 기능이 원하는대로 정상 동작한다(not a valid JPEG file라고 했지만 실제로는 정상적인 jpg 파일이므로)]]></summary><content type="html"><![CDATA[<p>PHP에서 GD를 이용해서 jpg 이미지를 처리할 때 아래와 같은 오류를 만날 수 있다. 나의 경우는 안드로이드에서 jpg 이미지를 PHP로 전송해서 처리하는 과정에서 이 오류를 만났다(안드로이드여 사라져라).</p>
<pre><code>Warning:  imagecreatefromjpeg(): gd-jpeg, libjpeg: recoverable error: Invalid SOS parameters for sequential JPEG</code></pre>
<p>이 오류는 PHP Bugs에 <a href="https://bugs.php.net/bug.php?id=39918">
Bug #39918  imagecreatefromjpeg doesn't work</a>라는 글로도 등록되어 있다. 일단 PHP Bugs에서는 버그가 아닌 것으로 분류해 놓았지만 대부분의 다른 커뮤니티들에서는 버그라고 이야기하고 있다.</p>
<p>어쨌든 해결 방법은 아래와 같다.</p>
<pre class="hljs php">@ini_set(<span class="hljs-string">'gd.jpeg_ignore_warning'</span>, <span class="hljs-number">1</span>);</pre>
<p>위 코드를 <a href="http://php.net/manual/kr/function.imagecreatefromjpeg.php">imagecreatefromjpeg</a>를 사용하기 전에 넣으면 된다(그냥 맨 위쪽). 아니면 php.ini에 위 내용을 형식에 맞게 추가해도 된다.</p>
<p>그런데 문제는 이것만으로는 완전히 해결이 되지 않을 수 있다. 아래와 같은 오류가 추가적으로 날 수 있다.</p>
<pre><code>Warning:  imagecreatefromjpeg(): '/tmp/php6eEm0r' is not a valid JPEG file in ~~</code></pre>
<p>따라서 위 처리 외에도 imagecreatefromjpeg 사용시 <code>@</code>를 붙여 아래와 같이 사용해야 한다.</p>
<pre class="hljs php">$source = @imagecreatefromjpeg($sourcePath);</pre>
<p><code>@</code>를 사용하는 것은 권장되지 않지만 이 경우는 어쩔 수 없다(오류 출력 범위를 변경하는 등의 방법이 있으나 이 부분만 이렇게 처리하는게 낫다).</p>
<p>이렇게 처리하고 나면 기능이 원하는대로 정상 동작한다(<code>not a valid JPEG file</code>라고 했지만 실제로는 정상적인 jpg 파일이므로)</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/21/slow-svn-status/</id><title type="html">svn status가 느려질 때</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/21/slow-svn-status/"/><published>2016-03-21T17:17:49+09:00</published><updated>2016-03-21T17:17:49+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[svn을 사용하다 보면 이상하게 svn status가 이상하게 느릴 때가 있다. 사실 나도 이 부분을 크게 생각해 본적이 없었는데 최근에 특정 프로젝트 폴더에서 svn status가 비정상적으로 느려져서 방법을 찾아봤다. 결론부터 이야기하자면 아주 간단하다. 아래와 같이 cleanup을 해주면 속도가 돌아온다. $ svn cleanup cleanup의 경우 충돌이 발생했을 때만 사용하고 있었는데 오래된 .svn/pristine 폴더의 파일들을 지워주는 효과가 있는 것 같다. 실제로 용량을 비교해보니 상당히 많은 용량이 줄어들었다. 그런데 어떤 사람들은 오래된 파일을 지워주는게 아니라고 말하기도 한다. 어쨌든 나의 경우는 .svn의 용량이 줄어 들었으며 느리던 svn status의 속도가 돌아왔다. 이론적인 검증이 되지 않은 내용이지만 혹시 동일한 현상을 겪는 사람이라면 한번 시도해봐도 손해볼 것은 없다는 생각.]]></summary><content type="html"><![CDATA[<p>svn을 사용하다 보면 이상하게 <code>svn status</code>가 이상하게 느릴 때가 있다. 사실 나도 이 부분을 크게 생각해 본적이 없었는데 최근에 특정 프로젝트 폴더에서 <code>svn status</code>가 비정상적으로 느려져서 방법을 찾아봤다.</p>
<p>결론부터 이야기하자면 아주 간단하다. 아래와 같이 cleanup을 해주면 속도가 돌아온다.</p>
<pre class="hljs bash">$ svn cleanup</pre>
<p>cleanup의 경우 충돌이 발생했을 때만 사용하고 있었는데 오래된 <code>.svn/pristine</code> 폴더의 파일들을 지워주는 효과가 있는 것 같다. 실제로 용량을 비교해보니 상당히 많은 용량이 줄어들었다. 그런데 어떤 사람들은 오래된 파일을 지워주는게 아니라고 말하기도 한다. 어쨌든 나의 경우는 <code>.svn</code>의 용량이 줄어 들었으며 느리던 <code>svn status</code>의 속도가 돌아왔다. 이론적인 검증이 되지 않은 내용이지만 혹시 동일한 현상을 겪는 사람이라면 한번 시도해봐도 손해볼 것은 없다는 생각.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/21/php7-and-gearman/</id><title type="html">PHP 7에서 Gearman 모듈 사용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/21/php7-and-gearman/"/><published>2016-03-21T11:22:49+09:00</published><updated>2016-03-21T11:22:49+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP 7로 마이그레이션시에 걸림돌이 될 수 있는 것 중 하나가 PHP 모듈의 호환성 문제다. 나의 경우는 대부분 문제가 없었으나 Gearman이 걸렸다. 아직 Gearman의 PHP 모듈이 정식으로 PHP 7을 지원하지 않아서 공식 지원을 기다리고 있었다. 그런데 시간을 두고 기다려봐도 지원을 기대하기 어려워(버전업이 오래전부터 멈춰있음) 자체적으로 방법을 찾기로 했다. Gearman 외에도 PHP 7과 모듈들의 호환성을 확인하려면 PHP 7 Extensions을 참고하기 바란다. 우선 나의 경우는 PHP 7을 소스 설치하지 않고 Webtatic.com에서 제공하는 바이너리를 yum으로 설치해서 사용중이다. CentOS에서 해당 레포지토리를 사용하려면 아래와 같이 webtatic 레포지토리를 yum에 추가하면 된다. $ rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm PECL에 등록된 Gearman 모듈은 PECL - Gearman에서 확인할 수 있고 소스는 hjr3/pecl-gearman에서 확인할 수 있다. 보면 알겠지만 꽤 오래전부터 변경이 전혀 없다. 그래서 해당 라이브러리를 fork해서 문제를 개선하고 있는 wcgallego/pecl-gearman을 사용해서 컴파일하기로 했다. 설치는 아래와 같이 할 수 있다. $ yum install -y php70w-devel libgearman-devel $ git clone https://github.com/wcgallego/pecl-gearman.git $ cd pecl-gearman/ $ ./configure $ make $ make install 앞서 언급했던 것과 같이 나의 경우는 Webtatic.com의 바이너리를 사용한 경우이므로 상황에 따라 아래의 명령은 차이가 난다. 하지만 중요한 부분은 wcgallego/pecl-gearman의 소스를 받아서 빌드하는 것이므로 자신의 환경에 맞춰 빌드하는 것에는 큰 문제가 없을 것으로 생각한다. 빌드에 오류가 없다면 /usr/lib64/php/modules/에 gearman.so 파일이 만들어져 있을 것이다. modules의 경로 또한 차이가 날 수 있으나 설치 마지막 메시지를 보면 자신의 위치는 확인 할 수 있을 것이다. 이 파일이 만들어 졌다면 이제 거의 끝이다. 이제는 php에서 해당 모듈을 load 하도록 연결하면 된다. /etc/php.d/gearman.ini 파일을 열어서 아래의 내용을 넣는다. ; Enable gearman extension module extension = gearman.so php.ini 파일에 extension = gearman.so를 추가해도 된다. 나의 경우는 ini 파일들이 분리되어 관리되기 때문에 따로 파일을 만든 것이다. 이제는 php를 재시작(service php-fpm restart)하고 phpinfo();로 확인해보면 Gearman 모듈이 연결된 것을 확인 할 수 있다.]]></summary><content type="html"><![CDATA[<p>PHP 7로 마이그레이션시에 걸림돌이 될 수 있는 것 중 하나가 PHP 모듈의 호환성 문제다. 나의 경우는 대부분 문제가 없었으나 <a href="http://gearman.org/">Gearman</a>이 걸렸다. 아직 Gearman의 PHP 모듈이 정식으로 PHP 7을 지원하지 않아서 공식 지원을 기다리고 있었다. 그런데 시간을 두고 기다려봐도 지원을 기대하기 어려워(버전업이 오래전부터 멈춰있음) 자체적으로 방법을 찾기로 했다.</p>
<p>Gearman 외에도 PHP 7과 모듈들의 호환성을 확인하려면 <a href="https://gist.github.com/lewisgoddard/459b450106cf1e5b754e">PHP 7 Extensions</a>을 참고하기 바란다.</p>
<hr />
<p>우선 나의 경우는 PHP 7을 소스 설치하지 않고 <a href="https://webtatic.com/packages/php70/">Webtatic.com</a>에서 제공하는 바이너리를 yum으로 설치해서 사용중이다. CentOS에서 해당 레포지토리를 사용하려면 아래와 같이 webtatic 레포지토리를 yum에 추가하면 된다.</p>
<pre class="hljs bash">$ rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</pre>
<hr />
<p>PECL에 등록된 Gearman 모듈은 <a href="http://pecl.php.net/package/gearman">PECL - Gearman</a>에서 확인할 수 있고 소스는 <a href="https://github.com/hjr3/pecl-gearman">hjr3/pecl-gearman</a>에서 확인할 수 있다. 보면 알겠지만 꽤 오래전부터 변경이 전혀 없다. 그래서 해당 라이브러리를 fork해서 문제를 개선하고 있는 <a href="https://github.com/wcgallego/pecl-gearman/network">wcgallego/pecl-gearman</a>을 사용해서 컴파일하기로 했다.</p>
<p>설치는 아래와 같이 할 수 있다.</p>
<pre class="hljs bash">$ yum install -y php70w-devel libgearman-devel
$ git <span class="hljs-built_in">clone</span> https://github.com/wcgallego/pecl-gearman.git
$ <span class="hljs-built_in">cd</span> pecl-gearman/
$ ./configure
$ make
$ make install</pre>
<p>앞서 언급했던 것과 같이 나의 경우는 <a href="https://webtatic.com/packages/php70/">Webtatic.com</a>의 바이너리를 사용한 경우이므로 상황에 따라 아래의 명령은 차이가 난다. 하지만 중요한 부분은 <a href="https://github.com/wcgallego/pecl-gearman/network">wcgallego/pecl-gearman</a>의 소스를 받아서 빌드하는 것이므로 자신의 환경에 맞춰 빌드하는 것에는 큰 문제가 없을 것으로 생각한다.</p>
<p>빌드에 오류가 없다면 <code>/usr/lib64/php/modules/</code>에 <code>gearman.so</code> 파일이 만들어져 있을 것이다. modules의 경로 또한 차이가 날 수 있으나 설치 마지막 메시지를 보면 자신의 위치는 확인 할 수 있을 것이다. 이 파일이 만들어 졌다면 이제 거의 끝이다. 이제는 php에서 해당 모듈을 load 하도록 연결하면 된다.</p>
<p><code>/etc/php.d/gearman.ini</code> 파일을 열어서 아래의 내용을 넣는다.</p>
<pre><code>; Enable gearman extension module
extension = gearman.so</code></pre>
<p><code>php.ini</code> 파일에 <code>extension = gearman.so</code>를 추가해도 된다. 나의 경우는 ini 파일들이 분리되어 관리되기 때문에 따로 파일을 만든 것이다.</p>
<p>이제는 php를 재시작(<code>service php-fpm restart</code>)하고 <code>phpinfo();</code>로 확인해보면 Gearman 모듈이 연결된 것을 확인 할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/18/iptables-port-forwarding/</id><title type="html">iptables을 이용한 port forwarding</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/18/iptables-port-forwarding/"/><published>2016-03-18T09:11:42+09:00</published><updated>2016-03-18T09:11:42+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[사무실 내부에서 외부에서 접근 가능한 포트가 개방된 아이피가 한정되어 있어서 두개의 작업 서버를 공유기로 포트 포워딩해서 사용하고 있었다. 그런데 그중 한대의 서버로 매일 대량의 트래픽을 외부에서 밀어 넣는데 이 상황에서 계속 공유기가 죽는 문제가 발생했다(아마도 공유기가 너무 낡은 것이라 그런 것일지도). 간단히 괜찮은 공유기하나 구매하면 해결될 수도 있는 문제지만 귀찮아서 한대의 서버에 외부 회선을 연결하고 포트포워딩으로 필요한 포트만 다른 서버로 연결하기로 했다. 포트포워딩이 허용되어 있는지 확인 cat /etc/sysctl.conf|grep net.ipv4.ip_forward 또는 sysctl -a | grep ip_forward 명령으로 net.ipv4.ip_forward가 1로 설정되어 있는지 확인한다. 1이 아니라면 /etc/sysctl.conf 파일을 열어 수정하거나 echo 1 > /proc/sys/net/ipv4/ip_forward 명령으로 Kernel 변수를 수정할 수도 있다. 포트포워딩 설정 이후의 설명은 아래의 상황을 가정한 것이므로 상황에 맞게 수정되어야 합니다. 외부에 공개된 공인 서버, 사설망 내의 사설 서버가 있다. 공인 서버에 NIC이 두개가 있다(eth0, eth1). 외부에서 공인서버 eth1을 통해 접속하며 eth0를 통해 사설 서버(192.168.11.102)로 포트포워딩 한다. 공인 서버에 8888 포트를 사설 서버의 8888 포트로 포워딩 한다. 설명하는 방법은 /etc/sysconfig/iptables 파일에 직접 설정하는 방법이다. /etc/sysconfig/iptables 파일에 아래의 내용을 입력한다(기존에 내용이 있다면 nat와 filter 항목에 맞게 추가한다). *nat -A PREROUTING -i eth1 -p tcp -m tcp --dport 8888 -j DNAT --to-destination 192.168.11.102:8888 -A PREROUTING -i eth1 -p udp -m udp --dport 8888 -j DNAT --to-destination 192.168.11.102:8888 -A POSTROUTING -o eth0 -j MASQUERADE COMMIT *filter -A INPUT -m state --state NEW -m tcp -p tcp --dport 8888 -j ACCEPT -A INPUT -m state --state NEW -m udp -p udp --dport 8888 -j ACCEPT -A FORWARD -i eth0 -j ACCEPT -A FORWARD -o eth0 -j ACCEPT iptables을 재시작한다. /etc/init.d/iptables restart # 아래는 systemd를 사용하는 경우 service ipstables restart 설정이 완료되었으므로 정상적으로 동작하는지 확인한다. 위 설명은 서버가 2대이고 NIC도 두개이며 공인망과 사설망이 공존하는 상태에서의 설명이다. 하지만 내용을 조금 살펴보면 1대의 서버 내에서 포트포워딩과 서버는 2대이나 NIC이 하나인 경우에 대해서도 적용할 수 있을 것이다.]]></summary><content type="html"><![CDATA[<p>사무실 내부에서 외부에서 접근 가능한 포트가 개방된 아이피가 한정되어 있어서 두개의 작업 서버를 공유기로 포트 포워딩해서 사용하고 있었다. 그런데 그중 한대의 서버로 매일 대량의 트래픽을 외부에서 밀어 넣는데 이 상황에서 계속 공유기가 죽는 문제가 발생했다(아마도 공유기가 너무 낡은 것이라 그런 것일지도). 간단히 괜찮은 공유기하나 구매하면 해결될 수도 있는 문제지만 귀찮아서 한대의 서버에 외부 회선을 연결하고 포트포워딩으로 필요한 포트만 다른 서버로 연결하기로 했다.</p>
<hr />
<h3>포트포워딩이 허용되어 있는지 확인</h3>
<p><code>cat /etc/sysctl.conf|grep net.ipv4.ip_forward</code> 또는 <code>sysctl -a | grep ip_forward</code> 명령으로 <code>net.ipv4.ip_forward</code>가 1로 설정되어 있는지 확인한다. 1이 아니라면 /etc/sysctl.conf 파일을 열어 수정하거나 <code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</code> 명령으로 Kernel 변수를 수정할 수도 있다.</p>
<h3>포트포워딩 설정</h3>
<p><strong>이후의 설명은 아래의 상황을 가정한 것이므로 상황에 맞게 수정되어야 합니다.</strong></p>
<ul>
<li>외부에 공개된 공인 서버, 사설망 내의 사설 서버가 있다.</li>
<li>공인 서버에 NIC이 두개가 있다(eth0, eth1).</li>
<li>외부에서 공인서버 eth1을 통해 접속하며 eth0를 통해 사설 서버(192.168.11.102)로 포트포워딩 한다.</li>
<li>공인 서버에 8888 포트를 사설 서버의 8888 포트로 포워딩 한다.</li>
</ul>
<p>설명하는 방법은 <code>/etc/sysconfig/iptables</code> 파일에 직접 설정하는 방법이다. <code>/etc/sysconfig/iptables</code> 파일에 아래의 내용을 입력한다(기존에 내용이 있다면 nat와 filter 항목에 맞게 추가한다).</p>
<pre><code>*nat
-A PREROUTING -i eth1 -p tcp -m tcp --dport 8888 -j DNAT --to-destination 192.168.11.102:8888
-A PREROUTING -i eth1 -p udp -m udp --dport 8888 -j DNAT --to-destination 192.168.11.102:8888
-A POSTROUTING -o eth0 -j MASQUERADE
COMMIT

*filter
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8888 -j ACCEPT
-A INPUT -m state --state NEW -m udp -p udp --dport 8888 -j ACCEPT
-A FORWARD -i eth0 -j ACCEPT
-A FORWARD -o eth0 -j ACCEPT</code></pre>
<p>iptables을 재시작한다.</p>
<pre class="hljs bash">/etc/init.d/iptables restart
<span class="hljs-comment"># 아래는 systemd를 사용하는 경우</span>
service ipstables restart</pre>
<p>설정이 완료되었으므로 정상적으로 동작하는지 확인한다.</p>
<hr />
<p>위 설명은 서버가 2대이고 NIC도 두개이며 공인망과 사설망이 공존하는 상태에서의 설명이다. 하지만 내용을 조금 살펴보면 1대의 서버 내에서 포트포워딩과 서버는 2대이나 NIC이 하나인 경우에 대해서도 적용할 수 있을 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/17/php-composer-speed-up/</id><title type="html">php composer 속도 개선하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/17/php-composer-speed-up/"/><published>2016-03-17T19:20:39+09:00</published><updated>2016-03-17T19:20:39+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Composer(컴포저)는 PHP의 의존성 관리도구이다. 이 Composer를 사용하면서 가장 큰 단점으로 꼽을 수 있는 것은 느린 속도다. 나만 그렇게 느끼는 것은 아닌지 국내외에 많은 이야기가 있다. 오늘은 그 이야기들을 정리해 보려고 한다. 우선 Composer에 대한 상세한 내용은 Composer 한국어 매뉴얼을 참고하면 도움이 될 것 같다. 그리고 Composer 속도에 관련된 참고글이다. composer.phar 의 동작이 느릴 때 조치할 수 있는 것들. 컴포저(PHP Composer) 속도 향상 시키기 그럼 하나씩 살펴보자. Composer 진단 우선 composer diagnose 명령을 이용해서 Composer의 상태를 진단할 수 있다. 진단 결과에 따라 개선이 필요한 부분들을 확인하고 개선할 수 있다. $ composer diagnose Checking composer.json: OK require.~~~/~~~ : unbound version constraints (dev-master) should be avoided Checking platform settings: OK Checking git settings: OK Checking http connectivity to packagist: OK Checking https connectivity to packagist: OK Checking github.com oauth access: OK Checking disk free space: OK Checking pubkeys: Tags Public Key Fingerprint: ~~~ Dev Public Key Fingerprint: ~~~ OK Checking composer version: OK Composer 최신버전 사용 composer diagnose에서도 Composer의 최신 버전을 사용중인지 알려준다. 가급적 최신 버전의 Composer를 사용하는 것이 속도에 조금이나마 도움이 될 수 있다. $ sudo /usr/local/bin/composer self-update Updating to version 7c62e2b5346a6a656dd9587203719e35bb768056. Downloading: 100% Use composer self-update --rollback to return to version d6d0435c5437111e42a123b06e4071e26ba7cb6e prestissimo 플러그인 사용 prestissimo 이라는 Composer 플러그인이 있다. "composer parallel install plugin"이라고 소개하고 있는 플러그인으로 의존성 라이브러리 설치시 병렬 처리를 지원하여 속도를 대폭 개선해 준다고 한다. 확실히 다운로드가 필요한 상황(신규 설치, 버전업)에서는 병렬 처리로 속도가 개선된다. $ composer global require hirak/prestissimo 설치 후 Composer를 사용(install, update)하면 아래와 같이 다른 모습을 볼 수 있다. Loading composer repositories with package information Updating dependencies Prefetch start: total: 6 1/6: https://codeload.github.com/symfony/polyfill-util/legacy.zip/8de62801aa12bc4dfcf85eef5d21981ae7bb3cc4 2/6: https://codeload.github.com/symfony/polyfill-php56/legacy.zip/4d891fff050101a53a4caabb03277284942d1ad9 3/6: https://codeload.github.com/Imangazaliev/DiDOM/legacy.zip/e492feae44321e2f4882f6e9466614732822f008 4/6: https://codeload.github.com/symfony/polyfill-mbstring/legacy.zip/1289d16209491b584839022f29257ad859b8532d 5/6: https://codeload.github.com/paragonie/random_compat/legacy.zip/b3313b618f4edd76523572531d5d7e22fe747430 6/6: https://codeload.github.com/Seldaek/monolog/legacy.zip/a5f2734e8c16f3aa21b3da09715d10e15b4d2d45 Finished: success:6, skipped:0, failure:0, total: 6 --prefer-dist 사용 Faster composer install에 보면 --prefer-dist 옵션을 사용함으로써 속도를 향상 시킬 수 있다고 한다. HHVM 또는 PHP 7 사용 Composer는 PHP로 제작된 프로그램으로 PHP의 성능에 영향을 많이 받는다. 따라서 보다 빠른 실행기를 사용하는 것이 속도에 도움이 된다. PHP 7을 사용할 수 없다면 HHVM을 사용하는 것이 도움이 될 수 있다. 하지만 Prebuilt Packages를 지원하는 ubuntu나 debian을 사용하는 것이 아니라면 직접 빌드를 해야하므로 귀찮을 수 있다(개인적 생각). Disable Xdebug Xdebug가 켜진 상태에서 Composer를 사용하면 아래와 같은 경고가 나온다. Xdebug를 켠 상태에서는 성능에 매우 큰 영향이 있으니 Xdebug를 끄고 사용하라는 것이다. $ composer update You are running composer with xdebug enabled. This has a major impact on runtime performance. See https://getcomposer.org/xdebug packagist 미러 사용 아래와 같이 packagist의 레포지토리를 http://packagist.jp로 설정함으로써 약간의 속도 향상(일본이 아무래도 더 가까우니)을 얻을 수 있다고 한다. 하지만 자칫 잘못하면 더 느려질수도 있으므로 테스트를 해서 결정할 것을 권장한다. $ composer config -g repositories.packagist composer http://packagist.jp # 제거는 아래와 같이 $ composer config -g --unset repositories.packagist Disable enable_gc [Tip] Speed Up Composer에 보면 enable_gc를 disable 함으로써 속도를 향상시키는 방법을 안내하고 있다. 하지만 Disable GC when computing deps, refs #3482에서 보면 이와 관련된 패치는 이미 Composer에 반영되어 있으므로 효과가 없다. 사실 서두에서 이야기한 것처럼 위 내용들은 여러 곳의 이야기를 나름대로 요약 정리한 것이다. 하지만 모두 효과가 있다고는 말하지 못하겠다. 현재 PHP 7을 사용하고 있는 상황에서 여러가지를 시도 해봐도 Composer의 속도는 느리기만 하다(약간씩의 도움은 되는 것들도 있다). 느린 Composer로 인해 답답한 마음을 달래고자 시간이 되는대로 방법을 찾아보고 있으나 아직은 결론을 얻지 못했다. 그나마 prestissimo를 사용하는 것이 가장 효과적인 것 같다. 앞으로도 여러가지를 시도하여 도움이 될만한 방법을 발견하면 다시 글을 쓰도록 하겠다.]]></summary><content type="html"><![CDATA[<p><a href="https://getcomposer.org/">Composer</a>(컴포저)는 PHP의 의존성 관리도구이다. 이 Composer를 사용하면서 가장 큰 단점으로 꼽을 수 있는 것은 느린 속도다. 나만 그렇게 느끼는 것은 아닌지 국내외에 많은 이야기가 있다. 오늘은 그 이야기들을 정리해 보려고 한다.</p>
<p>우선 Composer에 대한 상세한 내용은 <a href="https://xpressengine.github.io/Composer-korean-docs/">Composer 한국어 매뉴얼</a>을 참고하면 도움이 될 것 같다.</p>
<p>그리고 Composer 속도에 관련된 참고글이다.</p>
<ul>
<li><a href="http://findstar.pe.kr/archives/532">composer.phar 의 동작이 느릴 때 조치할 수 있는 것들.</a></li>
<li><a href="https://www.lesstif.com/pages/viewpage.action?pageId=30277898">컴포저(PHP Composer) 속도 향상 시키기</a></li>
</ul>
<p>그럼 하나씩 살펴보자.</p>
<h3>Composer 진단</h3>
<p>우선 <code>composer diagnose</code> 명령을 이용해서 Composer의 상태를 진단할 수 있다. 진단 결과에 따라 개선이 필요한 부분들을 확인하고 개선할 수 있다.</p>
<pre><code>$ composer diagnose

Checking composer.json: OK
require.~~~/~~~ : unbound version constraints (dev-master) should be avoided
Checking platform settings: OK
Checking git settings: OK
Checking http connectivity to packagist: OK
Checking https connectivity to packagist: OK
Checking github.com oauth access: OK
Checking disk free space: OK
Checking pubkeys:
Tags Public Key Fingerprint: ~~~
Dev Public Key Fingerprint: ~~~
OK
Checking composer version: OK</code></pre>
<h3>Composer 최신버전 사용</h3>
<p><code>composer diagnose</code>에서도 Composer의 최신 버전을 사용중인지 알려준다. 가급적 최신 버전의 Composer를 사용하는 것이 속도에 조금이나마 도움이 될 수 있다.</p>
<pre><code>$ sudo /usr/local/bin/composer self-update

Updating to version 7c62e2b5346a6a656dd9587203719e35bb768056.
    Downloading: 100%
Use composer self-update --rollback to return to version d6d0435c5437111e42a123b06e4071e26ba7cb6e</code></pre>
<h3>prestissimo 플러그인 사용</h3>
<p><a href="https://github.com/hirak/prestissimo">prestissimo</a> 이라는 Composer 플러그인이 있다. &quot;composer parallel install plugin&quot;이라고 소개하고 있는 플러그인으로 의존성 라이브러리 설치시 병렬 처리를 지원하여 속도를 대폭 개선해 준다고 한다. 확실히 다운로드가 필요한 상황(신규 설치, 버전업)에서는 병렬 처리로 속도가 개선된다.</p>
<pre class="hljs bash">$ composer global require hirak/prestissimo</pre>
<p>설치 후 Composer를 사용(install, update)하면 아래와 같이 다른 모습을 볼 수 있다.</p>
<pre><code>Loading composer repositories with package information
Updating dependencies
    Prefetch start: total: 6
    1/6:    https://codeload.github.com/symfony/polyfill-util/legacy.zip/8de62801aa12bc4dfcf85eef5d21981ae7bb3cc4
    2/6:    https://codeload.github.com/symfony/polyfill-php56/legacy.zip/4d891fff050101a53a4caabb03277284942d1ad9
    3/6:    https://codeload.github.com/Imangazaliev/DiDOM/legacy.zip/e492feae44321e2f4882f6e9466614732822f008
    4/6:    https://codeload.github.com/symfony/polyfill-mbstring/legacy.zip/1289d16209491b584839022f29257ad859b8532d
    5/6:    https://codeload.github.com/paragonie/random_compat/legacy.zip/b3313b618f4edd76523572531d5d7e22fe747430
    6/6:    https://codeload.github.com/Seldaek/monolog/legacy.zip/a5f2734e8c16f3aa21b3da09715d10e15b4d2d45
    Finished: success:6, skipped:0, failure:0, total: 6</code></pre>
<h3>--prefer-dist 사용</h3>
<p><a href="http://stackoverflow.com/a/20827631">Faster composer install</a>에 보면 <code>--prefer-dist</code> 옵션을 사용함으로써 속도를 향상 시킬 수 있다고 한다.</p>
<h3><a href="http://hhvm.com/">HHVM</a> 또는 PHP 7 사용</h3>
<p>Composer는 PHP로 제작된 프로그램으로 PHP의 성능에 영향을 많이 받는다. 따라서 보다 빠른 실행기를 사용하는 것이 속도에 도움이 된다. PHP 7을 사용할 수 없다면 <a href="http://hhvm.com/">HHVM</a>을 사용하는 것이 도움이 될 수 있다. 하지만 Prebuilt Packages를 지원하는 ubuntu나 debian을 사용하는 것이 아니라면 직접 빌드를 해야하므로 귀찮을 수 있다(개인적 생각).</p>
<h3>Disable Xdebug</h3>
<p>Xdebug가 켜진 상태에서 Composer를 사용하면 아래와 같은 경고가 나온다. Xdebug를 켠 상태에서는 성능에 매우 큰 영향이 있으니 Xdebug를 끄고 사용하라는 것이다.</p>
<pre class="hljs bash">$ composer update

You are running composer with xdebug enabled. This has a major impact on runtime performance. See https://getcomposer.org/xdebug</pre>
<h3>packagist 미러 사용</h3>
<p>아래와 같이 packagist의 레포지토리를 <a href="http://packagist.jp로">http://packagist.jp로</a> 설정함으로써 약간의 속도 향상(일본이 아무래도 더 가까우니)을 얻을 수 있다고 한다. 하지만 자칫 잘못하면 더 느려질수도 있으므로 테스트를 해서 결정할 것을 권장한다.</p>
<pre><code>$ composer config -g repositories.packagist composer http://packagist.jp
# 제거는 아래와 같이
$ composer config -g --unset repositories.packagist</code></pre>
<h3>Disable enable_gc</h3>
<p><a href="https://laracasts.com/discuss/channels/tips/tip-speed-up-composer">[Tip] Speed Up Composer</a>에 보면 <code>enable_gc</code>를 disable 함으로써 속도를 향상시키는 방법을 안내하고 있다. 하지만 <a href="https://github.com/composer/composer/commit/ac676f47f7bbc619678a29deae097b6b0710b799">Disable GC when computing deps, refs #3482</a>에서 보면 이와 관련된 패치는 이미 Composer에 반영되어 있으므로 효과가 없다.</p>
<hr />
<p>사실 서두에서 이야기한 것처럼 위 내용들은 여러 곳의 이야기를 나름대로 요약 정리한 것이다. 하지만 모두 효과가 있다고는 말하지 못하겠다. 현재 PHP 7을 사용하고 있는 상황에서 여러가지를 시도 해봐도 Composer의 속도는 느리기만 하다(약간씩의 도움은 되는 것들도 있다).</p>
<p>느린 Composer로 인해 답답한 마음을 달래고자 시간이 되는대로 방법을 찾아보고 있으나 아직은 결론을 얻지 못했다. 그나마 prestissimo를 사용하는 것이 가장 효과적인 것 같다. 앞으로도 여러가지를 시도하여 도움이 될만한 방법을 발견하면 다시 글을 쓰도록 하겠다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/16/android-gradle-provided-and-org-apache-http-legacy/</id><title type="html">android gradle provided와 org.apache.http.legacy</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/16/android-gradle-provided-and-org-apache-http-legacy/"/><published>2016-03-16T15:56:00+09:00</published><updated>2016-03-16T15:56:00+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[이 글은 사실 주제가 명확하지 않다(제목도 그러하듯). 경험을 나열한 것에 불과할지도 모른다. 하지만 Volley와 Glide, gradle provided, org.apache.http.legacy.jar 파일을 얻는 법 등의 내용을 포함하고 있어서 다른 작업시에도 부분적으로 도움이 될 수 있을 것 같아 글을 남긴다. Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거에서 안드로이드의 Apache HTTP 클라이언트에 대한 지원을 제거함에 따른 대응 방법을 안내했었다. 그런데 오늘은 유사하지만 조금 다른 이야기를 하려고 한다. 본 주제를 이야기하기 전에 몇가지를 먼저 이야기 해야 할 것 같다. 이번에 신규 작업을 하면서 Volley와 Glide를 알게 되었다. 안드로이드 개발을 주업무로 하는게 아니다보니 유명한 라이브러리임에도 불구하고 이제서야 알게된 것이다. 어쨌든 여러가지 장점을 가지고 있는 라이브러리들이라 기존의 Android Asynchronous Http Client 와 Picasso를 사용하지 않고 이것들을 사용하기로 했다. 기존 라이브러리들도 충분히 잘 만들어진 것들이지만 몇가지 버그(Android Asynchronous Http Client(android-async-http) 1.4.9 사용시 Proguard를 적용하면 onSuccess 또는 onFailure이 호출되지 않는 문제 해결 등)와 의존 관계에 대한 문제들로 인해서 교체를 결정한 것이다. 우선 Volley와 Glide에 대한 이해를 돕기 위한 관련 링크들을 먼저 안내한다. Volley Volley 설명 - GitHub DWorkS/VolleyPlus Volley를 더 쉽고 강력하게, Volley Extensions Glide [안드로이드]유용한 라이브러리 - Glide (이미지 로딩 라이브러리) [안드로이드]Picasso와 Glide 비교분석 위 내용들을 보면 Glide는 크게 문제될 것이 없지만 Volley의 경우는 사용성에서 부족한 부분들이 있다고 한다. 그래서 조사를 해보니 그나마 VolleyPlus와 Volley Extensions가 부족한 부분을 메우기에 적합하다고 판단하고 내용을 검토했다. 그런데 VolleyPlus의 경우는 Volley를 확장한 것이 아니라 Volley 소스를 기반으로 새로 개발된 형태로 Volley의 원형을 사용할 수 없다는 문제가 있다(fork된 프로젝트 중에 이 문제를 수정한 프로젝트가 있긴 하지만 사용에는 적합해 보이지 않는다). 하지만 기능은 매력적인 부분이 많다. 반대로 Volley Extensions의 경우는 Volley에 대한 의존성을 가지고 확장한 것으로 내가 원하는 형태이지만 최근 관리가 안되고 있는 것으로 보인다(D2에서 지속적인 관리를 할 것이라고 했지만). 실제로 Volley의 경우 최근 jcenter(com.android.volley:volley:1.0.0)에 배포하고 있지만 Volley Extensions의 경우 기존에 Volley를 미러링한 라이브러리를 그대로 사용하고 있다. 위 상황들을 종합해서 고민한 결과 Volley Extensions 중 Volleyer 소스를 기반으로 필요한 부분을 커스텀하기로 결정했다. Volleyer를 사용하는 구조가 편리하게 잘 구성되어 있으나 위에서 이야기한 Volley 의존성 처리 부분을 변경해야 했고 gson을 사용한 request가 없기 때문에 추가해야 했다(jackson이 더 좋다고들 하지만 gson이 익숙해서). 사실 필요한 부분은 외부에서 확장해도 되지만 실제 사용하다 보면 분명 변경이 필요할 것이라는 생각에 미리 커스텀하기로 결정했다. 이 과정에서 Volleyer 소스를 안드로이드 라이브러리로 추가해서 빌드하는 것이 필요했는데 여기서 문제가 발생했다. Volleyer 안드로이드 라이브러리로 빌드하려고하면 org.apache.http.client.HttpClient, android.net.http.AndroidHttpClient, com.fasterxml.jackson.core.JsonParser 등이 사용된 부분에서 오류가 난다(sdk version 23 기준). 이 문제 중 HttpClient와 관련된 부분은 가장 쉽게 해결하려면 Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거에서 언급했던 것처럼 useLibrary 'org.apache.http.legacy'를 사용하면 된다. 그런데 이 경우는 빌드시에는 org.apache.http.legacy가 필요하지만 런타임에서는 필요하지 않다. 정확하게는 나의 경우엔 필요하지 않다. Volley에서는 하위 OS를 지원하기 위해 기본적으로 API Level 9 이하에서는 AndroidHttpClient를 사용하도록 되어 있기 때문에 이 부분이 사용되는 것인데 나의 경우는 minSdkVersion이 14로 해당되지 않는다. 따라서 해당 부분의 소스를 수정해서 제거해도되나 가급적 원소스를 유지하는 방향으로 처리하려고 했다. 그럼에도 불구하고 useLibrary 'org.apache.http.legacy'를 사용하고 싶지는 않았다. 그래서 useLibrary 'org.apache.http.legacy' 대신 아래의 내용을 build.gradle에 추가하는 방법으로 대체했다. dependencies { provided files('libs/org.apache.http.legacy.jar') provided 'org.codehaus.jackson:jackson-mapper-asl:1.9.+' provided 'com.fasterxml.jackson.core:jackson-databind:2.2.+' provided('org.simpleframework:simple-xml:2.7.+') { exclude module: 'stax' exclude module: 'stax-api' exclude module: 'xpp3' } } 위 코드를 설명하기 위해서는 provided를 먼저 이야기 해야 한다. Gradle Dependencies의 내용 중 provided가 필요한 상황을 설명하는 부분을 인용하자면 아래와 같다. 컴파일시에는 클래스패스에 넣지만, 실행/배포시에는 빠져야 하는 의존성이 있을 수 있다. 예를 들면 Servlet API 같은 것들이 그렇다. Servlet API는 Tomcat등의 WAS에 내장되어 있으므로 배포는 할 필요가 없다. PROVIDED SCOPE IN GRADLE이 글도 참고하면 이해에 도움이 될 것이다. 우선 provided files('libs/org.apache.http.legacy.jar') 부분부터 보자. 위에서 provided로 org.apache.http.legacy 지정했으므로 빌드시에는 해당 라이브러리가 있는 것으로 인정하지만 실제로 배포시에는 포함되지 않는다. 따라서 소스를 유지한 상태에서 오류없이 빌드할 수 있고 해당 라이브러리는 사용하지 않도록 할 수 있다. 그런데 사실은 위의 코드만으로는 실제 빌드가 되지 않는다. libs/org.apache.http.legacy.jar 파일이 없기 때문이다(사용되지는 않지만 빌드시 참조가 되어야 하므로 필요하다). 그럼 org.apache.http.legacy.jar 파일을 어디서 찾아야 하나? useLibrary 'org.apache.http.legacy'로 사용할 수 있는 이유는 안드로이드 SDK에 포함되어 있기 때문이다. 따라서 SDK 폴더에서 해당 파일을 찾을 수 있다. 나의 경우에는 ~/Library/Android/sdk/platforms/android-23/optional/org.apache.http.legacy.jar에 있었다. 정확한 경로는 사용하는 sdk 버전과 환경 등에 따라 차이가 있을 수는 있겠지만 분명 sdk 폴더에서 찾을 수 있을 것이다. 해당 파일을 찾았다면 프로젝트 폴더에서 libs 폴더를 만들고 그 안에 넣어준다. 그리고 아래의 부분을 보자. provided 'org.codehaus.jackson:jackson-mapper-asl:1.9.+' provided 'com.fasterxml.jackson.core:jackson-databind:2.2.+' provided('org.simpleframework:simple-xml:2.7.+') { exclude module: 'stax' exclude module: 'stax-api' exclude module: 'xpp3' } 이 부분들도 모두 provided를 사용하고 있다. Volleyer에서는 응답을 파싱하기 위한 Jackson2NetworkResponseParser, JacksonNetworkResponseParser, SimpleXmlNetworkResponseParser 등의 클래스가 있다. 그런데 네이버에서는 친절하게도 필요시에만 이것들을 사용할 수 있도록 제작해 두었기 때문에 이 클래스들을 사용하지 않을 것이라면 위 라이브러리들을 포함시키지 않아도 된다. 하지만 빌드시에는 위에서 설명했던 것과 같이 해당 라이브러리들을 참조해야 하므로 provided 선언이 필요한 것이다. 반대로 거의 항상 사용할 것이라서 라이브러리 빌드시 포함시키고자 한다면 provided 대신 기존 처럼 compile을 사용하면 된다. 자.. 그런데 아직도 한가지가 남았다. 실제 빌드시에는 proguard-rules.pro 파일에 아래의 내용을 추가해 주어야 한다. -dontwarn org.apache.http.** -dontwarn android.net.http.AndroidHttpClient 여기까지 처리하고 나면 정상적으로 빌드할 수 있다.]]></summary><content type="html"><![CDATA[<blockquote>
<p>이 글은 사실 주제가 명확하지 않다(제목도 그러하듯). 경험을 나열한 것에 불과할지도 모른다. 하지만 Volley와 Glide, gradle provided, org.apache.http.legacy.jar 파일을 얻는 법 등의 내용을 포함하고 있어서 다른 작업시에도 부분적으로 도움이 될 수 있을 것 같아 글을 남긴다.</p>
</blockquote>
<hr />
<p><a href="https://blog.asamaru.net/2015/09/25/android-6-apache-http-client-removal/">Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거</a>에서 안드로이드의 Apache HTTP 클라이언트에 대한 지원을 제거함에 따른 대응 방법을 안내했었다. 그런데 오늘은 유사하지만 조금 다른 이야기를 하려고 한다.</p>
<p>본 주제를 이야기하기 전에 몇가지를 먼저 이야기 해야 할 것 같다.
이번에 신규 작업을 하면서 <a href="https://android.googlesource.com/platform/frameworks/volley/">Volley</a>와 <a href="https://github.com/bumptech/glide">Glide</a>를 알게 되었다. 안드로이드 개발을 주업무로 하는게 아니다보니 유명한 라이브러리임에도 불구하고 이제서야 알게된 것이다. 어쨌든 여러가지 장점을 가지고 있는 라이브러리들이라 기존의 <a href="http://loopj.com/android-async-http/">Android Asynchronous Http Client</a> 와 <a href="http://square.github.io/picasso/">Picasso</a>를 사용하지 않고 이것들을 사용하기로 했다. 기존 라이브러리들도 충분히 잘 만들어진 것들이지만 몇가지 버그(<a href="https://blog.asamaru.net/2015/09/25/android-async-http-1-dot-4-9-not-called-onsuccess-or-onfailure/">Android Asynchronous Http Client(android-async-http) 1.4.9 사용시 Proguard를 적용하면 onSuccess 또는 onFailure이 호출되지 않는 문제 해결</a> 등)와 의존 관계에 대한 문제들로 인해서 교체를 결정한 것이다.</p>
<p>우선 Volley와 Glide에 대한 이해를 돕기 위한 관련 링크들을 먼저 안내한다.</p>
<h3><a href="https://android.googlesource.com/platform/frameworks/volley/">Volley</a></h3>
<ul>
<li><a href="https://gist.github.com/benelog/5981448">Volley 설명 - GitHub</a></li>
<li><a href="https://github.com/DWorkS/VolleyPlus">DWorkS/VolleyPlus</a></li>
<li><a href="http://d2.naver.com/helloworld/1258547">Volley를 더 쉽고 강력하게, Volley Extensions</a></li>
</ul>
<h3><a href="https://github.com/bumptech/glide">Glide</a></h3>
<ul>
<li><a href="http://gun0912.tistory.com/17">[안드로이드]유용한 라이브러리 - Glide (이미지 로딩 라이브러리)</a></li>
<li><a href="http://gun0912.tistory.com/19">[안드로이드]Picasso와 Glide 비교분석</a></li>
</ul>
<p>위 내용들을 보면 Glide는 크게 문제될 것이 없지만 Volley의 경우는 사용성에서 부족한 부분들이 있다고 한다. 그래서 조사를 해보니 그나마 VolleyPlus와 Volley Extensions가 부족한 부분을 메우기에 적합하다고 판단하고 내용을 검토했다. 그런데 VolleyPlus의 경우는 Volley를 확장한 것이 아니라 Volley 소스를 기반으로 새로 개발된 형태로 Volley의 원형을 사용할 수 없다는 문제가 있다(<a href="https://github.com/isapoetra/VolleyPlus">fork된 프로젝트</a> 중에 이 문제를 수정한 프로젝트가 있긴 하지만 사용에는 적합해 보이지 않는다). 하지만 기능은 매력적인 부분이 많다. 반대로 Volley Extensions의 경우는 Volley에 대한 의존성을 가지고 확장한 것으로 내가 원하는 형태이지만 최근 관리가 안되고 있는 것으로 보인다(D2에서 지속적인 관리를 할 것이라고 했지만). 실제로 Volley의 경우 최근 jcenter(<code>com.android.volley:volley:1.0.0</code>)에 배포하고 있지만 Volley Extensions의 경우 기존에 <a href="https://github.com/mcxiaoke/android-volley">Volley를 미러링한 라이브러리</a>를 그대로 사용하고 있다.</p>
<p>위 상황들을 종합해서 고민한 결과 Volley Extensions 중 <a href="https://github.com/naver/volley-extensions/tree/master/volleyer">Volleyer</a> 소스를 기반으로 필요한 부분을 커스텀하기로 결정했다. Volleyer를 사용하는 구조가 편리하게 잘 구성되어 있으나 위에서 이야기한 Volley 의존성 처리 부분을 변경해야 했고 <a href="https://github.com/google/gson">gson</a>을 사용한 request가 없기 때문에 추가해야 했다(jackson이 더 좋다고들 하지만 gson이 익숙해서). 사실 필요한 부분은 외부에서 확장해도 되지만 실제 사용하다 보면 분명 변경이 필요할 것이라는 생각에 미리 커스텀하기로 결정했다.</p>
<p>이 과정에서 Volleyer 소스를 안드로이드 라이브러리로 추가해서 빌드하는 것이 필요했는데 여기서 문제가 발생했다.</p>
<hr />
<p>Volleyer 안드로이드 라이브러리로 빌드하려고하면 org.apache.http.client.HttpClient, android.net.http.AndroidHttpClient, com.fasterxml.jackson.core.JsonParser 등이 사용된 부분에서 오류가 난다(sdk version 23 기준). 이 문제 중 HttpClient와 관련된 부분은 가장 쉽게 해결하려면 <a href="https://blog.asamaru.net/2015/09/25/android-6-apache-http-client-removal/">Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거</a>에서 언급했던 것처럼 <code>useLibrary 'org.apache.http.legacy'</code>를 사용하면 된다.</p>
<p>그런데 이 경우는 빌드시에는 org.apache.http.legacy가 필요하지만 런타임에서는 필요하지 않다. 정확하게는 나의 경우엔 필요하지 않다. Volley에서는 하위 OS를 지원하기 위해 기본적으로 API Level 9 이하에서는 AndroidHttpClient를 사용하도록 되어 있기 때문에 이 부분이 사용되는 것인데 나의 경우는 minSdkVersion이 14로 해당되지 않는다. 따라서 해당 부분의 소스를 수정해서 제거해도되나 가급적 원소스를 유지하는 방향으로 처리하려고 했다. 그럼에도 불구하고 useLibrary 'org.apache.http.legacy'를 사용하고 싶지는 않았다. 그래서 <code>useLibrary 'org.apache.http.legacy'</code> 대신 아래의 내용을 build.gradle에 추가하는 방법으로 대체했다.</p>
<pre><code>dependencies {
  provided files('libs/org.apache.http.legacy.jar')

  provided 'org.codehaus.jackson:jackson-mapper-asl:1.9.+'
  provided 'com.fasterxml.jackson.core:jackson-databind:2.2.+'
  provided('org.simpleframework:simple-xml:2.7.+') {
    exclude module: 'stax'
    exclude module: 'stax-api'
    exclude module: 'xpp3'
  }
}</code></pre>
<p>위 코드를 설명하기 위해서는 <code>provided</code>를 먼저 이야기 해야 한다. <a href="http://kwonnam.pe.kr/wiki/gradle/dependencies#provided">Gradle Dependencies</a>의 내용 중 provided가 필요한 상황을 설명하는 부분을 인용하자면 아래와 같다.</p>
<blockquote>
<p>컴파일시에는 클래스패스에 넣지만, 실행/배포시에는 빠져야 하는 의존성이 있을 수 있다. 예를 들면 Servlet API 같은 것들이 그렇다. Servlet API는 Tomcat등의 WAS에 내장되어 있으므로 배포는 할 필요가 없다.</p>
</blockquote>
<p><a href="http://sinking.in/blog/provided-scope-in-gradle/">PROVIDED SCOPE IN GRADLE</a>이 글도 참고하면 이해에 도움이 될 것이다.</p>
<p>우선 <code>provided files('libs/org.apache.http.legacy.jar')</code> 부분부터 보자. 위에서 <code>provided</code>로 <code>org.apache.http.legacy</code> 지정했으므로 빌드시에는 해당 라이브러리가 있는 것으로 인정하지만 실제로 배포시에는 포함되지 않는다. 따라서 소스를 유지한 상태에서 오류없이 빌드할 수 있고 해당 라이브러리는 사용하지 않도록 할 수 있다.</p>
<p>그런데 사실은 위의 코드만으로는 실제 빌드가 되지 않는다. <code>libs/org.apache.http.legacy.jar</code> 파일이 없기 때문이다(사용되지는 않지만 빌드시 참조가 되어야 하므로 필요하다). 그럼 <code>org.apache.http.legacy.jar</code> 파일을 어디서 찾아야 하나? <code>useLibrary 'org.apache.http.legacy'</code>로 사용할 수 있는 이유는 안드로이드 SDK에 포함되어 있기 때문이다. 따라서 SDK 폴더에서 해당 파일을 찾을 수 있다. 나의 경우에는 <code>~/Library/Android/sdk/platforms/android-23/optional/org.apache.http.legacy.jar</code>에 있었다. 정확한 경로는 사용하는 sdk 버전과 환경 등에 따라 차이가 있을 수는 있겠지만 분명 sdk 폴더에서 찾을 수 있을 것이다. 해당 파일을 찾았다면 프로젝트 폴더에서 libs 폴더를 만들고 그 안에 넣어준다.</p>
<p>그리고 아래의 부분을 보자.</p>
<pre><code>provided 'org.codehaus.jackson:jackson-mapper-asl:1.9.+'
provided 'com.fasterxml.jackson.core:jackson-databind:2.2.+'
provided('org.simpleframework:simple-xml:2.7.+') {
  exclude module: 'stax'
  exclude module: 'stax-api'
  exclude module: 'xpp3'
}</code></pre>
<p>이 부분들도 모두 <code>provided</code>를 사용하고 있다. Volleyer에서는 응답을 파싱하기 위한 <code>Jackson2NetworkResponseParser</code>, <code>JacksonNetworkResponseParser</code>, <code>SimpleXmlNetworkResponseParser</code> 등의 클래스가 있다. 그런데 네이버에서는 친절하게도 필요시에만 이것들을 사용할 수 있도록 제작해 두었기 때문에 이 클래스들을 사용하지 않을 것이라면 위 라이브러리들을 포함시키지 않아도 된다. 하지만 빌드시에는 위에서 설명했던 것과 같이 해당 라이브러리들을 참조해야 하므로 provided 선언이 필요한 것이다. 반대로 거의 항상 사용할 것이라서 라이브러리 빌드시 포함시키고자 한다면 provided 대신 기존 처럼 compile을 사용하면 된다.</p>
<hr />
<p>자.. 그런데 아직도 한가지가 남았다. 실제 빌드시에는 <code>proguard-rules.pro</code> 파일에 아래의 내용을 추가해 주어야 한다.</p>
<pre><code>-dontwarn org.apache.http.**
-dontwarn android.net.http.AndroidHttpClient</code></pre>
<p>여기까지 처리하고 나면 정상적으로 빌드할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/11/upgrade-to-php-5-6-or-7-on-mac-osx-10-11-el-capitan-and-osx-10-6-10-10/</id><title type="html">Mac OSX(10.6 – 10.11)에서 PHP(5.6 / 7) 업그레이드</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/11/upgrade-to-php-5-6-or-7-on-mac-osx-10-11-el-capitan-and-osx-10-6-10-10/"/><published>2016-03-11T08:43:17+09:00</published><updated>2016-03-11T08:43:17+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[현재 기준으로 El Capitan에서 PHP 버전은 5.5.30이다. 웬만한 PHP 라이브러리는 동작하는데 문제가 없는 버전이긴 하지만 PHP 7이 최신 버전이며 작업에 따라 더 높은 버전의 PHP가 필요할 수 있다. 나의 경우도 웬만한 작업은 Vagrant에서 하므로 OSX의 PHP 버전은 문제가 되지 않지만 이번에 몇가지를 테스트하기 위해 OSX의 PHP를 버전업 하기로 했다. OSX에서의 PHP 버전업은 Upgrade to PHP 5.6 or 7 on Mac OSX 10.11 El Capitan and OSX 10.6 – 10.10에 잘 나와있다. 아니 설명할 것이 거의 없을 정도로 아주 간단하다. # PHP 5.6으로 버전업 curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6 # PHP 7.0으로 버전업 curl -s http://php-osx.liip.ch/install.sh | bash -s 7.0 위처럼 쉘 스크립트를 실행해 주고 기다리면 거의 모든 작업이 완료된다(시간은 조금 걸린다). 이제는 잘 설치되었는지 확인. PHP 버전 확인 /usr/local/php5/bin/php --version php --version 위처럼 해보면 /usr/local/php5/bin/php --version는 PHP가 버전업된 것으로 보이지만 php --version는 기존 버전으로 나올 것이다. which php 위 명령을 넣으면 실행되는 PHP의 경로를 볼 수 있다. 나의 경우엔 /usr/bin/이다. 여기엔 PHP 기본 실행 파일 외에도 몇가지 관련 파일이 있는데 이 파일들을 새로 설치한 파일들로 교체 해주면 된다. 그런데 어떤 파일들을 바꿔야 할지 잘 모르거나 보다 간단한 방법을 찾고 있다면 아래의 방법을 사용하자. # 현재 계정 적용 echo "export PATH=/usr/local/php5/bin:\$PATH" >> ~/.profile # 또는 # 전체 계정 적용 echo "export PATH=/usr/local/php5/bin:\$PATH" >> /etc/bashrc 이제 shell을 다시 열어 php --version 해보면 새로 설치된 PHP 버전을 확인 할 수 있다. 웹 접속 확인 우선 httpd.conf는 El Capitan 기준으로 /etc/apache2/httpd.conf에 있다. 여기서 DocumentRoot를 확인하면 기본 웹 접근 경로를 알 수 있다. 이것 또한 El Capitan 기준으로 "/Library/WebServer/Documents"이다. vi /Library/WebServer/Documents/phpinfo.php 위처럼 새로 파일을 하나 열어서 아래의 내용을 넣는다. <?php phpinfo(); 이제는 http://localhost/phpinfo.php에 접속해서 페이지가 잘 나오는지 본다. 페이지가 나왔다면 PHP 버전도 확인 가능할 것이다. 나의 경우는 7.0.4가 설치되어 있다. 덤으로 composer 설치. curl -sS https://getcomposer.org/installer | php mv composer.phar /usr/local/bin/composer]]></summary><content type="html"><![CDATA[<p>현재 기준으로 El Capitan에서 PHP 버전은 5.5.30이다. 웬만한 PHP 라이브러리는 동작하는데 문제가 없는 버전이긴 하지만 PHP 7이 최신 버전이며 작업에 따라 더 높은 버전의 PHP가 필요할 수 있다. 나의 경우도 웬만한 작업은 Vagrant에서 하므로 OSX의 PHP 버전은 문제가 되지 않지만 이번에 몇가지를 테스트하기 위해 OSX의 PHP를 버전업 하기로 했다.</p>
<p>OSX에서의 PHP 버전업은 <a href="http://coolestguidesontheplanet.com/upgrade-php-on-osx/">Upgrade to PHP 5.6 or 7 on Mac OSX 10.11 El Capitan and OSX 10.6 – 10.10</a>에 잘 나와있다. 아니 설명할 것이 거의 없을 정도로 아주 간단하다.</p>
<pre class="hljs bash"><span class="hljs-comment"># PHP 5.6으로 버전업</span>
curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6

<span class="hljs-comment"># PHP 7.0으로 버전업</span>
curl -s http://php-osx.liip.ch/install.sh | bash -s 7.0</pre>
<p>위처럼 쉘 스크립트를 실행해 주고 기다리면 거의 모든 작업이 완료된다(시간은 조금 걸린다).</p>
<p>이제는 잘 설치되었는지 확인.</p>
<h3>PHP 버전 확인</h3>
<pre class="hljs bash">/usr/<span class="hljs-built_in">local</span>/php5/bin/php --version
php --version</pre>
<p>위처럼 해보면 <code>/usr/local/php5/bin/php --version</code>는 PHP가 버전업된 것으로 보이지만 <code>php --version</code>는 기존 버전으로 나올 것이다.</p>
<pre class="hljs bash"><span class="hljs-built_in">which</span> php</pre>
<p>위 명령을 넣으면 실행되는 PHP의 경로를 볼 수 있다. 나의 경우엔 <code>/usr/bin/</code>이다. 여기엔 PHP 기본 실행 파일 외에도 몇가지 관련 파일이 있는데 이 파일들을 새로 설치한 파일들로 교체 해주면 된다. 그런데 어떤 파일들을 바꿔야 할지 잘 모르거나 보다 간단한 방법을 찾고 있다면 아래의 방법을 사용하자.</p>
<pre class="hljs bash"><span class="hljs-comment"># 현재 계정 적용</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"export PATH=/usr/local/php5/bin:\$PATH"</span> &gt;&gt; ~/.profile
<span class="hljs-comment"># 또는</span>
<span class="hljs-comment"># 전체 계정 적용</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"export PATH=/usr/local/php5/bin:\$PATH"</span> &gt;&gt; /etc/bashrc</pre>
<p>이제 shell을 다시 열어 <code>php --version</code> 해보면 새로 설치된 PHP 버전을 확인 할 수 있다.</p>
<h3>웹 접속 확인</h3>
<p>우선 httpd.conf는 El Capitan 기준으로 <code>/etc/apache2/httpd.conf</code>에 있다. 여기서 <code>DocumentRoot</code>를 확인하면 기본 웹 접근 경로를 알 수 있다. 이것 또한 El Capitan 기준으로  &quot;/Library/WebServer/Documents&quot;이다.</p>
<pre class="hljs bash">vi /Library/WebServer/Documents/phpinfo.php</pre>
<p>위처럼 새로 파일을 하나 열어서 아래의 내용을 넣는다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span> phpinfo();</pre>
<p>이제는 <a href="http://localhost/phpinfo.php">http://localhost/phpinfo.php</a>에 접속해서 페이지가 잘 나오는지 본다. 페이지가 나왔다면 PHP 버전도 확인 가능할 것이다. 나의 경우는 7.0.4가 설치되어 있다.</p>
<hr />
<p>덤으로 composer 설치.</p>
<pre class="hljs bash">curl -sS https://getcomposer.org/installer | php
mv composer.phar /usr/<span class="hljs-built_in">local</span>/bin/composer</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/10/android-studio-ignore-build-files-in-find-results/</id><title type="html">Android Studio : Find results에서 build files 제외하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/10/android-studio-ignore-build-files-in-find-results/"/><published>2016-03-10T19:30:12+09:00</published><updated>2016-03-10T19:30:12+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[Android Studio로 작업을 하다보면 많은 불편함을 겪게 된다. 그중에 하나가 원하는 문자열을 찾기 위해 사용하는 "Find in Path"(Command+Shift+F / Ctrl+Shift+F) 메뉴다. PHPStorm은 exclude 기능을 이용해서 원하지 않는 폴더를 프로젝트에서 제외해 둘 수 있다. 같은 회사에서 만들었음에도 불구하고 Android Studio에는 비슷한 기능이 없다. 그로 인해서 Find로 프로젝트 전체에서 검색시 build 폴더 등이 포함되어 원하는 결과를 찾기가 무척 힘들다(특히 R.java, log 파일등이 포함되면). 이 문제를 해결할 방법은 없는가? 일반적인 방법으로 "File name filter"를 이용해서 java, xml 등의 파일만 지정하는 것도 가능하지만 그래도 build 폴더 등을 제외하기는 쉽지 않다. 또는 "Scope > Directory"에서 소스 폴더를 지정하는 방법도 있으나 서브 모듈들이 다수 포함되어 있거나 libs 폴더 등도 함께 검색하고자 한다면 원하는 결과를 얻기 어렵다. 그럼 build 시에 생성되는 파일들이 저장되는 intermediates, generated 폴더를 제외시키는 방법을 알아보자(Ignore R.java files in Find results). "Find in Path" 다이얼로그를 연다(Command+Shift+F). "Scope > Custom"을 선택하고 우측에 "..."을 선택한다. "Scopes" 다이얼로그가 나타나면 좌측 상단에 "+"를 선택한다. "+"를 선택하면 "Local / Shared"를 선택하라고 나오는데 아무것이나 선택해도 된다. 사실은 아직 두개의 차이를 모르겠다. 처음엔 Shared를 선택하면 다른 프로젝트에서도 사용할 수 있을 것이라 생각했는데 되지 않았다. Scope 이름을 넣는 다이얼로그가 나오면 원하는 이름("ExcludeIntermediates")을 넣는다. 새로운 Scope가 생성되었다면 "Pattern:" 란에 !file:*intermediates*/&&!file:*generated*/을 입력하고 "OK"를 선택한다. Custom 메뉴에 보면 보다 다양하게 범위를 지정할 수 있는 기능들이 있으니 활용해 보는 것도 좋을 것이다. 이제부터는 "Find in Path"에서 "Scope > Custom > ExcludeIntermediates"를 선택하고 검색하면 intermediates, generated를 제외한 폴더에서만 검색된 결과가 나온다. 설명을 보면 알겠지만 추가적으로 제외하고 싶은 폴더가 있다면 규칙을 추가하면 된다. 안드로이드 스튜디오를 이용한 개발은 정말 고난의 연속이다.]]></summary><content type="html"><![CDATA[<p>Android Studio로 작업을 하다보면 많은 불편함을 겪게 된다. 그중에 하나가 원하는 문자열을 찾기 위해 사용하는 &quot;Find in Path&quot;(<kbd>Command</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd> / <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd>) 메뉴다. PHPStorm은 exclude 기능을 이용해서 원하지 않는 폴더를 프로젝트에서 제외해 둘 수 있다. 같은 회사에서 만들었음에도 불구하고 Android Studio에는 비슷한 기능이 없다. 그로 인해서 Find로 프로젝트 전체에서 검색시 build 폴더 등이 포함되어 원하는 결과를 찾기가 무척 힘들다(특히 R.java, log 파일등이 포함되면). 이 문제를 해결할 방법은 없는가?</p>
<p><img src="https://blog.asamaru.net/res/img/post/2016/03/android_studio_find_in_path.png" alt="Android Studio Find in path" width="436" height="515" /></p>
<p>일반적인 방법으로 &quot;File name filter&quot;를 이용해서 java, xml 등의 파일만 지정하는 것도 가능하지만 그래도 build 폴더 등을 제외하기는 쉽지 않다. 또는 &quot;Scope &gt; Directory&quot;에서 소스 폴더를 지정하는 방법도 있으나 서브 모듈들이 다수 포함되어 있거나 libs 폴더 등도 함께 검색하고자 한다면 원하는 결과를 얻기 어렵다.</p>
<p>그럼 build 시에 생성되는 파일들이 저장되는 intermediates, generated 폴더를 제외시키는 방법을 알아보자(<a href="http://stackoverflow.com/a/32238593">Ignore R.java files in Find results</a>).</p>
<ul>
<li>&quot;Find in Path&quot; 다이얼로그를 연다(<kbd>Command</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd>).</li>
<li>&quot;Scope &gt; Custom&quot;을 선택하고 우측에 &quot;...&quot;을 선택한다.</li>
<li>&quot;Scopes&quot; 다이얼로그가 나타나면 좌측 상단에 &quot;+&quot;를 선택한다.</li>
<li>&quot;+&quot;를 선택하면 &quot;Local / Shared&quot;를 선택하라고 나오는데 아무것이나 선택해도 된다. 사실은 아직 두개의 차이를 모르겠다. 처음엔 Shared를 선택하면 다른 프로젝트에서도 사용할 수 있을 것이라 생각했는데 되지 않았다.</li>
<li>Scope 이름을 넣는 다이얼로그가 나오면 원하는 이름(&quot;ExcludeIntermediates&quot;)을 넣는다.</li>
<li>새로운 Scope가 생성되었다면 &quot;Pattern:&quot; 란에 <code>!file:*intermediates*/&amp;&amp;!file:*generated*/</code>을 입력하고 &quot;OK&quot;를 선택한다.</li>
</ul>
<blockquote>
<p>Custom 메뉴에 보면 보다 다양하게 범위를 지정할 수 있는 기능들이 있으니 활용해 보는 것도 좋을 것이다.</p>
</blockquote>
<p><img src="https://blog.asamaru.net/res/img/post/2016/03/android_studio_find_in_path_2.png" alt="Android Studio Find in path" width="447" height="509" /></p>
<p>이제부터는 &quot;Find in Path&quot;에서 &quot;Scope &gt; Custom &gt; ExcludeIntermediates&quot;를 선택하고 검색하면 intermediates, generated를 제외한 폴더에서만 검색된 결과가 나온다. 설명을 보면 알겠지만 추가적으로 제외하고 싶은 폴더가 있다면 규칙을 추가하면 된다.</p>
<hr />
<p>안드로이드 스튜디오를 이용한 개발은 정말 고난의 연속이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/10/android-error-could-not-read-entry-app-processdebugmanifest-from-cache-taskartifacts-bin/</id><title type="html">Android : Error:Could not read entry ':app:processDebugManifest' from cache taskArtifacts.bin 오류 수정</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/10/android-error-could-not-read-entry-app-processdebugmanifest-from-cache-taskartifacts-bin/"/><published>2016-03-10T08:44:31+09:00</published><updated>2016-03-10T08:44:31+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 빌드시 아래와 같은 오류가 날 때가 있다. Error:Could not read entry ':app:processDebugManifest' from cache taskArtifacts.bin ~~~ 흔하게 발생하지는 않는데 프로젝트의 Gradle 버전을 변경하는 경우 간혹 발생할 수 있다. 해결 방법은 대부분 아주 간단하다. 오류 내용 중 from cache taskArtifacts.bin에서 보듯이 cache 파일에서 필요한 정보를 가져오지 못하고 있으니 해당 cache 파일을 지우면 된다. rm .gradle/2.10/taskArtifacts/taskArtifacts.bin taskArtifacts.bin 파일의 경로는 Gradle 버전 등에 따라 다를 수 있으니 오류 로그에서 파일의 위치를 확인하거나 .gradle 하위에서 해당 파일을 찾으면 된다.]]></summary><content type="html"><![CDATA[<p>안드로이드 빌드시 아래와 같은 오류가 날 때가 있다.</p>
<pre><code>Error:Could not read entry ':app:processDebugManifest' from cache taskArtifacts.bin ~~~</code></pre>
<p>흔하게 발생하지는 않는데 프로젝트의 Gradle 버전을 변경하는 경우 간혹 발생할 수 있다.</p>
<p>해결 방법은 대부분 아주 간단하다. 오류 내용 중 <code>from cache taskArtifacts.bin</code>에서 보듯이 cache 파일에서 필요한 정보를 가져오지 못하고 있으니 해당 cache 파일을 지우면 된다.</p>
<pre class="hljs bash">rm .gradle/2.10/taskArtifacts/taskArtifacts.bin</pre>
<p><code>taskArtifacts.bin</code> 파일의 경로는 Gradle 버전 등에 따라 다를 수 있으니 오류 로그에서 파일의 위치를 확인하거나 <code>.gradle</code> 하위에서 해당 파일을 찾으면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/09/phantomjs-2-1-1-render-pdf-zoomfactor-bug/</id><title type="html">PhantomJS 2.1.1: render PDF / zoomFactor 버그 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/09/phantomjs-2-1-1-render-pdf-zoomfactor-bug/"/><published>2016-03-09T11:18:51+09:00</published><updated>2016-03-09T11:18:51+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[어제 작성했던 PhantomJS 2.1.1: render PDF / pageSize format 버그 해결에서 언급했던 PhantomJS에서 웹페이지를 PDF로 저장할 때 zoomFactor가 정상 동작하지 않는 문제를 개선한 코드를 새로 올린다. PhantomJS 2: PDF rendering too large, page.zoomFactor doesn't work에서 해결의 힌트가 있었음에도 불구하고 자세히 보지않아 해결하지 못했었는데 해당 부분을 조금 변형해서 조금 더 나은 방법을 적용했다(개인적인 생각). 일단 코드부터. "use strict"; /*global phantom: false*/ var dest, source; var v = phantom.version; if (v.major >= 2) { var system = require('system'); dest = system.args[1]; source = system.args[2]; } else { dest = phantom.args[0]; source = phantom.args[1]; } var page = require('webpage').create(); // Web Page를 Control 하기 위한 Web Page Module 객체 생성 // fixme phantomjs 2.1.1 에서 pageSize.format A4 버그 개선 var width = 1024; page.viewportSize = {width: width, height: width * (768 / 1024)}; // PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작 page.zoomFactor = 585 / width; // A4 / 72 DPI : 585px X 842px var pageSize = { format: 'A4', orientation: 'portrait', margin: { top: '0.5cm', bottom: '0.5cm', left: '0.5cm', right: '0.5cm' } }; page.paperSize = pageSize; page.onLoadFinished = function (status) { var zoom = page.zoomFactor; page.evaluate(function (zoom) { document.getElementsByTagName('body')[0].style.zoom = zoom; }, zoom); setTimeout(function () { page.render(dest); // 스크린 캡쳐파일 생성 console.log('Status: ' + status); phantom.exit(); }, 0); }; page.open(source, function (status) { page.evaluate(function () { // 폰트 문제로 사용가능한 폰트로 교체 var cssCode = 'html body, html body * { font-family:"바른돋움OTF" !important; }';// html { zoom: 1; } var styleElement = document.createElement("style"); styleElement.type = "text/css"; if (styleElement.styleSheet) { styleElement.styleSheet.cssText = cssCode; } else { styleElement.appendChild(document.createTextNode(cssCode)); } document.getElementsByTagName("head")[0].appendChild(styleElement); }); if (status !== 'success') { // status 인자를 통해 성공, 실패여부 확인 console.log('Cannot open webpage'); phantom.exit(); } }); 지난 글에서의 코드와 거의 유사하다. 변경된 부분 중 중요한 부분만 아래에 설명한다. var width = 1024; page.viewportSize = {width: width, height: width * (768 / 1024)}; // PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작 page.zoomFactor = 585 / width; // A4 / 72 DPI : 585px X 842px 보여줄 가로 width에 따라 zoomFactor를 결정한다. 585는 72 DPI 기준에서 A4용지의 가로 px 이다. page.onLoadFinished = function (status) { var zoom = page.zoomFactor; page.evaluate(function (zoom) { document.getElementsByTagName('body')[0].style.zoom = zoom; }, zoom); setTimeout(function () { page.render(dest); // 스크린 캡쳐파일 생성 console.log('Status: ' + status); phantom.exit(); }, 0); }; 문제가 되던 부분이 zoomFactor가 적용되지 않는 것이었다. 이를 개선하기 위해 body의 zoom css를 사용해서 보정한다. 다른 부분의 자세한 내용은 PhantomJS 2.1.1: render PDF / pageSize format 버그 해결을 참고하자. 마지막으로 위 방법도 완전한 방법은 아니다. PhantomJS가 버전업 되면서 zoomFactor 버그가 해결되면 이번엔 반대로 너무 작게 출력하게되는 코드가 될 수 있다. 그런 경우을 감안한다면 지난 글에서 언급한 방법이 나을 수도 있다(실제 PDF가 A4 사이즈가 아니라는 것을 무시한다면 : 출력시에는 A4에 맞게 잘 나온다).]]></summary><content type="html"><![CDATA[<p>어제 작성했던 <a href="https://blog.asamaru.net/2016/03/08/phantomjs-2-pagesize-format-bug/">PhantomJS 2.1.1: render PDF / pageSize format 버그 해결</a>에서 언급했던 PhantomJS에서 웹페이지를 PDF로 저장할 때 <a href="http://phantomjs.org/api/webpage/property/zoom-factor.html">zoomFactor</a>가 정상 동작하지 않는 문제를 개선한 코드를 새로 올린다. <a href="https://github.com/ariya/phantomjs/issues/12685">PhantomJS 2: PDF rendering too large, page.zoomFactor doesn't work</a>에서 해결의 힌트가 있었음에도 불구하고 자세히 보지않아 해결하지 못했었는데 해당 부분을 조금 변형해서 조금 더 나은 방법을 적용했다(개인적인 생각).</p>
<p>일단 코드부터.</p>
<pre class="hljs javascript"><span class="hljs-meta">"use strict"</span>;
<span class="hljs-comment">/*global phantom: false*/</span>

<span class="hljs-keyword">var</span> dest, source;
<span class="hljs-keyword">var</span> v = phantom.version;
<span class="hljs-keyword">if</span> (v.major &gt;= <span class="hljs-number">2</span>) {
    <span class="hljs-keyword">var</span> system = <span class="hljs-built_in">require</span>(<span class="hljs-string">'system'</span>);
    dest = system.args[<span class="hljs-number">1</span>];
    source = system.args[<span class="hljs-number">2</span>];
} <span class="hljs-keyword">else</span> {
    dest = phantom.args[<span class="hljs-number">0</span>];
    source = phantom.args[<span class="hljs-number">1</span>];
}

<span class="hljs-keyword">var</span> page = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpage'</span>).create(); <span class="hljs-comment">// Web Page를 Control 하기 위한 Web Page Module 객체 생성</span>
<span class="hljs-comment">// fixme phantomjs 2.1.1 에서 pageSize.format A4 버그 개선</span>
<span class="hljs-keyword">var</span> width = <span class="hljs-number">1024</span>;
page.viewportSize = {<span class="hljs-attr">width</span>: width, <span class="hljs-attr">height</span>: width * (<span class="hljs-number">768</span> / <span class="hljs-number">1024</span>)};   <span class="hljs-comment">// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작</span>
page.zoomFactor = <span class="hljs-number">585</span> / width;  <span class="hljs-comment">// A4 / 72 DPI : 585px X 842px</span>

<span class="hljs-keyword">var</span> pageSize = {
    <span class="hljs-attr">format</span>: <span class="hljs-string">'A4'</span>,
    <span class="hljs-attr">orientation</span>: <span class="hljs-string">'portrait'</span>,
    <span class="hljs-attr">margin</span>: {
        <span class="hljs-attr">top</span>: <span class="hljs-string">'0.5cm'</span>,
        <span class="hljs-attr">bottom</span>: <span class="hljs-string">'0.5cm'</span>,
        <span class="hljs-attr">left</span>: <span class="hljs-string">'0.5cm'</span>,
        <span class="hljs-attr">right</span>: <span class="hljs-string">'0.5cm'</span>
    }
};
page.paperSize = pageSize;

page.onLoadFinished = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) </span>{
    <span class="hljs-keyword">var</span> zoom = page.zoomFactor;
    page.evaluate(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">zoom</span>) </span>{
        <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'body'</span>)[<span class="hljs-number">0</span>].style.zoom = zoom;
    }, zoom);

    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        page.render(dest);    <span class="hljs-comment">// 스크린 캡쳐파일 생성</span>
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Status: '</span> + status);
        phantom.exit();

    }, <span class="hljs-number">0</span>);
};

page.open(source, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) </span>{
    page.evaluate(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        <span class="hljs-comment">// 폰트 문제로 사용가능한 폰트로 교체</span>
        <span class="hljs-keyword">var</span> cssCode = <span class="hljs-string">'html body, html body * { font-family:"바른돋움OTF" !important; }'</span>;<span class="hljs-comment">// html { zoom: 1; }</span>
        <span class="hljs-keyword">var</span> styleElement = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"style"</span>);
        styleElement.type = <span class="hljs-string">"text/css"</span>;
        <span class="hljs-keyword">if</span> (styleElement.styleSheet) {
            styleElement.styleSheet.cssText = cssCode;
        } <span class="hljs-keyword">else</span> {
            styleElement.appendChild(<span class="hljs-built_in">document</span>.createTextNode(cssCode));
        }
        <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">"head"</span>)[<span class="hljs-number">0</span>].appendChild(styleElement);
    });
    <span class="hljs-keyword">if</span> (status !== <span class="hljs-string">'success'</span>) { <span class="hljs-comment">// status 인자를 통해 성공, 실패여부 확인</span>
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Cannot open webpage'</span>);
        phantom.exit();
    }
});</pre>
<p>지난 글에서의 코드와 거의 유사하다. 변경된 부분 중 중요한 부분만 아래에 설명한다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> width = <span class="hljs-number">1024</span>;
page.viewportSize = {<span class="hljs-attr">width</span>: width, <span class="hljs-attr">height</span>: width * (<span class="hljs-number">768</span> / <span class="hljs-number">1024</span>)};   <span class="hljs-comment">// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작</span>
page.zoomFactor = <span class="hljs-number">585</span> / width;  <span class="hljs-comment">// A4 / 72 DPI : 585px X 842px</span></pre>
<p>보여줄 가로 width에 따라 zoomFactor를 결정한다. 585는 72 DPI 기준에서 A4용지의 가로 px 이다.</p>
<pre class="hljs javascript">page.onLoadFinished = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) </span>{
    <span class="hljs-keyword">var</span> zoom = page.zoomFactor;
    page.evaluate(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">zoom</span>) </span>{
        <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'body'</span>)[<span class="hljs-number">0</span>].style.zoom = zoom;
    }, zoom);

    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        page.render(dest);    <span class="hljs-comment">// 스크린 캡쳐파일 생성</span>
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Status: '</span> + status);
        phantom.exit();

    }, <span class="hljs-number">0</span>);
};</pre>
<p>문제가 되던 부분이 zoomFactor가 적용되지 않는 것이었다. 이를 개선하기 위해 <code>body</code>의 zoom css를 사용해서 보정한다.</p>
<p>다른 부분의 자세한 내용은 <a href="https://blog.asamaru.net/2016/03/08/phantomjs-2-pagesize-format-bug/">PhantomJS 2.1.1: render PDF / pageSize format 버그 해결</a>을 참고하자.</p>
<hr />
<p>마지막으로 위 방법도 완전한 방법은 아니다. PhantomJS가 버전업 되면서 zoomFactor 버그가 해결되면 이번엔 반대로 너무 작게 출력하게되는 코드가 될 수 있다. 그런 경우을 감안한다면 지난 글에서 언급한 방법이 나을 수도 있다(실제 PDF가 A4 사이즈가 아니라는 것을 무시한다면 : 출력시에는 A4에 맞게 잘 나온다).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/08/phantomjs-2-pagesize-format-bug/</id><title type="html">PhantomJS 2.1.1: render PDF / pageSize format 버그 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/08/phantomjs-2-pagesize-format-bug/"/><published>2016-03-08T10:49:31+09:00</published><updated>2016-03-08T10:49:31+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[이번에 작업을 하면서 PhantomJS로 웹페이지를 PDF로 저장(캡춰)하는 부분을 처리하게 되었다. 기본적으로 PhantomJS는 보여지는 페이지를 render 함수를 사용해서 파일로 저장하는 기능을 기본적으로 제공한다. render에서 제공하는 포멧은 PDF, PNG, JPEG, BMP, PPM , GIF 이다. 따라서 원하는 기능을 아주 간단하게 구현할 수 있다. node.js의 설치나 PhantomJS의 설치에 관해서는 여기서 다루지 않는다. 복잡하지도 않고 검색해보면 상세히 설명되어 있는 자료도 많다. 그런데 내 Vagrant 환경에서 이상없이 동작하던 기능이 동료의 Vagrant 환경에서 이상하게 동작했다. PDF 출력시 A4 사이즈를 지정했음에도 페이지가 잘려보였던 것이다. 그래서 원인을 찾아보니 PhantomJS의 버전 문제였다. 나의 경우는 예전부터 사용하면서 구버전(1.9)이 설치되어 있었고 동료의 경우는 새로 설치하면서 최신버전(2.1.1)이 설치되었던 것이다. 이와 관련해서 찾아보니 아래와 같은 글들이 있었다. phantomjs 2 fails to render pdf properly PhantomJS 2: PDF rendering too large, page.zoomFactor doesn't work 분위기를 보면 PhantomJS가 2버전이 되면서 문제가 발생하는 것 같다. 이 글들에서 해결 방법으로 사람들이 이야기하는 것 중 그나마 효과가 있었던 것은 css로 zoom을 줘서 비율을 맞추는 것인데 이건 맘에 들지 않는다. 정확한 비율을 지정하기도 애매하고 나중에 버전이 변경되면서 어떻게 바뀔지 모르기 때문이다. 결론적으로 나의 경우는 page.paperSize에 width, height를 주는 것으로 일단 해결했다. 이것 또한 완벽한 해결이라고 보기엔 어렵지만 zoom을 사용하는 것보다는 낫다는 개인적인 생각이다. 일단 코드를 보자. 실행시 첫 번째 인자로 파일이 저장될 경로, 두 번째 인자로 대상 url이 지정된 것을 가정하고 있다. "use strict"; /*global phantom: false*/ var dest, source; var v = phantom.version; if (v.major >= 2) { var system = require('system'); dest = system.args[1]; source = system.args[2]; } else { dest = phantom.args[0]; source = phantom.args[1]; } var page = require('webpage').create(); // Web Page를 Control 하기 위한 Web Page Module 객체 생성 // fixme phantomjs 2.1.1 에서 pageSize.format A4 버그로 인해 강제로 사이즈를 지정함 var viewportSize = {width: 1024, height: 1024 * (2339/1654)}; //page.viewportSize = viewportSize; page.viewportSize = {width: 1024, height: 768}; // PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작 var pageSize = { format: 'A4', orientation: 'portrait', margin: { top: '0.5cm', bottom: '0.5cm', left: '0.5cm', right: '0.5cm' }//, //header: { // height: '1cm', // contents: phantom.callback(function () { // return '<div>PhantomJS Header, Footer 예제입니다.</div>'; // }) //}, //footer: { // height: '1cm', // contents: phantom.callback(function (pageNum, numPages) { // return '<div>' + pageNum + '/' + numPages + '</div>'; // }) //} }; if (v.major >= 2) { pageSize.width = (viewportSize.width) + 'px'; pageSize.height = (viewportSize.height) + 'px'; } page.paperSize = pageSize; page.onLoadFinished = function (status) { setTimeout(function () { page.render(dest); // 스크린 캡쳐파일 생성 console.log('Status: ' + status); phantom.exit(); }, 0); }; page.open(source, function (status) { page.evaluate(function () { // 폰트 문제로 사용가능한 폰트로 교체 var cssCode = 'html body, html body * { font-family:"바른돋움OTF" !important; }';// html { zoom: 1; } var styleElement = document.createElement("style"); styleElement.type = "text/css"; if (styleElement.styleSheet) { styleElement.styleSheet.cssText = cssCode; } else { styleElement.appendChild(document.createTextNode(cssCode)); } document.getElementsByTagName("head")[0].appendChild(styleElement); }); if (status !== 'success') { // status 인자를 통해 성공, 실패여부 확인 console.log('Cannot open webpage'); phantom.exit(); } }); 여기서 이야기하는 문제와는 상관없지만 코드에서 설명이 필요한 부분들을 하나씩 보자. var dest, source; var v = phantom.version; if (v.major >= 2) { var system = require('system'); dest = system.args[1]; source = system.args[2]; } else { dest = phantom.args[0]; source = phantom.args[1]; } 예전에는 phantom.args를 사용해서 인자를 받았지만 메뉴엘에도 설명되어 있는 것처럼 지금은 phantom.args가 제거되고 system.args을 사용한다. 그리고 중요한 부분. A4 사이즈에 대한 문제 해결 부분이다. // fixme phantomjs 2.1.1 에서 pageSize.format A4 버그로 인해 강제로 사이즈를 지정함 var viewportSize = {width: 1024, height: 1024 * (2339/1654)}; //page.viewportSize = viewportSize; page.viewportSize = {width: 1024, height: 768}; // PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작 var pageSize = { format: 'A4', orientation: 'portrait', margin: { top: '0.5cm', bottom: '0.5cm', left: '0.5cm', right: '0.5cm' } }; if (v.major >= 2) { pageSize.width = (viewportSize.width) + 'px'; pageSize.height = (viewportSize.height) + 'px'; } page.paperSize = pageSize; 여기서 중요한 것은 width와 height이다. width의 경우는 페이지를 랜더링할 width를 기준으로 주면되고 height의 경우는 A4 용지 비율에 맞게 넣어야 한다. (2339/1654)가 A4 용지의 세로 비율이다(참고 : A4PaperSize.org ). 그리고 한가지. 여기서는 페이지가 잘려나가지 않고 비율을 맞추는데 초첨을 맞춘 해결 방법이므로 완벽한 방법은 아니다. 일례로 OSX의 크롬에서는 브라우저에서 PDF를 열어 출력해도 깔끔하게 나오나 사파리에서는 50% 비율로 출력해야 정확히 나온다. 단, 브라우저가 아닌 파일 다운로드 후 출력하면 당연히 정상적으로 출력된다. 이것은 DPI 문제인 것 같으나 아직 해결하진 못했다. 기본 DPI가 72 DPI로 설정된 것으로 보인다. 이 경우 사이즈가 595px X 842px가 되므로 페이지가 잘려나가는 것이다. 하지만 페이지를 595px로 랜더링하면 웹페이지의 가로가 너무 좁으니 이렇게 사용할 수도 없다. 정확한 해결을 위해서는 zoomFactor에 DPI 비율을 넣어줘야 하는데 지금 zoomFactor가 정상적으로 적용되지를 않는다. page.evaluate(function () { // 폰트 문제로 사용가능한 폰트로 교체 var cssCode = 'html body, html body * { font-family:"바른돋움OTF" !important; }';// html { zoom: 1; } var styleElement = document.createElement("style"); styleElement.type = "text/css"; if (styleElement.styleSheet) { styleElement.styleSheet.cssText = cssCode; } else { styleElement.appendChild(document.createTextNode(cssCode)); } document.getElementsByTagName("head")[0].appendChild(styleElement); }); 사실 위 부분은 실제로는 굳이 필요하지는 않다. PhantomJS의 경우는 서버 내부에 등록된 폰트를 사용하게 되므로 서버에 있는 폰트로 맞춰준 것이다. 위 코드를 사용하지 않아도 기본 한글 폰트가 지정되어 나온다. 단, 서버에 한글 폰트가 설치된 경우에 한해서. PhantomJS에서 한글이 나오지 않는다면 폰트가 설치되지 않은 것이고 이 또한 자료가 아주 많으니 쉽게 해결할 수 있다(간단히 말하자면 CentOS 기준으로 폰트 파일을 /usr/share/fonts/에 넣으면 된다). page.onLoadFinished = function (status) { setTimeout(function () { page.render(dest); // 스크린 캡쳐파일 생성 console.log('Status: ' + status); phantom.exit(); }, 0); }; 마지막으로 한가지 page.render 처리를 setTimeout으로 씌운 것. 이 부분도 꼭 필요하지는 않으나 page.evaluate가 실행되기 전에 render되는 경우가 있어 사용한 코드다. A4 출력 문제로 이 글을 썼지만 내용을 보면 웹페이지를 PDF로 저장하는 방법에 대해서도 충분한 샘플이 포함되어 있으니 원하는 작업에 약간의 도움이라도 되었으면 하는 바람이다.]]></summary><content type="html"><![CDATA[<p>이번에 작업을 하면서 <a href="http://phantomjs.org/">PhantomJS</a>로 웹페이지를 PDF로 저장(캡춰)하는 부분을 처리하게 되었다. 기본적으로 PhantomJS는 보여지는 페이지를 <a href="http://phantomjs.org/api/webpage/method/render.html">render</a> 함수를 사용해서 파일로 저장하는 기능을 기본적으로 제공한다. <code>render</code>에서 제공하는 포멧은 PDF, PNG, JPEG, BMP, PPM
, GIF 이다. 따라서 원하는 기능을 아주 간단하게 구현할 수 있다.</p>
<blockquote>
<p><a href="https://nodejs.org/ko/">node.js</a>의 설치나 PhantomJS의 설치에 관해서는 여기서 다루지 않는다. 복잡하지도 않고 검색해보면 상세히 설명되어 있는 자료도 많다.</p>
</blockquote>
<p>그런데 내 Vagrant 환경에서 이상없이 동작하던 기능이 동료의 Vagrant 환경에서 이상하게 동작했다. PDF 출력시 A4 사이즈를 지정했음에도 페이지가 잘려보였던 것이다. 그래서 원인을 찾아보니 PhantomJS의 버전 문제였다. 나의 경우는 예전부터 사용하면서 구버전(1.9)이 설치되어 있었고 동료의 경우는 새로 설치하면서 최신버전(2.1.1)이 설치되었던 것이다.</p>
<p>이와 관련해서 찾아보니 아래와 같은 글들이 있었다.</p>
<ul>
<li><a href="https://github.com/ariya/phantomjs/issues/12936">phantomjs 2 fails to render pdf properly</a></li>
<li><a href="https://github.com/ariya/phantomjs/issues/12685">PhantomJS 2: PDF rendering too large, page.zoomFactor doesn't work</a></li>
</ul>
<p>분위기를 보면 PhantomJS가 2버전이 되면서 문제가 발생하는 것 같다. 이 글들에서 해결 방법으로 사람들이 이야기하는 것 중 그나마 효과가 있었던 것은 css로 zoom을 줘서 비율을 맞추는 것인데 이건 맘에 들지 않는다. 정확한 비율을 지정하기도 애매하고 나중에 버전이 변경되면서 어떻게 바뀔지 모르기 때문이다.</p>
<p>결론적으로 나의 경우는 <a href="http://phantomjs.org/api/webpage/property/paper-size.html">page.paperSize</a>에 width, height를 주는 것으로 일단 해결했다. 이것 또한 완벽한 해결이라고 보기엔 어렵지만 zoom을 사용하는 것보다는 낫다는 개인적인 생각이다.</p>
<p>일단 코드를 보자. 실행시 첫 번째 인자로 파일이 저장될 경로, 두 번째 인자로 대상 url이 지정된 것을 가정하고 있다.</p>
<pre class="hljs javascript"><span class="hljs-meta">"use strict"</span>;
<span class="hljs-comment">/*global phantom: false*/</span>

<span class="hljs-keyword">var</span> dest, source;
<span class="hljs-keyword">var</span> v = phantom.version;
<span class="hljs-keyword">if</span> (v.major &gt;= <span class="hljs-number">2</span>) {
    <span class="hljs-keyword">var</span> system = <span class="hljs-built_in">require</span>(<span class="hljs-string">'system'</span>);
    dest = system.args[<span class="hljs-number">1</span>];
    source = system.args[<span class="hljs-number">2</span>];
} <span class="hljs-keyword">else</span> {
    dest = phantom.args[<span class="hljs-number">0</span>];
    source = phantom.args[<span class="hljs-number">1</span>];
}

<span class="hljs-keyword">var</span> page = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpage'</span>).create(); <span class="hljs-comment">// Web Page를 Control 하기 위한 Web Page Module 객체 생성</span>
<span class="hljs-comment">// fixme phantomjs 2.1.1 에서 pageSize.format A4 버그로 인해 강제로 사이즈를 지정함</span>
<span class="hljs-keyword">var</span> viewportSize = {<span class="hljs-attr">width</span>: <span class="hljs-number">1024</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">1024</span> * (<span class="hljs-number">2339</span>/<span class="hljs-number">1654</span>)};
<span class="hljs-comment">//page.viewportSize = viewportSize;</span>
page.viewportSize = {<span class="hljs-attr">width</span>: <span class="hljs-number">1024</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">768</span>}; <span class="hljs-comment">// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작</span>

<span class="hljs-keyword">var</span> pageSize = {
    <span class="hljs-attr">format</span>: <span class="hljs-string">'A4'</span>,
    <span class="hljs-attr">orientation</span>: <span class="hljs-string">'portrait'</span>,
    <span class="hljs-attr">margin</span>: {
        <span class="hljs-attr">top</span>: <span class="hljs-string">'0.5cm'</span>,
        <span class="hljs-attr">bottom</span>: <span class="hljs-string">'0.5cm'</span>,
        <span class="hljs-attr">left</span>: <span class="hljs-string">'0.5cm'</span>,
        <span class="hljs-attr">right</span>: <span class="hljs-string">'0.5cm'</span>
    }<span class="hljs-comment">//,</span>
    <span class="hljs-comment">//header: {</span>
    <span class="hljs-comment">//  height: '1cm',</span>
    <span class="hljs-comment">//  contents: phantom.callback(function () {</span>
    <span class="hljs-comment">//      return '&lt;div&gt;PhantomJS Header, Footer 예제입니다.&lt;/div&gt;';</span>
    <span class="hljs-comment">//  })</span>
    <span class="hljs-comment">//},</span>
    <span class="hljs-comment">//footer: {</span>
    <span class="hljs-comment">//  height: '1cm',</span>
    <span class="hljs-comment">//  contents: phantom.callback(function (pageNum, numPages) {</span>
    <span class="hljs-comment">//      return '&lt;div&gt;' + pageNum + '/' + numPages + '&lt;/div&gt;';</span>
    <span class="hljs-comment">//  })</span>
    <span class="hljs-comment">//}</span>
};
<span class="hljs-keyword">if</span> (v.major &gt;= <span class="hljs-number">2</span>) {
    pageSize.width = (viewportSize.width) + <span class="hljs-string">'px'</span>;
    pageSize.height = (viewportSize.height) + <span class="hljs-string">'px'</span>;
}
page.paperSize = pageSize;

page.onLoadFinished = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) </span>{
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        page.render(dest);    <span class="hljs-comment">// 스크린 캡쳐파일 생성</span>
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Status: '</span> + status);
        phantom.exit();
    }, <span class="hljs-number">0</span>);
};

page.open(source, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) </span>{
    page.evaluate(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        <span class="hljs-comment">// 폰트 문제로 사용가능한 폰트로 교체</span>
        <span class="hljs-keyword">var</span> cssCode = <span class="hljs-string">'html body, html body * { font-family:"바른돋움OTF" !important; }'</span>;<span class="hljs-comment">// html { zoom: 1; }</span>
        <span class="hljs-keyword">var</span> styleElement = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"style"</span>);
        styleElement.type = <span class="hljs-string">"text/css"</span>;
        <span class="hljs-keyword">if</span> (styleElement.styleSheet) {
            styleElement.styleSheet.cssText = cssCode;
        } <span class="hljs-keyword">else</span> {
            styleElement.appendChild(<span class="hljs-built_in">document</span>.createTextNode(cssCode));
        }
        <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">"head"</span>)[<span class="hljs-number">0</span>].appendChild(styleElement);
    });

    <span class="hljs-keyword">if</span> (status !== <span class="hljs-string">'success'</span>) { <span class="hljs-comment">// status 인자를 통해 성공, 실패여부 확인</span>
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Cannot open webpage'</span>);
        phantom.exit();
    }
});</pre>
<p>여기서 이야기하는 문제와는 상관없지만 코드에서 설명이 필요한 부분들을 하나씩 보자.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> dest, source;
<span class="hljs-keyword">var</span> v = phantom.version;
<span class="hljs-keyword">if</span> (v.major &gt;= <span class="hljs-number">2</span>) {
    <span class="hljs-keyword">var</span> system = <span class="hljs-built_in">require</span>(<span class="hljs-string">'system'</span>);
    dest = system.args[<span class="hljs-number">1</span>];
    source = system.args[<span class="hljs-number">2</span>];
} <span class="hljs-keyword">else</span> {
    dest = phantom.args[<span class="hljs-number">0</span>];
    source = phantom.args[<span class="hljs-number">1</span>];
}</pre>
<p>예전에는 <a href="http://phantomjs.org/api/phantom/property/args.html">phantom.args</a>를 사용해서 인자를 받았지만 메뉴엘에도 설명되어 있는 것처럼 지금은 phantom.args가 제거되고 system.args을 사용한다.</p>
<p>그리고 중요한 부분. A4 사이즈에 대한 문제 해결 부분이다.</p>
<pre class="hljs javascript"><span class="hljs-comment">// fixme phantomjs 2.1.1 에서 pageSize.format A4 버그로 인해 강제로 사이즈를 지정함</span>
<span class="hljs-keyword">var</span> viewportSize = {<span class="hljs-attr">width</span>: <span class="hljs-number">1024</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">1024</span> * (<span class="hljs-number">2339</span>/<span class="hljs-number">1654</span>)};
<span class="hljs-comment">//page.viewportSize = viewportSize;</span>
page.viewportSize = {<span class="hljs-attr">width</span>: <span class="hljs-number">1024</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">768</span>}; <span class="hljs-comment">// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작</span>

<span class="hljs-keyword">var</span> pageSize = {
    <span class="hljs-attr">format</span>: <span class="hljs-string">'A4'</span>,
    <span class="hljs-attr">orientation</span>: <span class="hljs-string">'portrait'</span>,
    <span class="hljs-attr">margin</span>: {
        <span class="hljs-attr">top</span>: <span class="hljs-string">'0.5cm'</span>,
        <span class="hljs-attr">bottom</span>: <span class="hljs-string">'0.5cm'</span>,
        <span class="hljs-attr">left</span>: <span class="hljs-string">'0.5cm'</span>,
        <span class="hljs-attr">right</span>: <span class="hljs-string">'0.5cm'</span>
    }
};
<span class="hljs-keyword">if</span> (v.major &gt;= <span class="hljs-number">2</span>) {
    pageSize.width = (viewportSize.width) + <span class="hljs-string">'px'</span>;
    pageSize.height = (viewportSize.height) + <span class="hljs-string">'px'</span>;
}
page.paperSize = pageSize;</pre>
<p>여기서 중요한 것은 width와 height이다. width의 경우는 페이지를 랜더링할 width를 기준으로 주면되고 height의 경우는 A4 용지 비율에 맞게 넣어야 한다. <code>(2339/1654)</code>가 A4 용지의 세로 비율이다(참고 : <a href="http://www.a4papersize.org/a4-paper-size-in-pixels.php">A4PaperSize.org
</a>).</p>
<p>그리고 한가지. 여기서는 페이지가 잘려나가지 않고 비율을 맞추는데 초첨을 맞춘 해결 방법이므로 완벽한 방법은 아니다. 일례로 OSX의 크롬에서는 브라우저에서 PDF를 열어 출력해도 깔끔하게 나오나 사파리에서는 50% 비율로 출력해야 정확히 나온다. 단, 브라우저가 아닌 파일 다운로드 후 출력하면 당연히 정상적으로 출력된다.
이것은 DPI 문제인 것 같으나 아직 해결하진 못했다. 기본 DPI가 72 DPI로 설정된 것으로 보인다. 이 경우 사이즈가 595px X 842px가 되므로 페이지가 잘려나가는 것이다. 하지만 페이지를 595px로 랜더링하면 웹페이지의 가로가 너무 좁으니 이렇게 사용할 수도 없다.</p>
<p>정확한 해결을 위해서는 <a href="http://phantomjs.org/api/webpage/property/zoom-factor.html">zoomFactor</a>에 DPI 비율을 넣어줘야 하는데 지금 zoomFactor가 정상적으로 적용되지를 않는다.</p>
<pre class="hljs javascript">page.evaluate(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
  <span class="hljs-comment">// 폰트 문제로 사용가능한 폰트로 교체</span>
  <span class="hljs-keyword">var</span> cssCode = <span class="hljs-string">'html body, html body * { font-family:"바른돋움OTF" !important; }'</span>;<span class="hljs-comment">// html { zoom: 1; }</span>
  <span class="hljs-keyword">var</span> styleElement = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"style"</span>);
  styleElement.type = <span class="hljs-string">"text/css"</span>;
  <span class="hljs-keyword">if</span> (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = cssCode;
  } <span class="hljs-keyword">else</span> {
    styleElement.appendChild(<span class="hljs-built_in">document</span>.createTextNode(cssCode));
  }
  <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">"head"</span>)[<span class="hljs-number">0</span>].appendChild(styleElement);
});</pre>
<p>사실 위 부분은 실제로는 굳이 필요하지는 않다. PhantomJS의 경우는 서버 내부에 등록된 폰트를 사용하게 되므로 서버에 있는 폰트로 맞춰준 것이다. 위 코드를 사용하지 않아도 기본 한글 폰트가 지정되어 나온다. 단, 서버에 한글 폰트가 설치된 경우에 한해서. PhantomJS에서 한글이 나오지 않는다면 폰트가 설치되지 않은 것이고 이 또한 자료가 아주 많으니 쉽게 해결할 수 있다(간단히 말하자면 CentOS 기준으로 폰트 파일을 <code>/usr/share/fonts/</code>에 넣으면 된다).</p>
<pre class="hljs javascript">page.onLoadFinished = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) </span>{
    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        page.render(dest);    <span class="hljs-comment">// 스크린 캡쳐파일 생성</span>
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Status: '</span> + status);
        phantom.exit();
    }, <span class="hljs-number">0</span>);
};</pre>
<p>마지막으로 한가지 <code>page.render</code> 처리를 setTimeout으로 씌운 것. 이 부분도 꼭 필요하지는 않으나 <a href="http://phantomjs.org/api/webpage/method/evaluate-java-script.html">page.evaluate</a>가 실행되기 전에 render되는 경우가 있어 사용한 코드다.</p>
<hr />
<p>A4 출력 문제로 이 글을 썼지만 내용을 보면 웹페이지를 PDF로 저장하는 방법에 대해서도 충분한 샘플이 포함되어 있으니 원하는 작업에 약간의 도움이라도 되었으면 하는 바람이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/07/git-socks5-proxy/</id><title type="html">ssh proxy를 이용한 git 사용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/07/git-socks5-proxy/"/><published>2016-03-07T20:28:24+09:00</published><updated>2016-03-07T20:28:24+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="git" label="git" /><summary><![CDATA[앞서 CentOS에 gogs 설치하기, CentOS에 Gitlab 설치하기, 자체 설치한 gitlab-ce에서 gitlab.com으로 이전하다에서 언급했던 것처럼 git 저장소로 gitlab.com을 사용중이다. 한동안은 아무 문제없이 잘 사용하고 있었다. 아니 사실 gitlab.com에 접속이 되지 않는 문제가 간헐적으로 발생했었다. 얼마전까지만 하더라도 해외 서비스에서 서비스되는 사이트라서 그런가보다 했다. 그런데 몇일 전부터 회사 네트워크에서 gitlab.com에 접속할 수 없었다. 웹사이트뿐 아니라 git push/pull도 할 수가 없었다. 처음엔 회사 네트워크 방화벽 문제인 줄 알고 확인했으나 아니었다. 그래서 tracepath로 확인해 보니 SK Broadband 네트워크를 벗어나지 못하고 있었다(회사 네트워크가 SK다). 이상해서 조금 검색해보니 예전부터 SK Broadband의 해외 사이트 접속 문제가 유명했던 것 같다. 사람들의 이야기를 봐도 SK에 이야기한다고 해결될 문제는 아닌 것 같고... 그렇다고 git를 사용하지 않을 수 없어서 다른 방법을 찾아야 했다. 다행히 회사엔 외부망(SK가 아닌)에 연결된 Proxy가 하나 있다. 그래서 그 Proxy를 사용해서 급한대로 gitlab.com에 push/pull 하고 있다. 조금 더 기다려볼 생각이지만 빠른 시일 내에 접속이 복구되지 않는다면 다시 설치형 gitlab을 검토해야 할 것 같다. 본론으로 들어가서 위의 이유로 인해 사용하게된 ssh proxy에 대한 처리 방법을 설명하려고 한다. 이번에 필요에 의해 적용한 환경은 CentOS 7과 OSX 10.11 이다. CentOS 7 ~/.ssh/config 파일에 아래의 내용을 추가 한다. Host gitlab.com User git ProxyCommand socat STDIO SOCKS4:[proxy ip]:%h:%p,socksport=[proxy port] 여기서 중요한 부분. socat이 설치되어 있어야 한다. 설치되어 있지 않다면 간단히 yum install socat을 통해 설치할 수 있다. 그리고 SOCKS4는 Proxy의 프로토콜에 따라 변경되어야 한다. 사실 내가 사용한 Proxy는 SOCKS5를 사용하는데 SOCKS5를 지정하면 오류가 나고 SOCKS4를 지정해야만 정상 동작했다. 기타 프로토콜의 경우는 socat를 참고. 위 처리를 하고나면 "gitlab.com" 도메인에 대해서는 ssh 접속시 지정한 Proxy를 사용한다. 따라서 git 명령을 사용하면 Proxy를 통해서 데이터가 전달된다. 단, ssh를 사용해서 git remote가 연결된 경우에. OSX OSX 또한 ~/.ssh/config 파일에 아래의 내용을 추가 한다. Host gitlab.com User git ProxyCommand nc -X 5 -x [proxy ip]:[proxy port] %h %p OSX도 CentOS와 방법은 동일하나 socat 대신 nc(netcat)를 사용하고 있다. nc가 기본적으로 설치되어 있어서 그냥 nc를 사용했다. 어짜피 원리는 같다. nc의 경우는 -X 뒤에 있는 5가 Proxy 프로토콜을 뜻한다. -X proxy_version Requests that nc should use the specified protocol when talking to the proxy server. Supported protocols are "4" (SOCKS v.4), "5" (SOCKS v.5) and "connect" (HTTPS proxy). If the protocol is not specified, SOCKS version 5 is used. PHPStorm 덤으로 PHPStorm과 같은 IntelliJ IDE에서의 설정을 설명한다. 기본적으로 IntelliJ는 Git의 ssh 클라이언트를 Built-in을 사용한다. 이 설정을 Native로 바꿔주면 위에서 설정한 ~/.ssh/config 파일의 설정을 그대로 적용시킬 수 있다. 메뉴의 위치는 "Preference > Version Control > Git"에서 "SSH executable"를 찾으면 된다. 위 방법은 ssh의 설정을 이용한 방법이지만 git의 설정한 방법도 있다. 개인적으로 git에 설정하는게 더 복잡해서 그냥 ssh에 설정하는 것을 선택했을 뿐이다. 참고글 Tutorial: how to use git through a proxy Using git through a SOCKS proxy (or SSH tunnel)]]></summary><content type="html"><![CDATA[<p>앞서 <a href="https://blog.asamaru.net/2015/09/21/how-to-install-gogs-on-centos/">CentOS에 gogs 설치하기</a>,
<a href="https://blog.asamaru.net/2015/09/22/how-to-install-gitlib-on-centos/">CentOS에 Gitlab 설치하기</a>, <a href="https://blog.asamaru.net/2015/10/12/gitlab-ce-to-gitlab-dot-com/">자체 설치한 gitlab-ce에서 gitlab.com으로 이전하다</a>에서 언급했던 것처럼 git 저장소로 <a href="https://gitlab.com/">gitlab.com</a>을 사용중이다. 한동안은 아무 문제없이 잘 사용하고 있었다. 아니 사실 gitlab.com에 접속이 되지 않는 문제가 간헐적으로 발생했었다. 얼마전까지만 하더라도 해외 서비스에서 서비스되는 사이트라서 그런가보다 했다.</p>
<p>그런데 몇일 전부터 회사 네트워크에서 <a href="https://gitlab.com/">gitlab.com</a>에 접속할 수 없었다. 웹사이트뿐 아니라 git push/pull도 할 수가 없었다. 처음엔 회사 네트워크 방화벽 문제인 줄 알고 확인했으나 아니었다. 그래서 tracepath로 확인해 보니 SK Broadband 네트워크를 벗어나지 못하고 있었다(회사 네트워크가 SK다). 이상해서 조금 검색해보니 예전부터 SK Broadband의 해외 사이트 접속 문제가 유명했던 것 같다. 사람들의 이야기를 봐도 SK에 이야기한다고 해결될 문제는 아닌 것 같고... 그렇다고 git를 사용하지 않을 수 없어서 다른 방법을 찾아야 했다.</p>
<p>다행히 회사엔 외부망(SK가 아닌)에 연결된 Proxy가 하나 있다. 그래서 그 Proxy를 사용해서 급한대로 gitlab.com에 push/pull 하고 있다. 조금 더 기다려볼 생각이지만 빠른 시일 내에 접속이 복구되지 않는다면 다시 설치형 gitlab을 검토해야 할 것 같다.</p>
<hr />
<p>본론으로 들어가서 위의 이유로 인해 사용하게된 ssh proxy에 대한 처리 방법을 설명하려고 한다. 이번에 필요에 의해 적용한 환경은 CentOS 7과 OSX 10.11 이다.</p>
<p><strong>CentOS 7</strong></p>
<p><code>~/.ssh/config</code> 파일에 아래의 내용을 추가 한다.</p>
<pre><code>Host gitlab.com
    User                    git
    ProxyCommand            socat STDIO SOCKS4:[proxy ip]:%h:%p,socksport=[proxy port]</code></pre>
<p>여기서 중요한 부분. <code>socat</code>이 설치되어 있어야 한다. 설치되어 있지 않다면 간단히 <code>yum install socat</code>을 통해 설치할 수 있다.</p>
<p>그리고 <code>SOCKS4</code>는 Proxy의 프로토콜에 따라 변경되어야 한다. 사실 내가 사용한 Proxy는 <code>SOCKS5</code>를 사용하는데 <code>SOCKS5</code>를 지정하면 오류가 나고 <code>SOCKS4</code>를 지정해야만 정상 동작했다. 기타 프로토콜의 경우는 <a href="http://www.dest-unreach.org/socat/">socat</a>를 참고.</p>
<p>위 처리를 하고나면 &quot;gitlab.com&quot; 도메인에 대해서는 ssh 접속시 지정한 Proxy를 사용한다. 따라서 git 명령을 사용하면 Proxy를 통해서 데이터가 전달된다. 단, ssh를 사용해서 git remote가 연결된 경우에.</p>
<p><strong>OSX</strong></p>
<p>OSX 또한 <code>~/.ssh/config</code> 파일에 아래의 내용을 추가 한다.</p>
<pre><code>Host gitlab.com
    User                    git
    ProxyCommand            nc -X 5 -x [proxy ip]:[proxy port] %h %p</code></pre>
<p>OSX도 CentOS와 방법은 동일하나 socat 대신 nc(<a href="http://netcat.sourceforge.net/">netcat</a>)를 사용하고 있다. nc가 기본적으로 설치되어 있어서 그냥 nc를 사용했다. 어짜피 원리는 같다.
nc의 경우는 -X 뒤에 있는 5가 Proxy 프로토콜을 뜻한다.</p>
<blockquote>
<p>-X proxy_version
Requests that nc should use the specified protocol when talking to the proxy server.  Supported protocols are &quot;4&quot; (SOCKS v.4), &quot;5&quot;
(SOCKS v.5) and &quot;connect&quot; (HTTPS proxy).  If the protocol is not specified, SOCKS version 5 is used.</p>
</blockquote>
<p><strong>PHPStorm</strong></p>
<p>덤으로 PHPStorm과 같은 IntelliJ IDE에서의 설정을 설명한다. 기본적으로 IntelliJ는 Git의 ssh 클라이언트를 Built-in을 사용한다. 이 설정을 Native로 바꿔주면 위에서 설정한 <code>~/.ssh/config</code> 파일의 설정을 그대로 적용시킬 수 있다. 메뉴의 위치는 &quot;Preference &gt; Version Control &gt; Git&quot;에서 &quot;SSH executable&quot;를 찾으면 된다.</p>
<hr />
<p>위 방법은 ssh의 설정을 이용한 방법이지만 git의 설정한 방법도 있다. 개인적으로 git에 설정하는게 더 복잡해서 그냥 ssh에 설정하는 것을 선택했을 뿐이다.</p>
<p><strong>참고글</strong></p>
<ul>
<li><a href="http://cms-sw.github.io/tutorial-proxy.html">Tutorial: how to use git through a proxy</a></li>
<li><a href="http://www.jones.ec/blogs/a/entry/using_git_through_a_socks/">Using git through a SOCKS proxy (or SSH tunnel)</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/03/03/php-password-hash-and-bcrypt/</id><title type="html">PHP password_hash()와 BCrypt</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/03/03/php-password-hash-and-bcrypt/"/><published>2016-03-03T21:18:01+09:00</published><updated>2016-03-03T21:18:01+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Naver D2에 안전한 패스워드 저장이란 글을 보면 비밀번호 저장을 위한 해시 함수에 대한 소개를 하고 있다. 그 중에서 bcrypt에 대해서는 아래와 같이 설명하고 있다. bcrypt bcrypt는 애초부터 패스워드 저장을 목적으로 설계되었다. Niels Provos와 David Mazières가 1999년 발표했고 현재까지 사용되는 가장 강력한 해시 메커니즘 중 하나이다. bcrypt는 보안에 집착하기로 유명한 OpenBSD에서 기본 암호 인증 메커니즘으로 사용되고 있고 미래에 PBKDF2보다 더 경쟁력이 있다고 여겨진다. 실제로 PHP의 password_hash()는 암호화 알고리즘으로 bcrypt를 기본으로 사용하고 있다. 하지만 이는 현재 시점 기준이다. 메뉴얼에 따르면 향후 PHP에서 보다 강력한 알고리즘이 추가되면 변경된다고 한다(PASSWORD_DEFAULT 알고리즘 사용시, PASSWORD_BCRYPT 옵션을 사용해서 강제로 지정하는 것도 가능하다). 이 시점에서 한가지만 짚고 넘어가자. "PASSWORD_DEFAULT 사용시 향후 알고리즘이 변경될 수 있는데 그렇다면 기존 데이터는 어떻게 해야하나?" 당연히 단방향 해시 알고리즘이므로 원래 값으로 복구할 수 없으므로 새로운 알고리즘으로 해시값을 만들 수 없다. 그렇다면 위의 의문처럼 기존 데이터와의 호환은 어떻게 되는가? 사실 걱정할 것은 없다. password_hash()로 만들어진 해시값은 password_verify()를 사용해서 검증하게 되는데 password_verify()가 위 문제를 모두 해결해 준다. 그럼 password_verify()는 어떻게 이문제를 해결하는가? 이 부분을 이해하고나면 php에서 만들어진 해시값을 다른 언어(플랫폼)에서 검증하는 것도 가능하다는 것을 알 수 있다. Determining the salt from a password_hash()에 설명된 내용 중 아래에 발췌한 내용이 그 답을 가지고 있다. $2y$10$nOUIs5kJ7naTuTFkBy1veuK0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa | | | | | | | hash-value = K0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa | | | | | salt = nOUIs5kJ7naTuTFkBy1veu (22 characters) | | | cost-factor = 10 = 2^10 iterations | hash-algorithm = 2y = BCrypt password_verify()에서 만들어진 해시값은 위의 설명과 같이 구성되므로 검증에 필요한 모든 정보를 가지고 있다는 것을 알 수 있다. 따라서 특별한 이유가 없다면 PASSWORD_DEFAULT 옵션을 사용하는 것이 바람직하다는 생각이다. password_hash()에 관련된 몇가지 추가적 안내가 있다. 이 함수는 php 5.5 이상에서만 사용할 수 있다. 그렇다면 이하 버전에서는 어떻게 할까? 당연히 해결방법은 있다. 친절하게도 ircmaxell/password_compat에 호환 라이브러리가 있다. scrypt 알고리즘이 훨씬 더 강력하다고 알려져 있으나 아직 PHP에서 공식적으로 지원하지 않고 있다. 단, PECL::scrypt, DomBlack/php-scrypt를 사용할 수 있다. 참조하면 도움이 될만한 글들을 아래에 소개한다. PHP password_hash() salt option has been deprecated PHP에서의 더 안전한 암호 구축 : Bycrpt를 이용한 안전한 패스워드 저장 bcrypt를 이용한 PHP기반 서비스의 비밀번호 암호화 비밀번호 암호화의 정석]]></summary><content type="html"><![CDATA[<p>Naver D2에 <a href="http://d2.naver.com/helloworld/318732">안전한 패스워드 저장</a>이란 글을 보면 비밀번호 저장을 위한 해시 함수에 대한 소개를 하고 있다. 그 중에서 bcrypt에 대해서는 아래와 같이 설명하고 있다.</p>
<blockquote>
<p><strong>bcrypt</strong></p>
<p>bcrypt는 애초부터 패스워드 저장을 목적으로 설계되었다. Niels Provos와 David Mazières가 1999년 발표했고 현재까지 사용되는 가장 강력한 해시 메커니즘 중 하나이다. bcrypt는 보안에 집착하기로 유명한 OpenBSD에서 기본 암호 인증 메커니즘으로 사용되고 있고 미래에 PBKDF2보다 더 경쟁력이 있다고 여겨진다.</p>
</blockquote>
<p>실제로 PHP의 <a href="http://php.net/manual/kr/function.password-hash.php">password_hash()</a>는 암호화 알고리즘으로 bcrypt를 기본으로 사용하고 있다. 하지만 이는 현재 시점 기준이다. 메뉴얼에 따르면 향후 PHP에서 보다 강력한 알고리즘이 추가되면 변경된다고 한다(<code>PASSWORD_DEFAULT</code> 알고리즘 사용시, <code>PASSWORD_BCRYPT</code> 옵션을 사용해서 강제로 지정하는 것도 가능하다).</p>
<p>이 시점에서 한가지만 짚고 넘어가자.</p>
<p>&quot;<code>PASSWORD_DEFAULT</code> 사용시 향후 알고리즘이 변경될 수 있는데 그렇다면 기존 데이터는 어떻게 해야하나?&quot;</p>
<p>당연히 단방향 해시 알고리즘이므로 원래 값으로 복구할 수 없으므로 새로운 알고리즘으로 해시값을 만들 수 없다. 그렇다면 위의 의문처럼 기존 데이터와의 호환은 어떻게 되는가? 사실 걱정할 것은 없다. <a href="http://php.net/manual/kr/function.password-hash.php">password_hash()</a>로 만들어진 해시값은  <a href="http://php.net/manual/kr/function.password-verify.php">password_verify()</a>를 사용해서 검증하게 되는데 <a href="http://php.net/manual/kr/function.password-verify.php">password_verify()</a>가 위 문제를 모두 해결해 준다.</p>
<p>그럼 <a href="http://php.net/manual/kr/function.password-verify.php">password_verify()</a>는 어떻게 이문제를 해결하는가? 이 부분을 이해하고나면 php에서 만들어진 해시값을 다른 언어(플랫폼)에서 검증하는 것도 가능하다는 것을 알 수 있다.</p>
<p><a href="http://stackoverflow.com/a/20927202">Determining the salt from a password_hash()</a>에 설명된 내용 중 아래에 발췌한 내용이 그 답을 가지고 있다.</p>
<pre><code>$2y$10$nOUIs5kJ7naTuTFkBy1veuK0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa
 |  |  |                     |
 |  |  |                     hash-value = K0kSxUFXfuaOKdOKf9xYT0KKIGSJwFa
 |  |  |
 |  |  salt = nOUIs5kJ7naTuTFkBy1veu (22 characters)
 |  |
 |  cost-factor = 10 = 2^10 iterations
 |
 hash-algorithm = 2y = BCrypt</code></pre>
<p><a href="http://php.net/manual/kr/function.password-verify.php">password_verify()</a>에서 만들어진 해시값은 위의 설명과 같이 구성되므로 검증에 필요한 모든 정보를 가지고 있다는 것을 알 수 있다.</p>
<p>따라서 특별한 이유가 없다면 <code>PASSWORD_DEFAULT</code> 옵션을 사용하는 것이 바람직하다는 생각이다.</p>
<hr />
<p><a href="http://php.net/manual/kr/function.password-hash.php">password_hash()</a>에 관련된 몇가지 추가적 안내가 있다.</p>
<ul>
<li>이 함수는 php 5.5 이상에서만 사용할 수 있다. 그렇다면 이하 버전에서는 어떻게 할까? 당연히 해결방법은 있다. 친절하게도 <a href="https://github.com/ircmaxell/password_compat">ircmaxell/password_compat</a>에 호환 라이브러리가 있다.</li>
<li>scrypt 알고리즘이 훨씬 더 강력하다고 알려져 있으나 아직 PHP에서 공식적으로 지원하지 않고 있다. 단, <a href="https://pecl.php.net/package/scrypt">PECL::scrypt</a>, <a href="https://github.com/DomBlack/php-scrypt">DomBlack/php-scrypt</a>를 사용할 수 있다.</li>
</ul>
<hr />
<p>참조하면 도움이 될만한 글들을 아래에 소개한다.</p>
<ul>
<li><a href="https://blog.asamaru.net/2016/02/24/php-password-hash-salt-option-has-been-deprecated/">PHP password_hash() salt option has been deprecated</a></li>
<li><a href="http://www.hanbit.co.kr/network/view.html?bi_id=1960">PHP에서의 더 안전한 암호 구축 : Bycrpt를 이용한 안전한 패스워드 저장</a></li>
<li><a href="https://hiun.github.io/2013/08/bcrypt.html">bcrypt를 이용한 PHP기반 서비스의 비밀번호 암호화</a></li>
<li><a href="http://www.phpschool.com/gnuboard4/bbs/board.php?bo_table=tipntech&amp;wr_id=78316">비밀번호 암호화의 정석</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/02/24/php-password-hash-salt-option-has-been-deprecated/</id><title type="html">PHP password_hash() salt option has been deprecated</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/02/24/php-password-hash-salt-option-has-been-deprecated/"/><published>2016-02-24T20:19:32+09:00</published><updated>2016-02-24T20:19:32+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[php에서 비밀번호를 암호화해서 저장하기 위해서 password_hash()를 사용하고 있다. 다른 곳에서도 오래전에는 MD5, SHA1과 같은 hash 함수를 사용하는 경우들도 있었지만 요즘은 대부분 password_hash()을 사용하고 있을 것이라고 생각한다. 이번에 사용중이던 PHP를 7버전으로 버전업하려고 Vagrant에서 먼저 테스트 중이다. 이야기하려는 주제와는 맞지 않지만 PHP 7을 사용하는 것은 필수적인 선택이라고 생각한다. 실제로 테스트 해보니 실행 성능이 향상되며 메모리 사용량도 40% 가량 줄었다. 이 부분은 상황에 따라 다른 결과를 가져올 수 있으나 확실한 것은 성능의 향상이 기대 이상이라는 것이다. 게다가 PHP는 버전업시에 하위 호환에 대해 보수적이라 PHP 7로 버전업하더라도 심각한 호환성 문제를 일으키는 경우는 거의 없을 것으로 생각된다. 다시 본론으로 돌아와서 password_hash()를 보면 PHP 7로 버전업되면서 변경 사항이 있다. 그중 하나가 "salt" 옵션이 Deprecated 되었다는 것이다. Warning : The salt option has been deprecated as of PHP 7.0.0. It is now preferred to simply use the salt that is generated by default. 이와 관련해서 사용중이던 코드는 아래와 같다. public function encryptPassword($str) { return password_hash($str, PASSWORD_BCRYPT, ["salt" => "abcdefghijklmnopqrstuvwxyz"]); } 이 함수를 PHP 7에서 실행하면 아래와 같은 오류를 만나게 된다. PHP Deprecated: password_hash(): Use of the 'salt' option to password_hash is deprecated 그럼 이 문제를 해결하려면 어떻게 할까? 아래의 함수를 보자. function password_hash_compat($str, $salt) { $salt = base64_encode($salt); if (strlen($salt) < 22) { return false; } $salt = str_replace('+', '.', $salt); return crypt($str, '$2y$10$'.$salt.'$'); } PHP 7에서 password_hash()와 동일한 동작을 하도록 만들어진 함수다. 다만, BCrypt에 한정되며 cost 등의 옵션을 사용할 수 없지만 샘플로 제시한 코드와는 동일한 결과를 반환한다. 주의할 것은 salt의 길이가 22자 이상이어야 한다는 것(실제값이 아니라 base64_encode된 문자열의 길이가 22자 이상). 이 함수가 맘에 들지 않는다면 ircmaxell/password_compat을 사용할 수 있다. 단, 이 라이브러리는 password_hash()가 지원되지 않는 구버전 PHP를 위한 함수로 PHP 7에서 동작하게 하려면 약간의 수정이 필요하다. 하지만 소스를 볼 수 있으니 내부 동작 원리를 파악할 수 있으므로 유용하다. 그런데 Deprecated 된 옵션을 굳이 compat 함수를 만들어가면서까지 유지 해야할 이유가 뭘까? 항상 동일한 hash를 얻어야 하는 것이 아니라면 굳이 필요가 없다. 비밀번호의 경우는 항상 동일한 hash를 만들어 비교하는 것이 목적이 아니라 비밀번호가 같은지만 비교하면 되기 때문에 동일한 hash는 필요치 않다. 다시 이야기하자면 나의 경우는 맨 처음 적었던 코드를 사용했던 이유는 password_hash()를 제대로 이해하지 못했기 때문이다. "salt를 넣지 않으면 생성시마다 다른 hash를 반환하니 추후에 다른 환경(언어)에서 해당 값을 비교할 수 없는 것이 아닌가?" 하는 걱정 때문에 salt를 사용했던 것이다. 이 부분이 착각이었던 것이다. password_hash()와 짝을 이루는 password_verify()에서는 salt 값이 필요하지 않다. 그렇다면 어떻게 검증을 하는 것일까? password_hash()의 결과에 이미 salt 값이 포함되어 있기 때문에 salt를 따로 넣어줄 필요가 없는 것이다. 이와 관련된 자세한 정보는 "PHP password_hash()와 BCrypt"에 따로 남긴다. 결론은 나와 같은 착각을 하고 있는 것이라면 걱정을 뒤로하고 그냥 "salt" 옵션을 사용하지 않도록 변경함으로써 모든 문제는 해결된다. 다만, 다른 이유로 hash가 항상 동일한 값이 필요한 상황이라면 앞서 제시안 대안들을 검토하길 바란다. 비밀번호의 hash가 같은 것은 보안상으로도 좋지않고 다른 값의 hash로 사용하는 것이라면 SHA1 등을 사용하는 것이 맞을테니 대부분의 경우에 나와 같은 착각에서 이 문제를 고민하고 있을 것 같다.]]></summary><content type="html"><![CDATA[<p>php에서 비밀번호를 암호화해서 저장하기 위해서 <a href="http://php.net/manual/kr/function.password-hash.php">password_hash()</a>를 사용하고 있다. 다른 곳에서도 오래전에는 MD5, SHA1과 같은 hash 함수를 사용하는 경우들도 있었지만 요즘은 대부분 <code>password_hash()</code>을 사용하고 있을 것이라고 생각한다.</p>
<p>이번에 사용중이던 PHP를 7버전으로 버전업하려고 Vagrant에서 먼저 테스트 중이다. 이야기하려는 주제와는 맞지 않지만 PHP 7을 사용하는 것은 필수적인 선택이라고 생각한다. 실제로 테스트 해보니 실행 성능이 향상되며 메모리 사용량도 40% 가량 줄었다. 이 부분은 상황에 따라 다른 결과를 가져올 수 있으나 확실한 것은 성능의 향상이 기대 이상이라는 것이다. 게다가 PHP는 버전업시에 하위 호환에 대해 보수적이라 PHP 7로 버전업하더라도 심각한 호환성 문제를 일으키는 경우는 거의 없을 것으로 생각된다.</p>
<p>다시 본론으로 돌아와서 <code>password_hash()</code>를 보면 PHP 7로 버전업되면서 변경 사항이 있다. 그중 하나가 &quot;salt&quot; 옵션이 Deprecated 되었다는 것이다.</p>
<blockquote>
<p>Warning : The salt option has been deprecated as of PHP 7.0.0. It is now preferred to simply use the salt that is generated by default.</p>
</blockquote>
<p>이와 관련해서 사용중이던 코드는 아래와 같다.</p>
<pre class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryptPassword</span><span class="hljs-params">($str)</span>
</span>{
    <span class="hljs-keyword">return</span> password_hash($str, PASSWORD_BCRYPT, [<span class="hljs-string">"salt"</span> =&gt; <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>]);
}</pre>
<p>이 함수를 PHP 7에서 실행하면 아래와 같은 오류를 만나게 된다.</p>
<pre class="hljs php">PHP Deprecated:  password_hash(): <span class="hljs-keyword">Use</span> <span class="hljs-title">of</span> <span class="hljs-title">the</span> '<span class="hljs-title">salt</span>' <span class="hljs-title">option</span> <span class="hljs-title">to</span> <span class="hljs-title">password_hash</span> <span class="hljs-title">is</span> <span class="hljs-title">deprecated</span></pre>
<p>그럼 이 문제를 해결하려면 어떻게 할까? 아래의 함수를 보자.</p>
<pre class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">password_hash_compat</span><span class="hljs-params">($str, $salt)</span> </span>{
    $salt = base64_encode($salt);
  <span class="hljs-keyword">if</span> (strlen($salt) &lt; <span class="hljs-number">22</span>) {
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
  }
    $salt = str_replace(<span class="hljs-string">'+'</span>, <span class="hljs-string">'.'</span>, $salt);
    <span class="hljs-keyword">return</span> crypt($str, <span class="hljs-string">'$2y$10$'</span>.$salt.<span class="hljs-string">'$'</span>);
}</pre>
<p>PHP 7에서 <code>password_hash()</code>와 동일한 동작을 하도록 만들어진 함수다. 다만, BCrypt에 한정되며 cost 등의 옵션을 사용할 수 없지만 샘플로 제시한 코드와는 동일한 결과를 반환한다. 주의할 것은 salt의 길이가 22자 이상이어야 한다는 것(실제값이 아니라 base64_encode된 문자열의 길이가 22자 이상).</p>
<p>이 함수가 맘에 들지 않는다면 <a href="https://github.com/ircmaxell/password_compat/blob/master/lib/password.php">ircmaxell/password_compat</a>을 사용할 수 있다. 단, 이 라이브러리는 <code>password_hash()</code>가 지원되지 않는 구버전 PHP를 위한 함수로 PHP 7에서 동작하게 하려면 약간의 수정이 필요하다. 하지만 소스를 볼 수 있으니 내부 동작 원리를 파악할 수 있으므로 유용하다.</p>
<hr />
<p>그런데 Deprecated 된 옵션을 굳이 compat 함수를 만들어가면서까지 유지 해야할 이유가 뭘까? 항상 동일한 hash를 얻어야 하는 것이 아니라면 굳이 필요가 없다. 비밀번호의 경우는 항상 동일한 hash를 만들어 비교하는 것이 목적이 아니라 비밀번호가 같은지만 비교하면 되기 때문에 동일한 hash는 필요치 않다.</p>
<p>다시 이야기하자면 나의 경우는 맨 처음 적었던 코드를 사용했던 이유는 <code>password_hash()</code>를 제대로 이해하지 못했기 때문이다. &quot;salt를 넣지 않으면 생성시마다 다른 hash를 반환하니 추후에 다른 환경(언어)에서 해당 값을 비교할 수 없는 것이 아닌가?&quot; 하는 걱정 때문에 salt를 사용했던 것이다. 이 부분이 착각이었던 것이다. <code>password_hash()</code>와 짝을 이루는 <a href="http://php.net/manual/kr/function.password-verify.php">password_verify()</a>에서는 salt 값이 필요하지 않다. 그렇다면 어떻게 검증을 하는 것일까? <code>password_hash()</code>의 결과에 이미 salt 값이 포함되어 있기 때문에 salt를 따로 넣어줄 필요가 없는 것이다. 이와 관련된 자세한 정보는 &quot;<a href="https://blog.asamaru.net/2016/03/03/php-password-hash-and-bcrypt/">PHP password_hash()와 BCrypt</a>&quot;에 따로 남긴다.</p>
<hr />
<p>결론은 나와 같은 착각을 하고 있는 것이라면 걱정을 뒤로하고 그냥 &quot;salt&quot; 옵션을 사용하지 않도록 변경함으로써 모든 문제는 해결된다. 다만, 다른 이유로 hash가 항상 동일한 값이 필요한 상황이라면 앞서 제시안 대안들을 검토하길 바란다. 비밀번호의 hash가 같은 것은 보안상으로도 좋지않고 다른 값의 hash로 사용하는 것이라면 SHA1 등을 사용하는 것이 맞을테니 대부분의 경우에 나와 같은 착각에서 이 문제를 고민하고 있을 것 같다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/02/23/jquery-ajax-ie8-content-type-application-json/</id><title type="html">jQuery $.ajax에서 응답 Content-Type을 application/json 사용시 응답 내용이 파일로 다운로드 처리되는 문제</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/02/23/jquery-ajax-ie8-content-type-application-json/"/><published>2016-02-23T21:24:34+09:00</published><updated>2016-02-23T21:24:34+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[jQuery의 $.ajax 함수를 사용해서 JSON 응답을 받고자 할 때 응답값을 배열(객체)로 받는 방법으로 서버 응답시 header 정보에 Content-Type:application/json; charset=utf-8을 포함하는 방법을 주로 사용한다. 다른 방법도 있지만 응답 데이터의 유형을 명시적으로 지정해서 반환하는 것이 더 나은 방법이라는 생각이다. 실제로 이 방법으로 이제까지 잘 사용해 왔다. 그런데 얼마전 간단한 작업을 하던 중 이상한 상황에 부딪혔다. IE8/9에서 Content-Type:application/json; charset=utf-8을 정상적으로 인식하지 못해 ajax 호출시 응답값을 파일로 저장(다운로드)하려고 하는 것이다(IE10에서 이상없음). 그래서 관련 내용을 찾아보니 IE8 treats json response as file and tries to download it라는 글이 있었다. 여기서의 설명처럼 application/json 대신 text/plain을 사용하면 다운로드를 시도하는 현상은 없어진다. 하지만 $.ajax의 done(success) 함수에서 받은 응답값이 배열(객체)가 아니라 text다. 어떻게보면 당연하다. 서버에서 text라고 보냈으니. 그럼 이 문제는 어떻게 해결할까? 간단한 방법은 $.ajax 사용시 dataType을 'json'으로 지정하는 방법을 사용하면 해결된다. 위 링크에서 질문자가 올린 코드를 예시로 아래에 남긴다. $.ajax({ url: url_string, dataType: "json", success: function(response){ alert('all is well'); }, error: function(request, status, error){ alert(request); alert(status); alert(error); } }); 위 처럼 해결할 수는 있으나 매번 dataType: "json"을 사용하는 것은 맘에 들지 않는다. 다른 방법으로 response가 text로 넘어왔으니 직접 JSON을 parse 하면 되지만 이것도 맘에 들지 않는다. 하지만 현재까지 확인한 바로는 다른 해결 방법을 찾지 못했다. 사실 위 내용을 보고 이상하다는 생각을 할 수도 있다. 실제로 굳이 dataType: "json"를 사용하지 않아도 IE8/9에서 이상없이 application/json header를 사용하고 있는 사람이 있을 것이다. 나도 얼마전까지는 아무 문제없이 사용해오고 있었기 때문이다. 혹시나 싶어 기존 코드들 중 몇가지를 IE8에서 다시 테스트 해 봤으나 역시나 아무 문제가 없었다(아마도 구버전의 jQuery에서는 이 문제를 가지고 있었으나 현재는 관련 문제를 jQuery에서 해결해주고 있는 것으로 보인다.) 정확히 이야기하자면 나의 경우는 jQuery Form Plugin을 사용하면서 이 문제가 발생했다. 이번 작업에서 AJAX 파일업로드를 처리 할 일이 있어서 위 라이브러리를 사용했다. 그런데 이 라이브러리의 문제인 것인지 $.ajaxForm 함수를 사용하면 위 문제가 발생한다. 해결 방법은 jQuery와 동일하다. 서버 응답시 header에 text/plain를 사용하고 dataType: "json"을 옵션으로 추가하면 해결된다. 아래의 예시를 보자. 우선 PHP 샘플 코드다. IE의 버전을 검사해서 필요시에만 text/plain를 적용한다. $returnData = [1,2,3]; if (preg_match('/(?i)msie [5-9]/', $_SERVER['HTTP_USER_AGENT'])) { header('Content-Type:text/plain; charset=utf-8'); } else { header('Content-Type:application/json; charset=utf-8'); } echo json_encode($returnData); 다음은 javascript 샘플 코드다. dataType: "json"를 추가해서 사용한다. $('#form').ajaxForm({ dataType: "json", beforeSubmit: function (formData, jqForm, options) { return true; }, success: function (response, statusText, xhr, $form) { if ('success' == statusText) { if ((response) && (typeof response !== "object")) { response = $.parseJSON(response); } } }, error: function () { } }); 추가적으로 응답값의 데이터 타입을 검사해서 text이면 $.parseJSON 또는 JSON.parse를 수행해 주도록 한다. 위 코드대로라면 IE9 이하에서는 response가 "string"으로 넘어오고 기타 브라우저에서는 "object"로 넘어올 것이기 때문이다. 이 글에서는 조금 두서없이 설명을 했다. 상황적으로 그런 것이 jQuery를 사용할 때는 굳이 부수적인 처리가 필요없지만(경험상으로는) 기타 AJAX를 사용하는 상황에서 위와 비슷한 문제가 발생할 수 있어 원인과 해결 방법의 힌트를 설명하고자 여러가지 이야기를 섞어서 설명할 수 밖에 없었으니 양해 바란다. 더욱 상세히 설명하지 못한 부분이 더 문제일수도... 하지만 일일이 설명하자니 너무 글이 길어질 것 같아 기본적인 부분만 언급하고 넘어가니 혹시 더 필요한 부분이 있다면 따로 요청 바란다.]]></summary><content type="html"><![CDATA[<p>jQuery의 $.ajax 함수를 사용해서 JSON 응답을 받고자 할 때 응답값을 배열(객체)로 받는 방법으로 서버 응답시 header 정보에 <code>Content-Type:application/json; charset=utf-8</code>을 포함하는 방법을 주로 사용한다. 다른 방법도 있지만 응답 데이터의 유형을 명시적으로 지정해서 반환하는 것이 더 나은 방법이라는 생각이다. 실제로 이 방법으로 이제까지 잘 사용해 왔다.</p>
<p>그런데 얼마전 간단한 작업을 하던 중 이상한 상황에 부딪혔다.
IE8/9에서 <code>Content-Type:application/json; charset=utf-8</code>을 정상적으로 인식하지 못해 ajax 호출시 응답값을 파일로 저장(다운로드)하려고 하는 것이다(IE10에서 이상없음). 그래서 관련 내용을 찾아보니 <a href="http://stackoverflow.com/questions/8892819/ie8-treats-json-response-as-file-and-tries-to-download-it">IE8 treats json response as file and tries to download it</a>라는 글이 있었다. 여기서의 설명처럼 <code>application/json</code> 대신 <code>text/plain</code>을 사용하면 다운로드를 시도하는 현상은 없어진다. 하지만 $.ajax의 done(success) 함수에서 받은 응답값이 배열(객체)가 아니라 text다. 어떻게보면 당연하다. 서버에서 text라고 보냈으니.</p>
<p>그럼 이 문제는 어떻게 해결할까? 간단한 방법은 $.ajax 사용시 dataType을 'json'으로 지정하는 방법을 사용하면 해결된다. 위 링크에서 질문자가 올린 코드를 예시로 아래에 남긴다.</p>
<pre class="hljs javascript">$.ajax({
  <span class="hljs-attr">url</span>: url_string,
  <span class="hljs-attr">dataType</span>: <span class="hljs-string">"json"</span>,
  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>)</span>{
    alert(<span class="hljs-string">'all is well'</span>);
  },
  <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">request, status, error</span>)</span>{
    alert(request);
    alert(status);
    alert(error);
  }
});</pre>
<p>위 처럼 해결할 수는 있으나 매번 <code>dataType: "json"</code>을 사용하는 것은 맘에 들지 않는다. 다른 방법으로 response가 text로 넘어왔으니 직접 JSON을 parse 하면 되지만 이것도 맘에 들지 않는다. 하지만 현재까지 확인한 바로는 다른 해결 방법을 찾지 못했다.</p>
<hr />
<p>사실 위 내용을 보고 이상하다는 생각을 할 수도 있다. 실제로 굳이 <code>dataType: "json"</code>를 사용하지 않아도 IE8/9에서 이상없이 <code>application/json</code> header를 사용하고 있는 사람이 있을 것이다. 나도 얼마전까지는 아무 문제없이 사용해오고 있었기 때문이다. 혹시나 싶어 기존 코드들 중 몇가지를 IE8에서 다시 테스트 해 봤으나 역시나 아무 문제가 없었다(아마도 구버전의 jQuery에서는 이 문제를 가지고 있었으나 현재는 관련 문제를 jQuery에서 해결해주고 있는 것으로 보인다.)</p>
<p>정확히 이야기하자면 나의 경우는 <a href="http://malsup.com/jquery/form/">jQuery Form Plugin</a>을 사용하면서 이 문제가 발생했다. 이번 작업에서 AJAX 파일업로드를 처리 할 일이 있어서 위 라이브러리를 사용했다. 그런데 이 라이브러리의 문제인 것인지 <code>$.ajaxForm</code> 함수를 사용하면 위 문제가 발생한다.</p>
<p>해결 방법은 jQuery와 동일하다. 서버 응답시 header에 <code>text/plain</code>를 사용하고 <code>dataType: "json"</code>을 옵션으로 추가하면 해결된다. 아래의 예시를 보자.</p>
<p>우선 PHP 샘플 코드다. IE의 버전을 검사해서 필요시에만 <code>text/plain</code>를 적용한다.</p>
<pre class="hljs php">$returnData = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];
<span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">'/(?i)msie [5-9]/'</span>, $_SERVER[<span class="hljs-string">'HTTP_USER_AGENT'</span>])) {
  header(<span class="hljs-string">'Content-Type:text/plain; charset=utf-8'</span>);
} <span class="hljs-keyword">else</span> {
  header(<span class="hljs-string">'Content-Type:application/json; charset=utf-8'</span>);
}
<span class="hljs-keyword">echo</span> json_encode($returnData);</pre>
<p>다음은 javascript 샘플 코드다. <code>dataType: "json"</code>를 추가해서 사용한다.</p>
<pre class="hljs javascript">$(<span class="hljs-string">'#form'</span>).ajaxForm({
    <span class="hljs-attr">dataType</span>: <span class="hljs-string">"json"</span>,
    <span class="hljs-attr">beforeSubmit</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">formData, jqForm, options</span>) </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    },
    <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">response, statusText, xhr, $form</span>) </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-string">'success'</span> == statusText) {
            <span class="hljs-keyword">if</span> ((response) &amp;&amp; (<span class="hljs-keyword">typeof</span> response !== <span class="hljs-string">"object"</span>)) {
                response = $.parseJSON(response);
            }
        }
    },
    <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    }
});</pre>
<p>추가적으로 응답값의 데이터 타입을 검사해서 text이면 <code>$.parseJSON</code> 또는 <code>JSON.parse</code>를 수행해 주도록 한다. 위 코드대로라면 IE9 이하에서는 response가 &quot;string&quot;으로 넘어오고 기타 브라우저에서는 &quot;object&quot;로 넘어올 것이기 때문이다.</p>
<hr />
<p>이 글에서는 조금 두서없이 설명을 했다. 상황적으로 그런 것이 jQuery를 사용할 때는 굳이 부수적인 처리가 필요없지만(경험상으로는) 기타 AJAX를 사용하는 상황에서 위와 비슷한 문제가 발생할 수 있어 원인과 해결 방법의 힌트를 설명하고자 여러가지 이야기를 섞어서 설명할 수 밖에 없었으니 양해 바란다. 더욱 상세히 설명하지 못한 부분이 더 문제일수도... 하지만 일일이 설명하자니 너무 글이 길어질 것 같아 기본적인 부분만 언급하고 넘어가니 혹시 더 필요한 부분이 있다면 따로 요청 바란다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/02/23/error-code-2006-mysql-server-has-gone-away/</id><title type="html">Error Code: 2006 - MySQL server has gone away</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/02/23/error-code-2006-mysql-server-has-gone-away/"/><published>2016-02-23T19:51:01+09:00</published><updated>2016-02-23T19:51:01+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="db" label="db" /><summary><![CDATA[MySQL이나 MariaDB를 사용하다보면 아래와 같은 오류를 만날 때가 있다. Error Code: 2006 - MySQL server has gone away 실행중인 Query가 중단되는 이유는 많지만 Error 2006의 경우는 대부분 접속이 끊어지거나 Packet의 크기와 관련이 있다. MySQL 공식 메뉴얼에서 B.5.2.9 MySQL server has gone away를 보면 관련된 정보를 확인할 수 있다. 일반적인 상황에서는 접속 중단보다는 Packet이 지정된 사이즈보다 커서 이 오류를 만나는 경우가 대부분이다. 이 경우에 대한 해결 방법 또한 MySQL 공식 메뉴얼의 B.5.2.10 Packet Too Large에서 확인 할 수 있다. 요약하자면 아래와 같이 [mysqld] 항목에 max_allowed_packet 속성에 적당한 값을 입력함으로써 해결이 가능하다. [mysqld] max_allowed_packet=16M 위 방법은 데몬의 재시작 시마다 계속 반영되므로 덤프 데이터를 복구하는 경우와 같이 일시적으로만 늘려서 사용하고 싶을 때는 메뉴얼에서의 설명처럼 mysql 실행시 --max_allowed_packet 속성을 사용할 수도 있다.]]></summary><content type="html"><![CDATA[<p>MySQL이나 MariaDB를 사용하다보면 아래와 같은 오류를 만날 때가 있다.</p>
<pre><code>Error Code: 2006 - MySQL server has gone away</code></pre>
<p>실행중인 Query가 중단되는 이유는 많지만 Error 2006의 경우는 대부분 접속이 끊어지거나 Packet의 크기와 관련이 있다.</p>
<p>MySQL 공식 메뉴얼에서 <a href="http://dev.mysql.com/doc/refman/5.7/en/gone-away.html">B.5.2.9 MySQL server has gone away</a>를 보면 관련된 정보를 확인할 수 있다.</p>
<p>일반적인 상황에서는 접속 중단보다는 Packet이 지정된 사이즈보다 커서 이 오류를 만나는 경우가 대부분이다. 이 경우에 대한 해결 방법 또한 MySQL 공식 메뉴얼의 <a href="http://dev.mysql.com/doc/refman/5.7/en/packet-too-large.html">B.5.2.10 Packet Too Large</a>에서 확인 할 수 있다.</p>
<p>요약하자면 아래와 같이 <code>[mysqld]</code> 항목에 <code>max_allowed_packet</code> 속성에 적당한 값을 입력함으로써 해결이 가능하다.</p>
<pre><code>[mysqld]
max_allowed_packet=16M</code></pre>
<p>위 방법은 데몬의 재시작 시마다 계속 반영되므로 덤프 데이터를 복구하는 경우와 같이 일시적으로만 늘려서 사용하고 싶을 때는 메뉴얼에서의 설명처럼 mysql 실행시  <code>--max_allowed_packet</code> 속성을 사용할 수도 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/02/15/Microsoft-RDP-8-for-Mac-configuration-backup/</id><title type="html">OSX에서 Microsoft RDP 접속 설정 정보 저장 위치</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/02/15/Microsoft-RDP-8-for-Mac-configuration-backup/"/><published>2016-02-15T20:25:19+09:00</published><updated>2016-02-15T11:25:19+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><summary><![CDATA[개인적으로 MS를 좋아하지 않지만 MS에서 내놓은 것 중 정말 괜찮다고 생각하는 것 중 하나가 RDP(Microsoft Remote Desktop)이다. 업무용으로 맥북을 사용하다보니 윈도우가 필히 필요한 작업을 할 때는 난감하다. 기존에는 VMWare 같은 것들을 썼지만 이런 가상 PC를 띄우는 것조차 귀찮아져서 최근에는 일반 PC에 원도우를 설치해 두고 원격 데스크탑을 사용중이다. 물론 나 혼자 사용하는 것은 아니고 직장 동료들도 각각의 계정을 만들어 함께 사용중이다. 이렇게 사용하니 급할때는 스마트폰에서도 접속할 수 있고 맥북에서 접속시에도 모든 작업을 할 수 있어 무척 편리하다. 앞서 이야기에서 이것을 정말 괜찮은 프로그램이라고 이야기한 이유는 쾌적한 속도 때문이다. 다른 원격 프로그램보다 성능이 훨씬 뛰어나서 원격 데스크톱인 것을 인지하지 못할 정도다. 서론이 길었는데 오늘 이야기하고자하는 것은 이게 아니다. 사실 얼마전 맥북을 신형으로 교체하면서 RDP의 설정을 이전해야 했다. 그런데 이 RDP의 최대 단점 중 하나가 설정을 한번에 추출할 수가 없다는 것이다. Export 기능이 있기는하나 하나씩 별도로 추출해야하며 비밀번호 등은 추출되지 않고, 한글로된 이름은 나중에 Import시에 다 깨진다. 역시 MS. 이래서 싫어. 나의 경우는 일반 작업뿐 아니라 구버전 IE를 테스트할 때도 원격 데스크탑을 활용하므로 설정이 아주 많은데 OSX를 설치할 때마다 옮기는 것이 여간 귀찮은 것이 아니었다. 어쨌든 이번에도 설정을 결국 다 날려먹고, 앞으로는 제대로 백업하고 싶은 마음에 조사를 조금 해봤다. 결국은 백업할 방법을 Where does Microsoft RDP 8 for Mac store it's configuration에서 찾았다. RDP의 plist 파일 자체를 백업하는 것이다. ls ~/Library/Containers/com.microsoft.rdc.mac/Data/Library/Preferences/com.microsoft.rdc.mac.plist 위 글에 따르면 이 파일안에 모든 정보가 들어가 있다고 한다. 사실 확인은 해보지 않았으나 다음에 OSX를 재설치하게 되면 꼭 이 파일을 백업해서 복구에 사용하려고 한다. 검증되지는 않았지만 OSX를 재설치하고자 하고 RDP를 사용중이라면 위 파일을 백업해서 사용해보길 권한다. 밑져야 본전이니.]]></summary><content type="html"><![CDATA[<p>개인적으로 MS를 좋아하지 않지만 MS에서 내놓은 것 중 정말 괜찮다고 생각하는 것 중 하나가 RDP(Microsoft Remote Desktop)이다. 업무용으로 맥북을 사용하다보니 윈도우가 필히 필요한 작업을 할 때는 난감하다. 기존에는 VMWare 같은 것들을 썼지만 이런 가상 PC를 띄우는 것조차 귀찮아져서 최근에는 일반 PC에 원도우를 설치해 두고 원격 데스크탑을 사용중이다. 물론 나 혼자 사용하는 것은 아니고 직장 동료들도 각각의 계정을 만들어 함께 사용중이다. 이렇게 사용하니 급할때는 스마트폰에서도 접속할 수 있고 맥북에서 접속시에도 모든 작업을 할 수 있어 무척 편리하다. 앞서 이야기에서 이것을 정말 괜찮은 프로그램이라고 이야기한 이유는 쾌적한 속도 때문이다. 다른 원격 프로그램보다 성능이 훨씬 뛰어나서 원격 데스크톱인 것을 인지하지 못할 정도다.</p>
<p>서론이 길었는데 오늘 이야기하고자하는 것은 이게 아니다. 사실 얼마전 맥북을 신형으로 교체하면서 RDP의 설정을 이전해야 했다. 그런데 이 RDP의 최대 단점 중 하나가 설정을 한번에 추출할 수가 없다는 것이다. Export 기능이 있기는하나 하나씩 별도로 추출해야하며 비밀번호 등은 추출되지 않고, 한글로된 이름은 나중에 Import시에 다 깨진다. 역시 MS. 이래서 싫어.
나의 경우는 일반 작업뿐 아니라 구버전 IE를 테스트할 때도 원격 데스크탑을 활용하므로 설정이 아주 많은데 OSX를 설치할 때마다 옮기는 것이 여간 귀찮은 것이 아니었다. 어쨌든 이번에도 설정을 결국 다 날려먹고, 앞으로는 제대로 백업하고 싶은 마음에 조사를 조금 해봤다.</p>
<p>결국은 백업할 방법을 <a href="http://apple.stackexchange.com/a/182258">Where does Microsoft RDP 8 for Mac store it's configuration</a>에서 찾았다.</p>
<p>RDP의 plist 파일 자체를 백업하는 것이다.</p>
<pre class="hljs bash">ls ~/Library/Containers/com.microsoft.rdc.mac/Data/Library/Preferences/com.microsoft.rdc.mac.plist</pre>
<p>위 글에 따르면 이 파일안에 모든 정보가 들어가 있다고 한다. 사실 확인은 해보지 않았으나 다음에 OSX를 재설치하게 되면 꼭 이 파일을 백업해서 복구에 사용하려고 한다.</p>
<p>검증되지는 않았지만 OSX를 재설치하고자 하고 RDP를 사용중이라면 위 파일을 백업해서 사용해보길 권한다. 밑져야 본전이니.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/02/10/php-stdin/</id><title type="html">PHP CLI 사용자 입력(STDIN) 받기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/02/10/php-stdin/"/><published>2016-02-10T20:50:19+09:00</published><updated>2016-02-10T11:50:19+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP CLI를 사용해서 Shell Script를 생성하다보면 사용자에게 어떤 데이터를 입력 받아야 상황이 발생할 수 있다. 이런 경우에 사용할 수 있는 몇가지 방법에 대해 설명하고자 한다. 우선 PHP 메뉴얼 중 Input/output streams에 있는 예시에 약간의 코드를 더해서 설명하겠다. <?php $stdin = fopen('php://stdin', 'r'); $fileContents = fread($stdin, 1024); fclose($stdin); echo $fileContents; 우선 위 방법은 fopen을 사용해서 사용자에게 입력 받는 방법이다. 이 방법은 사용자의 입력이 완료될 때(Enter 입력시)까지 대기하게 하거나 pipe(|)를 이용해 입력이 가능하다. 위 내용을 fopenTest.php로 저장했다면 아래와 같이 실행해 볼 수 있다. 그리고 1024는 입력의 최대 길이로 그 이상의 입력이 들어오면 무시된다. $ php fopenTest.php test # 입력 후 Enter test $ echo "test" | php fopenTest.php test 이와 동일한 역할로 다음과 같이 사용할 수도 있다. <?php echo trim(fgets(STDIN)); // reads one line from STDIN 처음 코드와 동일하게 동작한다. 그리고 특정 형식으로 데이터를 입력받고 싶다면 아래와 같이 사용할 수도 있다. <?php fscanf(STDIN, "%d\n", $number); // reads number from STDIN echo $number; 위 코드는 실행 결과는 약간 다른점이 있으니 아래의 실행 예시를 참고하자. $ php fopenTest.php test # 입력 후 Enter # 입력값이 무시되어 아무값도 출력되지 않음 $ php fopenTest.php 2test3 # 입력 후 Enter 2 # 2 이후의 입력값이 무시됨 $ php fopenTest.php 123 # 입력 후 Enter 123 # 유효한 입력으로 123이 출력됨 $ echo "123" | php fopenTest.php 123 # 유효한 입력으로 123이 출력됨 PHP에서는 다른 방법으로 readline을 사용하는 것이 가능하다. 예를들면 아래와 같이 확인해 볼 수 있다. <?php //get 3 commands from user for ($i=0; $i < 3; $i++) { $line = readline("Command: "); readline_add_history($line); } //dump history print_r(readline_list_history()); //dump variables print_r(readline_info()); 그런데 이 함수는 제약조건이 있다. 메뉴얼에 따르면 readline_list_history는 libreadline과 함께 컴파일되어야만 사용할 수 있다고 되어 있다. 그래서 위 예시는 제대로 테스트 해보지 못했다. 그렇다면 사용자에게 한글자의 입력만 받고 싶다면 어떻게하면 될까? 아래의 예시를 보자. <?php echo '변경 후에는 복구할 수 없습니다. 변경하시겠습니까? (y/n) '; $input = fgetc(STDIN); 위 코드를 실행하면 한글자만 입력을 받게 되지만 한글자를 입력하고 Enter를 눌러야 한다. 그럼 그냥 한글자를 입력하면 바로 입력을 완료하고자 한다면 어떻게 할까? 아래에 그 답이 있다. <?php echo '변경 후에는 복구할 수 없습니다. 변경하시겠습니까? (y/n) '; readline_callback_handler_install('', function () { }); while (true) { $r = [STDIN]; $w = null; $e = null; $n = stream_select($r, $w, $e, 0); if ($n && in_array(STDIN, $r)) { $c = stream_get_contents(STDIN, 1); if (strcasecmp($c, 'y') != 0) { echo "\n작업을 취소함\n"; exit; } break; } } echo "변경 완료\n"; 나의 경우엔 위 스크립트를 사용해야하는 상황이 가장 많은 것 같다. 위험한 동작을 실행하기전 다시 한번 확인하는 것이 정신 건강에 이롭다.]]></summary><content type="html"><![CDATA[<p>PHP CLI를 사용해서 Shell Script를 생성하다보면 사용자에게 어떤 데이터를 입력 받아야 상황이 발생할 수 있다. 이런 경우에 사용할 수 있는 몇가지 방법에 대해 설명하고자 한다.</p>
<p>우선 PHP 메뉴얼 중 <a href="http://php.net/manual/kr/features.commandline.io-streams.php">Input/output streams</a>에 있는 예시에 약간의 코드를 더해서 설명하겠다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$stdin = fopen(<span class="hljs-string">'php://stdin'</span>, <span class="hljs-string">'r'</span>);
$fileContents = fread($stdin, <span class="hljs-number">1024</span>);
fclose($stdin);

<span class="hljs-keyword">echo</span> $fileContents;</pre>
<p>우선 위 방법은 fopen을 사용해서 사용자에게 입력 받는 방법이다. 이 방법은 사용자의 입력이 완료될 때(Enter 입력시)까지 대기하게 하거나 pipe(|)를 이용해 입력이 가능하다. 위 내용을 <code>fopenTest.php</code>로 저장했다면 아래와 같이 실행해 볼 수 있다. 그리고 1024는 입력의 최대 길이로 그 이상의 입력이 들어오면 무시된다.</p>
<pre class="hljs bash">$ php fopenTest.php
<span class="hljs-built_in">test</span> <span class="hljs-comment"># 입력 후 Enter</span>
<span class="hljs-built_in">test</span>

$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"test"</span> | php fopenTest.php
<span class="hljs-built_in">test</span></pre>
<p>이와 동일한 역할로 다음과 같이 사용할 수도 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span> trim(fgets(STDIN)); <span class="hljs-comment">// reads one line from STDIN</span></pre>
<p>처음 코드와 동일하게 동작한다. 그리고 특정 형식으로 데이터를 입력받고 싶다면 아래와 같이 사용할 수도 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
fscanf(STDIN, <span class="hljs-string">"%d\n"</span>, $number); <span class="hljs-comment">// reads number from STDIN</span>
<span class="hljs-keyword">echo</span> $number;</pre>
<p>위 코드는 실행 결과는 약간 다른점이 있으니 아래의 실행 예시를 참고하자.</p>
<pre class="hljs bash">$ php fopenTest.php
<span class="hljs-built_in">test</span> <span class="hljs-comment"># 입력 후 Enter</span>
<span class="hljs-comment"># 입력값이 무시되어 아무값도 출력되지 않음</span>

$ php fopenTest.php
2test3 <span class="hljs-comment"># 입력 후 Enter</span>
2 <span class="hljs-comment"># 2 이후의 입력값이 무시됨</span>

$ php fopenTest.php
123 <span class="hljs-comment"># 입력 후 Enter</span>
123 <span class="hljs-comment"># 유효한 입력으로 123이 출력됨</span>

$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"123"</span> | php fopenTest.php
123 <span class="hljs-comment"># 유효한 입력으로 123이 출력됨</span></pre>
<hr />
<p>PHP에서는 다른 방법으로 <a href="http://php.net/manual/kr/function.readline.php">readline</a>을 사용하는 것이 가능하다. 예를들면 아래와 같이 확인해 볼 수 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">//get 3 commands from user</span>
<span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">3</span>; $i++) {
        $line = readline(<span class="hljs-string">"Command: "</span>);
        readline_add_history($line);
}

<span class="hljs-comment">//dump history</span>
print_r(readline_list_history());

<span class="hljs-comment">//dump variables</span>
print_r(readline_info());</pre>
<p>그런데 이 함수는 제약조건이 있다. 메뉴얼에 따르면 <a href="http://php.net/manual/kr/function.readline-list-history.php">readline_list_history</a>는 <code>libreadline</code>과 함께 컴파일되어야만 사용할 수 있다고 되어 있다. 그래서 위 예시는 제대로 테스트 해보지 못했다.</p>
<hr />
<p>그렇다면 사용자에게 한글자의 입력만 받고 싶다면 어떻게하면 될까? 아래의 예시를 보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'변경 후에는 복구할 수 없습니다. 변경하시겠습니까? (y/n) '</span>;
$input = fgetc(STDIN);</pre>
<p>위 코드를 실행하면 한글자만 입력을 받게 되지만 한글자를 입력하고 Enter를 눌러야 한다. 그럼 그냥 한글자를 입력하면 바로 입력을 완료하고자 한다면 어떻게 할까? 아래에 그 답이 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">'변경 후에는 복구할 수 없습니다. 변경하시겠습니까? (y/n) '</span>;

readline_callback_handler_install(<span class="hljs-string">''</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
});
<span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) {
  $r = [STDIN];
  $w = <span class="hljs-keyword">null</span>;
  $e = <span class="hljs-keyword">null</span>;
  $n = stream_select($r, $w, $e, <span class="hljs-number">0</span>);
  <span class="hljs-keyword">if</span> ($n &amp;&amp; in_array(STDIN, $r)) {
    $c = stream_get_contents(STDIN, <span class="hljs-number">1</span>);
    <span class="hljs-keyword">if</span> (strcasecmp($c, <span class="hljs-string">'y'</span>) != <span class="hljs-number">0</span>) {
      <span class="hljs-keyword">echo</span> <span class="hljs-string">"\n작업을 취소함\n"</span>;
      <span class="hljs-keyword">exit</span>;
    }
    <span class="hljs-keyword">break</span>;
  }
}

<span class="hljs-keyword">echo</span> <span class="hljs-string">"변경 완료\n"</span>;</pre>
<p>나의 경우엔 위 스크립트를 사용해야하는 상황이 가장 많은 것 같다. 위험한 동작을 실행하기전 다시 한번 확인하는 것이 정신 건강에 이롭다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/02/02/windows-proxy-server-using-ccproxy/</id><title type="html">CCProxy를 사용해서 Windows Proxy Server 만들기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/02/02/windows-proxy-server-using-ccproxy/"/><published>2016-02-02T14:27:19+09:00</published><updated>2016-02-02T05:27:19+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[Proxy Server를 사용할 일이 생겼는데 필요한 프로그램이 윈도우용 프로그램이라 윈도우 PC에 프록서 서버를 구성해야하는 상황이었다. 정확히 이야기하자면 외부 Proxy 서비스를 사용하고 있는데 서비스 제공자가 접속 프로그램을 윈도우용으로만 제공해서 어쩔 수 없이 윈도우에서 사용중이었다. 그런데 이 Proxy 서비스를 사용해야하는 프로그램은 linux 환경에서 동작해서 기존에는 윈도우 PC에 Vagrant로 linux 환경을 구성해서 사용했다. 그런데 문제는 proxy를 선택적으로 사용해야 하는데 Vagrant 내부에서는 가상망으로 구성되어 무조건 부모망을 사용해서 선택적으로 사용할 수 없었다. NIC을 추가해서 망을 이중화하면 되지만 여러가지 이유로 그냥 윈도우 PC는 중개(Proxy)용으로만 사용하고 별도의 서버를 구성하기로 했다. 그래서 윈도우용 Proxy Server를 구성하게된 것이다. 다시말해 Proxy를 Proxy를 통해 사용하는 것. 사설이 길었는데 이건 중요한 것은 아니고. 결론적으로 몇가지 프로그램을 알아보던 중 CCProxy를 선택했다. 최대 3명의 사용자까지 무료로 사용 가능하고 NT Service로 등록 가능하며 설정이 무척 쉽다. 설치 과정은 다음과 같다. CCProxy에서 free version을 다운 받아서 설치한다. 설치 후에 프로그램을 실행하면 방화벽에서 허용할 것인지 물어보는데 당연히 허용해야 한다. 아니면 사용할 포트만 직접 방화벽에서 열어주어도 된다. 프로그램이 실행되면 "Options"를 눌러 사용할 포트만 체크해주고 "Local IP Address" 영역을 확인해 준다. "Local IP Address" 영역에는 기본적으로 "Auto Detect"가 체크되어 있는데 원하는 IP가 아니라면 체크를 해제하고 원하는 IP를 선택하면 된다. 그리고 "NT Service"를 체크해주고 "OK"를 누르면 완료. 마지막으로 접속하는 Client를 제한하고 싶다면 "Account" 메뉴에서 지정하면 된다. 스샷을 첨부하려 했으나 그럴 필요가 없을 정도로 간단하다.]]></summary><content type="html"><![CDATA[<p>Proxy Server를 사용할 일이 생겼는데 필요한 프로그램이 윈도우용 프로그램이라 윈도우 PC에 프록서 서버를 구성해야하는 상황이었다. 정확히 이야기하자면 외부 Proxy 서비스를 사용하고 있는데 서비스 제공자가 접속 프로그램을 윈도우용으로만 제공해서 어쩔 수 없이 윈도우에서 사용중이었다. 그런데 이 Proxy 서비스를 사용해야하는 프로그램은 linux 환경에서 동작해서 기존에는 윈도우 PC에 <a href="https://www.vagrantup.com/">Vagrant</a>로 linux 환경을 구성해서 사용했다. 그런데 문제는 proxy를 선택적으로 사용해야 하는데 <a href="https://www.vagrantup.com/">Vagrant</a> 내부에서는 가상망으로 구성되어 무조건 부모망을 사용해서 선택적으로 사용할 수 없었다. NIC을 추가해서 망을 이중화하면 되지만 여러가지 이유로 그냥 윈도우 PC는 중개(Proxy)용으로만 사용하고 별도의 서버를 구성하기로 했다. 그래서 윈도우용 Proxy Server를 구성하게된 것이다. 다시말해 Proxy를 Proxy를 통해 사용하는 것. 사설이 길었는데 이건 중요한 것은 아니고.</p>
<p>결론적으로 몇가지 프로그램을 알아보던 중 <a href="http://www.youngzsoft.net/ccproxy/">CCProxy</a>를 선택했다. 최대 3명의 사용자까지 무료로 사용 가능하고 NT Service로 등록 가능하며 설정이 무척 쉽다.</p>
<p>설치 과정은 다음과 같다.</p>
<p><a href="http://www.youngzsoft.net/ccproxy/">CCProxy</a>에서 free version을 다운 받아서 설치한다. 설치 후에 프로그램을 실행하면 방화벽에서 허용할 것인지 물어보는데 당연히 허용해야 한다. 아니면 사용할 포트만 직접 방화벽에서 열어주어도 된다.</p>
<p>프로그램이 실행되면 &quot;Options&quot;를 눌러 사용할 포트만 체크해주고 &quot;Local IP Address&quot; 영역을 확인해 준다. &quot;Local IP Address&quot; 영역에는 기본적으로 &quot;Auto Detect&quot;가 체크되어 있는데 원하는 IP가 아니라면 체크를 해제하고 원하는 IP를 선택하면 된다. 그리고 &quot;NT Service&quot;를 체크해주고 &quot;OK&quot;를 누르면 완료.</p>
<p>마지막으로 접속하는 Client를 제한하고 싶다면 &quot;Account&quot; 메뉴에서 지정하면 된다.</p>
<p>스샷을 첨부하려 했으나 그럴 필요가 없을 정도로 간단하다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/02/02/installing-centos-7-on-an-apple-mac-mini/</id><title type="html">구형 애플 맥 미니 CentOS 7 서버로 재활용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/02/02/installing-centos-7-on-an-apple-mac-mini/"/><published>2016-02-02T12:37:47+09:00</published><updated>2016-02-02T03:37:47+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><category term="osx" label="osx" /><summary><![CDATA[회사에서 맥북 프로를 새로 구매하면서 맥 미니(2012년형)가 한대 남게 되었다. 사실은 다른 이유로 2대가 남게 되었는데 한대는 예비로 그냥 두고 한대를 서버로 사용하기로 했다. 그래서 설치 방법을 찾아보다 Installing CentOS 7 on an Apple Mac Mini를 찾았다. 그런데 이 글에서는 CentOS 7을 바로 설치할 수 없어 CentOS 6.5를 설치 후 7으로 업데이트하는 방법을 안내하고 있었다. 이 방법은 개인적인 취향상 선택하기 싫었다. 그래서 조금 더 찾다보니 Create a bootable CentOS USB drive with a Mac (OS X) for a PC라는 글이 있었다. 여기서는 맥 설치용 CentOS 7 부트 USB를 만드는 법을 설명하고 있어서 이 글을 참고해서 작업을 시작했다. 우선 CentOS 7용 iso 이미지를 내려 받는다. 나는 minimal을 선호하기 때문에 위 글의 설명과 달리 minimal을 다운 받았다. 해당 이미지가 있는 폴더에 가서 아래와 같이 dmg 파일을 우선 생성한다. 당연히 맥에서 작업해야 한다. $ hdiutil convert -format UDRW -o target.img CentOS-7-x86_64-Minimal-1511.iso Master Boot Record(MBR : 0) 읽는 중... CentOS 7 x86_64 (Apple_ISO : 1) 읽는 중... (Type EF : 2) 읽는 중... . CentOS 7 x86_64 (Apple_ISO : 3) 읽는 중... .................................................................................................................................................................... 경과 시간: 661.204ms 속도: 912.0Mbytes/초 저장: 0.0% created: /Users/yjyou/Downloads/target.img.dmg 부트 이미지를 담을 USB를 연결한 다음 아래와 같이 diskutil을 사용해서 disk 번호를 확인한다. $ diskutil list /dev/disk0 (internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *500.3 GB disk0 1: EFI EFI 209.7 MB disk0s1 2: Apple_CoreStorage Macintosh HD 250.5 GB disk0s2 3: Apple_Boot Recovery HD 650.0 MB disk0s3 4: Apple_HFS DATA 248.8 GB disk0s4 /dev/disk1 (internal, virtual): #: TYPE NAME SIZE IDENTIFIER 0: Apple_HFS Macintosh HD +250.1 GB disk1 Logical Volume on disk0s2 55AC6B2F-B3B4-450F-B4DE-E025311E9955 Unencrypted /dev/disk2 (external, physical): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme *15.8 GB disk2 1: EFI EFI 209.7 MB disk2s1 2: Microsoft Basic Data USB 15.6 GB disk2s2 나의 경우는 /dev/disk2에 mount 되어 있었다. 이후의 과정에서는 당연히 자신에게 맞는 disk 번호를 사용해야 한다. 우선 USB를 unmount 한다. $ diskutil unmountDisk /dev/disk2 Unmount of all volumes on disk2 was successful 이제는 실제로 위에 만든 dmg 이미지를 이용해서 부트 USB를 만든다. $ time sudo dd if=target.img.dmg of=/dev/disk2 bs=1m 602+1 records in 602+1 records out 632262656 bytes transferred in 155.872514 secs (4056281 bytes/sec) real 2m36.025s user 0m0.006s sys 0m2.548s 이미지를 만드는데 시간이 조금 소요되니 걱정하지 말고 기다리자. 그리고 생성되고 나면 해당 디스크를 인식할 수 없다고 자동적으로 추출된다. 이제는 USB를 빼서 설치할 맥 미니에 연결하고 부팅한다. 당연히 alt/option를 누르고 부팅해서 부팅 디스크를 선택하는 화면으로 진입해야 한다. 이후 과정을 진행하기 전에 파티션의 변경이 필요하다면 미리 맥 미니 내에서 설정해 두어야 한다. 나의 경우를 보자면 500G의 디스크를 2개의 파티션으로 나누고 복구 파티션까지 3개가 있었다. 처음엔 복구 파티션을 두고 두개의 파티션을 CentOS 설치 과정에서 묶으려고 했는데 복구 파티션이 두개 파티션 사이에 위치해 합칠 수 없었다. 그래서 맥에서 두개의 파티션을 합쳐주고 다시 설치했다. 사실은 이 과정은 복구 파티션을 두려고 했던 것인데 실제 CentOS를 설치하면서 복구 파티션도 날렸다(원하지 않았지만). 이렇게되면 위 과정이 필요없었을 수 있지만 혹시나해서 남겨둔다. 이제부터는 일반적으로 CentOS를 설치하는 것과 동일하게 설치하면 된다. 설치 방법이 궁금하다면 CentOS 7 minimal 설치를 참고해도 된다. 마지막으로 중요한 부분이 있다. 파티션 설치시 /boot/efi을 별도로 지정해야 한다는 것이다. 일반적인 설치에서는 하지 않던 작업인데 맥 미니의 경우 해당 파티션이 기본적으로 없어서 그런 것인지 지정하지 않으면 파티셔닝이 완료되지 않았다. /boot/efi의 용량은 최소 100MB를 지정하도록 권장하는 것 같다. 이 부분 또한 자동 파티셔닝이 아닌 사용자 지정 파티션을 사용해서 발생한 문제일지도 모르겠다. 하지만 개인적인 생각으로 "맥 미니에서 다른 CentOS 설치시 잘 안되는 경우는 이것 때문이지 않을까?"해서 경험을 남겨둔다. 이후부터는 정말 CentOS 설치와 동일하다(일단 나의 경우엔).]]></summary><content type="html"><![CDATA[<p>회사에서 맥북 프로를 새로 구매하면서 맥 미니(2012년형)가 한대 남게 되었다. 사실은 다른 이유로 2대가 남게 되었는데 한대는 예비로 그냥 두고 한대를 서버로 사용하기로 했다. 그래서 설치 방법을 찾아보다 <a href="http://drewcdecker.me/2014/08/installing-centos-7-on-an-apple-mac-mini/">Installing CentOS 7 on an Apple Mac Mini</a>를 찾았다. 그런데 이 글에서는 <a href="https://www.centos.org/">CentOS 7</a>을 바로 설치할 수 없어 CentOS 6.5를 설치 후 7으로 업데이트하는 방법을 안내하고 있었다. 이 방법은 개인적인 취향상 선택하기 싫었다. 그래서 조금 더 찾다보니 <a href="http://www.myiphoneadventure.com/os-x/create-a-bootable-centos-usb-drive-with-a-mac-os-x">Create a bootable CentOS USB drive with a Mac (OS X) for a PC</a>라는 글이 있었다. 여기서는 맥 설치용 CentOS 7 부트 USB를 만드는 법을 설명하고 있어서 이 글을 참고해서 작업을 시작했다.</p>
<hr />
<p>우선 <a href="https://www.centos.org/download/">CentOS 7용 iso 이미지</a>를 내려 받는다. 나는 minimal을 선호하기 때문에 위 글의 설명과 달리 minimal을 다운 받았다.</p>
<p>해당 이미지가 있는 폴더에 가서 아래와 같이 dmg 파일을 우선 생성한다. 당연히 맥에서 작업해야 한다.</p>
<pre class="hljs bash">$ hdiutil convert -format UDRW -o target.img CentOS-7-x86_64-Minimal-1511.iso

Master Boot Record(MBR : 0) 읽는 중...
CentOS 7 x86_64                 (Apple_ISO : 1) 읽는 중...
(Type EF : 2) 읽는 중...
.
CentOS 7 x86_64                 (Apple_ISO : 3) 읽는 중...
....................................................................................................................................................................
경과 시간: 661.204ms
속도: 912.0Mbytes/초
저장: 0.0%
created: /Users/yjyou/Downloads/target.img.dmg</pre>
<p>부트 이미지를 담을 USB를 연결한 다음 아래와 같이 <code>diskutil</code>을 사용해서 disk 번호를 확인한다.</p>
<pre class="hljs bash">$ diskutil list

/dev/disk0 (internal, physical):
   <span class="hljs-comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
   0:      GUID_partition_scheme                        *500.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:          Apple_CoreStorage Macintosh HD            250.5 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
   4:                  Apple_HFS DATA                    248.8 GB   disk0s4
/dev/disk1 (internal, virtual):
   <span class="hljs-comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
   0:                  Apple_HFS Macintosh HD           +250.1 GB   disk1
                                 Logical Volume on disk0s2
                                 55AC6B2F-B3B4-450F-B4DE-E025311E9955
                                 Unencrypted
/dev/disk2 (external, physical):
   <span class="hljs-comment">#:                       TYPE NAME                    SIZE       IDENTIFIER</span>
   0:      GUID_partition_scheme                        *15.8 GB    disk2
   1:                        EFI EFI                     209.7 MB   disk2s1
   2:       Microsoft Basic Data USB                     15.6 GB    disk2s2</pre>
<p>나의 경우는 <code>/dev/disk2</code>에 mount 되어 있었다. <strong>이후의 과정에서는 당연히 자신에게 맞는 disk 번호를 사용해야 한다.</strong></p>
<p>우선 USB를 unmount 한다.</p>
<pre class="hljs bash">$  diskutil unmountDisk /dev/disk2

Unmount of all volumes on disk2 was successful</pre>
<p>이제는 실제로 위에 만든 dmg 이미지를 이용해서 부트 USB를 만든다.</p>
<pre class="hljs bash">$ time sudo dd <span class="hljs-keyword">if</span>=target.img.dmg of=/dev/disk2 bs=1m

602+1 records <span class="hljs-keyword">in</span>
602+1 records out
632262656 bytes transferred <span class="hljs-keyword">in</span> 155.872514 secs (4056281 bytes/sec)

real    2m36.025s
user    0m0.006s
sys 0m2.548s</pre>
<p>이미지를 만드는데 시간이 조금 소요되니 걱정하지 말고 기다리자. 그리고 생성되고 나면 해당 디스크를 인식할 수 없다고 자동적으로 추출된다. 이제는 USB를 빼서 설치할 맥 미니에 연결하고 부팅한다. 당연히 <code>alt/option</code>를 누르고 부팅해서 부팅 디스크를 선택하는 화면으로 진입해야 한다.</p>
<p>이후 과정을 진행하기 전에 파티션의 변경이 필요하다면 미리 맥 미니 내에서 설정해 두어야 한다. 나의 경우를 보자면 500G의 디스크를 2개의 파티션으로 나누고 복구 파티션까지 3개가 있었다. 처음엔 복구 파티션을 두고 두개의 파티션을 CentOS 설치 과정에서 묶으려고 했는데 복구 파티션이 두개 파티션 사이에 위치해 합칠 수 없었다. 그래서 맥에서 두개의 파티션을 합쳐주고 다시 설치했다. 사실은 이 과정은 복구 파티션을 두려고 했던 것인데 실제 CentOS를 설치하면서 복구 파티션도 날렸다(원하지 않았지만). 이렇게되면 위 과정이 필요없었을 수 있지만 혹시나해서 남겨둔다.</p>
<p>이제부터는 일반적으로 CentOS를 설치하는 것과 동일하게 설치하면 된다. 설치 방법이 궁금하다면 <a href="https://blog.asamaru.net/2015/10/14/centos-7-minimal-install/">CentOS 7 minimal 설치</a>를  참고해도 된다.</p>
<p>마지막으로 중요한 부분이 있다. 파티션 설치시 <code>/boot/efi</code>을 별도로 지정해야 한다는 것이다. 일반적인 설치에서는 하지 않던 작업인데 맥 미니의 경우 해당 파티션이 기본적으로 없어서 그런 것인지 지정하지 않으면 파티셔닝이 완료되지 않았다. <code>/boot/efi</code>의 용량은 최소 100MB를 지정하도록 권장하는 것 같다. 이 부분 또한 자동 파티셔닝이 아닌 사용자 지정 파티션을 사용해서 발생한 문제일지도 모르겠다. 하지만 개인적인 생각으로 &quot;맥 미니에서 다른 CentOS 설치시 잘 안되는 경우는 이것 때문이지 않을까?&quot;해서 경험을 남겨둔다.</p>
<p>이후부터는 정말 CentOS 설치와 동일하다(일단 나의 경우엔).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/01/27/mysqldump-via-ssh/</id><title type="html">SSH를 사용해서 mysqldump 하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/01/27/mysqldump-via-ssh/"/><published>2016-01-27T19:57:47+09:00</published><updated>2016-01-27T10:57:47+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[SSH 비밀번호 입력없이 로그인하기에 이어서 ssh를 이용해서 MySql 원격 서버의 데이터를 로컬로 dump 받는 방법을 소개하려고 한다. "굳이 이런 방법이 왜 필요한가?"에 대한 의문이 생길 수 있으니 상황부터 설명해야 할 것 같다. mysqldump를 사용하고자 할 경우 mysql client가 설치되어 있어야 한다. CentOS기준으로 mysql은 "mysql", mariadb 기준으로 보자면 "MariaDB-client" 패키지가 설치되어 있어야 한다. 그런데 이 패키지가 설치되지 않은 상태에서 mysqldump를 사용하고자 하는 것이다. 간단히 생각하면 위 패키지를 설치하면 끝인데 굳이 자주 사용되지 않을 기능 때문에 패키지를 설치하고 싶지 않다면 아래에 소개할 내용이 필요하다. 굳이 필요할까 싶지만 성격 문제인지 패키지를 설치하는 것이 싫어서 이렇게 하고 있다. ssh [user]@[host] "mysqldump -uroot --default-character-set=utf8 --skip-triggers --compress [db name] [table name]" > [save file] SSH 비밀번호 입력없이 로그인하기에서 설명했던 공개키 등록이 선행되어 있어야 한다. 아니면 sshpass를 활용하는 방법도 당연히 가능하다. 지난 글과 겹치는 내용이긴하나 이렇게도 사용할 수 있다는 소개 차원에서 글을 남긴다.]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2016/01/26/ssh-login-without-password/">SSH 비밀번호 입력없이 로그인하기</a>에 이어서 ssh를 이용해서 MySql 원격 서버의 데이터를 로컬로 dump 받는 방법을 소개하려고 한다.</p>
<p>&quot;굳이 이런 방법이 왜 필요한가?&quot;에 대한 의문이 생길 수 있으니 상황부터 설명해야 할 것 같다.
mysqldump를 사용하고자 할 경우 mysql client가 설치되어 있어야 한다. CentOS기준으로 mysql은 &quot;mysql&quot;, mariadb 기준으로 보자면 &quot;MariaDB-client&quot; 패키지가 설치되어 있어야 한다. 그런데 이 패키지가 설치되지 않은 상태에서 mysqldump를 사용하고자 하는 것이다. 간단히 생각하면 위 패키지를 설치하면 끝인데 굳이 자주 사용되지 않을 기능 때문에 패키지를 설치하고 싶지 않다면 아래에 소개할 내용이 필요하다. 굳이 필요할까 싶지만 성격 문제인지 패키지를 설치하는 것이 싫어서 이렇게 하고 있다.</p>
<pre class="hljs bash">ssh [user]@[host] <span class="hljs-string">"mysqldump -uroot --default-character-set=utf8 --skip-triggers --compress [db name] [table name]"</span> &gt; [save file]</pre>
<p><a href="https://blog.asamaru.net/2016/01/26/ssh-login-without-password/">SSH 비밀번호 입력없이 로그인하기</a>에서 설명했던 공개키 등록이 선행되어 있어야 한다. 아니면 sshpass를 활용하는 방법도 당연히 가능하다.</p>
<p>지난 글과 겹치는 내용이긴하나 이렇게도 사용할 수 있다는 소개 차원에서 글을 남긴다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/01/26/ssh-login-without-password/</id><title type="html">SSH 비밀번호 입력없이 로그인하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/01/26/ssh-login-without-password/"/><published>2016-01-26T21:15:08+09:00</published><updated>2016-01-26T12:15:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[ssh 사용시 매번 비밀번호를 입력하는 것은 귀찮은 일이다. 그럼에도 불구하고 ssh의 기본 기능에 비밀번호를 미리 입력하는 기능을 제공하지 않는 것은 보안 상의 이유 때문일 것이다. 하지만 비밀번호를 입력하는 귀찮음을 해소하는 것 외에도 스케쥴링 처리 스크립트 등에서 사용자의 비밀번호 입력없이 ssh 접속을 해야할 경우가 있다. 이런 경우에 대비해서 ssh에서는 클라이언트의 공개키를 원격 서버에 미리 등록 시켜두는 방식으로 비밀번호 없이 접속할 수 있는 방법을 제공한다. 사실 이 방법이 보안 상으로도 안전한 편이고 등록하는 과정도 크게 복잡하지 않으므로 가장 권장되는 방법이라고 할 수 있다. 그렇다고 이 방법 외에는 대안이 없는 것은 아니다. expect 명령을 이용해서 비밀번호 입력을 자동화하는 방법과 sshpass를 사용하는 방법이 있다. 사실 sshpass를 몰랐을 때는 expect를 주로 사용했는데 sshpass를 사용하면 훨씬 쉽게 다양한 일을 할 수 있다. 자.. 이제부터 하나씩 방법을 설명하고자 한다. 아래는 CentOS 기준이며 기타 리눅스에서도 거의 동일한 것으로 알고 있다. 1. 공개키 등록 방식 우선 ~/.ssh/id_rsa.pub에 파일이 존재하는지 확인한다. 없다면 아래와 같이 ssh-keygen을 사용해서 개인용 개인키/공개키를 생성한다. ssh-keygen -t rsa 위 명령을 입력하면 몇가지를 물어보는데 특별한 이유가 없다면 그냥 엔터를 계속 눌러서 완료하면 된다. 이렇게 생성하고나면 개인키는 ~/.ssh/id_rsa로 공개키는 ~/.ssh/id_rsa.pub로 생성된다. 이제는 공개키를 접속하려는 원격 서버에 등록해야 한다. 아래와 같이 직접 해당 서버로 복사하는 방법이 있다. scp ~/.ssh/id_rsa.pub [user]@[host]:~/.ssh/authorized_keys 그런데 이렇게하면 기존 파일이 존재할 경우 덮어쓰게 되므로 권장하지 않는다. 대신 아래와 같이 ssh-copy-id를 사용하는 것을 권장한다. ssh-copy-id를 사용하면 원격 서버에 authorized_keys 파일이 없다면 생성해주고 있다면 공개키를 추가해 준다. ssh-copy-id -i ~/.ssh/id_rsa.pub [user]@[host] 여기까지 완료 했다면 비밀번호 없이 ssh 접속이 가능해야 한다. 그런데 간혹 작업을 완료했음에도 불구하고 계속 비밀번호를 물어보는 경우가 있다. 그런 경우는 대부분 원격 서버의 authorized_keys 파일 퍼미션 문제다. 원격 서버에서 퍼미션을 아래와 같은지 확인하고 맞지 않다면 변경해 준다. 대부분의 경우는 접속 문제가 해결된다. chmod 700 ~/.ssh/ chmod 600 ~/.ssh/authorized_keys selinux를 사용하고 있는 경우 추가적으로 아래의 처리가 필요할 수 있다. restorecon -R -v ~/.ssh # 또는 chcon -t ssh_home_t ~/.ssh/ chcon -t ssh_home_t ~/.ssh/authorized_keys 2. sshpass를 사용하는 방식 sshpass는 ssh와는 직접적인 관련이 없는 프로그램으로 별도 설치가 필요하다. 설치되어 있지 않다면 아래와 같이 설치한다. yum --enablerepo=epel -y install sshpass 기본적인 사용은 아래와 같이 할 수 있다. sshpass -p[password] ssh -o StrictHostKeyChecking=no [user]@[host] 위 방식은 서두에서도 이야기 했듯이 비밀번호가 명령 상에 노출되므로 보안상으로는 좋지는 않다. 하지만 필요할 때가 있으니 알아두면 요긴하게 쓰이리라 생각한다. 그리고 sshpass는 접속시 비밀번호를 자동 입력해주는 역할 외에 다음과 같은 일도 할 수 있다. # 원격 서버에서 command 실행 sshpass -p[password] ssh -o StrictHostKeyChecking=no [user]@[host] [command] # 원격 서버로 test.txt 파일 복사(scp) sshpass -p[password] scp -o StrictHostKeyChecking=no test.txt [user]@[host]:~/test.txt 3. expect를 사용하는 방식 sshpass를 사용하면 이 방식은 크게 의미가 없다. 하지만 sshpass를 사용할 수 없는 상황이다. expect를 활용해서 다른 곳에 응용할 수 있으니 참고 차원에서 ssh 자동 로그인 스크립트를 남긴다. sshlogin 파일로 아래의 내용을 저장하고 실행 권한을 준다. #! /usr/bin/expect set idNhost [lrange $argv 0 0] set password [lindex $argv 1] spawn ssh $idNhost expect -re "password: " send "$password\r" interact 사용법은 다음과 같다. ./sshlogin [user]@[host] "[password]"]]></summary><content type="html"><![CDATA[<p>ssh 사용시 매번 비밀번호를 입력하는 것은 귀찮은 일이다. 그럼에도 불구하고 ssh의 기본 기능에 비밀번호를 미리 입력하는 기능을 제공하지 않는 것은 보안 상의 이유 때문일 것이다. 하지만 비밀번호를 입력하는 귀찮음을 해소하는 것 외에도 스케쥴링 처리 스크립트 등에서 사용자의 비밀번호 입력없이 ssh 접속을 해야할 경우가 있다. 이런 경우에 대비해서 ssh에서는 클라이언트의 공개키를 원격 서버에 미리 등록 시켜두는 방식으로 비밀번호 없이 접속할 수 있는 방법을 제공한다. 사실 이 방법이 보안 상으로도 안전한 편이고 등록하는 과정도 크게 복잡하지 않으므로 가장 권장되는 방법이라고 할 수 있다.</p>
<p>그렇다고 이 방법 외에는 대안이 없는 것은 아니다. <code>expect</code> 명령을 이용해서 비밀번호 입력을 자동화하는 방법과 <a href="http://sourceforge.net/projects/sshpass/">sshpass</a>를 사용하는 방법이 있다. 사실 <a href="http://sourceforge.net/projects/sshpass/">sshpass</a>를 몰랐을 때는 <code>expect</code>를 주로 사용했는데 <a href="http://sourceforge.net/projects/sshpass/">sshpass</a>를 사용하면 훨씬 쉽게 다양한 일을 할 수 있다.</p>
<p>자.. 이제부터 하나씩 방법을 설명하고자 한다. 아래는 CentOS 기준이며 기타 리눅스에서도 거의 동일한 것으로 알고 있다.</p>
<h3>1. 공개키 등록 방식</h3>
<p>우선 <code>~/.ssh/id_rsa.pub</code>에 파일이 존재하는지 확인한다. 없다면 아래와 같이 <code>ssh-keygen</code>을 사용해서 개인용 개인키/공개키를 생성한다.</p>
<pre class="hljs bash">ssh-keygen -t rsa</pre>
<p>위 명령을 입력하면 몇가지를 물어보는데 특별한 이유가 없다면 그냥 엔터를 계속 눌러서 완료하면 된다.
이렇게 생성하고나면 개인키는 <code>~/.ssh/id_rsa</code>로 공개키는 <code>~/.ssh/id_rsa.pub</code>로 생성된다.</p>
<p>이제는 공개키를 접속하려는 원격 서버에 등록해야 한다.
아래와 같이 직접 해당 서버로 복사하는 방법이 있다.</p>
<pre class="hljs bash">scp ~/.ssh/id_rsa.pub [user]@[host]:~/.ssh/authorized_keys</pre>
<p>그런데 이렇게하면 기존 파일이 존재할 경우 덮어쓰게 되므로 권장하지 않는다. 대신 아래와 같이 <code>ssh-copy-id</code>를 사용하는 것을 권장한다. <code>ssh-copy-id</code>를 사용하면 원격 서버에 <code>authorized_keys</code> 파일이 없다면 생성해주고 있다면 공개키를 추가해 준다.</p>
<pre class="hljs bash">ssh-copy-id -i ~/.ssh/id_rsa.pub [user]@[host]</pre>
<p>여기까지 완료 했다면 비밀번호 없이 ssh 접속이 가능해야 한다.
그런데 간혹 작업을 완료했음에도 불구하고 계속 비밀번호를 물어보는 경우가 있다. 그런 경우는 대부분 원격 서버의 <code>authorized_keys</code> 파일 퍼미션 문제다. 원격 서버에서 퍼미션을 아래와 같은지 확인하고 맞지 않다면 변경해 준다. 대부분의 경우는 접속 문제가 해결된다.</p>
<pre class="hljs bash">chmod 700 ~/.ssh/
chmod 600 ~/.ssh/authorized_keys</pre>
<p>selinux를 사용하고 있는 경우 추가적으로 아래의 처리가 필요할 수 있다.</p>
<pre class="hljs bash">restorecon -R -v ~/.ssh

<span class="hljs-comment"># 또는</span>

chcon -t ssh_home_t ~/.ssh/
chcon -t ssh_home_t ~/.ssh/authorized_keys</pre>
<h3>2. <a href="http://sourceforge.net/projects/sshpass/">sshpass</a>를 사용하는 방식</h3>
<p><a href="http://sourceforge.net/projects/sshpass/">sshpass</a>는 ssh와는 직접적인 관련이 없는 프로그램으로 별도 설치가 필요하다. 설치되어 있지 않다면 아래와 같이 설치한다.</p>
<pre class="hljs bash">yum --enablerepo=epel -y install sshpass</pre>
<p>기본적인 사용은 아래와 같이 할 수 있다.</p>
<pre class="hljs bash">sshpass -p[password] ssh -o StrictHostKeyChecking=no [user]@[host]</pre>
<p>위 방식은 서두에서도 이야기 했듯이 비밀번호가 명령 상에 노출되므로 보안상으로는 좋지는 않다. 하지만 필요할 때가 있으니 알아두면 요긴하게 쓰이리라 생각한다. 그리고 <a href="http://sourceforge.net/projects/sshpass/">sshpass</a>는 접속시 비밀번호를 자동 입력해주는 역할 외에 다음과 같은 일도 할 수 있다.</p>
<pre class="hljs bash"><span class="hljs-comment"># 원격 서버에서 command 실행</span>
sshpass -p[password] ssh -o StrictHostKeyChecking=no [user]@[host] [<span class="hljs-built_in">command</span>]
<span class="hljs-comment"># 원격 서버로 test.txt 파일 복사(scp)</span>
sshpass -p[password] scp -o StrictHostKeyChecking=no test.txt [user]@[host]:~/test.txt</pre>
<h3>3. expect를 사용하는 방식</h3>
<p><a href="http://sourceforge.net/projects/sshpass/">sshpass</a>를 사용하면 이 방식은 크게 의미가 없다. 하지만 sshpass를 사용할 수 없는 상황이다. expect를 활용해서 다른 곳에 응용할 수 있으니 참고 차원에서 ssh 자동 로그인 스크립트를 남긴다.</p>
<p><strong>sshlogin</strong> 파일로 아래의 내용을 저장하고 실행 권한을 준다.</p>
<pre class="hljs bash"><span class="hljs-comment">#! /usr/bin/expect</span>
<span class="hljs-built_in">set</span> idNhost [lrange <span class="hljs-variable">$argv</span> 0 0]
<span class="hljs-built_in">set</span> password [lindex <span class="hljs-variable">$argv</span> 1]
spawn ssh <span class="hljs-variable">$idNhost</span>
expect -re <span class="hljs-string">"password: "</span>
send <span class="hljs-string">"<span class="hljs-variable">$password</span>\r"</span>
interact</pre>
<p>사용법은 다음과 같다.</p>
<pre class="hljs bash">./sshlogin [user]@[host] <span class="hljs-string">"[password]"</span></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/01/20/detect-soft-navigation-bar-availability-in-android-device-progmatically/</id><title type="html">안드로이드에서 Soft Navigation Bar 검사하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/01/20/detect-soft-navigation-bar-availability-in-android-device-progmatically/"/><published>2016-01-20T20:36:18+09:00</published><updated>2016-01-20T11:36:18+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 기기 중에는 Soft Navigation을 사용하는 것들이 있다. 보통은 뒤로, 메뉴, 홈 버튼 등이 스크린과 분리되어 물리적 버튼으로 구성되어 있으나 이 버튼들이 스크린 하단 영역에 포함되어 있는 경우다. 이런 기기에서는 상황에 딸 하단의 버튼 영역을 숨겨 보다 넓은 공간을 스크린으로 활용할 수 있다. 여기서 다루고자 하는 것은 이런 물리 버튼을 가진 기기와 Soft Navigation을 사용하는 기기를 구분하는 방법이다. 관련 정보를 찾아보면 명확하게 구분할 수 있는 방법을 제시하는 곳을 찾기가 어렵다(안드로이드에서 기기에 관련해서 명확한 구분을 할 수 있는 것을 찾는게 더 빠를지도). 그래서 몇가지를 조사해서 적용한 내용을 남기려고 한다. 이 부분은 현재 테스트할 수 있었던 기기에서만 확인한 정보로 부정확할 수 있음을 양해 바란다(나도 정말 정확한 방법을 찾고 싶다). 우선 아래의 코드를 보자. int id = mChildOfContent.getContext().getResources().getIdentifier("config_showNavigationBar", "bool", "android"); if (id > 0) { useSoftNavigation = mChildOfContent.getContext().getResources().getBoolean(id); } else { if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) { boolean hasBackKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK); boolean hasHomeKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_HOME); useSoftNavigation = (!(hasBackKey && hasHomeKey)); } else { useSoftNavigation = ViewConfiguration.get(mChildOfContent.getContext()).hasPermanentMenuKey(); } } 위 코드는 처음에 정리했던 코드다. 1차적으로 config_showNavigationBar 속성값을 이용해서 사용 유무를 판별한다. 개인적으로 그나마 가장 명시적인 값이라고 생각한다. 문제는 해당 값이 없는 기기가 있다거나 나중에 OS 버전이 올라가면서 속성값이 변경될 우려가 있다는 것이다. 그래서 이 부분을 보완하고자 다른 코드를 덧붙였다. hasPermanentMenuKey()를 사용하는 방법도 API 14 이상이라면 유용하다고 생각했으나 부정확했다. 갤럭시 노트 3에서 잘못된 값이 나왔다. 실제로 조사 결과 예상과 다른 값을 반환하는 경우가 다수 있었다(정확하게는 PermanentMenuKey와 Soft Navigation은 직접적인 관련이 없다는 것이 설명이다). 따라서 이 값은 사용이 부적절하다고 보인다. KeyCharacterMap를 사용하는 방법은 잘 동작하는 것으로 보이나 정확한 방법이라고는 못하겠다. 그래서 실제 사용하는 코드는 hasPermanentMenuKey()를 제외하고 아래와 같이 사용하고 있다(현재까지는). boolean useSoftNavigation; int id = mChildOfContent.getContext().getResources().getIdentifier("config_showNavigationBar", "bool", "android"); if (id > 0) { useSoftNavigation = mChildOfContent.getContext().getResources().getBoolean(id); } else { boolean hasBackKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK); boolean hasHomeKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_HOME); useSoftNavigation = (!(hasBackKey && hasHomeKey)); } 또 다른 방법으로 Screen Size를 이용한 Navigation Bar의 높이를 구하는 방법이 있다. public static Point getNavigationBarSize(Context context) { Point appUsableSize = getAppUsableScreenSize(context); Point realScreenSize = getRealScreenSize(context); // navigation bar on the right if (appUsableSize.x < realScreenSize.x) { return new Point(realScreenSize.x - appUsableSize.x, appUsableSize.y); } // navigation bar at the bottom if (appUsableSize.y < realScreenSize.y) { return new Point(appUsableSize.x, realScreenSize.y - appUsableSize.y); } // navigation bar is not present return new Point(); } public static Point getAppUsableScreenSize(Context context) { WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE); Display display = windowManager.getDefaultDisplay(); Point size = new Point(); display.getSize(size); return size; } public static Point getRealScreenSize(Context context) { WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE); Display display = windowManager.getDefaultDisplay(); Point size = new Point(); if (Build.VERSION.SDK_INT >= 17) { display.getRealSize(size); } else if (Build.VERSION.SDK_INT >= 14) { try { size.x = (Integer) Display.class.getMethod("getRawWidth").invoke(display); size.y = (Integer) Display.class.getMethod("getRawHeight").invoke(display); } catch (IllegalAccessException e) {} catch (InvocationTargetException e) {} catch (NoSuchMethodException e) {} } return size; } 개인적으로는 스크린 사이즈를 이용하는 방법은 가급적 사용을 피하고 있다. OS 버전이 올라가는 경우와 기기의 다양성을 생각할 때 안정적으로 동작할 것이라는 생각이 들지 않기 때문이다. 하지만 대안이 없다면 사용을 고려하려고 한다. 현재까지는 위 방법으로 필요한 요건을 만족하고 있으니 당분간 지켜볼 예정이다. 항상 그러하듯 안드로이드는 개발이 문제가 아니라 파편화된 상황을 고려하는 작업이 가장 큰 골치거리인 것 같다.]]></summary><content type="html"><![CDATA[<p>안드로이드 기기 중에는 Soft Navigation을 사용하는 것들이 있다. 보통은 뒤로, 메뉴, 홈 버튼 등이 스크린과 분리되어 물리적 버튼으로 구성되어 있으나 이 버튼들이 스크린 하단 영역에 포함되어 있는 경우다. 이런 기기에서는 상황에 딸 하단의 버튼 영역을 숨겨 보다 넓은 공간을 스크린으로 활용할 수 있다.</p>
<p>여기서 다루고자 하는 것은 이런 물리 버튼을 가진 기기와 Soft Navigation을 사용하는 기기를 구분하는 방법이다.</p>
<p>관련 정보를 찾아보면 명확하게 구분할 수 있는 방법을 제시하는 곳을 찾기가 어렵다(안드로이드에서 기기에 관련해서 명확한 구분을 할 수 있는 것을 찾는게 더 빠를지도). 그래서 몇가지를 조사해서 적용한 내용을 남기려고 한다. 이 부분은 현재 테스트할 수 있었던 기기에서만 확인한 정보로 부정확할 수 있음을 양해 바란다(나도 정말 정확한 방법을 찾고 싶다).</p>
<p>우선 아래의 코드를 보자.</p>
<pre class="hljs java"><span class="hljs-keyword">int</span> id = mChildOfContent.getContext().getResources().getIdentifier(<span class="hljs-string">"config_showNavigationBar"</span>, <span class="hljs-string">"bool"</span>, <span class="hljs-string">"android"</span>);
<span class="hljs-keyword">if</span> (id &gt; <span class="hljs-number">0</span>) {
    useSoftNavigation = mChildOfContent.getContext().getResources().getBoolean(id);
} <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
        <span class="hljs-keyword">boolean</span> hasBackKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);
        <span class="hljs-keyword">boolean</span> hasHomeKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_HOME);
        useSoftNavigation = (!(hasBackKey &amp;&amp; hasHomeKey));
    } <span class="hljs-keyword">else</span> {
        useSoftNavigation = ViewConfiguration.get(mChildOfContent.getContext()).hasPermanentMenuKey();
    }
}</pre>
<p>위 코드는 처음에 정리했던 코드다.</p>
<p>1차적으로 <code>config_showNavigationBar</code> 속성값을 이용해서 사용 유무를 판별한다. 개인적으로 그나마 가장 명시적인 값이라고 생각한다. 문제는 해당 값이 없는 기기가 있다거나 나중에 OS 버전이 올라가면서 속성값이 변경될 우려가 있다는 것이다. 그래서 이 부분을 보완하고자 다른 코드를 덧붙였다.</p>
<p><a href="http://developer.android.com/intl/ko/reference/android/view/ViewConfiguration.html#hasPermanentMenuKey%28%29">hasPermanentMenuKey()</a>를 사용하는 방법도 API 14 이상이라면 유용하다고 생각했으나 부정확했다. 갤럭시 노트 3에서 잘못된 값이 나왔다. 실제로 조사 결과 예상과 다른 값을 반환하는 경우가 다수 있었다(정확하게는 PermanentMenuKey와 Soft Navigation은 직접적인 관련이 없다는 것이 설명이다). 따라서 이 값은 사용이 부적절하다고 보인다.</p>
<p><a href="http://developer.android.com/intl/ko/reference/android/view/KeyCharacterMap.html">KeyCharacterMap</a>를 사용하는 방법은 잘 동작하는 것으로 보이나 정확한 방법이라고는 못하겠다.</p>
<p>그래서 실제 사용하는 코드는 <a href="http://developer.android.com/intl/ko/reference/android/view/ViewConfiguration.html#hasPermanentMenuKey%28%29">hasPermanentMenuKey()</a>를 제외하고 아래와 같이 사용하고 있다(현재까지는).</p>
<pre class="hljs java"><span class="hljs-keyword">boolean</span> useSoftNavigation;
<span class="hljs-keyword">int</span> id = mChildOfContent.getContext().getResources().getIdentifier(<span class="hljs-string">"config_showNavigationBar"</span>, <span class="hljs-string">"bool"</span>, <span class="hljs-string">"android"</span>);
<span class="hljs-keyword">if</span> (id &gt; <span class="hljs-number">0</span>) {
    useSoftNavigation = mChildOfContent.getContext().getResources().getBoolean(id);
} <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">boolean</span> hasBackKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_BACK);
    <span class="hljs-keyword">boolean</span> hasHomeKey = KeyCharacterMap.deviceHasKey(KeyEvent.KEYCODE_HOME);
    useSoftNavigation = (!(hasBackKey &amp;&amp; hasHomeKey));
}</pre>
<p>또 다른 방법으로 Screen Size를 이용한 Navigation Bar의 높이를 구하는 방법이 있다.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Point <span class="hljs-title">getNavigationBarSize</span><span class="hljs-params">(Context context)</span> </span>{
    Point appUsableSize = getAppUsableScreenSize(context);
    Point realScreenSize = getRealScreenSize(context);

    <span class="hljs-comment">// navigation bar on the right</span>
    <span class="hljs-keyword">if</span> (appUsableSize.x &lt; realScreenSize.x) {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Point(realScreenSize.x - appUsableSize.x, appUsableSize.y);
    }

    <span class="hljs-comment">// navigation bar at the bottom</span>
    <span class="hljs-keyword">if</span> (appUsableSize.y &lt; realScreenSize.y) {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Point(appUsableSize.x, realScreenSize.y - appUsableSize.y);
    }

    <span class="hljs-comment">// navigation bar is not present</span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Point();
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Point <span class="hljs-title">getAppUsableScreenSize</span><span class="hljs-params">(Context context)</span> </span>{
    WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
    Display display = windowManager.getDefaultDisplay();
    Point size = <span class="hljs-keyword">new</span> Point();
    display.getSize(size);
    <span class="hljs-keyword">return</span> size;
}

<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Point <span class="hljs-title">getRealScreenSize</span><span class="hljs-params">(Context context)</span> </span>{
    WindowManager windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
    Display display = windowManager.getDefaultDisplay();
    Point size = <span class="hljs-keyword">new</span> Point();

    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="hljs-number">17</span>) {
        display.getRealSize(size);
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="hljs-number">14</span>) {
        <span class="hljs-keyword">try</span> {
            size.x = (Integer) Display.class.getMethod(<span class="hljs-string">"getRawWidth"</span>).invoke(display);
            size.y = (Integer) Display.class.getMethod(<span class="hljs-string">"getRawHeight"</span>).invoke(display);
        } <span class="hljs-keyword">catch</span> (IllegalAccessException e) {} <span class="hljs-keyword">catch</span> (InvocationTargetException e) {} <span class="hljs-keyword">catch</span> (NoSuchMethodException e) {}
    }

    <span class="hljs-keyword">return</span> size;
}</pre>
<p>개인적으로는 스크린 사이즈를 이용하는 방법은 가급적 사용을 피하고 있다. OS 버전이 올라가는 경우와 기기의 다양성을 생각할 때 안정적으로 동작할 것이라는 생각이 들지 않기 때문이다. 하지만 대안이 없다면 사용을 고려하려고 한다.</p>
<p>현재까지는 위 방법으로 필요한 요건을 만족하고 있으니 당분간 지켜볼 예정이다. 항상 그러하듯 안드로이드는 개발이 문제가 아니라 파편화된 상황을 고려하는 작업이 가장 큰 골치거리인 것 같다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/01/19/centos-emptying-the-buffers-cache/</id><title type="html">linux buffer/cache 비우기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/01/19/centos-emptying-the-buffers-cache/"/><published>2016-01-19T21:45:22+09:00</published><updated>2016-01-19T12:45:22+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[예전에 리눅스에서 swap 메모리 초기화에서 swap 메모리를 비우는 방법을 남겼다. 이번엔 swap이 아닌 "buff/cache"를 비우는 방법을 남기고자 한다. linux에서 top 또는 free 명령으로 메모리 상황을 보면 "buff/cache" 항목이 있다. 이 부분은 실제로 직접 사용하고 있는 메모리가 아니라 말그대로 버퍼와 캐시에 사용된 메모리를 뜻한다. 그렇다면 "굳이 왜 이것을 비우려고 하는가?"하는 의문이 생길 수 있다. 일반적으로 캐시는 느린 장치의 데이터를 빠른 장치에 임시 보관해두고 사용함으로써 성능을 높이는 것이 목적이다. 따라서 캐시는 당연히 사용하는게 좋다. 하지만 hit(적중률)가 낮은 경우엔 캐시를 사용하는 것이 부정적인 영향을 미칠 수 있다. 빠른 장치는 당연히 공간이 한정되어 있기 때문에 모든 정보를 캐시할 수 없으므로 캐시를 관리해야 한다. 이 과정에서 발생하는 비용이 캐시를 사용하는 것보다 크다면 캐시는 사용하지 않는 것이 좋다는 것이다. 캐시에 관한 자세한 내용은 여기서 다루고자하는 것이 아니니 이정도만 설명하고 넘어가자. 실질적으로 이것이 어디에 필요한지에 대해 알아보자. linux에서는 기본적으로 디스크 상의 파일을 읽을 경우 해당 파일을 닫아도 free 메모리로 모두가 즉시 반환되지 않는다. 이유는 이 파일의 정보를 다음 사용에 대비해 cache하기 때문이다. 보다 자세한 내용을 확인하고 싶다면 메모리 관리 (Memory Management)를 참고하자. 이런 파일의 cache와 관련하여 os / mysql 등 여러 분야의 성능 튜닝 내용 등을 쉽게 찾을 수 있다. 대량의 파일이 관리되는 서버의 파일 cache hit가 낮은데 비해 buffer / cache 메모리 사용량이 높을 경우 해당 cache 기능을 끄거나 주기적으로 비움으로써 성능을 개선할 수 있다. 우선 아래와 같이 선택적으로 cache를 비울 수 있다. sync 명령을 사용하는 이유는 해당 cache 기능을 비우기 전에 사용중인 데이터를 sync하기 위한 것이다. pagecache 비우기 sync echo 1 > /proc/sys/vm/drop_caches # 또는 sync sysctl -w vm.drop_caches=1 dentries, inodes 비우기 sync echo 2 > /proc/sys/vm/drop_caches # 또는 sync sysctl -w vm.drop_caches=2 pagecache, dentries, inodes 모두 비우기 sync echo 3 > /proc/sys/vm/drop_caches # 또는 sync sysctl -w vm.drop_caches=3 위에서 1,2,3으로 지정한 값들은 영구적 설정이 아니라 설정되는 그 시점에만 적용된다. 바꿔서 이야기 하자면 /proc/sys/vm/drop_caches는 파일이 아니라 명령어인 셈이다. 실제로 아래와 같이 기본값인 0으로 되돌리려고하면 오류가 난다. $ echo 0 > /proc/sys/vm/drop_caches -bash: echo: write error: 부적절한 인수]]></summary><content type="html"><![CDATA[<p>예전에 <a href="https://blog.asamaru.net/2015/10/02/linux-how-to-clear-memory-swap/">리눅스에서 swap 메모리 초기화</a>에서 swap 메모리를 비우는 방법을 남겼다. 이번엔 swap이 아닌 &quot;buff/cache&quot;를 비우는 방법을 남기고자 한다.</p>
<p>linux에서 <code>top</code> 또는 <code>free</code> 명령으로 메모리 상황을 보면 &quot;buff/cache&quot; 항목이 있다. 이 부분은 실제로 직접 사용하고 있는 메모리가 아니라 말그대로 버퍼와 캐시에 사용된 메모리를 뜻한다. 그렇다면 &quot;굳이 왜 이것을 비우려고 하는가?&quot;하는 의문이 생길 수 있다.</p>
<p>일반적으로 캐시는 느린 장치의 데이터를 빠른 장치에 임시 보관해두고 사용함으로써 성능을 높이는 것이 목적이다. 따라서 캐시는 당연히 사용하는게 좋다. 하지만 hit(적중률)가 낮은 경우엔 캐시를 사용하는 것이 부정적인 영향을 미칠 수 있다. 빠른 장치는 당연히 공간이 한정되어 있기 때문에 모든 정보를 캐시할 수 없으므로 캐시를 관리해야 한다. 이 과정에서 발생하는 비용이 캐시를 사용하는 것보다 크다면 캐시는 사용하지 않는 것이 좋다는 것이다. 캐시에 관한 자세한 내용은 여기서 다루고자하는 것이 아니니 이정도만 설명하고 넘어가자.</p>
<p>실질적으로 이것이 어디에 필요한지에 대해 알아보자.</p>
<p>linux에서는 기본적으로 디스크 상의 파일을 읽을 경우 해당 파일을 닫아도 free 메모리로 모두가 즉시 반환되지 않는다. 이유는 이 파일의 정보를 다음 사용에 대비해 cache하기 때문이다. 보다 자세한 내용을 확인하고 싶다면 <a href="https://wiki.kldp.org/Translations/html/The_Linux_Kernel-KLDP/tlk3.html">메모리 관리 (Memory Management)</a>를 참고하자. 이런 파일의 cache와 관련하여 os / mysql 등 여러 분야의 성능 튜닝 내용 등을 쉽게 찾을 수 있다.</p>
<p>대량의 파일이 관리되는 서버의 파일 cache hit가 낮은데 비해 buffer / cache 메모리 사용량이 높을 경우 해당 cache 기능을 끄거나 주기적으로 비움으로써 성능을 개선할 수 있다.</p>
<p>우선 아래와 같이 선택적으로 cache를 비울 수 있다. <code>sync</code> 명령을 사용하는 이유는 해당 cache 기능을 비우기 전에 사용중인 데이터를 sync하기 위한 것이다.</p>
<p>pagecache 비우기</p>
<pre class="hljs bash">sync
<span class="hljs-built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches
<span class="hljs-comment"># 또는</span>
sync
sysctl -w vm.drop_caches=1</pre>
<p>dentries, inodes 비우기</p>
<pre class="hljs bash">sync
<span class="hljs-built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches
<span class="hljs-comment"># 또는</span>
sync
sysctl -w vm.drop_caches=2</pre>
<p>pagecache, dentries, inodes 모두 비우기</p>
<pre class="hljs bash">sync
<span class="hljs-built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches
<span class="hljs-comment"># 또는</span>
sync
sysctl -w vm.drop_caches=3</pre>
<p>위에서 1,2,3으로 지정한 값들은 영구적 설정이 아니라 설정되는 그 시점에만 적용된다. 바꿔서 이야기 하자면 <code>/proc/sys/vm/drop_caches</code>는 파일이 아니라 명령어인 셈이다. 실제로 아래와 같이 기본값인 0으로 되돌리려고하면 오류가 난다.</p>
<pre class="hljs bash">$ <span class="hljs-built_in">echo</span> 0 &gt; /proc/sys/vm/drop_caches
-bash: <span class="hljs-built_in">echo</span>: write error: 부적절한 인수</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/01/06/xyz-domain-and-cloudflare/</id><title type="html">.xyz 도메인을 구매해서 CloudFlare에 연결하다</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/01/06/xyz-domain-and-cloudflare/"/><published>2016-01-06T16:22:28+09:00</published><updated>2016-01-06T07:22:28+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="thinking" label="thinking" /><summary><![CDATA[어제 CloudFlare Free Plan에 대한 글을 쓰면서 CloudFlare를 적용하는 것에 대해 고민중이라고 했었다. 드디어 오늘 그 고민을 끝내고 CloudFlare를 사용하기 시작했다. 원래 계획은 개인적으로 사용하던 도메인에 적용해서 테스트하는 것이었는데 이 블로그뿐아니라 이메일등 여러 곳에서 사용하고 있어서 새로 도메인을 하나 구매했다. 사실 다른 용도로 도메인이 하나 더 필요하기도 했지만. 새로 구매한 도메인은 .xyz 도메인이다. Wix.com에서는 .xyz 도메인에 대해서 아래와 같이 안내하고 있다. .xyz – '.xyz'는 도메인 이름이 알파벳처럼 XYZ로 끝이 나도록 만드는 독창적인 최상급 도메인(TLD)입니다. 이 최상급 도메인은 짧은 URL 주소로 높은 검색 클릭률을 원하는 회사들에게 적합합니다. 간단히 이야기하자면 특별한 의미가 없는 최상위 도메인이다. 구글이 알파벳이라는 회사를 설립하면서 abc.xyz 라는 도메인을 사용하면서 유명해졌다. 어쨌든 원래 나는 도메인을 CYPACK에서 사용하고 있었다(그냥 조금 싼편이라). 그런데 여기서는 .xyz 도메인을 구매할 수 없었다. 그래서 할 수없이 비싼 가비아에서 구매했다. 사실 XYZ에서 바로 구매하면 $10에 구매할 수 있다. 하지만 해외 사이트라 가비아에서 그냥 샀다. 국제 도메인은 해외에서 사는게 났다는 평이 많지만 그냥 귀찮아서 그냥 샀다. 그런데 지금 행사중이라 .xyz 도메인이 무척 쌌다. 지금 1,400원이면 도메인을 구매할 수 있다. 부가세 포함 1,540원. 하지만 내년에 연장하려면 20,000원을 내고 연장해야 한다. 어쟀든 도메인을 구매하고 바로 CloudFlare에 연결했다. 연결은 아주 간단했고 DNS 변경 후 반영되는데 약간의 시간이 걸린 후 바로 적용되기 시작했다. 이제부터 CloudFlare를 사용해서 여러가지 테스트를 해봐야 할 것 같다. 그리고 어제 CloudFlare Free Plan에서 page rule을 사용할 수 없다고 했었는데 오늘 들어가보니 free plan의 경우도 3개까지는 사용이 가능한 것으로 나와있었다.]]></summary><content type="html"><![CDATA[<p>어제 <a href="https://blog.asamaru.net/2016/01/05/cloudflare-free-plan/">CloudFlare Free Plan</a>에 대한 글을 쓰면서 CloudFlare를 적용하는 것에 대해 고민중이라고 했었다.</p>
<p>드디어 오늘 그 고민을 끝내고 CloudFlare를 사용하기 시작했다. 원래 계획은 개인적으로 사용하던 도메인에 적용해서 테스트하는 것이었는데 이 블로그뿐아니라 이메일등 여러 곳에서 사용하고 있어서 새로 도메인을 하나 구매했다. 사실 다른 용도로 도메인이 하나 더 필요하기도 했지만.</p>
<p>새로 구매한 도메인은 .xyz 도메인이다. Wix.com에서는 .xyz 도메인에 대해서 아래와 같이 안내하고 있다.</p>
<blockquote>
<p>.xyz – '.xyz'는 도메인 이름이 알파벳처럼 XYZ로 끝이 나도록 만드는 독창적인 최상급 도메인(TLD)입니다. 이 최상급 도메인은 짧은 URL 주소로 높은 검색 클릭률을 원하는 회사들에게 적합합니다.</p>
</blockquote>
<p>간단히 이야기하자면 특별한 의미가 없는 최상위 도메인이다. 구글이 알파벳이라는 회사를 설립하면서 abc.xyz 라는 도메인을 사용하면서 유명해졌다.</p>
<p>어쨌든 원래 나는 도메인을 <a href="http://cypack.com">CYPACK</a>에서 사용하고 있었다(그냥 조금 싼편이라). 그런데 여기서는 .xyz 도메인을 구매할 수 없었다. 그래서 할 수없이 비싼 <a href="https://www.gabia.com/">가비아</a>에서 구매했다. 사실 <a href="https://gen.xyz/">XYZ</a>에서 바로 구매하면 $10에 구매할 수 있다. 하지만 해외 사이트라 가비아에서 그냥 샀다. 국제 도메인은 해외에서 사는게 났다는 평이 많지만 그냥 귀찮아서 그냥 샀다.</p>
<p>그런데 지금 행사중이라 .xyz 도메인이 무척 쌌다. 지금 1,400원이면 도메인을 구매할 수 있다. 부가세 포함 1,540원. 하지만 내년에 연장하려면 20,000원을 내고 연장해야 한다.</p>
<p>어쟀든 도메인을 구매하고 바로 CloudFlare에 연결했다. 연결은 아주 간단했고 DNS 변경 후 반영되는데 약간의 시간이 걸린 후 바로 적용되기 시작했다.</p>
<p>이제부터 CloudFlare를 사용해서 여러가지 테스트를 해봐야 할 것 같다.
그리고 어제 <a href="https://blog.asamaru.net/2016/01/05/cloudflare-free-plan/">CloudFlare Free Plan</a>에서 page rule을 사용할 수 없다고 했었는데 오늘 들어가보니 free plan의 경우도 3개까지는 사용이 가능한 것으로 나와있었다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/01/05/cloudflare-free-plan/</id><title type="html">CloudFlare Free Plan</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/01/05/cloudflare-free-plan/"/><published>2016-01-05T23:29:14+09:00</published><updated>2016-01-05T14:29:14+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[블로그를 Github Pages를 이용해 운영하면서 CDN을 적용하려고 여러가지를 알아보고 있었다. 사실 Github 자체가 기본적으로 CDN을 사용하고 있는 것으로 안다. USE A CDN ON GITHUB PAGES에서도 그렇게 설명하고 있다. 그리고 이 글에서는 그럼에도 불구하고 CDN을 별도로 붙이는 것이 필요한 이유도 설명하고 있다. 사실 나의 경우엔 페이지 로딩 속도에 큰 불만이 있는 것이 아니므로 굳이 별도의 CDN을 붙여야 할 이유는 없지만 CDN 적용을 테스트 해보기 위한 용도로 적용을 고려중이었다. 예전부터 소문으로 들었던 CloudFlare를 적용해보려고 틈틈이 조사를 해오고 있었다. 사실 장점이야 너무나도 잘 알려져 있으므로 문제가 생길 수 있는 단점 부분을 주로 조사를 하다보니 몇가지 신경쓰이는 것들이 보였다. 우선 이 부분들을 이야기하기 전에 잘 알려진 장점부터 간략히 이야기하고자 한다(관련성이 있어서). 무료다. 아주 강력한 장점이다. CDN 서비스를 무료로 사용할 수 있다니. 대역폭 / 트래픽 제한이 없다. 서버 유입 트래픽을 절감해준다. DNS 서비스를 제공한다. 서브 도메인별로 선택적으로 CDN을 적용할 수 있다. DDoS 공격을 방어해준다. 응답 속도를 높여준다(해외에 서버가 있거나 해외로 서비스 해야하는 경우에 효과적이다). 무료 플랜에서도 SSL을 사용할 수 있다. 서버 정지 상태에서는 캐시된 데이터를 사용해 서비스를 유지시켜 준다. 보안 강화. 실제 서비스 서버가 cloudflare 뒤로 숨겨지므로 이에 따른 보안 설정을 통해 보안을 강화할 수 있다. 이 외에도 활용 상황/방법에 따라 여러가지가 있을 수 있겠지만 국내에서는 대부분 호스팅 서비스의 트래픽 절감을 위해 가장 많이 사용하는 것으로 보인다. 그렇다면 단점은 무엇이 있을까? 일반적인 CDN의 용도를 생각한다면 단점은 거의 없다고 본다. 대부분 더 좋은 환경을 위해서 사용하는 부가 요소이니 단점이 많다면 사용할 이유가 없을 것이다. 하지만 cloudflare를 무료로 사용하게 아래와 같은 제약사항이 존재한다. 업로드에 제한(100M)이 있다. 무료일 경우에. 크롤링 주기가 1주일로 길다. 캐싱 정책 설정을 할 수 없다. 이 외에도 더 있는지는 모르겠지만 잘 알려진 것은 이 정도다. 그런데 이 정도의 문제라면 정적 리소스에 CDN을 적용하는데에는 큰 제약사항이 되지 않는다. 하지만 다른 문제들에 대한 이야기가 많이 거론되고 있다. 대표적인 것이 한국에서 접속했음에도 한국 CDN 서버를 사용하지 않고 해외 CDN 서버를 사용해서 서비스가 더 느려지는 경우가 있다는 것이다. "cloudflare CDN 위치가 원래 오락가락 하나요?"라는 글에서 사례가 언급되었는데 다른 곳에서도 비슷한 내용들이 보이고 있다. 사실 이 부분에 대해서는 검토가 필요한 부분이라고 생각한다. 요즘 잘나가는 모바일 앱의 서비스가 ip를 조회해보니 cloudflare를 사용하고 있었다. 위 문제가 심각하다면 해당 모바일 앱이 서비스를 운영하는데 문제가 발생 했을텐데 관련 이슈를 본 적이 없다. 그리고 오늘 다른 부분을 찾아보다가 찾게된 글이 "CloudFlare의 DDOS 공격 보호?"이다. 여기서 보면 익히 알고있는 것과 달리 무료 플랜의 경우엔 DDoS 방어가 제한적이라는 것이다. 실제로 cloudflare의 사이트를 보면 "Does CloudFlare offer DDoS protection to Free and Pro plans?"라는 글에서 이 부분을 안내하고 있다. 결론적으로 보자면 cloudflare를 적용하는 것이 옳은 선택이라고 생각된다. 문제가 될 수 있는 이슈가 있지만 적용 사례들을 종합적으로 보자면 현재까지는 cloudflare의 대안을 찾을 수 없다. 단, 무료 사용에 한해서다. 마지막으로 "CloudFlare's Free CDN and You"에서 언급된 cloudflare에 대한 설명 중 일부를 참고용으로 발췌하여 아래에 첨부한다. What kind of static content does CloudFlare cache? CloudFlare caches common static content file extensions, including JavaScript, CSS and images. The full list of what CloudFlare caches can be found here. Does CloudFlare cache dynamic content, such as HTML or PHP? CloudFlare does not currently cache these content types. 간단히 이야기하자면 cloudflare는 html, php와 같은 동적 콘텐츠는 cache하지 않고 JavaScript, CSS, image와 같은 정적 파일만 cache 처리한다는 것이다. 따라서 적용 도메인에 정적 콘텐츠와 동적 콘텐츠가 섞여 있더라도 알아서 구분하여 처리한다는 뜻이다. 정적 콘텐츠에 해당하는 파일 확장자 리스트는 Which file extensions does CloudFlare cache for static content?에 안내되어 있다. 하지만 필요하다면 cloudflare Page Rule을 사용해서 cache 하도록 지정할 수 있다고 한다(HTTP header를 설정을 통해 cache를 지정할 수 있다는 이야기도 있으나 정확한 메뉴얼을 아직 찾지 못했다).]]></summary><content type="html"><![CDATA[<p>블로그를 Github Pages를 이용해 운영하면서 <a href="https://ko.wikipedia.org/wiki/%EC%BD%98%ED%85%90%EC%B8%A0_%EC%A0%84%EC%86%A1_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC">CDN</a>을 적용하려고 여러가지를 알아보고 있었다. 사실 Github 자체가 기본적으로 CDN을 사용하고 있는 것으로 안다. <a href="https://helloanselm.com/2013/use-a-cdn-on-github-pages/">USE A CDN ON GITHUB PAGES</a>에서도 그렇게 설명하고 있다. 그리고 이 글에서는 그럼에도 불구하고 CDN을 별도로 붙이는 것이 필요한 이유도 설명하고 있다.</p>
<p>사실 나의 경우엔 페이지 로딩 속도에 큰 불만이 있는 것이 아니므로 굳이 별도의 CDN을 붙여야 할 이유는 없지만 CDN 적용을 테스트 해보기 위한 용도로 적용을 고려중이었다.</p>
<p>예전부터 소문으로 들었던 <a href="https://www.cloudflare.com/">CloudFlare</a>를 적용해보려고 틈틈이 조사를 해오고 있었다. 사실 장점이야 너무나도 잘 알려져 있으므로 문제가 생길 수 있는 단점 부분을 주로 조사를 하다보니 몇가지 신경쓰이는 것들이 보였다. 우선 이 부분들을 이야기하기 전에 잘 알려진 장점부터 간략히 이야기하고자 한다(관련성이 있어서).</p>
<ul>
<li>무료다. 아주 강력한 장점이다. CDN 서비스를 무료로 사용할 수 있다니.</li>
<li>대역폭 / 트래픽 제한이 없다.</li>
<li>서버 유입 트래픽을 절감해준다.</li>
<li>DNS 서비스를 제공한다. 서브 도메인별로 선택적으로 CDN을 적용할 수 있다.</li>
<li><strong>DDoS 공격을 방어해준다.</strong></li>
<li>응답 속도를 높여준다(해외에 서버가 있거나 해외로 서비스 해야하는 경우에 효과적이다).</li>
<li>무료 플랜에서도 SSL을 사용할 수 있다.</li>
<li>서버 정지 상태에서는 캐시된 데이터를 사용해 서비스를 유지시켜 준다.</li>
<li>보안 강화. 실제 서비스 서버가 cloudflare 뒤로 숨겨지므로 이에 따른 보안 설정을 통해 보안을 강화할 수 있다.</li>
</ul>
<p>이 외에도 활용 상황/방법에 따라 여러가지가 있을 수 있겠지만 국내에서는 대부분 호스팅 서비스의 트래픽 절감을 위해 가장 많이 사용하는 것으로 보인다.</p>
<p>그렇다면 단점은 무엇이 있을까? 일반적인 CDN의 용도를 생각한다면 단점은 거의 없다고 본다. 대부분 더 좋은 환경을 위해서 사용하는 부가 요소이니 단점이 많다면 사용할 이유가 없을 것이다. 하지만 cloudflare를 무료로 사용하게 아래와 같은 제약사항이 존재한다.</p>
<ul>
<li>업로드에 제한(100M)이 있다. 무료일 경우에.</li>
<li>크롤링 주기가 1주일로 길다.</li>
<li>캐싱 정책 설정을 할 수 없다.</li>
</ul>
<p>이 외에도 더 있는지는 모르겠지만 잘 알려진 것은 이 정도다. 그런데 이 정도의 문제라면 정적 리소스에 CDN을 적용하는데에는 큰 제약사항이 되지 않는다.</p>
<p>하지만 다른 문제들에 대한 이야기가 많이 거론되고 있다. 대표적인 것이 한국에서 접속했음에도 한국 CDN 서버를 사용하지 않고 해외 CDN 서버를 사용해서 서비스가 더 느려지는 경우가 있다는 것이다. &quot;<a href="https://www.xpressengine.com/qna/22994192">cloudflare CDN 위치가 원래 오락가락 하나요?</a>&quot;라는 글에서 사례가 언급되었는데 다른 곳에서도 비슷한 내용들이 보이고 있다. 사실 이 부분에 대해서는 검토가 필요한 부분이라고 생각한다. 요즘 잘나가는 모바일 앱의 서비스가 ip를 조회해보니 cloudflare를 사용하고 있었다. 위 문제가 심각하다면 해당 모바일 앱이 서비스를 운영하는데 문제가 발생 했을텐데 관련 이슈를 본 적이 없다.</p>
<p>그리고 오늘 다른 부분을 찾아보다가 찾게된 글이 &quot;<a href="https://blog.ryush00.me/archives/121">CloudFlare의 DDOS 공격 보호?</a>&quot;이다. 여기서 보면 익히 알고있는 것과 달리 무료 플랜의 경우엔 DDoS 방어가 제한적이라는 것이다. 실제로 cloudflare의 사이트를 보면 &quot;<a href="https://support.cloudflare.com/hc/en-us/articles/200170186-Does-CloudFlare-offer-DDoS-protection-to-Free-and-Pro-plans-">Does CloudFlare offer DDoS protection to Free and Pro plans?</a>&quot;라는 글에서 이 부분을 안내하고 있다.</p>
<p>결론적으로 보자면 cloudflare를 적용하는 것이 옳은 선택이라고 생각된다. 문제가 될 수 있는 이슈가 있지만 적용 사례들을 종합적으로 보자면 현재까지는 cloudflare의 대안을 찾을 수 없다. 단, 무료 사용에 한해서다.</p>
<hr />
<p>마지막으로 <a href="https://blog.cloudflare.com/cloudflares-free-cdn-and-you/">&quot;CloudFlare's Free CDN and You&quot;</a>에서 언급된 cloudflare에 대한 설명 중 일부를 참고용으로 발췌하여 아래에 첨부한다.</p>
<blockquote>
<p><strong>What kind of static content does CloudFlare cache?</strong>
CloudFlare caches common static content file extensions, including JavaScript, CSS and images. The full list of what CloudFlare caches can be found here.</p>
<p><strong>Does CloudFlare cache dynamic content, such as HTML or PHP?</strong>
CloudFlare does not currently cache these content types.</p>
</blockquote>
<p>간단히 이야기하자면 cloudflare는 html, php와 같은 동적 콘텐츠는 cache하지 않고 JavaScript, CSS, image와 같은 정적 파일만 cache 처리한다는 것이다. 따라서 적용 도메인에 정적 콘텐츠와 동적 콘텐츠가 섞여 있더라도 알아서 구분하여 처리한다는 뜻이다.
정적 콘텐츠에 해당하는 파일 확장자 리스트는 <a href="https://support.cloudflare.com/hc/en-us/articles/200172516-What-file-extensions-does-CloudFlare-cache-for-static-content-">Which file extensions does CloudFlare cache for static content?</a>에 안내되어 있다.</p>
<p>하지만 필요하다면 cloudflare Page Rule을 사용해서 cache 하도록 지정할 수 있다고 한다(HTTP header를 설정을 통해 cache를 지정할 수 있다는 이야기도 있으나 정확한 메뉴얼을 아직 찾지 못했다).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/01/05/composer-github-token/</id><title type="html">composer 사용시 github token을 요구할 때</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/01/05/composer-github-token/"/><published>2016-01-05T21:26:29+09:00</published><updated>2016-01-05T12:26:29+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[php composer를 사용해서 의존성 모듈을 설치하려고 할 때 아래와 같이 Token을 요구하는 경우가 있다. $ composer update Loading composer repositories with package information Cloning failed using an ssh key for authentication, enter your GitHub credentials to access private repos Head to https://github.com/settings/tokens/new?scopes=repo&description=Composer+on+dev.vagrant.startupbridgeva.com+2015-12-30+0812 to retrieve a token. It will be stored in "/home/web/.composer/auth.json" for future use by Composer. Token (hidden): 여기서의 Token은 github에서 생성한 Personal access tokens을 넣으라는 것이다. 사실 대부분의 경우엔 여기서 그냥 Enter를 눌러도 설치가 된다(원래 그런 것인지는 몰라도 나의 경우엔 되는 경우가 많았다). 그런데 간혹 오류를 내면서 설치가 중단되는 경우가 있다. 사실 중단되지 않더라도 앞으로도 계속 물어보므로 그냥 한번 입력하는 것이 낫다. 우선 Github의 Personal access tokens에 가면 기존에 생성된 token이 목록으로 표시된다. 그런데 기존에 생성된 token은 그 값을 볼 수가 없고 수정(Edit)에서 재생성하거나 권한을 변경하거나 삭제하는 기능만 제공된다. 사실 이 token은 여러 개를 만들어도 상관없으므로 기존 token을 모른다면 상단에 "Generate new token"을 눌러서 그냥 새로 생성하면 된다. 권한도 기본 설정 상태로 만들어도 Composer를 사용하는데는 문제가 없다. 어쨌든 새로 생성하고 나면 token을 보여주는데 이 값을 복사해서 composer에 입력하면 된다. (hidden)이라고 표시된 것과 같이 입력값이 보이지 않지만 붙여넣기를 하면 입력된 것이므로 Enter를 누르면 된다. 이렇게 한번 넣어주고 나면 앞으로는 물어보지 않는다. 이유는 Composer가 입력한 token 값을 auth.json 파일로 저장해주기 때문이다. 해당 파일을 열어보면 아래와 같이 저장되어 있다. { "github-oauth": { "github.com": "[입력한 token]" } } 사실 이 방법은 Composer가 요청 시에 입력해주는 방식이었고 auth.json refers to "github.com" instead of "api.github.com" for authenticated api calls에 언급된 것처럼 미리 설정해 두는 것도 가능하다. composer config -g --unset github-oauth.api.github.com composer config -g github-oauth.github.com TOKEN 여기서 -g 옵션은 global 설정으로 지정하는 것인데 현재 프로젝트에만 지정하고 싶다면 -g를 빼면 된다(나의 경우엔 -g 옵션 사용시 ~/.composer/auth.json에 해당 내용이 추가되긴 했는데 계속 Token을 물어봐서 local에 그냥 추가했다).]]></summary><content type="html"><![CDATA[<p>php <a href="https://getcomposer.org/">composer</a>를 사용해서 의존성 모듈을 설치하려고 할 때 아래와 같이 Token을 요구하는 경우가 있다.</p>
<pre class="hljs bash">$ composer update
Loading composer repositories with package information
Cloning failed using an ssh key <span class="hljs-keyword">for</span> authentication, enter your GitHub credentials to access private repos
Head to https://github.com/settings/tokens/new?scopes=repo&amp;description=Composer+on+dev.vagrant.startupbridgeva.com+2015-12-30+0812
to retrieve a token. It will be stored <span class="hljs-keyword">in</span> <span class="hljs-string">"/home/web/.composer/auth.json"</span> <span class="hljs-keyword">for</span> future use by Composer.
Token (hidden):</pre>
<p>여기서의 Token은 github에서 생성한 <a href="https://github.com/settings/tokens">Personal access tokens</a>을 넣으라는 것이다. 사실 대부분의 경우엔 여기서 그냥 Enter를 눌러도 설치가 된다(원래 그런 것인지는 몰라도 나의 경우엔 되는 경우가 많았다). 그런데 간혹 오류를 내면서 설치가 중단되는 경우가 있다. 사실 중단되지 않더라도 앞으로도 계속 물어보므로 그냥 한번 입력하는 것이 낫다.</p>
<p>우선 Github의 <a href="https://github.com/settings/tokens">Personal access tokens</a>에 가면 기존에 생성된 token이 목록으로 표시된다. 그런데 기존에 생성된 token은 그 값을 볼 수가 없고 수정(Edit)에서 재생성하거나 권한을 변경하거나 삭제하는 기능만 제공된다. 사실 이 token은 여러 개를 만들어도 상관없으므로 기존 token을 모른다면 상단에 &quot;Generate new token&quot;을 눌러서 그냥 새로 생성하면 된다. 권한도 기본 설정 상태로 만들어도 Composer를 사용하는데는 문제가 없다. 어쨌든 새로 생성하고 나면 token을 보여주는데 이 값을 복사해서 composer에 입력하면 된다. (hidden)이라고 표시된 것과 같이 입력값이 보이지 않지만 붙여넣기를 하면 입력된 것이므로 Enter를 누르면 된다.</p>
<p>이렇게 한번 넣어주고 나면 앞으로는 물어보지 않는다. 이유는 Composer가 입력한 token 값을 <code>auth.json</code> 파일로 저장해주기 때문이다. 해당 파일을 열어보면 아래와 같이 저장되어 있다.</p>
<pre class="hljs json">{
    <span class="hljs-attr">"github-oauth"</span>: {
        <span class="hljs-attr">"github.com"</span>: <span class="hljs-string">"[입력한 token]"</span>
    }
}</pre>
<p>사실 이 방법은 Composer가 요청 시에 입력해주는 방식이었고 <a href="https://github.com/composer/composer/issues/3609">auth.json refers to &quot;github.com&quot; instead of &quot;api.github.com&quot; for authenticated api calls</a>에 언급된 것처럼 미리 설정해 두는 것도 가능하다.</p>
<pre class="hljs bash">composer config -g --<span class="hljs-built_in">unset</span> github-oauth.api.github.com
composer config -g github-oauth.github.com TOKEN</pre>
<p>여기서 <code>-g</code> 옵션은 global 설정으로 지정하는 것인데 현재 프로젝트에만 지정하고 싶다면 <code>-g</code>를 빼면 된다(나의 경우엔 <code>-g</code> 옵션 사용시 <code>~/.composer/auth.json</code>에 해당 내용이 추가되긴 했는데 계속 Token을 물어봐서 local에 그냥 추가했다).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/01/05/git-status-fatal-index-file-smaller-than-expected/</id><title type="html">git [fatal: index file smaller than expected] 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/01/05/git-status-fatal-index-file-smaller-than-expected/"/><published>2016-01-05T21:00:02+09:00</published><updated>2016-01-05T12:00:02+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="git" label="git" /><summary><![CDATA[git를 사용하다 보면 여러가지 이유로 아래와 같은 오류를 만날 수 있다. $ git status fatal: index file smaller than expected 이 경우는 git의 index가 훼손된 상태로 size가 0인 경우가 많다. 해결 방법은 훼손된 index를 복구해야 하는데 사실상 복구는 거의 힘들고 대부분 새로 생성해야 한다. 대부분은 아래의 방법을 제시하는 경우가 많다. rm .git/index git add . 그런데 위 방법으로 하면 변경 상태가 제대로 복구되지 않고 모두 new로 추가되는 경우가 있다. 따라서 변경 상태를 유지하면서 복구하려면 아래의 방법을 사용한다. $ rm .git/index $ git reset HEAD . 위 방법들을 적용하기 전에 소스 데이터를 백업하길 권장한다. 혹시라도 index가 정상적으로 복구되지 않는다면 새로 clone을 받아서 소스 데이터를 복사해주는 방식으로 복구하는 수 밖에 없기 때문이다(내가 아는 범위 내에선).]]></summary><content type="html"><![CDATA[<p>git를 사용하다 보면 여러가지 이유로 아래와 같은 오류를 만날 수 있다.</p>
<pre class="hljs bash">$ git status
fatal: index file smaller than expected</pre>
<p>이 경우는 git의 index가 훼손된 상태로 size가 0인 경우가 많다.
해결 방법은 훼손된 index를 복구해야 하는데 사실상 복구는 거의 힘들고 대부분 새로 생성해야 한다.</p>
<p>대부분은 아래의 방법을 제시하는 경우가 많다.</p>
<pre class="hljs bash">rm .git/index
git add .</pre>
<p>그런데 위 방법으로 하면 변경 상태가 제대로 복구되지 않고 모두 new로 추가되는 경우가 있다. 따라서 변경 상태를 유지하면서 복구하려면 아래의 방법을 사용한다.</p>
<pre class="hljs bash">$ rm .git/index  
$ git reset HEAD .</pre>
<p><strong>위 방법들을 적용하기 전에 소스 데이터를 백업하길 권장한다.</strong> 혹시라도 index가 정상적으로 복구되지 않는다면 새로 clone을 받아서 소스 데이터를 복사해주는 방식으로 복구하는 수 밖에 없기 때문이다(내가 아는 범위 내에선).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/24/using-tar-for-differential-backup-with-atime-preserve/</id><title type="html">tar를 이용한 증분 백업 / 복원 + atime-preserve</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/24/using-tar-for-differential-backup-with-atime-preserve/"/><published>2015-12-24T21:45:15+09:00</published><updated>2015-12-24T12:45:15+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[서버를 운영하면서 가장 중요한 부분을 꼽으라면 백업을 꼽을 것이다. 안정적인 서버의 운영도 중요한 문제지만 소중한 데이터를 보호하는 것은 더 중요한 문제이다. 백업의 방법은 다양하다. RAID를 이용한 백업, sync를 통한 원격 백업, 파일을 압축해서 보관하는 백업, 백업 장비를 이용한 백업 등 많은 종류의 방법이 존재한다. 하지만 나는 백업의 방법 보다 백업 정책이 더 중요하다고 생각한다. 그중에서도 가장 중요한 원칙은 백업본은 원본 데이터와 함께 두지 않는다는 것이다. 다시말해 백업본은 원격지로 보내서 보관하여 원본 데이터가 있는 장소가 복구 불가능한 상황이 되더라도 데이터를 살릴 수 있어야 한다는 것이다. 나의 경우엔 다음과 같은 방식으로 백업본을 관리한다. 원본 데이터를 해당 서버에서 1차 백업 백업된 데이터를 백업 서버로 sync하여 2차 백업 백업 서버의 데이터를 원격지 백업 서버로 sync하여 3차 백업 위 정책이 최선이라는 것은 아니지만 나에게 주어진 여건 내에서 할 수 있는 나름의 최선이라고 생각한다. 비용의 여유가 있다면 백업 솔루션을 사용하는 것이 더욱 좋겠지만 아직은 여건이 안된다. 이 글에서 다루고자하는 이야기는 1차 백업(원본 데이터 보관 서버 내 백업)시 증분 백업을 적용하는 부분이다. 증분 백업은 최종 백업된 상태 이후로 변경된 사항만 다시 백업하는 방식으로 full 백업에 비해 자원 소모가 적다. 그렇다고 지속적인 증분 백업만 할 수는 없으므로(복원 과정이 너무 길어질 수 있고 데이터의 손실 위험이 있을 수 있으므로) 나의 경우엔 일요일 새벽에 full 백업을 하고 주간 동안에는 증분 백업을 시행한다. 이러한 일련의 과정에서 가장 중요한 역할을 하는 것이 tar다. 다른 압축 프로그램들을 사용할 수도 있지만 대부분의 서버에서 기본적으로 설치하는 tar를 사용하는 것이 가장 범용적이라 나는 tar를 압축 백업에 사용한다. 참고로 여기서는 tar의 기본적인 사용법에 대해서는 다루지 않는다. 증분 백업의 원리에 대해서는 Using tar to Perform Incremental Dumps와 bdsatish/gist:5650700 - Differential backups를 참고하면 도움이 될 것이다. 그리고 incremental backups with tar에는 기본적인 설명과 증분 백업용 스크립트를 안내하고 있다(참고만 하자). 그리고 미리 한가지를 설명할 것이 있다. 이것은 증분 백업과 직접적인 상관이 있는 것은 아니지만 필요한 경우가 있다. 그것은 다름이 아니라 백업시 파일의 atime을 보존하는 것이다. atime에 대해서는 Difference between mtime, ctime and atime를 참고하면 되는데 간단히 이야기하자면 해당 파일의 최종 access time을 뜻한다. 그렇다면 이게 백업과 무슨 상관이 있을까? tar를 사용해서 파일을 압축하면 atime이 압축 시점으로 변경된다. 그런데 백업을 하면서 atime은 그대로 보존해야 할 수도 있다. 예를들면 cache 파일의 경우 오랫동안 access가 없는 경우 삭제하는 것이 효율이 높이는 방법이므로 삭제시 검사를 위해 atime을 유지해야 한다. 그렇지 않으면 백업할 때마다 최종 access 시점이 변경되면서 언제 실제 access가 일어났었는지 확인할 수 없게 된다. 이 부분은 예시일 뿐이므로 그렇다고만 생각하자. 실제로 파일 access가 많은 곳에서는 성능을 높이기 위해 access time을 기록하지 않도록 설정하기 때문이다. 게다가 cache 파일은 손실되어도 문제가 되지 않으므로 백업에서 아예 제외하는 것이 맞을 것이다. 어쨌든 어떠한 목적으로 인해 백업시 atime을 유지하고자 한다면 tar 사용시 --atime-preserve 옵션을 주면 된다. 자세한 설명은 GNU tar: an archiver tool - 8.2 Handling File Attributes을 참고하자. 그런데 이 옵션을 사용할 경우 유의할 점이 하나 있다. --atime-preserve을 그냥 사용하면 --atime-preserve=replace로 동작하는데 이 경우는 증분 백업이 정상적으로 되지 않는다(계속 full 백업이 일어난다). 이 옵션은 대부분의 시스템에서 동작하나 증분 백업이 정상적이지 않을 수 있다고 메뉴얼에도 설명하고 있다. 그러면 atime을 유지하면서 증분 백업을 하려면 어떻게 해야하나? --atime-preserve=system 옵션을 사용하면 된다. 이 옵션에 대해서도 메뉴얼에 나와 있는데 시스템에 따라서 지원하지 않을 수도 있다고하니 유의하자(CentOS 7에서는 정상 동작했다). 이제부터는 증분 백업에 대해서 본격적으로 알아보자. 그런데 사실은 아주 간단하다. -g 옵션을 사용해서 백업 파일에 대한 기록을 남겨서 보관하는 것만 추가하면 기존의 tar 압축과 다를 것이 없다. 예를들어 아래의 스크립트를 보자. tar -g backup.snap -zcf backup.tgz /backup/target/ 위처럼 실행을 하면 /backup/target/ 폴더를 backup.tgz로 압축해준다. 그런데 일반 압축과의 차이는 backup.snap라는 파일이 하나 더 생긴다는 것이다. 이 파일은 압축한 파일들의 정보로 이후 증분 백업시 데이터로 사용되므로 보관해야 한다. 방금했던 압축은 증분이 아닌 full 백업이다. -g 옵션으로 넘겨주는 데이터가 없다면 이전 백업을 확인할 수 없으므로 full 백업을 한다. 자.. 이제 다시 아래의 스크립트를 보자. cp backup.snap backup-1.snap tar -g backup-1.snap -zcf backup-1.tgz /backup/target/ 이번에도 최초의 full 백업과 별반 다르지 않다. 다만, snapshot 파일을 복사해서 사용했다는 차이만 있다. -g 옵션을 사용하면 백업시 참조만 하는 것이 아니라 이번 백업의 정보를 보관하므로 내용을 덮어쓰지 않도록 복사해서 사용한 것이다. 위 과정을 통해 압축한 결과 파일들을 보면 backup.tgz는 용량이 커도 backup-1.tgz는 용량이 적을 것이다(대상 폴더에 파일이 거의 없었다면 별반 차이가 나지 않을 수 있다). backup-1.tgz는 증분 백업된 파일이기 때문이다. 마지막으로 이 상태에서 다시 증분 백업하는 것을 한번만 더 보자. cp backup-1.snap backup-2.snap tar -g backup-2.snap -zcf backup-2.tgz /backup/target/ 굳이 설명하지 않아도 보면 이해가 될 것이다. 그럼에도 한번 더 적는 이유는 cp backup.snap backup-2.snap 처럼 최초 snapshot에서 시작해야 하는지 마지막 snapshot에서 시작해야 하는지 헛갈릴 수 있기 때문이다. 사실 이 부분은 증분 백업 방식에 따라 차이가 나는 부분인데 뒤에 자세히 설명할 것이므로 일단은 그렇다고 생각하자. 이로써 증분 백업에 대한 기본적인 설명이 끝났다. 생각보다 아주 간단하다. 하지만 이해를 돕기 위해 아래에 예시를 하나 첨부한다. 우선 백업 과정이다. 이후의 예시들은 명령 중간 중간에 ls -al 등으로 test 폴더의 상태를 확인해 가면서 진행하면 이해가 더 쉬울 것이다. mkdir test echo "1" > test/1.txt echo "2" > test/2.txt tar -g backup.snap -zcf backup.tgz ./test/ echo "3" > test/3.txt echo "4" > test/4.txt cp backup.snap backup-1.snap tar -g backup-1.snap -zcf backup-1.tgz ./test/ rm -f test/4.txt cp backup-1.snap backup-2.snap tar -g backup-2.snap -zcf backup-2.tgz ./test/ echo "5" > test/5.txt echo "6" > test/6.txt cp backup-2.snap backup-3.snap tar -g backup-3.snap -zcf backup-3.tgz ./test/ 이번엔 증분 백업된 내용에서 복원하는 과정이다. # 복원 과정을 확인하기 위해 백업한 폴더는 일단 지운다. rm -rf test tar zxvf backup-0.tgz ls -al ./test/ tar --incremental -zxvf backup-1.tgz ls -al ./test/ tar --incremental -zxvf backup-2.tgz ls -al ./test/ tar --incremental -zxvf backup-3.tgz ls -al ./test/ 그런데 이상하게 보이는 부분이 있을 수 있다. 압축할 때 사용했던 snapshot 파일을 복원시에는 사용하지 않는다는 것이다. 대신에 --incremental를 사용하고 있다. 이게 가능한 이유는 tgz 파일이 이미 자신에게 필요한 정보를 모두 가지고 있기 때문이다. 단, 정상적인 복원를 위해서는 백업한 순서대로 복원해야 한다. 그리고 --incremental 대신 --listed-incremental=/dev/null를 사용해도 무방하다. 그리고 이 부분에 대해서는 유의할 점이 한가지 있다. 다른 대부분의 설명글에 보면 snapshot 파일을 복원시에 사용한다. 그럼에도 불구하고 내가 이렇게 설명하는 것은 메뉴얼에 동일하게 나와있으며 위 실험 결과를 보면 알 수 있듯이 정상 동작하기 때문이다. 하지만 tar의 버전에 따른 차이일 수도 있으니 유의하자. 자.. 다시 백업 과정을 한번 생각해보자. 복원시에 snapshot 파일이 필요하지 않다면 굳이 백업시마다 snapshot 파일을 복사하거나 하지 않고 계속 같은 파일을 덮어쓰도록 하면 안될까? 결론부터 이야기 하자면 당연히 가능하다. 그럼 굳이 복사를 했던 이유는 뭘까? 이 부분은 증분 백업의 방법 중 level을 증가시키면서 백업하는 방법을 보여주기 위해서였다. 따라서 이 방법에서는 backup.snap 파일을 다음 백업에서도 사용해도 된다. 데이터를 덮어쓰겠지만 어짜피 level을 증가시키면서 백업하는 것이므로 상관없다. 이번엔 level-0와 level-1만 생성하는 백업 과정을 한번 보자. 이를 예를들어 설명하자면 다음과 같다. 최초에 full 백업(level-0) 한다. 다음 백업에서 증분 백업(level-1)으로 백업한다. 여기까지는 위의 방식과 같다. 하지만 이 다음부터 다르다. 위의 방법에서는 그 다음 백업은 level-1 상태를 기초로 level-2로 백업했다. 하지만 이 방법에서는 다시 level-0에서 level-1을 백업한다. 따라서 기존에 level-1 백업 파일은 필요가 없다. 아래의 스크립트를 보자. 이전 백업 방법과 유사하지만 자세히 보면 다른 백업 과정이다. rm -rf * mkdir test echo "1" > test/1.txt echo "2" > test/2.txt tar -g backup-0.snap -zcf backup-0.tgz ./test/ echo "3" > test/3.txt echo "4" > test/4.txt cp backup-0.snap backup-1.snap tar -g backup-1.snap -zcf backup-1.tgz ./test/ rm -f backup-1.snap rm -f test/4.txt cp backup-0.snap backup-1.snap tar -g backup-1.snap -zcf backup-2.tgz ./test/ rm -f backup-1.snap echo "5" > test/5.txt echo "6" > test/6.txt cp backup-0.snap backup-1.snap tar -g backup-1.snap -zcf backup-3.tgz ./test/ rm -f backup-1.snap 자세히 보면 알겠지만 항상 backup-0.snap 파일을 기준으로 증분 백업을 하고 있다. 자세한 설명은 아래의 복원 과정을 보고 설명하겠다. rm -rf test tar zxvf backup-0.tgz ls -al ./test/ tar --incremental -zxvf backup-3.tgz ls -al ./test/ 복원 과정이 이전 방법에 비해 대폭 줄었다. 최초 백업본(full 백업)을 복원하고 중간 단계없이 바로 마지막 백업본으로 복원하고 있다. 결과를 보면 알겠지만 정상적으로 복원되었다. 어떻게 이게 가능할까? 앞서 설명했던 것과 같이 이 방법은 증분 백업을 항상 최초 백업본을 기준으로 증분 백업을 했으므로 최초와 마지막 백업본만 있으면 복구가 가능하다. 짧게 설명하려던 것이 어쩌다보니 길어졌다. 그렇지만 정확한 내용이 전달되었을지 모르겠다. 나름 예시를 들어 설명한다고 했는데. 요약하자면 이렇다. tar를 이용한 증분 백업은 2가지가 있다. 지속적 증분 백업(level 0~max)과 1차 증분 백업(level 0~1). 이 이름들은 정식 명칭이 아니라 그냥 내가 설명하려고 붙인 이름이다. 지속적 증분 백업은 용량 효율이 좋을 수 있으나 복원 과정에서 모든 백업본이 필요하다. 그리고 원하는 지점까지만 복원하는 것이 가능하고 지속적인 변경만 백업하므로 효율(시간/공간)이 높다. 그러나 1차 증분 백업은 최초 백업과 마지막 백업만 있으면 복원이 가능하므로 관리가 용이하나 중간 지점으로의 복원이 불가능(중간 백업본도 모두 유지한다면 가능)하며 효율이 떨어질 수 있다. 그런데 이런 차이는 상황에 따라 다를 수 있으므로 차이를 이해하고 선택적으로 사용하면 된다. 그리고 내용이 길어질까봐 압축/복원시 사용하는 옵션들의 사용법에 대해서는 설명하지 않았으니 메뉴얼을 참고하자. 압축/복원시 다양한 옵션을 활용하면 보다 정교한 백업을 할 수 있다.]]></summary><content type="html"><![CDATA[<p>서버를 운영하면서 가장 중요한 부분을 꼽으라면 백업을 꼽을 것이다. 안정적인 서버의 운영도 중요한 문제지만 소중한 데이터를 보호하는 것은 더 중요한 문제이다. 백업의 방법은 다양하다. RAID를 이용한 백업, sync를 통한 원격 백업, 파일을 압축해서 보관하는 백업, 백업 장비를 이용한 백업 등 많은 종류의 방법이 존재한다. 하지만 나는 백업의 방법 보다 백업 정책이 더 중요하다고 생각한다. 그중에서도 가장 중요한 원칙은 백업본은 원본 데이터와 함께 두지 않는다는 것이다. 다시말해 백업본은 원격지로 보내서 보관하여 원본 데이터가 있는 장소가 복구 불가능한 상황이 되더라도 데이터를 살릴 수 있어야 한다는 것이다. 나의 경우엔 다음과 같은 방식으로 백업본을 관리한다.</p>
<ul>
<li>원본 데이터를 해당 서버에서 1차 백업</li>
<li>백업된 데이터를 백업 서버로 sync하여 2차 백업</li>
<li>백업 서버의 데이터를 원격지 백업 서버로 sync하여 3차 백업</li>
</ul>
<p>위 정책이 최선이라는 것은 아니지만 나에게 주어진 여건 내에서 할 수 있는 나름의 최선이라고 생각한다. 비용의 여유가 있다면 백업 솔루션을 사용하는 것이 더욱 좋겠지만 아직은 여건이 안된다.</p>
<p>이 글에서 다루고자하는 이야기는 1차 백업(원본 데이터 보관 서버 내 백업)시 증분 백업을 적용하는 부분이다. 증분 백업은 최종 백업된 상태 이후로 변경된 사항만 다시 백업하는 방식으로 full 백업에 비해 자원 소모가 적다. 그렇다고 지속적인 증분 백업만 할 수는 없으므로(복원 과정이 너무 길어질 수 있고 데이터의 손실 위험이 있을 수 있으므로) 나의 경우엔 일요일 새벽에 full 백업을 하고 주간 동안에는 증분 백업을 시행한다.</p>
<p>이러한 일련의 과정에서 가장 중요한 역할을 하는 것이 <a href="https://www.gnu.org/software/tar/">tar</a>다. 다른 압축 프로그램들을 사용할 수도 있지만 대부분의 서버에서 기본적으로 설치하는 <a href="https://www.gnu.org/software/tar/">tar</a>를 사용하는 것이 가장 범용적이라 나는 <a href="https://www.gnu.org/software/tar/">tar</a>를 압축 백업에 사용한다.</p>
<p>참고로 여기서는 <a href="https://www.gnu.org/software/tar/">tar</a>의 기본적인 사용법에 대해서는 다루지 않는다.</p>
<hr />
<p>증분 백업의 원리에 대해서는 <a href="http://www.gnu.org/software/tar/manual/html_node/Incremental-Dumps.html">Using tar to Perform Incremental Dumps</a>와 <a href="https://gist.github.com/bdsatish/5650700">bdsatish/gist:5650700 - Differential backups</a>를 참고하면 도움이 될 것이다. 그리고 <a href="http://apfelboymchen.net/gnu/scripte/backup/">incremental backups with tar</a>에는 기본적인 설명과 증분 백업용 스크립트를 안내하고 있다(참고만 하자).</p>
<hr />
<p>그리고 미리 한가지를 설명할 것이 있다. 이것은 증분 백업과 직접적인 상관이 있는 것은 아니지만 필요한 경우가 있다. 그것은 다름이 아니라 백업시 파일의 atime을 보존하는 것이다. atime에 대해서는 <a href="http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime">Difference between mtime, ctime and atime</a>를 참고하면 되는데 간단히 이야기하자면 해당 파일의 최종 access time을 뜻한다. 그렇다면 이게 백업과 무슨 상관이 있을까? tar를 사용해서 파일을 압축하면 atime이 압축 시점으로 변경된다. 그런데 백업을 하면서 atime은 그대로 보존해야 할 수도 있다. 예를들면 cache 파일의 경우 오랫동안 access가 없는 경우 삭제하는 것이 효율이 높이는 방법이므로 삭제시 검사를 위해 atime을 유지해야 한다. 그렇지 않으면 백업할 때마다 최종 access 시점이 변경되면서 언제 실제 access가 일어났었는지 확인할 수 없게 된다. 이 부분은 예시일 뿐이므로 그렇다고만 생각하자. 실제로 파일 access가 많은 곳에서는 성능을 높이기 위해 access time을 기록하지 않도록 설정하기 때문이다. 게다가 cache 파일은 손실되어도 문제가 되지 않으므로 백업에서 아예 제외하는 것이 맞을 것이다.</p>
<p>어쨌든 어떠한 목적으로 인해 백업시 atime을 유지하고자 한다면 tar 사용시 <code>--atime-preserve</code> 옵션을 주면 된다. 자세한 설명은 <a href="https://www.gnu.org/software/tar/manual/html_section/tar_70.html">GNU tar: an archiver tool - 8.2 Handling File Attributes</a>을 참고하자. 그런데 이 옵션을 사용할 경우 유의할 점이 하나 있다. <code>--atime-preserve</code>을 그냥 사용하면 <code>--atime-preserve=replace</code>로 동작하는데 이 경우는 증분 백업이 정상적으로 되지 않는다(계속 full 백업이 일어난다). 이 옵션은 대부분의 시스템에서 동작하나 증분 백업이 정상적이지 않을 수 있다고 <a href="https://www.gnu.org/software/tar/manual/html_section/tar_70.html">메뉴얼</a>에도 설명하고 있다. 그러면 atime을 유지하면서 증분 백업을 하려면 어떻게 해야하나? <code>--atime-preserve=system</code> 옵션을 사용하면 된다. 이 옵션에 대해서도 <a href="https://www.gnu.org/software/tar/manual/html_section/tar_70.html">메뉴얼</a>에 나와 있는데 시스템에 따라서 지원하지 않을 수도 있다고하니 유의하자(CentOS 7에서는 정상 동작했다).</p>
<hr />
<p>이제부터는 증분 백업에 대해서 본격적으로 알아보자. 그런데 사실은 아주 간단하다. <code>-g</code> 옵션을 사용해서 백업 파일에 대한 기록을 남겨서 보관하는 것만 추가하면 기존의 tar 압축과 다를 것이 없다. 예를들어 아래의 스크립트를 보자.</p>
<pre class="hljs bash">tar -g backup.snap -zcf backup.tgz /backup/target/</pre>
<p>위처럼 실행을 하면 <code>/backup/target/</code> 폴더를 <code>backup.tgz</code>로 압축해준다. 그런데 일반 압축과의 차이는 <code>backup.snap</code>라는 파일이 하나 더 생긴다는 것이다. 이 파일은 압축한 파일들의 정보로 이후 증분 백업시 데이터로 사용되므로 보관해야 한다.</p>
<p>방금했던 압축은 증분이 아닌 full 백업이다. <code>-g</code> 옵션으로 넘겨주는 데이터가 없다면 이전 백업을 확인할 수 없으므로 full 백업을 한다. 자.. 이제 다시 아래의 스크립트를 보자.</p>
<pre class="hljs bash">cp backup.snap backup-1.snap
tar -g backup-1.snap -zcf backup-1.tgz /backup/target/</pre>
<p>이번에도 최초의 full 백업과 별반 다르지 않다. 다만, snapshot 파일을 복사해서 사용했다는 차이만 있다. <code>-g</code> 옵션을 사용하면 백업시 참조만 하는 것이 아니라 이번 백업의 정보를 보관하므로 내용을 덮어쓰지 않도록 복사해서 사용한 것이다. 위 과정을 통해 압축한 결과 파일들을 보면 <code>backup.tgz</code>는 용량이 커도 <code>backup-1.tgz</code>는 용량이 적을 것이다(대상 폴더에 파일이 거의 없었다면 별반 차이가 나지 않을 수 있다). <code>backup-1.tgz</code>는 증분 백업된 파일이기 때문이다.</p>
<p>마지막으로 이 상태에서 다시 증분 백업하는 것을 한번만 더 보자.</p>
<pre class="hljs bash">cp backup-1.snap backup-2.snap
tar -g backup-2.snap -zcf backup-2.tgz /backup/target/</pre>
<p>굳이 설명하지 않아도 보면 이해가 될 것이다. 그럼에도 한번 더 적는 이유는 <code>cp backup.snap backup-2.snap</code> 처럼 최초 snapshot에서 시작해야 하는지 마지막 snapshot에서 시작해야 하는지 헛갈릴 수 있기 때문이다. 사실 이 부분은 증분 백업 방식에 따라 차이가 나는 부분인데 뒤에 자세히 설명할 것이므로 일단은 그렇다고 생각하자.</p>
<p>이로써 증분 백업에 대한 기본적인 설명이 끝났다. 생각보다 아주 간단하다. 하지만 이해를 돕기 위해 아래에 예시를 하나 첨부한다.</p>
<p>우선 백업 과정이다. 이후의 예시들은 명령 중간 중간에 <code>ls -al</code> 등으로 <code>test</code> 폴더의 상태를 확인해 가면서 진행하면 이해가 더 쉬울 것이다.</p>
<pre class="hljs bash">mkdir <span class="hljs-built_in">test</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"1"</span> &gt; <span class="hljs-built_in">test</span>/1.txt
<span class="hljs-built_in">echo</span> <span class="hljs-string">"2"</span> &gt; <span class="hljs-built_in">test</span>/2.txt

tar -g backup.snap -zcf backup.tgz ./<span class="hljs-built_in">test</span>/

<span class="hljs-built_in">echo</span> <span class="hljs-string">"3"</span> &gt; <span class="hljs-built_in">test</span>/3.txt
<span class="hljs-built_in">echo</span> <span class="hljs-string">"4"</span> &gt; <span class="hljs-built_in">test</span>/4.txt

cp backup.snap backup-1.snap
tar -g backup-1.snap -zcf backup-1.tgz ./<span class="hljs-built_in">test</span>/

rm -f <span class="hljs-built_in">test</span>/4.txt

cp backup-1.snap backup-2.snap
tar -g backup-2.snap -zcf backup-2.tgz ./<span class="hljs-built_in">test</span>/

<span class="hljs-built_in">echo</span> <span class="hljs-string">"5"</span> &gt; <span class="hljs-built_in">test</span>/5.txt
<span class="hljs-built_in">echo</span> <span class="hljs-string">"6"</span> &gt; <span class="hljs-built_in">test</span>/6.txt

cp backup-2.snap backup-3.snap
tar -g backup-3.snap -zcf backup-3.tgz ./<span class="hljs-built_in">test</span>/</pre>
<p>이번엔 증분 백업된 내용에서 복원하는 과정이다.</p>
<pre class="hljs bash"><span class="hljs-comment"># 복원 과정을 확인하기 위해 백업한 폴더는 일단 지운다.</span>
rm -rf <span class="hljs-built_in">test</span>

tar zxvf backup-0.tgz
ls -al ./<span class="hljs-built_in">test</span>/

tar --incremental -zxvf backup-1.tgz
ls -al ./<span class="hljs-built_in">test</span>/

tar --incremental -zxvf backup-2.tgz
ls -al ./<span class="hljs-built_in">test</span>/

tar --incremental -zxvf backup-3.tgz
ls -al ./<span class="hljs-built_in">test</span>/</pre>
<p>그런데 이상하게 보이는 부분이 있을 수 있다. 압축할 때 사용했던 snapshot 파일을 복원시에는 사용하지 않는다는 것이다. 대신에 <code>--incremental</code>를 사용하고 있다. 이게 가능한 이유는 tgz 파일이 이미 자신에게 필요한 정보를 모두 가지고 있기 때문이다. 단, 정상적인 복원를 위해서는 백업한 순서대로 복원해야 한다. 그리고 <code>--incremental</code> 대신 <code>--listed-incremental=/dev/null</code>를 사용해도 무방하다. 그리고 이 부분에 대해서는 유의할 점이 한가지 있다. 다른 대부분의 설명글에 보면 snapshot 파일을 복원시에 사용한다. 그럼에도 불구하고 내가 이렇게 설명하는 것은 <a href="https://www.gnu.org/software/tar/manual/html_section/tar_70.html">메뉴얼</a>에 동일하게 나와있으며 위 실험 결과를 보면 알 수 있듯이 정상 동작하기 때문이다. 하지만 tar의 버전에 따른 차이일 수도 있으니 유의하자.</p>
<p>자.. 다시 백업 과정을 한번 생각해보자. 복원시에 snapshot 파일이 필요하지 않다면 굳이 백업시마다 snapshot 파일을 복사하거나 하지 않고 계속 같은 파일을 덮어쓰도록 하면 안될까? 결론부터 이야기 하자면 당연히 가능하다. 그럼 굳이 복사를 했던 이유는 뭘까? 이 부분은 증분 백업의 방법 중 level을 증가시키면서 백업하는 방법을 보여주기 위해서였다. 따라서 이 방법에서는 <code>backup.snap</code> 파일을 다음 백업에서도 사용해도 된다. 데이터를 덮어쓰겠지만 어짜피 level을 증가시키면서 백업하는 것이므로 상관없다.</p>
<p>이번엔 level-0와 level-1만 생성하는 백업 과정을 한번 보자. 이를 예를들어 설명하자면 다음과 같다. 최초에 full 백업(level-0) 한다. 다음 백업에서 증분 백업(level-1)으로 백업한다. 여기까지는 위의 방식과 같다. 하지만 이 다음부터 다르다. 위의 방법에서는 그 다음 백업은 level-1 상태를 기초로 level-2로 백업했다. 하지만 이 방법에서는 다시 level-0에서 level-1을 백업한다. 따라서 기존에 level-1 백업 파일은 필요가 없다. 아래의 스크립트를 보자.</p>
<p>이전 백업 방법과 유사하지만 자세히 보면 다른 백업 과정이다.</p>
<pre class="hljs bash">rm -rf *
mkdir <span class="hljs-built_in">test</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"1"</span> &gt; <span class="hljs-built_in">test</span>/1.txt
<span class="hljs-built_in">echo</span> <span class="hljs-string">"2"</span> &gt; <span class="hljs-built_in">test</span>/2.txt

tar -g backup-0.snap -zcf backup-0.tgz ./<span class="hljs-built_in">test</span>/

<span class="hljs-built_in">echo</span> <span class="hljs-string">"3"</span> &gt; <span class="hljs-built_in">test</span>/3.txt
<span class="hljs-built_in">echo</span> <span class="hljs-string">"4"</span> &gt; <span class="hljs-built_in">test</span>/4.txt

cp backup-0.snap backup-1.snap
tar -g backup-1.snap -zcf backup-1.tgz ./<span class="hljs-built_in">test</span>/
rm -f backup-1.snap

rm -f <span class="hljs-built_in">test</span>/4.txt

cp backup-0.snap backup-1.snap
tar -g backup-1.snap -zcf backup-2.tgz ./<span class="hljs-built_in">test</span>/
rm -f backup-1.snap

<span class="hljs-built_in">echo</span> <span class="hljs-string">"5"</span> &gt; <span class="hljs-built_in">test</span>/5.txt
<span class="hljs-built_in">echo</span> <span class="hljs-string">"6"</span> &gt; <span class="hljs-built_in">test</span>/6.txt

cp backup-0.snap backup-1.snap
tar -g backup-1.snap -zcf backup-3.tgz ./<span class="hljs-built_in">test</span>/
rm -f backup-1.snap</pre>
<p>자세히 보면 알겠지만 항상 <code>backup-0.snap</code> 파일을 기준으로 증분 백업을 하고 있다. 자세한 설명은 아래의 복원 과정을 보고 설명하겠다.</p>
<pre class="hljs bash">rm -rf <span class="hljs-built_in">test</span>

tar zxvf backup-0.tgz
ls -al ./<span class="hljs-built_in">test</span>/

tar --incremental -zxvf backup-3.tgz
ls -al ./<span class="hljs-built_in">test</span>/</pre>
<p>복원 과정이 이전 방법에 비해 대폭 줄었다. 최초 백업본(full 백업)을 복원하고 중간 단계없이 바로 마지막 백업본으로 복원하고 있다. 결과를 보면 알겠지만 정상적으로 복원되었다. 어떻게 이게 가능할까? 앞서 설명했던 것과 같이 이 방법은 증분 백업을 항상 최초 백업본을 기준으로 증분 백업을 했으므로 최초와 마지막 백업본만 있으면 복구가 가능하다.</p>
<hr />
<p>짧게 설명하려던 것이 어쩌다보니 길어졌다. 그렇지만 정확한 내용이 전달되었을지 모르겠다. 나름 예시를 들어 설명한다고 했는데.</p>
<p>요약하자면 이렇다. tar를 이용한 증분 백업은 2가지가 있다. 지속적 증분 백업(level 0~max)과 1차 증분 백업(level 0~1). 이 이름들은 정식 명칭이 아니라 그냥 내가 설명하려고 붙인 이름이다.
지속적 증분 백업은 용량 효율이 좋을 수 있으나 복원 과정에서 모든 백업본이 필요하다. 그리고 원하는 지점까지만 복원하는 것이 가능하고 지속적인 변경만 백업하므로 효율(시간/공간)이 높다.</p>
<p>그러나 1차 증분 백업은 최초 백업과 마지막 백업만 있으면 복원이 가능하므로 관리가 용이하나 중간 지점으로의 복원이 불가능(중간 백업본도 모두 유지한다면 가능)하며 효율이 떨어질 수 있다.</p>
<p>그런데 이런 차이는 상황에 따라 다를 수 있으므로 차이를 이해하고 선택적으로 사용하면 된다. 그리고 내용이 길어질까봐 압축/복원시 사용하는 옵션들의 사용법에 대해서는 설명하지 않았으니 메뉴얼을 참고하자. 압축/복원시 다양한 옵션을 활용하면 보다 정교한 백업을 할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/23/moving-from-octopress-to-jekyll/</id><title type="html">Octopress 2에서 Jekyll로 전환</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/23/moving-from-octopress-to-jekyll/"/><published>2015-12-23T21:41:33+09:00</published><updated>2015-12-23T12:41:33+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="octopress" label="octopress" /><category term="jekyll" label="jekyll" /><category term="blog" label="blog" /><summary><![CDATA[최근 이틀동안 현재 운영중인 블로그에서 사용중인 옥토프레스를 걷어내고 순수 Jekyll로 전환하는 작업을 했다. 사실 처음엔 지금 사용중인 옥토프레스를 3버전으로 버전업 하려고 했다. 그래서 Migrating Octopress 2 to Octopress 3를 따라 전환을 시도했다. 이 글에서도 나와 있는 것처럼 옥토프레스 제작자가 Octopress 3.0 Is Coming이라고만 해두고 정식 릴리즈를 하지 않아 기다림에 지쳐 작업을 시작했다(이때까지만 하더라도 일이 간단하리라 생각했다). 아래의 글은 체계적인 설치 안내서 보다는 전환 경험담에 가깝다. 아래의 과정을 따라 설치하면 동일하게 안될 확률이 높으므로 참고만 하길 바란다. 사실 처음엔 잘 정리해 두려고 했는데 워낙에 이리저리 시도를 많이 하면서 정리하는 것을 포기했다. Jekyll 전환에 앞서 octopress 버전업 시도 과정부터 이야기하려고 한다. Octopress 3 - Github에 가면 최신 옥토프레스를 확인할 수 있다. 현재 시점을 기준으로 3.0.11이 최신이다. 정식 릴리즈를 공식적으로 출시하지 않았지만 개발을 나름 활발히 진행중이다. 나중에 버전업을 진행해 보니 왜 정식 릴리즈를 하지 못하고 있는지 알 것도 같다. Jekyll 기반으로 여러가지 플러그인을 사용하고 템플릿의 제작도 프로그램 제작에 준할 정도로 커스텀되는 상황이다보니 체계적인 마이그레이션 방법을 제시하기 어려운 것 같다. Migrating Octopress 2 to Octopress 3에 나름 잘 설명되어 있기는하나 나의 경우엔 그대로 적용되지 않았다(특별한 플러그인 다수 사용하지도 않았는데). 결국은 여러가지 시도 끝에 남은 거라곤 옥토프레스 3.0.11이 설치되었다는 것 밖에 없다(사실 이건 간단히 설치가 되므로 대부분의 시간을 허비한 것이다). 이러한 이유로 순수 Jekyll로 전환을 시작하게 되었다. 사실 이 과정도 옥토프레스를 버전업하는 것과 같이 새로운 블로그를 생성하고 주요 설정을 이전하는 것이다. 옥토프레스는 원래 Jekyll을 기반으로 확장된 것이라 전환이 간단할 것이라고 생각했다. 이것 또한 착각이었다. 이 과정에서도 여러가지 실패기가 있지만 다 나열하기도 힘들다. 이후부터는 설치 과정을 간략히 요약하려고 한다. 아래는 Jekyll을 설치하기 위한 Gemfile 의 내용이다. 거의 필수에 가까운 플러그인만으로 구성했다. source 'https://rubygems.org' gem 'jekyll', '= 3.0.1' gem 'jekyll-paginate' gem 'jekyll-archives' gem 'jekyll-sitemap' gem 'jekyll-feed' gem 'pygments.rb' Gemfile 을 사용한 설치는 아래와 같이 할 수 있다. 단, ruby 버전 2.1 이상을 요구할 수 있는데 그때는 rvm을 사용해 설치하면 된다. $ sudo gem install bundler $ bundle install 다음은 Jekyll에서 가장 중요한 _config.yml 파일의 내용이다. gems: - jekyll-paginate - jekyll-archives - jekyll-sitemap - jekyll-feed - pygments.rb exclude: [".idea", ".git", "README.md", "Gemfile", "Gemfile.lock"] url: http://blog.asamaru.net title: 이 세상에 하나는 남기고 가자 subtitle: 내가 할 수 있는 모든 것을... author: 유영재 simple_search: https://www.google.com/search description: > # this means to ignore newlines until "baseurl:" 세상에 필요한 소스코드 한줄 남기고 가자. email: asamaru@asamaru.net baseurl: "" # the subpath of your site, e.g. /blog/ permalink: /:year/:month/:day/:title/ markdown: KramdownPygments markdown_ext: markdown,mkd,mkdn,md textile_ext: textile kramdown: input: GFM auto_ids: true footnote_nr: 1 entity_output: as_char toc_levels: 1..6 smart_quotes: lsquo,rsquo,ldquo,rdquo paginate: 1 paginate_path: "posts/:num" recent_posts: 5 excerpt_link: "Read on &rarr;" excerpt_separator: "<!--more-->" titlecase: false # Disqus Comments disqus_short_name: asamaru7 # Google Analytics google_analytics_tracking_id: UA-65749108-2 github_username: asamaru7 feed: path: atom.xml # archives 생성 jekyll-archives: enabled: - categories - year - month - day - tags layouts: year: archive-year month: archive-month day: archive-day tag: archive-tag category: archive-tag permalinks: year: '/:year/' month: '/:year/:month/' day: '/:year/:month/:day/' tag: '/tag/:name/' category: '/category/:name/' 하나씩 설명하자니 너무 많다. 다만 그리 어려운 설정들이 아니므로 보면 이해할 것으로 본다. 마지막으로 한가지. Kramdown with Pygments라는 플러그인을 사용했다. Jekyll에서 kramdown을 사용하면서 Pygments를 함께 사용(코드 하이라이팅)하기 위한 플러그인이다. 그런데 몇가지 문제가 있어 아래와 같이 변형해서 사용하고 있다. 덤으로 옥토프레스에서 코드 블럭에 사용되던 문법도 호환되게 변경했으나 마지막에 문제에 걸렸다. kramdown에서 그 문법을 정상적으로 인식하지 못했다. 코드에 빈 줄바꿈이 포함되면 정상적으로 인식하지 못한다. 따라서 이 플러그인이 동작하기 이전에 발생되는 문제로 여기서는 아직 처리하지 못했다. 시간을 들여 분석해보면 처리 방법이 있을수도 있지만 일단 두기로 했다. 중요한 문제는 아니므로(게다가 내가 ruby를 모른다. 이 작업도 기본 문법 몇가지만 공부해서 처리한 것이라 깊이있는 수정은 어렵다). kramdown_pygments.rb # We define the an additional option for the kramdown parser to look for module Kramdown module Options define(:kramdown_default_lang, Symbol, nil, <<EOF) Sets the default language for highlighting code blocks If no language is set for a code block, the default language is used instead. The value has to be one of the languages supported by pygments or nil if no default language should be used. Default: nil Used by: PygmentsHtml converter EOF end end # This class is a plugin for kramdown, to make it use pygments instead of coderay # It has nothing to do with Jekyll, it is simply used by the custom converter below module Kramdown module Converter #AllOptions = /([^\s]+)\s+(.+?)\s+(https?:\/\/\S+|\/\S+)\s*(.+)?\n/i #LangCaption = /([^\s]+)\s*(.+)?\n/i AllOptions = /([a-z0-9]+)[[:blank:]]+(.+?)[[:blank:]]+(https?:\/\/\S+|\/\S+)[[:blank:]]*([^\n]+)?\n/i LangCaption = /([a-z0-9]+)[[:blank:]]*([^\n]+)?\n/i class PygmentsHtml < Html begin require 'pygments' rescue LoadError STDERR.puts 'You are missing a library required for syntax highlighting. Please run:' STDERR.puts ' $ [sudo] gem install pygments' raise FatalException.new("Missing dependency: Pygments") end def convert_codeblock(el, indent) codeProc(el, indent, false) end def convert_codespan(el, indent) codeProc(el, indent, true) end def codeProc(el, indent, isSapn) attr = el.attr.dup lang = extract_code_language!(attr) || @options[:kramdown_default_lang] # STDERR.puts "lang #{el.value}" codeStr = el.value # octopress code 형식 지원 caption = "" if isSapn if codeStr =~ AllOptions or codeStr =~ LangCaption acceptLang = Pygments::Lexer.find_by_alias("#{$1}") if acceptLang != nil # STDERR.puts "lang [#{$1}] [#{$2}]" isSapn = false lang = "#{$1}" if codeStr =~ AllOptions # STDERR.puts "lang all" # fn = "#{$2}".gsub(/\s+/, "") caption = "<figcaption><span>#{$2}</span><a href='#{$3}'>#{$4 || 'link'}</a></figcaption>" end if caption == "" and codeStr =~ LangCaption # STDERR.puts "lang lang" caption = "<figcaption><span>#{$2}</span></figcaption>" end if caption != "" codeStr = codeStr.lines.to_a[1..-1].join # 첫줄 제거 end end end end code = pygmentize(codeStr, lang) code_attr = {} if isSapn if lang code_attr['class'] = "highlight notranslate" if code_attr.has_key?('class') code_attr['class'] += " language-#{lang}" else code_attr['class'] = "language-#{lang}" end end else code_attr['class'] = "language-#{lang}" if lang end if code == nil code = escape_html(codeStr) if code_attr['class'] != nil code_attr['class'] += " nmcode" else code_attr['class'] = "nmcode" end end if isSapn "<code#{html_attributes(attr)}>#{code}</code>" else "#{' '*indent}<figure class='code'>#{caption}<div class=\"highlight notranslate\"><pre#{html_attributes(attr)}><code#{html_attributes(code_attr)}>#{code}</code></pre></div></figure>\n" end end def pygmentize(code, lang) if lang Pygments.highlight(code, :lexer => lang, # :options => { :startinline => true, :encoding => 'utf-8', :nowrap => true }) :options => { :startinline => true, :encoding => 'utf-8', :linenos => 'table' }) end end end end end # This class is the actual custom Jekyll converter. class Jekyll::Converters::Markdown::KramdownPygments def initialize(config) require 'kramdown' @config = config rescue LoadError STDERR.puts 'You are missing a library required for Markdown. Please run:' STDERR.puts ' $ [sudo] gem install kramdown' raise FatalException.new("Missing dependency: kramdown") end def convert(content) html = Kramdown::Document.new(content, { :auto_ids => @config['kramdown']['auto_ids'], :footnote_nr => @config['kramdown']['footnote_nr'], :entity_output => @config['kramdown']['entity_output'], :toc_levels => @config['kramdown']['toc_levels'], :smart_quotes => @config['kramdown']['smart_quotes'], :kramdown_default_lang => @config['kramdown']['default_lang'], :input => @config['kramdown']['input'], :hard_wrap => @config['kramdown']['hard_wrap'] }).to_pygments_html return html; end end 보다 자세한 처리 결과를 확인하고 싶다면 이 블로그의 소스를 참고하기 바란다. asamaru7/blog - Github]]></summary><content type="html"><![CDATA[<p>최근 이틀동안 현재 운영중인 블로그에서 사용중인 옥토프레스를 걷어내고 순수 <a href="https://jekyllrb.com/">Jekyll</a>로 전환하는 작업을 했다. 사실 처음엔 지금 사용중인 옥토프레스를 3버전으로 버전업 하려고 했다. 그래서 <a href="http://samwize.com/2015/09/30/migrating-octopress-2-to-octopress-3/">Migrating Octopress 2 to Octopress 3</a>를 따라 전환을 시도했다. 이 글에서도 나와 있는 것처럼 옥토프레스 제작자가 <a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">Octopress 3.0 Is Coming</a>이라고만 해두고 정식 릴리즈를 하지 않아 기다림에 지쳐 작업을 시작했다(이때까지만 하더라도 일이 간단하리라 생각했다).</p>
<p>아래의 글은 체계적인 설치 안내서 보다는 전환 경험담에 가깝다. 아래의 과정을 따라 설치하면 동일하게 안될 확률이 높으므로 참고만 하길 바란다. 사실 처음엔 잘 정리해 두려고 했는데 워낙에 이리저리 시도를 많이 하면서 정리하는 것을 포기했다.</p>
<p><a href="https://jekyllrb.com/">Jekyll</a> 전환에 앞서 octopress 버전업 시도 과정부터 이야기하려고 한다.</p>
<p><a href="https://github.com/octopress/octopress">Octopress 3 - Github</a>에 가면 최신 옥토프레스를 확인할 수 있다. 현재 시점을 기준으로 3.0.11이 최신이다. 정식 릴리즈를 공식적으로 출시하지 않았지만 개발을 나름 활발히 진행중이다. 나중에 버전업을 진행해 보니 왜 정식 릴리즈를 하지 못하고 있는지 알 것도 같다. <a href="https://jekyllrb.com/">Jekyll</a> 기반으로 여러가지 플러그인을 사용하고 템플릿의 제작도 프로그램 제작에 준할 정도로 커스텀되는 상황이다보니 체계적인 마이그레이션 방법을 제시하기 어려운 것 같다.</p>
<p><a href="http://samwize.com/2015/09/30/migrating-octopress-2-to-octopress-3/">Migrating Octopress 2 to Octopress 3</a>에 나름 잘 설명되어 있기는하나 나의 경우엔 그대로 적용되지 않았다(특별한 플러그인 다수 사용하지도 않았는데). 결국은 여러가지 시도 끝에 남은 거라곤 옥토프레스 3.0.11이 설치되었다는 것 밖에 없다(사실 이건 간단히 설치가 되므로 대부분의 시간을 허비한 것이다).</p>
<p>이러한 이유로 순수 <a href="https://jekyllrb.com/">Jekyll</a>로 전환을 시작하게 되었다. 사실 이 과정도 옥토프레스를 버전업하는 것과 같이 새로운 블로그를 생성하고 주요 설정을 이전하는 것이다.
옥토프레스는 원래 Jekyll을 기반으로 확장된 것이라 전환이 간단할 것이라고 생각했다. 이것 또한 착각이었다. 이 과정에서도 여러가지 실패기가 있지만 다 나열하기도 힘들다. 이후부터는 설치 과정을 간략히 요약하려고 한다.</p>
<hr />
<p>아래는 Jekyll을 설치하기 위한 <strong>Gemfile</strong> 의 내용이다. 거의 필수에 가까운 플러그인만으로 구성했다.</p>
<pre class="hljs ruby">source <span class="hljs-string">'https://rubygems.org'</span>

gem <span class="hljs-string">'jekyll'</span>, <span class="hljs-string">'= 3.0.1'</span>
gem <span class="hljs-string">'jekyll-paginate'</span>
gem <span class="hljs-string">'jekyll-archives'</span>
gem <span class="hljs-string">'jekyll-sitemap'</span>
gem <span class="hljs-string">'jekyll-feed'</span>
gem <span class="hljs-string">'pygments.rb'</span></pre>
<p><strong>Gemfile</strong> 을 사용한 설치는 아래와 같이 할 수 있다. 단, ruby 버전 2.1 이상을 요구할 수 있는데 그때는 rvm을 사용해 설치하면 된다.</p>
<pre class="hljs bash">$ sudo gem install bundler
$ bundle install</pre>
<p>다음은 <a href="https://jekyllrb.com/">Jekyll</a>에서 가장 중요한 <strong>_config.yml</strong> 파일의 내용이다.</p>
<pre class="hljs ruby"><span class="hljs-symbol">gems:</span>
  - jekyll-paginate
  - jekyll-archives
  - jekyll-sitemap
  - jekyll-feed
  - pygments.rb

<span class="hljs-symbol">exclude:</span> [<span class="hljs-string">".idea"</span>, <span class="hljs-string">".git"</span>, <span class="hljs-string">"README.md"</span>, <span class="hljs-string">"Gemfile"</span>, <span class="hljs-string">"Gemfile.lock"</span>]

<span class="hljs-symbol">url:</span> <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/blog.asamaru.net
title: 이 세상에 하나는 남기고 가자
subtitle: 내가 할 수 있는 모든 것을...
author: 유영재
simple_search: https:/</span><span class="hljs-regexp">/www.google.com/search</span>
<span class="hljs-symbol">description:</span> &gt; <span class="hljs-comment"># this means to ignore newlines until "baseurl:"</span>
  세상에 필요한 소스코드 한줄 남기고 가자.

<span class="hljs-symbol">email:</span> asamaru@asamaru.net
<span class="hljs-symbol">baseurl:</span> <span class="hljs-string">""</span> <span class="hljs-comment"># the subpath of your site, e.g. /blog/</span>

<span class="hljs-symbol">permalink:</span> /<span class="hljs-symbol">:year/</span><span class="hljs-symbol">:month/</span><span class="hljs-symbol">:day/</span><span class="hljs-symbol">:title/</span>

<span class="hljs-symbol">markdown:</span> KramdownPygments
<span class="hljs-symbol">markdown_ext:</span> markdown,mkd,mkdn,md
<span class="hljs-symbol">textile_ext:</span> textile
<span class="hljs-symbol">kramdown:</span>
  <span class="hljs-symbol">input:</span> GFM
  <span class="hljs-symbol">auto_ids:</span> <span class="hljs-literal">true</span>
  <span class="hljs-symbol">footnote_nr:</span> <span class="hljs-number">1</span>
  <span class="hljs-symbol">entity_output:</span> as_char
  <span class="hljs-symbol">toc_levels:</span> <span class="hljs-number">1</span>..<span class="hljs-number">6</span>
  <span class="hljs-symbol">smart_quotes:</span> lsquo,rsquo,ldquo,rdquo

<span class="hljs-symbol">paginate:</span> <span class="hljs-number">1</span>
<span class="hljs-symbol">paginate_path:</span> <span class="hljs-string">"posts/:num"</span>
<span class="hljs-symbol">recent_posts:</span> <span class="hljs-number">5</span>
<span class="hljs-symbol">excerpt_link:</span> <span class="hljs-string">"Read on &amp;rarr;"</span>
<span class="hljs-symbol">excerpt_separator:</span> <span class="hljs-string">"&lt;!--more--&gt;"</span>

<span class="hljs-symbol">titlecase:</span> <span class="hljs-literal">false</span>

<span class="hljs-comment"># Disqus Comments</span>
<span class="hljs-symbol">disqus_short_name:</span> asamaru7

<span class="hljs-comment"># Google Analytics</span>
<span class="hljs-symbol">google_analytics_tracking_id:</span> UA-<span class="hljs-number">65749108</span>-<span class="hljs-number">2</span>

<span class="hljs-symbol">github_username:</span> asamaru7

<span class="hljs-symbol">feed:</span>
  <span class="hljs-symbol">path:</span> atom.xml

<span class="hljs-comment"># archives 생성</span>
jekyll-<span class="hljs-symbol">archives:</span>
  <span class="hljs-symbol">enabled:</span>
    - categories
    - year
    - month
    - day
    - tags
  <span class="hljs-symbol">layouts:</span>
    <span class="hljs-symbol">year:</span> archive-year
    <span class="hljs-symbol">month:</span> archive-month
    <span class="hljs-symbol">day:</span> archive-day
    <span class="hljs-symbol">tag:</span> archive-tag
    <span class="hljs-symbol">category:</span> archive-tag
  <span class="hljs-symbol">permalinks:</span>
    <span class="hljs-symbol">year:</span> <span class="hljs-string">'/:year/'</span>
    <span class="hljs-symbol">month:</span> <span class="hljs-string">'/:year/:month/'</span>
    <span class="hljs-symbol">day:</span> <span class="hljs-string">'/:year/:month/:day/'</span>
    <span class="hljs-symbol">tag:</span> <span class="hljs-string">'/tag/:name/'</span>
    <span class="hljs-symbol">category:</span> <span class="hljs-string">'/category/:name/'</span></pre>
<p>하나씩 설명하자니 너무 많다. 다만 그리 어려운 설정들이 아니므로 보면 이해할 것으로 본다.</p>
<p>마지막으로 한가지. <a href="https://github.com/mvdbos/kramdown-with-pygments">Kramdown with Pygments</a>라는 플러그인을 사용했다. Jekyll에서 kramdown을 사용하면서 Pygments를 함께 사용(코드 하이라이팅)하기 위한 플러그인이다. 그런데 몇가지 문제가 있어 아래와 같이 변형해서 사용하고 있다. 덤으로 옥토프레스에서 코드 블럭에 사용되던 문법도 호환되게 변경했으나 마지막에 문제에 걸렸다. kramdown에서 그 문법을 정상적으로 인식하지 못했다. 코드에 빈 줄바꿈이 포함되면 정상적으로 인식하지 못한다. 따라서 이 플러그인이 동작하기 이전에 발생되는 문제로 여기서는 아직 처리하지 못했다. 시간을 들여 분석해보면 처리 방법이 있을수도 있지만 일단 두기로 했다. 중요한 문제는 아니므로(게다가 내가 ruby를 모른다. 이 작업도 기본 문법 몇가지만 공부해서 처리한 것이라 깊이있는 수정은 어렵다).</p>
<p><strong>kramdown_pygments.rb</strong></p>
<pre class="hljs ruby"><span class="hljs-comment"># We define the an additional option for the kramdown parser to look for</span>
<span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Kramdown</span></span>
  <span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Options</span></span>
      define(<span class="hljs-symbol">:kramdown_default_lang</span>, Symbol, <span class="hljs-literal">nil</span>, &lt;&lt;EOF)
Sets the default language <span class="hljs-keyword">for</span> highlighting code blocks

If no language is set <span class="hljs-keyword">for</span> a code block, the default language is used
instead. The value has to be one of the languages supported by pygments
<span class="hljs-keyword">or</span> <span class="hljs-literal">nil</span> <span class="hljs-keyword">if</span> no default language should be used.

<span class="hljs-symbol">Default:</span> <span class="hljs-literal">nil</span>
Used <span class="hljs-symbol">by:</span> PygmentsHtml converter
EOF
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span>

<span class="hljs-comment"># This class is a plugin for kramdown, to make it use pygments instead of coderay</span>
<span class="hljs-comment"># It has nothing to do with Jekyll, it is simply used by the custom converter below</span>
<span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Kramdown</span></span>
  <span class="hljs-class"><span class="hljs-keyword">module</span> <span class="hljs-title">Converter</span></span>
    <span class="hljs-comment">#AllOptions = /([^\s]+)\s+(.+?)\s+(https?:\/\/\S+|\/\S+)\s*(.+)?\n/i</span>
    <span class="hljs-comment">#LangCaption = /([^\s]+)\s*(.+)?\n/i</span>
    AllOptions = <span class="hljs-regexp">/([a-z0-9]+)[[:blank:]]+(.+?)[[:blank:]]+(https?:\/\/\S+|\/\S+)[[:blank:]]*([^\n]+)?\n/i</span>
    LangCaption = <span class="hljs-regexp">/([a-z0-9]+)[[:blank:]]*([^\n]+)?\n/i</span>

    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PygmentsHtml</span> &lt; Html</span>

      <span class="hljs-keyword">begin</span>
        <span class="hljs-keyword">require</span> <span class="hljs-string">'pygments'</span>
      <span class="hljs-keyword">rescue</span> LoadError
        STDERR.puts <span class="hljs-string">'You are missing a library required for syntax highlighting. Please run:'</span>
        STDERR.puts <span class="hljs-string">'  $ [sudo] gem install pygments'</span>
        raise FatalException.new(<span class="hljs-string">"Missing dependency: Pygments"</span>)
      <span class="hljs-keyword">end</span>

      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert_codeblock</span><span class="hljs-params">(el, indent)</span></span>
        codeProc(el, indent, <span class="hljs-literal">false</span>)
      <span class="hljs-keyword">end</span>

      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert_codespan</span><span class="hljs-params">(el, indent)</span></span>
        codeProc(el, indent, <span class="hljs-literal">true</span>)
      <span class="hljs-keyword">end</span>

      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">codeProc</span><span class="hljs-params">(el, indent, isSapn)</span></span>
        attr = el.attr.dup
        lang = extract_code_language!(attr) <span class="hljs-params">||</span> @options[<span class="hljs-symbol">:kramdown_default_lang</span>]
        <span class="hljs-comment"># STDERR.puts "lang #{el.value}"</span>

        codeStr = el.value
        <span class="hljs-comment"># octopress code 형식 지원</span>
        caption = <span class="hljs-string">""</span>
        <span class="hljs-keyword">if</span> isSapn
          <span class="hljs-keyword">if</span> codeStr =~ AllOptions <span class="hljs-keyword">or</span> codeStr =~ LangCaption
            acceptLang = Pygments::Lexer.find_by_alias(<span class="hljs-string">"<span class="hljs-subst">#{$1}</span>"</span>)
            <span class="hljs-keyword">if</span> acceptLang != <span class="hljs-literal">nil</span>
              <span class="hljs-comment"># STDERR.puts "lang [#{$1}] [#{$2}]"</span>
              isSapn = <span class="hljs-literal">false</span>
              lang = <span class="hljs-string">"<span class="hljs-subst">#{$1}</span>"</span>

              <span class="hljs-keyword">if</span> codeStr =~ AllOptions
                <span class="hljs-comment"># STDERR.puts "lang all"</span>
                <span class="hljs-comment"># fn = "#{$2}".gsub(/\s+/, "")</span>
                caption = <span class="hljs-string">"&lt;figcaption&gt;&lt;span&gt;<span class="hljs-subst">#{$2}</span>&lt;/span&gt;&lt;a href='<span class="hljs-subst">#{$3}</span>'&gt;<span class="hljs-subst">#{$4 <span class="hljs-params">||</span> <span class="hljs-string">'link'</span>}</span>&lt;/a&gt;&lt;/figcaption&gt;"</span>
              <span class="hljs-keyword">end</span>
              <span class="hljs-keyword">if</span> caption == <span class="hljs-string">""</span> <span class="hljs-keyword">and</span> codeStr =~ LangCaption
                <span class="hljs-comment"># STDERR.puts "lang lang"</span>
                caption = <span class="hljs-string">"&lt;figcaption&gt;&lt;span&gt;<span class="hljs-subst">#{$2}</span>&lt;/span&gt;&lt;/figcaption&gt;"</span>
              <span class="hljs-keyword">end</span>
              <span class="hljs-keyword">if</span> caption != <span class="hljs-string">""</span>
                codeStr = codeStr.lines.to_a[<span class="hljs-number">1</span>..-<span class="hljs-number">1</span>].join  <span class="hljs-comment"># 첫줄 제거</span>
              <span class="hljs-keyword">end</span>
            <span class="hljs-keyword">end</span>
          <span class="hljs-keyword">end</span>
        <span class="hljs-keyword">end</span>

        code = pygmentize(codeStr, lang)
        code_attr = {}
        <span class="hljs-keyword">if</span> isSapn
          <span class="hljs-keyword">if</span> lang
            code_attr[<span class="hljs-string">'class'</span>] = <span class="hljs-string">"highlight notranslate"</span>
            <span class="hljs-keyword">if</span> code_attr.has_key?(<span class="hljs-string">'class'</span>)
              code_attr[<span class="hljs-string">'class'</span>] += <span class="hljs-string">" language-<span class="hljs-subst">#{lang}</span>"</span>
            <span class="hljs-keyword">else</span>
              code_attr[<span class="hljs-string">'class'</span>] = <span class="hljs-string">"language-<span class="hljs-subst">#{lang}</span>"</span>
            <span class="hljs-keyword">end</span>
          <span class="hljs-keyword">end</span>
        <span class="hljs-keyword">else</span>
          code_attr[<span class="hljs-string">'class'</span>] = <span class="hljs-string">"language-<span class="hljs-subst">#{lang}</span>"</span> <span class="hljs-keyword">if</span> lang
        <span class="hljs-keyword">end</span>
        <span class="hljs-keyword">if</span> code == <span class="hljs-literal">nil</span>
          code = escape_html(codeStr)
          <span class="hljs-keyword">if</span> code_attr[<span class="hljs-string">'class'</span>] != <span class="hljs-literal">nil</span>
            code_attr[<span class="hljs-string">'class'</span>] += <span class="hljs-string">" nmcode"</span>
          <span class="hljs-keyword">else</span>
            code_attr[<span class="hljs-string">'class'</span>] = <span class="hljs-string">"nmcode"</span>
          <span class="hljs-keyword">end</span>
        <span class="hljs-keyword">end</span>
        <span class="hljs-keyword">if</span> isSapn
          <span class="hljs-string">"&lt;code<span class="hljs-subst">#{html_attributes(attr)}</span>&gt;<span class="hljs-subst">#{code}</span>&lt;/code&gt;"</span>
        <span class="hljs-keyword">else</span>
          <span class="hljs-string">"<span class="hljs-subst">#{<span class="hljs-string">' '</span>*indent}</span>&lt;figure class='code'&gt;<span class="hljs-subst">#{caption}</span>&lt;div class=\"highlight notranslate\"&gt;&lt;pre<span class="hljs-subst">#{html_attributes(attr)}</span>&gt;&lt;code<span class="hljs-subst">#{html_attributes(code_attr)}</span>&gt;<span class="hljs-subst">#{code}</span>&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;\n"</span>
        <span class="hljs-keyword">end</span>
      <span class="hljs-keyword">end</span>

      <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pygmentize</span><span class="hljs-params">(code, lang)</span></span>
        <span class="hljs-keyword">if</span> lang
          Pygments.highlight(code,
            <span class="hljs-symbol">:lexer</span> =&gt; lang,
<span class="hljs-comment">#            :options =&gt; { :startinline =&gt; true, :encoding =&gt; 'utf-8', :nowrap =&gt; true })</span>
            <span class="hljs-symbol">:options</span> =&gt; { <span class="hljs-symbol">:startinline</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-symbol">:encoding</span> =&gt; <span class="hljs-string">'utf-8'</span>, <span class="hljs-symbol">:linenos</span> =&gt; <span class="hljs-string">'table'</span> })
        <span class="hljs-keyword">end</span>
      <span class="hljs-keyword">end</span>
    <span class="hljs-keyword">end</span>
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span>

<span class="hljs-comment"># This class is the actual custom Jekyll converter.</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jekyll::Converters::Markdown::KramdownPygments</span></span>

  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize</span><span class="hljs-params">(config)</span></span>
    <span class="hljs-keyword">require</span> <span class="hljs-string">'kramdown'</span>
    @config = config
  <span class="hljs-keyword">rescue</span> LoadError
    STDERR.puts <span class="hljs-string">'You are missing a library required for Markdown. Please run:'</span>
    STDERR.puts <span class="hljs-string">'  $ [sudo] gem install kramdown'</span>
    raise FatalException.new(<span class="hljs-string">"Missing dependency: kramdown"</span>)
  <span class="hljs-keyword">end</span>

  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert</span><span class="hljs-params">(content)</span></span>
    html = Kramdown::Document.new(content, {
        <span class="hljs-symbol">:auto_ids</span>             =&gt; @config[<span class="hljs-string">'kramdown'</span>][<span class="hljs-string">'auto_ids'</span>],
        <span class="hljs-symbol">:footnote_nr</span>          =&gt; @config[<span class="hljs-string">'kramdown'</span>][<span class="hljs-string">'footnote_nr'</span>],
        <span class="hljs-symbol">:entity_output</span>        =&gt; @config[<span class="hljs-string">'kramdown'</span>][<span class="hljs-string">'entity_output'</span>],
        <span class="hljs-symbol">:toc_levels</span>           =&gt; @config[<span class="hljs-string">'kramdown'</span>][<span class="hljs-string">'toc_levels'</span>],
        <span class="hljs-symbol">:smart_quotes</span>         =&gt; @config[<span class="hljs-string">'kramdown'</span>][<span class="hljs-string">'smart_quotes'</span>],
        <span class="hljs-symbol">:kramdown_default_lang</span> =&gt; @config[<span class="hljs-string">'kramdown'</span>][<span class="hljs-string">'default_lang'</span>],
        <span class="hljs-symbol">:input</span>                =&gt; @config[<span class="hljs-string">'kramdown'</span>][<span class="hljs-string">'input'</span>],
        <span class="hljs-symbol">:hard_wrap</span>            =&gt; @config[<span class="hljs-string">'kramdown'</span>][<span class="hljs-string">'hard_wrap'</span>]
    }).to_pygments_html
    <span class="hljs-keyword">return</span> html;
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span></pre>
<hr />
<p>보다 자세한 처리 결과를 확인하고 싶다면 이 블로그의 소스를 참고하기 바란다. <a href="https://github.com/asamaru7/blog">asamaru7/blog - Github</a></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/17/charles-android-ssl-proxy/</id><title type="html">Charles를 이용한 안드로이드 SSL Proxy</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/17/charles-android-ssl-proxy/"/><published>2015-12-17T08:36:04+09:00</published><updated>2015-12-17T08:36:04+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><category term="tip" label="tip" /><summary><![CDATA[안드로이드 앱을 개발할 때 http/https 디버깅을 위해서 proxy를 사용한다. 나는 예전에 Paros를 주로 사용했었는데 기본적인 기능을 사용하는데 문제가 없지만 버전업이 중단되어 아쉬운 부분이 많았다. 그래서 최근엔 Charles를 주로 사용한다. Paros와 달리 Charles는 유료지만 사용이 편리하고 다양한 기능을 제공한다. 그래서 많은 사람들이 사용하고 있는 것 같다. 이번에는 이 Charles를 이용해서 https(SSL)를 proxy하는 방법을 설명하고자 한다. 이 글의 주요 주제는 아니지만 Charles를 이용해서 proxy로 연결하는 방법부터 간략히 보자. Charles > Proxy > Proxy Settings 메뉴로 들어가면 port를 지정할 수 있는 란이 나온다. 여기에 원하는 port를 입력한다. 안드로이드 기기에서는 Wi-Fi 설정으로 들어가서 연결된 네트워크를 길게 누르면 네트워크 구성 변경이라는 메뉴가 나타난다. 해당 메뉴로 들어가서 고급 옵션 표시를 체크하면 프록시 설정을 할 수 있는 란들이 나타난다. 여기서 프록시 호스트 이름에는 Charles가 켜져있는 컴퓨터의 IP를 넣고 프록시 포트에는 Charles에서 지정했던 port를 넣는다. 아이폰도 안드로이드와 메뉴는 다르지만 동일한 형태로 프록시 설정을 해주면 된다. 더 자세한 내용이 필요하면 인터넷에 관련 자료가 아주 많으니 찾아보길 바란다. 이렇게 연결이 되고나면 Charles에는 해당 기기에서 사용하는 http/https 기록이 모두 나타난다. http 정보는 암호화가 되어 있지 않기 때문에 모든 내용을 다 볼 수 있지만 https의 경우는 송수신 데이터가 모두 암호화되어 있어 내용을 알아볼 수 없다. 이 부분을 http처럼 볼 수 있도록 설정하는 방법을 설명하고자 하는 것이다. 다시 Charles로 가서 아래의 단계를 따라한다. Charles 3.9.3 버전 기준이므로 참고 바란다(3.11.2 버전의 경우 확인해보니 메뉴 위치가 다르긴 하나 설정은 큰 차이가 없다). Proxy > Proxy Settings > SSL로 간다. “Enable SSL Proxying”를 체크한다. "Locations" 아래의 "Add" 버튼을 눌러 디버깅하고자 하는 도메인과 port를 입력한다. "OK"를 눌러 완료한다. 이제는 Charles - LEGACY SSL PROXYING 사이트로 가서 cert 파일을 다운 받는다. 다운받은 cert 파일을 안드로이드 기기에 넣는다. 이메일로 보내서 첨부파일을 열어도 되고 파일을 직접 넣어도 되고 어떻게든 기기에 파일을 넣기만 하면 된다. 그리고 cert(crt) 파일을 터치하여 실행한다. 이후의 과정은 다음과 같다. cert 이름을 넣으라고 나오는데 아무 이름이나 넣어도 상관없다. 기기에 보안 lock(잠금 화면)이 걸려있지 않다면 lock을 걸어야만 사용할 수 있다는 안내가 나온다. 따라서 lock을 설정해야 한다. 패턴이건 비밀번호건 상관은 없다. 설치가 완료되고나면 네트워크 모니터링 가능성(이 기기의 네트워크 정보를 다른 곳에서 볼 수 있다) 안내가 나오는데 무시하면 된다. 지금하고 있는 작업 자체가 그것이므로. 정상적으로 설치가 완료되었다면 이제부터는 이전과는 다르게 지정했던 도메인의 https 정보는 http와 동일하게 모두 볼 수 있다. 그런데 3.10 버전 이상을 사용할 경우는 방법이 다르다. Charles - SSL CERTIFICATES에 설명되어 있다. 안드로이드의 경우는 사이트에서 다운 받는 대신 Charles에서 "Help > SSL Proxying > Install Charles Root Certificate on Mobile Device or Remote Browser..."를 선택하면 방법을 안내한다. 내용은 다음과 같다. 안드로이드 기기의 브라우저에서 http://www.charlesproxy.com/getssl를 방문한다. 단, Proxy가 연결된 상태이어야 한다. 이 사이트에 접속하면 cert 파일을 자동으로 추가해 준다. 이후의 과정은 3.9.3과 동일하다. 마지막으로 설치한 cert 파일을 제거하는 방법이다. 이 부분은 기기마다 차이가 날 수 있다. 갤노트3 / 롤리팝 기준으로 "설정 > 일반 > 보안 > 인증서 저장공간 > 신뢰할 수 있는 인증서 > 사용자"를 찾아가면 추가한 인증서가 있다. 해당 인증서를 누르면 맨 하단에 "제거" 버튼이 있다. 아.. 그리고 기존에 잠금 화면을 사용하지 않았던 사람이라면 위 과정을 거치면서 잠금 화면을 추가했으므로 다시 해제하고 싶을 수 있다. 그런데 추가한 인증서만 제거해서는 잠금 화면을 해제할 수 없다. 해제를 원한다면 "신뢰할 수 있는 인증서" 메뉴 대신 "인증서 삭제" 메뉴를 이용해서 모든 인증서를 지우면 잠금 화면을 해제할 수 있다.]]></summary><content type="html"><![CDATA[<p>안드로이드 앱을 개발할 때 http/https 디버깅을 위해서 proxy를 사용한다. 나는 예전에 <a href="http://sourceforge.net/projects/paros/">Paros</a>를 주로 사용했었는데 기본적인 기능을 사용하는데 문제가 없지만 버전업이 중단되어 아쉬운 부분이 많았다. 그래서 최근엔 <a href="https://www.charlesproxy.com/">Charles</a>를 주로 사용한다. <a href="http://sourceforge.net/projects/paros/">Paros</a>와 달리 <a href="https://www.charlesproxy.com/">Charles</a>는 유료지만 사용이 편리하고 다양한 기능을 제공한다. 그래서 많은 사람들이 사용하고 있는 것 같다.</p>
<p>이번에는 이 <a href="https://www.charlesproxy.com/">Charles</a>를 이용해서 https(SSL)를 proxy하는 방법을 설명하고자 한다. 이 글의 주요 주제는 아니지만 <a href="https://www.charlesproxy.com/">Charles</a>를 이용해서 proxy로 연결하는 방법부터 간략히 보자.</p>
<p><a href="https://www.charlesproxy.com/">Charles</a> &gt; Proxy &gt; Proxy Settings 메뉴로 들어가면 port를 지정할 수 있는 란이 나온다. 여기에 원하는 port를 입력한다. 안드로이드 기기에서는 Wi-Fi 설정으로 들어가서 연결된 네트워크를 길게 누르면 <code>네트워크 구성 변경</code>이라는 메뉴가 나타난다. 해당 메뉴로 들어가서 <code>고급 옵션 표시</code>를 체크하면 프록시 설정을 할 수 있는 란들이 나타난다. 여기서 <code>프록시 호스트 이름</code>에는 <a href="https://www.charlesproxy.com/">Charles</a>가 켜져있는 컴퓨터의 IP를 넣고 <code>프록시 포트</code>에는 <a href="https://www.charlesproxy.com/">Charles</a>에서 지정했던 port를 넣는다. 아이폰도 안드로이드와 메뉴는 다르지만 동일한 형태로 프록시 설정을 해주면 된다. 더 자세한 내용이 필요하면 인터넷에 관련 자료가 아주 많으니 찾아보길 바란다.</p>
<p>이렇게 연결이 되고나면 <a href="https://www.charlesproxy.com/">Charles</a>에는 해당 기기에서 사용하는 http/https 기록이 모두 나타난다. http 정보는 암호화가 되어 있지 않기 때문에 모든 내용을 다 볼 수 있지만 https의 경우는 송수신 데이터가 모두 암호화되어 있어 내용을 알아볼 수 없다. 이 부분을 http처럼 볼 수 있도록 설정하는 방법을 설명하고자 하는 것이다.</p>
<hr />
<p>다시 <a href="https://www.charlesproxy.com/">Charles</a>로 가서 아래의 단계를 따라한다. <a href="https://www.charlesproxy.com/">Charles</a> 3.9.3 버전 기준이므로 참고 바란다(3.11.2 버전의 경우 확인해보니 메뉴 위치가 다르긴 하나 설정은 큰 차이가 없다).</p>
<ul>
<li>Proxy &gt; Proxy Settings &gt; SSL로 간다.</li>
<li>“Enable SSL Proxying”를 체크한다.</li>
<li>&quot;Locations&quot; 아래의 &quot;Add&quot; 버튼을 눌러 디버깅하고자 하는 도메인과 port를 입력한다.</li>
<li>&quot;OK&quot;를 눌러 완료한다.</li>
</ul>
<p>이제는 <a href="http://www.charlesproxy.com/documentation/additional/legacy-ssl-proxying/">Charles - LEGACY SSL PROXYING</a> 사이트로 가서 cert 파일을 다운 받는다. 다운받은 cert 파일을 안드로이드 기기에 넣는다. 이메일로 보내서 첨부파일을 열어도 되고 파일을 직접 넣어도 되고 어떻게든 기기에 파일을 넣기만 하면 된다. 그리고 cert(crt) 파일을 터치하여 실행한다. 이후의 과정은 다음과 같다.</p>
<ul>
<li>cert 이름을 넣으라고 나오는데 아무 이름이나 넣어도 상관없다.</li>
<li>기기에 보안 lock(잠금 화면)이 걸려있지 않다면 lock을 걸어야만 사용할 수 있다는 안내가 나온다. 따라서 lock을 설정해야 한다. 패턴이건 비밀번호건 상관은 없다.</li>
<li>설치가 완료되고나면 네트워크 모니터링 가능성(이 기기의 네트워크 정보를 다른 곳에서 볼 수 있다) 안내가 나오는데 무시하면 된다. 지금하고 있는 작업 자체가 그것이므로.</li>
</ul>
<p>정상적으로 설치가 완료되었다면 이제부터는 이전과는 다르게 지정했던 도메인의 https 정보는 http와 동일하게 모두 볼 수 있다.</p>
<hr />
<p>그런데 3.10 버전 이상을 사용할 경우는 방법이 다르다. <a href="https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/">Charles - SSL CERTIFICATES</a>에 설명되어 있다. 안드로이드의 경우는 사이트에서 다운 받는 대신 Charles에서 &quot;Help &gt; SSL Proxying &gt; Install Charles Root Certificate on Mobile Device or Remote Browser...&quot;를 선택하면 방법을 안내한다. 내용은 다음과 같다.</p>
<p>안드로이드 기기의 브라우저에서 <a href="http://www.charlesproxy.com/getssl를">http://www.charlesproxy.com/getssl를</a> 방문한다. 단, Proxy가 연결된 상태이어야 한다. 이 사이트에 접속하면 cert 파일을 자동으로 추가해 준다. 이후의 과정은 3.9.3과 동일하다.</p>
<hr />
<p>마지막으로 설치한 cert 파일을 제거하는 방법이다. 이 부분은 기기마다 차이가 날 수 있다. 갤노트3 / 롤리팝 기준으로 &quot;설정 &gt; 일반 &gt; 보안 &gt; 인증서 저장공간 &gt; 신뢰할 수 있는 인증서 &gt; 사용자&quot;를 찾아가면 추가한 인증서가 있다. 해당 인증서를 누르면 맨 하단에 &quot;제거&quot; 버튼이 있다.</p>
<p>아.. 그리고 기존에 잠금 화면을 사용하지 않았던 사람이라면 위 과정을 거치면서 잠금 화면을 추가했으므로 다시 해제하고 싶을 수 있다. 그런데 추가한 인증서만 제거해서는 잠금 화면을 해제할 수 없다. 해제를 원한다면 &quot;신뢰할 수 있는 인증서&quot; 메뉴 대신 &quot;인증서 삭제&quot; 메뉴를 이용해서 모든 인증서를 지우면 잠금 화면을 해제할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/16/how-can-i-prevent-mail-from-being-classified-as-spam/</id><title type="html">발송 메일을 스팸으로 분류되지 않도록 개선하는 법</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/16/how-can-i-prevent-mail-from-being-classified-as-spam/"/><published>2015-12-16T17:02:42+09:00</published><updated>2015-12-16T17:02:42+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[개인이 정상적인 메일 서비스를 통해 발송한 메일은 수신 측에서 스팸으로 분류될 확률이 적다. 하지만 서버에서 공지/안내 등의 이유로 다량의 메일을 지속적으로 발송할 경우 스팸으로 분류될 확률이 높다. 이 글에서 설명하고자 하는 것은 서버에서 다량의 메일 발송시 스팸으로 분류될 확률을 낮추기 위해 처리해야 할 몇가지를 소개하고자 한다. 스팸 필터는 아래에 설명하는 조건 외에도 메일의 내용, 수신한 사용자의 반응(스팸으로 체크) 등의 다양한 조건을 사용해서 스팸을 분류하므로 이 내용을 모두 적용한다고 스팸으로 무조건 분류되지 않는 것은 아니다. 하지만 아래의 조건들을 만족함으로써 정상적인 메일을 발송함에도 불구하고 스팸 서버로 분류되는 것을 어느 정도 예방하기 위한 활동이라고 생각하면 된다. 그리고 아래의 내용은 스팸 서버로 분류되는 상황을 겪으면서 조금씩 추가했던 내용들을 정리한 것이지만 잘못된 부분이 있을 수 있으니 참고용으로 둘러보기를 권장한다. 스팸 필터 정책은 수시로 변경되기도 하고 서비스별로 모두 다른 정책을 사용하므로 아래의 내용이 진리는 아니라는 것이다(사실 그런 것이 있다면 스패머들이 판치는 세상이 될 것이다). 그럼 하나씩 알아보자. Reverse DNS 설정 Reverse DNS란 DNS의 반대 개념으로서 IP로 Domain Name을 조회하는 것을 말한다. Reverse DNS를 통해 도메인이 조회 가능한 IP를 가지는 서버는 실제 운영되는 서비스 서버일 확률이 높으므로 스팸 서버가 아닐 확률이 높은 것으로 보는 것이다. 특히 구글과 같은 메일 서버들은 Reverse DNS가 등록되지 않은 서버에서 발송한 메일은 스팸 점수를 높게 책정하거나 수신을 거부하는 경우도 있다. 따라서 이메일을 발송하는 서버는 필히 Reverse DNS를 설정하는 것을 권장한다. 등록이 되어 있는지를 확인하는 방법은 아래와 같다. 여기서 A.B.C.D는 해당 서버 IP다. $ nslookup -type=ptr A.B.C.D Server: 168.126.63.1 Address: 168.126.63.1#53 Non-authoritative answer: D.C.B.A.in-addr.arpa name = mail.domain.com. Authoritative answers can be found from: C.B.A.in-addr.arpa nameserver = rev2.kornet.net. C.B.A.in-addr.arpa nameserver = rev1.kornet.net. rev1.kornet.net internet address = 211.216.50.170 rev2.kornet.net internet address = 211.216.50.180 Reverse DNS가 정상적으로 설정되어 있다면 위와 같이 조회 결과를 볼 수 있다. 등록이 되어 있지 않다면 어떻게 해야 할까? 대부분의 경우(전체 네트워크를 소유하지 않은 경우) 망사업자 측에 요청하여 설정해야 한다. KT 회선을 기준으로 아래의 방법으로 등록 신청이 가능했다. 하지만 얼마전 확인해 보니 사이트가 변경되어 아래의 방법을 사용할 수 없었다. 대부분의 경우 IDC 등에 문의해서 처리하면 된다. 등록 방법 : [아래] ① http://dns.kornet.net 사이트 접속 ② 도메인 등록 요청/문의 클릭 ③ 새글작성 클릭 ④ 게시물 유형 -> 리버스 등록, 소속 -> idc 체크, 나머지 정보 기입후 등록 rDNS 관련 연락처 : 02-3674-5820 SPF(Sender Policy Framework) 레코드 등록 구글 관리자 도움말 - SPF 레코드 정보에 SPF에 대해 다음과 같이 설명하고 있다. SPF 레코드는 도메인을 대표하여 이메일을 보낼 수 있는 메일 서버를 식별하는 DNS(Domain Name Service) 레코드의 한 유형입니다. SPF 레코드의 목적은 스팸 발송자가 도메인의 위조된 '보낸사람' 주소를 사용하여 메일을 보내지 못하도록 하는 것입니다. 수신자는 SPF 레코드를 참조하여 자신의 도메인에서 보낸 것처럼 위장한 메일이 인증된 메일 서버에서 전송된 것인지를 판별할 수 있습니다. 예를 들어 example.com 도메인에서 Gmail을 사용한다고 가정해 보겠습니다. Google Apps 메일 서버를 도메인에 대한 인증된 메일 서버로 식별하는 SPF 레코드를 만듭니다. 수신자의 메일 서버가 user\@example.com에서 보낸 메일을 수신하는 경우, example.com에 대한 SPF 레코드를 확인하여 유효한 메일인지 여부를 판별할 수 있습니다. 메일이 SPF 레코드에 나열된 Google Apps 메일 서버가 아닌 다른 서버에서 전송된 경우 수신자의 메일 서버에서 이를 스팸으로 간주하여 수신 거부할 수도 있습니다. 도메인에 SPF 레코드가 없는 경우에는 수신자 도메인에서 메일이 인증된 메일 서버에서 전송된 것인지를 확인할 수 없으므로 사용자의 메일이 수신 거부될 수도 있습니다. 위 설명을 보면 알 수 있듯이 SPF 레코드 등록의 경우도 메일 발송을 위해서는 필수적으로 해야할 것 중 하나다. 그리고 뒤에 설명할 White Domain 등록을 위해서도 필히 등록이 되어 있어야 한다. SPF 레코드 등록 방법은 잘 설명된 문서들이 많으므로 굳이 여기서 다시 설명하지는 않는다. 다만 간단히 예시만 하나 남긴다. DNS zone 설정에 추가 @ IN TXT "v=spf1 ip4:A.B.C.1 ip4:A.B.C.2 ip4:A.B.C.3 ~all" 간단히 설명하자면 다음의 IP(A.B.C.1, A.B.C.2, A.B.C.3)가 설정된 서버에서 해당 도메인을 사용해 메일을 발송할 수 있다는 의미다. 화이트 도메인(White Domain) 등록 KISA RBL에서 통합 White Domain 등록제를 운영하고 있다. 통합 White Domain 등록제에 대해서는 위 사이트에서 아래와 같이 안내하고 있다. 정상적으로 발송하는 대량 이메일이 RBL이력으로 간주되어 차단되는 것을 방지하기 위하여, 사전에 등록된 개인이나 사업자에 한하여 국내 주요 포탈사이트로의 이메일 전송을 보장해주는 제도입니다. ( 무료 ) 단, White Domain으로 등록되었다 하더라도 이후 모니터링을 통해 RBL이력발송 사실이 확인되면, 즉각 차단 조치되며 White 리스트에서도 삭제될 수 있습니다. 기존에 개별 포탈에서 'IP 등록제', 'IP 실명제'등의 이름으로 운영해오던 것을 2006년 9월 1일부로 KISARBL이 등록접수/관리/운영을 통합한 것이므로, KISARBL에 White Domain으로 등록하게 되면 , 여러번 별도로 등록할 필요없이 참여하고 있는 포탈사이트에 동시에 등록됩니다 . 단 , 개인의 경우에는 일부 포탈사이트에서 자사의 정책상 등록을 허용하지 않습니다. 위 설명을 보면 알 수 있듯이 White Domain은 국내 포털 사이트로 메일을 발송하는 경우에 적용될 수 있는 것으로 범위가 제한되지만 대부분의 수신자가 국내 포털 사이트의 이메일을 사용하고 있는 것을 감안하면 이 또한 필수적으로 등록하는 것이 좋다. 등록 방법은 위 사이트에서 안내하고 있으므로 별도로 설명하지는 않는다. 하지만 등록 과정이 그리 복잡하지 않으므로 큰 어려움은 없을 것으로 생각된다. 상기 안내한 사항들은 필수적으로 처리하는 것이 좋은 것들이고 이후의 사항들은 가급적 처리하는 것이 좋은 것이다. 하지만 스팸으로 분류되지 않기 위해서는 최대한 할 수 있는 모든 방법을 동원하는 것이 좋다. 그렇게 해도 스팸으로 빠진다. 따라서 확률을 낮추는데 집중해야 한다. 정확하게 이야기 하자면 요즘엔 메일 내용을 더 중요하게 다루는 경우가 많아 내용 작성에도 공을 들여야 한다. 여기서 내용이란 의미를 갖는 문장 뿐아니라 html 마크업과 같은 메일 전문을 뜻한다. 하지만 이 부분은 이 글에서 이야기 하고자하는 것이 아니므로 이 이상의 언급은 피하려 한다. DKIM(DomainKeys Identified Mail) 인증 Google Apps 관리자 도움말 - DKIM으로 이메일 인증에서는 다음과 같이 DKIM을 소개하고 있다. DKIM 표준을 사용하여 발신 메일 헤더에 디지털 서명을 추가하면 스푸핑을 방지하는 데 도움이 됩니다. 이렇게 하려면 비공개 도메인 키를 사용하여 도메인의 발신 메일 헤더를 암호화하고 키의 공개 버전을 도메인의 DNS 레코드에 추가해야 합니다. 그러면 수신 서버가 공개 키를 검색하여 수신 헤더의 암호를 해독하고 메일이 실제로 사용자의 도메인에서 전송되었으며 전송 과정에서 변경되지 않았는지 여부를 확인할 수 있습니다. 위 설명을 보면 알 수 있듯이 스푸핑 방지에 도움을 준다. 따라서 수신된 메일이 스푸핑되지 않았음을 보증하므로 스팸으로 분류될 확률을 낮추는데 도움이 된다(기술적 의미에서는 스팸과 아무런 연관성이 없으나 스팸 필터에서 DKIM이 적용된 메일의 스팸 지수를 낮추는 정책을 사용하는 곳들이 많다). DKIM에서 사용할 서명 키는 openssl등을 이용해서 직접 생성하는 것도 가능하지만 잘 만들어진 온라인 도구들이 있다. 그중에서 DKIM Core Tools를 간략히 소개하고자 한다. 직접 생성하는 방법을 사용해도 되나 여기서는 다루지 않는다(RSA 키를 생성하는 것이므로 쉽게 정보를 얻을 수 있다). 단, 직접 생성했을 경우라면 DNS에 등록할 레코드를 만드는 것이 조금 복잡할 수 있으니 DNS 레코드 생성을 도와주는 DNS Watch - DKIM DNS Wizard를 활용하자. http://dkimcore.org/tools/ 로 접속해보면 상단에 도메인을 넣는 란이 있다. 여기에 원하는 도메인을 입력하고 Generate 버튼을 누르면 private/public key를 만들어 보여주며 DNS에 설정할 DKIM 레코드도 생성하여 바로 보여준다(친절하게도 Bind9, Tinydns, Raw 포멧으로 제공한다). 여기서 제공하는 DKIM 레코드를 DNS에 추가하면 된다. 그런데 DKIM의 경우는 앞서 설명했던 것들과 다르게 설정만하면 완료되는 것이 아니다. DKIM 레코드에는 공개키를 제공하는 것이므로 메일 발송시 비공개 도메인 키를 사용하여 도메인의 발신 메일 헤더를 암호화하는 과정이 필요하다. 이 부분에 대해서는 오픈소스로 제작된 라이브러리들이 다수 있으니 쉽게 찾을 수 있다. 아니면 직접 구현해도 된다. 다만 RSA를 다루어야 하므로 약간의 지식이 필요하다. DMARC(Domain-based Message Authentication, Reporting and Conformance) 정책 게시 dmarc.org에서는 DMARC에 대해 다음과 같이 설명하고 있다. DMARC, which stands for “Domain-based Message Authentication, Reporting & Conformance”, is an email authentication protocol. It builds on the widely deployed SPF and DKIM protocols, adding a reporting function that allows senders and receivers to improve and monitor protection of the domain from fraudulent email. 위 내용을 번역한 것은 아니지만 DMARC를 조금 더 이해하기 쉽게 설명하자면 다음과 같다. DMARC는 이메일 인증 프로토콜로써 도메인 기반 메시지 인증, 보고, 준수를 의미한다. DMARC는 SPF, DKIM 두 가지 방법에 의존하여 서명 무결성을 확인한다. 메일이 SPF, DKIM 검사에 실패하면 DMARC 정책이 실행된다. 어떤 방법을 사용하든 두 가지 검사에 모두 실패하지 않는 한 메일은 DMARC를 통과한 것으로 간주된다. 그렇다면 DMARC를 통과하지 못하면 어떻게 되는가? 이때 어떻게 대응할 것인지에 대해서 정의하는 것이 DMARC 정책 게시라고 볼 수 있다. Google Apps 관리자 도움말 - DMARC 레코드 추가에서 설명하고 있는 DMARC TXT 레코드에 대한 설명은 아래와 같다. 태그 이름 필수항목 목적 샘플 v 필수 프로토콜 버전 v=DMARC1 p 필수 도메인에 대한 정책 p=quarantine pct 선택사항 필터링이 적용되는 메일의 비율(%) pct=20 rua 선택사항 집계 보고서의 보고 URI rua=mailto:aggrep@example.com sp 선택사항 도메인의 하위 도메인에 대한 정책 sp=reject aspf 선택사항 SPF의 정렬 모드 aspf=r v(버전) 및 p(정책) 태그만 필수항목입니다. 가능한 정책 설정, 즉 메일 처리에는 다음 3가지가 있습니다. none - 아무 조치도 취하지 않습니다. 문제가 발생한 메일을 일일 보고서에 기록만 합니다. quarantine - 문제가 있는 메일을 스팸으로 표시합니다. reject - SMTP 계층에서 메일을 취소합니다. 정렬 모드란 발신자 레코드를 SPF 및 DKIM 서명과 비교하는 정밀도를 의미하는데, 느슨함 또는 엄격함의 두 가지 값을 가질 수 있으며, 느슨함은 'r', 엄격함은 's'로 표시됩니다. 간단히 말해, 느슨함 모드에서는 주어진 도메인의 하위 도메인처럼 부분 일치를 허용하며, 엄격함 모드에서는 완전히 일치해야 합니다. 일일 보고서를 받으려면 선택항목인 rua 태그와 함께 이메일 주소를 포함해야 합니다. 다음은 DMARC TXT 레코드(_dmarc.your_domain.com IN TXT)의 예입니다. 적절히 수정하여 사용할 수 있습니다. 'your_domain.com' 및 'postmaster@your_domain.com'은 실제 도메인 이름과 이메일 주소로 변경해야 합니다. 다음 TXT 레코드 예에서는 'your domain.com'에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 아무런 조치도 취하지 않습니다. 대신 해당하는 모든 메일은 'postmaster@your_domain.com'에 전송되는 일일 집계 보고서에 표시됩니다. "v=DMARC1; p=none; rua=mailto:postmaster@your_domain.com" 다음 TXT 레코드 예에서는 'your domain.com'에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 이런 메일의 5%에 대해 차단 조치(스팸으로 표시)를 취합니다. 그런 다음 일일 집계 보고서를 'postmaster@your_domain.com'으로 보냅니다. "v=DMARC1; p=quarantine; pct=5; rua=mailto:postmaster@your_domain.com" 마지막 예에서는 'your_domain.com'에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 이런 메일을 항상 거부합니다. 그런 다음 일일 집계 보고서를 'postmaster@your_domain.com' 및 'dmarc@your_domain.com'으로 보냅니다. "v=DMARC1; p=reject; rua=mailto:postmaster@your_domain.com, mailto:dmarc@your_domain.com" 설명을 보면 알 수 있듯이 이것 또한 메일이 스팸으로 분류되는 것과는 크게 상관이 없다. 하지만 여러 스팸 필터에서 DMARC가 설정된 도메인의 메일을 스팸 지수를 낮게 책정하는 정책을 사용하는 경우가 있어 소개한 것이다. 그도 그럴 것이 메일 품질(스팸, 스푸핑 등)에 대한 관리를 하고자하는 의지를 보이는 것이므로 정상적인 발송자라고 생각할 수 있는 것이다. 그리고 한가지. DMARC는 모든 메일 수신처에 적용되는 것이 아니다. dmarc.org 표준을 준수하는 곳에서만 정책을 확인하고 대응한다. DMARC를 어떻게 활용할 것인가에 대해서는 이메일 보안을 위한 DMARC의 점진적인 사용법을 참고하자. 마지막으로 위 설명들을 처리하는데 도움을 줄 수 있는 몇가지 온라인 도구들을 소개하고자 한다. 온라인 도구 레코드 / 키 생성 / 유효성 검사 등을 도와준다. DKIM Key Checker DKIMCore - Key checker DKIM, SPF, SpamAssassin Email Validator - DKIM 수신 유효성 검사 Sender ID Framework SPF Record Wizard 스팸 검사기 자신의 메일에 대한 스팸 지수 등을 확인 할 수 있다. ISNotSPAM Test the Spammyness of your Emails]]></summary><content type="html"><![CDATA[<p>개인이 정상적인 메일 서비스를 통해 발송한 메일은 수신 측에서 스팸으로 분류될 확률이 적다. 하지만 서버에서 공지/안내 등의 이유로 다량의 메일을 지속적으로 발송할 경우 스팸으로 분류될 확률이 높다. 이 글에서 설명하고자 하는 것은 서버에서 다량의 메일 발송시 스팸으로 분류될 확률을 낮추기 위해 처리해야 할 몇가지를 소개하고자 한다.</p>
<p><strong>스팸 필터는 아래에 설명하는 조건 외에도 메일의 내용, 수신한 사용자의 반응(스팸으로 체크) 등의 다양한 조건을 사용해서 스팸을 분류하므로 이 내용을 모두 적용한다고 스팸으로 무조건 분류되지 않는 것은 아니다.</strong> 하지만 아래의 조건들을 만족함으로써 정상적인 메일을 발송함에도 불구하고 스팸 서버로 분류되는 것을 어느 정도 예방하기 위한 활동이라고 생각하면 된다. 그리고 아래의 내용은 스팸 서버로 분류되는 상황을 겪으면서 조금씩 추가했던 내용들을 정리한 것이지만 잘못된 부분이 있을 수 있으니 참고용으로 둘러보기를 권장한다. 스팸 필터 정책은 수시로 변경되기도 하고 서비스별로 모두 다른 정책을 사용하므로 아래의 내용이 진리는 아니라는 것이다(사실 그런 것이 있다면 스패머들이 판치는 세상이 될 것이다).</p>
<p>그럼 하나씩 알아보자.</p>
<h3>Reverse DNS 설정</h3>
<p>Reverse DNS란 DNS의 반대 개념으로서 IP로 Domain Name을 조회하는 것을 말한다. Reverse DNS를 통해 도메인이 조회 가능한 IP를 가지는 서버는 실제 운영되는 서비스 서버일 확률이 높으므로 스팸 서버가 아닐 확률이 높은 것으로 보는 것이다. 특히 구글과 같은 메일 서버들은 Reverse DNS가 등록되지 않은 서버에서 발송한 메일은 스팸 점수를 높게 책정하거나 수신을 거부하는 경우도 있다. 따라서 <strong>이메일을 발송하는 서버는 필히 Reverse DNS를 설정하는 것을 권장한다.</strong></p>
<p>등록이 되어 있는지를 확인하는 방법은 아래와 같다. 여기서 A.B.C.D는 해당 서버 IP다.</p>
<pre class="hljs bash">$ nslookup -<span class="hljs-built_in">type</span>=ptr A.B.C.D
Server:     168.126.63.1
Address:    168.126.63.1<span class="hljs-comment">#53</span>

Non-authoritative answer:
D.C.B.A.in-addr.arpa    name = mail.domain.com.

Authoritative answers can be found from:
C.B.A.in-addr.arpa  nameserver = rev2.kornet.net.
C.B.A.in-addr.arpa  nameserver = rev1.kornet.net.
rev1.kornet.net internet address = 211.216.50.170
rev2.kornet.net internet address = 211.216.50.180</pre>
<p>Reverse DNS가 정상적으로 설정되어 있다면 위와 같이 조회 결과를 볼 수 있다.</p>
<p>등록이 되어 있지 않다면 어떻게 해야 할까? 대부분의 경우(전체 네트워크를 소유하지 않은 경우) 망사업자 측에 요청하여 설정해야 한다.</p>
<p>KT 회선을 기준으로 아래의 방법으로 등록 신청이 가능했다. 하지만 얼마전 확인해 보니 사이트가 변경되어 아래의 방법을 사용할 수 없었다. 대부분의 경우 IDC 등에 문의해서 처리하면 된다.</p>
<blockquote>
<p>등록 방법 : [아래]<br />
① <a href="http://dns.kornet.net">http://dns.kornet.net</a> 사이트 접속<br />
② 도메인 등록 요청/문의 클릭<br />
③ 새글작성 클릭<br />
④ 게시물 유형 -&gt; 리버스 등록, 소속 -&gt; idc 체크, 나머지 정보 기입후 등록<br />
rDNS 관련 연락처 : 02-3674-5820  </p>
</blockquote>
<h3>SPF(Sender Policy Framework) 레코드 등록</h3>
<p><a href="https://support.google.com/a/answer/33786?hl=ko">구글 관리자 도움말 - SPF 레코드 정보</a>에 SPF에 대해 다음과 같이 설명하고 있다.</p>
<blockquote>
<p>SPF 레코드는 도메인을 대표하여 이메일을 보낼 수 있는 메일 서버를 식별하는 DNS(Domain Name Service) 레코드의 한 유형입니다.</p>
<p>SPF 레코드의 목적은 스팸 발송자가 도메인의 위조된 '보낸사람' 주소를 사용하여 메일을 보내지 못하도록 하는 것입니다. 수신자는 SPF 레코드를 참조하여 자신의 도메인에서 보낸 것처럼 위장한 메일이 인증된 메일 서버에서 전송된 것인지를 판별할 수 있습니다.</p>
<p>예를 들어 example.com 도메인에서 Gmail을 사용한다고 가정해 보겠습니다. Google Apps 메일 서버를 도메인에 대한 인증된 메일 서버로 식별하는 SPF 레코드를 만듭니다. 수신자의 메일 서버가 user\@example.com에서 보낸 메일을 수신하는 경우, example.com에 대한 SPF 레코드를 확인하여 유효한 메일인지 여부를 판별할 수 있습니다. 메일이 SPF 레코드에 나열된 Google Apps 메일 서버가 아닌 다른 서버에서 전송된 경우 수신자의 메일 서버에서 이를 스팸으로 간주하여 수신 거부할 수도 있습니다.</p>
<p>도메인에 SPF 레코드가 없는 경우에는 수신자 도메인에서 메일이 인증된 메일 서버에서 전송된 것인지를 확인할 수 없으므로 사용자의 메일이 수신 거부될 수도 있습니다.</p>
</blockquote>
<p>위 설명을 보면 알 수 있듯이 SPF 레코드 등록의 경우도 메일 발송을 위해서는 필수적으로 해야할 것 중 하나다. 그리고 뒤에 설명할 White Domain 등록을 위해서도 필히 등록이 되어 있어야 한다.</p>
<p>SPF 레코드 등록 방법은 잘 설명된 문서들이 많으므로 굳이 여기서 다시 설명하지는 않는다. 다만 간단히 예시만 하나 남긴다.</p>
<p><strong>DNS zone 설정에 추가</strong></p>
<pre><code>@   IN TXT      "v=spf1 ip4:A.B.C.1 ip4:A.B.C.2 ip4:A.B.C.3 ~all"</code></pre>
<p>간단히 설명하자면 다음의 IP(A.B.C.1, A.B.C.2, A.B.C.3)가 설정된 서버에서 해당 도메인을 사용해 메일을 발송할 수 있다는 의미다.</p>
<h3>화이트 도메인(White Domain) 등록</h3>
<p><a href="https://www.kisarbl.or.kr/">KISA RBL</a>에서 통합 White Domain 등록제를 운영하고 있다.
통합 White Domain 등록제에 대해서는 위 사이트에서 아래와 같이 안내하고 있다.</p>
<blockquote>
<p>정상적으로 발송하는 대량 이메일이 RBL이력으로 간주되어 차단되는 것을 방지하기 위하여, 사전에 등록된 개인이나 사업자에 한하여 국내 주요 포탈사이트로의 이메일 전송을 보장해주는 제도입니다. ( 무료 )</p>
<ul>
<li>단, White Domain으로 등록되었다 하더라도 이후 모니터링을 통해 RBL이력발송 사실이 확인되면, 즉각 차단 조치되며 White 리스트에서도 삭제될 수 있습니다.</li>
</ul>
<p>기존에 개별 포탈에서 'IP 등록제', 'IP 실명제'등의 이름으로 운영해오던 것을 2006년 9월 1일부로 KISARBL이 등록접수/관리/운영을 통합한 것이므로, KISARBL에 White Domain으로 등록하게 되면 , 여러번 별도로 등록할 필요없이 참여하고 있는 포탈사이트에 동시에 등록됩니다 .</p>
<ul>
<li>단 , 개인의 경우에는 일부 포탈사이트에서 자사의 정책상 등록을 허용하지 않습니다.</li>
</ul>
</blockquote>
<p>위 설명을 보면 알 수 있듯이 White Domain은 국내 포털 사이트로 메일을 발송하는 경우에 적용될 수 있는 것으로 범위가 제한되지만 대부분의 수신자가 국내 포털 사이트의 이메일을 사용하고 있는 것을 감안하면 이 또한 필수적으로 등록하는 것이 좋다. 등록 방법은 위 사이트에서 안내하고 있으므로 별도로 설명하지는 않는다. 하지만 등록 과정이 그리 복잡하지 않으므로 큰 어려움은 없을 것으로 생각된다.</p>
<hr />
<p><strong>상기 안내한 사항들은 필수적으로 처리하는 것이 좋은 것들이고 이후의 사항들은 가급적 처리하는 것이 좋은 것이다.</strong> 하지만 스팸으로 분류되지 않기 위해서는 최대한 할 수 있는 모든 방법을 동원하는 것이 좋다. 그렇게 해도 스팸으로 빠진다. 따라서 확률을 낮추는데 집중해야 한다.
정확하게 이야기 하자면 요즘엔 메일 내용을 더 중요하게 다루는 경우가 많아 내용 작성에도 공을 들여야 한다. 여기서 내용이란 의미를 갖는 문장 뿐아니라 html 마크업과 같은 메일 전문을 뜻한다. 하지만 이 부분은 이 글에서 이야기 하고자하는 것이 아니므로 이 이상의 언급은 피하려 한다.</p>
<hr />
<h3><a href="http://www.dkim.org/">DKIM(DomainKeys Identified Mail)</a> 인증</h3>
<p><a href="https://support.google.com/a/answer/174124">Google Apps 관리자 도움말 - DKIM으로 이메일 인증</a>에서는 다음과 같이 DKIM을 소개하고 있다.</p>
<blockquote>
<p>DKIM 표준을 사용하여 발신 메일 헤더에 디지털 서명을 추가하면 스푸핑을 방지하는 데 도움이 됩니다. 이렇게 하려면 비공개 도메인 키를 사용하여 도메인의 발신 메일 헤더를 암호화하고 키의 공개 버전을 도메인의 DNS 레코드에 추가해야 합니다. 그러면 수신 서버가 공개 키를 검색하여 수신 헤더의 암호를 해독하고 메일이 실제로 사용자의 도메인에서 전송되었으며 전송 과정에서 변경되지 않았는지 여부를 확인할 수 있습니다.</p>
</blockquote>
<p>위 설명을 보면 알 수 있듯이 스푸핑 방지에 도움을 준다. 따라서 수신된 메일이 스푸핑되지 않았음을 보증하므로 스팸으로 분류될 확률을 낮추는데 도움이 된다(기술적 의미에서는 스팸과 아무런 연관성이 없으나 스팸 필터에서 DKIM이 적용된 메일의 스팸 지수를 낮추는 정책을 사용하는 곳들이 많다).</p>
<p>DKIM에서 사용할 서명 키는 <code>openssl</code>등을 이용해서 직접 생성하는 것도 가능하지만 잘 만들어진 온라인 도구들이 있다. 그중에서 <a href="http://dkimcore.org/">DKIM Core Tools</a>를 간략히 소개하고자 한다. 직접 생성하는 방법을 사용해도 되나 여기서는 다루지 않는다(RSA 키를 생성하는 것이므로 쉽게 정보를 얻을 수 있다). 단, 직접 생성했을 경우라면 DNS에 등록할 레코드를 만드는 것이 조금 복잡할 수 있으니 DNS 레코드 생성을 도와주는 <a href="http://www.dnswatch.info/dkim/create-dns-record">DNS Watch - DKIM DNS Wizard</a>를 활용하자.</p>
<p><a href="http://dkimcore.org/tools/">http://dkimcore.org/tools/</a> 로 접속해보면 상단에 도메인을 넣는 란이 있다. 여기에 원하는 도메인을 입력하고 <code>Generate</code> 버튼을 누르면 private/public key를 만들어 보여주며 DNS에 설정할 DKIM 레코드도 생성하여 바로 보여준다(친절하게도 Bind9, Tinydns, Raw 포멧으로 제공한다). 여기서 제공하는 DKIM 레코드를 DNS에 추가하면 된다.</p>
<p>그런데 DKIM의 경우는 앞서 설명했던 것들과 다르게 설정만하면 완료되는 것이 아니다. DKIM 레코드에는 공개키를 제공하는 것이므로 메일 발송시 비공개 도메인 키를 사용하여 도메인의 발신 메일 헤더를 암호화하는 과정이 필요하다. 이 부분에 대해서는 오픈소스로 제작된 라이브러리들이 다수 있으니 쉽게 찾을 수 있다. 아니면 직접 구현해도 된다. 다만 RSA를 다루어야 하므로 약간의 지식이 필요하다.</p>
<h3>DMARC(Domain-based Message Authentication, Reporting and Conformance) 정책 게시</h3>
<p><a href="https://dmarc.org/">dmarc.org</a>에서는 DMARC에 대해 다음과 같이 설명하고 있다.</p>
<blockquote>
<p>DMARC, which stands for “Domain-based Message Authentication, Reporting &amp; Conformance”, is an email authentication protocol. It builds on the widely deployed SPF and DKIM protocols, adding a reporting function that allows senders and receivers to improve and monitor protection of the domain from fraudulent email.</p>
</blockquote>
<p>위 내용을 번역한 것은 아니지만 DMARC를 조금 더 이해하기 쉽게 설명하자면 다음과 같다.</p>
<p>DMARC는 이메일 인증 프로토콜로써 도메인 기반 메시지 인증, 보고, 준수를 의미한다. DMARC는 SPF, DKIM 두 가지 방법에 의존하여 서명 무결성을 확인한다. 메일이 SPF, DKIM 검사에 실패하면 DMARC 정책이 실행된다. 어떤 방법을 사용하든 두 가지 검사에 모두 실패하지 않는 한 메일은 DMARC를 통과한 것으로 간주된다. 그렇다면 DMARC를 통과하지 못하면 어떻게 되는가? 이때 어떻게 대응할 것인지에 대해서 정의하는 것이 DMARC 정책 게시라고 볼 수 있다.</p>
<p><a href="https://support.google.com/a/answer/2466563?hl=ko&amp;ref_topic=2759254">Google Apps 관리자 도움말 - DMARC 레코드 추가</a>에서 설명하고 있는 DMARC TXT 레코드에 대한 설명은 아래와 같다.</p>
<table>
<thead>
<tr>
<th>태그 이름</th>
<th>필수항목</th>
<th>목적</th>
<th>샘플</th>
</tr>
</thead>
<tbody>
<tr>
<td>v</td>
<td>필수</td>
<td>프로토콜 버전</td>
<td>v=DMARC1</td>
</tr>
<tr>
<td>p</td>
<td>필수</td>
<td>도메인에 대한 정책</td>
<td>p=quarantine</td>
</tr>
<tr>
<td>pct</td>
<td>선택사항</td>
<td>필터링이 적용되는 메일의 비율(%)</td>
<td>pct=20</td>
</tr>
<tr>
<td>rua</td>
<td>선택사항</td>
<td>집계 보고서의 보고 URI</td>
<td>rua=mailto:aggrep@example.com</td>
</tr>
<tr>
<td>sp</td>
<td>선택사항 도메인의 하위 도메인에 대한 정책</td>
<td>sp=reject</td>
</tr>
<tr>
<td>aspf</td>
<td>선택사항</td>
<td>SPF의 정렬 모드</td>
<td>aspf=r</td>
</tr>
</tbody>
</table>
<blockquote>
<p>v(버전) 및 p(정책) 태그만 필수항목입니다. 가능한 정책 설정, 즉 메일 처리에는 다음 3가지가 있습니다.</p>
<p>none - 아무 조치도 취하지 않습니다. 문제가 발생한 메일을 일일 보고서에 기록만 합니다.
quarantine - 문제가 있는 메일을 스팸으로 표시합니다.
reject - SMTP 계층에서 메일을 취소합니다.
정렬 모드란 발신자 레코드를 SPF 및 DKIM 서명과 비교하는 정밀도를 의미하는데, 느슨함 또는 엄격함의 두 가지 값을 가질 수 있으며, 느슨함은 'r', 엄격함은 's'로 표시됩니다. 간단히 말해, 느슨함 모드에서는 주어진 도메인의 하위 도메인처럼 부분 일치를 허용하며, 엄격함 모드에서는 완전히 일치해야 합니다.</p>
<p>일일 보고서를 받으려면 선택항목인 rua 태그와 함께 이메일 주소를 포함해야 합니다.</p>
<p>다음은 DMARC TXT 레코드(_dmarc.your_domain.com IN TXT)의 예입니다. 적절히 수정하여 사용할 수 있습니다. 'your_domain.com' 및 'postmaster@your_domain.com'은 실제 도메인 이름과 이메일 주소로 변경해야 합니다.</p>
<p>다음 TXT 레코드 예에서는 'your domain.com'에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 아무런 조치도 취하지 않습니다. 대신 해당하는 모든 메일은 'postmaster@your_domain.com'에 전송되는 일일 집계 보고서에 표시됩니다.</p>
<p>&quot;v=DMARC1; p=none; rua=mailto:postmaster@your_domain.com&quot;
다음 TXT 레코드 예에서는 'your domain.com'에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 이런 메일의 5%에 대해 차단 조치(스팸으로 표시)를 취합니다. 그런 다음 일일 집계 보고서를 'postmaster@your_domain.com'으로 보냅니다.</p>
<p>&quot;v=DMARC1; p=quarantine; pct=5; rua=mailto:postmaster@your_domain.com&quot;
마지막 예에서는 'your_domain.com'에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 이런 메일을 항상 거부합니다. 그런 다음 일일 집계 보고서를 'postmaster@your_domain.com' 및 'dmarc@your_domain.com'으로 보냅니다.</p>
<p>&quot;v=DMARC1; p=reject; rua=mailto:postmaster@your_domain.com, mailto:dmarc@your_domain.com&quot;</p>
</blockquote>
<p>설명을 보면 알 수 있듯이 이것 또한 메일이 스팸으로 분류되는 것과는 크게 상관이 없다. 하지만 여러 스팸 필터에서 DMARC가 설정된 도메인의 메일을 스팸 지수를 낮게 책정하는 정책을 사용하는 경우가 있어 소개한 것이다. 그도 그럴 것이 메일 품질(스팸, 스푸핑 등)에 대한 관리를 하고자하는 의지를 보이는 것이므로 정상적인 발송자라고 생각할 수 있는 것이다.</p>
<p>그리고 한가지. DMARC는 모든 메일 수신처에 적용되는 것이 아니다. <a href="https://dmarc.org/">dmarc.org</a> 표준을 준수하는 곳에서만 정책을 확인하고 대응한다.</p>
<p>DMARC를 어떻게 활용할 것인가에 대해서는 <a href="http://www.boannews.com/media/view.asp?idx=45489">이메일 보안을 위한 DMARC의 점진적인 사용법</a>을 참고하자.</p>
<hr />
<p>마지막으로 위 설명들을 처리하는데 도움을 줄 수 있는 몇가지 온라인 도구들을 소개하고자 한다.</p>
<h3>온라인 도구</h3>
<p>레코드 / 키 생성 / 유효성 검사 등을 도와준다.</p>
<ul>
<li>
<p><a href="http://www.protodave.com/tools/dkim-key-checker/">DKIM Key Checker</a></p>
</li>
<li>
<p><a href="http://dkimcore.org/tools/keycheck.html">DKIMCore - Key checker</a></p>
</li>
<li>
<p><a href="http://www.brandonchecketts.com/emailtest.php">DKIM, SPF, SpamAssassin Email Validator</a> - DKIM 수신 유효성 검사</p>
</li>
<li>
<p><a href="http://www.microsoft.com/mscorp/safety/content/technologies/senderid/wizard/">Sender ID Framework SPF Record Wizard</a></p>
</li>
</ul>
<h3>스팸 검사기</h3>
<p>자신의 메일에 대한 스팸 지수 등을 확인 할 수 있다.</p>
<ul>
<li><a href="http://isnotspam.com/">ISNotSPAM</a></li>
<li><a href="http://www.mail-tester.com/">Test the Spammyness of your Emails</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/16/delta-rpm/</id><title type="html">Yum Delta RPM 사용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/16/delta-rpm/"/><published>2015-12-16T08:47:36+09:00</published><updated>2015-12-16T08:47:36+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[최근부터 CentOS 7을 사용하면서 yum으로 update를 하면서 아래와 같은 오류가 자주 발생했다. 하지만 항상 나오는 것은 아니다. Error: Delta RPMs disabled because /usr/bin/applydeltarpm not installed. 이 메시지가 나오지만 실제로는 동작에는 이상이 없다. 하지만 계속 메시지가 나오니 보기도 싫고 다른 문제가 생길 수도 있을 것으로 생각되어 좀 찾아봤다. 일단 Delta RPM 이라고 하는 것은 RPM 패키지 버전별로 변경사항만 가지고 있는 것을 뜻한다. 다시 말해 update 시에 전체 RPM을 다운 받아서 설치하지 않고 변경사항만 다운 받아서 update를 하게 해준다는 것이다. 처리 과정을 보자면 yum에서 DRPM(Delta RPM)을 다운 받아 이전 패키지에 변경 사항을 병합하여 새로운 RPM을 빌드한 후 설치가 이루어 진다고 한다. 따라서 다운 받는 시간은 줄어들지만 병합하는 시간이 추가로 소요된다. 하지만 네트워크 비용이 더 크기 때문에 사용하는 것이 더 유리하다. Delta RPM은 Fedora 11부터 적용되었다고 하며 RPM을 사용하는 다른 Linux에서도 사용중이라고 한다. 그런데 CentOS의 minimal 설치시에는 포함되지 않기 때문에 위 오류가 난다고 한다. 그리고 update 대상이 DRPM을 지원할 경우만 위 오류가 표시되는 것으로 보인다. 이 오류를 제거하고 Delta RPM을 사용하는 방법은 간단하다. deltarpm 패키지를 설치하면 된다. 우선 오류에 나와있는 프로그램의 경로(/usr/bin/applydeltarpm)를 이용해서 패키지명을 찾는다. 사실 이 과정은 굳이 할 필요가 없다(이미 패키지명을 알고 있으니). $ yum provides /usr/bin/applydeltarpm Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile * base: ftp.daumkakao.com * epel: ftp.cuhk.edu.hk * extras: ftp.daumkakao.com * updates: ftp.daumkakao.com * webtatic: sp.repo.webtatic.com deltarpm-3.6-3.el7.x86_64 : Create deltas between rpms Repo : base Matched from: Filename : /usr/bin/applydeltarpm 패키지명을 알았으니 이제 설치만 하면 된다. $ yum install deltarpm 끝이다. 이제부터 Delta RPM이 지원되는 패키지는 DRPM을 이용해서 다운받는 시간이 줄어들 것이다.]]></summary><content type="html"><![CDATA[<p>최근부터 CentOS 7을 사용하면서 yum으로 update를 하면서 아래와 같은 오류가 자주 발생했다. 하지만 항상 나오는 것은 아니다.</p>
<pre class="hljs bash">Error: Delta RPMs disabled because /usr/bin/applydeltarpm not installed.</pre>
<p>이 메시지가 나오지만 실제로는 동작에는 이상이 없다. 하지만 계속 메시지가 나오니 보기도 싫고 다른 문제가 생길 수도 있을 것으로 생각되어 좀 찾아봤다.</p>
<p>일단 <strong><a href="https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM">Delta RPM</a> 이라고 하는 것은 RPM 패키지 버전별로 변경사항만 가지고 있는 것을 뜻한다.</strong> 다시 말해 update 시에 전체 RPM을 다운 받아서 설치하지 않고 변경사항만 다운 받아서 update를 하게 해준다는 것이다.</p>
<p>처리 과정을 보자면 yum에서 DRPM(Delta RPM)을 다운 받아 이전 패키지에 변경 사항을 병합하여 새로운 RPM을 빌드한 후 설치가 이루어 진다고 한다. 따라서 다운 받는 시간은 줄어들지만 병합하는 시간이 추가로 소요된다. 하지만 네트워크 비용이 더 크기 때문에 사용하는 것이 더 유리하다.</p>
<p><a href="https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM">Delta RPM</a>은 Fedora 11부터 적용되었다고 하며 RPM을 사용하는 다른 Linux에서도 사용중이라고 한다. 그런데 CentOS의 minimal 설치시에는 포함되지 않기 때문에 위 오류가 난다고 한다. 그리고 update 대상이 DRPM을 지원할 경우만 위 오류가 표시되는 것으로 보인다.</p>
<p>이 오류를 제거하고 <a href="https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM">Delta RPM</a>을 사용하는 방법은 간단하다. deltarpm 패키지를 설치하면 된다.</p>
<p>우선 오류에 나와있는 프로그램의 경로(<code>/usr/bin/applydeltarpm</code>)를 이용해서 패키지명을 찾는다. 사실 이 과정은 굳이 할 필요가 없다(이미 패키지명을 알고 있으니).</p>
<pre class="hljs bash">$ yum provides /usr/bin/applydeltarpm

Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: ftp.daumkakao.com
 * epel: ftp.cuhk.edu.hk
 * extras: ftp.daumkakao.com
 * updates: ftp.daumkakao.com
 * webtatic: sp.repo.webtatic.com
deltarpm-3.6-3.el7.x86_64 : Create deltas between rpms
Repo        : base
Matched from:
Filename    : /usr/bin/applydeltarpm</pre>
<p>패키지명을 알았으니 이제 설치만 하면 된다.</p>
<pre class="hljs bash">$ yum install deltarpm</pre>
<p>끝이다. 이제부터 <a href="https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM">Delta RPM</a>이 지원되는 패키지는 DRPM을 이용해서 다운받는 시간이 줄어들 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/15/android-app-finish/</id><title type="html">안드로이드 앱 종료 방법</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/15/android-app-finish/"/><published>2015-12-15T19:38:39+09:00</published><updated>2015-12-15T19:38:39+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 앱의 종료는 보통 Root Activity에서 finish()를 사용한다. 그런데 앱의 종료는 이외에도 여러가지 방법이 있고 각각이 다른 상황을 만들어 낸다. 당연히 구글에서는 finish()를 권장한다고 한다. 하지만 상황적으로 프로세스를 완전히 종료해야 하는 경우가 있을 수 있다. 아래에 설명하고자 하는 것들은 안정적으로 사용할 수 있는 방법이라고 장담하지는 못한다. 충분히 테스트된 코드가 아니라 인터넷 상에서 소개되는 방법들을 정리한 것이다. 물론 기본적인 테스트는 했다. 우선 Activity만 종료하는 방법부터 알아보자. finishAffinity()를 사용하는 방법 Root Activity에서 finish()를 사용해서 종료하는 것은 굳이 설명하지 않아도 될 것으로 생각한다. 단, 이 방법은 현재 Activity가 Root Activity가 아니면 Root Activity를 찾아가는 과정이 필요하므로 복잡해질 수 있다. 예를들어 아래와 같이 처리한다(이 코드는 테스트하지 않았다. 그리고 호출하는 Activity와 Root Activity에서 각각 처리해야 한다). // Root Activity를 호출 Intent intent = new Intent(this, FirstActivity.class); intent.putExtra(EXTRA_FINISH, true); intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); startActivity(intent); finish(); // Root Activity에서 인자를 받아 종료 if (getExtras() != null && getIntentExtra(EXTRA_FINISH, false)) { finish(); } 이런 번거로움을 해결해 줄 수 있는 것이 finishAffinity()다. 이 함수를 사용하면 어느 Activity에서든 모든 부모 Activity를 닫을 수 있다. 단, 이 함수는 API 16부터 사용 가능하다. 하지만 support library v4를 사용하면 이하 버전에서도 이 함수를 사용할 수 있다. // only API 16+ activity.finishAffinity(); // support library v4 ActivityCompat.finishAffinity(activity); 홈 화면 Activity 띄우기 이 방법은 Activity의 종료라고 하기에는 조금 애매한 방법이다. 일단 아래의 소스를 보자. Intent homeIntent = new Intent(Intent.ACTION_MAIN); homeIntent.addCategory(Intent.CATEGORY_HOME); homeIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); startActivity(homeIntent); 소스를 보면 알겠지만 말그대로 홈 화면 Activity를 띄우는 것이다. 어쨌든 사용자가 보기에는 앱이 종료된 것처럼 보인다. 뒤에 남겨진 프로세스가 계속 살아남는지 Activity finish와 동일한 생명주기를 갖는지는 테스트 해보지 않았다. finishAndRemoveTask ()를 사용하는 방법 finishAndRemoveTask ()는 Activity를 종료하고 Task Manager(최근 앱 사용 목록)에서도 해당 앱을 제거한다. 단, Task를 종료하지만 Process까지 종료하지는 않는다. 앱을 finishAndRemoveTask ()로 종료하고 Task Manager를 보면 해당 앱이 없어 Process가 종료된 것처럼 보이지만 이 상태에서 다시 앱을 실행하면 Application Class의 onCreate()가 실행되지 않는다(Process가 종료되었다면 이 함수가 다시 실행되었을 것이다). 메뉴얼에는 아래와 같이 나와있다. Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the Activity. 그리고 이 함수는 API 21에서 추가된 함수로 아직까지는 호환성 함수는 없는 것으로 보인다. 그나마 찾아본 바로는 chromium 소스 코드 중 ApiCompatibilityUtils.java에 있는 아래의 코드가 있다. 하지만 사용에 큰 의미는 없어보이니 참고만 하자. public static void finishAndRemoveTask(Activity activity) { if (Build.VERSION.SDK_INT > Build.VERSION_CODES.LOLLIPOP) { activity.finishAndRemoveTask(); } else if (Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP) { // crbug.com/395772 : Fallback for Activity.finishAndRemoveTask() failing. new FinishAndRemoveTaskWithRetry(activity).run(); } else { activity.finish(); } } private static class FinishAndRemoveTaskWithRetry implements Runnable { private static final long RETRY_DELAY_MS = 500; private static final long MAX_TRY_COUNT = 3; private final Activity mActivity; private int mTryCount; FinishAndRemoveTaskWithRetry(Activity activity) { mActivity = activity; } @Override public void run() { mActivity.finishAndRemoveTask(); mTryCount++; if (!mActivity.isFinishing()) { if (mTryCount < MAX_TRY_COUNT) { ThreadUtils.postOnUiThreadDelayed(this, RETRY_DELAY_MS); } else { mActivity.finish(); } } } } Process 종료하기 이제부터는 앱을 종료하고 Process까지 완전히 종료시키는 방법들이다. 이 부분에 대해서는 의견이 다양한데 앱 종료시 처리되어야 할 프로세스들이 정상적으로 동작하지 못할 수 있다는 우려로 사용을 자제하라는 의견도 있고 알아서 처리하므로 상관없다는 의견도 있다. 테스트를 아직 해보지 못해 어떤 문제가 발생하는지에 대해서는 설명할 수 없으니 사용시 유의하자. How to close Android application?에 소개된 Class 소스의 일부를 보자. public static void killApp(boolean killSafely) { if (killSafely) { /* * Notify the system to finalize and collect all objects of the app * on exit so that the virtual machine running the app can be killed * by the system without causing issues. NOTE: If this is set to * true then the virtual machine will not be killed until all of its * threads have closed. */ System.runFinalizersOnExit(true); /* * Force the system to close the app down completely instead of * retaining it in the background. The virtual machine that runs the * app will be killed. The app will be completely created as a new * app in a new virtual machine running in a new process if the user * starts the app again. */ System.exit(0); } else { /* * Alternatively the process that runs the virtual machine could be * abruptly killed. This is the quickest way to remove the app from * the device but it could cause problems since resources will not * be finalized first. For example, all threads running under the * process will be abruptly killed when the process is abruptly * killed. If one of those threads was making multiple related * changes to the database, then it may have committed some of those * changes but not all of those changes when it was abruptly killed. */ android.os.Process.killProcess(android.os.Process.myPid()); } } 이 함수에서 Process를 종료하는 방법은 크게 두가지로 나뉜다. System.exit()를 사용하는 방법과 android.os.Process.killProcess를 사용하는 방법이다. 함수를 보면 알다시피 System.exit()를 사용하는 것이 더 안전한 방법으로 보인다. 그런데 이 부분에 대해서도 사람들의 의견이 차이가 있다. System.runFinalizersOnExit(true) 대신 System.runFinalization()를 호출하여 강제로 Finalization을 수행하는 방법을 설명하는 사람도 있고 이렇게하면 불안정하게 동작할 수 있으니 그냥 System.exit()만 호출하라는 사람도 있고... 어쨌든 개인적으로는 위 함수가 가장 적절하게 구성되어 있다고 생각한다. 단, 주의사항 한가지. 이 부분은 직접 테스트 해본 것은 아니나 두개 이상의 Activity가 떠 있는 상황에서 Process를 종료시키면 Process가 살아난다는 이야기도 있다. 그런 이유가 아니더라도 Activity의 종료 프로세스를 제대로 동작시키는 것이 좋다는 생각으로 나는 아래와 같이 처리하고 있다. ActivityCompat.finishAffinity(this); System.runFinalizersOnExit(true); System.exit(0); 현재까지는 이 방법으로 이상없이 사용하고 있으나 서두에서 언급한 것처럼 충분한 테스트를 거친 내용들이 아니므로 사용시에는 유의하기 바란다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 앱의 종료는 보통 Root Activity에서 <a href="http://developer.android.com/reference/android/app/Activity.html#finish%28%29">finish()</a>를 사용한다. 그런데 앱의 종료는 이외에도 여러가지 방법이 있고 각각이 다른 상황을 만들어 낸다. 당연히 구글에서는 <a href="http://developer.android.com/reference/android/app/Activity.html#finish%28%29">finish()</a>를 권장한다고 한다. 하지만 상황적으로 프로세스를 완전히 종료해야 하는 경우가 있을 수 있다. 아래에 설명하고자 하는 것들은 안정적으로 사용할 수 있는 방법이라고 장담하지는 못한다. 충분히 테스트된 코드가 아니라 인터넷 상에서 소개되는 방법들을 정리한 것이다. 물론 기본적인 테스트는 했다.</p>
<p>우선 Activity만 종료하는 방법부터 알아보자.</p>
<h3><a href="http://developer.android.com/reference/android/app/Activity.html#finishAffinity%28%29">finishAffinity()</a>를 사용하는 방법</h3>
<p>Root Activity에서 <a href="http://developer.android.com/reference/android/app/Activity.html#finish%28%29">finish()</a>를 사용해서 종료하는 것은 굳이 설명하지 않아도 될 것으로 생각한다. 단, 이 방법은 현재 Activity가 Root Activity가 아니면 Root Activity를 찾아가는 과정이 필요하므로 복잡해질 수 있다. 예를들어 아래와 같이 처리한다(이 코드는 테스트하지 않았다. 그리고 호출하는 Activity와 Root Activity에서 각각 처리해야 한다).</p>
<pre class="hljs java"><span class="hljs-comment">// Root Activity를 호출</span>
Intent intent  = <span class="hljs-keyword">new</span> Intent(<span class="hljs-keyword">this</span>, FirstActivity.class);
intent.putExtra(EXTRA_FINISH, <span class="hljs-keyword">true</span>);
intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);        
startActivity(intent);
finish();</pre>
<pre class="hljs java"><span class="hljs-comment">// Root Activity에서 인자를 받아 종료</span>
<span class="hljs-keyword">if</span> (getExtras() != <span class="hljs-keyword">null</span> &amp;&amp; getIntentExtra(EXTRA_FINISH, <span class="hljs-keyword">false</span>)) {
   finish();
}</pre>
<p>이런 번거로움을 해결해 줄 수 있는 것이 <a href="http://developer.android.com/reference/android/app/Activity.html#finishAffinity%28%29">finishAffinity()</a>다. 이 함수를 사용하면 어느 Activity에서든 모든 부모 Activity를 닫을 수 있다. 단, 이 함수는 API 16부터 사용 가능하다. 하지만 support library v4를 사용하면 이하 버전에서도 이 함수를 사용할 수 있다.</p>
<pre class="hljs java"><span class="hljs-comment">// only API 16+</span>
activity.finishAffinity();

<span class="hljs-comment">// support library v4</span>
ActivityCompat.finishAffinity(activity);</pre>
<h3>홈 화면 Activity 띄우기</h3>
<p>이 방법은 Activity의 종료라고 하기에는 조금 애매한 방법이다. 일단 아래의 소스를 보자.</p>
<pre class="hljs java">Intent homeIntent = <span class="hljs-keyword">new</span> Intent(Intent.ACTION_MAIN);
homeIntent.addCategory(Intent.CATEGORY_HOME);
homeIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
startActivity(homeIntent);</pre>
<p>소스를 보면 알겠지만 말그대로 홈 화면 Activity를 띄우는 것이다. 어쨌든 사용자가 보기에는 앱이 종료된 것처럼 보인다. 뒤에 남겨진 프로세스가 계속 살아남는지 Activity finish와 동일한 생명주기를 갖는지는 테스트 해보지 않았다.</p>
<h3><a href="http://developer.android.com/reference/android/app/Activity.html#finishAndRemoveTask%28%29">finishAndRemoveTask ()</a>를 사용하는 방법</h3>
<p><a href="http://developer.android.com/reference/android/app/Activity.html#finishAndRemoveTask%28%29">finishAndRemoveTask ()</a>는 Activity를 종료하고 Task Manager(최근 앱 사용 목록)에서도 해당 앱을 제거한다. <strong>단, Task를 종료하지만 Process까지 종료하지는 않는다.</strong> 앱을 <a href="http://developer.android.com/reference/android/app/Activity.html#finishAndRemoveTask%28%29">finishAndRemoveTask ()</a>로 종료하고 Task Manager를 보면 해당 앱이 없어 Process가 종료된 것처럼 보이지만 이 상태에서 다시 앱을 실행하면 Application Class의 onCreate()가 실행되지 않는다(Process가 종료되었다면 이 함수가 다시 실행되었을 것이다). 메뉴얼에는 아래와 같이 나와있다.</p>
<blockquote>
<p>Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the Activity.</p>
</blockquote>
<p>그리고 이 함수는 API 21에서 추가된 함수로 아직까지는 호환성 함수는 없는 것으로 보인다. 그나마 찾아본 바로는 chromium 소스 코드 중 <a href="https://chromium.googlesource.com/chromium/src/base/+/master/android/java/src/org/chromium/base/ApiCompatibilityUtils.java">ApiCompatibilityUtils.java</a>에 있는 아래의 코드가 있다. 하지만 사용에 큰 의미는 없어보이니 참고만 하자.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">finishAndRemoveTask</span><span class="hljs-params">(Activity activity)</span> </span>{
    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.LOLLIPOP) {
        activity.finishAndRemoveTask();
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP) {
        <span class="hljs-comment">// crbug.com/395772 : Fallback for Activity.finishAndRemoveTask() failing.</span>
        <span class="hljs-keyword">new</span> FinishAndRemoveTaskWithRetry(activity).run();
    } <span class="hljs-keyword">else</span> {
        activity.finish();
    }
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FinishAndRemoveTaskWithRetry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> RETRY_DELAY_MS = <span class="hljs-number">500</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> MAX_TRY_COUNT = <span class="hljs-number">3</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Activity mActivity;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> mTryCount;
    FinishAndRemoveTaskWithRetry(Activity activity) {
        mActivity = activity;
    }
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{
        mActivity.finishAndRemoveTask();
        mTryCount++;
        <span class="hljs-keyword">if</span> (!mActivity.isFinishing()) {
            <span class="hljs-keyword">if</span> (mTryCount &lt; MAX_TRY_COUNT) {
                ThreadUtils.postOnUiThreadDelayed(<span class="hljs-keyword">this</span>, RETRY_DELAY_MS);
            } <span class="hljs-keyword">else</span> {
                mActivity.finish();
            }
        }
    }
}</pre>
<h3>Process 종료하기</h3>
<p>이제부터는 앱을 종료하고 Process까지 완전히 종료시키는 방법들이다. 이 부분에 대해서는 의견이 다양한데 앱 종료시 처리되어야 할 프로세스들이 정상적으로 동작하지 못할 수 있다는 우려로 사용을 자제하라는 의견도 있고 알아서 처리하므로 상관없다는 의견도 있다. 테스트를 아직 해보지 못해 어떤 문제가 발생하는지에 대해서는 설명할 수 없으니 사용시 유의하자.</p>
<p><a href="http://stackoverflow.com/a/5036668">How to close Android application?</a>에 소개된  Class 소스의 일부를 보자.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">killApp</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> killSafely)</span> </span>{
    <span class="hljs-keyword">if</span> (killSafely) {
        <span class="hljs-comment">/*
         * Notify the system to finalize and collect all objects of the app
         * on exit so that the virtual machine running the app can be killed
         * by the system without causing issues. <span class="hljs-doctag">NOTE:</span> If this is set to
         * true then the virtual machine will not be killed until all of its
         * threads have closed.
         */</span>
        System.runFinalizersOnExit(<span class="hljs-keyword">true</span>);

        <span class="hljs-comment">/*
         * Force the system to close the app down completely instead of
         * retaining it in the background. The virtual machine that runs the
         * app will be killed. The app will be completely created as a new
         * app in a new virtual machine running in a new process if the user
         * starts the app again.
         */</span>
        System.exit(<span class="hljs-number">0</span>);
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-comment">/*
         * Alternatively the process that runs the virtual machine could be
         * abruptly killed. This is the quickest way to remove the app from
         * the device but it could cause problems since resources will not
         * be finalized first. For example, all threads running under the
         * process will be abruptly killed when the process is abruptly
         * killed. If one of those threads was making multiple related
         * changes to the database, then it may have committed some of those
         * changes but not all of those changes when it was abruptly killed.
         */</span>
        android.os.Process.killProcess(android.os.Process.myPid());
    }
}</pre>
<p>이 함수에서 Process를 종료하는 방법은 크게 두가지로 나뉜다. <code>System.exit()</code>를 사용하는 방법과 <code>android.os.Process.killProcess</code>를 사용하는 방법이다. 함수를 보면 알다시피 <code>System.exit()</code>를 사용하는 것이 더 안전한 방법으로 보인다. 그런데 이 부분에 대해서도 사람들의 의견이 차이가 있다. <code>System.runFinalizersOnExit(true)</code> 대신 <code>System.runFinalization()</code>를 호출하여 강제로 Finalization을 수행하는 방법을 설명하는 사람도 있고 이렇게하면 불안정하게 동작할 수 있으니 그냥 <code>System.exit()</code>만 호출하라는 사람도 있고... 어쨌든 개인적으로는 위 함수가 가장 적절하게 구성되어 있다고 생각한다. <strong>단, 주의사항 한가지. 이 부분은 직접 테스트 해본 것은 아니나 두개 이상의 Activity가 떠 있는 상황에서 Process를 종료시키면 Process가 살아난다는 이야기도 있다.</strong> 그런 이유가 아니더라도 Activity의 종료 프로세스를 제대로 동작시키는 것이 좋다는 생각으로 나는 아래와 같이 처리하고 있다.</p>
<pre class="hljs java">ActivityCompat.finishAffinity(<span class="hljs-keyword">this</span>);
System.runFinalizersOnExit(<span class="hljs-keyword">true</span>);
System.exit(<span class="hljs-number">0</span>);</pre>
<p>현재까지는 이 방법으로 이상없이 사용하고 있으나 서두에서 언급한 것처럼 충분한 테스트를 거친 내용들이 아니므로 사용시에는 유의하기 바란다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/10/realm/</id><title type="html">안드로이드 Realm 0.82.2 -&gt; 0.86.0 버전업</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/10/realm/"/><published>2015-12-10T20:43:17+09:00</published><updated>2015-12-10T20:43:17+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[모바일 앱 개발시에 DB는 주로 Sqlite 또는 Core Data를 많이 사용한다. 그런데 Sqlite 등을 사용하는 것이 조금 불편한 부분들이 많아서 지난 앱 개발시 Realm을 사용했다. Realm을 사용하면 개발이 용이해지기는 한데 간혹 다루기가 까다로워지는 경우가 있다. 사실 그런 문제 상황은 내가 사용시 뭔가를 잘못했을 확률이 높지만 개인적으로 다소 예민한 라이브러리라고 생각한다. 어찌보면 당연할 수도 있는 것이 아직 1.0 버전이 되지도 못한 라이브러리니 그럴만도 하다. 실제로 아직은 버전업이 자주 발생하고 버전업시에 변경 사항이 다소 있는 편이다. 중요 변경이 있을 때 마이그레이션을 잘못하거나 하면 앱 크래시의 원인이 되기도 하니 버전업시에는 유의해야 한다. 그렇지만 다행인 것은 문서화가 잘되어 있고 한글본도 번역도 빠르게 올라온다. 얼마전 기존 프로젝트의 Realm의 0.82.2에서 0.86.0으로 버전업을 했다(버전을 확인한지 그리 오래되지 않았는데 그 사이 많이도 버전업되었다). 그랬더니 아래와 같은 오류가 발생했다. Field 'date' is required. Either set @Required to field 'date' or migrate using io.realm.internal.Table.convertColumnToNullable(). : io.realm.exceptions.RealmMigrationNeededException: Field 'date' is required. Either set @Required to field 'date' or migrate using io.realm.internal.Table.convertColumnToNullable(). 사용하는 테이블의 date 필드가 required이니 @Required 어노테이션을 붙이거나 테이블을 마이그레이션하라는 안내다. 이미 Realm에서 해결 방법을 친절히도 안내해주고 있다. @Required는 기존에 사용하지 않던 것이라 찾아봤다. Realm 자바 0.83 — Null 지원!를 보니 0.83 버전에서 데이터값으로 null을 사용할 수 있게 됨에 따라 추가된 어노테이션이다. 그러니 기존 0.82.2의 데이터는 null이 될 수 없었으므로 required 타입으로 인식하는 것이다. 그외에도 다른 변경 사항을 보고 싶다면 changelog를 참고하자. 기존에도 null이 들어올 수 없는 구조로 프로그램되어 있었으니 @Required를 해당 필드(변수)에 붙이는 것으로 해결하는 것이 맞겠다. 나는 여기서 다른 문제를 겪었었는데 @Required만 붙이면 될 것을 스키마 버전 정보까지 올리는 바람에 엉망이 되었었다. 어쨌든 결론은 이 문제에 대해서는 @Required를 붙이는 방법으로 간단히 해결된다. 그런데 문제는 여기서 끝나지 않았다. RealmMigration 클래스도 방식이 변경되어 맞춰줬다. 그리고 또 하나. 기존에는 아래와 같이 인스턴스를 생성해서 사용했다. RealmConfiguration.Builder realmBuilder = new RealmConfiguration.Builder(context).name(realmName) .schemaVersion(SCHEME_VERSION); RealmConfiguration config = realmBuilder.build(); Realm realm = Realm.getInstance(config); 그런데 여기서 문제가 발생하기 시작했다. 이 부분은 realm 접속을 생성하는 과정으로 사용하는 시점에 처리하고 있었다. 기존에 사용처 자체가 워낙에 간단한 부분이라서 그랬는지는 몰라도 문제가 없었다. 그런데 버전업 이후 이상하게 앱 크래시가 발생했다. E/AndroidRuntime: FATAL EXCEPTION: main Process: ~~~, PID: 21532 java.lang.RuntimeException: Unable to start activity ComponentInfo{~~~/~~~}: java.lang.IllegalArgumentException: Configurations cannot be different if used to open the same file. ... 오류 내용은 이렇다. 동일 table 파일을 다른 Configurations으로 열 수 없다. 이 오류는 처음에 앱이 열릴 때는 발생하지 않다가 종료 후 다시 들어오면 발생했다. 이상했다. 분명이 앱을 종료 했음에도 불구하고 왜 다른 Configurations을 넣고 있다는 것인지. 이번에 알게 되었는데 root activity에서의 finish()는 앱의 종료를 의미하는 것이 아니었다. 마지막 activity가 finish()되면 화면에서는 즉시 종료된 것으로 보이나 프로세스는 살아 남는다. 아마도 시스템 자원이 부족해지면 프로세스가 OS에 의해 죽을 수는 있다. 이와 관련해서 앱을 완전히 종료하는 방법에 대해서는 조만간 별도로 글을 남기려고 한다. 안드로이드 앱 종료 방법에서 설명하고 있다. 어쨌든 이러한 상황이 발생하는 것으로 보아 기존 버전과 최신 버전의 Realm 생명 주기를 관리하는 방법이 변경된 것으로 보인다. 메뉴얼에 보면 모범 사용예 - Realm 인스턴스들의 생명주기 관리하기라는 부분이 있다. "모범 사용예"라는 항목 자체가 0.85.0 버전부터 있는 것으로 보아 그 시점에 변경이 된 것으로 생각한다. 그런데 여기서 사용하는 함수는 Realm Java 0.81.1에서 추가된 것으로 소개하고 있다. 기존에 내가 사용하던 것이 0.82.2 였지만 위 문제가 발생하지 않았던 것으로 보아 앞선 예상대로 그 후에 관리 방법이 변경된 것 같기는 하다. 어쨌든 이 부분에 관련된 정보가 있어 발췌한다. Realm 인스턴스들의 생명주기 관리하기 RealmObjects과 RealmResults는 데이터 전체를 느긋하게 가져옵니다. 이런 이유로 Realm 오브젝트나 질의 결과를 접근할 때 가능한 오래 Realm 인스턴스를 유지하는 것이 중요합니다. Realm 데이터 커넥션을 열고 닫는 추가 비용을 줄이기 위해 레퍼런스 카운트화된 캐시를 가집니다. 이는 Realm.getDefaultInstance()를 같은 스레드에서 여러번 호출하는 것은 비용이 들지 않고 내부의 리소스는 자체적으로 모든 인스턴스가 닫히면 해제됨을 의미합니다. 모든 액티비티와 프래그먼트의 UI 스레드에서 Realm 인스턴스를 열고 Activity나 Fragment가 파괴될 때 닫는 것은 쉽고 안전한 접근 법입니다. // 애플리케이션에서 Realm 설정하기 public class MyApplication extends Application { @Override public void onCreate() { super.onCreate(); RealmConfiguration realmConfiguration = new RealmConfiguration.Builder(this).build(); Realm.setDefaultConfiguration(realmConfiguration); } } // 액티비티들을 전환하며 onCreate()/onDestroy()가 중첩되면 Activity 2의 onCreate가 // Activity 1의 onDestroy()보다 먼저 호출 됩니다. public class MyActivity extends Activity { private Realm realm; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); realm = Realm.getDefaultInstance(); } @Override protected void onDestroy() { super.onDestroy(); realm.close(); } } // 프래그먼트에서 onStart()/onStop()를 사용합니다. // 프래그먼트의 onDestroy()는 호출되지 않을 수 있습니다. public class MyFragment extends Fragment { private Realm realm; @Override public void onStart() { super.onStart(); realm = Realm.getDefaultInstance(); } @Override public void onStop() { super.onStop(); realm.close(); } } 그렇다. 이제는 앱 생성시 Realm.setDefaultConfiguration()를 이용해서 Configuration을 지정하고 필요한 곳에서 Realm.getDefaultInstance()으로 인스턴스를 받아 사용하는 것을 권장한다. 위에 이야기한 문제도 이 방식을 사용하면 발생하지 않는다.]]></summary><content type="html"><![CDATA[<p>모바일 앱 개발시에 DB는 주로 Sqlite 또는 Core Data를 많이 사용한다. 그런데 Sqlite 등을 사용하는 것이 조금 불편한 부분들이 많아서 지난 앱 개발시 <a href="https://realm.io/kr/">Realm</a>을 사용했다. <a href="https://realm.io/kr/">Realm</a>을 사용하면 개발이 용이해지기는 한데 간혹 다루기가 까다로워지는 경우가 있다. 사실 그런 문제 상황은 내가 사용시 뭔가를 잘못했을 확률이 높지만 개인적으로 다소 예민한 라이브러리라고 생각한다. 어찌보면 당연할 수도 있는 것이 아직 1.0 버전이 되지도 못한 라이브러리니 그럴만도 하다. 실제로 아직은 버전업이 자주 발생하고 버전업시에 변경 사항이 다소 있는 편이다. 중요 변경이 있을 때 마이그레이션을 잘못하거나 하면 앱 크래시의 원인이 되기도 하니 버전업시에는 유의해야 한다.
<strong>그렇지만 다행인 것은 <a href="https://realm.io/kr/docs/java/latest/">문서화</a>가 잘되어 있고 한글본도 번역도 빠르게 올라온다.</strong></p>
<hr />
<p>얼마전 기존 프로젝트의 Realm의 0.82.2에서 0.86.0으로 버전업을 했다(버전을 확인한지 그리 오래되지 않았는데 그 사이 많이도 버전업되었다). 그랬더니 아래와 같은 오류가 발생했다.</p>
<pre><code>Field 'date' is required. Either set @Required to field 'date' or migrate using io.realm.internal.Table.convertColumnToNullable(). : io.realm.exceptions.RealmMigrationNeededException: Field 'date' is required. Either set @Required to field 'date' or migrate using io.realm.internal.Table.convertColumnToNullable().</code></pre>
<p>사용하는 테이블의 <code>date</code> 필드가 <code>required</code>이니 <code>@Required</code> 어노테이션을 붙이거나 테이블을 마이그레이션하라는 안내다. 이미 Realm에서 해결 방법을 친절히도 안내해주고 있다. <code>@Required</code>는 기존에 사용하지 않던 것이라 찾아봤다. <a href="https://realm.io/kr/news/realm-java-0.83.0/">Realm 자바 0.83 — Null 지원!</a>를 보니 0.83 버전에서 데이터값으로 null을 사용할 수 있게 됨에 따라 추가된 어노테이션이다. 그러니 기존 0.82.2의 데이터는 null이 될 수 없었으므로 required 타입으로 인식하는 것이다. 그외에도 다른 변경 사항을 보고 싶다면 <a href="https://github.com/realm/realm-java/blob/master/changelog.txt">changelog</a>를 참고하자.</p>
<p>기존에도 null이 들어올 수 없는 구조로 프로그램되어 있었으니 <code>@Required</code>를 해당 필드(변수)에 붙이는 것으로 해결하는 것이 맞겠다. 나는 여기서 다른 문제를 겪었었는데 <code>@Required</code>만 붙이면 될 것을 스키마 버전 정보까지 올리는 바람에 엉망이 되었었다. 어쨌든 결론은 이 문제에 대해서는 <code>@Required</code>를 붙이는 방법으로 간단히 해결된다.</p>
<hr />
<p>그런데 문제는 여기서 끝나지 않았다. <a href="https://realm.io/docs/java/latest/api/io/realm/RealmMigration.html">RealmMigration</a> 클래스도 방식이 변경되어 맞춰줬다.</p>
<p>그리고 또 하나. 기존에는 아래와 같이 인스턴스를 생성해서 사용했다.</p>
<pre class="hljs java">RealmConfiguration.Builder realmBuilder = <span class="hljs-keyword">new</span> RealmConfiguration.Builder(context).name(realmName) .schemaVersion(SCHEME_VERSION);
RealmConfiguration config = realmBuilder.build();
Realm realm = Realm.getInstance(config);</pre>
<p>그런데 여기서 문제가 발생하기 시작했다. 이 부분은 realm 접속을 생성하는 과정으로 사용하는 시점에 처리하고 있었다. 기존에 사용처 자체가 워낙에 간단한 부분이라서 그랬는지는 몰라도 문제가 없었다. 그런데 버전업 이후 이상하게 앱 크래시가 발생했다.</p>
<pre><code>E/AndroidRuntime: FATAL EXCEPTION: main
                  Process: ~~~, PID: 21532
                  java.lang.RuntimeException: Unable to start activity ComponentInfo{~~~/~~~}: java.lang.IllegalArgumentException: Configurations cannot be different if used to open the same file.
...</code></pre>
<p>오류 내용은 이렇다. 동일 table 파일을 다른 Configurations으로 열 수 없다. 이 오류는 처음에 앱이 열릴 때는 발생하지 않다가 종료 후 다시 들어오면 발생했다. 이상했다. 분명이 앱을 종료 했음에도 불구하고 왜 다른 Configurations을 넣고 있다는 것인지.</p>
<p>이번에 알게 되었는데 root activity에서의 finish()는 앱의 종료를 의미하는 것이 아니었다. 마지막 activity가 finish()되면 화면에서는 즉시 종료된 것으로 보이나 프로세스는 살아 남는다. 아마도 시스템 자원이 부족해지면 프로세스가 OS에 의해 죽을 수는 있다. 이와 관련해서 앱을 완전히 종료하는 방법에 대해서는 <del>조만간 별도로 글을 남기려고 한다.</del> <a href="https://blog.asamaru.net/2015/12/15/android-app-finish/">안드로이드 앱 종료 방법</a>에서 설명하고 있다.</p>
<p>어쨌든 이러한 상황이 발생하는 것으로 보아 기존 버전과 최신 버전의 Realm 생명 주기를 관리하는 방법이 변경된 것으로 보인다. 메뉴얼에 보면 <a href="https://realm.io/kr/docs/java/0.86.0/#section-52">모범 사용예 - Realm 인스턴스들의 생명주기 관리하기</a>라는 부분이 있다. &quot;모범 사용예&quot;라는 항목 자체가 0.85.0 버전부터 있는 것으로 보아 그 시점에 변경이 된 것으로 생각한다. 그런데 여기서 사용하는 함수는 <a href="https://realm.io/news/realm-java-0.81.1/">Realm Java 0.81.1</a>에서 추가된 것으로 소개하고 있다. 기존에 내가 사용하던 것이 0.82.2 였지만 위 문제가 발생하지 않았던 것으로 보아 앞선 예상대로 그 후에 관리 방법이 변경된 것 같기는 하다. 어쨌든 이 부분에 관련된 정보가 있어 발췌한다.</p>
<blockquote>
<p><strong>Realm 인스턴스들의 생명주기 관리하기</strong></p>
<p>RealmObjects과 RealmResults는 데이터 전체를 느긋하게 가져옵니다. 이런 이유로 Realm 오브젝트나 질의 결과를 접근할 때 가능한 오래 Realm 인스턴스를 유지하는 것이 중요합니다. Realm 데이터 커넥션을 열고 닫는 추가 비용을 줄이기 위해 레퍼런스 카운트화된 캐시를 가집니다. 이는 Realm.getDefaultInstance()를 같은 스레드에서 여러번 호출하는 것은 비용이 들지 않고 내부의 리소스는 자체적으로 모든 인스턴스가 닫히면 해제됨을 의미합니다.</p>
<p>모든 액티비티와 프래그먼트의 UI 스레드에서 Realm 인스턴스를 열고 Activity나 Fragment가 파괴될 때 닫는 것은 쉽고 안전한 접근 법입니다.</p>
</blockquote>
<pre class="hljs java"><span class="hljs-comment">// 애플리케이션에서 Realm 설정하기</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Application</span> </span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">super</span>.onCreate();
        RealmConfiguration realmConfiguration = <span class="hljs-keyword">new</span> RealmConfiguration.Builder(<span class="hljs-keyword">this</span>).build();
        Realm.setDefaultConfiguration(realmConfiguration);
    }
}

<span class="hljs-comment">// 액티비티들을 전환하며 onCreate()/onDestroy()가 중첩되면 Activity 2의 onCreate가</span>
<span class="hljs-comment">// Activity 1의 onDestroy()보다 먼저 호출 됩니다.</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Activity</span> </span>{
    <span class="hljs-keyword">private</span> Realm realm;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>{
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);
        realm = Realm.getDefaultInstance();
    }    

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onDestroy</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">super</span>.onDestroy();
        realm.close();
    }
}

<span class="hljs-comment">// 프래그먼트에서 onStart()/onStop()를 사용합니다.</span>
<span class="hljs-comment">// 프래그먼트의 onDestroy()는 호출되지 않을 수 있습니다.</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Fragment</span> </span>{
    <span class="hljs-keyword">private</span> Realm realm;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStart</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">super</span>.onStart();
        realm = Realm.getDefaultInstance();
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStop</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">super</span>.onStop();
        realm.close();
    }
}</pre>
<p>그렇다. 이제는 앱 생성시 <code>Realm.setDefaultConfiguration()</code>를 이용해서 Configuration을 지정하고 필요한 곳에서 <code>Realm.getDefaultInstance()</code>으로 인스턴스를 받아 사용하는 것을 권장한다. 위에 이야기한 문제도 이 방식을 사용하면 발생하지 않는다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/10/linux-login-error-with-selinux-enforcing/</id><title type="html">selinux enforcing 후 로그인이 되지 않을 때 복구 방법(CentOS 7)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/10/linux-login-error-with-selinux-enforcing/"/><published>2015-12-10T10:58:10+09:00</published><updated>2015-12-10T10:58:10+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[이 글은 특수한 상황에 대한 이야기다. 하지만 여러가지 경우에 대한 설명이 포함되어 있어 향후 비슷한 상황에 대한 대처를 위해 남겨둔다. 일단 상황은 이렇다. CentOS 7을 selinux가 disabled 상태로 운영하던 중 selinux를 enforcing 상태로 변경해서 재시작했다. 그후로 부팅은 되나 모든 계정으로 로그인을 할 수 없었다. 이 상황의 발생 원인을 먼저 설명하자면 selinux가 켜지면서 권한 문제로 shell이 /etc/passwd와 /etc/shadow에 접근할 수 없어 로그인을 할 수 없었던 것이다. 이런 상황이 왜 발생했을까? selinux가 꺼진 상태에서 운영하다가 켜서 재시작하게되면 파일에 대한 selinux rule이 적용하는 과정을 거치게 된다(이로인해 변경 후 최초 시작시 시간이 오래 걸리면 적용이 끝나면 다시 한번 재부팅된다). 이 과정이 정상적으로 완료되었었다면 위 문제가 발생하지 않았겠지만 나의 경우는 내가 설정해 놓은 다른 옵션으로 인해 문제가 발생했다. 나의 경우는 보안상의 이유로 chattr +i /etc/passwd, chattr +i /etc/shadow를 적용한다. 그런데 내가 이걸 잊고 그냥 selinux만 켠 것이다. 그로인해 재시작시 두 파일에 대한 selinux rule이 적용되지 못했던 것이다. 로그인을 할 수 없었기 때문에 파일 상태를 확인할 수 없어 single mode로 부팅해서 확인해야 했다. single mode 부팅에 관련해서는 CENTOS 7 싱글모드 부팅에서 잘 설명하고 있다(CentOS 7부터 Grub2로 변경되었다고 한다. 그래서 처음엔 어떻게 single mode 부팅을 해야할지 몰라서 당황했다). 요약하자면 부팅 메시지가 나왔을 때 e를 눌러 편집 모드로 들어가서 ro가 나오는 부분을 찾아서 rw init=/sysroot/bin/sh로 변경한다(찾기가 어려울 수 있다. ro로 시작하는게 아니라 명령줄 내에 ro라고 된 부분이 있다. 나의 경우는 linux16 /vmlinuz-3.10.0-~~ 으로 시작하는 라인에 있었다). 수정 후에는 crtl+x를 눌러서 부팅한다. 부팅이 되고나면 실제 서버의 /는 /sysroot로 마운트되어 있다. 따라서 chroot /sysroot를 하면 기존 서버처럼 / 경로로 변경할 수 있다. 사실 꼭 필요하진 않다. 경로가 헛갈리지 않도록 작업하기 위해서 한다. single mode로 들어가서 일단 selinux를 끄고(permissive 모드 사용) 다시 부팅했다(여기서 바로 변경해도 되었을 수 있지만 확인을 위해서 일단 다시 부팅했다). 부팅 후 아래와 같이 확인했다. $ ls -Z /etc/passwd -rw-r--r--. root root system_u:object_r:unlabeled_t:s0 /etc/passwd 원래는 /etc/passwd는 passwd_file_t가 되어야 한다. 그런데 unlabeled_t로 되어있어 제대로 로그인 할 수 없었던 것이다. 그래서 restorecon를 사용해서 아래처럼 복구하려고 했다. $ restorecon -v /etc/passwd restorecon reset /etc/passwd context system_u:object_r:unlabeled_t:s0->system_u:object_r:passwd_file_t:s0 restorecon set context /etc/passwd->system_u:object_r:passwd_file_t:s0 failed:'Operation not permitted' 그런데 위와 같은 오류가 났다. 아마도 selinux를 켜고 최초 부팅시에도 동일한 오류로 인해 정상적으로 rule이 적용되지 않았을 것이다. 그래서 아래와 같이 다시 처리했다. $ chattr -i /etc/passwd $ chattr -i /etc/shadow $ restorecon -v /etc/passwd $ restorecon -v /etc/shadow 이제 다시 재부팅하면 기존처럼 로그인이 잘 된다. 아직 selinux를 잘 다루지 못해 발생한 문제이지만 덕분에 여러가지를 알게 되었다. 사실 다행히 이 문제를 vagrant로 띄운 가상 머신에서 겪어서 다양하게 시도해 보면서 좋은 경험을 했다.]]></summary><content type="html"><![CDATA[<p>이 글은 특수한 상황에 대한 이야기다. 하지만 여러가지 경우에 대한 설명이 포함되어 있어 향후 비슷한 상황에 대한 대처를 위해 남겨둔다.</p>
<p>일단 상황은 이렇다. CentOS 7을 selinux가 disabled 상태로 운영하던 중 selinux를 enforcing 상태로 변경해서 재시작했다. 그후로 부팅은 되나 모든 계정으로 로그인을 할 수 없었다.</p>
<p><strong>이 상황의 발생 원인을 먼저 설명하자면 selinux가 켜지면서 권한 문제로 shell이 /etc/passwd와 /etc/shadow에 접근할 수 없어 로그인을 할 수 없었던 것이다.</strong></p>
<p>이런 상황이 왜 발생했을까? selinux가 꺼진 상태에서 운영하다가 켜서 재시작하게되면 파일에 대한 selinux rule이 적용하는 과정을 거치게 된다(이로인해 변경 후 최초 시작시 시간이 오래 걸리면 적용이 끝나면 다시 한번 재부팅된다). 이 과정이 정상적으로 완료되었었다면 위 문제가 발생하지 않았겠지만 나의 경우는 내가 설정해 놓은 다른 옵션으로 인해 문제가 발생했다.</p>
<p>나의 경우는 보안상의 이유로 <code>chattr +i /etc/passwd</code>, <code>chattr +i /etc/shadow</code>를 적용한다. 그런데 내가 이걸 잊고 그냥 selinux만 켠 것이다. 그로인해 재시작시 두 파일에 대한 selinux rule이 적용되지 못했던 것이다.</p>
<p>로그인을 할 수 없었기 때문에 파일 상태를 확인할 수 없어 single mode로 부팅해서 확인해야 했다.
single mode 부팅에 관련해서는 <a href="http://linux.systemv.pe.kr/centos-7-%EC%8B%B1%EA%B8%80%EB%AA%A8%EB%93%9C-%EB%B6%80%ED%8C%85/">CENTOS 7 싱글모드 부팅</a>에서 잘 설명하고 있다(CentOS 7부터 Grub2로 변경되었다고 한다. 그래서 처음엔 어떻게 single mode 부팅을 해야할지 몰라서 당황했다). 요약하자면 부팅 메시지가 나왔을 때 <code>e</code>를 눌러 편집 모드로 들어가서 <code>ro</code>가 나오는 부분을 찾아서 <code>rw init=/sysroot/bin/sh</code>로 변경한다(찾기가 어려울 수 있다. <code>ro</code>로 시작하는게 아니라 명령줄 내에 <code>ro</code>라고 된 부분이 있다. 나의 경우는 linux16 /vmlinuz-3.10.0-~~ 으로 시작하는 라인에 있었다). 수정 후에는 <code>crtl+x</code>를 눌러서 부팅한다. 부팅이 되고나면 실제 서버의 <code>/</code>는 <code>/sysroot</code>로 마운트되어 있다. 따라서 <code>chroot /sysroot</code>를 하면 기존 서버처럼 <code>/</code> 경로로 변경할 수 있다. 사실 꼭 필요하진 않다. 경로가 헛갈리지 않도록 작업하기 위해서 한다.</p>
<p>single mode로 들어가서 일단 selinux를 끄고(permissive 모드 사용) 다시 부팅했다(여기서 바로 변경해도 되었을 수 있지만 확인을 위해서 일단 다시 부팅했다). 부팅 후 아래와 같이 확인했다.</p>
<pre class="hljs bash">$ ls -Z /etc/passwd
-rw-r--r--. root root system_u:object_r:unlabeled_t:s0 /etc/passwd</pre>
<p>원래는 <code>/etc/passwd</code>는 <code>passwd_file_t</code>가 되어야 한다. 그런데 <code>unlabeled_t</code>로 되어있어 제대로 로그인 할 수 없었던 것이다. 그래서 <code>restorecon</code>를 사용해서 아래처럼 복구하려고 했다.</p>
<pre class="hljs bash">$ restorecon -v /etc/passwd
restorecon reset /etc/passwd context system_u:object_r:unlabeled_t:s0-&gt;system_u:object_r:passwd_file_t:s0
restorecon <span class="hljs-built_in">set</span> context /etc/passwd-&gt;system_u:object_r:passwd_file_t:s0 failed:<span class="hljs-string">'Operation not permitted'</span></pre>
<p>그런데 위와 같은 오류가 났다. 아마도 selinux를 켜고 최초 부팅시에도 동일한 오류로 인해 정상적으로 rule이 적용되지 않았을 것이다. 그래서 아래와 같이 다시 처리했다.</p>
<pre class="hljs bash">$ chattr -i /etc/passwd
$ chattr -i /etc/shadow
$ restorecon -v /etc/passwd
$ restorecon -v /etc/shadow</pre>
<p>이제 다시 재부팅하면 기존처럼 로그인이 잘 된다. 아직 selinux를 잘 다루지 못해 발생한 문제이지만 덕분에 여러가지를 알게 되었다. 사실 다행히 이 문제를 vagrant로 띄운 가상 머신에서 겪어서 다양하게 시도해 보면서 좋은 경험을 했다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/09/centos-7-create-sftp-only-user/</id><title type="html">sftp-only 사용자 추가 (CentOS 7)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/09/centos-7-create-sftp-only-user/"/><published>2015-12-09T11:17:23+09:00</published><updated>2015-12-09T11:17:23+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[linux 서버를 운영하면서 sftp가 필요한 경우가 있다. 일반 계정이라면 sftp로 그냥 접속하면 되지만 특정 사용자에게 shell 접속은 차단하고 파일 업/다운로드만 제공해야 하는 상황이 있을 수 있다. 파일 전송을 주로 해야하는 서버가 아니라면 이런 경우를 위해 ftp 데몬을 구동하는 것도 부담스럽다. 이런 경우라면 sftp 전용 사용자를 추가하는 방법을 사용할 수 있다. 우선 아래의 과정을 보자. 미리 이야기 하지만 아래의 설정 과정은 앞으로 설명하는 요구 사항에 맞추어 작성된 것이다. 따라서 그룹 설정, home directory 설정 등 여러가지 설정들은 자신에게 맞게 변경해도 된다. 단, 설정을 잘못하면 실제로 접속시에 오류가 날 수 있으니 내용을 이해하고 사용하기를 당부한다. $ /sbin/groupadd sftp $ /usr/sbin/useradd -g sftp [username] -d [user home directory] -s /bin/false $ echo "[password]" | passwd --stdin [username] $ chown -R [username].sftp [user home directory] $ chown root [user home directory] $ chmod 755 [user home directory] $ sed -i "s/Subsystem[[:space:]]*sftp/#Subsystem sftp/g" /etc/ssh/sshd_config $ echo "" >> /etc/ssh/sshd_config $ echo "Subsystem sftp internal-sftp" >> /etc/ssh/sshd_config $ echo "" >> /etc/ssh/sshd_config $ echo "Match Group sftp" >> /etc/ssh/sshd_config $ echo " ChrootDirectory %h" >> /etc/ssh/sshd_config $ echo " AllowTcpForwarding no" >> /etc/ssh/sshd_config $ echo " X11Forwarding no" >> /etc/ssh/sshd_config $ echo " ForceCommand internal-sftp" >> /etc/ssh/sshd_config $ setsebool -P ssh_chroot_rw_homedirs on $ systemctl restart sshd.service 이제 하나씩 살펴보자 /sbin/groupadd sftp : sftp라는 사용자 그룹을 추가한다. 필요없다면 하지 않아도 되고 다른 이름을 사용해도 된다. 나의 경우는 sftp 전용 사용자들을 묶어서 관리하기 위해 sftp라는 그룹을 추가한 것이다. /usr/sbin/useradd -g sftp [username] -d [user home directory] -s /bin/false -g sftp : sftp 그룹에 사용자를 추가한다. [username] : 원하는 사용자명을 입력한다. -d [user home directory] : 사용자의 home directory를 지정한다. 이 옵션은 지정하지 않아도 상관없다. 미지정시 일반 계정을 생성할 때와 동일하게 지정된다(일반적으로 /home/[username]). 그리고 이미 directory가 생성되어 있다면 -d [user home directory]를 지정하지 않고 -M을 사용하여 home directory 생성을 건너뛸 수 있다. -s /bin/false : 이 사용자는 shell로 접속할 수 없음을 지정한다. $ echo "[password]" | passwd --stdin [username] : 추가한 사용자 계정의 비밀번호를 입력한다. 일반적으로 비밀번호를 추가하는 방식으로 그냥 passwd를 사용해도 되나 나의 경우는 자동으로 처리하는 스크립트를 만들려고 하다보니 이런 방식을 사용한 것이다. chown -R [username].sftp [user home directory] : 사용자가 접속하게 될 폴더의 하위 파일의 소유자를 변경한다. 이 명령도 사용자 추가시 기존에 있던 폴더를 home directory로 지정한 것이 아니라면 실행하지 않아도 된다. chown root [user home directory] : 나중에 ChrootDirectory를 적용하려면 home directory의 소유자가 root가 되어야 한다. 이유는 chroot()에서 root가 소유한 directory를 요구하기 때문이다. 관련 내용은 OpenSSH SFTP chroot() with ChrootDirectory에 나와 있다. chmod 755 [user home directory] : ChrootDirectory 적용시 소유자를 root로 변경하는 것과 함께 권한도 755로 변경해야 한다. 이렇게되면 사용자의 home directory에서는 쓰기 권한을 제거한 것이므로 하위에 폴더를 더 만들어서 소유자를 [username]로 변경하거나 쓰기 권한을 줘야한다(사용자는 해당 폴더들에서 쓰기를 할 수 있다). 이 부분이 상당히 불편할 수 있는 부분인데 chroot 적용이 되려면 보안상 쓰기 권한을 줄 수 없기 때문에 어쩔 수 없다. 사실 나도 이 부분을 제대로 몰라 한참을 고생한 적이있다. sed -i "s/Subsystem[[:space:]]*sftp/#Subsystem sftp/g" /etc/ssh/sshd_config : /etc/ssh/sshd_config 파일에서 Subsystem sftp 설정 부분을 주석 처리한다. 직접 파일을 열어서 해당 내용을 주석 처리해도 된다. echo section : 이 부분은 /etc/ssh/sshd_config에 필요한 부분을 추가하는 과정이다. 꼭 이렇게 해야하는 것은 아니고 직접 파일을 열어서 수정해도 된다. 그리고 나는 그룹 단위로 제어하기 위해서 Match Group sftp를 사용했지만 사용자 단위로 지정하려면 Match User [username]의 형식을 사용해도 된다. ChrootDirectory %h : 이 설정은 chroot를 사용자 home directory로 지정하는 것이다. %h 대신 특정 경로를 직접 지정해도 된다. setsebool -P ssh_chroot_rw_homedirs on : 이 부분은 selinux를 사용할 경우에만 해당된다. chroot가 적용된 home directory에 읽기/쓰기를 할 수 있도록 권한을 열어준다. 그런데 테스트 해보니 이 명령은 하지 않아도 파일 업로드는 이상이 없다. 대부분의 경우에 이 옵션을 주도록 설명하고 있어 추가는 해 두었지만 sftp 전용으로 계정을 사용할 경우는 사용하지 않아도 되는 것으로 보인다. 따라서 지정하지 않은 상태에서 업로드를 테스트 해보고 이상이 없다면 처리하지 않아도 되지 않을까 생각한다. systemctl restart sshd.service : 설정이 완료되었으므로 sshd를 재시작 해주면 바로 사용할 수 있다. [username] 계정으로 접속(sftp [username]@127.0.0.1)해서 테스트 해보고 이상이 없다면 완료된 것이다.]]></summary><content type="html"><![CDATA[<p>linux 서버를 운영하면서 sftp가 필요한 경우가 있다. 일반 계정이라면 sftp로 그냥 접속하면 되지만 특정 사용자에게 shell 접속은 차단하고 파일 업/다운로드만 제공해야 하는 상황이 있을 수 있다. 파일 전송을 주로 해야하는 서버가 아니라면 이런 경우를 위해 ftp 데몬을 구동하는 것도 부담스럽다. 이런 경우라면 sftp 전용 사용자를 추가하는 방법을 사용할 수 있다.</p>
<p>우선 아래의 과정을 보자. 미리 이야기 하지만 아래의 설정 과정은 앞으로 설명하는 요구 사항에 맞추어 작성된 것이다. 따라서 그룹 설정, home directory 설정 등 여러가지 설정들은 자신에게 맞게 변경해도 된다. 단, 설정을 잘못하면 실제로 접속시에 오류가 날 수 있으니 내용을 이해하고 사용하기를 당부한다.</p>
<pre class="hljs bash">$ /sbin/groupadd sftp
$ /usr/sbin/useradd -g sftp [username] -d [user home directory] -s /bin/<span class="hljs-literal">false</span>
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"[password]"</span> | passwd --stdin [username]

$ chown -R [username].sftp [user home directory]
$ chown root [user home directory]
$ chmod 755 [user home directory]

$ sed -i <span class="hljs-string">"s/Subsystem[[:space:]]*sftp/#Subsystem   sftp/g"</span> /etc/ssh/sshd_config

$ <span class="hljs-built_in">echo</span> <span class="hljs-string">""</span> &gt;&gt; /etc/ssh/sshd_config
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Subsystem   sftp    internal-sftp"</span> &gt;&gt; /etc/ssh/sshd_config
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">""</span> &gt;&gt; /etc/ssh/sshd_config
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"Match Group sftp"</span> &gt;&gt; /etc/ssh/sshd_config
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"    ChrootDirectory %h"</span> &gt;&gt; /etc/ssh/sshd_config
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"    AllowTcpForwarding no"</span> &gt;&gt; /etc/ssh/sshd_config
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"    X11Forwarding no"</span> &gt;&gt; /etc/ssh/sshd_config
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"    ForceCommand internal-sftp"</span> &gt;&gt; /etc/ssh/sshd_config

$ setsebool -P ssh_chroot_rw_homedirs on

$ systemctl restart sshd.service</pre>
<p>이제 하나씩 살펴보자</p>
<ul>
<li>
<p><code>/sbin/groupadd sftp</code> : sftp라는 사용자 그룹을 추가한다. 필요없다면 하지 않아도 되고 다른 이름을 사용해도 된다. 나의 경우는 sftp 전용 사용자들을 묶어서 관리하기 위해 sftp라는 그룹을 추가한 것이다.</p>
</li>
<li>
<p><code>/usr/sbin/useradd -g sftp [username] -d [user home directory] -s /bin/false</code></p>
<ul>
<li><code>-g sftp</code> : sftp 그룹에 사용자를 추가한다.</li>
<li><code>[username]</code> : 원하는 사용자명을 입력한다.</li>
<li><code>-d [user home directory]</code> : 사용자의 home directory를 지정한다. 이 옵션은 지정하지 않아도 상관없다. 미지정시 일반 계정을 생성할 때와 동일하게 지정된다(일반적으로 /home/[username]).     그리고 이미 directory가 생성되어 있다면 <code>-d [user home directory]</code>를 지정하지 않고 <code>-M</code>을 사용하여 home directory 생성을 건너뛸 수 있다.</li>
<li><code>-s /bin/false</code> : 이 사용자는 shell로 접속할 수 없음을 지정한다.</li>
</ul>
</li>
<li>
<p><code>$ echo "[password]" | passwd --stdin [username]</code> : 추가한 사용자 계정의 비밀번호를 입력한다. 일반적으로 비밀번호를 추가하는 방식으로 그냥 <code>passwd</code>를 사용해도 되나 나의 경우는 자동으로 처리하는 스크립트를 만들려고 하다보니 이런 방식을 사용한 것이다.</p>
</li>
<li>
<p><code>chown -R [username].sftp [user home directory]</code> : 사용자가 접속하게 될 폴더의 하위 파일의 소유자를 변경한다. 이 명령도 사용자 추가시 기존에 있던 폴더를 home directory로 지정한 것이 아니라면 실행하지 않아도 된다.</p>
</li>
<li>
<p><code>chown root [user home directory]</code> : 나중에 <code>ChrootDirectory</code>를 적용하려면 home directory의 소유자가 root가 되어야 한다. 이유는 chroot()에서 root가 소유한 directory를 요구하기 때문이다. 관련 내용은 <a href="https://www.debian-administration.org/article/590/OpenSSH_SFTP_chroot_with_ChrootDirectory">OpenSSH SFTP chroot() with ChrootDirectory</a>에 나와 있다.</p>
</li>
<li>
<p><code>chmod 755 [user home directory]</code> : <code>ChrootDirectory</code> 적용시 소유자를 root로 변경하는 것과 함께 권한도 755로 변경해야 한다. 이렇게되면 사용자의 home directory에서는 쓰기 권한을 제거한 것이므로 하위에 폴더를 더 만들어서 소유자를 <code>[username]</code>로 변경하거나 쓰기 권한을 줘야한다(사용자는 해당 폴더들에서 쓰기를 할 수 있다). 이 부분이 상당히 불편할 수 있는 부분인데 chroot 적용이 되려면 보안상 쓰기 권한을 줄 수 없기 때문에 어쩔 수 없다. 사실 나도 이 부분을 제대로 몰라 한참을 고생한 적이있다.</p>
</li>
<li>
<p><code>sed -i "s/Subsystem[[:space:]]*sftp/#Subsystem   sftp/g" /etc/ssh/sshd_config</code> : <code>/etc/ssh/sshd_config</code> 파일에서 <code>Subsystem   sftp</code> 설정 부분을 주석 처리한다. 직접 파일을 열어서 해당 내용을 주석 처리해도 된다.</p>
</li>
<li>
<p>echo section : 이 부분은 <code>/etc/ssh/sshd_config</code>에 필요한 부분을 추가하는 과정이다. 꼭 이렇게 해야하는 것은 아니고 직접 파일을 열어서 수정해도 된다. 그리고 나는 그룹 단위로 제어하기 위해서 <code>Match Group sftp</code>를 사용했지만 사용자 단위로 지정하려면 <code>Match User [username]</code>의 형식을 사용해도 된다.</p>
<ul>
<li><code>ChrootDirectory %h</code> : 이 설정은 chroot를 사용자 home directory로 지정하는 것이다. <code>%h</code> 대신 특정 경로를 직접 지정해도 된다.</li>
</ul>
</li>
<li>
<p><code>setsebool -P ssh_chroot_rw_homedirs on</code> : 이 부분은 selinux를 사용할 경우에만 해당된다. chroot가 적용된 home directory에 읽기/쓰기를 할 수 있도록 권한을 열어준다. 그런데 테스트 해보니 이 명령은 하지 않아도 파일 업로드는 이상이 없다. 대부분의 경우에 이 옵션을 주도록 설명하고 있어 추가는 해 두었지만 sftp 전용으로 계정을 사용할 경우는 사용하지 않아도 되는 것으로 보인다. 따라서 지정하지 않은 상태에서 업로드를 테스트 해보고 이상이 없다면 처리하지 않아도 되지 않을까 생각한다.</p>
</li>
<li>
<p><code>systemctl restart sshd.service</code> : 설정이 완료되었으므로 sshd를 재시작 해주면 바로 사용할 수 있다. <code>[username]</code> 계정으로 접속(<code>sftp [username]@127.0.0.1</code>)해서 테스트 해보고 이상이 없다면 완료된 것이다.</p>
</li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/09/vagrant-box-repackage/</id><title type="html">Vagrant box repackage(unpacked box에서 box 파일 만들기)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/09/vagrant-box-repackage/"/><published>2015-12-09T08:17:05+09:00</published><updated>2015-12-09T08:17:05+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[vagrant box를 생성하는 것에 대해서는 Vagrant BASE Box 만들기(CentOS 7)에서 설명했었다. 이번에도 box를 생성하는 것에 대한 것이지만 대상이 다르다. 기존 글에서는 생성한 가상 머신을 대상으로 box 파일을 만들었지만 아래에서 설명하고자 하는 것은 vagrant box add 명령을 사용하거나 vagrant up 명령을 통해 box 파일을 unpacked(~/.vagrant.d/boxes에 보관)한 것을 다시 배포용(distributable) box 파일로 만드는 것이다. 이 방법이 필요한 경우를 예를 들자면 box를 생성하고 unpacked 했지만 box 파일을 배포 경로(원격/로컬)로 이동하지 않고 지워버린 경우에 사용할 수 있다. vagrant는 이런 경우를 위해 repackage 명령을 제공한다. VAGRANT DOCS : BOX REPACKAGE에는 아래와 같이 설명되어 있다. Command: vagrant box repackage NAME PROVIDER VERSION This command repackages the given box and puts it in the current directory so you can redistribute it. The name, provider, and version of the box can be retrieved using vagrant box list. When you add a box, Vagrant unpacks it and stores it internally. The original .box file is not preserved. This command is useful for reclaiming a .box file from an installed Vagrant box. repackage 명령은 NAME, PROVIDER, VERSION 인자 모두를 지정해야 한다. 각 인자에 어떤 정보를 넣는지 알아보자. NAME : vagrant box list 명령으로 확인할 수 있는 box명을 지정한다. PROVIDER : 가상 머신을 구동하는 PROVIDER를 지정한다. VERSION : box의 버전을 지정한다. 우선 실제로 사용하는 예시를 보자. $ vagrant box repackage centos7-dev-1 virtualbox 0 이 명령을 실행하면 box 파일이 실행한 경로에 생성된다. 예시를 보면 어떻게 사용해야 하는지 이해가 될 것이다. NAME은 별다를 것이 없고 PROVIDER의 경우는 일반적으로 virtualbox를 지정한다(box 생성시 virtualbox를 대부분 사용하므로). VERSION의 경우는 별도의 version을 사용하지 않았다면 그냥 0을 입력하면 된다.]]></summary><content type="html"><![CDATA[<p>vagrant box를 생성하는 것에 대해서는 <a href="https://blog.asamaru.net/2015/10/14/creating-a-vagrant-base-box/">Vagrant BASE Box 만들기(CentOS 7)</a>에서 설명했었다. 이번에도 box를 생성하는 것에 대한 것이지만 대상이 다르다. 기존 글에서는 생성한 가상 머신을 대상으로 box 파일을 만들었지만 아래에서 설명하고자 하는 것은 <code>vagrant box add</code> 명령을 사용하거나 <code>vagrant up</code> 명령을 통해 box 파일을 unpacked(~/.vagrant.d/boxes에 보관)한 것을 다시 배포용(distributable) box 파일로 만드는 것이다.</p>
<p>이 방법이 필요한 경우를 예를 들자면 box를 생성하고 unpacked 했지만 box 파일을 배포 경로(원격/로컬)로 이동하지 않고 지워버린 경우에 사용할 수 있다.</p>
<p>vagrant는 이런 경우를 위해 <code>repackage</code> 명령을 제공한다. <a href="https://docs.vagrantup.com/v2/cli/box.html">VAGRANT DOCS : BOX REPACKAGE</a>에는 아래와 같이 설명되어 있다.</p>
<blockquote>
<p>Command: vagrant box repackage NAME PROVIDER VERSION</p>
<p>This command repackages the given box and puts it in the current directory so you can redistribute it. The name, provider, and version of the box can be retrieved using vagrant box list.</p>
<p>When you add a box, Vagrant unpacks it and stores it internally. The original <em>.box file is not preserved. This command is useful for reclaiming a </em>.box file from an installed Vagrant box.</p>
</blockquote>
<p><code>repackage</code> 명령은 NAME, PROVIDER, VERSION 인자 모두를 지정해야 한다. 각 인자에 어떤 정보를 넣는지 알아보자.</p>
<ul>
<li>NAME : <code>vagrant box list</code> 명령으로 확인할 수 있는 box명을 지정한다.</li>
<li>PROVIDER : 가상 머신을 구동하는 PROVIDER를 지정한다.</li>
<li>VERSION : box의 버전을 지정한다.</li>
</ul>
<p>우선 실제로 사용하는 예시를 보자.</p>
<pre class="hljs bash">$ vagrant box repackage centos7-dev-1 virtualbox 0</pre>
<p>이 명령을 실행하면 box 파일이 실행한 경로에 생성된다.</p>
<p>예시를 보면 어떻게 사용해야 하는지 이해가 될 것이다. NAME은 별다를 것이 없고 PROVIDER의 경우는 일반적으로 <code>virtualbox</code>를 지정한다(box 생성시 virtualbox를 대부분 사용하므로). VERSION의 경우는 별도의 version을 사용하지 않았다면 그냥 0을 입력하면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/04/mysql-secure-installation-automation/</id><title type="html">mysql_secure_installation 자동화</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/04/mysql-secure-installation-automation/"/><published>2015-12-04T12:35:49+09:00</published><updated>2015-12-04T12:35:49+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[이전 글 MariaDB 최신 버전 설치(yum) - CentOS 7에서 MariaDB를 설치하면서 mysql_secure_installation 명령을 자동화하는 부분을 언급했었다. 이 글에서는 이를 설명하려고 한다. 우선 바로 만들어둔 bash shell script를 보자. mysql_secure_installation_automation.sh #!/bin/bash # https://gist.github.com/Mins/4602864 yum -y install expect # Not required in actual script MYSQL_ROOT_PASSWORD= SECURE_MYSQL=$(expect -c " set timeout 3 spawn mysql_secure_installation expect \"Enter current password for root (enter for none):\" send \"$MYSQL\r\" expect \"Change the root password?\" send \"n\r\" expect \"Remove anonymous users?\" send \"y\r\" expect \"Disallow root login remotely?\" send \"y\r\" expect \"Remove test database and access to it?\" send \"y\r\" expect \"Reload privilege tables now?\" send \"y\r\" expect eof ") echo "$SECURE_MYSQL" 이 스크립트는 mysql_secure_installation automation 스크립트를 참고하여 CentOS에 맞게 조금 수정한 것이다. 위 스크립트를 mysql_secure_installation_automation.sh 파일로 저장했다면 아래와 같이 실행하면 된다. $ chmod 700 mysql_secure_installation_automation.sh $ ./mysql_secure_installation_automation.sh 특별히 설명할 것도 없지만 간략하게나마 원리를 설명하자면 expect라는 도구를 사용해서 사용자 입력을 대신하도록 하는 것이다(이후에 알게되었지만 sshpass라는 것이 있어서 expect를 사용하지 않아도 된다. 아니면 ssh 비밀번호 없이 로그인하기에서 쓴 것처럼 다른 방법도 있다). 이를 응용하면 mysql_secure_installation 외에도 여러가지 상황에 적용할 수 있다. 나의 경우는 expect를 이용해서 ssh 비밀번호 자동 입력 기능을 만들어 사용하고 있었다. 사실 ssh의 경우는 key를 등록하는 방식으로 비밀번호 없이 로그인이 가능하고 비밀번호를 외부로 노출하는 것이 보안상 문제가 있지만 간단하게 접속이 필요하고 보안상의 이슈가 없는 곳에서 유용하게 사용하고 있다.]]></summary><content type="html"><![CDATA[<p>이전 글 <a href="2015/12/04/installing-mariadb-on-centos-7/">MariaDB 최신 버전 설치(yum) - CentOS 7</a>에서 MariaDB를 설치하면서 <code>mysql_secure_installation</code> 명령을 자동화하는 부분을 언급했었다. 이 글에서는 이를 설명하려고 한다. 우선 바로 만들어둔 bash shell script를 보자.</p>
<p><strong>mysql_secure_installation_automation.sh</strong></p>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash
</span>
<span class="hljs-comment"># https://gist.github.com/Mins/4602864</span>

yum -y install expect

<span class="hljs-comment"># Not required in actual script</span>
MYSQL_ROOT_PASSWORD=

SECURE_MYSQL=$(expect -c <span class="hljs-string">"
set timeout 3
spawn mysql_secure_installation
expect \"Enter current password for root (enter for none):\"
send \"<span class="hljs-variable">$MYSQL</span>\r\"
expect \"Change the root password?\"
send \"n\r\"
expect \"Remove anonymous users?\"
send \"y\r\"
expect \"Disallow root login remotely?\"
send \"y\r\"
expect \"Remove test database and access to it?\"
send \"y\r\"
expect \"Reload privilege tables now?\"
send \"y\r\"
expect eof
"</span>)

<span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$SECURE_MYSQL</span>"</span></pre>
<p>이 스크립트는 <a href="https://gist.github.com/Mins/4602864">mysql_secure_installation automation</a> 스크립트를 참고하여 CentOS에 맞게 조금 수정한 것이다.</p>
<p>위 스크립트를 mysql_secure_installation_automation.sh 파일로 저장했다면 아래와 같이 실행하면 된다.</p>
<pre class="hljs bash">$ chmod 700 mysql_secure_installation_automation.sh
$ ./mysql_secure_installation_automation.sh</pre>
<p>특별히 설명할 것도 없지만 간략하게나마 원리를 설명하자면 <code>expect</code>라는 도구를 사용해서 사용자 입력을 대신하도록 하는 것이다(이후에 알게되었지만 <a href="http://sourceforge.net/projects/sshpass/">sshpass</a>라는 것이 있어서 expect를 사용하지 않아도 된다. 아니면 <a href="https://blog.asamaru.net/2016/01/26/ssh-login-without-password/">ssh 비밀번호 없이 로그인하기</a>에서 쓴 것처럼 다른 방법도 있다). 이를 응용하면 <code>mysql_secure_installation</code> 외에도 여러가지 상황에 적용할 수 있다. 나의 경우는 <code>expect</code>를 이용해서 ssh 비밀번호 자동 입력 기능을 만들어 사용하고 있었다. 사실 ssh의 경우는 key를 등록하는 방식으로 비밀번호 없이 로그인이 가능하고 비밀번호를 외부로 노출하는 것이 보안상 문제가 있지만 간단하게 접속이 필요하고 보안상의 이슈가 없는 곳에서 유용하게 사용하고 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/04/installing-mariadb-on-centos-7/</id><title type="html">MariaDB 최신 버전 설치(yum) - CentOS 7</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/04/installing-mariadb-on-centos-7/"/><published>2015-12-04T08:37:25+09:00</published><updated>2015-12-04T08:37:25+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[CentOS 7에서의 MariaDB의 기본적인 설치는 아주 간단하다. yum epel 저장소가 추가된 상태에서 아래와 같이 설치가 가능하다(epel이 없어도 동일할 것으로 생각되나 이 글에서의 주요 내용이 아니기 때문에 테스트 해보지는 않았다). $ yum install -y mariadb mariadb-server $ systemctl enable mariadb.service $ systemctl start mariadb.service $ mysql_secure_installation 기본 설치는 끝이다. 이제부터 mariadb을 설정하는 부분이 남았지만 이 부분은 서버 상황에 따라 모두 다르니 여기서는 다루지 않는다. 그리고 한가지 더. mysql_secure_installation를 실행하면 자신의 상황에 맞게 설정하기 위해 몇가지를 물어본다. 그런데 이게 거의 일정하고 설치 자동화를 할 때 입력창이 나오면 처리가 귀찮아진다. 이 부분을 자동화하는 부분에 대해서는 mysql_secure_installation 자동화에서 따로 글을 남긴다. 이제부터가 본격적인 이 글에서 하고자하는 이야기다. 위의 방법으로 설치하면 현재 기준으로 5.5.44 버전이 설치된다. 하지만 최신 버전은 10.1.9다. 그렇다면 최신 버전을 설치하려면 어떻게 해야하는가? 아래의 과정을 보자. 우선 yum에 mariadb 저장소를 추가한다. http://yum.mariadb.org/10.1/centos7-amd64는 현재 최신 버전과 CentOS7을 기준으로한 주소다. http://yum.mariadb.org 를 열어보면 다른 기준에서 사용할 수 있는 레포지토리들도 확인할 수 있다. $ echo "[mariadb]" > /etc/yum.repos.d/MariaDB.repo $ echo "name = MariaDB" >> /etc/yum.repos.d/MariaDB.repo $ echo "baseurl = http://yum.mariadb.org/10.1/rhel7-amd64" >> /etc/yum.repos.d/MariaDB.repo $ echo "gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB" >> /etc/yum.repos.d/MariaDB.repo $ echo "gpgcheck=1" >> /etc/yum.repos.d/MariaDB.repo 더 간단한 방법도 있다. $ wget -O /etc/yum.repos.d/MariaDB.repo http://mariadb.if-not-true-then-false.com/rhel/$(rpm -E %rhel)/$(uname -i)/10_1 이후는 기존과 동일하다. $ yum install -y mariadb mariadb-server $ systemctl enable mariadb.service $ systemctl start mariadb.service $ mysql_secure_installation 단, 10.1.8 버전 이상일 경우만 위와 같이 처리가 가능한 것으로 보인다(MariaDB Systemd). 따라서 10.0 버전대를 설치한다면 아래와 같이 하면 된다. $ yum install -y mariadb mariadb-server $ systemctl enable mysql.service $ systemctl start mysql.service $ mysql_secure_installation 하지만 약간의 차이가 있다. systemctl에서 사용하는 service 명이 다르다. 왜 다른지는 모르겠지만 설치를 했는데 서비스 등록이 되지 않아서 처음엔 당황스러웠다. 이 부분도 처음과 동일하게 사용하고 싶다면 alias를 사용하는 방법이 있다(service name alias? mariadb->mysql - how?). echo "Alias=mysql.service" > /usr/lib/systemd/system/mariadb.service 이렇게 해주면 mariadb라는 이름으로 service를 등록할 수 있다. 큰 의미가 없으니 굳이 적용할 필요는 없으나 혼선을 없애기 위해서라면 적용하는 것도 나쁘지는 않을 듯하다. 자.. 그런데 위 설치 방법대로 따라하면 아래와 같은 화면을 만나게 된다. $ systemctl enable mysql.service mysql.service is not a native service, redirecting to /sbin/chkconfig. Executing /sbin/chkconfig mysql on The unit files have no [Install] section. They are not meant to be enabled using systemctl. Possible reasons for having this kind of units are: 1) A unit may be statically enabled by being symlinked from another unit's .wants/ or .requires/ directory. 2) A unit's purpose may be to act as a helper for some other unit which has a requirement dependency on it. 3) A unit may be started when needed via activation (socket, path, timer, D-Bus, udev, scripted systemctl call, ...). 내용을 보면 mariadb가 systemd에 등록되지 않고 chkconfig로 initd에 등록된다. 앞서 설명했던 5.5/10.1 버전 설치와는 다른 결과다. CentOS의 레포지토리를 이용해서 설치하면 /usr/lib/systemd/system/mariadb.service 파일이 함께 설치되는데 MariaDB 레포지토리로 설치하면 이 파일이 설치되지 않는다(확인해보니 다른 몇가지도 차이가 있다). 이 부분은 MariaDB 10.0이 systemd 지원을 아직 제대로 하지 않아서 그런 것 같다(테스트는 해보지 않았지만 찾아보니 Fedora 22 이상부터는 바로 지원이 되는 것으로 보인다). 그냥 이렇게 사용해도 문제는 되지 않지만 기존과 동일하게 systemd로 사용하고 싶다면 10.1 버전을 사용하면 된다. 10.0을 굳이 써야 한다면 다음과 같이 처리할 수는 있으나 권장하지는 않는다. 이왕이면 최신 버전을 사용하자. 이미 위 명령을 입력했었다면 아래와 같이 제거하자. 아직 설치하지 않았다면 이 과정은 생략한다. $ systemctl disable mysql.service mysql.service is not a native service, redirecting to /sbin/chkconfig. Executing /sbin/chkconfig mysql off 아직 설치를 하지 않았다면 10.1과 유사하게 아래의 과정을 처리한다. $ echo "[mariadb]" > /etc/yum.repos.d/MariaDB.repo $ echo "name = MariaDB" >> /etc/yum.repos.d/MariaDB.repo $ echo "baseurl = http://yum.mariadb.org/10.0/rhel7-amd64" >> /etc/yum.repos.d/MariaDB.repo $ echo "gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB" >> /etc/yum.repos.d/MariaDB.repo $ echo "gpgcheck=1" >> /etc/yum.repos.d/MariaDB.repo 10.1과 유사하게 아래의 방법도 가능하다. $ wget -O /etc/yum.repos.d/MariaDB.repo http://mariadb.if-not-true-then-false.com/rhel/$(rpm -E %rhel)/$(uname -i)/10 이제 mariadb 10.0을 설치한다. $ yum install -y mariadb mariadb-server 아래의 내용으로 /usr/lib/systemd/system/mariadb.service 파일을 만든다. 이 스크립트는 5.5 설치시에 생성되었던 /usr/lib/systemd/system/mariadb.service 파일을 가져다가 조금 수정했다. 그대로 사용하려니 정상적으로 동작하지 않았다. /usr/libexec/mariadb-prepare-db-dir 파일을 필요로해서 동일하게 넣어주었으나 구동은 되나 실행 스크립트가 종료되지 않고 systemctl stop으로 종료 할 수도 없었다. # It's not recommended to modify this file in-place, because it will be # overwritten during package upgrades. If you want to customize, the # best way is to create a file "/etc/systemd/system/mariadb.service", # containing # .include /lib/systemd/system/mariadb.service # ...make your changes here... # or create a file "/etc/systemd/system/mariadb.service.d/foo.conf", # which doesn't need to include ".include" call and which will be parsed # after the file mariadb.service itself is parsed. # # For more info about custom unit files, see systemd.unit(5) or # http://fedoraproject.org/wiki/Systemd#How_do_I_customize_a_unit_file.2F_add_a_custom_unit_file.3F # For example, if you want to increase mariadb's open-files-limit to 10000, # you need to increase systemd's LimitNOFILE setting, so create a file named # "/etc/systemd/system/mariadb.service.d/limits.conf" containing: # [Service] # LimitNOFILE=10000 # Note: /usr/lib/... is recommended in the .include line though /lib/... # still works. # Don't forget to reload systemd daemon after you change unit configuration: # root> systemctl --system daemon-reload [Unit] Description=MariaDB database server After=syslog.target After=network.target [Service] #Type=simple Type = forking User=mysql Group=mysql ExecStart = /etc/rc.d/init.d/mysql start ExecStop = /etc/rc.d/init.d/mysql stop #ExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n # Note: we set --basedir to prevent probes that might trigger SELinux alarms, # per bug #547485 #ExecStart=/usr/bin/mysqld_safe --basedir=/usr #ExecStartPost=/usr/libexec/mariadb-wait-ready $MAINPID # Give a reasonable amount of time for the server to start up/shut down TimeoutSec=300 # Place temp files in a secure directory, not /tmp PrivateTmp=true [Install] WantedBy=multi-user.target 이후의 과정은 동일하다. 단, 10.0 설치에서 설명했던 mysql.service 대신 10.1 처럼 mariadb.service을 사용한다. 해당 파일을 만들어 줬으므로. $ systemctl daemon-reload $ systemctl enable mariadb.service $ systemctl start mariadb.service $ mysql_secure_installation 이제 설치가 끝났다.]]></summary><content type="html"><![CDATA[<p>CentOS 7에서의 <a href="https://mariadb.org/">MariaDB</a>의 기본적인 설치는 아주 간단하다. yum epel 저장소가 추가된 상태에서 아래와 같이 설치가 가능하다(epel이 없어도 동일할 것으로 생각되나 이 글에서의 주요 내용이 아니기 때문에 테스트 해보지는 않았다).</p>
<pre class="hljs bash">$ yum install -y mariadb mariadb-server
$ systemctl <span class="hljs-built_in">enable</span> mariadb.service
$ systemctl start mariadb.service
$ mysql_secure_installation</pre>
<p>기본 설치는 끝이다. 이제부터 mariadb을 설정하는 부분이 남았지만 이 부분은 서버 상황에 따라 모두 다르니 여기서는 다루지 않는다. 그리고 한가지 더. <code>mysql_secure_installation</code>를 실행하면 자신의 상황에 맞게 설정하기 위해 몇가지를 물어본다. 그런데 이게 거의 일정하고 설치 자동화를 할 때 입력창이 나오면 처리가 귀찮아진다. 이 부분을 자동화하는 부분에 대해서는 <a href="https://blog.asamaru.net/2015/12/04/mysql-secure-installation-automation/">mysql_secure_installation 자동화</a>에서 따로 글을 남긴다.</p>
<p>이제부터가 본격적인 이 글에서 하고자하는 이야기다.</p>
<p>위의 방법으로 설치하면 현재 기준으로 5.5.44 버전이 설치된다. 하지만 최신 버전은 10.1.9다. 그렇다면 최신 버전을 설치하려면 어떻게 해야하는가? 아래의 과정을 보자.</p>
<p>우선 yum에 mariadb 저장소를 추가한다. <code>http://yum.mariadb.org/10.1/centos7-amd64</code>는 현재 최신 버전과 CentOS7을 기준으로한 주소다. <a href="http://yum.mariadb.org">http://yum.mariadb.org</a> 를 열어보면 다른 기준에서 사용할 수 있는 레포지토리들도 확인할 수 있다.</p>
<pre class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"[mariadb]"</span> &gt; /etc/yum.repos.d/MariaDB.repo
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"name = MariaDB"</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"baseurl = http://yum.mariadb.org/10.1/rhel7-amd64"</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB"</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"gpgcheck=1"</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo</pre>
<p>더 간단한 방법도 있다.</p>
<pre class="hljs bash">$ wget -O /etc/yum.repos.d/MariaDB.repo http://mariadb.if-not-true-then-false.com/rhel/$(rpm -E %rhel)/$(uname -i)/10_1</pre>
<p>이후는 기존과 동일하다.</p>
<pre class="hljs bash">$ yum install -y mariadb mariadb-server
$ systemctl <span class="hljs-built_in">enable</span> mariadb.service
$ systemctl start mariadb.service
$ mysql_secure_installation</pre>
<p>단, 10.1.8 버전 이상일 경우만 위와 같이 처리가 가능한 것으로 보인다(<a href="https://mariadb.com/kb/en/mariadb/systemd/">MariaDB Systemd</a>).</p>
<p>따라서 10.0 버전대를 설치한다면  아래와 같이 하면 된다.</p>
<pre class="hljs bash">$ yum install -y mariadb mariadb-server
$ systemctl <span class="hljs-built_in">enable</span> mysql.service
$ systemctl start mysql.service
$ mysql_secure_installation</pre>
<p>하지만 약간의 차이가 있다. systemctl에서 사용하는 service 명이 다르다. 왜 다른지는 모르겠지만 설치를 했는데 서비스 등록이 되지 않아서 처음엔 당황스러웠다. 이 부분도 처음과 동일하게 사용하고 싶다면 alias를 사용하는 방법이 있다(<a href="https://www.centos.org/forums/viewtopic.php?f=47&amp;t=47373">service name alias? mariadb-&gt;mysql - how?</a>).</p>
<pre class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">"Alias=mysql.service"</span> &gt; /usr/lib/systemd/system/mariadb.service</pre>
<p>이렇게 해주면 mariadb라는 이름으로 service를 등록할 수 있다. 큰 의미가 없으니 굳이 적용할 필요는 없으나 혼선을 없애기 위해서라면 적용하는 것도 나쁘지는 않을 듯하다.</p>
<p>자.. 그런데 위 설치 방법대로 따라하면 아래와 같은 화면을 만나게 된다.</p>
<pre class="hljs bash">$ systemctl <span class="hljs-built_in">enable</span> mysql.service
mysql.service is not a native service, redirecting to /sbin/chkconfig.
Executing /sbin/chkconfig mysql on
The unit files have no [Install] section. They are not meant to be enabled
using systemctl.
Possible reasons <span class="hljs-keyword">for</span> having this kind of units are:
1) A unit may be statically enabled by being symlinked from another unit<span class="hljs-string">'s
   .wants/ or .requires/ directory.
2) A unit'</span>s purpose may be to act as a helper <span class="hljs-keyword">for</span> some other unit <span class="hljs-built_in">which</span> has
   a requirement dependency on it.
3) A unit may be started when needed via activation (socket, path, timer,
   D-Bus, udev, scripted systemctl call, ...).</pre>
<p>내용을 보면 mariadb가 systemd에 등록되지 않고 chkconfig로 initd에 등록된다. 앞서 설명했던 5.5/10.1 버전 설치와는 다른 결과다. CentOS의 레포지토리를 이용해서 설치하면 <code>/usr/lib/systemd/system/mariadb.service</code> 파일이 함께 설치되는데 MariaDB 레포지토리로 설치하면 이 파일이 설치되지 않는다(확인해보니 다른 몇가지도 차이가 있다).</p>
<p>이 부분은 MariaDB 10.0이 systemd 지원을 아직 제대로 하지 않아서 그런 것 같다(테스트는 해보지 않았지만 찾아보니 Fedora 22 이상부터는 바로 지원이 되는 것으로 보인다).</p>
<p>그냥 이렇게 사용해도 문제는 되지 않지만 기존과 동일하게 systemd로 사용하고 싶다면 10.1 버전을 사용하면 된다.</p>
<hr />
<p>10.0을 굳이 써야 한다면 다음과 같이 처리할 수는 있으나 권장하지는 않는다. 이왕이면 최신 버전을 사용하자.</p>
<p>이미 위 명령을 입력했었다면 아래와 같이 제거하자. 아직 설치하지 않았다면 이 과정은 생략한다.</p>
<pre class="hljs bash">$ systemctl <span class="hljs-built_in">disable</span> mysql.service
mysql.service is not a native service, redirecting to /sbin/chkconfig.
Executing /sbin/chkconfig mysql off</pre>
<p>아직 설치를 하지 않았다면 10.1과 유사하게 아래의 과정을 처리한다.</p>
<pre class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"[mariadb]"</span> &gt; /etc/yum.repos.d/MariaDB.repo
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"name = MariaDB"</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"baseurl = http://yum.mariadb.org/10.0/rhel7-amd64"</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB"</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
$ <span class="hljs-built_in">echo</span> <span class="hljs-string">"gpgcheck=1"</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo</pre>
<p>10.1과 유사하게 아래의 방법도 가능하다.</p>
<pre class="hljs bash">$ wget -O /etc/yum.repos.d/MariaDB.repo http://mariadb.if-not-true-then-false.com/rhel/$(rpm -E %rhel)/$(uname -i)/10</pre>
<p>이제 mariadb 10.0을 설치한다.</p>
<pre class="hljs bash">$ yum install -y mariadb mariadb-server</pre>
<p>아래의 내용으로 <code>/usr/lib/systemd/system/mariadb.service</code> 파일을 만든다. 이 스크립트는 5.5 설치시에 생성되었던 <code>/usr/lib/systemd/system/mariadb.service</code> 파일을 가져다가 조금 수정했다. 그대로 사용하려니 정상적으로 동작하지 않았다. <code>/usr/libexec/mariadb-prepare-db-dir</code> 파일을 필요로해서 동일하게 넣어주었으나 구동은 되나 실행 스크립트가 종료되지 않고 <code>systemctl stop</code>으로 종료 할 수도 없었다.</p>
<pre class="hljs bash"><span class="hljs-comment"># It's not recommended to modify this file in-place, because it will be</span>
<span class="hljs-comment"># overwritten during package upgrades.  If you want to customize, the</span>
<span class="hljs-comment"># best way is to create a file "/etc/systemd/system/mariadb.service",</span>
<span class="hljs-comment"># containing</span>
<span class="hljs-comment">#   .include /lib/systemd/system/mariadb.service</span>
<span class="hljs-comment">#   ...make your changes here...</span>
<span class="hljs-comment"># or create a file "/etc/systemd/system/mariadb.service.d/foo.conf",</span>
<span class="hljs-comment"># which doesn't need to include ".include" call and which will be parsed</span>
<span class="hljs-comment"># after the file mariadb.service itself is parsed.</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment"># For more info about custom unit files, see systemd.unit(5) or</span>
<span class="hljs-comment"># http://fedoraproject.org/wiki/Systemd#How_do_I_customize_a_unit_file.2F_add_a_custom_unit_file.3F</span>

<span class="hljs-comment"># For example, if you want to increase mariadb's open-files-limit to 10000,</span>
<span class="hljs-comment"># you need to increase systemd's LimitNOFILE setting, so create a file named</span>
<span class="hljs-comment"># "/etc/systemd/system/mariadb.service.d/limits.conf" containing:</span>
<span class="hljs-comment">#   [Service]</span>
<span class="hljs-comment">#   LimitNOFILE=10000</span>

<span class="hljs-comment"># Note: /usr/lib/... is recommended in the .include line though /lib/...</span>
<span class="hljs-comment"># still works.</span>
<span class="hljs-comment"># Don't forget to reload systemd daemon after you change unit configuration:</span>
<span class="hljs-comment"># root&gt; systemctl --system daemon-reload</span>

[Unit]
Description=MariaDB database server
After=syslog.target
After=network.target

[Service]
<span class="hljs-comment">#Type=simple</span>
Type = forking
User=mysql
Group=mysql
ExecStart = /etc/rc.d/init.d/mysql start
ExecStop = /etc/rc.d/init.d/mysql stop

<span class="hljs-comment">#ExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n</span>
<span class="hljs-comment"># Note: we set --basedir to prevent probes that might trigger SELinux alarms,</span>
<span class="hljs-comment"># per bug #547485</span>
<span class="hljs-comment">#ExecStart=/usr/bin/mysqld_safe --basedir=/usr</span>
<span class="hljs-comment">#ExecStartPost=/usr/libexec/mariadb-wait-ready $MAINPID</span>

<span class="hljs-comment"># Give a reasonable amount of time for the server to start up/shut down</span>
TimeoutSec=300

<span class="hljs-comment"># Place temp files in a secure directory, not /tmp</span>
PrivateTmp=<span class="hljs-literal">true</span>

[Install]
WantedBy=multi-user.target</pre>
<p>이후의 과정은 동일하다. 단, 10.0 설치에서 설명했던 <code>mysql.service</code> 대신 10.1 처럼 <code>mariadb.service</code>을 사용한다. 해당 파일을 만들어 줬으므로.</p>
<pre class="hljs bash">$ systemctl daemon-reload

$ systemctl <span class="hljs-built_in">enable</span> mariadb.service
$ systemctl start mariadb.service
$ mysql_secure_installation</pre>
<p>이제 설치가 끝났다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/03/vagrant-warning-authentication-failure-retrying-dot-dot-dot-after-packaging-box/</id><title type="html">Vagrant Box Packaging 후 &quot;Warning: Authentication failure. Retrying... &quot; 오류가 발생할 경우 해결 방법</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/03/vagrant-warning-authentication-failure-retrying-dot-dot-dot-after-packaging-box/"/><published>2015-12-03T20:35:25+09:00</published><updated>2015-12-03T20:35:25+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[vagrant를 사용하면서 직접 box를 만들 경우가 자주 발생하지는 않는다. 하지만 환경 구성을 위해 간혹 작업을 하게되는데 작업 과정에 문제가 생기는 경우가 간혹 있다. 이번에 CentOS 7 환경을 구성하면서 vagrant로 테스트를 진행했었다. 최초 설치 상태로 box를 만들어두고 환경을 구성해보고 문제가 있으면 초기 box로 다시 구성하는 식으로 작업을 했다. 그런데 이번엔 작업을 하면서 이전에 발생하지 않았던 문제가 발생했다. 이전글 Vagrant BASE Box 만들기(CentOS 7)에서 설명했던 것처럼 box 생성 전에 분명 ssh 관련 처리를 해 주었음에도 불구하고 만들어진 box를 사용해서 vagrant up을 하게되면 아래와 같은 결과가 계속 나왔다(여러번 box를 다시 만들어 봤음에도 불구하고). $ vagrant up Bringing machine 'default' up with 'virtualbox' provider... ==> default: Importing base box 'centos7-dev-1'... ==> default: Matching MAC address for NAT networking... ==> default: Setting the name of the VM: dev7_default_1449141471748_10760 ==> default: Clearing any previously set network interfaces... ==> default: Preparing network interfaces based on configuration... default: Adapter 1: nat default: Adapter 2: hostonly ==> default: Forwarding ports... default: 80 => 8080 (adapter 1) default: 22 => 2222 (adapter 1) ==> default: Running 'pre-boot' VM customizations... ==> default: Booting VM... ==> default: Waiting for machine to boot. This may take a few minutes... default: SSH address: 127.0.0.1:2222 default: SSH username: vagrant default: SSH auth method: private key default: Warning: Connection timeout. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... default: Warning: Authentication failure. Retrying... Timed out while waiting for the machine to boot. This means that Vagrant was unable to communicate with the guest machine within the configured ("config.vm.boot_timeout" value) time period. If you look above, you should be able to see the error(s) that Vagrant had when attempting to connect to the machine. These errors are usually good hints as to what may be wrong. If you're using a custom box, make sure that networking is properly working and you're able to connect to the machine. It is a common problem that networking isn't setup properly in these boxes. Verify that authentication configurations are also setup properly, as well. If the box appears to be booting properly, you may want to increase the timeout ("config.vm.boot_timeout") value. ssh 인증에 실패하면서 계속 시도하다가 결국 그냥 종료되어 버린다. 사실 가상 머신이 종료된 것은 아니다. ssh로 직접 접속하면 접속은 된다. 이 문제가 발생한 것은 이전이지만 당장 다른 작업들이 급해서 그냥 아래의 방법을 통해 사용중이었다. Vagrantfile 에 아래의 내용을 추가한다. config.ssh.username = "vagrant" config.ssh.password = "vagrant" 이 방법은 ssh key를 사용하지 않고 아이디/비밀번호를 입력하는 방식으로 ssh 접속하는 것이다. 사실 이렇게하면 문제는 해결된다. 어짜피 비밀번호에 대한 보안이 중요한 상황도 아니므로 그냥 사용해도 무방하다. 그런데 그냥 사용하기에는 찜찜했다. 특별히 권장하거나 일반적인 방법이 아닌데다가 기존에는 굳이 이렇게하지 않아도 잘 동작하고 있었기 때문이다. 그래서 오늘 많은 검색과 여러가지 방법을 시도한 끝에 해결 방법을 찾았다. 결론은 box 내부에서 처리하는 과정에 문제가 아니라 내 PC의 문제로 보인다. 해결 방법은 다음과 같다. Vagrantfile 에 아래의 내용을 추가한다. config.ssh.insert_key = false 아마도 내가 vagrant를 자주 변경하고 실험하는 사이에 뭔가 설정이 꼬인 것 같다. 이 옵션을 해결되는 것으로 볼 때 내 컴퓨터에 잘못된 키가 저장되어 있고 vagrant up 과정에서 가상 머신에 key를 변경해 버려서 위 문제가 발생했던 것으로 보인다. config.ssh.insert_key는 메뉴얼에 아래와 같이 설명되어 있다. config.ssh.insert_key - If true, Vagrant will automatically insert an keypair to use for SSH, replacing the default Vagrant's insecure key inside the machine > if detected. By default, this is true. This only has an effect if you don't already use private keys for authentication or if you are relying on the default insecure key. If you don't have to take care about security in your project and want to keep using the default insecure key, set this to false. 검색을 하다보니 이 두가지 방법 외에도 여러가지 방법이 제안되는 것으로 보아 다른 문제로 인해 이런 현상이 나타나는 경우도 있는 것 같다. 어쨌든 위와 같은 문제를 겪는다면 제시한 2가지 방법도 한번 적용해 보면 도움이 될 것으로 생각한다.]]></summary><content type="html"><![CDATA[<p>vagrant를 사용하면서 직접 box를 만들 경우가 자주 발생하지는 않는다. 하지만 환경 구성을 위해 간혹 작업을 하게되는데 작업 과정에 문제가 생기는 경우가 간혹 있다. 이번에 CentOS 7 환경을 구성하면서 vagrant로 테스트를 진행했었다. 최초 설치 상태로 box를 만들어두고 환경을 구성해보고 문제가 있으면 초기 box로 다시 구성하는 식으로 작업을 했다. 그런데 이번엔 작업을 하면서 이전에 발생하지 않았던 문제가 발생했다.</p>
<p>이전글 <a href="https://blog.asamaru.net/2015/10/14/creating-a-vagrant-base-box/">Vagrant BASE Box 만들기(CentOS 7)</a>에서 설명했던 것처럼 box 생성 전에 분명 ssh 관련 처리를 해 주었음에도 불구하고 만들어진 box를 사용해서 <code>vagrant up</code>을 하게되면 아래와 같은 결과가 계속 나왔다(여러번 box를 다시 만들어 봤음에도 불구하고).</p>
<pre class="hljs bash">$ vagrant up
Bringing machine <span class="hljs-string">'default'</span> up with <span class="hljs-string">'virtualbox'</span> provider...
==&gt; default: Importing base box <span class="hljs-string">'centos7-dev-1'</span>...
==&gt; default: Matching MAC address <span class="hljs-keyword">for</span> NAT networking...
==&gt; default: Setting the name of the VM: dev7_default_1449141471748_10760
==&gt; default: Clearing any previously <span class="hljs-built_in">set</span> network interfaces...
==&gt; default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
    default: Adapter 2: hostonly
==&gt; default: Forwarding ports...
    default: 80 =&gt; 8080 (adapter 1)
    default: 22 =&gt; 2222 (adapter 1)
==&gt; default: Running <span class="hljs-string">'pre-boot'</span> VM customizations...
==&gt; default: Booting VM...
==&gt; default: Waiting <span class="hljs-keyword">for</span> machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Warning: Connection timeout. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
    default: Warning: Authentication failure. Retrying...
Timed out <span class="hljs-keyword">while</span> waiting <span class="hljs-keyword">for</span> the machine to boot. This means that
Vagrant was unable to communicate with the guest machine within
the configured (<span class="hljs-string">"config.vm.boot_timeout"</span> value) time period.

If you look above, you should be able to see the error(s) that
Vagrant had when attempting to connect to the machine. These errors
are usually good hints as to what may be wrong.

If you<span class="hljs-string">'re using a custom box, make sure that networking is properly
working and you'</span>re able to connect to the machine. It is a common
problem that networking isn<span class="hljs-string">'t setup properly in these boxes.
Verify that authentication configurations are also setup properly,
as well.

If the box appears to be booting properly, you may want to increase
the timeout ("config.vm.boot_timeout") value.</span></pre>
<p>ssh 인증에 실패하면서 계속 시도하다가 결국 그냥 종료되어 버린다. 사실 가상 머신이 종료된 것은 아니다. ssh로 직접 접속하면 접속은 된다. 이 문제가 발생한 것은 이전이지만 당장 다른 작업들이 급해서 그냥 아래의 방법을 통해 사용중이었다.</p>
<p><strong>Vagrantfile 에 아래의 내용을 추가한다.</strong></p>
<pre class="hljs ruby">config.ssh.username = <span class="hljs-string">"vagrant"</span>
config.ssh.password = <span class="hljs-string">"vagrant"</span></pre>
<p>이 방법은 ssh key를 사용하지 않고 아이디/비밀번호를 입력하는 방식으로 ssh 접속하는 것이다. 사실 이렇게하면 문제는 해결된다. 어짜피 비밀번호에 대한 보안이 중요한 상황도 아니므로 그냥 사용해도 무방하다. 그런데 그냥 사용하기에는 찜찜했다. 특별히 권장하거나 일반적인 방법이 아닌데다가 기존에는 굳이 이렇게하지 않아도 잘 동작하고 있었기 때문이다.</p>
<p>그래서 오늘 많은 검색과 여러가지 방법을 시도한 끝에 해결 방법을 찾았다. 결론은 box 내부에서 처리하는 과정에 문제가 아니라 내 PC의 문제로 보인다. 해결 방법은 다음과 같다.</p>
<p><strong>Vagrantfile 에 아래의 내용을 추가한다.</strong></p>
<pre class="hljs ruby">config.ssh.insert_key = <span class="hljs-literal">false</span></pre>
<p>아마도 내가 vagrant를 자주 변경하고 실험하는 사이에 뭔가 설정이 꼬인 것 같다. 이 옵션을 해결되는 것으로 볼 때 내 컴퓨터에 잘못된 키가 저장되어 있고 <code>vagrant up</code> 과정에서 가상 머신에 key를 변경해 버려서 위 문제가 발생했던 것으로 보인다.</p>
<p>config.ssh.insert_key는 <a href="https://docs.vagrantup.com/v2/vagrantfile/ssh_settings.html">메뉴얼</a>에 아래와 같이 설명되어 있다.</p>
<blockquote>
<p>config.ssh.insert_key - If true, Vagrant will automatically insert an keypair to use for SSH, replacing the default Vagrant's insecure key inside the machine &gt; if detected. By default, this is true.</p>
<p>This only has an effect if you don't already use private keys for authentication or if you are relying on the default insecure key. If you don't have to take care about security in your project and want to keep using the default insecure key, set this to false.</p>
</blockquote>
<p>검색을 하다보니 이 두가지 방법 외에도 여러가지 방법이 제안되는 것으로 보아 다른 문제로 인해 이런 현상이 나타나는 경우도 있는 것 같다. 어쨌든 위와 같은 문제를 겪는다면 제시한 2가지 방법도 한번 적용해 보면 도움이 될 것으로 생각한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/02/vagrant-cant-mount-shared-folder/</id><title type="html">VirtualBox 버전업 후 Vagrant synced_folder 설정에서 오류가 날 경우</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/02/vagrant-cant-mount-shared-folder/"/><published>2015-12-02T19:39:43+09:00</published><updated>2015-12-02T19:39:43+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[vagrant를 사용하면서 로컬과 가상 머신 사이의 파일 전달을 간단히 하려면 synced_folder를 사용하면 된다. 설정도 아주 간단하다. Vagrantfile에 아래의 내용을 추가하면 된다. 당연히 설정값은 자신의 상황에 맞게 지정하면 된다. config.vm.synced_folder "/local/vagrant/share", "/vagrant", owner: "web", group: "usergroup", mount_options: ["dmode=777,fmode=777"] 사실 synced_folder의 단점은 퍼미션에 있다. 나의 경우는 osx 환경에서 centos 가상 머신을 사용하는 상황이라 퍼미션을 유지한 상태로 폴더를 연결하고 싶으나 그렇게는 되지 않는다. 그래서 나는 synced_folder는 파일 전달용으로 사용하고 작업 소스 폴더 등은 NFS를 이용해서 로컬과 가상 머신을 연결한다. 그렇게하면 퍼미션도 유지할 수 있기 때문에 관련 작업시 편하다. 이와 관련해서는 오늘 이야기하고자 하는 부분이 아니므로 일단 넘어가기로 한다. 사실 나도 이렇게 잘 사용하고 있었는데 얼마 전부터 아래와 같은 오류가 나면서 정상적으로 연결이 되지 않았다. default: /vagrant => /local/vagrant/share Failed to mount folders in Linux guest. This is usually because the "vboxsf" file system is not available. Please verify that the guest additions are properly installed in the guest and can work properly. The command attempted was: mount -t vboxsf -o uid=`id -u web`,gid=`getent group usergroup | cut -d: -f3`,dmode=777,fmode=777 vagrant /vagrant mount -t vboxsf -o uid=`id -u web`,gid=`id -g usergroup`,dmode=777,fmode=777 vagrant /vagrant synced_folder의 경우 주로 사용하는 작업용 폴더가 아니라서 일단 무시하고 사용하고 있었는데 vagrant up 할 때마다 오류가 보여서 해결하기로 했다. 기존에는 아무 문제가 없었다. 그래서 가만히 생각해보니 얼마전 VirtualBox를 버전업 했다는 사실이 떠올랐다. 그래서 확인해보니 이 부분이 문제를 일으키는 원인이 맞았다. synced_folder의 경우 vboxsf를 사용하는데 VirtualBox가 버전업 되면서 호환이 되지 않았던 것이다(4.3.30 -> 5.0.10). 간단히 생각하면 VBoxGuestAdditions을 다시 설치해주면 된다. 그런데 이렇게 하려니 가상 머신마다 일일이 작업을 해야하기 때문에 귀찮다. 그래서 조금 찾아보니 Vagrant can't mount shared folder in VirtualBox 4.3.10에 해결 방법이 있었다. 간단히 요약하면 vagrant-vbguest 플러그인을 설치하면 vagrant up 시에 알아서 GuestAdditions을 다시 설치해 준다. 우선 vagrant-vbguest 플러그인을 설치하려면 local에서 아래와 같이 실행한다(osx 기준이다). $ vagrant plugin install vagrant-vbguest Installing the `vagrant-vbguest` plugin. This can take a few minutes... Installed the plugin 'vagrant-vbguest (0.11.0)'! 그리고 다시 vagrant up을 하면 아래와 같이 다시 설치하는 모습을 볼 수 있다. ==> default: Machine booted and ready! GuestAdditions versions on your host (5.0.10) and guest (4.3.30) do not match. Loaded plugins: fastestmirror Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast Determining fastest mirrors * base: mirror.premi.st * extras: mirror.premi.st * updates: mirror.premi.st Package kernel-devel-3.10.0-229.14.1.el7.x86_64 already installed and latest version Package gcc-4.8.3-9.el7.x86_64 already installed and latest version Package 1:make-3.82-21.el7.x86_64 already installed and latest version Package 4:perl-5.16.3-285.el7.x86_64 already installed and latest version Package bzip2-1.0.6-12.el7.x86_64 already installed and latest version Nothing to do Copy iso file /Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso into the box /tmp/VBoxGuestAdditions.iso mount: /dev/loop0 is write-protected, mounting read-only Installing Virtualbox Guest Additions 5.0.10 - guest version is 4.3.30 Verifying archive integrity... All good. Uncompressing VirtualBox 5.0.10 Guest Additions for Linux............ VirtualBox Guest Additions installer Removing installed version 4.3.30 of VirtualBox Guest Additions... Copying additional installer modules ... Installing additional modules ... Removing existing VirtualBox non-DKMS kernel modules[ OK ] Building the VirtualBox Guest Additions kernel modules Building the main Guest Additions module[ OK ] Building the shared folder support module[ OK ] Building the OpenGL support module[ OK ] Doing non-kernel setup of the Guest Additions[ OK ] You should restart your guest to make sure the new modules are actually used Vagrant can't mount shared folder in VirtualBox 4.3.10에서는 sudo ln -s /opt/VBoxGuestAdditions-4.3.10/lib/VBoxGuestAdditions /usr/lib/VBoxGuestAdditions 처리를 통해 심볼릭 링크를 만들어 주고 있지만 나의 경우는 vagrant-vbguest 플러그인이 이 과정도 처리해놔서 별도로 처리하지는 않았다. 하지만 이 과정이 필요하다면 동일하게 처리해 줘야할 수 있다. 나의 경우로 예를들자면 VirtualBox가 5.0.10이므로 sudo ln -s /opt/VBoxGuestAdditions-5.0.10/lib/VBoxGuestAdditions /usr/lib/VBoxGuestAdditions라고 해야한다. 그런데 여기서도 문제가 있을 수 있다. 나의 경우는 최초 설치가 아니라 이미 사용중이었으므로 /usr/lib/VBoxGuestAdditions 파일이 이미 존재하고 이 파일은 /opt/VBoxGuestAdditions-4.3.30/lib/VBoxGuestAdditions의 심볼릭 링크다. 그래서 아래와 같이 처리해 주어야 한다. 당연히 이 과정은 가상 머신에서 실행한다. 하지만 $ sudo su - $ rm -f /usr/lib/VBoxGuestAdditions $ ln -s /opt/VBoxGuestAdditions-5.0.10/lib/VBoxGuestAdditions /usr/lib/VBoxGuestAdditions 그런데 다시 vagrant up 시에 아래와 같은 오류가 날 수 있다. GuestAdditions seems to be installed (5.0.10) correctly, but not running. 또는 /sbin/mount.vboxsf: mounting failed with the error: No such device 이 경우는 vboxadd 서비스가 부팅시에 자동으로 시작되도록 되어있지 않기 때문이다. 따라서 서비스를 아래와 같이 추가해 주어야 한다. 이 명령 또한 가상 머신에서 실행하는 것이다. $ systemctl enable vboxadd.service 단, 여기서 유의할 점은 위 과정은 CentOS 7 기준이라는 것이다. 따라서 상황에 따라 systemctl에 관련된 부분을 수정해야 한다. 예를들어 CentOS 6.5의 경우라면 아래의 명령을 사용해야 한다. $ chkconfig --add vboxadd $ chkconfig vboxadd on 이제 다 되었다. 기존처럼 synced_folder를 사용할 수 있다. 이 글의 내용을 요약하자면 이렇다. VirtualBox의 버전업을 한 후 vboxsf가 정상 동작하지 않는다면 VBoxGuestAdditions를 재설치 해야한다. 매번 재설치하는 것이 귀찮다면 vagrant-vbguest 플러그인을 사용한다.]]></summary><content type="html"><![CDATA[<p>vagrant를 사용하면서 로컬과 가상 머신 사이의 파일 전달을 간단히 하려면 synced_folder를 사용하면 된다. 설정도 아주 간단하다. <code>Vagrantfile</code>에 아래의 내용을 추가하면 된다. 당연히 설정값은 자신의 상황에 맞게 지정하면 된다.</p>
<pre class="hljs bash">config.vm.synced_folder <span class="hljs-string">"/local/vagrant/share"</span>, <span class="hljs-string">"/vagrant"</span>, owner: <span class="hljs-string">"web"</span>, group: <span class="hljs-string">"usergroup"</span>, mount_options: [<span class="hljs-string">"dmode=777,fmode=777"</span>]</pre>
<p>사실 synced_folder의 단점은 퍼미션에 있다. 나의 경우는 osx 환경에서 centos 가상 머신을 사용하는 상황이라 퍼미션을 유지한 상태로 폴더를 연결하고 싶으나 그렇게는 되지 않는다. 그래서 나는 synced_folder는 파일 전달용으로 사용하고 작업 소스 폴더 등은 NFS를 이용해서 로컬과 가상 머신을 연결한다. 그렇게하면 퍼미션도 유지할 수 있기 때문에 관련 작업시 편하다. 이와 관련해서는 오늘 이야기하고자 하는 부분이 아니므로 일단 넘어가기로 한다.</p>
<p>사실 나도 이렇게 잘 사용하고 있었는데 얼마 전부터 아래와 같은 오류가 나면서 정상적으로 연결이 되지 않았다.</p>
<pre class="hljs bash">default: /vagrant =&gt; /<span class="hljs-built_in">local</span>/vagrant/share
Failed to mount folders <span class="hljs-keyword">in</span> Linux guest. This is usually because
the <span class="hljs-string">"vboxsf"</span> file system is not available. Please verify that
the guest additions are properly installed <span class="hljs-keyword">in</span> the guest and
can work properly. The <span class="hljs-built_in">command</span> attempted was:

mount -t vboxsf -o uid=`id -u web`,gid=`getent group usergroup | cut -d: -f3`,dmode=777,fmode=777 vagrant /vagrant
mount -t vboxsf -o uid=`id -u web`,gid=`id -g usergroup`,dmode=777,fmode=777 vagrant /vagrant</pre>
<p>synced_folder의 경우 주로 사용하는 작업용 폴더가 아니라서 일단 무시하고 사용하고 있었는데 vagrant up 할 때마다 오류가 보여서 해결하기로 했다.</p>
<p>기존에는 아무 문제가 없었다. 그래서 가만히 생각해보니 얼마전 VirtualBox를 버전업 했다는 사실이 떠올랐다. 그래서 확인해보니 이 부분이 문제를 일으키는 원인이 맞았다. synced_folder의 경우 vboxsf를 사용하는데 VirtualBox가 버전업 되면서 호환이 되지 않았던 것이다(4.3.30 -&gt; 5.0.10). 간단히 생각하면 VBoxGuestAdditions을 다시 설치해주면 된다. 그런데 이렇게 하려니 가상 머신마다 일일이 작업을 해야하기 때문에 귀찮다.</p>
<p>그래서 조금 찾아보니 <a href="https://github.com/mitchellh/vagrant/issues/3341">Vagrant can't mount shared folder in VirtualBox 4.3.10</a>에 해결 방법이 있었다.</p>
<p>간단히 요약하면 <code>vagrant-vbguest</code> 플러그인을 설치하면 vagrant up 시에 알아서 GuestAdditions을 다시 설치해 준다. 우선 <code>vagrant-vbguest</code> 플러그인을 설치하려면 local에서 아래와 같이 실행한다(osx 기준이다).</p>
<pre class="hljs bash">$ vagrant plugin install vagrant-vbguest

Installing the `vagrant-vbguest` plugin. This can take a few minutes...
Installed the plugin <span class="hljs-string">'vagrant-vbguest (0.11.0)'</span>!</pre>
<p>그리고 다시 vagrant up을 하면 아래와 같이 다시 설치하는 모습을 볼 수 있다.</p>
<pre class="hljs bash">==&gt; default: Machine booted and ready!
GuestAdditions versions on your host (5.0.10) and guest (4.3.30) <span class="hljs-keyword">do</span> not match.
Loaded plugins: fastestmirror
Repodata is over 2 weeks old. Install yum-cron? Or run: yum makecache fast
Determining fastest mirrors
 * base: mirror.premi.st
 * extras: mirror.premi.st
 * updates: mirror.premi.st
Package kernel-devel-3.10.0-229.14.1.el7.x86_64 already installed and latest version
Package gcc-4.8.3-9.el7.x86_64 already installed and latest version
Package 1:make-3.82-21.el7.x86_64 already installed and latest version
Package 4:perl-5.16.3-285.el7.x86_64 already installed and latest version
Package bzip2-1.0.6-12.el7.x86_64 already installed and latest version
Nothing to <span class="hljs-keyword">do</span>
Copy iso file /Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso into the box /tmp/VBoxGuestAdditions.iso
mount: /dev/loop0 is write-protected, mounting <span class="hljs-built_in">read</span>-only
Installing Virtualbox Guest Additions 5.0.10 - guest version is 4.3.30
Verifying archive integrity... All good.
Uncompressing VirtualBox 5.0.10 Guest Additions <span class="hljs-keyword">for</span> Linux............
VirtualBox Guest Additions installer
Removing installed version 4.3.30 of VirtualBox Guest Additions...
Copying additional installer modules ...
Installing additional modules ...
Removing existing VirtualBox non-DKMS kernel modules[  OK  ]
Building the VirtualBox Guest Additions kernel modules
Building the main Guest Additions module[  OK  ]
Building the shared folder support module[  OK  ]
Building the OpenGL support module[  OK  ]
Doing non-kernel setup of the Guest Additions[  OK  ]
You should restart your guest to make sure the new modules are actually used</pre>
<p><a href="https://github.com/mitchellh/vagrant/issues/3341">Vagrant can't mount shared folder in VirtualBox 4.3.10</a>에서는 <code>sudo ln -s /opt/VBoxGuestAdditions-4.3.10/lib/VBoxGuestAdditions /usr/lib/VBoxGuestAdditions</code> 처리를 통해 심볼릭 링크를 만들어 주고 있지만 나의 경우는 <code>vagrant-vbguest</code> 플러그인이 이 과정도 처리해놔서 별도로 처리하지는 않았다.</p>
<p>하지만 이 과정이 필요하다면 동일하게 처리해 줘야할 수 있다. 나의 경우로 예를들자면 VirtualBox가 5.0.10이므로 <code>sudo ln -s /opt/VBoxGuestAdditions-5.0.10/lib/VBoxGuestAdditions /usr/lib/VBoxGuestAdditions</code>라고 해야한다. 그런데 여기서도 문제가 있을 수 있다. 나의 경우는 최초 설치가 아니라 이미 사용중이었으므로 <code>/usr/lib/VBoxGuestAdditions</code> 파일이 이미 존재하고 이 파일은 <code>/opt/VBoxGuestAdditions-4.3.30/lib/VBoxGuestAdditions</code>의 심볼릭 링크다. 그래서 아래와 같이 처리해 주어야 한다. 당연히 이 과정은 가상 머신에서 실행한다. 하지만</p>
<pre class="hljs bash">$ sudo su -
$ rm -f /usr/lib/VBoxGuestAdditions
$ ln -s /opt/VBoxGuestAdditions-5.0.10/lib/VBoxGuestAdditions /usr/lib/VBoxGuestAdditions</pre>
<p>그런데 다시 vagrant up 시에 아래와 같은 오류가 날 수 있다.</p>
<pre class="hljs bash">GuestAdditions seems to be installed (5.0.10) correctly, but not running.</pre>
<p>또는</p>
<pre class="hljs bash">/sbin/mount.vboxsf: mounting failed with the error: No such device</pre>
<p>이 경우는 vboxadd 서비스가 부팅시에 자동으로 시작되도록 되어있지 않기 때문이다. 따라서 서비스를 아래와 같이 추가해 주어야 한다. 이 명령 또한 가상 머신에서 실행하는 것이다.</p>
<pre class="hljs bash">$ systemctl <span class="hljs-built_in">enable</span> vboxadd.service</pre>
<p>단, 여기서 유의할 점은 위 과정은 CentOS 7 기준이라는 것이다. 따라서 상황에 따라 <code>systemctl</code>에 관련된 부분을 수정해야 한다. 예를들어 CentOS 6.5의 경우라면 아래의 명령을 사용해야 한다.</p>
<pre class="hljs bash">$ chkconfig --add vboxadd
$ chkconfig vboxadd on</pre>
<p>이제 다 되었다. 기존처럼 synced_folder를 사용할 수 있다.</p>
<p>이 글의 내용을 요약하자면 이렇다. <strong>VirtualBox의 버전업을 한 후 vboxsf가 정상 동작하지 않는다면 VBoxGuestAdditions를 재설치 해야한다. 매번 재설치하는 것이 귀찮다면 <code>vagrant-vbguest</code> 플러그인을 사용한다.</strong></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/02/nginx-414-request-uri-too-large/</id><title type="html">Nginx : 414 Request-URI Too Large 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/02/nginx-414-request-uri-too-large/"/><published>2015-12-02T16:17:54+09:00</published><updated>2015-12-02T16:17:54+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[Nginx를 사용하는 중에 아주 긴 URL의 요청이 들어올 경우 414 Request-URI Too Large 오류가 나는 경우가 있다. 이는 말 그대로 URL 요청이 제한된 길이보다 길기 때문에 오류가 발생하는 것이다. 일반적인 웹 서버들은 8kb를 최대 길이로 설정되어 있는 것이 보통이다. 실제로 Nginx의 경우도 기본은 8kb이다. 하지만 URL의 길이는 서버에서 받아주는 길이도 관련이 있지만 웹 브라우저에서도 제한이 있다. 예를들어 오래된 브라우저들은 2kb 가량의 제한이 있다. 하지만 최신 브라우저들은 8kb로 제한하는 것으로 알고 있다. 하지만 나의 경우는 이 값을 1kb로 설정해 둔 상태로 조금 긴 Url에서 해당 오류가 발생했다. 그래서 2kb로 늘려 두었다. 그러면 Nginx에서는 이 값을 어떻게 조정할 수 있을까? 바로 large_client_header_buffers를 사용하면 된다. 예를들면 아래와 같이 사용한다(디폴트 값을 예시로 넣었다). http { large_client_header_buffers 4 8k; } http { server { large_client_header_buffers 4 8k; } } 공식 메뉴얼에는 아래와 같이 설명되어 있다. Syntax: large_client_header_buffers number size; Default: large_client_header_buffers 4 8k; Context: http, server Sets the maximum number and size of buffers used for reading large client request header. A request line cannot exceed the size of one buffer, or the 414 (Request-URI Too Large) error is returned to the client. A request header field cannot exceed the size of one buffer as well, or the 400 (Bad Request) error is returned to the client. Buffers are allocated only on demand. By default, the buffer size is equal to 8K bytes. If after the end of request processing a connection is transitioned into the keep-alive state, these buffers are released. 여기서 조금 애매한 부분이 number 값인데 명확히 어떤 역할인지를 아직 잘 모르겠다. 찾아보니 number * size가 최대 사이즈라고 하는데 테스트 해보니 그건 아닌 것 같다(number가 2이고 size가 1k인 상황에서 1024자를 넘어가니 414 오류가 발생했다).]]></summary><content type="html"><![CDATA[<p>Nginx를 사용하는 중에 아주 긴 URL의 요청이 들어올 경우 <code>414 Request-URI Too Large</code> 오류가 나는 경우가 있다. 이는 말 그대로 URL 요청이 제한된 길이보다 길기 때문에 오류가 발생하는 것이다. 일반적인 웹 서버들은 8kb를 최대 길이로 설정되어 있는 것이 보통이다. 실제로 Nginx의 경우도 기본은 8kb이다. 하지만 URL의 길이는 서버에서 받아주는 길이도 관련이 있지만 웹 브라우저에서도 제한이 있다. 예를들어 오래된 브라우저들은 2kb 가량의 제한이 있다. 하지만 최신 브라우저들은 8kb로 제한하는 것으로 알고 있다.</p>
<p>하지만 나의 경우는 이 값을 1kb로 설정해 둔 상태로 조금 긴 Url에서 해당 오류가 발생했다. 그래서 2kb로 늘려 두었다.</p>
<p>그러면 Nginx에서는 이 값을 어떻게 조정할 수 있을까? 바로 <a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#large_client_header_buffers">large_client_header_buffers</a>를 사용하면 된다. 예를들면 아래와 같이 사용한다(디폴트 값을 예시로 넣었다).</p>
<pre class="hljs nginx"><span class="hljs-section">http</span> {
  <span class="hljs-attribute">large_client_header_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">8k</span>;
}</pre>
<pre class="hljs nginx"><span class="hljs-section">http</span> {
  <span class="hljs-section">server</span> {
    <span class="hljs-attribute">large_client_header_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">8k</span>;    
  }
}</pre>
<p><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#large_client_header_buffers">공식 메뉴얼</a>에는 아래와 같이 설명되어 있다.</p>
<blockquote>
<p>Syntax: large_client_header_buffers number size;
Default: large_client_header_buffers 4 8k;
Context: http, server</p>
</blockquote>
<p>Sets the maximum number and size of buffers used for reading large client request header. A request line cannot exceed the size of one buffer, or the 414 (Request-URI Too Large) error is returned to the client. A request header field cannot exceed the size of one buffer as well, or the 400 (Bad Request) error is returned to the client. Buffers are allocated only on demand. By default, the buffer size is equal to 8K bytes. If after the end of request processing a connection is transitioned into the keep-alive state, these buffers are released.</p>
<p>여기서 조금 애매한 부분이 number 값인데 명확히 어떤 역할인지를 아직 잘 모르겠다. 찾아보니 number * size가 최대 사이즈라고 하는데 테스트 해보니 그건 아닌 것 같다(number가 2이고 size가 1k인 상황에서 1024자를 넘어가니 414 오류가 발생했다).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/12/02/selinux-plus-php-session-permission-denied-error/</id><title type="html">selinux + PHP : Session Permission denied 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/12/02/selinux-plus-php-session-permission-denied-error/"/><published>2015-12-02T12:53:59+09:00</published><updated>2015-12-02T12:53:59+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[서버를 새로 세팅하면서 CentOS 7에서 selinux와 함께 PHP 5.6을 설치했다. 기존에는 selinux를 사용하지 않도록 했었는데 이번에는 사용하도록 설정해서 설치를 완료했다. 그런데 세션을 사용하려고 session_start();를 하면 아래와 유사한 오류가 발생했다. FastCGI sent in stderr: "PHP message: PHP Warning: session_start(): open(/var/lib/php/session/sess_sk456vdemnp391spiv3i622i96, O_RDWR) failed: Permission denied 당연히 원인은 selinux이다. selinux가 적용된 상태라면 아무리 777 권한을 부여해도 접근을 할 수 없다. 그 해결법은 (nginx/selinux) Permission denied error for sessions but files are created에 잘 설명되어 있다. 결과적으로 아래의 방법을 통해 문제를 해결할 수 있다. $ mkdir /var/lib/php/session $ mkdir /var/lib/php/wsdlcache $ chmod 777 /var/lib/php/session /var/lib/php/wsdlcache $ restorecon -v "/var/lib/php/session" $ semanage fcontext -a -t httpd_sys_rw_content_t /var/lib/php/session $ restorecon -v "/var/lib/php/wsdlcache" $ semanage fcontext -a -t httpd_sys_rw_content_t /var/lib/php/wsdlcache mkdir과 chmod는 필요 없을 수 있다. 나의 경우는 아예 폴더도 만들어져 있지 않아서 폴더를 생성하고 권한도 함께 지정했다.]]></summary><content type="html"><![CDATA[<p>서버를 새로 세팅하면서 CentOS 7에서 selinux와 함께 PHP 5.6을 설치했다. 기존에는 selinux를 사용하지 않도록 했었는데 이번에는 사용하도록 설정해서 설치를 완료했다. 그런데 세션을 사용하려고 <code>session_start();</code>를 하면 아래와 유사한 오류가 발생했다.</p>
<pre><code>FastCGI sent in stderr: "PHP message: PHP Warning: session_start(): open(/var/lib/php/session/sess_sk456vdemnp391spiv3i622i96, O_RDWR) failed: Permission denied</code></pre>
<p>당연히 원인은 selinux이다. selinux가 적용된 상태라면 아무리 777 권한을 부여해도 접근을 할 수 없다. 그 해결법은 <a href="http://stackoverflow.com/a/33030627">(nginx/selinux) Permission denied error for sessions but files are created</a>에 잘 설명되어 있다.</p>
<p>결과적으로 아래의 방법을 통해 문제를 해결할 수 있다.</p>
<pre class="hljs bash">$ mkdir /var/lib/php/session
$ mkdir /var/lib/php/wsdlcache
$ chmod 777 /var/lib/php/session /var/lib/php/wsdlcache

$ restorecon -v <span class="hljs-string">"/var/lib/php/session"</span>
$ semanage fcontext -a -t httpd_sys_rw_content_t /var/lib/php/session
$ restorecon -v <span class="hljs-string">"/var/lib/php/wsdlcache"</span>
$ semanage fcontext -a -t httpd_sys_rw_content_t /var/lib/php/wsdlcache</pre>
<p>mkdir과 chmod는 필요 없을 수 있다. 나의 경우는 아예 폴더도 만들어져 있지 않아서 폴더를 생성하고 권한도 함께 지정했다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/27/installing-nginx-on-centos-6-dot-5-slash-7/</id><title type="html">Nginx(stable / mainline) 설치 - CentOS 6.5 / 7</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/27/installing-nginx-on-centos-6-dot-5-slash-7/"/><published>2015-11-27T15:49:16+09:00</published><updated>2015-11-27T15:49:16+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[Nginx는 위키피디아에서 아래와 같이 설명하고 있다. Nginx(엔진 x라 읽는다)는 웹 서버 소프트웨어로, 가벼움과 높은 성능을 목표로 한다. 웹 서버, 리버스 프록시 및 메일 프록시 기능을 가진다. Netcraft의 2011년 1월 웹서버 설문조사에 따르면, nginx는 전체 도메인에서 4번째(7.50%)로 많이 쓰이는 웹서버이며, 활성화된 웹 사이트에 대한 통계에서도 역시 4번째(8.23%)로 많이 사용된다[1]. Nginx는 요청에 응답하기 위해 비동기 이벤트 기반 구조를 가진다. 이것은 아파치 HTTP 서버의 스레드/프로세스 기반 구조를 가지는 것과는 대조적이다. 이러한 구조는 서버에 많은 부하가 생길 경우의 성능을 예측하기 쉽게 해준다. 기존에는 Apache를 사용하고 있었다. Apache의 다양한 기능 때문이라기 보다는 익숙함 때문이었다. 그런데 예전부터 Nginx에 대한 사람들의 평가(Apache의 튜닝 상태에 따라 다른 결과를 보이기도 한다)를 볼 때마다 언젠가는 갈아타야지 싶었는데 최근에야 이 생각을 실천하게 되었다. 그레서 Nginx를 설치하는 과정을 정리하고자 한다. CentOS에서 Nginx의 설치는 크게 소스를 컴파일해서 설치하는 방법과 YUM을 통해 설치하는 방법이 있다. Nginx의 경우 Apache와 다르게 모듈을 추가할 경우엔 무조건 소스 설치를 해야한다(모듈을 포함시켜 컴파일 해야 한다). 따라서 mod_pagespeed나 pagespeed 등을 사용하고자 하는 경우에는 소스 설치를 해야 한다. 오늘은 YUM 설치를 기준으로 설명하고자 하니 모듈을 추가해서 설치하는 방법은 아래의 링크들을 참고하자. How to install Mod_Security on Nginx Build ngx_pagespeed From Source NGINX 모듈 제작하기 사실 기본적인 설치는 공식 메뉴얼에 아주 잘 설명되어 있고 간단하다. 내용을 옮겨 적자면 아래와 같다. /etc/yum.repos.d/nginx.repo 파일을 생성해서 아래의 내용을 넣는다. [nginx] name=nginx repo baseurl=http://nginx.org/packages/centos/$releasever/$basearch/ gpgcheck=0 enabled=1 그리고는 아래와 같이 yum 으로 설치한다. sudo yum install nginx 혹시 EPEL을 이용해서 설치하고 싶다면 /etc/yum.repos.d/nginx.repo 파일을 생성할 필요없이 아래와 같이하면 된다. sudo yum install epel-release sudo yum install nginx 끝이다. 정말 간단하다. 설명할 것도 없다. 하지만 사실 이 글을 적는 이유는 이제부터다. Nginx는 기본적으로 두가지 버전이 존재한다. stable 버전과 mainline 버전이다. 사실상 최신 버전은 mainline 이다. 2015-11-27일 기준으로 stable은 nginx-1.8.0, mainline은 1.9.7이다. 말그대로 stable 버전이 안정 버전이므로 사용이 권장되기는 하나 mainline도 불안정한 것은 아니다. What’s the difference between the “mainline” and “stable” branches of nginx?의 설명대로라면 mainline을 더 권장한다. stable 버전이라고 버그가 없는 것이 아니며 버그 패치는 mainline에 먼저 된다는 이유 때문이다. 그래서 나는 mainline으로 설치하기로 했다. 설치 방법은 위의 stable과 별반 다르지 않으나 repository의 url만 차이가 난다. /etc/yum.repos.d/nginx.repo 파일을 생성해서 아래의 내용을 넣는다. [nginx] name=nginx repo baseurl=http://nginx.org/packages/mainline/centos/\$releasever/\$basearch/ gpgcheck=0 enabled=1 그리고는 아래와 같이 yum 으로 설치한다. sudo yum install nginx 이것 또한 아주 간단하다. 약간의 부가 작업을 포함해서 bash shell 스크립트를 하나 만들어 뒀다. nginx.install.sh #!/bin/bash function printTitle { echo -e "\e[1;97m=======================================\e[0m" echo -e "\e[1;97m* $1\e[0m" echo -e "\e[1;97m=======================================\e[0m" } function printJob { echo -e "\e[94m* $1\e[0m" } function printSubJob { echo -e "\e[96m\t$1\e[0m" } printTitle "Nginx 설치" printJob "httpd.service 종료" systemctl stop httpd.service printJob "httpd.service 제거" yum remove -y httpd systemctl disable httpd.service printJob "Nginx 설치" if [ ! -e /etc/yum.repos.d/nginx.repo ]; then printSubJob "nginx repository 추가" echo "[nginx]" > /etc/yum.repos.d/nginx.repo echo "name=nginx repo" >> /etc/yum.repos.d/nginx.repo echo "baseurl=http://nginx.org/packages/mainline/centos/\$releasever/\$basearch/" >> /etc/yum.repos.d/nginx.repo #echo "baseurl=http://nginx.org/packages/centos/\$releasever/\$basearch/" >> /etc/yum.repos.d/nginx.repo echo "gpgcheck=0" >> /etc/yum.repos.d/nginx.repo echo "enabled=1" >> /etc/yum.repos.d/nginx.repo fi printSubJob "nginx package 설치" yum install -y nginx printJob "Nginx 서비스 활성" systemctl enable nginx.service printJob "Nginx 서비스 시작" systemctl start nginx.service printJob "방화벽 설정" if [ `firewall-cmd --zone=public --list-all|grep "services"|grep "http" | wc -l` -eq 0 ]; then printSubJob "http/https 개방" firewall-cmd --permanent --zone=public --add-service=http firewall-cmd --permanent --zone=public --add-service=https printSubJob "방화벽 rule reload" firewall-cmd --reload fi 위 소스는 CentOS 7에서 firewalld를 사용하는 것을 기준으로 만들어진 것이니 참고하기 바란다. 그리고 원래 내가 사용하는 소스에서 불필요한 부분을 제거하고 넣은 것이라 print*** 함수 같은 부분이 잘못 되었을 수 있는데 오류가 난다면 관련 부분을 모두 제거하면 된다.]]></summary><content type="html"><![CDATA[<p><a href="http://nginx.org/">Nginx</a>는 <a href="https://ko.wikipedia.org/wiki/Nginx">위키피디아</a>에서 아래와 같이 설명하고 있다.</p>
<blockquote>
<p>Nginx(엔진 x라 읽는다)는 웹 서버 소프트웨어로, 가벼움과 높은 성능을 목표로 한다. 웹 서버, 리버스 프록시 및 메일 프록시 기능을 가진다.</p>
<p>Netcraft의 2011년 1월 웹서버 설문조사에 따르면, nginx는 전체 도메인에서 4번째(7.50%)로 많이 쓰이는 웹서버이며, 활성화된 웹 사이트에 대한 통계에서도 역시 4번째(8.23%)로 많이 사용된다[1].</p>
<p>Nginx는 요청에 응답하기 위해 비동기 이벤트 기반 구조를 가진다. 이것은 아파치 HTTP 서버의 스레드/프로세스 기반 구조를 가지는 것과는 대조적이다. 이러한 구조는 서버에 많은 부하가 생길 경우의 성능을 예측하기 쉽게 해준다.</p>
</blockquote>
<p>기존에는 Apache를 사용하고 있었다. Apache의 다양한 기능 때문이라기 보다는 익숙함 때문이었다. 그런데 예전부터 <a href="http://nginx.org/">Nginx</a>에 대한 사람들의 평가(Apache의 튜닝 상태에 따라 다른 결과를 보이기도 한다)를 볼 때마다 언젠가는 갈아타야지 싶었는데 최근에야 이 생각을 실천하게 되었다. 그레서 <a href="http://nginx.org/">Nginx</a>를 설치하는 과정을 정리하고자 한다.</p>
<hr />
<p>CentOS에서 Nginx의 설치는 크게 소스를 컴파일해서 설치하는 방법과 YUM을 통해 설치하는 방법이 있다. Nginx의 경우 Apache와 다르게 모듈을 추가할 경우엔 무조건 소스 설치를 해야한다(모듈을 포함시켜 컴파일 해야 한다). 따라서 mod_pagespeed나 pagespeed 등을 사용하고자 하는 경우에는 소스 설치를 해야 한다. 오늘은 YUM 설치를 기준으로 설명하고자 하니 모듈을 추가해서 설치하는 방법은 아래의 링크들을 참고하자.</p>
<ul>
<li><a href="http://www.nginxtips.com/how-to-install-mod_security-on-nginx/">How to install Mod_Security on Nginx</a>
<a href="https://developers.google.com/speed/pagespeed/module/build_ngx_pagespeed_from_source">Build ngx_pagespeed From Source</a></li>
<li><a href="http://d2.naver.com/helloworld/192785">NGINX 모듈 제작하기</a></li>
</ul>
<p>사실 기본적인 설치는 <a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/install/">공식 메뉴얼</a>에 아주 잘 설명되어 있고 간단하다. 내용을 옮겨 적자면 아래와 같다.</p>
<p><code>/etc/yum.repos.d/nginx.repo</code> 파일을 생성해서 아래의 내용을 넣는다.</p>
<pre><code>[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/$releasever/$basearch/
gpgcheck=0
enabled=1</code></pre>
<p>그리고는 아래와 같이 yum 으로 설치한다.</p>
<pre class="hljs bash">sudo yum install nginx</pre>
<p>혹시 EPEL을 이용해서 설치하고 싶다면 <code>/etc/yum.repos.d/nginx.repo</code> 파일을 생성할 필요없이 아래와 같이하면 된다.</p>
<pre class="hljs bash">sudo yum install epel-release
sudo yum install nginx</pre>
<p>끝이다. 정말 간단하다. 설명할 것도 없다. 하지만 사실 이 글을 적는 이유는 이제부터다.</p>
<p>Nginx는 기본적으로 두가지 버전이 존재한다. stable 버전과 mainline 버전이다. 사실상 최신 버전은 mainline 이다. 2015-11-27일 기준으로 stable은 nginx-1.8.0, mainline은 1.9.7이다. 말그대로 stable 버전이 안정 버전이므로 사용이 권장되기는 하나 mainline도 불안정한 것은 아니다.</p>
<p><a href="http://serverfault.com/a/715126">What’s the difference between the “mainline” and “stable” branches of nginx?</a>의 설명대로라면 mainline을 더 권장한다. stable 버전이라고 버그가 없는 것이 아니며 버그 패치는 mainline에 먼저 된다는 이유 때문이다.</p>
<p>그래서 나는 mainline으로 설치하기로 했다. 설치 방법은 위의 stable과 별반 다르지 않으나 repository의 url만 차이가 난다.</p>
<p><code>/etc/yum.repos.d/nginx.repo</code> 파일을 생성해서 아래의 내용을 넣는다.</p>
<pre><code>[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/mainline/centos/\$releasever/\$basearch/
gpgcheck=0
enabled=1</code></pre>
<p>그리고는 아래와 같이 yum 으로 설치한다.</p>
<pre class="hljs bash">sudo yum install nginx</pre>
<p>이것 또한 아주 간단하다. 약간의 부가 작업을 포함해서 bash shell 스크립트를 하나 만들어 뒀다.</p>
<p>nginx.install.sh</p>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>
<span class="hljs-keyword">function</span> printTitle {
    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[1;97m=======================================\e[0m"</span>
    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[1;97m* <span class="hljs-variable">$1</span>\e[0m"</span>
    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[1;97m=======================================\e[0m"</span>
}

<span class="hljs-keyword">function</span> printJob {
    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[94m* <span class="hljs-variable">$1</span>\e[0m"</span>
}

<span class="hljs-keyword">function</span> printSubJob {
    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">"\e[96m\t<span class="hljs-variable">$1</span>\e[0m"</span>
}

printTitle <span class="hljs-string">"Nginx 설치"</span>

printJob <span class="hljs-string">"httpd.service 종료"</span>
systemctl stop httpd.service

printJob <span class="hljs-string">"httpd.service 제거"</span>
yum remove -y httpd
systemctl <span class="hljs-built_in">disable</span> httpd.service

printJob <span class="hljs-string">"Nginx 설치"</span>
<span class="hljs-keyword">if</span> [ ! -e /etc/yum.repos.d/nginx.repo ]; <span class="hljs-keyword">then</span>
    printSubJob <span class="hljs-string">"nginx repository 추가"</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-string">"[nginx]"</span> &gt; /etc/yum.repos.d/nginx.repo
    <span class="hljs-built_in">echo</span> <span class="hljs-string">"name=nginx repo"</span> &gt;&gt; /etc/yum.repos.d/nginx.repo
    <span class="hljs-built_in">echo</span> <span class="hljs-string">"baseurl=http://nginx.org/packages/mainline/centos/\$releasever/\$basearch/"</span> &gt;&gt; /etc/yum.repos.d/nginx.repo
    <span class="hljs-comment">#echo "baseurl=http://nginx.org/packages/centos/\$releasever/\$basearch/" &gt;&gt; /etc/yum.repos.d/nginx.repo</span>
    <span class="hljs-built_in">echo</span> <span class="hljs-string">"gpgcheck=0"</span> &gt;&gt; /etc/yum.repos.d/nginx.repo
    <span class="hljs-built_in">echo</span> <span class="hljs-string">"enabled=1"</span> &gt;&gt; /etc/yum.repos.d/nginx.repo
<span class="hljs-keyword">fi</span>

printSubJob <span class="hljs-string">"nginx package 설치"</span>
yum install -y nginx

printJob <span class="hljs-string">"Nginx 서비스 활성"</span>
systemctl <span class="hljs-built_in">enable</span> nginx.service

printJob <span class="hljs-string">"Nginx 서비스 시작"</span>
systemctl start nginx.service

printJob <span class="hljs-string">"방화벽 설정"</span>
<span class="hljs-keyword">if</span> [ `firewall-cmd --zone=public --list-all|grep <span class="hljs-string">"services"</span>|grep <span class="hljs-string">"http"</span> | wc -l` -eq 0 ]; <span class="hljs-keyword">then</span>
    printSubJob <span class="hljs-string">"http/https 개방"</span>
    firewall-cmd --permanent --zone=public --add-service=http
    firewall-cmd --permanent --zone=public --add-service=https

    printSubJob <span class="hljs-string">"방화벽 rule reload"</span>
    firewall-cmd --reload
<span class="hljs-keyword">fi</span></pre>
<p>위 소스는 CentOS 7에서 firewalld를 사용하는 것을 기준으로 만들어진 것이니 참고하기 바란다. 그리고 원래 내가 사용하는 소스에서 불필요한 부분을 제거하고 넣은 것이라 <code>print***</code> 함수 같은 부분이 잘못 되었을 수 있는데 오류가 난다면 관련 부분을 모두 제거하면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/25/protobuf-protocol-buffers/</id><title type="html">protobuf (Protocol Buffers)를 PHP에서 사용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/25/protobuf-protocol-buffers/"/><published>2015-11-25T19:53:52+09:00</published><updated>2015-11-25T19:53:52+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Protocol Buffers는 무엇일까? 공식 사이트에서 아래와 같이 설명하고 있다. Protocol buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data. 간단히 말하면 언어와 플랫폼에 중립적이며 확장 가능한 구조화된 데이터 직렬화 도구라고 할 수 있겠다. XML과 유사하지만 더 작고, 더 빠르며, 더 단순하다고 소개하고 있다. 이번 글에서는 Protocol Buffers 자체에 대한 연구가 목적이 아니므로 참고할 만한 글을 아래에 소개하는 것으로 자세한 설명을 대체한다. Protocol Buffers Developer Guide Benchmark comparing serialization libraries on the JVM Tips - C++, C#, protobuf, JSON직렬화 성능 얼마나 차이날까? Google Protocol Buffers 기본 사용법 구글 프로토콜 버퍼 (Google Protocl Buffer) 본론으로 들어가자면 이번에 개인적인 작업을 하는 과정에서 Protocol Buffers를 사용할 일이 생겼다. 정확히 이야기하자면 Google Play를 대상으로 몇가지 실험을 하고 있다. 그런데 이 작업을 하다보니 Google Play 서버와 통신을 하려면 Protocol Buffers를 사용 해야만 했다. Protocol Buffers가 너무 길어서 이하에서는 그냥 PB라고 하겠다. 이번 작업에 필요한 몇가지 요소들을 지원하는 오픈소스 라이브러리들이 몇가지 있었으나 개발이 오래동안 멈춰진 것들이 대부분이라 기존 오픈소스들을 참고해서 직접 구현하기로 했다(사실 이 부분이 나의 최대 실수다. 생각보다 작업이 만만치 않아 시간을 많이 소요했다). 기존 오픈소스들은 java와 python, ruby로 구성된 것이 많았다. 그런데 나는 PHP로 구성하고 싶었다. 지금 생각하면 왜 그런 결정을 했는지 모르겠다. python이야 아직 익숙치 않아 패스하더라도 java로 작업하면 생각보다 빠르게 작업이 완료될 수 있었는데... 이야기가 갑자기 옆으로 샜는데 다시 본론으로... 어쨌든 PHP로 PB를 사용하는 것부터 시작해야 했다. 그런데 PB는 기본적으로 C++, JAVA, PYTHON을 지원한다. PHP를 공식 지원하지 않으므로 지원 라이브러리부터 찾아야 한다. 아래의 사이트들을 참고하자. 이 외에도 찾아보면 여러가지가 있다. Using Google Protcol Buffers with PHP and protoc-gen-php Php Trends.com : protobuf PHP에서 PB를 사용하는 오픈소스 중 그런대로 가장 이름이 알려진 프로젝트는 drslump/Protobuf-PHP 였다(주관적인 생각이다). 그런데 설치 과정과 사용법이 간단하게 설명되어 있었지만 실제로는 그리 간단하지 않았다. 그래서 일단 접어두고 다른 라이브러리들도 하나씩 테스트 했다. 두서없이 작업하다보니 일일이 기록을 남기지 못했다. 잘 정리해 두었다면 비교에 도움이 되었을텐데 그 당시에는 정신이 없었다. 생각대로 되지 않아 닥치는대로 막 적용을 해보고 있었던지라. 결국 현재는 chobie/protoc-gen-php로 정착했다. 사실 이 라이브러리도 문제가 많긴하다. php에 모듈을 별도 설치해야하고 기타 의존 라이브러리도 설치해야 한다(간단하게 사용하려고 php를 선택한 것인데). 그리고 이 라이브러리는 PECL:protocolbuffers에 등록되어 있어서 PECL을 사용해 설치도 가능하다. 하지만 나는 직접 설치했다. 이 라이브러리가 업데이트가 된지 오래되서 오류가 있는 부분을 몇가지 수정해서 사용하게 되면서 모듈을 그대로 사용할 수 없었다. 아래는 사용에 필요한 모듈들을 설치하는 과정을 bash shell로 작성해 둔 것이다. 실제 사용시에는 자신의 환경에 맞춰서 사용하면 된다. #!/bin/bash su -c "yum install -y php56w-mbstring php56w-bcmath" # protobuf 설치 # https://github.com/chobie/protoc-gen-php su -c "yum install -y protobuf-compiler" # https://github.com/chobie/php-protocolbuffers cd libs/bin/ git clone https://github.com/chobie/php-protocolbuffers.git cd php-protocolbuffers su -c "yum install -y php56w-devel" phpize ./configure make su -c "make install ; echo \"extension=protocolbuffers.so\" >> /etc/php.ini" 아래는 composer.json 설정 부분이다. { "require": { "asamaru7/protoc-gen-php": "~0.1.1" } } 갑자기 모듈명이 asamaru7로 변경된 것에 유의하자. chobie/protoc-gen-php의 fork 프로젝트에서 변경 부분을 내가 따로 fork한 프로젝트에 merge하고 내가 필요한 부분을 수정해서 Packagist에 등록했다. 다음으로 proto 파일로 실제 php 파일을 만드는 과정이다. protoc \ --plugin=protoc-gen-php='../vendor/asamaru7/protoc-gen-php/bin/protoc-gen-php' \ --proto_path='/home/web/project/libs/protobuf/' \ --php_out=':../Class/Protobuf' \ '/home/web/project/libs/protobuf/logs.proto' 이상하게 --proto_path를 사용함에도 full path를 지정해만 정상적으로 생성이 된다. 자주 사용할 부분이 아니므로 일단 패스했다. 마지막으로 php에서의 사용. $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, "https://android.clients.google.com/~~"); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_POSTFIELDS, $request->serializeToString()); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($ch, CURLOPT_HTTPHEADER, [ "Content-type: application/x-protobuffer" ]); $content = curl_exec($ch); curl_close($ch); $request->serializeToString() 이 부분이 중요한 부분이다. $request는 protoc에 의해 생성된 class의 인스턴스다. 전송시에는 serializeToString()를 사용해서 직렬화하는 것이다. 다음은 수신시. $response = \Response::parseFromString($content); parseFromString()를 사용해서 수신된 PB 직렬화 데이터를 역직렬화 할 수 있다. 그런데 가급적 PHP에서는 PB를 사용하지 말자. "이제까지 사용 방법을 설명해놓고 이게 무슨 말이야?"라고 생각할 수 있는데 이유를 설명하겠다. 이번에 설명한 라이브러리뿐 아니라 drslump/Protobuf-PHP 외에도 테스트한 모든 라이브러리가 group type을 지원하지 않는다. PB v2에서 deprecated 된 type이긴 하지만 Google Play에서는 group type을 사용하고 있었다. 다행히 내가 하고자하는 부분에서는 group이 필요없어서 proto 파일에서 제거하고 작업했지만 group type을 사용하게 되면 오류가 난다. 내가 테스트 해보지 못한 라이브러리에서 지원하는 것이 있을지는 모르겠지만 내가 본 것은 없다. 또한 int의 길이 문제과 같이 데이터 타입에 대한 처리에 신경을 써줘야하는 부분들이 있다. pure php로 만들어진 라이브러리가 아닌 이상 어짜피 외부 모듈의 설치가 필요하니 아예 이 부분을 python이나 java로 처리하는게 나을지도 모른다. 게다가 pure php로 제작된 모듈은 성능 상의 문제에 대한 이야기도 있다(어짜피 나의 경우는 성능은 중요하지 않은 경우이지만). 그 외에도 작업중에 PB 때문에 고생한 것을 생각하면... 정말 권하고 싶지 않다. 사실 내가 사용을 잘못해서 그런 것일 수 있지만... 어쨌든 JSON 등에 비해 PHP에서의 이득은 없는 것 같다. 그럼에도 나의 경우처럼 상대 서버가 PB를 사용해서 어쩔 수 없다면 위 글을 참고하길 바란다. 이번 작업에 대해서는 자세히 설명하고자 하면 너무 길어져서 중간중간 필요한 부분만 적었다. 그러다 보니 "이게 무슨 말인가?"라는 생각이 들 수 있는데 양해 바란다. 이해가 안되는 부분은 질문한다면 따로 설명하도록 하겠다.]]></summary><content type="html"><![CDATA[<p><a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a>는 무엇일까?
공식 사이트에서 아래와 같이 설명하고 있다.</p>
<blockquote>
<p>Protocol buffers are a language-neutral, platform-neutral extensible mechanism for serializing structured data.</p>
</blockquote>
<p>간단히 말하면 언어와 플랫폼에 중립적이며 확장 가능한 구조화된 데이터 직렬화 도구라고 할 수 있겠다. XML과 유사하지만 더 작고, 더 빠르며, 더 단순하다고 소개하고 있다.</p>
<p>이번 글에서는 <a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a> 자체에 대한 연구가 목적이 아니므로 참고할 만한 글을 아래에 소개하는 것으로 자세한 설명을 대체한다.</p>
<ul>
<li>
<p><a href="https://developers.google.com/protocol-buffers/docs/overview">Protocol Buffers Developer Guide</a></p>
</li>
<li>
<p><a href="https://github.com/eishay/jvm-serializers/wiki">Benchmark comparing serialization libraries on the JVM</a></p>
</li>
<li>
<p><a href="http://www.cgcii.co.kr/index.php?document_srl=2017&amp;mid=board_eLHH13">Tips - C++, C#, protobuf, JSON직렬화 성능 얼마나 차이날까?</a></p>
</li>
<li>
<p><a href="http://egloos.zum.com/javawork/v/2720889">Google Protocol Buffers 기본 사용법</a></p>
</li>
<li>
<p><a href="http://knight76.tistory.com/1366">구글 프로토콜 버퍼 (Google Protocl Buffer)</a></p>
</li>
</ul>
<hr />
<p>본론으로 들어가자면 이번에 개인적인 작업을 하는 과정에서 <a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a>를 사용할 일이 생겼다. 정확히 이야기하자면 Google Play를 대상으로 몇가지 실험을 하고 있다. 그런데 이 작업을 하다보니 Google Play 서버와 통신을 하려면 <a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a>를 사용 해야만 했다. <a href="https://developers.google.com/protocol-buffers/">Protocol Buffers</a>가 너무 길어서 이하에서는 그냥 PB라고 하겠다.</p>
<p>이번 작업에 필요한 몇가지 요소들을 지원하는 오픈소스 라이브러리들이 몇가지 있었으나 개발이 오래동안 멈춰진 것들이 대부분이라 기존 오픈소스들을 참고해서 직접 구현하기로 했다(사실 이 부분이 나의 최대 실수다. 생각보다 작업이 만만치 않아 시간을 많이 소요했다). 기존 오픈소스들은 java와 python, ruby로 구성된 것이 많았다. 그런데 나는 PHP로 구성하고 싶었다. 지금 생각하면 왜 그런 결정을 했는지 모르겠다. python이야 아직 익숙치 않아 패스하더라도 java로 작업하면 생각보다 빠르게 작업이 완료될 수 있었는데... 이야기가 갑자기 옆으로 샜는데 다시 본론으로...</p>
<p>어쨌든 PHP로 PB를 사용하는 것부터 시작해야 했다. 그런데 PB는 기본적으로 C++, JAVA, PYTHON을 지원한다. PHP를 공식 지원하지 않으므로 지원 라이브러리부터 찾아야 한다.</p>
<p>아래의 사이트들을 참고하자. 이 외에도 찾아보면 여러가지가 있다.</p>
<ul>
<li><a href="http://stuporglue.org/using-google-protcol-buffers-with-php-and-protoc-gen-php/">Using Google Protcol Buffers with PHP and protoc-gen-php</a></li>
<li><a href="http://phptrends.com/dig_in/protobuf">Php Trends.com : protobuf</a></li>
</ul>
<p>PHP에서 PB를 사용하는 오픈소스 중 그런대로 가장 이름이 알려진 프로젝트는 <a href="https://github.com/drslump/Protobuf-PHP">drslump/Protobuf-PHP</a> 였다(주관적인 생각이다). 그런데 설치 과정과 사용법이 간단하게 설명되어 있었지만 실제로는 그리 간단하지 않았다. 그래서 일단 접어두고 다른 라이브러리들도 하나씩 테스트 했다. 두서없이 작업하다보니 일일이 기록을 남기지 못했다. 잘 정리해 두었다면 비교에 도움이 되었을텐데 그 당시에는 정신이 없었다. 생각대로 되지 않아 닥치는대로 막 적용을 해보고 있었던지라.</p>
<p>결국 현재는 <a href="https://github.com/chobie/protoc-gen-php">chobie/protoc-gen-php</a>로 정착했다. 사실 이 라이브러리도 문제가 많긴하다. php에 모듈을 별도 설치해야하고 기타 의존 라이브러리도 설치해야 한다(간단하게 사용하려고 php를 선택한 것인데). 그리고 이 라이브러리는 <a href="https://pecl.php.net/package/protocolbuffers">PECL:protocolbuffers</a>에 등록되어 있어서 PECL을 사용해 설치도 가능하다. 하지만 나는 직접 설치했다. 이 라이브러리가 업데이트가 된지 오래되서 오류가 있는 부분을 몇가지 수정해서 사용하게 되면서 모듈을 그대로 사용할 수 없었다.</p>
<p>아래는 사용에 필요한 모듈들을 설치하는 과정을 bash shell로 작성해 둔 것이다. 실제 사용시에는 자신의 환경에 맞춰서 사용하면 된다.</p>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash
</span>
su -c <span class="hljs-string">"yum install -y php56w-mbstring php56w-bcmath"</span>

<span class="hljs-comment"># protobuf 설치</span>
<span class="hljs-comment"># https://github.com/chobie/protoc-gen-php</span>
su -c <span class="hljs-string">"yum install -y protobuf-compiler"</span>

<span class="hljs-comment"># https://github.com/chobie/php-protocolbuffers</span>
<span class="hljs-built_in">cd</span> libs/bin/
git <span class="hljs-built_in">clone</span> https://github.com/chobie/php-protocolbuffers.git
<span class="hljs-built_in">cd</span> php-protocolbuffers
su -c <span class="hljs-string">"yum install -y php56w-devel"</span>
phpize
./configure
make
su -c <span class="hljs-string">"make install ; echo \"extension=protocolbuffers.so\" &gt;&gt; /etc/php.ini"</span></pre>
<p>아래는 composer.json 설정 부분이다.</p>
<pre class="hljs json">{
  <span class="hljs-attr">"require"</span>: {
    <span class="hljs-attr">"asamaru7/protoc-gen-php"</span>: <span class="hljs-string">"~0.1.1"</span>
  }
}</pre>
<p>갑자기 모듈명이 asamaru7로 변경된 것에 유의하자. <a href="https://github.com/chobie/protoc-gen-php">chobie/protoc-gen-php</a>의 fork 프로젝트에서 변경 부분을 내가 따로 fork한 프로젝트에 merge하고 내가 필요한 부분을 수정해서 <a href="https://packagist.org/packages/asamaru7/protoc-gen-php">Packagist</a>에 등록했다.</p>
<p>다음으로 proto 파일로 실제 php 파일을 만드는 과정이다.</p>
<pre class="hljs bash">protoc \
    --plugin=protoc-gen-php=<span class="hljs-string">'../vendor/asamaru7/protoc-gen-php/bin/protoc-gen-php'</span> \
    --proto_path=<span class="hljs-string">'/home/web/project/libs/protobuf/'</span> \
    --php_out=<span class="hljs-string">':../Class/Protobuf'</span> \
    <span class="hljs-string">'/home/web/project/libs/protobuf/logs.proto'</span></pre>
<p>이상하게 <code>--proto_path</code>를 사용함에도 full path를 지정해만 정상적으로 생성이 된다. 자주 사용할 부분이 아니므로 일단 패스했다.</p>
<p>마지막으로 php에서의 사용.</p>
<pre class="hljs php">$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, <span class="hljs-string">"https://android.clients.google.com/~~"</span>);
curl_setopt($ch, CURLOPT_HEADER, <span class="hljs-number">0</span>);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);
curl_setopt($ch, CURLOPT_POST, <span class="hljs-number">1</span>);
curl_setopt($ch, CURLOPT_POSTFIELDS, $request-&gt;serializeToString());
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="hljs-keyword">true</span>);
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="hljs-number">0</span>);
curl_setopt($ch, CURLOPT_HTTPHEADER, [
    <span class="hljs-string">"Content-type: application/x-protobuffer"</span>
]);
$content = curl_exec($ch);
curl_close($ch);</pre>
<p><code>$request-&gt;serializeToString()</code> 이 부분이 중요한 부분이다. <code>$request</code>는 protoc에 의해 생성된 class의 인스턴스다. 전송시에는 <code>serializeToString()</code>를 사용해서 직렬화하는 것이다.</p>
<p>다음은 수신시.</p>
<pre class="hljs php">$response = \Response::parseFromString($content);</pre>
<p><code>parseFromString()</code>를 사용해서 수신된 PB 직렬화 데이터를 역직렬화 할 수 있다.</p>
<hr />
<p>그런데 가급적 PHP에서는 PB를 사용하지 말자. &quot;이제까지 사용 방법을 설명해놓고 이게 무슨 말이야?&quot;라고 생각할 수 있는데 이유를 설명하겠다.</p>
<p>이번에 설명한 라이브러리뿐 아니라 <a href="https://github.com/drslump/Protobuf-PHP">drslump/Protobuf-PHP</a> 외에도 테스트한 모든 라이브러리가 group type을 지원하지 않는다. PB v2에서 deprecated 된 type이긴 하지만 Google Play에서는 group type을 사용하고 있었다. 다행히 내가 하고자하는 부분에서는 group이 필요없어서 proto 파일에서 제거하고 작업했지만 group type을 사용하게 되면 오류가 난다. 내가 테스트 해보지 못한 라이브러리에서 지원하는 것이 있을지는 모르겠지만 내가 본 것은 없다. 또한 int의 길이 문제과 같이 데이터 타입에 대한 처리에 신경을 써줘야하는 부분들이 있다.</p>
<p>pure php로 만들어진 라이브러리가 아닌 이상 어짜피 외부 모듈의 설치가 필요하니 아예 이 부분을 python이나 java로 처리하는게 나을지도 모른다. 게다가 pure php로 제작된 모듈은 성능 상의 문제에 대한 이야기도 있다(어짜피 나의 경우는 성능은 중요하지 않은 경우이지만).</p>
<p>그 외에도 작업중에 PB 때문에 고생한 것을 생각하면... 정말 권하고 싶지 않다. 사실 내가 사용을 잘못해서 그런 것일 수 있지만... 어쨌든 JSON 등에 비해 PHP에서의 이득은 없는 것 같다.</p>
<p>그럼에도 나의 경우처럼 상대 서버가 PB를 사용해서 어쩔 수 없다면 위 글을 참고하길 바란다.</p>
<hr />
<p>이번 작업에 대해서는 자세히 설명하고자 하면 너무 길어져서 중간중간 필요한 부분만 적었다. 그러다 보니 &quot;이게 무슨 말인가?&quot;라는 생각이 들 수 있는데 양해 바란다. 이해가 안되는 부분은 질문한다면 따로 설명하도록 하겠다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/24/swift-background-threads-gcd-grand-central-dispatch/</id><title type="html">Swift : Async - Background Threads - GCD(Grand Central Dispatch)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/24/swift-background-threads-gcd-grand-central-dispatch/"/><published>2015-11-24T07:35:18+09:00</published><updated>2015-11-24T07:35:18+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="swift" label="swift" /><category term="ios" label="ios" /><summary><![CDATA[오늘은 swift에 비동기 처리에 사용하는 Async라는 라이브러리를 소개하고자 한다. Async는 "Syntactic sugar in Swift for asynchronous dispatches in Grand Central Dispatch"라고 소개되어 있다. Async를 소개하기 전에 swift에서의 기본적인 비동기 처리에 대해 먼저 설명한다. swift는 비동기(Asynchronous) 처리에 사용하는 GCD(Grand Central Dispatch)를 사용할 수 있다. GCD(Grand Central Dispatch)는 C로 구성된 스레드 관리 기술로 iOS4 부터 지원한다. NSThread, NSOperation 보다 쉽게 쉽게 사용할 수 있다. 스레드는 다양한 병렬 작업에 사용하지만 특히 앱 개발시에는 더욱 자주 사용하게 된다. 안드로이드와 iOS는 UI처리 등의 앱의 실행을 main 스레드에서 처리한다. 그런데 이 main 스레드에서 무거운 작업을 하게 된다면 UI의 갱신이 지연되므로 화면의 멈춤 현상이 발생한다. 특히 안드로이드의 경우는 main 스레드에서 네트워크 처리 등을 할 수 없도록 제한이 걸려있다(제한을 풀 수 있으나 ANR 문제 등으로 결국은 사용하지 못하는 것과 같다). 이러한 문제를 해결하기 위해서는 스레드의 사용이 필수다. 그럼 GCD(Grand Central Dispatch)에 대해서 알아보자. GCD는 기본적으로 아래의 queue를 가지고 있다. Main: tasks execute serially on your application’s main thread Concurrent: tasks are dequeued in FIFO order, but run concurrently and can finish in any order. Serial: tasks execute one at a time in FIFO order GCD에 대한 자세한 설명은 워낙에 많으니 자세히 설명하지 않고 간단한 예시만 보여주고자 한다. 일단 swift 이전에 objective-c에서는 아래와 같이 사용한다. dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{ // do some task dispatch_async(dispatch_get_main_queue(), ^{ // update some UI }); }); 동일한 동작을 swift에서 사용하면 아래와 같다. let priority = DISPATCH_QUEUE_PRIORITY_DEFAULT dispatch_async(dispatch_get_global_queue(priority, 0)) { // do some task dispatch_async(dispatch_get_main_queue()) { // update some UI } } block object의 표현만 차이가 날 뿐 사실상 거의 차이가 없다. 위 코드를 간단히 설명하자면 global queue에서 작업을 수행하고 main queue에서 UI 변경 작업을 하도록 한 코드다. 뭐 크게 사용이 어렵지도 않고 크게 불편하지는 않다. 하지만 이런 과정을 더욱 쉽게 구성할 수 있도록 도와주는 것이 Async다. 상세한 예시는 해당 사이트를 방문하면 다양하게 소개하고 있다. 그 중에서 Async의 장점을 잘 보여주는 예시를 하나 소개한다. let seconds = 0.5 Async.main(after: seconds) { println("Is called after 0.5 seconds") }.background(after: 0.4) { println("At least 0.4 seconds after previous block, and 0.9 after Async code is called") } "Is called after 0.5 seconds" 메시지를 main 스레드에서 0.5초 뒤에 출력한 후 0.4초 뒤 background 스레드에서 "At least 0.4 seconds after previous block, and 0.9 after Async code is called"를 출력하는 예시다. 이 예시를 보면 알 수 있듯이 Async는 chaining을 지원하며 스레드를 작업 완료에 따라 순차적으로 실행 할 수 있도록 도와준다. 스레드 작업을 취소하는 예시 하나만 더 아래에 소개한다. // Cancel blocks not yet dispatched let block1 = Async.background { // Heavy work for i in 0...1000 { println("A \(i)") } } let block2 = block1.background { println("B – shouldn't be reached, since cancelled") } Async.main { // Cancel async to allow block1 to begin block1.cancel() // First block is _not_ cancelled block2.cancel() // Second block _is_ cancelled } 위에서 소개한 것처럼 Async는 swift에서의 thread 작업을 아주 쉽게 할 수 있도록 도와준다. 한가지 라이브러리를 더 소개하자면 위 라이브러리와는 성격이 조금 다르지만 안드로이드의 AsyncTask 같은 작업이 필요하다면 SwiftTask를 참고해보면 도움이 될 것 같다. SwiftTask는 "Promise + progress + pause + cancel + retry for Swift."라고 소개하고 있다.]]></summary><content type="html"><![CDATA[<p>오늘은 swift에 비동기 처리에 사용하는 <a href="https://github.com/duemunk/Async">Async</a>라는 라이브러리를 소개하고자 한다. <a href="https://github.com/duemunk/Async">Async</a>는 &quot;Syntactic sugar in Swift for asynchronous dispatches in Grand Central Dispatch&quot;라고 소개되어 있다. <a href="https://github.com/duemunk/Async">Async</a>를 소개하기 전에 swift에서의 기본적인 비동기 처리에 대해 먼저 설명한다.</p>
<p>swift는 비동기(Asynchronous) 처리에 사용하는 <a href="https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/">GCD(Grand Central Dispatch)</a>를 사용할 수 있다. GCD(Grand Central Dispatch)는 C로 구성된 스레드 관리 기술로 iOS4 부터 지원한다. NSThread, NSOperation 보다 쉽게 쉽게 사용할 수 있다.</p>
<p>스레드는 다양한 병렬 작업에 사용하지만 특히 앱 개발시에는 더욱 자주 사용하게 된다. 안드로이드와 iOS는 UI처리 등의 앱의 실행을 main 스레드에서 처리한다. 그런데 이 main 스레드에서 무거운 작업을 하게 된다면 UI의 갱신이 지연되므로 화면의 멈춤 현상이 발생한다. 특히 안드로이드의 경우는 main 스레드에서 네트워크 처리 등을 할 수 없도록 제한이 걸려있다(제한을 풀 수 있으나 ANR 문제 등으로 결국은 사용하지 못하는 것과 같다). 이러한 문제를 해결하기 위해서는 스레드의 사용이 필수다.</p>
<p>그럼 <a href="https://developer.apple.com/library/ios/documentation/Performance/Reference/GCD_libdispatch_Ref/">GCD(Grand Central Dispatch)</a>에 대해서 알아보자.</p>
<p>GCD는 기본적으로 아래의 queue를 가지고 있다.</p>
<ul>
<li>
<p><strong>Main</strong>: tasks execute serially on your application’s main thread</p>
</li>
<li>
<p><strong>Concurrent</strong>: tasks are dequeued in FIFO order, but run concurrently and can finish in any order.</p>
</li>
<li>
<p><strong>Serial</strong>: tasks execute one at a time in FIFO order</p>
</li>
</ul>
<p>GCD에 대한 자세한 설명은 워낙에 많으니 자세히 설명하지 않고 간단한 예시만 보여주고자 한다.</p>
<p>일단 swift 이전에 objective-c에서는 아래와 같이 사용한다.</p>
<pre class="hljs objectivec"><span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="hljs-number">0</span>), ^{
    <span class="hljs-comment">// do some task</span>
    <span class="hljs-built_in">dispatch_async</span>(dispatch_get_main_queue(), ^{
        <span class="hljs-comment">// update some UI</span>
    });
});</pre>
<p>동일한 동작을 swift에서 사용하면 아래와 같다.</p>
<pre class="hljs swift"><span class="hljs-keyword">let</span> priority = <span class="hljs-type">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>
dispatch_async(dispatch_get_global_queue(priority, <span class="hljs-number">0</span>)) {
    <span class="hljs-comment">// do some task</span>
    dispatch_async(dispatch_get_main_queue()) {
        <span class="hljs-comment">// update some UI</span>
    }
}</pre>
<p>block object의 표현만 차이가 날 뿐 사실상 거의 차이가 없다.</p>
<p>위 코드를 간단히 설명하자면 global queue에서 작업을 수행하고 main queue에서 UI 변경 작업을 하도록 한 코드다.</p>
<p>뭐 크게 사용이 어렵지도 않고 크게 불편하지는 않다. 하지만 이런 과정을 더욱 쉽게 구성할 수 있도록 도와주는 것이 <a href="https://github.com/duemunk/Async">Async</a>다. 상세한 예시는 해당 사이트를 방문하면 다양하게 소개하고 있다.</p>
<p>그 중에서 Async의 장점을 잘 보여주는 예시를 하나 소개한다.</p>
<pre class="hljs swift"><span class="hljs-keyword">let</span> seconds = <span class="hljs-number">0.5</span>
<span class="hljs-type">Async</span>.main(after: seconds) {
    <span class="hljs-built_in">println</span>(<span class="hljs-string">"Is called after 0.5 seconds"</span>)
}.background(after: <span class="hljs-number">0.4</span>) {
    <span class="hljs-built_in">println</span>(<span class="hljs-string">"At least 0.4 seconds after previous block, and 0.9 after Async code is called"</span>)
}</pre>
<p>&quot;Is called after 0.5 seconds&quot; 메시지를 main 스레드에서 0.5초 뒤에 출력한 후 0.4초 뒤 background 스레드에서 &quot;At least 0.4 seconds after previous block, and 0.9 after Async code is called&quot;를 출력하는 예시다. 이 예시를 보면 알 수 있듯이 <a href="https://github.com/duemunk/Async">Async</a>는 chaining을 지원하며 스레드를 작업 완료에 따라 순차적으로 실행 할 수 있도록 도와준다.</p>
<p>스레드 작업을 취소하는 예시 하나만 더 아래에 소개한다.</p>
<pre class="hljs swift"><span class="hljs-comment">// Cancel blocks not yet dispatched</span>
<span class="hljs-keyword">let</span> block1 = <span class="hljs-type">Async</span>.background {
    <span class="hljs-comment">// Heavy work</span>
    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>...<span class="hljs-number">1000</span> {
        <span class="hljs-built_in">println</span>(<span class="hljs-string">"A <span class="hljs-subst">\(i)</span>"</span>)
    }
}
<span class="hljs-keyword">let</span> block2 = block1.background {
    <span class="hljs-built_in">println</span>(<span class="hljs-string">"B – shouldn't be reached, since cancelled"</span>)
}
<span class="hljs-type">Async</span>.main {
    <span class="hljs-comment">// Cancel async to allow block1 to begin</span>
    block1.cancel() <span class="hljs-comment">// First block is _not_ cancelled</span>
    block2.cancel() <span class="hljs-comment">// Second block _is_ cancelled</span>
}</pre>
<p>위에서 소개한 것처럼 <a href="https://github.com/duemunk/Async">Async</a>는 swift에서의 thread 작업을 아주 쉽게 할 수 있도록 도와준다.</p>
<p>한가지 라이브러리를 더 소개하자면 위 라이브러리와는 성격이 조금 다르지만 안드로이드의 AsyncTask 같은 작업이 필요하다면 <a href="https://github.com/ReactKit/SwiftTask">SwiftTask</a>를 참고해보면 도움이 될 것 같다. <a href="https://github.com/ReactKit/SwiftTask">SwiftTask</a>는 &quot;Promise + progress + pause + cancel + retry for Swift.&quot;라고 소개하고 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/17/octopress-error-pygments-cant-parse-unknown-language/</id><title type="html">Octopress : pygments cant parse unknown language: &lt;/p&gt; 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/17/octopress-error-pygments-cant-parse-unknown-language/"/><published>2015-11-17T14:40:02+09:00</published><updated>2015-11-17T14:40:02+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="octopress" label="octopress" /><summary><![CDATA[Octopress에서 rake generate를 하다보면 아래와 같은 오류를 만나는 경우가 있다. jekyll 2.5.3 | Error: Pygments can't parse unknown language: </p> Pygments는 소스코드 하이라이팅을 해주는 모듈인데 언어를 알 수 없다고 오류를 내는 것이다. markdown에서 소스코드는 ```로 시작하고 그 뒤에 붙여서 언어 종류를 지정할 수 있다(```ruby 와 같이). 위 오류가 발생한다는 것은 여기에 문제가 있다는 것인데 오류 메시지만 보면 어디서 발생하는 것인지 짐작이 안된다. 그래서 최근에 작성한 글을 다 둘러볼 수 밖에 없다. 그래서 찾아봤더니 Octopress Error: Pygments Can’t Parse Unknown Language: </p>라는 글에서 방법을 알려주고 있었다. 정확하게는 오류를 해결해 주는 것이 아니라 위치를 조금 더 찾기 쉽게 해준다. 결론은 plugins/pygments_code.rb을 열어서 다음의 부분을 수정하면 된다(#{code}를 추가하는 것이다). rescue MentosError raise "Pygments can't parse unknown language: #{lang}#{code}." end 이렇게 하면 위 오류가 날 때 해당 코드 영역을 함께 출력해준다. 사실 나의 경우엔 위 오류가 발생하는 경우의 대부분이 "```ruby 파일명" 형식을 사용할 때 발생했다. GFM에서는 이 형식을 지원하기 때문에 간혹 사용하려는데 이게 제대로 해석이 안되는 경우가 많다. 그렇다고 항상 안되는 것도 아니다. 원인은 알 수 없으나 octopress가 이럴 땐 맘에 들지 않는다.]]></summary><content type="html"><![CDATA[<p>Octopress에서 <code>rake generate</code>를 하다보면 아래와 같은 오류를 만나는 경우가 있다.</p>
<pre><code>jekyll 2.5.3 | Error:  Pygments can't parse unknown language: &lt;/p&gt;</code></pre>
<p>Pygments는 소스코드 하이라이팅을 해주는 모듈인데 언어를 알 수 없다고 오류를 내는 것이다. markdown에서 소스코드는 ```로 시작하고 그 뒤에 붙여서 언어 종류를 지정할 수 있다(```ruby 와 같이).</p>
<p>위 오류가 발생한다는 것은 여기에 문제가 있다는 것인데 오류 메시지만 보면 어디서 발생하는 것인지 짐작이 안된다. 그래서 최근에 작성한 글을 다 둘러볼 수 밖에 없다. 그래서 찾아봤더니 <a href="http://reckhhh.github.io/blog/2015/05/01/octopress-error-pygments-cant-parse-unknown-language/">Octopress Error: Pygments Can’t Parse Unknown Language: &lt;/p&gt;</a>라는 글에서 방법을 알려주고 있었다. 정확하게는 오류를 해결해 주는 것이 아니라 위치를 조금 더 찾기 쉽게 해준다.</p>
<p>결론은 <code>plugins/pygments_code.rb</code>을 열어서 다음의 부분을 수정하면 된다(<code>#{code}</code>를 추가하는 것이다).</p>
<pre class="hljs ruby"><span class="hljs-keyword">rescue</span> MentosError
raise <span class="hljs-string">"Pygments can't parse unknown language: <span class="hljs-subst">#{lang}</span><span class="hljs-subst">#{code}</span>."</span>
<span class="hljs-keyword">end</span></pre>
<p>이렇게 하면 위 오류가 날 때 해당 코드 영역을 함께 출력해준다.</p>
<p>사실 나의 경우엔 위 오류가 발생하는 경우의 대부분이 &quot;```ruby 파일명&quot; 형식을 사용할 때 발생했다. GFM에서는 이 형식을 지원하기 때문에 간혹 사용하려는데 이게 제대로 해석이 안되는 경우가 많다. 그렇다고 항상 안되는 것도 아니다. 원인은 알 수 없으나 octopress가 이럴 땐 맘에 들지 않는다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/17/cocoapods-transitive-dependency-with-static-library/</id><title type="html">Cocoapods : Sub Module에서 GoogleMaps 의존성 사용시 Transitive dependency 문제 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/17/cocoapods-transitive-dependency-with-static-library/"/><published>2015-11-17T13:19:25+09:00</published><updated>2015-11-17T13:19:25+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[아래에 설명한 방법을 사용시 런타임시에 문제가 될 수 있어 다른 방법을 찾고 있는 중이니 참고만 하길 바란다. 지난 글 Cocoapods : The 'Pods' target has transitive dependencies that include static binaries 오류에서 언급한 transitive dependencies 문제를 해결하는 방법을 설명하려고 한다. 미리 이야기 하지만 사실 아래의 내용은 아주 깔끔하게 해결하는 방법은 아니다. 정확한 해결이 되려면 CocoaPods에서 정식 지원을 해야 해결될 것으로 보인다. 하지만 임시로라도 사용을 해야 한다면 아래의 내용이 도움이 될지도 모르겠다(어쨌든 난 이렇게 사용중이다). 우선 왜 이 문제를 만나게 되었는지 부터 설명하려고 한다. 지난글에서 설명 했던 것과 같이 Sub Module에서 GoogleMaps에 대한 의존성을 지정 해야하는 상황이 발생했다. 그래서 아래와 같이 podspec 파일을 만들었다. ModuleName.podspec Pod::Spec.new do |s| s.name = 'ModuleName' s.version = '1.0.0' s.license = 'MIT' s.summary = 'ModuleName Summary' s.homepage = 'https://~~~' s.author = { 'ㅇㅇㅇ' => 'nobody@nobody.com' } s.source = { :git => 'https://~~~/ModuleName.git', :tag => s.version } s.ios.deployment_target = '8.0' s.source_files = 'Source/ModuleName/*.swift', 'ModuleName/**/*.swift' s.requires_arc = true s.dependency 'GoogleMaps' end 그런데 [!] The 'Pods' target has transitive dependencies that include static binaries: (/~~~/Pods/GoogleMaps/Frameworks/GoogleMaps.framework) 오류가 발생한다(이전 글에서도 언급했지만 항상 발생하는 것이 아니라 Podfile에서 use_frameworks!를 사용할 경우에 발생한다.). 그래서 Cocoapods : The 'Pods' target has transitive dependencies that include static binaries 오류에서 언급한 것처럼 pre_install을 사용해서 오류는 제거했다. 하지만 실제 작업을 위해 import GoogleMaps를 하면 모듈을 찾지를 못한다. 여기서 부터 삽질이 시작되었다. static binaries를 포함하는 모듈이 아닌 경우 부모 프로젝트(Sub Module을 사용하는)에서 해당 의존성이 지정되어 있다면 바로 import해서 사용이 가능하다(부모 프로젝트의 Podfile에 pod 'GoogleMaps'가 추가되어 있는 경우). 당연히 부모 프로젝트를 열어서 Sub Module을 수정하고 있는 경우를 말한다. 하지만 이 경우는 그것도 안된다(정확한 이유는 아직 모르겠다. static binaries를 포함하고 있어서 그런 것인지 GoogleMaps 모듈이 use_frameworks을 완전하게 지원하지 않아서 인지 명확하지는 않다). 따라서 어떻게 해서든 의존성을 지정해야 한다. 이를 해결하려고 여러가지 시도를 해봤으나 모두 실패했다. 그래서 다른 프로젝트들은 어떻게 해결했나 싶어 github에서 모듈들을 찾아다니다 PXGoogleDirections를 발견했다. 내가 원했던 것처럼 CocoaPods 모듈에서 GoogleMaps에 대한 의존성을 지정한 모듈이다(사실 다른 모듈들도 찾았으니 그냥 dependency를 사용하고 있었다. 이 모듈들은 확인해보니 나처럼 use_frameworks!를 사용하는 상황에서는 동일한 문제가 발생한다). 그래서 PXGoogleDirections의 소스를 조금 둘러보니 GoogleMaps의 소스를 프로젝트 내부에 포함하고 있었다. 사실 이 방법이 외부에서 사용시에는 가장 깔끔한 방법으로 보인다. 하지만 난 이렇게는 하고 싶지 않았다. 그래서 PXGoogleDirections.podspec를 참고해서 여러 번의 시도 끝에 나름의 방법을 찾았다. 결론은 podspec파일을 아래와 같이 설정하면 된다. 단, Cocoapods : The 'Pods' target has transitive dependencies that include static binaries 오류에서 언급한 것처럼 pre_install을 사용해서 오류는 제거해야 한다. ModuleName.podspec Pod::Spec.new do |s| s.name = 'ModuleName' s.version = '1.0.0' s.license = 'MIT' s.summary = 'ModuleName Summary' s.homepage = 'https://~~~' s.author = { 'ㅇㅇㅇ' => 'nobody@nobody.com' } s.source = { :git => 'https://~~~/ModuleName.git', :tag => s.version } s.ios.deployment_target = '8.0' s.source_files = 'Source/ModuleName/*.swift', 'ModuleName/**/*.swift' s.requires_arc = true s.dependency 'GoogleMaps' s.frameworks = "Accelerate", "AVFoundation", "CoreBluetooth", "CoreData", "CoreLocation", "CoreText", "Foundation", "GLKit", "ImageIO", "OpenGLES", "QuartzCore", "Security", "SystemConfiguration", "CoreGraphics", "GoogleMaps" s.resource_bundles = { 'GoogleMaps' => ['$(PODS_ROOT)/GoogleMaps/Frameworks/GoogleMaps.framework/Resources/*.bundle'] } s.vendored_frameworks = "$(PODS_ROOT)/GoogleMaps/Frameworks/GoogleMaps.framework" s.xcconfig = { 'FRAMEWORK_SEARCH_PATHS' => '$(PODS_ROOT)/GoogleMaps/Frameworks' } end 설명하자면 dependency를 통해 의존성을 설정한다. Cocoapods의 특성상 Sub Module의 의존성도 모두 Pods로 통합되어 추가된다(부모 프로젝트에서도 바로 사용 가능하다). 그런데 이렇게만 설정하면 정작 Sub Module에서는 GoogleMaps에 접근할 수 없으므로 관련된 설정을 Pods에 설치된 GoogleMaps에 맞추어준다. frameworks의 경우만 보더라도 GoogleMaps에서 이미 의존성이 다 지정되어 있음에도 불구하고 다시 다 설정해 주어야 한다(GoogleMaps.podspec.json 참고) 어쨌든 이렇게 하면 문제는 해결된다. 서두에서 언급한 것처럼 내가 봐도 깔끔한 해결 방법은 아니다. 하지만 이런 불편함을 감수하고서라도 Sub Module로 분리하고 싶다면 위 방법을 참고하자. 원리를 보면 GoogleMaps가 아닌 다른 모듈(static binaries를 포함하는)도 동일하게 처리할 수 있다. 그리고 일단 Sub Module로 분리해서 사용하다 보면 CocoaPods에서 개선해줄 것으로 생각한다(관련되 Issue가 다수 존재하므로).]]></summary><content type="html"><![CDATA[<p><strong>아래에 설명한 방법을 사용시 런타임시에 문제가 될 수 있어 다른 방법을 찾고 있는 중이니 참고만 하길 바란다.</strong></p>
<p>지난 글 <a href="https://blog.asamaru.net/2015/11/17/cocoapods-the-pods-target-has-transitive-dependencies-that-include-static-binaries/">Cocoapods : The 'Pods' target has transitive dependencies that include static binaries 오류</a>에서 언급한 transitive dependencies 문제를 해결하는 방법을 설명하려고 한다. 미리 이야기 하지만 사실 아래의 내용은 아주 깔끔하게 해결하는 방법은 아니다. 정확한 해결이 되려면 CocoaPods에서 정식 지원을 해야 해결될 것으로 보인다. 하지만 임시로라도 사용을 해야 한다면 아래의 내용이 도움이 될지도 모르겠다(어쨌든 난 이렇게 사용중이다).</p>
<p>우선 왜 이 문제를 만나게 되었는지 부터 설명하려고 한다.
지난글에서 설명 했던 것과 같이 Sub Module에서 GoogleMaps에 대한 의존성을 지정 해야하는 상황이 발생했다. 그래서 아래와 같이 <code>podspec</code> 파일을 만들었다.</p>
<p><strong>ModuleName.podspec</strong></p>
<pre class="hljs ruby">Pod::Spec.new <span class="hljs-keyword">do</span> <span class="hljs-params">|s|</span>
  s.name     = <span class="hljs-string">'ModuleName'</span>
  s.version  = <span class="hljs-string">'1.0.0'</span>
  s.license = <span class="hljs-string">'MIT'</span>
  s.summary  = <span class="hljs-string">'ModuleName Summary'</span>
  s.homepage = <span class="hljs-string">'https://~~~'</span>
  s.author   = { <span class="hljs-string">'ㅇㅇㅇ'</span> =&gt; <span class="hljs-string">'nobody@nobody.com'</span> }
  s.source   = { <span class="hljs-symbol">:git</span> =&gt; <span class="hljs-string">'https://~~~/ModuleName.git'</span>, <span class="hljs-symbol">:tag</span> =&gt; s.version }
  s.ios.deployment_target = <span class="hljs-string">'8.0'</span>
  s.source_files = <span class="hljs-string">'Source/ModuleName/*.swift'</span>, <span class="hljs-string">'ModuleName/**/*.swift'</span>
  s.requires_arc = <span class="hljs-literal">true</span>

  s.dependency <span class="hljs-string">'GoogleMaps'</span>
<span class="hljs-keyword">end</span></pre>
<p>그런데 <code>[!] The 'Pods' target has transitive dependencies that include static binaries: (/~~~/Pods/GoogleMaps/Frameworks/GoogleMaps.framework)</code> 오류가 발생한다(<strong>이전 글에서도 언급했지만 항상 발생하는 것이 아니라 Podfile에서 <code>use_frameworks!</code>를 사용할 경우에 발생한다.</strong>). 그래서 <a href="https://blog.asamaru.net/2015/11/17/cocoapods-the-pods-target-has-transitive-dependencies-that-include-static-binaries/">Cocoapods : The 'Pods' target has transitive dependencies that include static binaries 오류</a>에서 언급한 것처럼 <code>pre_install</code>을 사용해서 오류는 제거했다. 하지만 실제 작업을 위해 <code>import GoogleMaps</code>를 하면 모듈을 찾지를 못한다. 여기서 부터 삽질이 시작되었다.</p>
<p>static binaries를 포함하는 모듈이 아닌 경우 부모 프로젝트(Sub Module을 사용하는)에서 해당 의존성이 지정되어 있다면 바로 import해서 사용이 가능하다(부모 프로젝트의 Podfile에 <code>pod 'GoogleMaps'</code>가 추가되어 있는 경우). 당연히 부모 프로젝트를 열어서 Sub Module을 수정하고 있는 경우를 말한다. 하지만 이 경우는 그것도 안된다(정확한 이유는 아직 모르겠다. static binaries를 포함하고 있어서 그런 것인지 GoogleMaps 모듈이 use_frameworks을 완전하게 지원하지 않아서 인지 명확하지는 않다). 따라서 어떻게 해서든 의존성을 지정해야 한다.</p>
<p>이를 해결하려고 여러가지 시도를 해봤으나 모두 실패했다. 그래서 다른 프로젝트들은 어떻게 해결했나 싶어 github에서 모듈들을 찾아다니다 <a href="https://github.com/poulpix/PXGoogleDirections">PXGoogleDirections</a>를 발견했다. 내가 원했던 것처럼 CocoaPods 모듈에서 GoogleMaps에 대한 의존성을 지정한 모듈이다(사실 다른 모듈들도 찾았으니 그냥 <code>dependency</code>를 사용하고 있었다. 이 모듈들은 확인해보니 나처럼 <code>use_frameworks!</code>를 사용하는 상황에서는 동일한 문제가 발생한다). 그래서 <a href="https://github.com/poulpix/PXGoogleDirections">PXGoogleDirections</a>의 소스를 조금 둘러보니 GoogleMaps의 소스를 프로젝트 내부에 포함하고 있었다. 사실 이 방법이 외부에서 사용시에는 가장 깔끔한 방법으로 보인다. 하지만 난 이렇게는 하고 싶지 않았다.</p>
<p>그래서 <a href="https://github.com/poulpix/PXGoogleDirections/blob/master/PXGoogleDirections.podspec">PXGoogleDirections.podspec</a>를 참고해서 여러 번의 시도 끝에 나름의 방법을 찾았다.</p>
<p>결론은 <code>podspec</code>파일을 아래와 같이 설정하면 된다. 단, <a href="https://blog.asamaru.net/2015/11/17/cocoapods-the-pods-target-has-transitive-dependencies-that-include-static-binaries/">Cocoapods : The 'Pods' target has transitive dependencies that include static binaries 오류</a>에서 언급한 것처럼 <code>pre_install</code>을 사용해서 오류는 제거해야 한다.</p>
<p><strong>ModuleName.podspec</strong></p>
<pre class="hljs ruby">Pod::Spec.new <span class="hljs-keyword">do</span> <span class="hljs-params">|s|</span>
  s.name     = <span class="hljs-string">'ModuleName'</span>
  s.version  = <span class="hljs-string">'1.0.0'</span>
  s.license = <span class="hljs-string">'MIT'</span>
  s.summary  = <span class="hljs-string">'ModuleName Summary'</span>
  s.homepage = <span class="hljs-string">'https://~~~'</span>
  s.author   = { <span class="hljs-string">'ㅇㅇㅇ'</span> =&gt; <span class="hljs-string">'nobody@nobody.com'</span> }
  s.source   = { <span class="hljs-symbol">:git</span> =&gt; <span class="hljs-string">'https://~~~/ModuleName.git'</span>, <span class="hljs-symbol">:tag</span> =&gt; s.version }
  s.ios.deployment_target = <span class="hljs-string">'8.0'</span>
  s.source_files = <span class="hljs-string">'Source/ModuleName/*.swift'</span>, <span class="hljs-string">'ModuleName/**/*.swift'</span>
  s.requires_arc = <span class="hljs-literal">true</span>

  s.dependency <span class="hljs-string">'GoogleMaps'</span>
  s.frameworks            = <span class="hljs-string">"Accelerate"</span>, <span class="hljs-string">"AVFoundation"</span>, <span class="hljs-string">"CoreBluetooth"</span>, <span class="hljs-string">"CoreData"</span>, <span class="hljs-string">"CoreLocation"</span>, <span class="hljs-string">"CoreText"</span>, <span class="hljs-string">"Foundation"</span>, <span class="hljs-string">"GLKit"</span>, <span class="hljs-string">"ImageIO"</span>, <span class="hljs-string">"OpenGLES"</span>, <span class="hljs-string">"QuartzCore"</span>, <span class="hljs-string">"Security"</span>, <span class="hljs-string">"SystemConfiguration"</span>, <span class="hljs-string">"CoreGraphics"</span>, <span class="hljs-string">"GoogleMaps"</span>
  s.resource_bundles      = { <span class="hljs-string">'GoogleMaps'</span> =&gt; [<span class="hljs-string">'$(PODS_ROOT)/GoogleMaps/Frameworks/GoogleMaps.framework/Resources/*.bundle'</span>] }
  s.vendored_frameworks   = <span class="hljs-string">"$(PODS_ROOT)/GoogleMaps/Frameworks/GoogleMaps.framework"</span>
  s.xcconfig              = { <span class="hljs-string">'FRAMEWORK_SEARCH_PATHS'</span> =&gt; <span class="hljs-string">'$(PODS_ROOT)/GoogleMaps/Frameworks'</span> }
<span class="hljs-keyword">end</span></pre>
<p>설명하자면 <code>dependency</code>를 통해 의존성을 설정한다. Cocoapods의 특성상 Sub Module의 의존성도 모두 <code>Pods</code>로 통합되어 추가된다(부모 프로젝트에서도 바로 사용 가능하다). 그런데 이렇게만 설정하면 정작 Sub Module에서는 GoogleMaps에 접근할 수 없으므로 관련된 설정을 <code>Pods</code>에 설치된 GoogleMaps에 맞추어준다. <code>frameworks</code>의 경우만 보더라도 GoogleMaps에서 이미 의존성이 다 지정되어 있음에도 불구하고 다시 다 설정해 주어야 한다(<a href="https://github.com/CocoaPods/Specs/blob/master/Specs/GoogleMaps/1.10.5/GoogleMaps.podspec.json">GoogleMaps.podspec.json</a> 참고)</p>
<p>어쨌든 이렇게 하면 문제는 해결된다. 서두에서 언급한 것처럼 내가 봐도 깔끔한 해결 방법은 아니다. 하지만 이런 불편함을 감수하고서라도 Sub Module로 분리하고 싶다면 위 방법을 참고하자. 원리를 보면 GoogleMaps가 아닌 다른 모듈(static binaries를 포함하는)도 동일하게 처리할 수 있다. 그리고 일단 Sub Module로 분리해서 사용하다 보면 CocoaPods에서 개선해줄 것으로 생각한다(관련되 Issue가 다수 존재하므로).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/17/cocoapods-the-pods-target-has-transitive-dependencies-that-include-static-binaries/</id><title type="html">Cocoapods : The 'Pods' target has transitive dependencies that include static binaries 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/17/cocoapods-the-pods-target-has-transitive-dependencies-that-include-static-binaries/"/><published>2015-11-17T13:17:38+09:00</published><updated>2015-11-17T13:17:38+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[iOS용 앱 개발을 하면서 CocoaPods을 사용하고 있다. 그리고 CocoaPods을 이용해서 반복적인 기능의 구현을 Sub Module로 분리하여 프로젝트를 진행하고 있다. Sub Module 분리에 대해서는 Xcode에서 CocoaPods를 이용해 sub module 만들기에서 설명 했었다. 이렇게 만든 Sub Module에서 가지는 의존성은 dependency 속성을 이용해서 지정한다. 예를들면 아래와 같다. ModuleName.podspec Pod::Spec.new do |s| s.name = 'ModuleName' s.version = '1.0.0' s.license = 'MIT' s.summary = 'ModuleName Summary' s.homepage = 'https://~~~' s.author = { 'ㅇㅇㅇ' => 'nobody@nobody.com' } s.source = { :git => 'https://~~~/ModuleName.git', :tag => s.version } s.ios.deployment_target = '8.0' s.source_files = 'Source/ModuleName/*.swift', 'ModuleName/**/*.swift' s.requires_arc = true s.dependency 'DependencyModuleName' end 그런데 이렇게 설정해서 사용할 경우 CocoaPods에서 아래와 같은 오류가 나는 경우가 있다. 항상 발생하는 것이 아니라 Podfile에서 use_frameworks!를 사용할 경우에 발생한다. [!] The 'Pods' target has transitive dependencies that include static binaries: (/~~~/Pods/DependencyModuleName/Frameworks/DependencyModuleName.framework) 대표적으로 GoogleMaps 모듈을 dependency로 사용하면 이 오류를 만나게 된다. 이유를 간단하게 설명하자면 의존성을 지정한 모듈이 static binaries를 포함하고 있기 때문에 발생하는 오류다. 현재 사용중인 CocoaPods의 버전은 0.39.0인데 아직까지 이 상황에 대해서는 지원을 하지 않는 것으로 보인다. 이와 관련하여 Reject installation if a static library is used as a transitive dependency while using frameworks라는 Issue가 진행중이다. 어쨌든 일단 CocoaPods에서 이 오류가 나지 않도록 하는 방법은 다음과 같다. 부모 프로젝트의 Podfile에 아래와 같이 추가 한다. Podfile pre_install do |installer| def installer.verify_no_static_framework_transitive_dependencies; end end 관련글 : Prevent Transitive Dependency Errors in Swift Project with Vendored Frameworks pre_install를 이미 사용중이라면 거기에 def 라인만 추가하면 된다. 사실 이 방법은 일단 오류가 나오지 않도록 검사를 하지 않는 것일 뿐 근본적인 해결이 된 것은 아니다. 이와 관련한 해결 방법은 관련성이 있으나 다른 부분을 포함하고 있어 Cocoapods : Sub Module에서 GoogleMaps 의존성 사용시 Transitive dependency 문제 해결에 따로 남긴다.]]></summary><content type="html"><![CDATA[<p>iOS용 앱 개발을 하면서 CocoaPods을 사용하고 있다. 그리고 CocoaPods을 이용해서 반복적인 기능의 구현을 Sub Module로 분리하여 프로젝트를 진행하고 있다. Sub Module 분리에 대해서는 <a href="https://blog.asamaru.net/2015/10/21/xcode-create-sub-module-using-cocoapods/">Xcode에서 CocoaPods를 이용해 sub module 만들기</a>에서 설명 했었다.</p>
<p>이렇게 만든 Sub Module에서 가지는 의존성은 <code>dependency</code> 속성을 이용해서 지정한다. 예를들면 아래와 같다.</p>
<p><strong>ModuleName.podspec</strong></p>
<pre class="hljs ruby">Pod::Spec.new <span class="hljs-keyword">do</span> <span class="hljs-params">|s|</span>
  s.name     = <span class="hljs-string">'ModuleName'</span>
  s.version  = <span class="hljs-string">'1.0.0'</span>
  s.license = <span class="hljs-string">'MIT'</span>
  s.summary  = <span class="hljs-string">'ModuleName Summary'</span>
  s.homepage = <span class="hljs-string">'https://~~~'</span>
  s.author   = { <span class="hljs-string">'ㅇㅇㅇ'</span> =&gt; <span class="hljs-string">'nobody@nobody.com'</span> }
  s.source   = { <span class="hljs-symbol">:git</span> =&gt; <span class="hljs-string">'https://~~~/ModuleName.git'</span>, <span class="hljs-symbol">:tag</span> =&gt; s.version }
  s.ios.deployment_target = <span class="hljs-string">'8.0'</span>
  s.source_files = <span class="hljs-string">'Source/ModuleName/*.swift'</span>, <span class="hljs-string">'ModuleName/**/*.swift'</span>
  s.requires_arc = <span class="hljs-literal">true</span>

  s.dependency <span class="hljs-string">'DependencyModuleName'</span>
<span class="hljs-keyword">end</span></pre>
<p>그런데 이렇게 설정해서 사용할 경우 CocoaPods에서 아래와 같은 오류가 나는 경우가 있다. <strong>항상 발생하는 것이 아니라 Podfile에서 <code>use_frameworks!</code>를 사용할 경우에 발생한다.</strong></p>
<pre><code>[!] The 'Pods' target has transitive dependencies that include static binaries: (/~~~/Pods/DependencyModuleName/Frameworks/DependencyModuleName.framework)</code></pre>
<p>대표적으로 GoogleMaps 모듈을 <code>dependency</code>로 사용하면 이 오류를 만나게 된다. 이유를 간단하게 설명하자면 의존성을 지정한 모듈이 static binaries를 포함하고 있기 때문에 발생하는 오류다. 현재 사용중인 CocoaPods의 버전은 0.39.0인데 아직까지 이 상황에 대해서는 지원을 하지 않는 것으로 보인다. 이와 관련하여 <a href="https://github.com/CocoaPods/CocoaPods/issues/2926">Reject installation if a static library is used as a transitive dependency while using frameworks</a>라는 Issue가 진행중이다.</p>
<p>어쨌든 일단 CocoaPods에서 이 오류가 나지 않도록 하는 방법은 다음과 같다. 부모 프로젝트의 Podfile에 아래와 같이 추가 한다.</p>
<p><strong>Podfile</strong></p>
<pre class="hljs ruby">pre_install <span class="hljs-keyword">do</span> <span class="hljs-params">|installer|</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">installer</span>.<span class="hljs-title">verify_no_static_framework_transitive_dependencies</span>;</span> <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span></pre>
<p>관련글 : <a href="https://github.com/CocoaPods/CocoaPods/issues/3289">Prevent Transitive Dependency Errors in Swift Project with Vendored Frameworks</a></p>
<p>pre_install를 이미 사용중이라면 거기에 def 라인만 추가하면 된다.</p>
<p>사실 이 방법은 일단 오류가 나오지 않도록 검사를 하지 않는 것일 뿐 근본적인 해결이 된 것은 아니다. 이와 관련한 해결 방법은 관련성이 있으나 다른 부분을 포함하고 있어 <a href="https://blog.asamaru.net/2015/11/17/cocoapods-transitive-dependency-with-static-library/">Cocoapods : Sub Module에서 GoogleMaps 의존성 사용시 Transitive dependency 문제 해결</a>에 따로 남긴다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/16/xcode-crashes-when-selecting-the-main-storyboard/</id><title type="html">XCode에서 storyboard 선택시 Crash가 발생할 경우</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/16/xcode-crashes-when-selecting-the-main-storyboard/"/><published>2015-11-16T20:55:08+09:00</published><updated>2015-11-16T20:55:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[최근엔 XCode로 작업하는 일이 많아졌다. 안드로이드 개발과 웹 개발도 함께하지만 iOS 작업이 급하다 보니 주로 이 일을 하고 있다. XCode는 사용하면 할수록 잘 만들었다는 생각이 든다. 단, 코드 포멧팅 기능이 없다거나 소스 선택이 조금 부자연스럽다거나(이건 적응의 문제일 수 있다) 하는 것처럼 안드로이드 스튜디오에 비해 불편한 부분들이 있긴하다. 하지만 인터페이스 빌더 등의 도구들은 아주 잘 만들어져 있으며 결정적으로 빌드 속도가 무척 빨라서 좋다. 안드로이드 스튜디오도 지난 번에 적었던 Android Gradle 빌드 속도 높이기에서 설명했던 것처럼 빌드 속도가 다소 개선되었지만 XCode에 비교도 되지 않는다. 인터페이스 빌더의 사용에 대해서는 개발자들 사이에서도 논란이 많다. 개발시 인터페이스 빌더를 사용할 것인가 하드 코딩으로 UI를 개발할 것인가? 둘 다 장단점이 있는 것은 명확하지만 개인적으로는 최대한 인터페이스 빌더를 사용하는 것이 옳다고 생각한다. 스토리보드와 같은 기능을 사용해서 앱 전체의 흐름을 파악하기 쉽도록 개발할 수 있으며 보여질 화면을 바로 보면서 작업하므로 개발 및 유지보수도 용이하다. 다만 인터페이스 빌더의 설정이 코드상에서 보여지지 못하므로 코드를 볼 때 혼란스럽게 보일 수는 있다. 그래서 나는 코드 흐름 상에서 중요한 요소는 인터페이스와 별개로 소스에서도 설정을 해주는 편이다(아주 중요할 경우만). 서론이 길어졌는데 오늘 이야기는 지금 부터다. 나름 선호하는 이 인터페이스 빌더에는 치명적인 약점이 있다. 이건 내가 XCode를 처음 접한 3버전대에서부터 현재의 7버전까지도 완전히 해결되지 않는 문제다. 그 약점은 바로 Crash가 잘 발생한다는 점과 설정이 엉키면 정말 난해한 상황을 만나게 된다는 것이다. 현재까지의 나의 해결법은 해당 부분을 통째로 지우고 새로 설정하는 것이다. 정말 최악의 방법이지만 항상 오랜 시간을 해결해 보려고 애써봐도 결론은 대부분 새로 작성하는 것이었다. 사실 이런 문제가 아주 빈번한 것은 아니지만 한번씩 발생하면 치명적이다(환장한다). 최근에는 작업을 하면서 AppCode를 함께 사용하는 편인데 아무래도 jetbrains에서 만들다보니 단축키도 익숙하고 결정적인 코드 포멧팅 기능 때문에... 어쨌든 AppCode에서도 storyboard를 수정하려고하면 결국 XCode를 띄워준다. 이렇게 개발 도구를 섞어써서 그런건지 내가 뭔가를 잘못했는지는 몰라도 이번에 제대로 일이 벌어졌다. 옛날 같으면 nib파일이 따로 있어서 문제가 발생해도 그 파일만 새로 작업하면 되는데 이번엔 스토리보드로 작업되어 있었는데 그 파일을 선택만 해도 XCode가 죽는 것이다. 도저히 새로 작성한다는 것은 불가능 했다. 아직 개발 초기라 화면이 엄청 많은 것은 아니었지만 그래도 주요 화면들을 다 작성해 둔 상태라 다시 작성하기엔 무리였다. 그래서 인터넷에서 또 다시 해결 방법들을 찾아봤다. 사실 결론을 미리 이야기하자면 나는 아래의 방법들을 모두 시도해 보았으나 성공하지 못했다. 하지만 이 방법들로 효과를 봤다는 사람들이 있어서 기록성으로 한번 남겨두려고 한다. 1. XML로 열기 스토리보드 파일을 오른쪽 클릭해서 "Open As" > "Source Code" 메뉴를 이용해 XML 코드를 편집기에서 연다. 의미없는 글자를 넣었다가 빼고 저장한다. 다시 스토리보드 파일을 오른쪽 클릭해서 "Open As" > "Interface Builder - Storyboard"로 다시 연다. 2. Autolayout 기능 끄기 이 Autolayout에 대한 사람들의 이야기가 많았다. Autolayout이 새로 나오면서 많은 문제들이 있었던 것으로 보인다. 이제는 문제가 많이 줄어든 것으로 보이나 혹시나 도움이 될지도 모르겠다. 스토리보드 파일을 오른쪽 클릭해서 "Open As" > "Source Code" 메뉴를 이용해 XML 코드를 편집기에서 연다. useAutolayout="YES" 부분을 찾아 useAutolayout="NO"로 변경한다. 다시 스토리보드 파일을 오른쪽 클릭해서 "Open As" > "Interface Builder - Storyboard"로 다시 연다. 3. xcuserdata 삭제 Xcode를 닫는다. .xcodeproj, .xcworkspace 파일을 우클릭하여 "패키지 내용보기"를 선택한다. xcuserdata 폴더를 삭제한다. 4. XCode 초기화 이 방법은 XCode 설정을 초기화하는 것으로 권장하지는 않는다. 터미널에서 아래의 명령을 입력한다. $ defaults delete com.apple.dt.Xcode 5. 오류 발생 부분 찾아 제거하기 이 방법은 최후의 방법으로 내가 사용한 방법이다. storyboard 파일을 소스 상태(XML)로 열어 scene 단위로 삭제 해본다. 단, 삭제하기 전 원본 백업은 필수. 이렇게 하나씩 제거하면서 XCode에서 파일을 열어 시도해보면서 원인이 되는 scene을 찾는다. 원인이 되는 scene을 찾았다면 부분적으로 코드들을 제거해가면서 정확한 오류 지점을 찾는다. 운이 좋아 부분적 오류였다면 이 방법으로 최소한의 손실로 문제를 해결할 수 있다. 단, 찾을 수 없다면 해당 scene을 통째로 버려야 한다. 결론적으로 명쾌한 답을 주지 못해 미안하지만 나도 아직은 답을 찾지 못했다. 오류가 발생할 때마다 열심히 애플에 오류 보고를 보내고 있지만 당연히 신속한 해결은 없다. 어쨌든 이런 문제를 만나지 않기를 바라며 혹시라도 문제가 발생한다면 위 방법들을 시도해보길 바란다.]]></summary><content type="html"><![CDATA[<p>최근엔 XCode로 작업하는 일이 많아졌다. 안드로이드 개발과 웹 개발도 함께하지만 iOS 작업이 급하다 보니 주로 이 일을 하고 있다.
XCode는 사용하면 할수록 잘 만들었다는 생각이 든다. 단, 코드 포멧팅 기능이 없다거나 소스 선택이 조금 부자연스럽다거나(이건 적응의 문제일 수 있다) 하는 것처럼 안드로이드 스튜디오에 비해 불편한 부분들이 있긴하다. 하지만 인터페이스 빌더 등의 도구들은 아주 잘 만들어져 있으며 결정적으로 빌드 속도가 무척 빨라서 좋다. 안드로이드 스튜디오도 지난 번에 적었던 <a href="https://blog.asamaru.net/2015/09/29/android-gradle-builds-speed-up/">Android Gradle 빌드 속도 높이기</a>에서 설명했던 것처럼 빌드 속도가 다소 개선되었지만 XCode에 비교도 되지 않는다.</p>
<p>인터페이스 빌더의 사용에 대해서는 개발자들 사이에서도 논란이 많다. 개발시 인터페이스 빌더를 사용할 것인가 하드 코딩으로 UI를 개발할 것인가? 둘 다 장단점이 있는 것은 명확하지만 개인적으로는 최대한 인터페이스 빌더를 사용하는 것이 옳다고 생각한다. 스토리보드와 같은 기능을 사용해서 앱 전체의 흐름을 파악하기 쉽도록 개발할 수 있으며 보여질 화면을 바로 보면서 작업하므로 개발 및 유지보수도 용이하다. 다만 인터페이스 빌더의 설정이 코드상에서 보여지지 못하므로 코드를 볼 때 혼란스럽게 보일 수는 있다. 그래서 나는 코드 흐름 상에서 중요한 요소는 인터페이스와 별개로 소스에서도 설정을 해주는 편이다(아주 중요할 경우만).</p>
<p>서론이 길어졌는데 오늘 이야기는 지금 부터다. 나름 선호하는 이 인터페이스 빌더에는 치명적인 약점이 있다. 이건 내가 XCode를 처음 접한 3버전대에서부터 현재의 7버전까지도 완전히 해결되지 않는 문제다. 그 약점은 바로 Crash가 잘 발생한다는 점과 설정이 엉키면 정말 난해한 상황을 만나게 된다는 것이다.</p>
<p>현재까지의 나의 해결법은 해당 부분을 통째로 지우고 새로 설정하는 것이다. 정말 최악의 방법이지만 항상 오랜 시간을 해결해 보려고 애써봐도 결론은 대부분 새로 작성하는 것이었다. 사실 이런 문제가 아주 빈번한 것은 아니지만 한번씩 발생하면 치명적이다(환장한다).</p>
<p>최근에는 작업을 하면서 <a href="https://www.jetbrains.com/objc/">AppCode</a>를 함께 사용하는 편인데 아무래도 jetbrains에서 만들다보니 단축키도 익숙하고 결정적인 코드 포멧팅 기능 때문에...
어쨌든 AppCode에서도 storyboard를 수정하려고하면 결국 XCode를 띄워준다.</p>
<p>이렇게 개발 도구를 섞어써서 그런건지 내가 뭔가를 잘못했는지는 몰라도 이번에 제대로 일이 벌어졌다. 옛날 같으면 nib파일이 따로 있어서 문제가 발생해도 그 파일만 새로 작업하면 되는데 이번엔 스토리보드로 작업되어 있었는데 그 파일을 선택만 해도 XCode가 죽는 것이다. 도저히 새로 작성한다는 것은 불가능 했다. 아직 개발 초기라 화면이 엄청 많은 것은 아니었지만 그래도 주요 화면들을 다 작성해 둔 상태라 다시 작성하기엔 무리였다.</p>
<p>그래서 인터넷에서 또 다시 해결 방법들을 찾아봤다. 사실 결론을 미리 이야기하자면 나는 아래의 방법들을 모두 시도해 보았으나 성공하지 못했다.  하지만 이 방법들로 효과를 봤다는 사람들이 있어서 기록성으로 한번 남겨두려고 한다.</p>
<p><strong>1. XML로 열기</strong></p>
<ul>
<li>스토리보드 파일을 오른쪽 클릭해서 &quot;Open As&quot; &gt; &quot;Source Code&quot; 메뉴를 이용해 XML 코드를 편집기에서 연다.</li>
<li>의미없는 글자를 넣었다가 빼고 저장한다.</li>
<li>다시 스토리보드 파일을 오른쪽 클릭해서 &quot;Open As&quot; &gt; &quot;Interface Builder - Storyboard&quot;로 다시 연다.</li>
</ul>
<p><strong>2. Autolayout 기능 끄기</strong></p>
<p>이 Autolayout에 대한 사람들의 이야기가 많았다. Autolayout이 새로 나오면서 많은 문제들이 있었던 것으로 보인다. 이제는 문제가 많이 줄어든 것으로 보이나 혹시나 도움이 될지도 모르겠다.</p>
<ul>
<li>스토리보드 파일을 오른쪽 클릭해서 &quot;Open As&quot; &gt; &quot;Source Code&quot; 메뉴를 이용해 XML 코드를 편집기에서 연다.  </li>
<li><code>useAutolayout="YES"</code> 부분을 찾아 <code>useAutolayout="NO"</code>로 변경한다.</li>
<li>다시 스토리보드 파일을 오른쪽 클릭해서 &quot;Open As&quot; &gt; &quot;Interface Builder - Storyboard&quot;로 다시 연다.</li>
</ul>
<p><strong>3. xcuserdata 삭제</strong></p>
<ul>
<li>Xcode를 닫는다.</li>
<li>.xcodeproj, .xcworkspace 파일을 우클릭하여 &quot;패키지 내용보기&quot;를 선택한다.</li>
<li>xcuserdata 폴더를 삭제한다.</li>
</ul>
<p><strong>4. XCode 초기화</strong></p>
<p>이 방법은 XCode 설정을 초기화하는 것으로 권장하지는 않는다. 터미널에서 아래의 명령을 입력한다.</p>
<pre class="hljs bash">$ defaults delete com.apple.dt.Xcode</pre>
<p><strong>5. 오류 발생 부분 찾아 제거하기</strong></p>
<p>이 방법은 최후의 방법으로 내가 사용한 방법이다. storyboard 파일을 소스 상태(XML)로 열어 scene 단위로 삭제 해본다. 단, 삭제하기 전 원본 백업은 필수. 이렇게 하나씩 제거하면서 XCode에서 파일을 열어 시도해보면서 원인이 되는 scene을 찾는다. 원인이 되는 scene을 찾았다면 부분적으로 코드들을 제거해가면서 정확한 오류 지점을 찾는다. 운이 좋아 부분적 오류였다면 이 방법으로 최소한의 손실로 문제를 해결할 수 있다. 단, 찾을 수 없다면 해당 scene을 통째로 버려야 한다.</p>
<hr />
<p>결론적으로 명쾌한 답을 주지 못해 미안하지만 나도 아직은 답을 찾지 못했다. 오류가 발생할 때마다 열심히 애플에 오류 보고를 보내고 있지만 당연히 신속한 해결은 없다. 어쨌든 이런 문제를 만나지 않기를 바라며 혹시라도 문제가 발생한다면 위 방법들을 시도해보길 바란다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/11/from-acra-to-fabric/</id><title type="html">안드로이드 Crash Report 도구 : ACRA에서 Fabric(Crashlytics)으로의 전환</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/11/from-acra-to-fabric/"/><published>2015-11-11T20:33:16+09:00</published><updated>2015-11-11T20:33:16+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><category term="ios" label="ios" /><category term="tip" label="tip" /><summary><![CDATA[지난 글 ACRA : Please configure 'buildConfigClass' in your ACRA config 오류와 Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거에서 언급했던 것처럼 안드로이드 Crash Report 도구로 ACRA를 사용중이었다. ACRA 사용중에 만난 오류를 해결하기 위해 시간을 들여서 원인을 찾고 개발자에게 전달해서 개선을 요청할 정도로 나름 애용하려던 도구였는데 오늘 Fabric(Crashlytics)으로 바꿔버렸다. 사실 처음부터 대체할 목적이 있었던 것은 아니었다. 안드로이드용으로 제작된 앱을 iOS용으로도 제작할 일이 있어 개발을 진행하던 중 안드로이드의 ACRA 같은 도구가 iOS에도 있을 것이라는 생각에 몇가지를 찾아보고 있었다. 그때 눈에 띄는 것이 Crashlytics 였다(Crashlytics 소개 + Android Studio에서 적용하는 방법). 그런데 이 Crashlytics라는 서비스를 운영하는 회사가 트위터에 인수가 되었다(앱 충돌 리포트 서비스 Crashlytics, 트위터에 인수되다). 그래서 조금 더 알아보니 트위터에서 Fabric이라는 것을 새로 내놓았다. Fabric이 무엇인지에 대해서는 트위터 한글 블로그의 "패브릭(Fabric)을 소개합니다."를 보면 잘 설명되어 있다. 패브릭(Fabric)은 앱 개발자들이 흔히 직면하는 안정성, 사용자 확보, 수익성, 사용자 인증의 이슈들>을 해결해 줄 세 가지의 모듈형 키트들로 이루어져 있습니다. 패브릭은 크래시리틱스(Crashlytics), 모펍(MoPub), 트위터 등의 서비스를 통합해 개발자들이 더 안정적인 앱을 만들도록 돕습니다. 패브릭은 앱 개발자들이 세계 최고의 모바일 애드 익스체인지(ad exchange)를 통해 수익을 확보할 수 있게 하며, 트위터 로그인 기능과 실시간 콘텐츠 스트림 기능을 통해 더 많은 사용자에 콘텐츠를 전달할 수 있게 하거나 더욱 간단히 사용자를 인증할 수 있도록 해줍니다. 나는 우선 최초 목적이었던 iOS를 위한 Crash Report 도구의 설치를 위해 xcode 프로젝트에 Fabric을 추가했다. 설치 과정은 복잡하지는 않으나 몇가지 설정할 부분들이 있어서 자칫 까다로워질 수 있지만 Fabric에서 관련 도구를 워낙에 잘 제공 해줘서 시키는대로 따라만 하면 큰 무리없이 적용할 수 있다. "기회가 되면 설치 과정을 글로 남길까?" 생각했었지만 설치 도구가 워낙 잘되어 있어 "굳이 내가 다시 설명할 필요가 있을까?"라는 생각이다. 그 정도로 잘 되어있다. 다만 기본 설치 후 Debug 모드에서는 로그 수집을 하지 않도록 설정하는 등의 몇가지 안내가 필요한 부분들이 있는데 이건 시간이되면 따로 글을 남기려고 한다. 사실 이 부분도 메뉴얼로 모두 제공되고 있으나 막상 찾으려니 귀찮은 것들이다. 결론적으로는 아주 만족스러웠다. Crash Report가 잘되는 것은 물론이고 Hook을 걸 수 있도록 하는 기능도 제공되고 있어서 기존에 ACRA에서 연결해 두었던 자체 로그 수집기로도 기존처럼 정보를 전달하는 것이 가능했다(정확히 이야기 하자면 기존과 동일한 내용을 전달하는 것은 아니고 오류 발생 이벤트만 전달된다). 그리고 Fabric에는 Crashlytics 외에도 Answers라는 모듈도 함께 제공된다(사실 더 많은 것들이 있다). 이 모듈은 구글 어날리틱스 처럼 앱에 대한 이벤트를 수집하여 보고서를 제공해 준다. 결정적으로 이 모든 것이 무료. 그래서 안드로이드용 앱에서도 ACRA를 걷어내고 Fabric을 적용했다. 역시 아주 만족스럽다. ACRA에서 보내주는 무지막지한 Crash 로그 대신 잘 정리된 로그를 확인할 수 있게 되었다. 앞선 설명처럼 Fabric에는 여러가지 모듈들이 있는데 이들 중 일부는 각각 독립적인 서비스를 가지고 있다(Crashlytics와 Answers 처럼). 이 부분에 관련해서는 트위터 한글 블로그의 "패브릭(Fabric)을 소개합니다."의 내용 마지막에 아래와 같이 안내 되어있다. 패브릭(Fabric)은 트위터만의 작품이 아닙니다. 패브릭(Fabric)이 가능하도록 키트(Kits)들의 관리, 설치, 업데이트에 관여하는 모든 SDK 벤더들이 만들어낸 것이라고 생각합니다. 당신이 SDK를 관리하는 사람이고, 트위터와 함께 일하고 싶다면 패브릭 파트너십 담당(partners@fabric.io)에 메일을 보내 주시길 바랍니다. 개발자 여러분들의 연락을 기다리고 있겠습니다. 따라서 각각의 서비스를 사용해도 무방할 것으로 보인다. 하지만 Fabric을 사용함으로써 통합 관리를 할 수 있으며 설치 과정이 아주 단순해진다. 결론 : Crash Report 도구가 필요하다면, iOS와 Android 모두 한 곳에서 관리하고 싶다면, 사용자 이벤트 로깅도 하고 싶다면, Fabric을 적극 추천하고 싶다.]]></summary><content type="html"><![CDATA[<p>지난 글 <a href="https://blog.asamaru.net/2015/10/01/android-acra-please-configure-buildconfigclass-in-your-acra-config/">ACRA : Please configure 'buildConfigClass' in your ACRA config 오류</a>와 <a href="https://blog.asamaru.net/2015/09/25/android-6-apache-http-client-removal/">Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거</a>에서 언급했던 것처럼 안드로이드 Crash Report 도구로 ACRA를 사용중이었다.
ACRA 사용중에 만난 오류를 해결하기 위해 시간을 들여서 원인을 찾고 개발자에게 전달해서 개선을 요청할 정도로 나름 애용하려던 도구였는데 오늘 <a href="https://fabric.io">Fabric(Crashlytics)</a>으로 바꿔버렸다.</p>
<p>사실 처음부터 대체할 목적이 있었던 것은 아니었다. 안드로이드용으로 제작된 앱을 iOS용으로도 제작할 일이 있어 개발을 진행하던 중 안드로이드의 ACRA 같은 도구가 iOS에도 있을 것이라는 생각에 몇가지를 찾아보고 있었다. 그때 눈에 띄는 것이 <a href="https://try.crashlytics.com/">Crashlytics</a> 였다(<a href="https://gist.github.com/rino0601/018c7f22aeb23cf2e2a0">Crashlytics 소개 + Android Studio에서 적용하는 방법</a>).</p>
<p>그런데 이 Crashlytics라는 서비스를 운영하는 회사가 트위터에 인수가 되었다(<a href="http://besuccess.com/2013/01/28496/">앱 충돌 리포트 서비스 Crashlytics, 트위터에 인수되다</a>). 그래서 조금 더 알아보니 트위터에서 <a href="https://fabric.io">Fabric</a>이라는 것을 새로 내놓았다.</p>
<p><a href="https://fabric.io">Fabric</a>이 무엇인지에 대해서는 트위터 한글 블로그의 &quot;<a href="https://blog.twitter.com/ko/2014/introducing-fabric-kr">패브릭(Fabric)을 소개합니다.</a>&quot;를 보면 잘 설명되어 있다.</p>
<blockquote>
<p>패브릭(Fabric)은 앱 개발자들이 흔히 직면하는 안정성, 사용자 확보, 수익성, 사용자 인증의 이슈들&gt;을 해결해 줄 세 가지의 모듈형 키트들로 이루어져 있습니다. 패브릭은 크래시리틱스(Crashlytics), 모펍(MoPub), 트위터 등의 서비스를 통합해 개발자들이 더 안정적인 앱을 만들도록 돕습니다. 패브릭은 앱 개발자들이 세계 최고의 모바일 애드 익스체인지(ad exchange)를 통해 수익을 확보할 수 있게 하며, 트위터 로그인 기능과 실시간 콘텐츠 스트림 기능을 통해 더 많은 사용자에 콘텐츠를 전달할 수 있게 하거나 더욱 간단히 사용자를 인증할 수 있도록 해줍니다.</p>
</blockquote>
<p>나는 우선 최초 목적이었던 iOS를 위한 Crash Report 도구의 설치를 위해 xcode 프로젝트에 <a href="https://fabric.io">Fabric</a>을 추가했다. 설치 과정은 복잡하지는 않으나 몇가지 설정할 부분들이 있어서 자칫 까다로워질 수 있지만 <a href="https://fabric.io">Fabric</a>에서 관련 도구를 워낙에 잘 제공 해줘서 시키는대로 따라만 하면 큰 무리없이 적용할 수 있다. &quot;기회가 되면 설치 과정을 글로 남길까?&quot; 생각했었지만 설치 도구가 워낙 잘되어 있어 &quot;굳이 내가 다시 설명할 필요가 있을까?&quot;라는 생각이다. 그 정도로 잘 되어있다. 다만 기본 설치 후 Debug 모드에서는 로그 수집을 하지 않도록 설정하는 등의 몇가지 안내가 필요한 부분들이 있는데 이건 시간이되면 따로 글을 남기려고 한다. 사실 이 부분도 메뉴얼로 모두 제공되고 있으나 막상 찾으려니 귀찮은 것들이다.</p>
<p>결론적으로는 아주 만족스러웠다. Crash Report가 잘되는 것은 물론이고 Hook을 걸 수 있도록 하는 기능도 제공되고 있어서 기존에 ACRA에서 연결해 두었던 자체 로그 수집기로도 기존처럼 정보를 전달하는 것이 가능했다(정확히 이야기 하자면 기존과 동일한 내용을 전달하는 것은 아니고 오류 발생 이벤트만 전달된다). 그리고 <a href="https://fabric.io">Fabric</a>에는 <a href="https://try.crashlytics.com/">Crashlytics</a> 외에도 <a href="https://answers.io/">Answers</a>라는 모듈도 함께 제공된다(사실 더 많은 것들이 있다). 이 모듈은 구글 어날리틱스 처럼 앱에 대한 이벤트를 수집하여 보고서를 제공해 준다. 결정적으로 이 모든 것이 무료.</p>
<p>그래서 안드로이드용 앱에서도 ACRA를 걷어내고 Fabric을 적용했다. 역시 아주 만족스럽다. ACRA에서 보내주는 무지막지한 Crash 로그 대신 잘 정리된 로그를 확인할 수 있게 되었다.</p>
<p>앞선 설명처럼 <a href="https://fabric.io">Fabric</a>에는 여러가지 모듈들이 있는데 이들 중 일부는 각각 독립적인 서비스를 가지고 있다(<a href="https://try.crashlytics.com/">Crashlytics</a>와 <a href="https://answers.io/">Answers</a> 처럼). 이 부분에 관련해서는 트위터 한글 블로그의 &quot;<a href="https://blog.twitter.com/ko/2014/introducing-fabric-kr">패브릭(Fabric)을 소개합니다.</a>&quot;의 내용 마지막에 아래와 같이 안내 되어있다.</p>
<blockquote>
<p>패브릭(Fabric)은 트위터만의 작품이 아닙니다. 패브릭(Fabric)이 가능하도록 키트(Kits)들의 관리, 설치, 업데이트에 관여하는 모든 SDK 벤더들이 만들어낸 것이라고 생각합니다. 당신이 SDK를 관리하는 사람이고, 트위터와 함께 일하고 싶다면 패브릭 파트너십 담당(partners@fabric.io)에 메일을 보내 주시길 바랍니다. 개발자 여러분들의 연락을 기다리고 있겠습니다.</p>
</blockquote>
<p>따라서 각각의 서비스를 사용해도 무방할 것으로 보인다. 하지만 <a href="https://fabric.io">Fabric</a>을 사용함으로써 통합 관리를 할 수 있으며 설치 과정이 아주 단순해진다.</p>
<p><strong>결론 : Crash Report 도구가 필요하다면, iOS와 Android 모두 한 곳에서 관리하고 싶다면, 사용자 이벤트 로깅도 하고 싶다면, <a href="https://fabric.io">Fabric</a>을 적극 추천하고 싶다.</strong></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/05/android-is-not-translated-in-dot-dot-dot-lint-error/</id><title type="html">Android : is not translated in ... Lint Error 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/05/android-is-not-translated-in-dot-dot-dot-lint-error/"/><published>2015-11-05T14:27:23+09:00</published><updated>2015-11-05T14:27:23+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 배포를 위한 빌드시에 아래와 같은 오류가 발생하는 경우가 있다. 상황에 따라 언어의 종류(en)는 다를 수 있다. Error:(65) Error: "..." is not translated in "en" (English) [MissingTranslation] 이 오류는 말그대로 다국어 지원에 대한 처리가 제대로 되어 있지 않다는 오류이다. 일반적으로 다국어 지원을 위한 별도의 처리를 한적이 없다면 이 오류는 발생하지 않는 것이 당연하다. 하지만 이번에 이 오류를 만나고 찾아보니 많은 개발자들이 이 문제를 겪는 것 같다. 사실 나는 다국어 지원에 관련된 별도의 처리를 한 상황이었으므로 이 오류를 만나는 것이 당연한 상황이었다. 어쨌든 인터넷에 찾아보면 대부분 다음과 같이 해결법을 제시하고 있다. Lint 관련 설정은 이클립스 메뉴의 Window - Preference - Android - Lint 에서 변경할 수 있는데요.. 여기서 MissingTranslation 항목을 찾아 Severity를 warning으로 변경하면 됩니다. Android Studio "is not translated in "en" (English) [MissingTranslation]" 오류 해결하기 이 방법은 말그대로 제대로 처리되지 않은 부분을 오류에서 경고로 변경하여 빌드를 수행하는 것으로 좋지 못한 방법이다. 게다가 나의 경우는 OSX라서 그런지 안드로이드 스튜디오의 버전 때문인지 위치와 명칭이 많이 달랐다. 유사하지만 다른 방법도 있다. build.gradle에서 lint를 제외하는 것이다. gradle build fails on lint task android { lintOptions { checkReleaseBuilds false } } 그리고 또 다른 방법 한가지. MissingTranslation for default language ( “…” is not translated in “en”) 이 방법은 Strings.xml에서 locale을 아예 미리 입력해 버리는 것이다. 위 오류에 맞추어 en이라고 했지만 자신의 상황에 맞게 입력해야 한다. <resources xmlns:tools="http://schemas.android.com/tools" tools:locale="en"> 당연히 문제의 원인을 정확히 파악하여 해결하는 것이 가장 좋은 방법이다. 당장 급하고 원인을 찾지 못하겠다면 위의 방법들을 쓸 수도 있겠지만 계속 저렇게 사용하는 것은 권장하고 싶지는 않다. 이제부터는 내가 문제를 만난 상황이다. 사실 나 또한 다국어를 지원할 필요가 있었던 것은 아니다. 다만 사용한 라이브러리 중 하나가 다국어를 지원하고 있었다. 따라서 한국어 부분은 values-ko/strings.xml파일로 분리되어서 처리되고 있었다. 이 상황에서 내가 필요한 것은 설정된 문장의 일부를 변경하는 것이었다. 그래서 내 프로젝트의 values/strings.xml에 필요한 문장들을 재정의 했다. 오류는 나지 않지만 적용되지 않는다. 다시 내 프로젝트에도 values-ko/strings.xml 파일을 만들고 필요한 부분을 재정의 했다. 여기서부터 문제의 시작이다. 아래의 오류가 발생한다. Error:(65) Error: "..." is not translated in "ko" values-ko/strings.xml 파일에 모든 내용을 넣지 않고 필요한 부분만 넣었으므로 나머지 부분이 번역되지 않았다고 오류가 나는 것이다. 간단한 해결 방법은 values-ko/strings.xml 파일에 values/strings.xml의 내용을 모두 복사해 넣어준다. 그런데 이 방법은 싫다. 둘다 한국어인데 굳이 두군데를 관리하고 싶지 않다. 이런 경우라면 아래와 같이 tools:ignore="MissingTranslation"를 사용해서 문제를 해결할 수 있다. Strings.xml <resources xmlns:tools="http://schemas.android.com/tools" tools:ignore="MissingTranslation"> 명확히 이 영역은 다국어 지원이 필요하지 않은 이므로 명시적으로 번역 누락을 무시하도록 하는 것이다. 어떻게 보면 상기 설명했던 오류를 무시하는 것과 같아 보일 수 있으나 이 방법은 무시할 범위를 명확히 인지하고 해당 영역만 필요에 의해 무시하도록 했다는 것이다. 단, 한가지 추가 작업이 필요하다. values-ko/strings.xml 파일에서 재정의 했던 항목들을 values/strings.xml에도 넣어주어야 한다는 것이다. 안그러면 아래와 같은 오류가 난다. Error:(3) Error: "XXX" is translated here but not found in default locale [ExtraTranslation] 사실 불편함이 생기는 부분이지만 앞서 설명처럼 반대로 모두를 두군데서 관리하는 것보다 필요한 몇줄만 별도 관리하는 것을 선택했다. 결론적으로 선택은 자유다. 위 방법들 중 필요에 맞게 선택해서 사용하면 되겠다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 배포를 위한 빌드시에 아래와 같은 오류가 발생하는 경우가 있다. 상황에 따라 언어의 종류(en)는 다를 수 있다.</p>
<pre><code>Error:(65) Error: "..." is not translated in "en" (English) [MissingTranslation]</code></pre>
<p>이 오류는 말그대로 다국어 지원에 대한 처리가 제대로 되어 있지 않다는 오류이다. 일반적으로 다국어 지원을 위한 별도의 처리를 한적이 없다면 이 오류는 발생하지 않는 것이 당연하다.
하지만 이번에 이 오류를 만나고 찾아보니 많은 개발자들이 이 문제를 겪는 것 같다. 사실 나는 다국어 지원에 관련된 별도의 처리를 한 상황이었으므로 이 오류를 만나는 것이 당연한 상황이었다.
어쨌든 인터넷에 찾아보면 대부분 다음과 같이 해결법을 제시하고 있다.</p>
<ul>
<li>Lint 관련 설정은 이클립스 메뉴의 Window - Preference - Android - Lint 에서 변경할 수 있는데요..  여기서 MissingTranslation 항목을 찾아 Severity를 warning으로 변경하면 됩니다.</li>
<li><a href="http://mytalkhome.tistory.com/816">Android Studio &quot;is not translated in &quot;en&quot; (English) [MissingTranslation]&quot; 오류 해결하기</a></li>
</ul>
<p>이 방법은 말그대로 제대로 처리되지 않은 부분을 오류에서 경고로 변경하여 빌드를 수행하는 것으로 좋지 못한 방법이다. 게다가 나의 경우는 OSX라서 그런지 안드로이드 스튜디오의 버전 때문인지 위치와 명칭이 많이 달랐다.</p>
<p>유사하지만 다른 방법도 있다. build.gradle에서 lint를 제외하는 것이다. <a href="http://stackoverflow.com/questions/20699147/gradle-build-fails-on-lint-task">gradle build fails on lint task</a></p>
<pre><code>android {
  lintOptions {
      checkReleaseBuilds false
  }
}</code></pre>
<p>그리고 또 다른 방법 한가지. <a href="http://stackoverflow.com/questions/28106875/missingtranslation-for-default-language-is-not-translated-in-en">MissingTranslation for default language ( “…” is not translated in “en”)</a>
이 방법은 Strings.xml에서 locale을 아예 미리 입력해 버리는 것이다. 위 오류에 맞추어 en이라고 했지만 자신의 상황에 맞게 입력해야 한다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>
    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span>
    <span class="hljs-attr">tools:locale</span>=<span class="hljs-string">"en"</span>&gt;</span></pre>
<p>당연히 문제의 원인을 정확히 파악하여 해결하는 것이 가장 좋은 방법이다.
당장 급하고 원인을 찾지 못하겠다면 위의 방법들을 쓸 수도 있겠지만 계속 저렇게 사용하는 것은 권장하고 싶지는 않다.</p>
<p>이제부터는 내가 문제를 만난 상황이다. 사실 나 또한 다국어를 지원할 필요가 있었던 것은 아니다. 다만 사용한 라이브러리 중 하나가 다국어를 지원하고 있었다.
따라서 한국어 부분은 <code>values-ko/strings.xml</code>파일로 분리되어서 처리되고 있었다. 이 상황에서 내가 필요한 것은 설정된 문장의 일부를 변경하는 것이었다.
그래서 내 프로젝트의 <code>values/strings.xml</code>에 필요한 문장들을 재정의 했다. 오류는 나지 않지만 적용되지 않는다. 다시 내 프로젝트에도 <code>values-ko/strings.xml</code> 파일을 만들고 필요한 부분을 재정의 했다.
여기서부터 문제의 시작이다. 아래의 오류가 발생한다.</p>
<pre><code>Error:(65) Error: "..." is not translated in "ko"</code></pre>
<p><code>values-ko/strings.xml</code> 파일에 모든 내용을 넣지 않고 필요한 부분만 넣었으므로 나머지 부분이 번역되지 않았다고 오류가 나는 것이다. 간단한 해결 방법은 <code>values-ko/strings.xml</code> 파일에 <code>values/strings.xml</code>의 내용을 모두 복사해 넣어준다. 그런데 이 방법은 싫다. 둘다 한국어인데 굳이 두군데를 관리하고 싶지 않다. 이런 경우라면 아래와 같이 <code>tools:ignore="MissingTranslation"</code>를 사용해서 문제를 해결할 수 있다.</p>
<p><strong>Strings.xml</strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>
    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">"http://schemas.android.com/tools"</span>
    <span class="hljs-attr">tools:ignore</span>=<span class="hljs-string">"MissingTranslation"</span>&gt;</span></pre>
<p>명확히 이 영역은 다국어 지원이 필요하지 않은 이므로 명시적으로 번역 누락을 무시하도록 하는 것이다. 어떻게 보면 상기 설명했던 오류를 무시하는 것과 같아 보일 수 있으나 이 방법은 무시할 범위를 명확히 인지하고 해당 영역만 필요에 의해 무시하도록 했다는 것이다.
단, 한가지 추가 작업이 필요하다. <code>values-ko/strings.xml</code> 파일에서 재정의 했던 항목들을 <code>values/strings.xml</code>에도 넣어주어야 한다는 것이다. 안그러면 아래와 같은 오류가 난다.</p>
<pre><code>Error:(3) Error: "XXX" is translated here but not found in default locale [ExtraTranslation]</code></pre>
<p>사실 불편함이 생기는 부분이지만 앞서 설명처럼 반대로 모두를 두군데서 관리하는 것보다 필요한 몇줄만 별도 관리하는 것을 선택했다.</p>
<p><strong>결론적으로 선택은 자유다. 위 방법들 중 필요에 맞게 선택해서 사용하면 되겠다.</strong></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/04/xcode-storyboard-with-uiviewcontroller-using-generics/</id><title type="html">Xcode 7.1의 StoryBoard에서 UIViewController(using Generics)를 Custom Class로 연결할 때 발생하는 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/04/xcode-storyboard-with-uiviewcontroller-using-generics/"/><published>2015-11-04T20:46:51+09:00</published><updated>2015-11-04T20:46:51+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[현재 xcode의 최신 버전은 7.1이다. 이 버전에서(이하 버전은 확인하지 못했다) 스토리보드와 Generics를 사용한 UIViewController를 연결하는 부분에서 버그가 있다. 버그는 인터페이스 빌더에서 찾지 못하는 문제와 강제 추가시 Unknown class <MyClass> in Interface Builder file 오류를 발생시키는 것이다. 자세한 내용은 아래에 설명하겠다. 일단 Generics가 어떤 것인지 정보를 더 얻고 싶다면 Swift - Generics 정리를 참고하자. 항상 이런 글을 쓰려고하면 상황을 설명하기가 어렵다. 그렇다고 설명없이 코드만 적어놓으면 어떻게 사용되는지를 알 수 없으니 일단 최선을 다해 보겠다. UIPageViewController를 사용하고자 하는 상황을 가정하고 설명한다. 스토리보드에서 "Page View Controller"를 추가했다. 그 다음에 해야할 작업은 UIPageViewController class를 하나 추가한다. 추가한 class를 인터페이스 빌더에서 Custom Class로 연결한다. 위 상황의 결과가 아래의 이미지다. UIPageViewController class로 PageViewController라는 class를 추가한 것이다. 비교를 위해 소스도 추가 한다. 사실 볼 것도 없다. 내부 기능은 설명에 필요하지 않아 모두 제거 했다. import UIKit class PageViewController: UIPageViewController { } 이 상황에서 빌드하고 실행하면 아무런 문제가 없다. 당연하다. 가장 일반적인 상황이니까. 이제부터가 내가 버그라고 주장하는 부분의 시작이다. 아래의 코드를 보자. import UIKit class PageViewController: UIPageViewController { } class PageViewControllerChild: PageViewController { } class PageViewControllerT<T>: UIPageViewController { } class PageViewControllerTChild: PageViewControllerT<String> { } 3개의 class를 추가했다. 하지만 여전히 아무런 기능은 없다. 이 상황에서 위의 이미지와 동일한 상황을 캡춰한 것이 아래 이미지다. 비교가 되는가? 달라진 점은 우측의 Custom Class 영역의 Class에서 선택할 수 있는 대상 Class 목록이다. 그런데 위의 소스를 자세히 보고 이 이미지를 봤다면 뭔가 이상함을 느낄 것이다. 바로 PageViewControllerTChild가 목록에 없다는 것이다. 내가 캡춰를 잘못한 것이 아니다. 실제로 나타나지 않는다. 그렇다면 이게 내가 말하고자 하는 버그인가? 아니다. 그냥 목록에만 나오지 않는 것이라면 조금 귀찮을 뿐 문제되지는 않는다. 자 이제 다시 테스트 해보자. 목록에는 없지만 실제로 class는 존재하므로 강제로 타이핑해서 PageViewControllerTChild를 집어 넣자. 다시 빌드하고 실행. 그런데 기존과 다르게 오류가 난다. 2015-11-04 21:08:24.886 Test[32048:90982] Unknown class _TtC4Test24PageViewControllerTChild in Interface Builder file. 앱을 죽이지는 않으나 해당 View가 아무것도 나오지 않는다. 오류의 내용은 인터페이스 빌더에서 알 수 없는 _TtC4Test24PageViewControllerTChild class에 접근 한다는 것. 이상한 일이다. 분명 해당 class는 존재한다. 오류에 나온 _TtC4Test24PageViewControllerTChild과 이름은 다르지만 분명 같은 class에 접근하려는 것이다. 이 문제가 바로 내가 버그라고 이야기하는 부분이다. 요약하자면 다음과 같다. Generics를 사용하는 UIViewController는 인터페이스 빌더에 연결되지 않는다. 이 문제 하나로 인해 인터페이스 빌더와 스토리보드를 다 걷어내거나 이것만 따로 처리하기는 싫다. 자.. 이제부터 그럼 해결을 해보자. 해결을 위해서는 원인을 알아야 한다. 중요한 내용은 “Unknown class in Interface Builder file” error at runtime에 설명되어 있다. 이 글은 내가 말하는 Generics와 관련된 상황이 아닌 조금 더 일반적인 상황에 대한 것으로 약간의 차이가 있다. 하지만 거의 유사하므로 해결에 도움을 얻을 수 있었다. 게다가 기본적인 설명은 Objective-C 기준으로 되어있고 swift의 경우는 init(coder aDecoder: NSCoder)를 추가하는 것으로 설명하고 있지만 이 것은 위 문제를 해결하는 것에는 도움이 되지 않는다. 어쨌든 이 글의 결론을 이야기 하자면 이렇다. 인터페이스 빌더에서 해당 class를 제대로 찾지 못하고 있기 때문에 linking이 제대로 되지 못하고 있다는 것이다. 따라서 해당 class에 직접 접근하는 코드를 넣어주어야 한다는 것이다. 그래서 이 글에서는 불필요한 함수 하나를 추가하고 사용 전에 강제로 호출함으로써 문제를 해결할 수 있다고 되어 있다. 위 글에서 설명한 것을 기초로 해결을 위한 코드는 다음과 같다. @UIApplicationMain class AppDelegate: UIResponder, UIApplicationDelegate { var window: UIWindow? // let x = PageViewControllerTChild.description() override init() { super.init() PageViewControllerTChild.description() } func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool { // Override point for customization after application launch. // PageViewControllerTChild.description() return true } } 해결 방법은 AppDelegate의 init() 내부에서 PageViewControllerTChild의 함수를 하나 호출한다. 호출하는 함수는 어떠한 것이라도 상관없다. 하지만 호출 시점은 아주 중요하다. 호출 시점은 해당 화면이 보여지기 전(초기화 전) 이어야 한다. 위 코드는 시작 화면으로 사용한 화면을 대상으로 하고 있기 때문에 init()에 추가 했다. 하지만 시작 화면이 아니라면 func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool에 추가되어도 상관없다. 하지만 어짜피 특별한 기능을 수행할 것이 아니므로 init()에 넣어주는게 속 편할 것이다. 앞서 설명과 같이 어떻게 넣을 수 있는지를 설명하기 위해서 비슷한 코드가 여러군데 있다(대신 주석으로 제외시켜 둔 것이다). 사실 나는 이 해결 방법을 고심해서 찾았지만 실제로는 적용하지 않았다. 설계 구조를 변경해서 Generics를 제거하는 쪽으로 결정했다. 필히 Generics이 필요한 상황이 아니었기 때문에 굳이 이렇게까지 할 필요는 없다고 생각했기 때문이다. 어쨌든 비슷한 문제를 겪고 있다면 위의 설명을 참고로 해결 방법을 찾길 바란다.]]></summary><content type="html"><![CDATA[<p>현재 xcode의 최신 버전은 7.1이다. 이 버전에서(이하 버전은 확인하지 못했다) 스토리보드와 <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html">Generics</a>를 사용한 UIViewController를 연결하는 부분에서 버그가 있다. 버그는 인터페이스 빌더에서 찾지 못하는 문제와 강제 추가시 <code>Unknown class &lt;MyClass&gt; in Interface Builder file</code> 오류를 발생시키는 것이다. 자세한 내용은 아래에 설명하겠다.</p>
<p>일단 <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html">Generics</a>가 어떤 것인지 정보를 더 얻고 싶다면 <a href="http://minsone.github.io/mac/ios/swift-generics-summary/">Swift - Generics 정리</a>를 참고하자.</p>
<p>항상 이런 글을 쓰려고하면 상황을 설명하기가 어렵다. 그렇다고 설명없이 코드만 적어놓으면 어떻게 사용되는지를 알 수 없으니 일단 최선을 다해 보겠다.</p>
<p>UIPageViewController를 사용하고자 하는 상황을 가정하고 설명한다.</p>
<ol>
<li>스토리보드에서 &quot;Page View Controller&quot;를 추가했다.</li>
<li>그 다음에 해야할 작업은 UIPageViewController class를 하나 추가한다.</li>
<li>추가한 class를 인터페이스 빌더에서 Custom Class로 연결한다.</li>
</ol>
<p>위 상황의 결과가 아래의 이미지다. UIPageViewController class로 PageViewController라는 class를 추가한 것이다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11/04-xcode-storyboard-with-uiviewcontroller-using-generics-1.png" alt="xcode" width="724" height="392" /></p>
<p>비교를 위해 소스도 추가 한다. 사실 볼 것도 없다. 내부 기능은 설명에 필요하지 않아 모두 제거 했다.</p>
<pre class="hljs swift"><span class="hljs-keyword">import</span> UIKit

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageViewController</span>: <span class="hljs-title">UIPageViewController</span> </span>{
}</pre>
<p>이 상황에서 빌드하고 실행하면 아무런 문제가 없다. 당연하다. 가장 일반적인 상황이니까.</p>
<p>이제부터가 내가 버그라고 주장하는 부분의 시작이다. 아래의 코드를 보자.</p>
<pre class="hljs swift"><span class="hljs-keyword">import</span> UIKit

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageViewController</span>: <span class="hljs-title">UIPageViewController</span> </span>{
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageViewControllerChild</span>: <span class="hljs-title">PageViewController</span> </span>{
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageViewControllerT</span>&lt;<span class="hljs-title">T</span>&gt;: <span class="hljs-title">UIPageViewController</span> </span>{
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageViewControllerTChild</span>: <span class="hljs-title">PageViewControllerT</span>&lt;<span class="hljs-title">String</span>&gt; </span>{
}</pre>
<p>3개의 class를 추가했다. 하지만 여전히 아무런 기능은 없다. 이 상황에서 위의 이미지와 동일한 상황을 캡춰한 것이 아래 이미지다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11/04-xcode-storyboard-with-uiviewcontroller-using-generics-2.png" alt="xcode" width="722" height="306" /></p>
<p>비교가 되는가? 달라진 점은 우측의 Custom Class 영역의 Class에서 선택할 수 있는 대상 Class 목록이다.
그런데 위의 소스를 자세히 보고 이 이미지를 봤다면 뭔가 이상함을 느낄 것이다.</p>
<p><strong>바로 <code>PageViewControllerTChild</code>가 목록에 없다는 것이다.</strong> 내가 캡춰를 잘못한 것이 아니다. 실제로 나타나지 않는다.</p>
<p>그렇다면 이게 내가 말하고자 하는 버그인가? 아니다. 그냥 목록에만 나오지 않는 것이라면 조금 귀찮을 뿐 문제되지는 않는다.
자 이제 다시 테스트 해보자. 목록에는 없지만 실제로 class는 존재하므로 강제로 타이핑해서 <code>PageViewControllerTChild</code>를 집어 넣자.
다시 빌드하고 실행. 그런데 기존과 다르게 오류가 난다.</p>
<pre><code>2015-11-04 21:08:24.886 Test[32048:90982] Unknown class _TtC4Test24PageViewControllerTChild in Interface Builder file.</code></pre>
<p>앱을 죽이지는 않으나 해당 View가 아무것도 나오지 않는다.
오류의 내용은 인터페이스 빌더에서 알 수 없는 <code>_TtC4Test24PageViewControllerTChild</code> class에 접근 한다는 것.
이상한 일이다. 분명 해당 class는 존재한다. 오류에 나온 <code>_TtC4Test24PageViewControllerTChild</code>과 이름은 다르지만 분명 같은 class에 접근하려는 것이다.
이 문제가 바로 내가 버그라고 이야기하는 부분이다.</p>
<p>요약하자면 다음과 같다. <strong>Generics를 사용하는 UIViewController는 인터페이스 빌더에 연결되지 않는다.</strong></p>
<p>이 문제 하나로 인해 인터페이스 빌더와 스토리보드를 다 걷어내거나 이것만 따로 처리하기는 싫다.
자.. 이제부터 그럼 해결을 해보자. 해결을 위해서는 원인을 알아야 한다.</p>
<p>중요한 내용은 <a href="http://stackoverflow.com/a/1725893">“Unknown class <MyClass> in Interface Builder file” error at runtime</a>에 설명되어 있다.
이 글은 내가 말하는 Generics와 관련된 상황이 아닌 조금 더 일반적인 상황에 대한 것으로 약간의 차이가 있다. 하지만 거의 유사하므로 해결에 도움을 얻을 수 있었다.
게다가 기본적인 설명은 Objective-C 기준으로 되어있고 swift의 경우는 <code>init(coder aDecoder: NSCoder)</code>를 추가하는 것으로 설명하고 있지만 이 것은 위 문제를 해결하는 것에는 도움이 되지 않는다.
어쨌든 이 글의 결론을 이야기 하자면 이렇다. 인터페이스 빌더에서 해당 class를 제대로 찾지 못하고 있기 때문에 linking이 제대로 되지 못하고 있다는 것이다.
따라서 해당 class에 직접 접근하는 코드를 넣어주어야 한다는 것이다. 그래서 이 글에서는 불필요한 함수 하나를 추가하고 사용 전에 강제로 호출함으로써 문제를 해결할 수 있다고 되어 있다.</p>
<p>위 글에서 설명한 것을 기초로 해결을 위한 코드는 다음과 같다.</p>
<pre class="hljs swift"><span class="hljs-meta">@UIApplicationMain</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppDelegate</span>: <span class="hljs-title">UIResponder</span>, <span class="hljs-title">UIApplicationDelegate</span> </span>{

    <span class="hljs-keyword">var</span> window: <span class="hljs-type">UIWindow</span>?
<span class="hljs-comment">//  let x = PageViewControllerTChild.description()</span>

    <span class="hljs-keyword">override</span> <span class="hljs-keyword">init</span>() {
        <span class="hljs-keyword">super</span>.<span class="hljs-keyword">init</span>()

        <span class="hljs-type">PageViewControllerTChild</span>.description()
    }

    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">application</span><span class="hljs-params">(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?)</span></span> -&gt; <span class="hljs-type">Bool</span> {
        <span class="hljs-comment">// Override point for customization after application launch.</span>

<span class="hljs-comment">//      PageViewControllerTChild.description()</span>

        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>
    }
}</pre>
<p><strong>해결 방법은 AppDelegate의 <code>init()</code> 내부에서 <code>PageViewControllerTChild</code>의 함수를 하나 호출한다.</strong></p>
<p>호출하는 함수는 어떠한 것이라도 상관없다. 하지만 호출 시점은 아주 중요하다. 호출 시점은 해당 화면이 보여지기 전(초기화 전) 이어야 한다.
위 코드는 시작 화면으로 사용한 화면을 대상으로 하고 있기 때문에 <code>init()</code>에 추가 했다. 하지만 시작 화면이 아니라면 <code>func application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool</code>에 추가되어도 상관없다. 하지만 어짜피 특별한 기능을 수행할 것이 아니므로 <code>init()</code>에 넣어주는게 속 편할 것이다. 앞서 설명과 같이 어떻게 넣을 수 있는지를 설명하기 위해서 비슷한 코드가 여러군데 있다(대신 주석으로 제외시켜 둔 것이다).</p>
<p>사실 나는 이 해결 방법을 고심해서 찾았지만 실제로는 적용하지 않았다. 설계 구조를 변경해서 Generics를 제거하는 쪽으로 결정했다. 필히 Generics이 필요한 상황이 아니었기 때문에 굳이 이렇게까지 할 필요는 없다고 생각했기 때문이다.</p>
<p>어쨌든 비슷한 문제를 겪고 있다면 위의 설명을 참고로 해결 방법을 찾길 바란다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/03/swift-uipagecontrol-overlap/</id><title type="html">Swift UIPageViewController에서 UIPageControl 오버랩하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/03/swift-uipagecontrol-overlap/"/><published>2015-11-03T17:12:21+09:00</published><updated>2015-11-03T17:12:21+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[UIPageViewController 사용시에 하단에 현재 페이지의 위치를 알려주는 UIPageControl가 별도의 공간을 차지하고 표시된다. 이 부분의 공간을 제거하고 내용 페이지의 위에 오버랩하려면 아래와 같이 viewDidLayoutSubviews에 필요한 소스를 추가하면 된다. 기본적으로 UIPageControl는 투명이라 자연스럽게 덮힌다. class PageViewController: UIPageViewController { override func viewDidLayoutSubviews() { // UIPageControl overlap let v = self.view let subviews = v.subviews var sv: UIView? = nil var pc: UIView? = nil for t: UIView in subviews { if (t.isKindOfClass(UIScrollView)) { sv = t } else if (t.isKindOfClass(UIPageControl)) { pc = t } } if ((sv != nil) && (pc != nil)) { sv!.frame = v.bounds v.bringSubviewToFront(pc!) } super.viewDidLayoutSubviews() } } Objective-c에서의 처리 방법은 How do I make the bottom bar with dots of a UIPageViewController translucent?를 참고.]]></summary><content type="html"><![CDATA[<p>UIPageViewController 사용시에 하단에 현재 페이지의 위치를 알려주는 UIPageControl가 별도의 공간을 차지하고 표시된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-03-swift-uipagecontrol-overlap-1.png" alt="UIPageControl" width="640" height="960" /></p>
<p>이 부분의 공간을 제거하고 내용 페이지의 위에 오버랩하려면 아래와 같이 <code>viewDidLayoutSubviews</code>에 필요한 소스를 추가하면 된다. 기본적으로 UIPageControl는 투명이라 자연스럽게 덮힌다.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageViewController</span>: <span class="hljs-title">UIPageViewController</span> </span>{
  <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">viewDidLayoutSubviews</span><span class="hljs-params">()</span></span> {
        <span class="hljs-comment">// UIPageControl overlap</span>
        <span class="hljs-keyword">let</span> v = <span class="hljs-keyword">self</span>.view
        <span class="hljs-keyword">let</span> subviews = v.subviews
        <span class="hljs-keyword">var</span> sv: <span class="hljs-type">UIView</span>? = <span class="hljs-literal">nil</span>
        <span class="hljs-keyword">var</span> pc: <span class="hljs-type">UIView</span>? = <span class="hljs-literal">nil</span>
        <span class="hljs-keyword">for</span> t: <span class="hljs-type">UIView</span> <span class="hljs-keyword">in</span> subviews {
            <span class="hljs-keyword">if</span> (t.isKindOfClass(<span class="hljs-type">UIScrollView</span>)) {
                sv = t
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (t.isKindOfClass(<span class="hljs-type">UIPageControl</span>)) {
                pc = t
            }
        }
        <span class="hljs-keyword">if</span> ((sv != <span class="hljs-literal">nil</span>) &amp;&amp; (pc != <span class="hljs-literal">nil</span>)) {
            sv!.frame = v.bounds
            v.bringSubviewToFront(pc!)
        }
        <span class="hljs-keyword">super</span>.viewDidLayoutSubviews()
    }
}</pre>
<p>Objective-c에서의 처리 방법은 <a href="http://stackoverflow.com/a/24851985">How do I make the bottom bar with dots of a UIPageViewController translucent?</a>를 참고.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/03/how-to-wait-for-android-runonuithread-to-be-finished/</id><title type="html">Android에서 runOnUiThread 작업이 종료 될 때까지 대기하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/03/how-to-wait-for-android-runonuithread-to-be-finished/"/><published>2015-11-03T15:04:46+09:00</published><updated>2015-11-03T15:04:46+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><category term="java" label="java" /><summary><![CDATA[아래에서 설명하고자 하는 내용을 뭐라고 표현 해야할지 몰라서 "Android에서 runOnUiThread 작업이 종료 될 때까지 대기하기"라고 글 제목을 정했다. 내용을 요약하자면 thread에서 wait()과 notify()를 이용해서 runOnUiThread 작업이 종료될 때까지 대기하도록 하는 것이다. 쉽게 말해서 runOnUiThread는 main thread에서 처리되므로 비동기로 처리되게 되는데 필요한 작업이 완료되기 전까지 다른 처리를 대기시키는 것이다. 이렇게 설명하는 것도 정확한 설명은 아니다. 그냥 내가 하고자 했던 의도를 설명하고자 한 것이다. 따라서 정확한 의미와는 차이가 있다. 설명하기 어려워 이리저리 이야기 했는데 그냥 내가 하고자 했던 상황을 설명하는게 이해에 도움이 될 것 같다. PagerAdapter를 사용하는 상황에서 java.lang.IllegalStateException: The application's PagerAdapter changed the adapter's contents without calling PagerAdapter#notifyDataSetChanged! 오류가 발생한다. 이 문제가 발생하는 원인은 notifyDataSetChanged 호출 후 적용되기 전에 PagerAdapter의 데이터가 변경되었기 때문이다. 보통의 경우 위의 상황이 자주 발생하지는 않는다. 나의 경우엔 PagerAdapter의 데이터가 UI에서 버튼 터치에 의해서 변경되는 상황이다. 상황을 조금 더 자세히 설명해야 할 것 같다. 화면 상에 버튼 A, B가 있다. A 버튼을 누르면 A 데이터 목록을 서버에서 가져와 PagerAdapter에 적용한다. B 버튼을 누르면 B 데이터 목록을 서버에서 가져와 PagerAdapter에 적용한다. A 버튼이 눌려진 후 서버에서 데이터를 가져와 PagerAdapter에 반영하고 notifyDataSetChanged()를 runOnUiThread 내부에서 호출했다. runOnUiThread 내부에서 호출하는 이유는 데이터의 변경시 UI가 변경되는 부분들이 있어서 main thread 오류를 막기 위해서 이다. notifyDataSetChanged()가 적용되기 전에 버튼 B가 눌려지고 데이터를 가져와 PagerAdapter에 반영되었다. notifyDataSetChanged()가 적용되면서 데이터의 변경을 감지하고 java.lang.IllegalStateException: The application's PagerAdapter changed the adapter's contents without calling PagerAdapter#notifyDataSetChanged! 오류가 발생한다. 설명이 되었을런지 모르겠다. 앞서 말한 것과 같이 자주 발생하는 상황은 아니나 A, B 버튼을 번갈아 빠르게 터치하면 오류를 재현할 수 있다. 소스 코드를 올리면 더 이해가 쉬울 수 있는데 작업중인 소스들이 모두 섞여 있어 구분해서 남기는게 힘들어서 말로 설명했다. 일단 기존 소스와 해결된 소스부터 보자. 당연히 동작하는 소스는 아니다. 하지만 무엇을 하고 있는지를 확인하는데는 충분할 것으로 본다. 오류가 발생하던 소스 public class PreviewPagerAdapterBase<T extends DataItem> extends PagerAdapter<T> { private final Runnable notifyDataSetChangedRunnalbe = ; public void setItems(List<T> items) { super.setItems(items); Helper.runOnUiThread(new Runnable() { @Override public void run() { notifyDataSetChanged(); synchronized (this) { this.notify(); } } }); } } 수정된 소스 public class PreviewPagerAdapterBase<T extends DataItem> extends PagerAdapter<T> { private final Runnable notifyDataSetChangedRunnalbe = new Runnable() { @Override public void run() { notifyDataSetChanged(); synchronized (this) { this.notify(); } } }; public boolean setItems(List<T> items) { super.setItems(items); synchronized (notifyDataSetChangedRunnalbe) { Helper.runOnUiThread(notifyDataSetChangedRunnalbe); try { notifyDataSetChangedRunnalbe.wait(); } catch (Exception e) { e.printStackTrace(); } } return hasFirstItem; } } 중요한 부분은 notifyDataSetChangedRunnalbe로 synchronized 처리하고 Runnable을 wait()한 다음 처리가 완료된 후 notify() 하는 것이다. 그리고 wait() 호출시 try 처리하고 있는데 InterruptedException이 발생할 수 있기 때문이다. 실제로 위에서 설명한 오류가 발생하는 상황에서는 InterruptedException이 대신 발생하는 것을 확인했다. 하지만 무시되어도 되는 상황이며 catch되었기 때문에 앱이 죽는 것은 막을 수 있다. wait()와 notify()에 대해서는 Thread(쓰레드) - 동기화(Synchronized) / wait()와 notify()를 참고하면 된다. 사실 위 방법은 how to wait for Android runOnUiThread to be finished?에서 참고한 것이다. 이 글을 보면 이 방법 외에도 여러가지 답변이 있다. 이 글은 정확한 이해를 하고 쓴 글이 아니므로 여러가지 문제가 있을 수 있다. 하지만 내가 원하는 문제에 대한 해결법이 되었기 때문에 기록성으로 글을 남겨둔다. 결론적으로 notifyDataSetChanged()를 명확히 적용하고 넘어 가야하는 상황에서는 위 방법이 도움이 될 수 있다. 그 외의 경우엔 UIThread의 작업을 굳이 sync 할 필요가 떠오르진 않는다.]]></summary><content type="html"><![CDATA[<p>아래에서 설명하고자 하는 내용을 뭐라고 표현 해야할지 몰라서 &quot;Android에서 runOnUiThread 작업이 종료 될 때까지 대기하기&quot;라고 글 제목을 정했다.
내용을 요약하자면 thread에서 wait()과 notify()를 이용해서 runOnUiThread 작업이 종료될 때까지 대기하도록 하는 것이다. 쉽게 말해서 runOnUiThread는 main thread에서 처리되므로 비동기로 처리되게 되는데 필요한 작업이 완료되기 전까지 다른 처리를 대기시키는 것이다. 이렇게 설명하는 것도 정확한 설명은 아니다. 그냥 내가 하고자 했던 의도를 설명하고자 한 것이다. 따라서 정확한 의미와는 차이가 있다.</p>
<p>설명하기 어려워 이리저리 이야기 했는데 그냥 내가 하고자 했던 상황을 설명하는게 이해에 도움이 될 것 같다.</p>
<blockquote>
<p>PagerAdapter를 사용하는 상황에서 <code>java.lang.IllegalStateException: The application's PagerAdapter changed the adapter's contents without calling PagerAdapter#notifyDataSetChanged!</code> 오류가 발생한다. 이 문제가 발생하는 원인은 notifyDataSetChanged 호출 후 적용되기 전에 PagerAdapter의 데이터가 변경되었기 때문이다.</p>
</blockquote>
<p>보통의 경우 위의 상황이 자주 발생하지는 않는다. 나의 경우엔 PagerAdapter의 데이터가 UI에서 버튼 터치에 의해서 변경되는 상황이다. 상황을 조금 더 자세히 설명해야 할 것 같다.</p>
<ul>
<li>
<p>화면 상에 버튼 A, B가 있다.</p>
</li>
<li>
<p>A 버튼을 누르면 A 데이터 목록을 서버에서 가져와 PagerAdapter에 적용한다.</p>
</li>
<li>
<p>B 버튼을 누르면 B 데이터 목록을 서버에서 가져와 PagerAdapter에 적용한다.</p>
</li>
<li>
<p>A 버튼이 눌려진 후 서버에서 데이터를 가져와 PagerAdapter에 반영하고 notifyDataSetChanged()를 runOnUiThread 내부에서 호출했다. runOnUiThread 내부에서 호출하는 이유는 데이터의 변경시 UI가 변경되는 부분들이 있어서 main thread 오류를 막기 위해서 이다.</p>
</li>
<li>
<p>notifyDataSetChanged()가 적용되기 전에 버튼 B가 눌려지고 데이터를 가져와 PagerAdapter에 반영되었다.</p>
</li>
<li>
<p>notifyDataSetChanged()가 적용되면서 데이터의 변경을 감지하고 <code>java.lang.IllegalStateException: The application's PagerAdapter changed the adapter's contents without calling PagerAdapter#notifyDataSetChanged!</code> 오류가 발생한다.</p>
</li>
</ul>
<p>설명이 되었을런지 모르겠다. 앞서 말한 것과 같이 자주 발생하는 상황은 아니나 A, B 버튼을 번갈아 빠르게 터치하면 오류를 재현할 수 있다. 소스 코드를 올리면 더 이해가 쉬울 수 있는데 작업중인 소스들이 모두 섞여 있어 구분해서 남기는게 힘들어서 말로 설명했다.</p>
<p>일단 기존 소스와 해결된 소스부터 보자. 당연히 동작하는 소스는 아니다. 하지만 무엇을 하고 있는지를 확인하는데는 충분할 것으로 본다.</p>
<p><strong>오류가 발생하던 소스</strong></p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PreviewPagerAdapterBase</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DataItem</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">PagerAdapter</span>&lt;<span class="hljs-title">T</span>&gt; </span>{
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Runnable notifyDataSetChangedRunnalbe = ;

  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setItems</span><span class="hljs-params">(List&lt;T&gt; items)</span> </span>{
    <span class="hljs-keyword">super</span>.setItems(items);

    Helper.runOnUiThread(<span class="hljs-keyword">new</span> Runnable() {
        <span class="hljs-meta">@Override</span>
        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{
            notifyDataSetChanged();
            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) {
                <span class="hljs-keyword">this</span>.notify();
            }
        }
    });
  }
}</pre>
<p><strong>수정된 소스</strong></p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PreviewPagerAdapterBase</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DataItem</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title">PagerAdapter</span>&lt;<span class="hljs-title">T</span>&gt; </span>{
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Runnable notifyDataSetChangedRunnalbe = <span class="hljs-keyword">new</span> Runnable() {
        <span class="hljs-meta">@Override</span>
        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{
            notifyDataSetChanged();
            <span class="hljs-keyword">synchronized</span> (<span class="hljs-keyword">this</span>) {
                <span class="hljs-keyword">this</span>.notify();
            }
        }
    };

  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">setItems</span><span class="hljs-params">(List&lt;T&gt; items)</span> </span>{
    <span class="hljs-keyword">super</span>.setItems(items);

    <span class="hljs-keyword">synchronized</span> (notifyDataSetChangedRunnalbe) {
      Helper.runOnUiThread(notifyDataSetChangedRunnalbe);
      <span class="hljs-keyword">try</span> {
        notifyDataSetChangedRunnalbe.wait();
      } <span class="hljs-keyword">catch</span> (Exception e) {
        e.printStackTrace();
      }
    }
    <span class="hljs-keyword">return</span> hasFirstItem;
  }
}</pre>
<p>중요한 부분은 notifyDataSetChangedRunnalbe로 synchronized 처리하고 Runnable을 wait()한 다음 처리가 완료된 후 notify() 하는 것이다. 그리고 wait() 호출시 try 처리하고 있는데 InterruptedException이 발생할 수 있기 때문이다. 실제로 위에서 설명한 오류가 발생하는 상황에서는 InterruptedException이 대신 발생하는 것을 확인했다. 하지만 무시되어도 되는 상황이며 catch되었기 때문에 앱이 죽는 것은 막을 수 있다.</p>
<p>wait()와 notify()에 대해서는 <a href="http://warmz.tistory.com/370">Thread(쓰레드) - 동기화(Synchronized) / wait()와 notify()</a>를 참고하면 된다.</p>
<p>사실 위 방법은 <a href="http://stackoverflow.com/a/5996961">how to wait for Android runOnUiThread to be finished?</a>에서 참고한 것이다. 이 글을 보면 이 방법 외에도 여러가지 답변이 있다.</p>
<p>이 글은 정확한 이해를 하고 쓴 글이 아니므로 여러가지 문제가 있을 수 있다. 하지만 내가 원하는 문제에 대한 해결법이 되었기 때문에 기록성으로 글을 남겨둔다.
결론적으로 notifyDataSetChanged()를 명확히 적용하고 넘어 가야하는 상황에서는 위 방법이 도움이 될 수 있다. 그 외의 경우엔 UIThread의 작업을 굳이 sync 할 필요가 떠오르진 않는다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/03/android-dot-view-dot-windowmanager/</id><title type="html">android.view.WindowManager$BadTokenException: Unable to add window 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/03/android-dot-view-dot-windowmanager/"/><published>2015-11-03T09:00:30+09:00</published><updated>2015-11-03T09:00:30+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 아래와 같은 오류가 나는 경우가 있다. android.view.WindowManager$BadTokenException: Unable to add window -- token android.os.BinderProxy@420d8488 is not valid; is your activity running? 대부분은 Dialog를 띄우러고 할 때 발생한다. 소스로 보자면 아래와 같은 경우다. new AlertDialog.Builder(context) .setTitle("알림") .setMessage("알림 메시지") .setNegativeButton("취소", null) .show(); 위 소스를 실행 했을 때 BadTokenException 오류가 발생한다면 대부분은 context에 Activity Context를 넣지 않고 Application Context를 넣었을 경우다. 이와 관련해서 안드로이드에서 Dialog 사용시 WindowManager$BadTokenException 발생이라는 글을 적은 적이 있었다. 이런 경우라면 처음부터 오류가 발생하기 때문에 발견하고 수정하기가 쉽다. 그런데 분명 Activity Context를 넣어주었음에도 불구하고 불특정하게 오류가 발생하는 상황이 있다. 나의 경우는 다음과 같은 상황에서 이 문제가 발생했다. 앱 시작시 splash 화면에서 네트워크 활성 여부를 검사해서 비활성(서버 접속 불가)되어 있다면 알림 Dialog를 띄우고 앱을 종료하도록 했다. 그런데 여기서 불특정하게 오류가 발생하여 앱이 알림 Dialog를 띄우지 못하고 죽어 버리는 현상이 발생했다. ACRA를 통해 보고된 오류 메시지를 확인하니 위에서 언급했던 오류가 발생하고 있었다. 그래서 원인을 찾기 위해 소스 코드를 확인해 보았으나 아무리 봐도 문제가 될 부분을 찾을 수 없었다. 그래서 구글에서 관련 정보를 찾아보니 “android.view.WindowManager$BadTokenException: Unable to add window” on buider.show()에 원인과 해결 방법이 나와 있었다. 결론은 context의 null 검사 뿐만 아니라 isFinishing()도 함께 검사 해줘야 한다는 것이다. 적용된 코드는 아래와 같다. if ((context != null) && (!context.isFinishing())) { new AlertDialog.Builder(context) .setTitle("알림") .setMessage("알림 메시지") .setNegativeButton("취소", null) .show(); } 사실 이것 만으로 오류가 모두 해결된 것인지는 확인하지 못했다(오류 재현이 너무 힘들다). 하지만 안드로이드에서 발생하는 비슷한 다른 오류들을 감안하면 이것이 원인이 맞을 것이라고 생각한다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 아래와 같은 오류가 나는 경우가 있다.</p>
<p><code>android.view.WindowManager$BadTokenException: Unable to add window -- token android.os.BinderProxy@420d8488 is not valid; is your activity running?</code></p>
<p>대부분은 Dialog를 띄우러고 할 때 발생한다. 소스로 보자면 아래와 같은 경우다.</p>
<pre class="hljs java"><span class="hljs-keyword">new</span> AlertDialog.Builder(context)
    .setTitle(<span class="hljs-string">"알림"</span>)
    .setMessage(<span class="hljs-string">"알림 메시지"</span>)
    .setNegativeButton(<span class="hljs-string">"취소"</span>, <span class="hljs-keyword">null</span>)
    .show();</pre>
<p>위 소스를 실행 했을 때 BadTokenException 오류가 발생한다면 대부분은 context에 Activity Context를 넣지 않고 Application Context를 넣었을 경우다. 이와 관련해서 <a href="https://blog.asamaru.net/2015/09/04/android-dialog-windowmanager-badtokenexception/">안드로이드에서 Dialog 사용시 WindowManager$BadTokenException 발생</a>이라는 글을 적은 적이 있었다. 이런 경우라면 처음부터 오류가 발생하기 때문에 발견하고 수정하기가 쉽다.</p>
<p>그런데 분명 Activity Context를 넣어주었음에도 불구하고 불특정하게 오류가 발생하는 상황이 있다. 나의 경우는 다음과 같은 상황에서 이 문제가 발생했다.</p>
<p>앱 시작시 splash 화면에서 네트워크 활성 여부를 검사해서 비활성(서버 접속 불가)되어 있다면 알림 Dialog를 띄우고 앱을 종료하도록 했다. 그런데 여기서 불특정하게 오류가 발생하여 앱이 알림 Dialog를 띄우지 못하고 죽어 버리는 현상이 발생했다.</p>
<p>ACRA를 통해 보고된 오류 메시지를 확인하니 위에서 언급했던 오류가 발생하고 있었다. 그래서 원인을 찾기 위해 소스 코드를 확인해 보았으나 아무리 봐도 문제가 될 부분을 찾을 수 없었다. 그래서 구글에서 관련 정보를 찾아보니 <a href="http://stackoverflow.com/a/18665887">“android.view.WindowManager$BadTokenException: Unable to add window” on buider.show()</a>에 원인과 해결 방법이 나와 있었다.</p>
<p>결론은 context의 null 검사 뿐만 아니라  <a href="http://developer.android.com/intl/ko/reference/android/app/Activity.html#isFinishing%28%29">isFinishing()</a>도 함께 검사 해줘야 한다는 것이다.</p>
<p>적용된 코드는 아래와 같다.</p>
<pre class="hljs java"><span class="hljs-keyword">if</span> ((context != <span class="hljs-keyword">null</span>) &amp;&amp; (!context.isFinishing())) {
  <span class="hljs-keyword">new</span> AlertDialog.Builder(context)
      .setTitle(<span class="hljs-string">"알림"</span>)
      .setMessage(<span class="hljs-string">"알림 메시지"</span>)
      .setNegativeButton(<span class="hljs-string">"취소"</span>, <span class="hljs-keyword">null</span>)
      .show();  
}</pre>
<p>사실 이것 만으로 오류가 모두 해결된 것인지는 확인하지 못했다(오류 재현이 너무 힘들다).   하지만 안드로이드에서 발생하는 비슷한 다른 오류들을 감안하면 이것이 원인이 맞을 것이라고 생각한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/02/android-spans-a-powerful-concept/</id><title type="html">Android : Spans, a Powerful Concept</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/02/android-spans-a-powerful-concept/"/><published>2015-11-02T20:12:10+09:00</published><updated>2015-11-02T20:12:10+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드의 Spannable에 관련된 좋은 글이 있어 번역해 본다. 사실 부족한 영어 실력으로 번역이라기 보다 내용을 옮겨보는 정도라고 생각하면 될 듯하다(의역이 많다). Spans, a Powerful Concept. Jan 31st, 2014 6:09 pm Github Sample : flavienlaurent/spans 최근에, 나는 NewStand 앱과 ActionBar icon의 전환 효과에 대해 블로그에 남겼다. Cyril Mottier는 ActionBar의 title에 Spans을 사용하여 fade in/out하는 우아한 방법을 제안했다. 또한, 난 항상 사용 가능한 모든 종류의 Span(ImageSpan, BackgroundColorSpan 등)을 시도하고 싶었다. 그것들은 매우 유용하고 사용이 간단하지만 그것들에 대한 문서나 자세한 정보가 없었다. 그래서 이 문서에는 프레임워크의 Spans으로 무엇을 할 수 있는지 탐색하고, Spans으로 어떠한 새로운 것을 할 수 있는지 보여주고자 한다. sample application를 다운받아 설치할 수 있다. 여기에서 source를 확인 할 수 있다. In the framework HIERARCHY Main rules: Span이 텍스트 문자 레벨에 영향을 미칠 경우, CharacterStyle를 상속 Span이 단락 레벨에 영향을 미칠 경우, ParagraphStyle를 상속 Span이 텍스트 문자 레벨의 외형에 영향을 미칠 경우, UpdateAppearance를 상속 Span이 단락 레벨의 외형에 영향을 미칠 경우, UpdateLayout를 상속 그것은 우리를 위해 다음과 같은 클래스 다이어그램을 제공합니다 : 그러나 이것은 조금 복잡하기 때문에 나는 class visualizer (like this)를 사용하길 권한다. How it works? LAYOUT 당신이 text를 TextView에 설정하고자 할때, Layout base class를 사용하여 텍스트 렌더링을 관리한다. Layout Class는 mSpannedText라는 boolean 값을 포함하고 있다: text가 Spanned(Spanned을 구현한 SpannableString)의 인스턴스라면 true가 된다. 이 Class는 오직 ParagraphStyle Spans에만 동작한다. draw method는 2개의 다른 method들을 호출한다: drawBackground 텍스트의 각 행에 대해, 현재 행에 LineBackgroundSpan가 있는 경우, LineBackgroundSpan#drawBackground가 호출된다. drawText 텍스트의 각 행에 대해, LeadingMarginSpan과 LeadingMarginSpan2를 계산하고 필요하다면 LeadingMarginSpan#drawLeadingMargin를 호출한다. 이것은 또한 AlignmentSpan를 텍스트 맞춤을 결정 하는 데 사용 된다. 마지막으로, 현재 행이 스팬인 경우, 레이아웃은 TextLine#draw(텍스트 라인 개체가 각 행에 대해 생성된다)을 호출 한다. TEXTLINE 문서에서는 android.text.TextLine 다음과 같이 설명한다: 시각적 순서의 측정과 렌더링을 위한 스타일 텍스트 행을 나타낸다. TextLine 클래스는 3세트의 Spans을 포함한다: MetricAffectingSpan set CharacterStyle set ReplacementSpan set 흥미로운 메소드는 TextLine#handleRun이다. 그것은 모든 스팬이 텍스트를 렌더링하는데 사용된다. 스팬의 유형을 기준으로 TextLine은 아래의 함수를 호출한다: CharacterStyle#updateDrawState to change the TextPaint configuration for MetricAffectingSpan and CharacterStyle Spans. TextLine#handleReplacement for ReplacementSpan. It calls Replacement#getSize to get the replacement width, update the font metrics if it’s needed and finally call Replacement#draw. FONTMETRICS 폰트 메트릭에 대해 더 알고 싶다면 다음의 그림을 보자: Playground BULLETSPAN android.text.style.BulletSpan The BulletSpan affects paragraph-level text formatting. It allows you to put a bullet on paragraph start. BulletSpan은 텍스트 단락 수준 서식에 영향을 준다. 그것은 단락 시작에 bullet을 넣을 수 있도록 해준다. /* public BulletSpan (int gapWidth, int color) -gapWidth: gap in px between bullet and text -color: bullet color (optionnal, default is transparent) */ //create a black BulletSpan with a gap of 15px span = new BulletSpan(15, Color.BLACK); QUOTESPAN android.text.style.QuoteSpan QuoteSpan은 텍스트 단락 수준 서식에 영향을 준다. 그것은 당신이 단락에 인용 수직선을 넣을 수 있도록 해준다. /* public QuoteSpan (int color) -color: quote vertical line color (optionnal, default is Color.BLUE) */ //create a red quote span = new QuoteSpan(Color.RED); ALIGNMENTSPAN.STANDARD android.text.style.AlignmentSpan.Standard AlignmentSpan.Standard은 텍스트 단락 수준 서식에 영향을 준다. 그것은 문단을 정렬(일반, 중앙, 반대) 할 수 있도록 해준다. 그것은 정렬 수 있습니다 (정상, 센터, 반대)는 단락. /* public Standard(Layout.Alignment align) -align: alignment to set */ //align center a paragraph span = new AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER); UNDERLINESPAN android.text.style.UnderlineSpan UnderlineSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 Paint#setUnderlineText(true)을 통해 문자에 밑줄을 넣을 수 있도록 해준다. //underline a character span = new UnderlineSpan(); STRIKETHROUGHSPAN android.text.style.StrikethroughSpan StrikethroughSpan 은 텍스트 글자 수준 서식에 영향을 준다. 그것은 Paint#setStrikeThruText(true)을 통해 문자에 취소선을 넣을 수 있도록 해준다. //strikethrough a character span = new StrikethroughSpan(); SUBSCRIPTSPAN android.text.style.SubscriptSpan SubscriptSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 TextPaint#baselineShift를 감소시켜 아래 첨자 문자를 넣을 수 있도록 해준다. //subscript a character span = new SubscriptSpan(); SUPERSCRIPTSPAN android.text.style.SuperscriptSpan SuperscriptSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 TextPaint#baselineShift를 증가시켜 위 첨자 문자를 넣을 수 있도록 해준다. //superscript a character span = new SuperscriptSpan(); BACKGROUNDCOLORSPAN android.text.style.BackgroundColorSpan BackgroundColorSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 문자의 배경색을 넣을 수 있도록 해준다. /* public BackgroundColorSpan (int color) -color: background color */ //set a green background span = new BackgroundColorSpan(Color.GREEN); FOREGROUNDCOLORSPAN android.text.style.ForegroundColorSpan ForegroundColorSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 문자의 글자색을 넣을 수 있도록 해준다. /* public ForegroundColorSpan (int color) -color: foreground color */ //set a red foreground span = new ForegroundColorSpan(Color.RED); IMAGESPAN android.text.style.ImageSpan ImageSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 이미지를 글자처럼 넣을 수 있도록 해준다. 그것은 문서화를 잘 할 수 있도록 해주는 몇 안되는 스팬 중 하나다. //replace a character by pic1_small image span = new ImageSpan(this, R.drawable.pic1_small); STYLESPAN android.text.style.StyleSpan StyleSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자에 스타일(bold, italic, normal)을 넣을 수 있도록 해준다. /* public StyleSpan (int style) -style: int describing the style (android.graphics.Typeface) */ //set a bold+italic style span = new StyleSpan(Typeface.BOLD | Typeface.ITALIC); TYPEFACESPAN android.text.style.TypefaceSpan TypefaceSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것의 글자의 폰트 패밀리(monospace, serif etc)를 지정할 수 있도록 해준다. /* public TypefaceSpan (String family) -family: a font family */ //set the serif family span = new TypefaceSpan("serif"); TEXTAPPEARANCESPAN android.text.style.TextAppearanceSpan TextAppearanceSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자의 appearance를 지정할 수 있도록 해준다. /* public TextAppearanceSpan(Context context, int appearance, int colorList) -context: a valid context -appearance: text appearance resource (ex: android.R.style.TextAppearance_Small) -colorList: a text color resource (ex: android.R.styleable.Theme_textColorPrimary) public TextAppearanceSpan(String family, int style, int size, ColorStateList color, ColorStateList linkColor) -family: a font family -style: int describing the style (android.graphics.Typeface) -size: text size -color: a text color -linkColor: a link text color */ //set the serif family span = new TextAppearanceSpan(this/*a context*/, R.style.SpecialTextAppearance); styles.xml <style name="SpecialTextAppearance" parent="@android:style/TextAppearance"> <item name="android:textColor">@color/color1</item> <item name="android:textColorHighlight">@color/color2</item> <item name="android:textColorHint">@color/color3</item> <item name="android:textColorLink">@color/color4</item> <item name="android:textSize">28sp</item> <item name="android:textStyle">italic</item> </style> ABSOLUTESIZESPAN android.text.style.AbsoluteSizeSpan AbsoluteSizeSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자의 절대 크기를 지정할 수 있도록 해준다. /* public AbsoluteSizeSpan(int size, boolean dip) -size: a size -dip: false, size is in px; true, size is in dip (optionnal, default false) */ //set text size to 24dp span = new AbsoluteSizeSpan(24, true); RELATIVESIZESPAN android.text.style.RelativeSizeSpan RelativeSizeSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자의 상대 크기를 지정할 수 있도록 해준다. /* public RelativeSizeSpan(float proportion) -proportion: a proportion of the actual text size */ //set text size 2 times bigger span = new RelativeSizeSpan(2.0f); SCALEXSPAN android.text.style.ScaleXSpan ScaleXSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자의 x 축 방향에 설정된 배율을 지정할 수 있도록 해준다. /* public ScaleXSpan(float proportion) -proportion: a proportion of actual text scale x */ //scale x 3 times bigger span = new ScaleXSpan(3.0f); MASKFILTERSPAN android.text.style.MaskFilterSpan MaskFilterSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자에 android.graphics.MaskFilter를 설정할 수 있도록 해준다. 주의: BlurMaskFilter 는 hardware acceleration을 지원하지 않는다. /* public MaskFilterSpan(MaskFilter filter) -filter: a filter to apply */ //Blur a character span = new MaskFilterSpan(new BlurMaskFilter(density*2, BlurMaskFilter.Blur.NORMAL)); //Emboss a character span = new MaskFilterSpan(new EmbossMaskFilter(new float[] { 1, 1, 1 }, 0.4f, 6, 3.5f)); BlurMaskFilter EmbossMaskFilter와 함께 blue ForegroundColorSpan과 bold StyleSpan 고급 스팬(Pushing Spans to the next level) 글자색(FOREGROUND COLOR) 애니메이션 ForegroundColorSpan은 읽기 전용이다. 그것은 인스턴스화된 후에는 글자색을 변경할 수 없다는 뜻이다. 따라서 처음으로 할 일은 MutableForegroundColorSpan을 작성하는 것이다. MutableForegroundColorSpan.java public class MutableForegroundColorSpan extends ForegroundColorSpan { private int mAlpha = 255; private int mForegroundColor; public MutableForegroundColorSpan(int alpha, int color) { super(color); mAlpha = alpha; mForegroundColor = color; } public MutableForegroundColorSpan(Parcel src) { super(src); mForegroundColor = src.readInt(); mAlpha = src.readInt(); } public void writeToParcel(Parcel dest, int flags) { super.writeToParcel(dest, flags); dest.writeInt(mForegroundColor); dest.writeFloat(mAlpha); } @Override public void updateDrawState(TextPaint ds) { ds.setColor(getForegroundColor()); } /** * @param alpha from 0 to 255 */ public void setAlpha(int alpha) { mAlpha = alpha; } public void setForegroundColor(int foregroundColor) { mForegroundColor = foregroundColor; } public float getAlpha() { return mAlpha; } @Override public int getForegroundColor() { return Color.argb(mAlpha, Color.red(mForegroundColor), Color.green(mForegroundColor), Color.blue(mForegroundColor)); } } 이제 우리는 같은 인스턴스에서 투명도 또는 글자색을 변경할 수 있다. 그러나 그 속성을 설정할 때 그것은 View를 갱신하지 않는다: 직접 SpannableString을 다시 설정해 주어야 한다. MutableForegroundColorSpan span = new MutableForegroundColorSpan(255, Color.BLACK); spannableString.setSpan(span, 0, text.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); textView.setText(spannableString); //here the text is black and fully opaque span.setAlpha(100); span.setForegroundColor(Color.RED); //here the text hasn't changed. textView.setText(spannableString); //finally, the text is red and translucent 이제 우리는 글자색을 애니메이션하기를 원한다. 우리는 android.util.Property를 사용하여 커스텀 해야 한다. private static final Property<MutableForegroundColorSpan, Integer> MUTABLE_FOREGROUND_COLOR_SPAN_FC_PROPERTY = new Property<MutableForegroundColorSpan, Integer>(Integer.class, "MUTABLE_FOREGROUND_COLOR_SPAN_FC_PROPERTY") { @Override public void set(MutableForegroundColorSpan span, Integer value) { span.setForegroundColor(value); } @Override public Integer get(MutableForegroundColorSpan span) { return span.getForegroundColor(); } }; 마지막으로 우리는 ObjectAnimator를 이용하여 custom property를 애니메이션 한다. View를 갱신하는 것을 잊지마라. MutableForegroundColorSpan span = new MutableForegroundColorSpan(255, Color.BLACK); mSpannableString.setSpan(span, 0, text.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); ObjectAnimator objectAnimator = ObjectAnimator.ofInt(span, MUTABLE_FOREGROUND_COLOR_SPAN_FC_PROPERTY, Color.BLACK, Color.RED); objectAnimator.setEvaluator(new ArgbEvaluator()); objectAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator animation) { //refresh mText.setText(mSpannableString); } }); objectAnimator.start(); ACTIONBAR ‘FIREWORKS’ ‘fireworks’ 애니메이션은 무작위를 글자를 fade 하도록 한다. 먼저 글자를 다수의 Span으로 분리하여(예를 들어, 글자 단위로 하나의 스팬을 생성) 스팬을 적용하고 fade 한다. 앞서 소개한 MutableForegroundColorSpan을 사용하여, 스팬 그룹을 표현하기 위한 특별한 객체를 만들 것이다. 그리고 그룹에 setAlpha 호출할 때마다, 우리는 무작위로 각 범위에 대한 투명도를 설정한다. private static final class FireworksSpanGroup { private final float mAlpha; private final ArrayList<MutableForegroundColorSpan> mSpans; private FireworksSpanGroup(float alpha) { mAlpha = alpha; mSpans = new ArrayList<MutableForegroundColorSpan>(); } public void addSpan(MutableForegroundColorSpan span) { span.setAlpha((int) (mAlpha * 255)); mSpans.add(span); } public void init() { Collections.shuffle(mSpans); } public void setAlpha(float alpha) { int size = mSpans.size(); float total = 1.0f * size * alpha; for(int index = 0 ; index < size; index++) { MutableForegroundColorSpan span = mSpans.get(index); if(total >= 1.0f) { span.setAlpha(255); total -= 1.0f; } else { span.setAlpha((int) (total * 255)); total = 0.0f; } } } public float getAlpha() { return mAlpha; } } 우리는 FireworksSpanGroup의 알파 애니메이션에 사용자 정의 속성을 만든다. private static final Property<FireworksSpanGroup, Float> FIREWORKS_GROUP_PROGRESS_PROPERTY = new Property<FireworksSpanGroup, Float>(Float.class, "FIREWORKS_GROUP_PROGRESS_PROPERTY") { @Override public void set(FireworksSpanGroup spanGroup, Float value) { spanGroup.setProgress(value); } @Override public Float get(FireworksSpanGroup spanGroup) { return spanGroup.getProgress(); } }; 마지막으로, 우리는 그룹을 만들고 ObjectAnimator으로 애니메이션 한다. final FireworksSpanGroup spanGroup = new FireworksSpanGroup(); //init the group with multiple spans //spanGroup.addSpan(span); //set spans on the ActionBar spannable title //mActionBarTitleSpannableString.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE); spanGroup.init(); ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(spanGroup, FIREWORKS_GROUP_PROGRESS_PROPERTY, 0.0f, 1.0f); objectAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() { @Override public void onAnimationUpdate(ValueAnimator animation) { //refresh the ActionBar title setTitle(mActionBarTitleSpannableString); } }); objectAnimator.start(); 나만의 스팬으로 그리기(DRAW WITH YOUR OWN SPAN) 이 섹션에서는 사용자 정의 스팬을 통해 그리는 방법을 설명 할 것이다. 이것은 텍스트 사용자 정의에 대한 흥미로운 관점을 열어줄 것이다. 첫째, 우리는 추상 클래스 ReplacementSpan을 확장하는 커스텀 스팬을 만들어야 한다. 당신이 오직 custom background를 그리기만 원하는 경우, 텍스트 단락 수준 서식인 LineBackgroundSpan을 구현할 수 있다. 우리는 2개의 methods를 구현해야 한다: getSize: 이 method는 당신이 변경한 새로운 크기를 반환한다. text: 스팬에서 관리하는 문자열 start: 문자열의 시작 위치 end: 문자열의 종료 위치 fm: font metrics(null을 넣을 수 있다) draw: 당신이 Canvas를 이용해 그릴 수 있는 곳이다. x: 문자열이 draw 될 좌표(x-coordinate) top: 라인의 top y: baseline bottom: 라인의 bottom 텍스트를 둘러싸는 파란 사각형을 그리는 예제를 보자. @Override public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) { //return text with relative to the Paint mWidth = (int) paint.measureText(text, start, end); return mWidth; } @Override public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) { //draw the frame with custom Paint canvas.drawRect(x, top, x + mWidth, bottom, mPaint); } BONUS 샘플 앱에는 아래와 같은 예시가 포함되어 있다: Progressive blur Typewriter 결론 이 문서에서 작업, 나는 스팬 정말 강력하고 드로어 블 Drawable들처럼, 나는 그들이 충분히 사용하지 않는 생각을 깨달았다. 텍스트 응용 프로그램의 주요 내용, 그것은 사방 그래서 스팬과 더 역동적이고 매력적으로 만들 것을 잊지 마세요있다! 이 문서 작업, 깨달았다 범위는 정말 강력 하 고 Drawables, 같은 그들이 생각 하지 충분히 사용. 텍스트는 응용 프로그램의 주요 내용, 그것은 어디에 나 그래서 더 역동적이 고 매력적인 걸쳐 그것을 확인 하는 것을 잊지 마세요! 이 문서를 작성하면서 스팬은 정말 강력하지만 그들은 Drawables처럼 충분히 사용하지 않는다는 것을 깨달았다. 텍스트는 어플리케이션의 메인 콘텐츠다. 그것은 어디에나 있다. 그러니 텍스트를 스팬을 통해 역동적이고 매력적으로 만들 수 있다는 것을 잊지마라!]]></summary><content type="html"><![CDATA[<p>안드로이드의 <a href="http://developer.android.com/intl/ru/reference/android/text/Spannable.html">Spannable</a>에 관련된 좋은 글이 있어 번역해 본다.
사실 부족한 영어 실력으로 번역이라기 보다 내용을 옮겨보는 정도라고 생각하면 될 듯하다(의역이 많다).</p>
<blockquote>
<p><a href="http://flavienlaurent.com/blog/2014/01/31/spans/">Spans, a Powerful Concept.</a><br />
Jan 31st, 2014 6:09 pm<br />
<a href="https://github.com/flavienlaurent/spans">Github Sample : flavienlaurent/spans</a></p>
</blockquote>
<p>최근에, 나는 NewStand 앱과 ActionBar icon의 전환 효과에 대해 블로그에 남겼다. Cyril Mottier는 ActionBar의 title에 Spans을 사용하여 fade in/out하는 우아한 방법을 제안했다.</p>
<p>또한, 난 항상 사용 가능한 모든 종류의 Span(ImageSpan, BackgroundColorSpan 등)을 시도하고 싶었다. 그것들은 매우 유용하고 사용이 간단하지만 그것들에 대한 문서나 자세한 정보가 없었다.</p>
<p>그래서 이 문서에는 프레임워크의 Spans으로 무엇을 할 수 있는지 탐색하고, Spans으로 어떠한 새로운 것을 할 수 있는지 보여주고자 한다. <a href="https://github.com/flavienlaurent/spans/raw/master/sample.apk">sample application</a>를 다운받아 설치할 수 있다. 여기에서 <a href="https://github.com/flavienlaurent/spans">source</a>를 확인 할 수 있다.</p>
<h2>In the framework</h2>
<h3>HIERARCHY</h3>
<p>Main rules:</p>
<ul>
<li>Span이 텍스트 문자 레벨에 영향을 미칠 경우, <a href="http://developer.android.com/reference/android/text/style/CharacterStyle.html">CharacterStyle</a>를 상속</li>
<li>Span이 단락 레벨에 영향을 미칠 경우, <a href="http://developer.android.com/reference/android/text/style/ParagraphStyle.html">ParagraphStyle</a>를 상속</li>
<li>Span이 텍스트 문자 레벨의 외형에 영향을 미칠 경우,
<a href="http://developer.android.com/reference/android/text/style/UpdateAppearance.html">UpdateAppearance</a>를 상속</li>
<li>Span이 단락 레벨의 외형에 영향을 미칠 경우, <a href="http://developer.android.com/reference/android/text/style/UpdateLayout.html">UpdateLayout</a>를 상속</li>
</ul>
<p>그것은 우리를 위해 다음과 같은 클래스 다이어그램을 제공합니다 :</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-1.png" alt="cdcharacterstyle" width="1130" height="264" /></p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-2.png" alt="cdparagraphstyle" width="783" height="275" /></p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-3.png" alt="cdupdateappearance" width="996" height="275" /></p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-4.png" alt="cdupdatelayout" width="261" height="501" /></p>
<p>그러나 이것은 조금 복잡하기 때문에 나는 class visualizer (like <a href="http://www.class-visualizer.net/">this</a>)를 사용하길 권한다.</p>
<h2>How it works?</h2>
<h3>LAYOUT</h3>
<p>당신이 text를 TextView에 설정하고자 할때, <a href="http://developer.android.com/reference/android/text/Layout.html">Layout</a> base class를 사용하여 텍스트 렌더링을 관리한다.</p>
<p>Layout Class는 <code>mSpannedText</code>라는 boolean 값을 포함하고 있다: text가 <a href="http://developer.android.com/reference/android/text/Spanned.html">Spanned</a>(<a href="http://developer.android.com/reference/android/text/Spanned.html">Spanned</a>을 구현한 <a href="http://developer.android.com/reference/android/text/SpannableString.html">SpannableString</a>)의 인스턴스라면 true가 된다.
이 Class는 오직 ParagraphStyle Spans에만 동작한다.</p>
<p><a href="http://developer.android.com/reference/android/text/Layout.html#draw%28android.graphics.Canvas,%20android.graphics.Path,%20android.graphics.Paint,%20int%29">draw</a> method는 2개의 다른 method들을 호출한다:</p>
<ul>
<li>drawBackground</li>
</ul>
<p>텍스트의 각 행에 대해, 현재 행에  <a href="http://developer.android.com/reference/android/text/style/LineBackgroundSpan.html">LineBackgroundSpan</a>가 있는 경우, <a href="http://developer.android.com/reference/android/text/style/LineBackgroundSpan.html#drawBackground%28android.graphics.Canvas,%20android.graphics.Paint,%20int,%20int,%20int,%20int,%20int,%20java.lang.CharSequence,%20int,%20int,%20int%29">LineBackgroundSpan#drawBackground</a>가 호출된다.</p>
<ul>
<li>drawText</li>
</ul>
<p>텍스트의 각 행에 대해, <a href="http://developer.android.com/reference/android/text/style/LeadingMarginSpan.html">LeadingMarginSpan</a>과 <a href="http://developer.android.com/reference/android/text/style/LeadingMarginSpan.LeadingMarginSpan2.html">LeadingMarginSpan2</a>를 계산하고 필요하다면 <a href="http://developer.android.com/reference/android/text/style/LeadingMarginSpan.html#drawLeadingMargin%28android.graphics.Canvas,%20android.graphics.Paint,%20int,%20int,%20int,%20int,%20int,%20java.lang.CharSequence,%20int,%20int,%20boolean,%20android.text.Layout%29">LeadingMarginSpan#drawLeadingMargin</a>를 호출한다. 이것은 또한 <a href="http://developer.android.com/reference/android/text/style/AlignmentSpan.html">AlignmentSpan</a>를 텍스트 맞춤을 결정 하는 데 사용 된다. 마지막으로, 현재 행이 스팬인 경우, 레이아웃은 TextLine#draw(텍스트 라인 개체가 각 행에 대해 생성된다)을 호출 한다.</p>
<h3>TEXTLINE</h3>
<p>문서에서는 <a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/text/TextLine.java">android.text.TextLine</a> 다음과 같이 설명한다: 시각적 순서의 측정과 렌더링을 위한 스타일 텍스트 행을 나타낸다.</p>
<p>TextLine 클래스는 3세트의 Spans을 포함한다:</p>
<ul>
<li>MetricAffectingSpan set</li>
<li>CharacterStyle set</li>
<li>ReplacementSpan set</li>
</ul>
<p>흥미로운 메소드는 TextLine#handleRun이다. 그것은 모든 스팬이 텍스트를 렌더링하는데 사용된다. 스팬의 유형을 기준으로 TextLine은 아래의 함수를 호출한다:</p>
<ul>
<li><a href="http://developer.android.com/reference/android/text/style/CharacterStyle.html#updateDrawState%28android.text.TextPaint%29">CharacterStyle#updateDrawState</a> to change the TextPaint configuration for MetricAffectingSpan and CharacterStyle Spans.</li>
<li>TextLine#handleReplacement for ReplacementSpan. It calls <a href="http://developer.android.com/reference/android/text/style/ReplacementSpan.html#getSize%28android.graphics.Paint,%20java.lang.CharSequence,%20int,%20int,%20android.graphics.Paint.FontMetricsInt%29">Replacement#getSize</a> to get the replacement width, update the font metrics if it’s needed and finally call <a href="http://developer.android.com/reference/android/text/style/ReplacementSpan.html#draw%28android.graphics.Canvas,%20java.lang.CharSequence,%20int,%20int,%20float,%20int,%20int,%20int,%20android.graphics.Paint%29">Replacement#draw</a>.</li>
</ul>
<h3>FONTMETRICS</h3>
<p>폰트 메트릭에 대해 더 알고 싶다면 다음의 그림을 보자:</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-5.png" alt="fontmetrics" width="680" height="239" /></p>
<h2>Playground</h2>
<h3>BULLETSPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/BulletSpan.html">android.text.style.BulletSpan</a></p>
<p>The BulletSpan affects paragraph-level text formatting. It allows you to put a bullet on paragraph start.</p>
<p>BulletSpan은 텍스트 단락 수준 서식에 영향을 준다. 그것은 단락 시작에 bullet을 넣을 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public BulletSpan (int gapWidth, int color)
-gapWidth: gap in px between bullet and text
-color: bullet color (optionnal, default is transparent)
*/</span>

<span class="hljs-comment">//create a black BulletSpan with a gap of 15px</span>
span = <span class="hljs-keyword">new</span> BulletSpan(<span class="hljs-number">15</span>, Color.BLACK);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-6.png" alt="BulletSpan" width="570" height="334" /></p>
<h3>QUOTESPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/QuoteSpan.html">android.text.style.QuoteSpan</a></p>
<p>QuoteSpan은 텍스트 단락 수준 서식에 영향을 준다. 그것은 당신이 단락에 인용 수직선을 넣을 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public QuoteSpan (int color)
-color: quote vertical line color (optionnal, default is Color.BLUE)
*/</span>

<span class="hljs-comment">//create a red quote</span>
span = <span class="hljs-keyword">new</span> QuoteSpan(Color.RED);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-7.png" alt="QuoteSpan" width="571" height="333" /></p>
<h3>ALIGNMENTSPAN.STANDARD</h3>
<p><a href="http://developer.android.com/reference/android/text/style/AlignmentSpan.Standard.html">android.text.style.AlignmentSpan.Standard</a></p>
<p>AlignmentSpan.Standard은 텍스트 단락 수준 서식에 영향을 준다. 그것은 문단을 정렬(일반, 중앙, 반대) 할 수 있도록 해준다.
그것은 정렬 수 있습니다 (정상, 센터, 반대)는 단락.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public Standard(Layout.Alignment align)
-align: alignment to set
*/</span>

<span class="hljs-comment">//align center a paragraph</span>
span = <span class="hljs-keyword">new</span> AlignmentSpan.Standard(Layout.Alignment.ALIGN_CENTER);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-8.png" alt="AlignmentSpan" width="574" height="337" /></p>
<h3>UNDERLINESPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/UnderlineSpan.html">android.text.style.UnderlineSpan</a></p>
<p>UnderlineSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 <a href="http://developer.android.com/reference/android/graphics/Paint.html#setUnderlineText%28boolean%29">Paint#setUnderlineText(true)</a>을 통해 문자에 밑줄을 넣을 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">//underline a character</span>
span = <span class="hljs-keyword">new</span> UnderlineSpan();</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-9.png" alt="UnderlineSpan" width="573" height="334" /></p>
<h3>STRIKETHROUGHSPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/StrikethroughSpan.html">android.text.style.StrikethroughSpan</a></p>
<p>StrikethroughSpan 은 텍스트 글자 수준 서식에 영향을 준다. 그것은  <a href="http://developer.android.com/reference/android/graphics/Paint.html#setStrikeThruText%28boolean%29">Paint#setStrikeThruText(true)</a>을 통해 문자에 취소선을 넣을 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">//strikethrough a character</span>
span = <span class="hljs-keyword">new</span> StrikethroughSpan();</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-10.png" alt="StrikethroughSpan" width="572" height="336" /></p>
<h3>SUBSCRIPTSPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/SubscriptSpan.html">android.text.style.SubscriptSpan</a></p>
<p>SubscriptSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은  <a href="http://developer.android.com/reference/android/text/TextPaint.html#baselineShift">TextPaint#baselineShift</a>를 감소시켜 아래 첨자 문자를 넣을 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">//subscript a character</span>
span = <span class="hljs-keyword">new</span> SubscriptSpan();</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-11.png" alt="SubscriptSpan" width="572" height="346" /></p>
<h3>SUPERSCRIPTSPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/SuperscriptSpan.html">android.text.style.SuperscriptSpan</a></p>
<p>SuperscriptSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은  <a href="http://developer.android.com/reference/android/text/TextPaint.html#baselineShift">TextPaint#baselineShift</a>를 증가시켜 위 첨자 문자를 넣을 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">//superscript a character</span>
span = <span class="hljs-keyword">new</span> SuperscriptSpan();</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-12.png" alt="SuperscriptSpan" width="575" height="346" /></p>
<h3>BACKGROUNDCOLORSPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/BackgroundColorSpan.html">android.text.style.BackgroundColorSpan</a></p>
<p>BackgroundColorSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 문자의 배경색을 넣을 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public BackgroundColorSpan (int color)
-color: background color
*/</span>

<span class="hljs-comment">//set a green background</span>
span = <span class="hljs-keyword">new</span> BackgroundColorSpan(Color.GREEN);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-13.png" alt="BackgroundColorSpan" width="572" height="337" /></p>
<h3>FOREGROUNDCOLORSPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/ForegroundColorSpan.html">android.text.style.ForegroundColorSpan</a></p>
<p>ForegroundColorSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 문자의 글자색을 넣을 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public ForegroundColorSpan (int color)
-color: foreground color
*/</span>

<span class="hljs-comment">//set a red foreground</span>
span = <span class="hljs-keyword">new</span> ForegroundColorSpan(Color.RED);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-14.png" alt="ForegroundColorSpan" width="565" height="328" /></p>
<h3>IMAGESPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/ImageSpan.html">android.text.style.ImageSpan</a></p>
<p>ImageSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 이미지를 글자처럼 넣을 수 있도록 해준다. 그것은 문서화를 잘 할 수 있도록 해주는 몇 안되는 스팬 중 하나다.</p>
<pre class="hljs java"><span class="hljs-comment">//replace a character by pic1_small image</span>
span = <span class="hljs-keyword">new</span> ImageSpan(<span class="hljs-keyword">this</span>, R.drawable.pic1_small);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-15.png" alt="ImageSpan" width="566" height="471" /></p>
<h3>STYLESPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/StyleSpan.html">android.text.style.StyleSpan</a></p>
<p>StyleSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자에 스타일(bold, italic, normal)을 넣을 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public StyleSpan (int style)
-style: int describing the style (android.graphics.Typeface)
*/</span>

<span class="hljs-comment">//set a bold+italic style</span>
span = <span class="hljs-keyword">new</span> StyleSpan(Typeface.BOLD | Typeface.ITALIC);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-16.png" alt="StyleSpan" width="574" height="336" /></p>
<h3>TYPEFACESPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/TypefaceSpan.html">android.text.style.TypefaceSpan</a></p>
<p>TypefaceSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것의 글자의 폰트 패밀리(monospace, serif etc)를 지정할 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public TypefaceSpan (String family)
-family: a font family
*/</span>

<span class="hljs-comment">//set the serif family</span>
span = <span class="hljs-keyword">new</span> TypefaceSpan(<span class="hljs-string">"serif"</span>);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-17.png" alt="TypefaceSpan" width="573" height="337" /></p>
<h3>TEXTAPPEARANCESPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/TextAppearanceSpan.html">android.text.style.TextAppearanceSpan</a></p>
<p>TextAppearanceSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자의 appearance를 지정할 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public  TextAppearanceSpan(Context context, int appearance, int colorList)
-context: a valid context
-appearance: text appearance resource (ex: android.R.style.TextAppearance_Small)
-colorList: a text color resource (ex: android.R.styleable.Theme_textColorPrimary)

public TextAppearanceSpan(String family, int style, int size, ColorStateList color, ColorStateList linkColor)
-family: a font family
-style: int describing the style (android.graphics.Typeface)
-size: text size
-color: a text color
-linkColor: a link text color
*/</span>

<span class="hljs-comment">//set the serif family</span>
span = <span class="hljs-keyword">new</span> TextAppearanceSpan(<span class="hljs-keyword">this</span><span class="hljs-comment">/*a context*/</span>, R.style.SpecialTextAppearance);</pre>
<p><strong>styles.xml</strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"SpecialTextAppearance"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"@android:style/TextAppearance"</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:textColor"</span>&gt;</span>@color/color1<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:textColorHighlight"</span>&gt;</span>@color/color2<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:textColorHint"</span>&gt;</span>@color/color3<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:textColorLink"</span>&gt;</span>@color/color4<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:textSize"</span>&gt;</span>28sp<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:textStyle"</span>&gt;</span>italic<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-18.png" alt="TextAppearanceSpan" width="567" height="381" /></p>
<h3>ABSOLUTESIZESPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/AbsoluteSizeSpan.html">android.text.style.AbsoluteSizeSpan</a></p>
<p>AbsoluteSizeSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자의 절대 크기를 지정할 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public AbsoluteSizeSpan(int size, boolean dip)
-size: a size
-dip: false, size is in px; true, size is in dip (optionnal, default false)
*/</span>

<span class="hljs-comment">//set text size to 24dp</span>
span = <span class="hljs-keyword">new</span> AbsoluteSizeSpan(<span class="hljs-number">24</span>, <span class="hljs-keyword">true</span>);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-19.png" alt="AbsoluteSizeSpan" width="575" height="381" /></p>
<h3>RELATIVESIZESPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/RelativeSizeSpan.html">android.text.style.RelativeSizeSpan</a></p>
<p>RelativeSizeSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자의 상대 크기를 지정할 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public RelativeSizeSpan(float proportion)
-proportion: a proportion of the actual text size
*/</span>

<span class="hljs-comment">//set text size 2 times bigger</span>
span = <span class="hljs-keyword">new</span> RelativeSizeSpan(<span class="hljs-number">2.0f</span>);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-20.png" alt="RelativeSizeSpan" width="575" height="425" /></p>
<h2>SCALEXSPAN</h2>
<p><a href="http://developer.android.com/reference/android/text/style/ScaleXSpan.html">android.text.style.ScaleXSpan</a></p>
<p>ScaleXSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자의 x 축 방향에 설정된 배율을 지정할 수 있도록 해준다.</p>
<pre class="hljs java"><span class="hljs-comment">/*
public ScaleXSpan(float proportion)
-proportion: a proportion of actual text scale x
*/</span>

<span class="hljs-comment">//scale x 3 times bigger</span>
span = <span class="hljs-keyword">new</span> ScaleXSpan(<span class="hljs-number">3.0f</span>);</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-21.png" alt="ScaleXSpan" width="566" height="357" /></p>
<h3>MASKFILTERSPAN</h3>
<p><a href="http://developer.android.com/reference/android/text/style/MaskFilterSpan.html">android.text.style.MaskFilterSpan</a></p>
<p>MaskFilterSpan은 텍스트 글자 수준 서식에 영향을 준다. 그것은 글자에  <a href="http://developer.android.com/reference/android/graphics/MaskFilter.html">android.graphics.MaskFilter</a>를 설정할 수 있도록 해준다.</p>
<p><strong>주의: BlurMaskFilter 는 hardware acceleration을 지원하지 않는다.</strong></p>
<pre class="hljs java"><span class="hljs-comment">/*
public MaskFilterSpan(MaskFilter filter)
-filter: a filter to apply
*/</span>

<span class="hljs-comment">//Blur a character</span>
span = <span class="hljs-keyword">new</span> MaskFilterSpan(<span class="hljs-keyword">new</span> BlurMaskFilter(density*<span class="hljs-number">2</span>, BlurMaskFilter.Blur.NORMAL));
<span class="hljs-comment">//Emboss a character</span>
span = <span class="hljs-keyword">new</span> MaskFilterSpan(<span class="hljs-keyword">new</span> EmbossMaskFilter(<span class="hljs-keyword">new</span> <span class="hljs-keyword">float</span>[] { <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span> }, <span class="hljs-number">0.4f</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3.5f</span>));</pre>
<p><strong>BlurMaskFilter</strong></p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-22.png" alt="MaskFilterSpan" width="566" height="327" /></p>
<p><strong>EmbossMaskFilter와 함께 blue ForegroundColorSpan과 bold StyleSpan</strong></p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-23.png" alt="MaskFilterSpan" width="565" height="328" /></p>
<h2>고급 스팬(Pushing Spans to the next level)</h2>
<h3>글자색(FOREGROUND COLOR) 애니메이션</h3>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-24.gif" alt="AnimateSpan" width="518" height="302" /></p>
<p>ForegroundColorSpan은 읽기 전용이다. 그것은 인스턴스화된 후에는 글자색을 변경할 수 없다는 뜻이다. 따라서 처음으로 할 일은 MutableForegroundColorSpan을 작성하는 것이다.</p>
<p><strong>MutableForegroundColorSpan.java</strong></p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MutableForegroundColorSpan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ForegroundColorSpan</span> </span>{

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> mAlpha = <span class="hljs-number">255</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> mForegroundColor;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MutableForegroundColorSpan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> alpha, <span class="hljs-keyword">int</span> color)</span> </span>{
        <span class="hljs-keyword">super</span>(color);
        mAlpha = alpha;
        mForegroundColor = color;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MutableForegroundColorSpan</span><span class="hljs-params">(Parcel src)</span> </span>{
        <span class="hljs-keyword">super</span>(src);
        mForegroundColor = src.readInt();
        mAlpha = src.readInt();
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeToParcel</span><span class="hljs-params">(Parcel dest, <span class="hljs-keyword">int</span> flags)</span> </span>{
        <span class="hljs-keyword">super</span>.writeToParcel(dest, flags);
        dest.writeInt(mForegroundColor);
        dest.writeFloat(mAlpha);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateDrawState</span><span class="hljs-params">(TextPaint ds)</span> </span>{
        ds.setColor(getForegroundColor());
    }

    <span class="hljs-comment">/**
     * <span class="hljs-doctag">@param</span> alpha from 0 to 255
     */</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAlpha</span><span class="hljs-params">(<span class="hljs-keyword">int</span> alpha)</span> </span>{
        mAlpha = alpha;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setForegroundColor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> foregroundColor)</span> </span>{
        mForegroundColor = foregroundColor;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getAlpha</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> mAlpha;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getForegroundColor</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> Color.argb(mAlpha, Color.red(mForegroundColor), Color.green(mForegroundColor), Color.blue(mForegroundColor));
    }
}</pre>
<p>이제 우리는 같은 인스턴스에서 투명도 또는 글자색을 변경할 수 있다. 그러나 그 속성을 설정할 때 그것은 View를 갱신하지 않는다: 직접 SpannableString을 다시 설정해 주어야 한다.</p>
<pre class="hljs java">MutableForegroundColorSpan span = <span class="hljs-keyword">new</span> MutableForegroundColorSpan(<span class="hljs-number">255</span>, Color.BLACK);
spannableString.setSpan(span, <span class="hljs-number">0</span>, text.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
textView.setText(spannableString);
<span class="hljs-comment">//here the text is black and fully opaque</span>
span.setAlpha(<span class="hljs-number">100</span>);
span.setForegroundColor(Color.RED);
<span class="hljs-comment">//here the text hasn't changed.</span>
textView.setText(spannableString);
<span class="hljs-comment">//finally, the text is red and translucent</span></pre>
<p>이제 우리는 글자색을 애니메이션하기를 원한다. 우리는  <a href="http://developer.android.com/reference/android/util/Property.html">android.util.Property</a>를 사용하여 커스텀 해야 한다.</p>
<pre class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Property&lt;MutableForegroundColorSpan, Integer&gt; MUTABLE_FOREGROUND_COLOR_SPAN_FC_PROPERTY =
<span class="hljs-keyword">new</span> Property&lt;MutableForegroundColorSpan, Integer&gt;(Integer.class, <span class="hljs-string">"MUTABLE_FOREGROUND_COLOR_SPAN_FC_PROPERTY"</span>) {

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(MutableForegroundColorSpan span, Integer value)</span> </span>{
        span.setForegroundColor(value);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">get</span><span class="hljs-params">(MutableForegroundColorSpan span)</span> </span>{
        <span class="hljs-keyword">return</span> span.getForegroundColor();
    }
};</pre>
<p>마지막으로 우리는 <a href="http://developer.android.com/reference/android/animation/ObjectAnimator.html">ObjectAnimator</a>를 이용하여 custom property를 애니메이션 한다. View를 갱신하는 것을 잊지마라.</p>
<pre class="hljs java">MutableForegroundColorSpan span = <span class="hljs-keyword">new</span> MutableForegroundColorSpan(<span class="hljs-number">255</span>, Color.BLACK);
mSpannableString.setSpan(span, <span class="hljs-number">0</span>, text.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
ObjectAnimator objectAnimator = ObjectAnimator.ofInt(span, MUTABLE_FOREGROUND_COLOR_SPAN_FC_PROPERTY, Color.BLACK, Color.RED);
objectAnimator.setEvaluator(<span class="hljs-keyword">new</span> ArgbEvaluator());
objectAnimator.addUpdateListener(<span class="hljs-keyword">new</span> ValueAnimator.AnimatorUpdateListener() {
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAnimationUpdate</span><span class="hljs-params">(ValueAnimator animation)</span> </span>{
        <span class="hljs-comment">//refresh</span>
        mText.setText(mSpannableString);
    }
});
objectAnimator.start();</pre>
<h2>ACTIONBAR ‘FIREWORKS’</h2>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-25.gif" alt="FIREWORKS" width="446" height="82" /></p>
<p>‘fireworks’ 애니메이션은 무작위를 글자를 fade 하도록 한다. 먼저 글자를 다수의 Span으로 분리하여(예를 들어, 글자 단위로 하나의 스팬을 생성) 스팬을 적용하고 fade 한다. 앞서 소개한 MutableForegroundColorSpan을 사용하여, 스팬 그룹을 표현하기 위한 특별한 객체를 만들 것이다. 그리고 그룹에 setAlpha 호출할 때마다, 우리는 무작위로 각 범위에 대한 투명도를 설정한다.</p>
<pre class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FireworksSpanGroup</span> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">float</span> mAlpha;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ArrayList&lt;MutableForegroundColorSpan&gt; mSpans;

    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">FireworksSpanGroup</span><span class="hljs-params">(<span class="hljs-keyword">float</span> alpha)</span> </span>{
        mAlpha = alpha;
        mSpans = <span class="hljs-keyword">new</span> ArrayList&lt;MutableForegroundColorSpan&gt;();
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addSpan</span><span class="hljs-params">(MutableForegroundColorSpan span)</span> </span>{
        span.setAlpha((<span class="hljs-keyword">int</span>) (mAlpha * <span class="hljs-number">255</span>));
        mSpans.add(span);
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>{
        Collections.shuffle(mSpans);
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAlpha</span><span class="hljs-params">(<span class="hljs-keyword">float</span> alpha)</span> </span>{
        <span class="hljs-keyword">int</span> size = mSpans.size();
        <span class="hljs-keyword">float</span> total = <span class="hljs-number">1.0f</span> * size * alpha;

        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span> ; index &lt; size; index++) {
            MutableForegroundColorSpan span = mSpans.get(index);
            <span class="hljs-keyword">if</span>(total &gt;= <span class="hljs-number">1.0f</span>) {
                span.setAlpha(<span class="hljs-number">255</span>);
                total -= <span class="hljs-number">1.0f</span>;
            } <span class="hljs-keyword">else</span> {
                span.setAlpha((<span class="hljs-keyword">int</span>) (total * <span class="hljs-number">255</span>));
                total = <span class="hljs-number">0.0f</span>;
            }
        }
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">float</span> <span class="hljs-title">getAlpha</span><span class="hljs-params">()</span> </span>{ <span class="hljs-keyword">return</span> mAlpha; }
}</pre>
<p>우리는 FireworksSpanGroup의 알파 애니메이션에 사용자 정의 속성을 만든다.</p>
<pre class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Property&lt;FireworksSpanGroup, Float&gt; FIREWORKS_GROUP_PROGRESS_PROPERTY =
<span class="hljs-keyword">new</span> Property&lt;FireworksSpanGroup, Float&gt;(Float.class, <span class="hljs-string">"FIREWORKS_GROUP_PROGRESS_PROPERTY"</span>) {

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(FireworksSpanGroup spanGroup, Float value)</span> </span>{
        spanGroup.setProgress(value);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Float <span class="hljs-title">get</span><span class="hljs-params">(FireworksSpanGroup spanGroup)</span> </span>{
        <span class="hljs-keyword">return</span> spanGroup.getProgress();
    }
};</pre>
<p>마지막으로, 우리는 그룹을 만들고 ObjectAnimator으로 애니메이션 한다.</p>
<pre class="hljs java"><span class="hljs-keyword">final</span> FireworksSpanGroup spanGroup = <span class="hljs-keyword">new</span> FireworksSpanGroup();
<span class="hljs-comment">//init the group with multiple spans</span>
<span class="hljs-comment">//spanGroup.addSpan(span);</span>
<span class="hljs-comment">//set spans on the ActionBar spannable title</span>
<span class="hljs-comment">//mActionBarTitleSpannableString.setSpan(span, start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);</span>
spanGroup.init();
ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(spanGroup, FIREWORKS_GROUP_PROGRESS_PROPERTY, <span class="hljs-number">0.0f</span>, <span class="hljs-number">1.0f</span>);
objectAnimator.addUpdateListener(<span class="hljs-keyword">new</span> ValueAnimator.AnimatorUpdateListener() {
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAnimationUpdate</span><span class="hljs-params">(ValueAnimator animation)</span> </span>{
        <span class="hljs-comment">//refresh the ActionBar title</span>
        setTitle(mActionBarTitleSpannableString);
    }
});
objectAnimator.start();</pre>
<h2>나만의 스팬으로 그리기(DRAW WITH YOUR OWN SPAN)</h2>
<p>이 섹션에서는 사용자 정의 스팬을 통해 그리는 방법을 설명 할 것이다. 이것은 텍스트 사용자 정의에 대한 흥미로운 관점을 열어줄 것이다.</p>
<p>첫째, 우리는 추상 클래스 <a href="http://developer.android.com/reference/android/text/style/ReplacementSpan.html">ReplacementSpan</a>을 확장하는 커스텀 스팬을 만들어야 한다.</p>
<p>당신이 오직 custom background를 그리기만 원하는 경우, 텍스트 단락 수준 서식인 <a href="http://developer.android.com/reference/android/text/style/LineBackgroundSpan.html">LineBackgroundSpan</a>을 구현할 수 있다.</p>
<p>우리는 2개의 methods를 구현해야 한다:</p>
<ul>
<li><a href="http://developer.android.com/reference/android/text/style/ReplacementSpan.html#getSize%28android.graphics.Paint,%20java.lang.CharSequence,%20int,%20int,%20android.graphics.Paint.FontMetricsInt%29">getSize</a>: 이 method는 당신이 변경한 새로운 크기를 반환한다.</li>
</ul>
<p>text: 스팬에서 관리하는 문자열</p>
<p>start: 문자열의 시작 위치</p>
<p>end: 문자열의 종료 위치</p>
<p>fm: font metrics(null을 넣을 수 있다)</p>
<ul>
<li><a href="http://developer.android.com/reference/android/text/style/ReplacementSpan.html#draw%28android.graphics.Canvas,%20java.lang.CharSequence,%20int,%20int,%20float,%20int,%20int,%20int,%20android.graphics.Paint%29">draw</a>: 당신이 Canvas를 이용해 그릴 수 있는 곳이다.</li>
</ul>
<p>x: 문자열이 draw 될 좌표(x-coordinate)</p>
<p>top: 라인의 top</p>
<p>y: baseline</p>
<p>bottom: 라인의 bottom</p>
<p>텍스트를 둘러싸는 파란 사각형을 그리는 예제를 보자.</p>
<pre class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">(Paint paint, CharSequence text, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end, Paint.FontMetricsInt fm)</span> </span>{
    <span class="hljs-comment">//return text with relative to the Paint</span>
    mWidth = (<span class="hljs-keyword">int</span>) paint.measureText(text, start, end);
    <span class="hljs-keyword">return</span> mWidth;
}

<span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">(Canvas canvas, CharSequence text, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end, <span class="hljs-keyword">float</span> x, <span class="hljs-keyword">int</span> top, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> bottom, Paint paint)</span> </span>{
    <span class="hljs-comment">//draw the frame with custom Paint</span>
    canvas.drawRect(x, top, x + mWidth, bottom, mPaint);
}</pre>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-26.png" alt="DRAW WITH YOUR OWN SPAN" width="584" height="336" /></p>
<h2>BONUS</h2>
<p>샘플 앱에는 아래와 같은 예시가 포함되어 있다:</p>
<ul>
<li>Progressive blur</li>
</ul>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-27.gif" alt="Progressive blur" width="582" height="341" /></p>
<ul>
<li>Typewriter</li>
</ul>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-android-spans-a-powerful-concept-28.gif" alt="Typewriter" width="518" height="302" /></p>
<h2>결론</h2>
<p>이 문서에서 작업, 나는 스팬 정말 강력하고 드로어 블 Drawable들처럼, 나는 그들이 충분히 사용하지 않는 생각을 깨달았다. 텍스트 응용 프로그램의 주요 내용, 그것은 사방 그래서 스팬과 더 역동적이고 매력적으로 만들 것을 잊지 마세요있다!</p>
<p>이 문서 작업, 깨달았다 범위는 정말 강력 하 고 Drawables, 같은 그들이 생각 하지 충분히 사용. 텍스트는 응용 프로그램의 주요 내용, 그것은 어디에 나 그래서 더 역동적이 고 매력적인 걸쳐 그것을 확인 하는 것을 잊지 마세요!</p>
<p>이 문서를 작성하면서 스팬은 정말 강력하지만 그들은 Drawables처럼 충분히 사용하지 않는다는 것을 깨달았다. 텍스트는 어플리케이션의 메인 콘텐츠다. 그것은 어디에나 있다. 그러니 텍스트를 스팬을 통해 역동적이고 매력적으로 만들 수 있다는 것을 잊지마라!</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/02/google-maps-sdk-with-xcode-7-dot-1-bug/</id><title type="html">Xcode 7.1에서 Google Maps SDK 사용시 빌드가 되지 않는 결함</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/02/google-maps-sdk-with-xcode-7-dot-1-bug/"/><published>2015-11-02T16:57:18+09:00</published><updated>2015-11-02T16:57:18+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[얼마전 iOS 앱 개발에 사용하던 xcode를 7.1로 업데이트 했다. 그런데 앱에서 사용중이던 Google Maps SDK가 빌드되지 못해 앱을 실행할 수가 없었다. 문제는 header 생성 부분인데 해결 방법을 찾지 못해 다시 7.0을 재설치해서 사용하고 있었다. 그렇게 지내던 중 오늘 갑자기 생각이 나서 다시 확인해 봤다. 다행히 그 사이에 Google에서 update를 내 놓았다. 이 문제가 수정된 버전은 1.10.5 버전이다. 그리고 관련된 issue는 Issue 8524: Bug: Running under Xcode 7 beta 6 with Google Maps SDK results in broken debugging.이다. 오류 메시지는 Include of non-modular header inside framework module 'GoogleMaps'이다. 대략 아래의 이미지처럼 오류가 난다(이미지는 캡춰하기 귀찮아 인터넷에 있는 이미지를 가져왔다). 혹 xcode 7.1 사용시 이런 오류가 나온다면 Google Maps SDK를 1.10.5 이상으로 업데이트 후 빌드 해보기 바란다. 이 문제에 대한 원인은 처음 오류를 만났을 때 다른 사람들이 이야기하는 것을 봤었는데 정확한 내용이 기억이 나지 않는다. 대충 기억이 나는 것은 xcode가 7.1로 버전업 되면서 swift 모듈에 header 처리하는 부분이 변경되었다고 했던 것 같은데... 나중에라도 원인을 알게되면 다시 남기도록 하겠다. Apple Developer Forums에서 나온 Include of non-modular header inside framework module issue도 있다. 혹시 GoogleMaps가 아닌 모듈에서 동일한 오류가 난다면 참고.]]></summary><content type="html"><![CDATA[<p>얼마전 iOS 앱 개발에 사용하던 xcode를 7.1로 업데이트 했다. 그런데 앱에서 사용중이던 Google Maps SDK가 빌드되지 못해 앱을 실행할 수가 없었다. 문제는 header 생성 부분인데 해결 방법을 찾지 못해 다시 7.0을 재설치해서 사용하고 있었다. 그렇게 지내던 중 오늘 갑자기 생각이 나서 다시 확인해 봤다. 다행히 그 사이에 Google에서 update를 내 놓았다. 이 문제가 수정된 버전은 1.10.5 버전이다. 그리고 관련된 issue는 <a href="https://code.google.com/p/gmaps-api-issues/issues/detail?id=8524&amp;can=1&amp;q=Could%20not%20build%20Objective-C%20module&amp;colspec=ID%20Type%20Status%20Introduced%20Fixed%20Summary%20Stars%20ApiType%20Internal">Issue 8524:   Bug: Running under Xcode 7 beta 6 with Google Maps SDK results in broken debugging.</a>이다.</p>
<p>오류 메시지는 <code>Include of non-modular header inside framework module 'GoogleMaps'</code>이다.</p>
<p>대략 아래의 이미지처럼 오류가 난다(이미지는 캡춰하기 귀찮아 인터넷에 있는 이미지를 가져왔다).</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-11-02-google-maps-sdk-with-xcode-7-dot-1-bug-1.png" alt="오류" width="485" height="465" /></p>
<p>혹 xcode 7.1 사용시 이런 오류가 나온다면 Google Maps SDK를 1.10.5 이상으로 업데이트 후 빌드 해보기 바란다.</p>
<p>이 문제에 대한 원인은 처음 오류를 만났을 때 다른 사람들이 이야기하는 것을 봤었는데 정확한 내용이 기억이 나지 않는다. 대충 기억이 나는 것은 xcode가 7.1로 버전업 되면서 swift 모듈에 header 처리하는 부분이 변경되었다고 했던 것 같은데... 나중에라도 원인을 알게되면 다시 남기도록 하겠다.</p>
<p>Apple Developer Forums에서 나온 <a href="https://forums.developer.apple.com/thread/23554">Include of non-modular header inside framework module</a> issue도 있다. 혹시 GoogleMaps가 아닌 모듈에서 동일한 오류가 난다면 참고.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/11/02/android-online-apk-download-and-decompile/</id><title type="html">android apk download / decompile 하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/11/02/android-online-apk-download-and-decompile/"/><published>2015-11-02T12:27:06+09:00</published><updated>2015-11-02T12:27:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><category term="android" label="android" /><summary><![CDATA[오늘은 Google Play에서 apk 파일을 다운 받는 방법과 apk 파일을 decompile하는 방법을 소개하려고 한다. 일반적인 상황에서는 apk를 받거나 decompile 할 일은 거의 없다. 하지만 안드로이드 개발을 하다보면 필요해지는 경우가 있다. 나의 경우는 ACRA를 이용해서 서비스 앱에서 crash가 발생하면 오류를 보고하도록 해두고 사용한다. 그런데 proguard를 사용해서 난독화가 되어 있다보니 오류 메시지만 보고는 어디에서 발생한 오류인지 확인할 수 없다. 그래서 서비스 중이 apk를 다운 받아 decompile해서 오류 위치를 파악한다. 배포 전에 apk 파일을 따로 보관해두는 방법도 있으나 귀찮아서 일일이 보관하지 않고 있다. 소스야 Git에서 tagging을 해두기 때문에 해당 버전을 바로 확인할 수 있지만 proguard가 적용되면서 package 등을 모두 바꾸게 되어 있어서 서비스 중인 apk가 따로 필요하다. 본론으로 들어가서 일단 APK 파일을 받으려면 Online Google Play APK Downloader를 사용하면 된다. 사이트에 가서 원하는 앱의 package명을 넣으면 다운 받아진다. 간혹 실패하는 경우가 있으나 다시 시도하면 대부분은 받아진다. 받아진 apk 파일을 decompile 하려면 Android APK Decompiler를 사용하면 된다. 다운 받은 파일을 업로드하면 잠시 후에 Manifest 파일 정보와 함께 다운로드 링크가 나온다. 다운 받으면 소스가 zip로 압축되어 있으니 압축을 풀어서 보면 된다. 당연히 완벽한 소스로 복구되지는 않는다. 하지만 오류 위치를 파악하거나 하는 경우에는 충분한 소스가 나온다. 물론 위의 사이트들을 사용해야만 가능한 일들은 아니다. apk 다운로드의 경우 별도의 app도 있고 decompile의 경우도 shell에서 직접할 수 있다. 하지만 위 사이트들을 사용하면 간단하게 처리가 가능하니 필요하다면 한번 쯤은 사용해 봐도 좋을 듯하다.]]></summary><content type="html"><![CDATA[<p>오늘은 <a href="https://play.google.com/store">Google Play</a>에서 apk 파일을 다운 받는 방법과 apk 파일을 decompile하는 방법을 소개하려고 한다.
일반적인 상황에서는 apk를 받거나 decompile 할 일은 거의 없다. 하지만 안드로이드 개발을 하다보면 필요해지는 경우가 있다. 나의 경우는 ACRA를 이용해서 서비스 앱에서 crash가 발생하면 오류를 보고하도록 해두고 사용한다. 그런데 proguard를 사용해서 난독화가 되어 있다보니 오류 메시지만 보고는 어디에서 발생한 오류인지 확인할 수 없다. 그래서 서비스 중이 apk를 다운 받아 decompile해서 오류 위치를 파악한다. 배포 전에 apk 파일을 따로 보관해두는 방법도 있으나 귀찮아서 일일이 보관하지 않고 있다. 소스야 Git에서 tagging을 해두기 때문에 해당 버전을 바로 확인할 수 있지만 proguard가 적용되면서 package 등을 모두 바꾸게 되어 있어서 서비스 중인 apk가 따로 필요하다.</p>
<p>본론으로 들어가서 일단 APK 파일을 받으려면 <a href="http://apk-dl.com/">Online Google Play APK Downloader</a>를 사용하면 된다. 사이트에 가서 원하는 앱의 package명을 넣으면 다운 받아진다. 간혹 실패하는 경우가 있으나 다시 시도하면 대부분은 받아진다.</p>
<p>받아진 apk 파일을 decompile 하려면 <a href="http://www.decompileandroid.com/">Android APK Decompiler</a>를 사용하면 된다. 다운 받은 파일을 업로드하면 잠시 후에 Manifest 파일 정보와 함께 다운로드 링크가 나온다. 다운 받으면 소스가 zip로 압축되어 있으니 압축을 풀어서 보면 된다. 당연히 완벽한 소스로 복구되지는 않는다. 하지만 오류 위치를 파악하거나 하는 경우에는 충분한 소스가 나온다.</p>
<p>물론 위의 사이트들을 사용해야만 가능한 일들은 아니다. apk 다운로드의 경우 별도의 app도 있고 decompile의 경우도 shell에서 직접할 수 있다. 하지만 위 사이트들을 사용하면 간단하게 처리가 가능하니 필요하다면 한번 쯤은 사용해 봐도 좋을 듯하다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/29/google-apps-admin-password-reset/</id><title type="html">구글앱스 관리자 비밀번호 초기화</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/29/google-apps-admin-password-reset/"/><published>2015-10-29T14:14:03+09:00</published><updated>2015-10-29T14:14:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[얼마 전에 구글앱스의 관리자 비밀번호를 초기화 해야 할 일이 있었다. 지금은 이미 구글앱스가 유료화되었지만 예전에 50인 이하에 대해서는 무료였다. 그 당시에 내 개인적으로 사용하기 위한 구글앱스와 회사용으로 1개를 만들어 두었었다. 그런데 회사용으로 만들어 두었던 것을 사용하지 않다가 다시 사용하려고 했더니 비밀번호를 알 수가 없었다. 더 정확히는 관리자 아이디도 뭐로 했었는지도 기억이 나지 않았다. 그래서 관리자를 초기화하려고 했으나 도저히 메뉴를 찾을 수가 없었다. 관련된 정보를 한참을 찾아다니다가 겨우 방법을 찾아서 기록해둔다. 방법은 간단하다. 아래의 주소에서 "YOUR_APPS_DOMAIN.COM" 대신에 개설시 사용했던 도메인을 넣고 방문하면 소유주 확인을 위한 "도메인 확인" 화면이 나온다. https://admin.google.com/YOUR_APPS_DOMAIN.COM/VerifyAdminAccountPasswordReset 이 화면에서 안내하는대로 따라가면 관리자 비밀번호를 초기화 할 수 있다. 스샷을 넣으려고 하다가 도메인 등을 지우기 귀찮아서 넣지 않았다. 사실 화면도 단순해서 큰 어려움은 없다. 게다가 화면이 언제 바뀔지도 모르고.]]></summary><content type="html"><![CDATA[<p>얼마 전에 구글앱스의 관리자 비밀번호를 초기화 해야 할 일이 있었다. 지금은 이미 <a href="https://admin.google.com/scanmon.net/VerifyAdminAccountPasswordReset">구글앱스가 유료화</a>되었지만 예전에 50인 이하에 대해서는 무료였다. 그 당시에 내 개인적으로 사용하기 위한 구글앱스와 회사용으로 1개를 만들어 두었었다. 그런데 회사용으로 만들어 두었던 것을 사용하지 않다가 다시 사용하려고 했더니 비밀번호를 알 수가 없었다. 더 정확히는 관리자 아이디도 뭐로 했었는지도 기억이 나지 않았다. 그래서 관리자를 초기화하려고 했으나 도저히 메뉴를 찾을 수가 없었다.</p>
<p>관련된 정보를 한참을 찾아다니다가 겨우 방법을 찾아서 기록해둔다.</p>
<p>방법은 간단하다. 아래의 주소에서 &quot;YOUR_APPS_DOMAIN.COM&quot; 대신에 개설시 사용했던 도메인을 넣고 방문하면 소유주 확인을 위한 &quot;도메인 확인&quot; 화면이 나온다.</p>
<p><code>https://admin.google.com/YOUR_APPS_DOMAIN.COM/VerifyAdminAccountPasswordReset</code></p>
<p>이 화면에서 안내하는대로 따라가면 관리자 비밀번호를 초기화 할 수 있다. 스샷을 넣으려고 하다가 도메인 등을 지우기 귀찮아서 넣지 않았다. 사실 화면도 단순해서 큰 어려움은 없다. 게다가 화면이 언제 바뀔지도 모르고.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/29/java-setchunkedstreamingmode-with-php-fpm-problem/</id><title type="html">java setChunkedStreamingMode를 php-fpm 서버와 연결할 때 발생하는 문제</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/29/java-setchunkedstreamingmode-with-php-fpm-problem/"/><published>2015-10-29T12:22:02+09:00</published><updated>2015-10-29T12:22:02+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="java" label="java" /><summary><![CDATA[ACRA : Please configure 'buildConfigClass' in your ACRA config 오류에서 http 접속시 setChunkedStreamingMode를 사용하면 request의 body가 수신되지 못하는 문제를 언급하고 Github에 issue로 등록 했었다. 그런데 어제 ACRA로 부터 답변을 받았다. 간단히 요약하자면 "일반적인 상황에 대한 문제가 아니므로 수정 해 줄 수 없다."라는 것이다. 게다가 자신의 생각을 바꾸려면 정당한 근거를 제시하란다. 안그래도 영어가 안되서 겨우 report했는데 근거를 달라니... 현재로써는 ACRA를 대체할만한 라이브러리를 찾지 못했기 때문에 어떻게든 방법을 찾아보려고 노력했다. 우선 proxy 상황에서만 문제가 되므로 apache에서 해결 방법이 있을 것이라고 생각하고 자료를 찾아봤다. 이와 관련된 문제와 해결 방법은 무수히 많았지만 정작 해결이 되는 자료는 찾을 수 없었다. 찾았던 정보 중에 도움이 될만한 것들을 링크하고 싶지만 다시 찾으려니 못찾겠다. 구글에서 "http chunked proxy"와 같은 키워드들로 검색하면 무지하게 나온다. 그중 그나마 기억에 남아있는 것 몇가지만 아래에 언급하려고 한다. 일단 nginx를 web 서버로 사용하는 경우라면 Enabling Chunked Uploading in Nginx를 참고하면 해결이 될지도 모르겠다. nginx는 현재 사용을 검토중이고 서비스 서버에 적용되지 않은 상황이라 적용해서 테스트해보지는 못했다. 내가 사용하는 apache에 대해서는 해결 방법을 찾지는 못했지만 관련된 bug report가 된 것이 있었다. mod_proxy breaks HTTP chunked transfer coding. 사실 정확히 동일한 문제는 아니지만 mod_proxy와 관련이 있어서 내용을 봤다. 2.4.8버전에 수정되었다는 말이 있어서 apache도 버전업해서 확인 했지만 도움이 되지는 못했다. php-fpm을 사용하면서 mod_proxy_fcgi를 사용하고 있는데 여기에 문제인 것으로 추정만 하고 있다. Configuring HTTP(S) reverse proxy functionality using Apache or nginx라는 글도 있으나 역시 도움이 되지 않았다. 그 외에도 무수히 많은 자료를 봤지만 대부분 SenEnv를 사용해서 인자를 넘겨주는 방법들을 제시했는데 모두 해결에 도움이 되지 않았다. 결국 내 서버를 수정하는 것은 방법이 없다는 결론을 내리고 ACRA에 다시 요청했다. 요청 내용은 이렇다. setChunkedStreamingMode를 사용하는 것은 proxy 상황에서 정상적인 동작을 하지 않는 웹 서버들이 많으니 setFixedLengthStreamingMode 함수로 교체하는 것이 어떠냐? 사실 ACRA의 경우는 소스를 보면 굳이 setChunkedStreamingMode를 사용할 필요는 없다. 전송할 내용을 미리 다 생성해 놓았기 때문에 길이를 알 수 있는 상황이기 때문이다. 따라서 setFixedLengthStreamingMode를 사용해도 되며 실제로 테스트 결과 정상적으로 값을 받을 수 있었다. 가급적 ACRA를 custom해서 사용하는 것은 피하고 싶으므로 이 요구를 ACRA 측에서 받아들여 줬으면 한다. 마지막으로 setChunkedStreamingMode와 setFixedLengthStreamingMode에 관련된 내용은 URLConnection & HttpURLConnection에서 HttpURLconnection를 설명하는 과정에 나와있다. 내용을 일부를 발췌하여 아래에 추가해 둔다. Posting Content 데이터를 웹 서버로 보내기 위해, setDoOutput(true)를 써서 커넥션을 구성한다. setFixedLengthStreamingMode(int),setChunkedStreamingMode(int) 좋은 성능을 위해서, 이 둘 중 하나의 함수를 불러야 한다. setFixedLengthStreamingMode() : body의 길이를 미리 알고있을때 쓴다. setChunkedStreamingMode(int) : body의 길이를 모를 때 쓴다. 안그러면 HttpURLConnection은 전송되기전에 완성된 request body를 메모리 buffer에 넣도록 강요된다. 이건 heap을 낭비하는 일이고 지연시간을 늘리는 일이다. 첨언 : 방금 ACRA 측의 답변을 받았다. 다행히 나의 요구사항을 수용해서 패치를 완료했단다. Configuring request length instead of using chunked streaming mode.]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2015/10/01/android-acra-please-configure-buildconfigclass-in-your-acra-config/">ACRA : Please configure 'buildConfigClass' in your ACRA config 오류</a>에서  http 접속시 <code>setChunkedStreamingMode</code>를 사용하면 request의 body가 수신되지 못하는 문제를 언급하고 Github에 <a href="https://github.com/ACRA/acra/issues/310#issuecomment-151826809">issue로 등록</a> 했었다. 그런데 어제 ACRA로 부터 답변을 받았다.
간단히 요약하자면 &quot;일반적인 상황에 대한 문제가 아니므로 수정 해 줄 수 없다.&quot;라는 것이다. 게다가 자신의 생각을 바꾸려면 정당한 근거를 제시하란다. 안그래도 영어가 안되서 겨우 report했는데 근거를 달라니...
현재로써는 ACRA를 대체할만한 라이브러리를 찾지 못했기 때문에 어떻게든 방법을 찾아보려고 노력했다. 우선 proxy 상황에서만 문제가 되므로 apache에서 해결 방법이 있을 것이라고 생각하고 자료를 찾아봤다. 이와 관련된 문제와 해결 방법은 무수히 많았지만 정작 해결이 되는 자료는 찾을 수 없었다. 찾았던 정보 중에 도움이 될만한  것들을 링크하고 싶지만 다시 찾으려니 못찾겠다. 구글에서 &quot;http chunked proxy&quot;와 같은 키워드들로 검색하면 무지하게 나온다. 그중 그나마 기억에 남아있는 것 몇가지만 아래에 언급하려고 한다.</p>
<p>일단 nginx를 web 서버로 사용하는 경우라면 <a href="http://serverfault.com/a/408131">Enabling Chunked Uploading in Nginx</a>를 참고하면 해결이 될지도 모르겠다. nginx는 현재 사용을 검토중이고 서비스 서버에 적용되지 않은 상황이라 적용해서 테스트해보지는 못했다.</p>
<p>내가 사용하는 apache에 대해서는 해결 방법을 찾지는 못했지만 관련된 bug report가 된 것이 있었다. <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=55475">mod_proxy breaks HTTP chunked transfer coding</a>. 사실 정확히 동일한 문제는 아니지만 mod_proxy와 관련이 있어서 내용을 봤다. 2.4.8버전에 수정되었다는 말이 있어서 apache도 버전업해서 확인 했지만 도움이 되지는 못했다. php-fpm을 사용하면서 mod_proxy_fcgi를 사용하고 있는데 여기에 문제인 것으로 추정만 하고 있다.</p>
<p><a href="https://gnunet.org/book/export/html/1932">Configuring HTTP(S) reverse proxy functionality using Apache or nginx</a>라는 글도 있으나 역시 도움이 되지 않았다.</p>
<p>그 외에도 무수히 많은 자료를 봤지만 대부분 SenEnv를 사용해서 인자를 넘겨주는 방법들을 제시했는데 모두 해결에 도움이 되지 않았다. 결국 내 서버를 수정하는 것은 방법이 없다는 결론을 내리고 ACRA에 다시 요청했다.</p>
<p>요청 내용은 이렇다.</p>
<blockquote>
<p><code>setChunkedStreamingMode</code>를 사용하는 것은 proxy 상황에서 정상적인 동작을 하지 않는 웹 서버들이 많으니 <code>setFixedLengthStreamingMode</code> 함수로 교체하는 것이 어떠냐?</p>
</blockquote>
<p>사실 ACRA의 경우는 소스를 보면 굳이 <code>setChunkedStreamingMode</code>를 사용할 필요는 없다. 전송할 내용을 미리 다 생성해 놓았기 때문에 길이를 알 수 있는 상황이기 때문이다. 따라서 <code>setFixedLengthStreamingMode</code>를 사용해도 되며 실제로 테스트 결과 정상적으로 값을 받을 수 있었다. 가급적 ACRA를 custom해서 사용하는 것은 피하고 싶으므로 이 요구를 ACRA 측에서 받아들여 줬으면 한다.</p>
<p>마지막으로 <code>setChunkedStreamingMode</code>와 <code>setFixedLengthStreamingMode</code>에 관련된 내용은 <a href="https://byunsooblog.wordpress.com/2013/03/26/urlconnection-httpurlconnection/">URLConnection &amp; HttpURLConnection</a>에서 <code>HttpURLconnection</code>를 설명하는 과정에 나와있다.</p>
<p>내용을 일부를 발췌하여 아래에 추가해 둔다.</p>
<blockquote>
<p><strong>Posting Content</strong></p>
<p>데이터를 웹 서버로 보내기 위해, setDoOutput(true)를 써서 커넥션을 구성한다.</p>
<p>setFixedLengthStreamingMode(int),setChunkedStreamingMode(int)</p>
<ul>
<li>좋은 성능을 위해서, 이 둘 중 하나의 함수를 불러야 한다.</li>
<li>setFixedLengthStreamingMode() : body의 길이를 미리 알고있을때 쓴다.</li>
<li>setChunkedStreamingMode(int) : body의 길이를 모를 때 쓴다.</li>
<li>안그러면 HttpURLConnection은 전송되기전에 완성된 request body를 메모리 buffer에 넣도록 강요된다.
<ul>
<li>이건 heap을 낭비하는 일이고 지연시간을 늘리는 일이다.</li>
</ul></li>
</ul>
</blockquote>
<p>첨언 : 방금 ACRA 측의 답변을 받았다. 다행히 나의 요구사항을 수용해서 패치를 완료했단다. <a href="https://github.com/ACRA/acra/pull/318">Configuring request length instead of using chunked streaming mode.</a></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/27/kakaotalk-share-link-with-requirejs-error/</id><title type="html">카카오톡 링크를 requirejs(AMD)와 함께 사용시 발생하는 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/27/kakaotalk-share-link-with-requirejs-error/"/><published>2015-10-27T14:23:28+09:00</published><updated>2015-10-27T14:23:28+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[어제 고객으로부터 사용중인 페이지에서 카카오톡 링크가 동작하지 않는다는 보고를 받았다. 확인해 보니 안드로이드 크롬 브라우저에서 탐색이 차단됨: intent:kakaolink://send?appkey=TGIF&appver=1.0&apiver=3.0&linkver=3.5&extras=%7B%2…b.io%22%7D&objs=%5B%5D&forwardable=false#Intent;package=com.kakao.talk;end;라는 오류를 발생시키면서 기능이 정상적으로 동작하지 않았다. 웃긴건 해당 링크를 빠르게 여러번 클릭하면 한번씩 동작한다는 것. 이 문제는 항상 발생한다기 보다 특수한 경우에 발생하는 것으로 보인다. 아래의 코드를 보자. 오류를 kakao에 전달하기 위해 github에 페이지도 하나 만들어 두었다. https://asamaru7.github.io/requirejs-test/index2.html 그리고 kakao api가 버전업되면 상황이 달라질 수도 있다. 현재는 v1.0.49다. <!DOCTYPE html> <html> <head> <script data-main="app2" src="lib/require.js"></script> <script type="text/javascript"> function test1() { requirejs(["kakao"], function(Kakao, print) { Kakao.init('TGIF'); Kakao.Link.sendTalkLink({}); }); } </script> </head> <body> <h1>탐색이 차단됨 오류 테스트 : 스마트폰에서 테스트</h1> <button type="button" onclick="test1();">KAKAO link</button> </body> </html> 이 코드를 모바일 크롬 브라우저에서 확인하면 위의 오류를 볼 수 있다. 추정하는 상황은 이렇다. 브라우저에서 팝업창을 열려고 할 경우 사용자의 액션(클릭 이벤트)의 스코프를 벗어나서 window.open을 하려고하면 보안상의 이유로 팝업을 기본적으로 차단한다. 이것 또한 동일한 원인으로 예상된다. requirejs를 통해 kakao js를 호출하고 완료되면 동작을 실행하므로 스코프를 벗어나게 된다. 그렇기에 크롬에서 해당 링크를 차단시켜버리는 것으로 추정하고 있다. 현재로써는 이 문제를 해결하려면 kakao js의 호출과 init을 액션(클릭 이벤트)이 발생하기 이전에 해주는 방법 밖에 없다. 이 부분에 관련한 오류 보고를 개발자 센터에 등록했지만 kakao에서도 어쩔 수 없을 것으로 생각된다. 하지만 정작 하고자 하는 이야기는 지금 부터다. 사실 이 문제를 확인하다가 다른 오류를 만났다. 이와 관련된 오류 보고는 이미 수개월 전에 kakao 개발자 센터에 보고되어 있었다. 요약하자만 이렇다. AMD(requirejs)를 사용해서 Kakao 모듈을 로드하고 나면 그 후 최초로 호출(require)되는 모듈은 Uncaught Error: Mismatched anonymous define() module: function (){return dt} 오류가 나면서 불려지지 않는다. 이를 해결하는 방법은 오류 보고에서 나왔던 것 처럼 dummy 모듈을 kakao 모듈 호출 후 한번 불러주는 것이다. 실제로 효과가 있고 나 또한 이렇게 임시 처리해서 서비스 중이다(찜찜하지만 현재로써는 다른 방법이 없다). 정확하게 이야기하자면 js 호출 시점이 문제가 아니라 init 함수 호출 직후부터 위 문제가 발생한다. 아래는 샘플 코드다. 이대로 넣으면 안되고 어떻게 처리하는지 흐름만 참고하기 바란다. 중요한 포인트는 init 직후 DUMMY 모듈을 한번 호출한다는 것이다. 당연히 DUMMY는 정의되지 않은 모듈이다. 불필요한 js 호출이 싫다면 실제로 dummy를 만들어 두고 호출해도 상관없다. 그리고 아래 코드에서는 kakao js를 호출하는 부분이 빠져있는데 당연히 불러줘야 한다. if (typeof kakaoApiInit == 'undefined') { window.Kakao.init('apikey'); kakaoApiInit = true; try { require(['DUMMY'], function () {}); } catch(e) {}; } window.Kakao.Link.sendTalkLink(data); 사실 당황스러운 것은 이런 오류가 발생한다는 것보다 관련된 오류 보고가 수개월 전에 되었음에도 불구하고 아직 해결이되지 않았다는 것이다. kakao 개발자 측에서는 오류 재현이 되지 않으니 샘플 코드를 올려달라는 것이다. 이미 문제를 제기한 사람이 정확한 상황을 제시 했음에도 불구하고 재현을 하지 못한다니... 의아스럽다. 처음엔 나도 일단은 그냥 이대로 두려고 했다. 하지만 아무래도 찝찝해서 오늘 시간을 내서 kakao에서 원하는 샘플 코드를 친절히(?) 작성해서 오류 보고에 댓글로 추가해 두었다. 앞으로의 kakao의 대응을 지켜보겠지만 사실 이미 실망스럽다. 비단 이번 오류가 아니더라도 예전에도 다수의 kakao api 오류를 접해 본 입장에서 다수가 사용하게되는 api에서 어이없는 오류가 발생하고 대처가 미흡하다는 점이 실망스럽다는 것이다. 그래서 안쓰고 싶지만 고객이 원하니 그럴수도 없고... 어쨌든 빠르게 수정되기를 바라며 혹시 동일한 문제를 겪는 개발자가 있다면 위의 방법대로 임시 처리라도 하기 바란다. 첨언 : 2015/10/30 얼마전 KAKAO로 부터 답변을 받았다. 보내준 샘플을 확인해서 문제가 될만한 부분을 찾았으며 다음번 패치에 수정이 되도록 하겠다고 한다. 다만 "탐색이 차단됨" 문제는 오류 재현이 되지 않아 확인을 못했다고하여 기종과 브라우저 버전 등에 대한 상세 정보를 다시 보냈다.]]></summary><content type="html"><![CDATA[<p>어제 고객으로부터 사용중인 페이지에서 카카오톡 링크가 동작하지 않는다는 보고를 받았다.
확인해 보니 안드로이드 크롬 브라우저에서 <code>탐색이 차단됨: intent:kakaolink://send?appkey=TGIF&amp;appver=1.0&amp;apiver=3.0&amp;linkver=3.5&amp;extras=%7B%2…b.io%22%7D&amp;objs=%5B%5D&amp;forwardable=false#Intent;package=com.kakao.talk;end;</code>라는 오류를 발생시키면서 기능이 정상적으로 동작하지 않았다. 웃긴건 해당 링크를 빠르게 여러번 클릭하면 한번씩 동작한다는 것. 이 문제는 항상 발생한다기 보다 특수한 경우에 발생하는 것으로 보인다.</p>
<p>아래의 코드를 보자. 오류를 kakao에 전달하기 위해 github에 페이지도 하나 만들어 두었다. <a href="https://asamaru7.github.io/requirejs-test/index2.html">https://asamaru7.github.io/requirejs-test/index2.html</a>
그리고 kakao api가 버전업되면 상황이 달라질 수도 있다. 현재는 v1.0.49다.</p>
<pre class="hljs javascript">&lt;!DOCTYPE html&gt;
<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
    </span>&lt;head&gt;
        &lt;script data-main="app2" src="lib/require.js"&gt;&lt;/script&gt;
        &lt;script type="text/javascript"&gt;
            function test1() {
                requirejs(["kakao"], function(Kakao, print) {
                  Kakao.init('TGIF');
                  Kakao.Link.sendTalkLink({});
                });
            }
        &lt;/script&gt;
    &lt;/head&gt;<span class="xml">
    </span>&lt;body&gt;
        &lt;h1&gt;탐색이 차단됨 오류 테스트 : 스마트폰에서 테스트&lt;/h1&gt;
        &lt;button type="button" onclick="test1();"&gt;KAKAO link&lt;/button&gt;
    &lt;/body&gt;<span class="xml">
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></pre>
<p>이 코드를 모바일 크롬 브라우저에서 확인하면 위의 오류를 볼 수 있다.
추정하는 상황은 이렇다. 브라우저에서 팝업창을 열려고 할 경우 사용자의 액션(클릭 이벤트)의 스코프를 벗어나서 <code>window.open</code>을 하려고하면 보안상의 이유로 팝업을 기본적으로 차단한다. 이것 또한 동일한 원인으로 예상된다. requirejs를 통해 kakao js를 호출하고 완료되면 동작을 실행하므로 스코프를 벗어나게 된다. 그렇기에 크롬에서 해당 링크를 차단시켜버리는 것으로 추정하고 있다. 현재로써는 이 문제를 해결하려면 kakao js의 호출과 init을 액션(클릭 이벤트)이 발생하기 이전에 해주는 방법 밖에 없다.</p>
<p>이 부분에 관련한 오류 보고를 개발자 센터에 등록했지만 kakao에서도 어쩔 수 없을 것으로 생각된다.</p>
<p><strong>하지만 정작 하고자 하는 이야기는 지금 부터다.</strong></p>
<p>사실 이 문제를 확인하다가 다른 오류를 만났다. 이와 관련된 오류 보고는 이미 수개월 전에 <a href="https://devtalk.kakao.com/t/amd-requirejs/10948">kakao 개발자 센터에 보고</a>되어 있었다.</p>
<p>요약하자만 이렇다. AMD(requirejs)를 사용해서 Kakao 모듈을 로드하고 나면 그 후 최초로 호출(require)되는 모듈은 <code>Uncaught Error: Mismatched anonymous define() module: function (){return dt}</code> 오류가 나면서 불려지지 않는다. 이를 해결하는 방법은 오류 보고에서 나왔던 것 처럼 dummy 모듈을 kakao 모듈 호출 후 한번 불러주는 것이다. 실제로 효과가 있고 나 또한 이렇게 임시 처리해서 서비스 중이다(찜찜하지만 현재로써는 다른 방법이 없다). 정확하게 이야기하자면 js 호출 시점이 문제가 아니라 init 함수 호출 직후부터 위 문제가 발생한다.</p>
<p>아래는 샘플 코드다. 이대로 넣으면 안되고 어떻게 처리하는지 흐름만 참고하기 바란다. 중요한 포인트는 init 직후 DUMMY 모듈을 한번 호출한다는 것이다. 당연히 DUMMY는 정의되지 않은 모듈이다. 불필요한 js 호출이 싫다면 실제로 dummy를 만들어 두고 호출해도 상관없다. 그리고 아래 코드에서는 kakao js를 호출하는 부분이 빠져있는데 당연히 불러줘야 한다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> kakaoApiInit == <span class="hljs-string">'undefined'</span>) {
    <span class="hljs-built_in">window</span>.Kakao.init(<span class="hljs-string">'apikey'</span>);
    kakaoApiInit = <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">try</span> { <span class="hljs-built_in">require</span>([<span class="hljs-string">'DUMMY'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{}); } <span class="hljs-keyword">catch</span>(e) {};
}
<span class="hljs-built_in">window</span>.Kakao.Link.sendTalkLink(data);</pre>
<p><strong>사실 당황스러운 것은 이런 오류가 발생한다는 것보다 관련된 오류 보고가 수개월 전에 되었음에도 불구하고 아직 해결이되지 않았다는 것이다.</strong> kakao 개발자 측에서는 오류 재현이 되지 않으니 샘플 코드를 올려달라는 것이다. 이미 문제를 제기한 사람이 정확한 상황을 제시 했음에도 불구하고 재현을 하지 못한다니... 의아스럽다.</p>
<p>처음엔 나도 일단은 그냥 이대로 두려고 했다. 하지만 아무래도 찝찝해서 오늘 시간을 내서 kakao에서 원하는 샘플 코드를 친절히(?) 작성해서 오류 보고에 댓글로 추가해 두었다. 앞으로의 kakao의 대응을 지켜보겠지만 사실 이미 실망스럽다. 비단 이번 오류가 아니더라도 예전에도 다수의 kakao api 오류를 접해 본 입장에서 다수가 사용하게되는 api에서 어이없는 오류가 발생하고 대처가 미흡하다는 점이 실망스럽다는 것이다. 그래서 안쓰고 싶지만 고객이 원하니 그럴수도 없고...</p>
<p>어쨌든 빠르게 수정되기를 바라며 혹시 동일한 문제를 겪는 개발자가 있다면 위의 방법대로 임시 처리라도 하기 바란다.</p>
<p><strong>첨언 : 2015/10/30</strong></p>
<p>얼마전 KAKAO로 부터 답변을 받았다. 보내준 샘플을 확인해서 문제가 될만한 부분을 찾았으며 다음번 패치에 수정이 되도록 하겠다고 한다. 다만 &quot;탐색이 차단됨&quot; 문제는 오류 재현이 되지 않아 확인을 못했다고하여 기종과 브라우저 버전 등에 대한 상세 정보를 다시 보냈다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/26/ansi-to-html/</id><title type="html">ANSI text를 HTML로 변환하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/26/ansi-to-html/"/><published>2015-10-26T14:38:36+09:00</published><updated>2015-10-26T14:38:36+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><category term="linux" label="linux" /><summary><![CDATA[지난 글 PHP를 CLI에서 사용시 ANSI Colors 적용하기에서 php cli에서 ANSI를 사용해서 출력하는 것에 대해 설명했었다. 이번엔 ANSI text를 HTML로 변환하는 것에 대해서 설명하려고 한다. 이게 왜 필요할까? ANSI는 shell에서만 색상이 적용되므로 해당 내용을 text 파일로 저장해서 다른 곳에서 열어보면 ANSI code가 그대로 보이거나 일반 text로 보인다. 따라서 결과물을 색상을 포함해서 다른 곳에 공유하기가 어렵다. 나의 경우는 ANSI를 html로 변환해서 chrome에서 열고 pdf로 출력해서 사용했다. 그럼 본론으로 들어가서 어떻게 하면 되는가? 여러가지 방법이 있다. PHP를 사용하는 방법, Bash script를 사용하는 방법, 특정 프로그램을 사용하는 방법 등 많지만 오늘은 그 중에서 몇가지만 소개하려고 한다. 우선 지난 번에 PHP에서 ANSI를 생성하는 것을 설명했으니 PHP 부터 보자. ansi-to-html 라이브러리를 사용해서 변환할 수 있다. 자세한 설명은 해당 사이트를 참고하면 자세히 나와 있다. 다음은 Bash script. converting ANSI to HTML. How to convert to html the colored shell output를 참고하면 Perl CPAN을 사용하는 방법과 ansi2html.sh from pixelbeat Bash script를 사용하는 방법을 안내하고 있다. 하지만 이 스크립트는 크게 권장하고 싶지는 않다. 간단한 내용엔 문제가 되지 않는데 text 양이 많아지니 너무 느렸다(300kb 가량). 마지막으로 aha를 사용하는 방법이다. 링크를 따라가면 github의 aha repository를 볼 수 있다. 설명은 설치 방법만 나와 있는데 아주 심플하다. 그래서 아래에 직접 사용한 방법을 조금 더 설명하겠다. centos 기준으로 아래와 같이 설치가 가능하다. 우분투라면 sudo apt-get install aha로 설치가 가능하다고 설명하는 사람이 있는데 확인은 못했다. $ su - $ git clone https://github.com/theZiz/aha.git $ make $ install 사용법은 help를 보면 아래와 같이 나온다. Ansi Html Adapter Version 0.4.8.0 aha takes SGR-colored Input and prints W3C conform HTML-Code use: aha <options> [-f file] aha (--help|-h|-?) aha reads the Input from a file or stdin and writes HTML-Code to stdout options: --black, -b: Black Background and White "standard color" --pink, -p: Pink Background --stylesheet, -s: Use a stylesheet instead of inline styles --iso X, -i X: Uses ISO 8859-X instead of utf-8. X must be 1..16 --title X, -t X: Gives the html output the title "X" instead of "stdin" or the filename --line-fix, -l: Uses a fix for inputs using control sequences to change the cursor position like htop. It's a hot fix, it may not work with any program like htop. Example: echo q | htop | aha -l > htop.htm --word-wrap, -w: Wrap long lines in the html file. This works with CSS3 supporting browsers as well as many older ones. --no-header, -n: Don't include header into generated HTML, useful for inclusion in full HTML files. Example: aha --help | aha --black > aha-help.htm Writes this help text to the file aha-help.htm Copyleft Alexander Matthes aka Ziz 2015 zizsdl@googlemail.com http://ziz.delphigl.com/tool_aha.php This application is subject to the MPL or LGPL. 간단한 사용법은 다음과 같다. 기타 옵션들은 몇가지 안되니 바로 보면 된다(사실상 사용할 일이 거의 없을 거 같다). $ ls -ahl | aha > result.html # 또는 $ aha -f {ANSI 파일} > result.html 나는 이 방법을 사용했다. 일단 c로 만들어져서 그런지 속도가 아주 빠르다. 하지만 한가지 단점이 있다. 표준 ANSI만 지원하는 것 같다. aixterm 에서 사용하는 속성들은 결과에서 무시되었다. 예를들어 글자색은 30-37 만 사용 가능하다. 구글에서 ansi to html 이라고 검색하면 보다 다양한 방법들이 있으니 필요하다면 한번 검색해보길 바란다.]]></summary><content type="html"><![CDATA[<p>지난 글 <a href="https://blog.asamaru.net/2015/10/23/php-cli-ansi-colors/">PHP를 CLI에서 사용시 ANSI Colors 적용하기</a>에서 php cli에서 ANSI를 사용해서 출력하는 것에 대해 설명했었다. 이번엔 ANSI text를 HTML로 변환하는 것에 대해서 설명하려고 한다.
이게 왜 필요할까? ANSI는 shell에서만 색상이 적용되므로 해당 내용을 text 파일로 저장해서 다른 곳에서 열어보면 ANSI code가 그대로 보이거나 일반 text로 보인다. 따라서 결과물을 색상을 포함해서 다른 곳에 공유하기가 어렵다.
나의 경우는 ANSI를 html로 변환해서 chrome에서 열고 pdf로 출력해서 사용했다.</p>
<p>그럼 본론으로 들어가서 어떻게 하면 되는가? 여러가지 방법이 있다. PHP를 사용하는 방법, Bash script를 사용하는 방법, 특정 프로그램을 사용하는 방법 등 많지만 오늘은 그 중에서 몇가지만 소개하려고 한다.</p>
<p>우선 지난 번에 PHP에서 ANSI를 생성하는 것을 설명했으니 PHP 부터 보자.</p>
<p><a href="https://github.com/sensiolabs/ansi-to-html">ansi-to-html</a> 라이브러리를 사용해서 변환할 수 있다. 자세한 설명은 해당 사이트를 참고하면 자세히 나와 있다.</p>
<p>다음은 Bash script.</p>
<p><a href="http://pablomarin-garcia.blogspot.kr/2011/04/converting-ansi-to-html-how-to-convert.html">converting ANSI to HTML. How to convert to html the colored shell output</a>를 참고하면 Perl CPAN을 사용하는 방법과 <a href="http://www.pixelbeat.org/scripts/ansi2html.sh">ansi2html.sh from pixelbeat</a> Bash script를 사용하는 방법을 안내하고 있다.
하지만 이 스크립트는 크게 권장하고 싶지는 않다. 간단한 내용엔 문제가 되지 않는데 text 양이 많아지니 너무 느렸다(300kb 가량).</p>
<p>마지막으로 <a href="https://github.com/theZiz/aha">aha</a>를 사용하는 방법이다. 링크를 따라가면 github의 aha repository를 볼 수 있다. 설명은 설치 방법만 나와 있는데 아주 심플하다. 그래서 아래에 직접 사용한 방법을 조금 더 설명하겠다.</p>
<p>centos 기준으로 아래와 같이 설치가 가능하다. 우분투라면 <code>sudo apt-get install aha</code>로 설치가 가능하다고 설명하는 사람이 있는데 확인은 못했다.</p>
<pre class="hljs bash">$ su -
$ git <span class="hljs-built_in">clone</span> https://github.com/theZiz/aha.git
$ make
$ install</pre>
<p>사용법은 help를 보면 아래와 같이 나온다.</p>
<pre class="hljs bash">Ansi Html Adapter Version 0.4.8.0
aha takes SGR-colored Input and prints W3C conform HTML-Code
use: aha &lt;options&gt; [-f file]
     aha (--<span class="hljs-built_in">help</span>|-h|-?)
aha reads the Input from a file or stdin and writes HTML-Code to stdout
options: --black,      -b: Black Background and White <span class="hljs-string">"standard color"</span>
         --pink,       -p: Pink Background
         --stylesheet, -s: Use a stylesheet instead of inline styles
         --iso X,    -i X: Uses ISO 8859-X instead of utf-8. X must be 1..16
         --title X,  -t X: Gives the html output the title <span class="hljs-string">"X"</span> instead of
                           <span class="hljs-string">"stdin"</span> or the filename
         --line-fix,   -l: Uses a fix <span class="hljs-keyword">for</span> inputs using control sequences to
                           change the cursor position like htop. It<span class="hljs-string">'s a hot fix,
                           it may not work with any program like htop. Example:
                           echo q | htop | aha -l &gt; htop.htm
         --word-wrap,  -w: Wrap long lines in the html file. This works with
                           CSS3 supporting browsers as well as many older ones.
         --no-header,  -n: Don'</span>t include header into generated HTML,
                           useful <span class="hljs-keyword">for</span> inclusion <span class="hljs-keyword">in</span> full HTML files.
Example: aha --<span class="hljs-built_in">help</span> | aha --black &gt; aha-help.htm
         Writes this <span class="hljs-built_in">help</span> text to the file aha-help.htm

Copyleft Alexander Matthes aka Ziz 2015
         zizsdl@googlemail.com
         http://ziz.delphigl.com/tool_aha.php
This application is subject to the MPL or LGPL.</pre>
<p>간단한 사용법은 다음과 같다. 기타 옵션들은 몇가지 안되니 바로 보면 된다(사실상 사용할 일이 거의 없을 거 같다).</p>
<pre class="hljs bash">$ ls -ahl | aha &gt; result.html

<span class="hljs-comment"># 또는</span>

$ aha -f {ANSI 파일} &gt; result.html</pre>
<p>나는 이 방법을 사용했다. 일단 c로 만들어져서 그런지 속도가 아주 빠르다. 하지만 한가지 단점이 있다. 표준 ANSI만 지원하는 것 같다. aixterm 에서 사용하는 속성들은 결과에서 무시되었다. 예를들어 글자색은 30-37 만 사용 가능하다.</p>
<p>구글에서 ansi to html 이라고 검색하면 보다 다양한 방법들이 있으니 필요하다면 한번 검색해보길 바란다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/23/php-cli-ansi-colors/</id><title type="html">PHP를 CLI에서 사용시 ANSI Colors 적용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/23/php-cli-ansi-colors/"/><published>2015-10-23T20:46:06+09:00</published><updated>2015-10-23T20:46:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[php를 CLI(shell 환경)에서 사용시 처리 과정을 확인하기 위한 로그나 결과를 echo 등을 사용해서 출력하는 방법을 사용할 것이다. 보통 shell script 작성시 python이나 bash script를 많이 사용하지만 php 프로그램과 연결된 작업을 해야 하거나 php가 손에 익어서 편할 경우 등 여러가지 이유로 php를 shell에서 사용하는 경우도 많다. 실제로 나는 가급적 프로세스 처리는 bash를 사용하고 간단한 작업은 python으로 하려고 하지만 php가 아무래도 손에 익은지라 조금 복잡한 작업은 php 프로그램과 무관하더라고 php를 사용하는 경우가 많다. 나는 이런 작업 과정에서 출력되는 내용을 보기 좋게 표현하는 부분이 항상 불만이었다. 몇 줄 안나오는 문제면 상관없지만 다량의 로그가 출력되는 작업시에는 중요한 부분을 조금더 잘 보이게 할 방법이 필요했다. 그래서 여러 줄을 띄우거나 탭을 들여쓰는 등의 방법을 주로 사용했었다. 그런데 오늘도 이런 작업을 하던 중에 갑자기 ANSI escape code 중 ANSI Color가 생각났다(왜 이제야 이런 것이 있다는 것을 떠 올렸는지 모르겠다). 직접 구현해도 되겠지만 아무래도 귀찮을 듯해서 검색을 해봤더니 생각보다 많은 자료를 찾을 수 있었다. 역시 사람들은 비슷한 생각을 하나보다. 아래는 이번에 찾은 자료들의 목록이다. PHP CLI Colors – PHP Class Command Line Colors (bash) superbrothers/ansi-color.php Generating Command Line Colors with PHP PHP port of Term::ANSIColor 나는 이 중에서 맨마지막의 PHP port of Term::ANSIColor를 선택했다. 필요에 맞게 아주 약간의 수정을 해서 사용해 봤는데 다양한 형식을 지원해서 나름 만족스럽다. 혹시 php를 CLI에서 사용할 일이 있다면 한번쯤 사용해 보기를 추천한다. 위의 라이브러리들을 굳이 쓰지 않더라도 소스 코드를 조금만 보면 ANSI를 적용하는 방법을 알 수 있으니 보기 좋은 결과물을 원할때 써보기 바란다.]]></summary><content type="html"><![CDATA[<p>php를 CLI(shell 환경)에서 사용시 처리 과정을 확인하기 위한 로그나 결과를 <code>echo</code> 등을 사용해서 출력하는 방법을 사용할 것이다.</p>
<p>보통 shell script 작성시 python이나 bash script를 많이 사용하지만 php 프로그램과 연결된 작업을 해야 하거나 php가 손에 익어서 편할 경우 등 여러가지 이유로 php를 shell에서 사용하는 경우도 많다.</p>
<p>실제로 나는 가급적 프로세스 처리는 bash를 사용하고 간단한 작업은 python으로 하려고 하지만 php가 아무래도 손에 익은지라 조금 복잡한 작업은 php 프로그램과 무관하더라고 php를 사용하는 경우가 많다.</p>
<p>나는 이런 작업 과정에서 출력되는 내용을 보기 좋게 표현하는 부분이 항상 불만이었다. 몇 줄 안나오는 문제면 상관없지만 다량의 로그가 출력되는 작업시에는 중요한 부분을 조금더 잘 보이게 할 방법이 필요했다. 그래서 여러 줄을 띄우거나 탭을 들여쓰는 등의 방법을 주로 사용했었다.</p>
<p>그런데 오늘도 이런 작업을 하던 중에 갑자기 <a href="https://en.wikipedia.org/wiki/ANSI_escape_code">ANSI escape code</a> 중 <a href="https://en.wikipedia.org/wiki/ANSI_escape_code#Colors">ANSI Color</a>가 생각났다(왜 이제야 이런 것이 있다는 것을 떠 올렸는지 모르겠다). 직접 구현해도 되겠지만 아무래도 귀찮을 듯해서 검색을 해봤더니 생각보다 많은 자료를 찾을 수 있었다. 역시 사람들은 비슷한 생각을 하나보다.</p>
<p>아래는 이번에 찾은 자료들의 목록이다.</p>
<ul>
<li><a href="http://www.if-not-true-then-false.com/2010/php-class-for-coloring-php-command-line-cli-scripts-output-php-output-colorizing-using-bash-shell-colors/">PHP CLI Colors – PHP Class Command Line Colors (bash)</a></li>
<li><a href="https://gist.github.com/superbrothers/3431198">superbrothers/ansi-color.php</a></li>
<li><a href="http://softkube.com/blog/generating-command-line-colors-with-php">Generating Command Line Colors with PHP</a></li>
<li><a href="http://blog.ianty.com/php/ansicolor/">PHP port of Term::ANSIColor</a></li>
</ul>
<p>나는 이 중에서 맨마지막의 <a href="http://blog.ianty.com/php/ansicolor/">PHP port of Term::ANSIColor</a>를 선택했다. 필요에 맞게 아주 약간의 수정을 해서 사용해 봤는데 다양한 형식을 지원해서 나름 만족스럽다.</p>
<p>혹시 php를 CLI에서 사용할 일이 있다면 한번쯤 사용해 보기를 추천한다. 위의 라이브러리들을 굳이 쓰지 않더라도 소스 코드를 조금만 보면 ANSI를 적용하는 방법을 알 수 있으니 보기 좋은 결과물을 원할때 써보기 바란다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/22/setting-swift-compiler-flags-in-cocoapods/</id><title type="html">CocoaPods의 Swift compiler flags(DEBUG) 설정하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/22/setting-swift-compiler-flags-in-cocoapods/"/><published>2015-10-22T11:28:37+09:00</published><updated>2015-10-22T11:28:37+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><category term="swift" label="swift" /><summary><![CDATA[Xcode에서 CocoaPods를 이용해 sub module 만들기라는 글에서 Sub Module을 만드는 방법을 설명했었다. 그런데 이렇게 연결된 Module을 사용하는 과정에서 불편한 부분이 생겼다. 다름아닌 #if DEBUG를 Sub Module에서 적용이 되지 않는 것이다. 이 부분은 생각해보면 당연하다 별개의 Module을 빌드에서 연결하는 것이니 DEBUG 상수를 사용하기 위한 설정을 별도로 해야 하는 것이다(DEBUG 상수 설정 방법은 Swift 프로젝트의 디버그(DEBUG) 플래그을 참고하면 된다). 그래서 CocoaPods에서 추가해준 프로젝트에 DEBUG 관련 설정을 해주니 원하는대로 #if DEBUG를 사용할 수 있었다. 그런데 여기서 모든 문제가 해결된 것이 아니었다. pod update 실행시 Module이 재설치 되면서 관련 설정이 다시 초기화 되는 것이다. 이걸 매번 해줄 수도 없고... 그래서 조금 찾아보니 Setting Swift compiler flags in CocoaPods라는 글에서 해결 방법을 제시하고 있었다. 결론을 이야기하자면 Podfile에서 post_install을 사용해서 DEBUG 상수를 자동으로 추가하도록 하는 것이다. Podfile에 아래의 내용을 추가하면 된다. post_install do |installer| installer.pods_project.targets.each do |target| if target.name == '{원하는 모듈명}' target.build_configurations.each do |config| if config.name == 'Debug' config.build_settings['OTHER_SWIFT_FLAGS'] = '-DDEBUG' else config.build_settings['OTHER_SWIFT_FLAGS'] = '' end end end end end]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2015/10/21/xcode-create-sub-module-using-cocoapods/">Xcode에서 CocoaPods를 이용해 sub module 만들기</a>라는 글에서 Sub Module을 만드는 방법을 설명했었다. 그런데 이렇게 연결된 Module을 사용하는 과정에서 불편한 부분이 생겼다. 다름아닌 <code>#if DEBUG</code>를 Sub Module에서 적용이 되지 않는 것이다. 이 부분은 생각해보면 당연하다 별개의 Module을 빌드에서 연결하는 것이니 <code>DEBUG</code> 상수를 사용하기 위한 설정을 별도로 해야 하는 것이다(<code>DEBUG</code> 상수 설정 방법은 <a href="http://seorenn.blogspot.kr/2014/11/xcode-swift-debug.html">Swift 프로젝트의 디버그(DEBUG) 플래그</a>을 참고하면 된다). 그래서 CocoaPods에서 추가해준 프로젝트에 <code>DEBUG</code> 관련 설정을 해주니 원하는대로 <code>#if DEBUG</code>를 사용할 수 있었다. 그런데 여기서 모든 문제가 해결된 것이 아니었다. <code>pod update</code> 실행시 Module이 재설치 되면서 관련 설정이 다시 초기화 되는 것이다. 이걸 매번 해줄 수도 없고... 그래서 조금 찾아보니 <a href="http://marginalfutility.net/2015/10/11/swift-compiler-flags/">Setting Swift compiler flags in CocoaPods</a>라는 글에서 해결 방법을 제시하고 있었다.</p>
<p>결론을 이야기하자면 <code>Podfile</code>에서 <code>post_install</code>을 사용해서 <code>DEBUG</code> 상수를 자동으로 추가하도록 하는 것이다. <code>Podfile</code>에 아래의 내용을 추가하면 된다.</p>
<pre class="hljs ruby">post_install <span class="hljs-keyword">do</span> <span class="hljs-params">|installer|</span>
    installer.pods_project.targets.each <span class="hljs-keyword">do</span> <span class="hljs-params">|target|</span>
        <span class="hljs-keyword">if</span> target.name == <span class="hljs-string">'{원하는 모듈명}'</span>
            target.build_configurations.each <span class="hljs-keyword">do</span> <span class="hljs-params">|config|</span>
                <span class="hljs-keyword">if</span> config.name == <span class="hljs-string">'Debug'</span>
                    config.build_settings[<span class="hljs-string">'OTHER_SWIFT_FLAGS'</span>] = <span class="hljs-string">'-DDEBUG'</span>
                    <span class="hljs-keyword">else</span>
                    config.build_settings[<span class="hljs-string">'OTHER_SWIFT_FLAGS'</span>] = <span class="hljs-string">''</span>
                <span class="hljs-keyword">end</span>
            <span class="hljs-keyword">end</span>
        <span class="hljs-keyword">end</span>
    <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/21/swift-2-dot-0-singleton/</id><title type="html">Swift 2.0에서 상속 가능한 Singleton 생성하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/21/swift-2-dot-0-singleton/"/><published>2015-10-21T16:28:03+09:00</published><updated>2015-10-21T16:28:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><category term="swift" label="swift" /><summary><![CDATA[오늘은 swift에서 Singleton 객체를 생성하는 방법을 설명하고자 한다. 우선 Objective-C에서는 어떻게 생성하는지는 아래를 보면 알 수 있다. 우선 Singleton Class 정의. @implementation SingletonCls + (id)sharedManager { static SingletonCls *staticManager = nil; static dispatch_once_t onceToken; dispatch_once(&onceToken, ^{ staticManager = [[self alloc] init]; }); return staticManager; } @end 그리고 사용시. [SingletonCls sharedManager]; 그럼 Swift에서는 어떻게 하는지를 살펴보자. 사실 아주 간단하다. Singleton Class 정의. class SingletonCls { static let sharedInstance = SingletonCls() } 그리고 사용시. SingletonCls.sharedInstance 그런데 오늘 하고자하는 이야기는 이게 아니다. 기본적인 Singleton Class를 정의하는 것은 검색하면 많이 나온다. 하지만 내가 필요했던 것은 상속이 가능한 Swift Singleton Class다. 아래의 예를 보자. class SingletonCls { static let sharedInstance = SingletonCls() var X:Int? } class SingletonClsChild : SingletonCls { var Y:Int = 9 } let A = SingletonClsChild.sharedInstance; print(A); print((A as! SingletonClsChild).Y); test.SingletonCls Could not cast value of type 'test.SingletonCls' (0x10d89d2e0) to 'test.SingletonClsChild' (0x10d89d390). 위 코드는 실행하면 오류가 난다. SingletonClsChild.sharedInstance의 결과가 SingletonCls 인스턴스이기 때문이다. 우선 이 문제를 해결하기 위한 기본 코드부터 보자. Swift: Singleton Inheritance에 나온 코드를 약간 수정했다. public class SingletonCls { static var _singleton_instance = [String: SingletonCls]() public class var shareInstance:SingletonCls { get { let classname = NSStringFromClass(self) if ((_singleton_instance[classname]) != nil) { return (_singleton_instance[classname])! } let singletonObject = self.init() _singleton_instance[classname] = singletonObject return singletonObject } } required public init() { } } public class SingletonClsChild : SingletonCls { } SingletonCls.sharedInstance SingletonClsChild.sharedInstance 위 코드에서 제시한 방법을 사용하면 상속이 가능한 Singleton Class를 정의할 수 있다. 사실 여기에 약간의 기능이 더 추가되어 있다. 호출하는 Class에 따라 각각의 Instance를 생성해서 보관하는 부분이다. 예를 들어 아래의 코드를 보자. public class SingletonCls { static var _singleton_instance = [String: SingletonCls]() public class var shareInstance:SingletonCls { get { let classname = NSStringFromClass(self) if ((_singleton_instance[classname]) != nil) { return (_singleton_instance[classname])! } let singletonObject = self.init() _singleton_instance[classname] = singletonObject return singletonObject } } required public init() { } var X:Int = 1 } public class SingletonClsChild : SingletonCls { var Y:Int = 9 } let A = SingletonClsChild.shareInstance; print(A.X); print((A as! SingletonClsChild).Y); A.X = 2 let B = SingletonCls.shareInstance; print(B.X); 결과. 1 9 1 결과를 보면 맨 마지막 값이 2가 아닌 1이 나오는 것을 확인 할 수 있다. 이것은 Singleton이 만들어 졌으나 SingletonCls와 SingletonClsChild가 각각 만들어 졌음을 뜻한다. 이런 추가적인 부분을 제외하고 기본적인 형태만 사용하고자 할 경우에는 아래와 같이 하면 된다. public class SingletonCls { static var _singleton_instance: SingletonCls? public class var shareInstance:SingletonCls { get { if (_singleton_instance == nil) { _singleton_instance = self.init() } return _singleton_instance! } } required public init() { } } SingletonCls.sharedInstance 위 코드를 기준으로 오류가 나던 코드를 다시 만들어 보자. public class SingletonCls { static var _singleton_instance: SingletonCls? public class var shareInstance:SingletonCls { get { if (_singleton_instance == nil) { _singleton_instance = self.init() } return _singleton_instance! } } required public init() { } var X:Int? } public class SingletonClsChild : SingletonCls { var Y:Int = 9 } let A = SingletonClsChild.shareInstance; A.X = 1 print(A) print(A.X); print((A as! SingletonClsChild).Y); 아래와 같은 결과가 출력된다. 원하던 결과를 얻었다. test.SingletonClsChild Optional(1) 9]]></summary><content type="html"><![CDATA[<p>오늘은 swift에서 Singleton 객체를 생성하는 방법을 설명하고자 한다.</p>
<p>우선 Objective-C에서는 어떻게 생성하는지는 아래를 보면 알 수 있다.</p>
<p>우선 Singleton Class 정의.</p>
<pre class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@implementation</span> <span class="hljs-title">SingletonCls</span></span>

+ (<span class="hljs-keyword">id</span>)sharedManager {
    <span class="hljs-keyword">static</span> SingletonCls *staticManager = <span class="hljs-literal">nil</span>;
    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;

    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^{
        staticManager = [[<span class="hljs-keyword">self</span> alloc] init];
    });
    <span class="hljs-keyword">return</span> staticManager;
}

<span class="hljs-keyword">@end</span></pre>
<p>그리고 사용시.</p>
<pre class="hljs objectivec">[SingletonCls sharedManager];</pre>
<p>그럼 Swift에서는 어떻게 하는지를 살펴보자. 사실 아주 간단하다.</p>
<p>Singleton Class 정의.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonCls</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> sharedInstance = <span class="hljs-type">SingletonCls</span>()
}</pre>
<p>그리고 사용시.</p>
<pre class="hljs swift"><span class="hljs-type">SingletonCls</span>.sharedInstance</pre>
<p>그런데 오늘 하고자하는 이야기는 이게 아니다. 기본적인 Singleton Class를 정의하는 것은 검색하면 많이 나온다. 하지만 내가 필요했던 것은 상속이 가능한 Swift Singleton Class다. 아래의 예를 보자.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonCls</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">let</span> sharedInstance = <span class="hljs-type">SingletonCls</span>()

    <span class="hljs-keyword">var</span> <span class="hljs-type">X</span>:<span class="hljs-type">Int</span>?
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonClsChild</span> : <span class="hljs-title">SingletonCls</span> </span>{
    <span class="hljs-keyword">var</span> <span class="hljs-type">Y</span>:<span class="hljs-type">Int</span> = <span class="hljs-number">9</span>
}

<span class="hljs-keyword">let</span> <span class="hljs-type">A</span> = <span class="hljs-type">SingletonClsChild</span>.sharedInstance;
<span class="hljs-built_in">print</span>(<span class="hljs-type">A</span>);
<span class="hljs-built_in">print</span>((<span class="hljs-type">A</span> <span class="hljs-keyword">as</span>! <span class="hljs-type">SingletonClsChild</span>).<span class="hljs-type">Y</span>);</pre>
<pre><code>test.SingletonCls
Could not cast value of type 'test.SingletonCls' (0x10d89d2e0) to 'test.SingletonClsChild' (0x10d89d390).</code></pre>
<p>위 코드는 실행하면 오류가 난다. <code>SingletonClsChild.sharedInstance</code>의 결과가 <code>SingletonCls</code> 인스턴스이기 때문이다.</p>
<p>우선 이 문제를 해결하기 위한 기본 코드부터 보자. <a href="http://www.scriptscoop.net/t/23f5fc2cdd82/swift-singleton-inheritance.html">Swift: Singleton Inheritance</a>에 나온 코드를 약간 수정했다.</p>
<pre class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonCls</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">var</span> _singleton_instance = [<span class="hljs-type">String</span>: <span class="hljs-type">SingletonCls</span>]()
    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">var</span> <span class="hljs-title">shareInstance</span>:<span class="hljs-title">SingletonCls</span> </span>{
        <span class="hljs-keyword">get</span> {
            <span class="hljs-keyword">let</span> classname = <span class="hljs-type">NSStringFromClass</span>(<span class="hljs-keyword">self</span>)
            <span class="hljs-keyword">if</span> ((_singleton_instance[classname]) != <span class="hljs-literal">nil</span>) {
                <span class="hljs-keyword">return</span> (_singleton_instance[classname])!
            }
            <span class="hljs-keyword">let</span> singletonObject = <span class="hljs-keyword">self</span>.<span class="hljs-keyword">init</span>()
            _singleton_instance[classname] = singletonObject
            <span class="hljs-keyword">return</span> singletonObject
        }
    }

    <span class="hljs-keyword">required</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>() { }
}

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonClsChild</span> : <span class="hljs-title">SingletonCls</span> </span>{
}</pre>
<pre class="hljs swift"><span class="hljs-type">SingletonCls</span>.sharedInstance
<span class="hljs-type">SingletonClsChild</span>.sharedInstance</pre>
<p>위 코드에서 제시한 방법을 사용하면 상속이 가능한 Singleton Class를 정의할 수 있다. 사실 여기에 약간의 기능이 더 추가되어 있다. 호출하는 Class에 따라 각각의 Instance를 생성해서 보관하는 부분이다. 예를 들어 아래의 코드를 보자.</p>
<pre class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonCls</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">var</span> _singleton_instance = [<span class="hljs-type">String</span>: <span class="hljs-type">SingletonCls</span>]()
    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">var</span> <span class="hljs-title">shareInstance</span>:<span class="hljs-title">SingletonCls</span> </span>{
        <span class="hljs-keyword">get</span> {
            <span class="hljs-keyword">let</span> classname = <span class="hljs-type">NSStringFromClass</span>(<span class="hljs-keyword">self</span>)
            <span class="hljs-keyword">if</span> ((_singleton_instance[classname]) != <span class="hljs-literal">nil</span>) {
                <span class="hljs-keyword">return</span> (_singleton_instance[classname])!
            }
            <span class="hljs-keyword">let</span> singletonObject = <span class="hljs-keyword">self</span>.<span class="hljs-keyword">init</span>()
            _singleton_instance[classname] = singletonObject
            <span class="hljs-keyword">return</span> singletonObject
        }
    }

    <span class="hljs-keyword">required</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>() { }

    <span class="hljs-keyword">var</span> <span class="hljs-type">X</span>:<span class="hljs-type">Int</span> = <span class="hljs-number">1</span>
}

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonClsChild</span> : <span class="hljs-title">SingletonCls</span> </span>{
    <span class="hljs-keyword">var</span> <span class="hljs-type">Y</span>:<span class="hljs-type">Int</span> = <span class="hljs-number">9</span>
}

<span class="hljs-keyword">let</span> <span class="hljs-type">A</span> = <span class="hljs-type">SingletonClsChild</span>.shareInstance;
<span class="hljs-built_in">print</span>(<span class="hljs-type">A</span>.<span class="hljs-type">X</span>);
<span class="hljs-built_in">print</span>((<span class="hljs-type">A</span> <span class="hljs-keyword">as</span>! <span class="hljs-type">SingletonClsChild</span>).<span class="hljs-type">Y</span>);
<span class="hljs-type">A</span>.<span class="hljs-type">X</span> = <span class="hljs-number">2</span>
<span class="hljs-keyword">let</span> <span class="hljs-type">B</span> = <span class="hljs-type">SingletonCls</span>.shareInstance;
<span class="hljs-built_in">print</span>(<span class="hljs-type">B</span>.<span class="hljs-type">X</span>);</pre>
<p>결과.</p>
<pre><code>1
9
1</code></pre>
<p>결과를 보면 맨 마지막 값이 2가 아닌 1이 나오는 것을 확인 할 수 있다. 이것은 Singleton이 만들어 졌으나 <code>SingletonCls</code>와 <code>SingletonClsChild</code>가 각각 만들어 졌음을 뜻한다.</p>
<p>이런 추가적인 부분을 제외하고 기본적인 형태만 사용하고자 할 경우에는 아래와 같이 하면 된다.</p>
<pre class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonCls</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">var</span> _singleton_instance: <span class="hljs-type">SingletonCls</span>?
    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">var</span> <span class="hljs-title">shareInstance</span>:<span class="hljs-title">SingletonCls</span> </span>{
        <span class="hljs-keyword">get</span> {
            <span class="hljs-keyword">if</span> (_singleton_instance == <span class="hljs-literal">nil</span>) {
                _singleton_instance = <span class="hljs-keyword">self</span>.<span class="hljs-keyword">init</span>()
            }
            <span class="hljs-keyword">return</span> _singleton_instance!
        }
    }

    <span class="hljs-keyword">required</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>() { }
}</pre>
<pre class="hljs swift"><span class="hljs-type">SingletonCls</span>.sharedInstance</pre>
<p>위 코드를 기준으로 오류가 나던 코드를 다시 만들어 보자.</p>
<pre class="hljs swift"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonCls</span> </span>{
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">var</span> _singleton_instance: <span class="hljs-type">SingletonCls</span>?
    <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">var</span> <span class="hljs-title">shareInstance</span>:<span class="hljs-title">SingletonCls</span> </span>{
        <span class="hljs-keyword">get</span> {
            <span class="hljs-keyword">if</span> (_singleton_instance == <span class="hljs-literal">nil</span>) {
                _singleton_instance = <span class="hljs-keyword">self</span>.<span class="hljs-keyword">init</span>()
            }
            <span class="hljs-keyword">return</span> _singleton_instance!
        }
    }

    <span class="hljs-keyword">required</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">init</span>() { }

    <span class="hljs-keyword">var</span> <span class="hljs-type">X</span>:<span class="hljs-type">Int</span>?
}

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonClsChild</span> : <span class="hljs-title">SingletonCls</span> </span>{
    <span class="hljs-keyword">var</span> <span class="hljs-type">Y</span>:<span class="hljs-type">Int</span> = <span class="hljs-number">9</span>
}

<span class="hljs-keyword">let</span> <span class="hljs-type">A</span> = <span class="hljs-type">SingletonClsChild</span>.shareInstance;
<span class="hljs-type">A</span>.<span class="hljs-type">X</span> = <span class="hljs-number">1</span>
<span class="hljs-built_in">print</span>(<span class="hljs-type">A</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-type">A</span>.<span class="hljs-type">X</span>);
<span class="hljs-built_in">print</span>((<span class="hljs-type">A</span> <span class="hljs-keyword">as</span>! <span class="hljs-type">SingletonClsChild</span>).<span class="hljs-type">Y</span>);</pre>
<p>아래와 같은 결과가 출력된다. 원하던 결과를 얻었다.</p>
<pre><code>test.SingletonClsChild
Optional(1)
9</code></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/21/xcode-create-sub-module-using-cocoapods/</id><title type="html">Xcode에서 CocoaPods를 이용해 sub module 만들기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/21/xcode-create-sub-module-using-cocoapods/"/><published>2015-10-21T11:23:33+09:00</published><updated>2015-10-21T11:23:33+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[이번엔 Xcode로 앱 제작시 Sub Module을 만드는 방법을 설명하고자 한다. 그전에 우선 어떤 경우에 Sub Module을 사용하려고 하는지 부터 이야기를 해야 할 듯하다. 나의 경우는 여러 프로젝트에서 공통적으로 사용 할만한 유틸성 클래스들을 주로 묶어서 별도 모듈을 만들어 사용한다. 이렇게하면 비슷한 작업의 반복을 줄일 수 있고 기능도 통합적으로 관리할 수 있어 유지보수가 편하다. 이것은 예를들어 설명한 것일뿐 여러가지 용도로 사용될 수 있다. Android Studio의 경우 Module을 추가하고 gradle을 설정함으로써 간단하게 서브 모듈을 만들 수 있다. 그런데 Xcode에서는 그렇게 쉬운 방법을 찾질 못했다. 당연히 방법이 있는데 내가 못 찾은 것일 수 있다. 내가 찾아본 방법은 대부분 Framework 프로젝트를 만들어서 사용할 프로젝트에서 추가해서 사용하는 방법들이었다. 그런데 이 방법들은 초기 설정 과정이 다소 복잡하고 Sub Module의 소스를 수정하려면 따로 build를 해서 넣어야 하는 불편함이 있었다. 그래서 여러가지 글들을 찾아 다니다가 CocoaPods: Working With Internal Pods Without Hassle을 찾았다. 여기서는 CocoaPods를 이용해서 Internal Pods를 만들어 모듈을 적용하는 방법을 설명하고 있다. 내가 찾던 것과 가장 유사한 방법으로 바로 적용해 봤다. 단, 이 글에서 설명하는 것 중 CocoaPods Repository를 설정하는 과정은 필요하지 않아 제외했다(사실 귀찮음이 가장 큰 이유다). 하지만 모듈의 버전을 관리하며 체계적으로 적용할 필요가 있다면 CocoaPods Repository를 만들어 관리하는 것을 권장한다. 본격적으로 설명에 앞서 이 방법을 사용할 때의 장점에 대해 간략히 설명하고자 한다. Sub Module과 메인 프로젝트를 하나의 Xcode에서 작업 가능하다. Sub Module의 소스 변경이 있어도 별도로 빌드할 필요가 없다(메인 프로젝트 빌드에 바로 반용된다). Sub Module과 메인 프로젝트의 형상 관리는 각각 적용된다. 이제부터 위 글에서 설명하는 내용을 보고 내가 적용한 방법을 설명하겠다. 환경 일단 내가 설명하기 위해 작업한 환경은 아래와 같다. 하지만 꼭 아래 환경이 맞춰져야하는 것은 아니다. Xcode의 기능을 직접적으로 사용한다기 보다 CocoaPods에 의해서 대부분 처리되기 때문이다. OSX 10.11 Xcode 7 CocoaPods 0.39.0 Swift iOS 8 (Deploy Target) Git Sub Module 이제부터 본격적으로 Sub Module을 만드는 과정을 살펴보자. CocoaPods / Git 설치 당연히 이미 설치되어 있다면 다시 설치할 필요는 없다. CocoaPods 설치는 CocoaPods 사용법에서 간단히 안내했던 내용이지만 아주 간단하다. $ [sudo] gem install cocoapods $ pod setup Git는 Git Downloads에서 자신의 환경에 맞는 설치 파일을 다운받아 간단히 설치 가능하다. 그리고 Git는 submodule을 사용해서 프로젝트와 Sub Module을 연결하고 함께 형상 관리를 하기 위한 것으로 SVN과 같은 다른 형상 관리 도구를 사용한다면 그것을 그대로 사용해도 된다. 다만 아래의 설명에서 Git 처리 부분을 해당 형상 관리 도구에 맞추어 적용하면 된다(형상 관리를 하지 않겠다면 하지 않아도 된다. 하지만 권장하지는 않는다). Xcode 프로젝트 만들기 이 부분은 특별히 설정하지 않아도 될 듯하다. 자신의 필요에 맞는 프로젝트를 만들거나 기존의 프로젝트를 그대로 사용해도 무방하다. 다만 신규로 개설했다면 git repository에 등록하자. 앞서 설명과 마찬가지로 SVN이라면 SVN에 등록해도 된다. 나의 경우는 gitlab.com을 사용중이라 여기에 맞춰 예를들면 아래와 같은 과정을 거친다. gitlab에서 신규 프로젝트 개설 생성한 프로젝트를 아래와 같이 git에 연결한다. $ cd {프로젝트명} $ git init $ git remote add origin https://gitlab.com/{사용자}/{프로젝트명}.git $ git add . $ git commit $ git push -u origin master Sub Module Xcode 프로젝트 만들기 Sub Module로 사용할 프로젝트를 하나 더 생성한다. 나의 경우는 Cocoa Touch Framework로 생성했다. Cocoa Touch Static Library 등의 다른 형식은 적용해보지 않아서 동일하게 적용이 되는지는 모르겠다. 특별한 이유가 없다면 Cocoa Touch Framework로 생성한다. 이후 부터는 화면에서 안내하는대로 프로젝트를 개설하면 되므로 자세한 설명은 생략하겠다. 생성을 마쳤다면 이 프로젝트도 "Xcode 프로젝트 만들기" 부분에서 예를 들었던 내용처럼 git에 연결한다. podspec 생성 Sub Module을 만들었다면 CocoaPods을 통해 연결할 수 있도록 podspec을 생성해야 한다. Sub Module 프로젝트 폴더에 가서 {모듈명}.podspec 파일을 생성하고 아래와 같이 내용을 넣어준다. 이 부분도 상황에 따라 내용을 변경해도 상관없다. Pod::Spec.new do |s| s.name = '{모듈명}' s.version = '1.0.0' s.license = 'MIT' s.summary = '{설명}' s.homepage = 'https://gitlab.com/subva/SUBiOSFramework' s.author = { '{작성자}' => '{작성자}{도메인}' } s.source = { :git => '{git repository}', :tag => s.version } s.ios.deployment_target = '8.0' s.source_files = '{모듈명}/*.swift' s.requires_arc = true end Sub Module 연결 위 과정을 문제없이 진행했다면 git에 연결된 두개의 프로젝트(메인 프로젝트, Sub Module 프로젝트)를 가지고 있을 것이다. 이제는 본격적으로 둘을 연결하는 과정이다. git submodule 추가 메인 프로젝트 폴더로 이동하여 git submodule로 Sub Module을 clone한다. $ cd {프로젝트명} $ git submodule add https://gitlab.com/{사용자}/{프로젝트명}.git {Sub Module명} $ git submodule init $ git submodule update CocoaPods로 Sub Module 연결 메인 프로젝트 폴더에 Podfile을 생성하고 아래와 같이 내용을 입력한다. Pods에 대한 설정 내용은 프로젝트에 따라 달라 질 수 있다. 중요한 부분은 use_frameworks!, pod '{Sub Module명}', :path => './{Sub Module명}' 이다. 그리고 platform의 '8.0' 부분도 빠지면 오류가 날 수 있는데 이 부분은 Sub Module의 deploy target에 맞춰져야 한다. source 'https://github.com/CocoaPods/Specs.git' platform :ios, '8.0' use_frameworks! pod '{Sub Module명}', :path => './{Sub Module명}' 파일을 생성했다면 아래의 명령을 실행해서 Pod를 실행한다. $ pod install 설정 확인 이제 정상적으로 연결되었는지 확인하면 된다. CocoaPods을 사용해 봤다면 알겠지만 CocoaPods을 사용 할 때는 xcodeproj가 아닌 xcworkspace로 프로젝트를 열어야 한다. 위 과정이 정상적이었다면 아래와 같이 Pods 영역에 "Development Pods"라는 것이 추가되어 있고 그 안애 추가한 Sub Module이 보일 것이다. 여기까지 확인되었다면 Sub Module 연결 과정은 모두 끝났다. 마지막으로 한가지만 더 이야기하겠다. 프로젝트를 열어서 해당 모듈을 사용하려면 당연히 소스에서 import를 해야하는데 처음엔 연결이 되지 않는 것처럼 보일 수 있다. 이 부분은 모듈이 아직 빌드가 되지 않아서 그런 것이니 빌드를 한번 해주고나면 정상적으로 사용이 가능할 것이다. 위에서 Git나 CocoaPods에 대한 설명을 하느라 조금 길어졌지만 이 두가지를 사용할 줄 알고 있다면 설정 과정은 생각보다 아주 간단하다. Android Studio와 비교하면 과정도 거의 유사하다는 것을 알 것이다.]]></summary><content type="html"><![CDATA[<p>이번엔 Xcode로 앱 제작시 Sub Module을 만드는 방법을 설명하고자 한다.</p>
<p>그전에 우선 어떤 경우에 Sub Module을 사용하려고 하는지 부터 이야기를 해야 할 듯하다. 나의 경우는 여러 프로젝트에서 공통적으로 사용 할만한 유틸성 클래스들을 주로 묶어서 별도 모듈을 만들어 사용한다. 이렇게하면 비슷한 작업의 반복을 줄일 수 있고  기능도 통합적으로 관리할 수 있어 유지보수가 편하다. 이것은 예를들어 설명한 것일뿐 여러가지 용도로 사용될 수 있다.</p>
<p>Android Studio의 경우 Module을 추가하고 gradle을 설정함으로써 간단하게 서브 모듈을 만들 수 있다. 그런데 Xcode에서는 그렇게 쉬운 방법을 찾질 못했다. 당연히 방법이 있는데 내가 못 찾은 것일 수 있다. 내가 찾아본 방법은 대부분 Framework 프로젝트를 만들어서 사용할 프로젝트에서 추가해서 사용하는 방법들이었다. 그런데 이 방법들은 초기 설정 과정이 다소 복잡하고 Sub Module의 소스를 수정하려면 따로 build를 해서 넣어야 하는 불편함이 있었다.</p>
<p>그래서 여러가지 글들을 찾아 다니다가 <a href="http://albertodebortoli.github.io/blog/2014/03/11/cocoapods-working-with-internal-pods/">CocoaPods: Working With Internal Pods Without Hassle</a>을 찾았다. 여기서는 <a href="https://cocoapods.org/">CocoaPods</a>를 이용해서 Internal Pods를 만들어 모듈을 적용하는 방법을 설명하고 있다. 내가 찾던 것과 가장 유사한 방법으로 바로 적용해 봤다. 단, 이 글에서 설명하는 것 중 CocoaPods Repository를 설정하는 과정은 필요하지 않아 제외했다(사실 귀찮음이 가장 큰 이유다). 하지만 모듈의 버전을 관리하며 체계적으로 적용할 필요가 있다면 CocoaPods Repository를 만들어 관리하는 것을 권장한다.</p>
<p>본격적으로 설명에 앞서 이 방법을 사용할 때의 장점에 대해 간략히 설명하고자 한다.</p>
<ul>
<li>Sub Module과 메인 프로젝트를 하나의 Xcode에서 작업 가능하다.</li>
<li>Sub Module의 소스 변경이 있어도 별도로 빌드할 필요가 없다(메인 프로젝트 빌드에 바로 반용된다).</li>
<li>Sub Module과 메인 프로젝트의 형상 관리는 각각 적용된다.</li>
</ul>
<p>이제부터 위 글에서 설명하는 내용을 보고 내가 적용한 방법을 설명하겠다.</p>
<h2>환경</h2>
<p>일단 내가 설명하기 위해 작업한 환경은 아래와 같다. 하지만 꼭 아래 환경이 맞춰져야하는 것은 아니다. Xcode의 기능을 직접적으로 사용한다기 보다 <a href="https://cocoapods.org/">CocoaPods</a>에 의해서 대부분 처리되기 때문이다.</p>
<ul>
<li>OSX 10.11</li>
<li>Xcode 7</li>
<li>CocoaPods 0.39.0</li>
<li>Swift</li>
<li>iOS 8 (Deploy Target)</li>
<li>Git</li>
</ul>
<h2>Sub Module</h2>
<p>이제부터 본격적으로 Sub Module을 만드는 과정을 살펴보자.</p>
<h3>CocoaPods / Git 설치</h3>
<p>당연히 이미 설치되어 있다면 다시 설치할 필요는 없다.</p>
<p>CocoaPods 설치는 <a href="https://blog.asamaru.net/2015/08/28/cocoapods-usage/">CocoaPods 사용법</a>에서 간단히 안내했던 내용이지만 아주 간단하다.</p>
<pre class="hljs bash">$ [sudo] gem install cocoapods
$ pod setup</pre>
<p>Git는 <a href="http://git-scm.com/download">Git Downloads</a>에서 자신의 환경에 맞는 설치 파일을 다운받아 간단히 설치 가능하다. 그리고 Git는 submodule을 사용해서 프로젝트와 Sub Module을 연결하고 함께 형상 관리를 하기 위한 것으로 SVN과 같은 다른 형상 관리 도구를 사용한다면 그것을 그대로 사용해도 된다. 다만 아래의 설명에서 Git 처리 부분을 해당 형상 관리 도구에 맞추어 적용하면 된다(형상 관리를 하지 않겠다면 하지 않아도 된다. 하지만 권장하지는 않는다).</p>
<h3>Xcode 프로젝트 만들기</h3>
<p>이 부분은 특별히 설정하지 않아도 될 듯하다. 자신의 필요에 맞는 프로젝트를 만들거나 기존의 프로젝트를 그대로 사용해도 무방하다.
다만 신규로 개설했다면 git repository에 등록하자. 앞서 설명과 마찬가지로 SVN이라면 SVN에 등록해도 된다.
나의 경우는 <a href="https://gitlab.com/">gitlab.com</a>을 사용중이라 여기에 맞춰 예를들면 아래와 같은 과정을 거친다.</p>
<ul>
<li>gitlab에서 신규 프로젝트 개설</li>
<li>생성한 프로젝트를 아래와 같이 git에 연결한다.</li>
</ul>
<pre class="hljs bash">$ <span class="hljs-built_in">cd</span> {프로젝트명}
$ git init
$ git remote add origin https://gitlab.com/{사용자}/{프로젝트명}.git
$ git add .
$ git commit
$ git push -u origin master</pre>
<h3>Sub Module Xcode 프로젝트 만들기</h3>
<p>Sub Module로 사용할 프로젝트를 하나 더 생성한다. 나의 경우는 Cocoa Touch Framework로 생성했다. Cocoa Touch Static Library 등의 다른 형식은 적용해보지 않아서 동일하게 적용이 되는지는 모르겠다. 특별한 이유가 없다면 Cocoa Touch Framework로 생성한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-21-xcode-create-sub-module-using-cocoapods-1.png" alt="" width="1072" height="734" /></p>
<p>이후 부터는 화면에서 안내하는대로 프로젝트를 개설하면 되므로 자세한 설명은 생략하겠다. 생성을 마쳤다면 이 프로젝트도 &quot;Xcode 프로젝트 만들기&quot; 부분에서 예를 들었던 내용처럼 git에 연결한다.</p>
<h4>podspec 생성</h4>
<p>Sub Module을 만들었다면 CocoaPods을 통해 연결할 수 있도록 podspec을 생성해야 한다.
Sub Module 프로젝트 폴더에 가서 {모듈명}.podspec 파일을 생성하고 아래와 같이 내용을 넣어준다. 이 부분도 상황에 따라 내용을 변경해도 상관없다.</p>
<pre class="hljs ruby">Pod::Spec.new <span class="hljs-keyword">do</span> <span class="hljs-params">|s|</span>
  s.name     = <span class="hljs-string">'{모듈명}'</span>
  s.version  = <span class="hljs-string">'1.0.0'</span>
  s.license = <span class="hljs-string">'MIT'</span>
  s.summary  = <span class="hljs-string">'{설명}'</span>
  s.homepage = <span class="hljs-string">'https://gitlab.com/subva/SUBiOSFramework'</span>
  s.author   = { <span class="hljs-string">'{작성자}'</span> =&gt; <span class="hljs-string">'{작성자}{도메인}'</span> }
  s.source   = { <span class="hljs-symbol">:git</span> =&gt; <span class="hljs-string">'{git repository}'</span>, <span class="hljs-symbol">:tag</span> =&gt; s.version }
  s.ios.deployment_target = <span class="hljs-string">'8.0'</span>
  s.source_files = <span class="hljs-string">'{모듈명}/*.swift'</span>
  s.requires_arc = <span class="hljs-literal">true</span>
<span class="hljs-keyword">end</span></pre>
<h3>Sub Module 연결</h3>
<p>위 과정을 문제없이 진행했다면 git에 연결된 두개의 프로젝트(메인 프로젝트, Sub Module 프로젝트)를 가지고 있을 것이다. 이제는 본격적으로 둘을 연결하는 과정이다.</p>
<h4>git submodule 추가</h4>
<p>메인 프로젝트 폴더로 이동하여 git submodule로 Sub Module을 clone한다.</p>
<pre class="hljs bash">$ <span class="hljs-built_in">cd</span> {프로젝트명}
$ git submodule add https://gitlab.com/{사용자}/{프로젝트명}.git {Sub Module명}
$ git submodule init
$ git submodule update</pre>
<h4>CocoaPods로 Sub Module 연결</h4>
<p>메인 프로젝트 폴더에 <code>Podfile</code>을 생성하고 아래와 같이 내용을 입력한다. Pods에 대한 설정 내용은 프로젝트에 따라 달라 질 수 있다. 중요한 부분은 <code>use_frameworks!</code>, <code>pod '{Sub Module명}', :path =&gt; './{Sub Module명}'</code> 이다. 그리고 platform의 '8.0' 부분도 빠지면 오류가 날 수 있는데 이 부분은 Sub Module의 deploy target에 맞춰져야 한다.</p>
<pre class="hljs ruby">source <span class="hljs-string">'https://github.com/CocoaPods/Specs.git'</span>
platform <span class="hljs-symbol">:ios</span>, <span class="hljs-string">'8.0'</span>
use_frameworks!

pod <span class="hljs-string">'{Sub Module명}'</span>, <span class="hljs-symbol">:path</span> =&gt; <span class="hljs-string">'./{Sub Module명}'</span></pre>
<p>파일을 생성했다면 아래의 명령을 실행해서 Pod를 실행한다.</p>
<pre class="hljs bash">$ pod install</pre>
<h3>설정 확인</h3>
<p>이제 정상적으로 연결되었는지 확인하면 된다. CocoaPods을 사용해 봤다면 알겠지만 CocoaPods을 사용 할 때는 xcodeproj가 아닌 xcworkspace로 프로젝트를 열어야 한다. 위 과정이 정상적이었다면 아래와 같이 Pods 영역에 &quot;Development Pods&quot;라는 것이 추가되어 있고 그 안애 추가한 Sub Module이 보일 것이다. 여기까지 확인되었다면 Sub Module 연결 과정은 모두 끝났다.</p>
<p>마지막으로 한가지만 더 이야기하겠다. 프로젝트를 열어서 해당 모듈을 사용하려면 당연히 소스에서 <code>import</code>를 해야하는데 처음엔 연결이 되지 않는 것처럼 보일 수 있다. 이 부분은 모듈이 아직 빌드가 되지 않아서 그런 것이니 빌드를 한번 해주고나면 정상적으로 사용이 가능할 것이다.</p>
<p>위에서 Git나 CocoaPods에 대한 설명을 하느라 조금 길어졌지만 이 두가지를 사용할 줄 알고 있다면 설정 과정은 생각보다 아주 간단하다. Android Studio와 비교하면 과정도 거의 유사하다는 것을 알 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/20/xcode-7-alcatraz-and-cocoapods-xcode-plugins/</id><title type="html">xcode 7 : Alcatraz 와 CocoaPods Xcode plugins</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/20/xcode-7-alcatraz-and-cocoapods-xcode-plugins/"/><published>2015-10-20T20:17:02+09:00</published><updated>2015-10-20T20:17:02+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[CocoaPods 사용법에서 CocoaPods를 설치하고 사용하는 법에 대해 간단하게 안내했었다. 오늘은 이 CocoaPods을 XCode에서 조금이나마 편하게 쓰기 위한 플러그인을 소개 하려고 한다. 덤으로 Alcatraz라고하는 Xcode용 패키지 메니저도 함께 소개한다. 우선 Alcatraz 부터 소개하려고 한다. CocoaPods Xcode plugins을 직접 설치하는 방법도 있으나 Alcatraz를 사용하면 더 쉽게 할 수 있기 때문이다. Alcatraz 공식 사이트에는 The package manager for Xcode 라고 소개하고 있다. 말그대로 Xcode를 위한 패키지 매니저로 여러가지 플러그인, Color 테마, 템플릿들을 바로 설치할 수 있도록 도와준다. 설치 공식 사이트에 안내되어 있는대로 아래의 명령을 실행하는 것으로 설치가 완료된다. $ curl -fsSL https://raw.githubusercontent.com/supermarin/Alcatraz/deploy/Scripts/install.sh | sh 설치후 Xcode는 재시작 해주면 아래와 같은 화면이 나온다. 설치한 플러그인을 load 할 것인지 물어본다. 당연히 "Load Bundle"을 해주면 이제부터 사용 가능하다. Xcode의 Window 메뉴에 보면 아래와 같이 "Package Manager"라는 메뉴가 추가되어 있다. CocoaPods Xcode plugins 설치 Alcatraz에서 바로 설치 가능한 CocoaPods 플러그인은 현재 2가지가 있는 것으로 보이는데 그 중 cocoapods-xcode-plugin를 먼저 설치해 보자. 사이트에 보면 설치 방법이 나와 있는데 당연히 Alcatraz를 통해 설치하는 것이 쉽다. "Window > Package Manager" 메뉴를 실행하면 아래와 같은 화면이 나온다. 여기서 cocoapods로 검색하면 두가지의 플러그인이 보인다. 이 중에서 위에 CocoaPods를 먼저 설치해 보자. 그냥 "INSTALL"이라고 되어 있는 버튼을 누르면 설치가 완료된다. 그리고 Xcode를 재시작하면 다시 아래와 같은 화면이 나온다. 당연히 "Load Bundle"을 선택한다. 이제는 플러그인이 설치가 완료되었기 때문에 "Product > CocoaPods" 메뉴를 볼 수 있다. 이 메뉴를 열어보면 아래와 같은 화면이 나온다. 여기서 유의할 점은 GEM_PATH를 자신의 환경에 맞게 바꿔야 한다는 점이다. 기본은 "/usr/bin"인 것 같은데 나의 경우는 "/usr/local/bin"에 있어서 지정을 했다. 경로를 모른다면 which pod라는 명령을 shell에서 실행해보면 확인 할 수 있다. 다음은 CocoaPodUI 플러그인이다. 설치 과정은 위의 플러그인 설치 과정과 동일하다. 그런데 문제는 현재 시점에서 확인해보니 정상적인 설치가 되지 않는다. Xcode 7과의 호환성 문제인지 플러그인은 정상 설치가 된 것으로 나오는데 설치 경로에 가보면 폴더가 비어 있다. 스샷만 보면 이 플러그인이 기능이 더 다양해 보이는데 사용을 해보지 못해 아쉽다. 하지만 cocoapods-xcode-plugin만 사용하더라도 기존 보다는 편하다(굳이 따로 shell을 열지 않아도 되니).]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2015/08/28/cocoapods-usage/">CocoaPods 사용법</a>에서 CocoaPods를 설치하고 사용하는 법에 대해 간단하게 안내했었다. 오늘은 이 CocoaPods을 XCode에서 조금이나마 편하게 쓰기 위한 플러그인을 소개 하려고 한다. 덤으로 <a href="http://alcatraz.io/">Alcatraz</a>라고하는 Xcode용 패키지 메니저도 함께 소개한다.</p>
<p>우선 <a href="http://alcatraz.io/">Alcatraz</a> 부터 소개하려고 한다. CocoaPods Xcode plugins을 직접 설치하는 방법도 있으나 Alcatraz를 사용하면 더 쉽게 할 수 있기 때문이다.</p>
<h2>Alcatraz</h2>
<p>공식 사이트에는 <strong>The package manager for Xcode</strong> 라고 소개하고 있다. 말그대로 Xcode를 위한 패키지 매니저로 여러가지 플러그인, Color 테마, 템플릿들을 바로 설치할 수 있도록 도와준다.</p>
<h3>설치</h3>
<p>공식 사이트에 안내되어 있는대로 아래의 명령을 실행하는 것으로 설치가 완료된다.</p>
<pre class="hljs bash">$ curl -fsSL https://raw.githubusercontent.com/supermarin/Alcatraz/deploy/Scripts/install.sh | sh</pre>
<p>설치후 Xcode는 재시작 해주면 아래와 같은 화면이 나온다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-20-xcode-7-alcatraz-and-cocoapods-xcode-plugins-1.png" alt="Alcatraz" width="532" height="299" /></p>
<p>설치한 플러그인을 load 할 것인지 물어본다. 당연히 &quot;Load Bundle&quot;을 해주면 이제부터 사용 가능하다. Xcode의 Window 메뉴에 보면 아래와 같이 &quot;Package Manager&quot;라는 메뉴가 추가되어 있다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-20-xcode-7-alcatraz-and-cocoapods-xcode-plugins-2.png" alt="Alcatraz" width="364" height="285" /></p>
<h2>CocoaPods Xcode plugins 설치</h2>
<p>Alcatraz에서 바로 설치 가능한 CocoaPods 플러그인은 현재 2가지가 있는 것으로 보이는데 그 중 <a href="https://github.com/kattrali/cocoapods-xcode-plugin">cocoapods-xcode-plugin</a>를 먼저 설치해 보자. 사이트에 보면 설치 방법이 나와 있는데 당연히 Alcatraz를 통해 설치하는 것이 쉽다.</p>
<p>&quot;Window &gt; Package Manager&quot; 메뉴를 실행하면 아래와 같은 화면이 나온다. 여기서 cocoapods로 검색하면 두가지의 플러그인이 보인다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-20-xcode-7-alcatraz-and-cocoapods-xcode-plugins-3.png" alt="Alcatraz" width="771" height="885" /></p>
<p>이 중에서 위에 CocoaPods를 먼저 설치해 보자. 그냥 &quot;INSTALL&quot;이라고 되어 있는 버튼을 누르면 설치가 완료된다. 그리고 Xcode를 재시작하면 다시 아래와 같은 화면이 나온다. 당연히 &quot;Load Bundle&quot;을 선택한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-20-xcode-7-alcatraz-and-cocoapods-xcode-plugins-4.png" alt="Alcatraz" width="532" height="299" /></p>
<p>이제는 플러그인이 설치가 완료되었기 때문에 &quot;Product &gt; CocoaPods&quot; 메뉴를 볼 수 있다. 이 메뉴를 열어보면 아래와 같은 화면이 나온다. 여기서 유의할 점은 GEM_PATH를 자신의 환경에 맞게 바꿔야 한다는 점이다. 기본은 &quot;/usr/bin&quot;인 것 같은데 나의 경우는 &quot;/usr/local/bin&quot;에 있어서 지정을 했다. 경로를 모른다면 <code>which pod</code>라는 명령을 shell에서 실행해보면 확인 할 수 있다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-20-xcode-7-alcatraz-and-cocoapods-xcode-plugins-5.png" alt="Alcatraz" width="286" height="229" /></p>
<p>다음은 <a href="https://github.com/Galeas/CocoaPodUI">CocoaPodUI</a> 플러그인이다. 설치 과정은 위의 플러그인 설치 과정과 동일하다. 그런데 문제는 현재 시점에서 확인해보니 정상적인 설치가 되지 않는다. Xcode 7과의 호환성 문제인지 플러그인은 정상 설치가 된 것으로 나오는데 설치 경로에 가보면 폴더가 비어 있다. 스샷만 보면 이 플러그인이 기능이 더 다양해 보이는데 사용을 해보지 못해 아쉽다.</p>
<p>하지만 <a href="https://github.com/kattrali/cocoapods-xcode-plugin">cocoapods-xcode-plugin</a>만 사용하더라도 기존 보다는 편하다(굳이 따로 shell을 열지 않아도 되니).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/20/google-play-services-out-of-date/</id><title type="html">Google play services out of date 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/20/google-play-services-out-of-date/"/><published>2015-10-20T13:56:30+09:00</published><updated>2015-10-20T13:56:30+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[오늘 앱 사용자에게서 오류 보고를 받았다. 기타 내용은 생략하고 App crash가 발생한 원인인 Google play services out of date이다. Google play services의 사용기간이 만료되었다는 오류인데 발생 원인은 Google play services 의 버전이 요구되는 버전과 맞지 않기 때문이다. 우선 해결 방법부터 보자. 나의 경우는 아래와 같은 함수를 만들어서 필요한 화면에서 호출하도록 했다. static public boolean checkGooglePlayService(Activity activity) { Integer resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(activity); if (resultCode == ConnectionResult.SUCCESS) { return true; } Dialog dialog = GooglePlayServicesUtil.getErrorDialog(resultCode, activity, 0); if (dialog != null) { dialog.show(); } return false; } GooglePlayServicesUtil를 사용해서 사용 가능 상태를 확인하고 대응하도록 하는 것이다. 결과적으로 Google play services가 설치되어 있지 않다거나 요구 버전보다 낮다거나해서 사용이 불가능하면 오류 Dialog를 띄워주게 된다. 관련된 내용은 구글플레이 서비스에 대한 유의점에 설명되어있다. 결론은 Google play services를 사용한다면 해당 서비스가 설치되지 않은 상황에 대한 대응을 해줘야 한다는 것이다. 매번 생각하는 것이지만 이런 부분들은 안드로이드에서 알아서 처리해주면 안되는걸까? 사실 조금 이해가 안된다. 개발자가 모두 알아서 하도록 한다는 것이. 물론 대응 방법이 상황에 따라 다를 수 있으니 일원화하는 것이 정답은 아닐 수 있다. 하지만 별다른 지정을 하지 않는다면 앱을 그냥 죽이는 것 보다는 기본적인 안내라도 보여주는 것이 낫지 않느냐는 말이다.]]></summary><content type="html"><![CDATA[<p>오늘 앱 사용자에게서 오류 보고를 받았다. 기타 내용은 생략하고 App crash가 발생한 원인인 <code>Google play services out of date</code>이다. <a href="https://developers.google.com/android/guides/overview">Google play services</a>의 사용기간이 만료되었다는 오류인데 발생 원인은 Google play services 의 버전이 요구되는 버전과 맞지 않기 때문이다.</p>
<p>우선 해결 방법부터 보자. 나의 경우는 아래와 같은 함수를 만들어서 필요한 화면에서 호출하도록 했다.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">checkGooglePlayService</span><span class="hljs-params">(Activity activity)</span> </span>{
    Integer resultCode = GooglePlayServicesUtil.isGooglePlayServicesAvailable(activity);
    <span class="hljs-keyword">if</span> (resultCode == ConnectionResult.SUCCESS) {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
    }
    Dialog dialog = GooglePlayServicesUtil.getErrorDialog(resultCode, activity, <span class="hljs-number">0</span>);
    <span class="hljs-keyword">if</span> (dialog != <span class="hljs-keyword">null</span>) {
        dialog.show();
    }
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
}</pre>
<p><a href="https://developers.google.com/android/reference/com/google/android/gms/common/GooglePlayServicesUtil">GooglePlayServicesUtil</a>를 사용해서 사용 가능 상태를 확인하고 대응하도록 하는 것이다. 결과적으로 Google play services가 설치되어 있지 않다거나 요구 버전보다 낮다거나해서 사용이 불가능하면 오류 Dialog를 띄워주게 된다.</p>
<p>관련된 내용은 <a href="http://www.androidpub.com/2508286">구글플레이 서비스에 대한 유의점</a>에 설명되어있다. <strong>결론은 <a href="https://developers.google.com/android/guides/overview">Google play services</a>를 사용한다면 해당 서비스가 설치되지 않은 상황에 대한 대응을 해줘야 한다는 것이다.</strong></p>
<p>매번 생각하는 것이지만 이런 부분들은 안드로이드에서 알아서 처리해주면 안되는걸까? 사실 조금 이해가 안된다. 개발자가 모두 알아서 하도록 한다는 것이. 물론 대응 방법이 상황에 따라 다를 수 있으니 일원화하는 것이 정답은 아닐 수 있다. 하지만 별다른 지정을 하지 않는다면 앱을 그냥 죽이는 것 보다는 기본적인 안내라도 보여주는 것이 낫지 않느냐는 말이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/20/mfmailcomposeviewcontroller-without-no-mail-accounts-messages/</id><title type="html">MFMailComposeViewController without 'No Mail Accounts' messages</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/20/mfmailcomposeviewcontroller-without-no-mail-accounts-messages/"/><published>2015-10-20T09:47:16+09:00</published><updated>2015-10-20T09:47:16+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[iOS 개발시 앱 내에서 메일 발송폼을 보여주고자 할 때 사용하게 되는 것이 MFMailComposeViewController 이다. 이 클래스를 swift에서 사용할 경우 대부분 아래와 같이 사용하게 된다. let mc = MFMailComposeViewController() mc.mailComposeDelegate = self mc.setToRecipients([to]) if (subject != nil) { mc.setSubject(subject!) } if (body != nil) { mc.setMessageBody(body!, isHTML: false) } if MFMailComposeViewController.canSendMail() { getRootViewController()?.presentViewController(mc, animated: true, completion: nil) } else { let alertView = UIAlertController(title: "안내", message: "현재 디바이스에서 이메일을 보낼수가 없습니다. 설정에서 이메일 관련 설정을 확인해주세요.", preferredStyle: .Alert) alertView.addAction(UIAlertAction(title: "Ok", style: .Default, handler: nil)) presentViewController(alertView, animated: true, completion: nil) } 그런데 위 코드처럼 사용하게 되면 설정된 메일 계정이 없어 메일 발송이 불가능할 경우 'No Mail Accounts' 메시지가 먼저 나오게 된다(쉽게 말해서 메시지가 두개가 뜬다). 그렇다면 'No Mail Accounts' 메시지는 나오지 않게 하고 내가 지정한 메시지가 나오게 하려면 어떻게 해야할까? if MFMailComposeViewController.canSendMail() { let mc = MFMailComposeViewController() mc.mailComposeDelegate = self mc.setToRecipients([to]) if (subject != nil) { mc.setSubject(subject!) } if (body != nil) { mc.setMessageBody(body!, isHTML: false) } getRootViewController()?.presentViewController(mc, animated: true, completion: nil) } else { let alertView = UIAlertController(title: "안내", message: "현재 디바이스에서 이메일을 보낼수가 없습니다. 설정에서 이메일 관련 설정을 확인해주세요.", preferredStyle: .Alert) alertView.addAction(UIAlertAction(title: "Ok", style: .Default, handler: nil)) presentViewController(alertView, animated: true, completion: nil) } 위 코드처럼 MFMailComposeViewController.canSendMail() 호출 이후에 MFMailComposeViewController()를 생성하면 'No Mail Accounts' 메시지는 나오지 않고 내가 지정한 메시지가 나타나게된다. 정확한 이유는 확인하지 못했지만 어쨌든 이렇게 하면 된다. 그리고 MFMailComposeViewController 이야기가 나온 김에 한가지 문제를 더 알아보자. MFMailComposeViewController를 사용해서 시뮬레이터에서 실행해보면 이상하게도 아래의 오류가 날 수 있다. viewServiceDidTerminateWithError: Error Domain=_UIViewServiceInterfaceErrorDomain Code=3 "(null)" UserInfo={Message=Service Connection Interrupted} 우선 I have REAL misunderstanding with MFMailComposeViewController in Swift (iOS8) in Simulator를 살펴보자. 이 문제에 대한 설명이 되어 있다. 여기서는 Obj-C로 설명되어 있긴하지만 swift로 내용을 변경하는 것은 어렵지 않을 것이다. 그런데 문제는 나의 이렇게 해도 해결이 되지 않는다는 것이다. 사실 위 글을 잘 읽어보면 MFMailComposeViewController을 재사용할 경우에 대한 문제로 시뮬레이터에서 발생하는 문제와는 상관이 없다. 그래서 여러곳을 찾아보니 시뮬레이터만 문제가되고 실 기기에서는 해당 오류가 나지 않는다는 이야기들이 있다. 그리고 iOS 8.3에서 해결되었다는 등의 이야기도 있다. 그런데 나는 iOS 9 기준으로 테스트를 해봤지만 해결되지 않았다. MailCompositionService quit unexpectedly를 보면 아직도 해결되지 않은 것으로 보인다. 하지만 기기에서만 문제되지 않는다면 나도 일단은 상관없다고 생각한다.]]></summary><content type="html"><![CDATA[<p>iOS 개발시 앱 내에서 메일 발송폼을 보여주고자 할 때 사용하게 되는 것이 <a href="https://developer.apple.com/library/prerelease/ios/documentation/MessageUI/Reference/MFMailComposeViewController_class/index.html">MFMailComposeViewController</a> 이다. 이 클래스를 swift에서 사용할 경우 대부분 아래와 같이 사용하게 된다.</p>
<pre class="hljs swift"><span class="hljs-keyword">let</span> mc = <span class="hljs-type">MFMailComposeViewController</span>()
mc.mailComposeDelegate = <span class="hljs-keyword">self</span>
mc.setToRecipients([to])
<span class="hljs-keyword">if</span> (subject != <span class="hljs-literal">nil</span>) {
    mc.setSubject(subject!)
}
<span class="hljs-keyword">if</span> (body != <span class="hljs-literal">nil</span>) {
    mc.setMessageBody(body!, isHTML: <span class="hljs-literal">false</span>)
}
<span class="hljs-keyword">if</span> <span class="hljs-type">MFMailComposeViewController</span>.canSendMail() {
    getRootViewController()?.presentViewController(mc, animated: <span class="hljs-literal">true</span>, completion: <span class="hljs-literal">nil</span>)
} <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">let</span> alertView = <span class="hljs-type">UIAlertController</span>(title: <span class="hljs-string">"안내"</span>, message: <span class="hljs-string">"현재 디바이스에서 이메일을 보낼수가 없습니다. 설정에서 이메일 관련 설정을 확인해주세요."</span>, preferredStyle: .<span class="hljs-type">Alert</span>)
    alertView.addAction(<span class="hljs-type">UIAlertAction</span>(title: <span class="hljs-string">"Ok"</span>, style: .<span class="hljs-type">Default</span>, handler: <span class="hljs-literal">nil</span>))
    presentViewController(alertView, animated: <span class="hljs-literal">true</span>, completion: <span class="hljs-literal">nil</span>)
}</pre>
<p>그런데 위 코드처럼 사용하게 되면 설정된 메일 계정이 없어 메일 발송이 불가능할 경우 'No Mail Accounts' 메시지가 먼저 나오게 된다(쉽게 말해서 메시지가 두개가 뜬다). 그렇다면 'No Mail Accounts' 메시지는 나오지 않게 하고 내가 지정한 메시지가 나오게 하려면 어떻게 해야할까?</p>
<pre class="hljs swift"><span class="hljs-keyword">if</span> <span class="hljs-type">MFMailComposeViewController</span>.canSendMail() {
    <span class="hljs-keyword">let</span> mc = <span class="hljs-type">MFMailComposeViewController</span>()
    mc.mailComposeDelegate = <span class="hljs-keyword">self</span>
    mc.setToRecipients([to])
    <span class="hljs-keyword">if</span> (subject != <span class="hljs-literal">nil</span>) {
        mc.setSubject(subject!)
    }
    <span class="hljs-keyword">if</span> (body != <span class="hljs-literal">nil</span>) {
        mc.setMessageBody(body!, isHTML: <span class="hljs-literal">false</span>)
    }
    getRootViewController()?.presentViewController(mc, animated: <span class="hljs-literal">true</span>, completion: <span class="hljs-literal">nil</span>)
} <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">let</span> alertView = <span class="hljs-type">UIAlertController</span>(title: <span class="hljs-string">"안내"</span>, message: <span class="hljs-string">"현재 디바이스에서 이메일을 보낼수가 없습니다. 설정에서 이메일 관련 설정을 확인해주세요."</span>, preferredStyle: .<span class="hljs-type">Alert</span>)
    alertView.addAction(<span class="hljs-type">UIAlertAction</span>(title: <span class="hljs-string">"Ok"</span>, style: .<span class="hljs-type">Default</span>, handler: <span class="hljs-literal">nil</span>))
    presentViewController(alertView, animated: <span class="hljs-literal">true</span>, completion: <span class="hljs-literal">nil</span>)
}</pre>
<p>위 코드처럼 <code>MFMailComposeViewController.canSendMail()</code> 호출 이후에 <code>MFMailComposeViewController()</code>를 생성하면 'No Mail Accounts' 메시지는 나오지 않고 내가 지정한 메시지가 나타나게된다. 정확한 이유는 확인하지 못했지만 어쨌든 이렇게 하면 된다.</p>
<hr />
<p>그리고 MFMailComposeViewController 이야기가 나온 김에 한가지 문제를 더 알아보자.</p>
<p>MFMailComposeViewController를 사용해서 시뮬레이터에서 실행해보면 이상하게도 아래의 오류가 날 수 있다.</p>
<pre><code>viewServiceDidTerminateWithError: Error Domain=_UIViewServiceInterfaceErrorDomain Code=3 "(null)" UserInfo={Message=Service Connection Interrupted}</code></pre>
<p>우선 <a href="http://stackoverflow.com/questions/25604552/i-have-real-misunderstanding-with-mfmailcomposeviewcontroller-in-swift-ios8-in/25864182#25864182">I have REAL misunderstanding with MFMailComposeViewController in Swift (iOS8) in Simulator</a>를 살펴보자. 이 문제에 대한 설명이 되어 있다.
여기서는 Obj-C로 설명되어 있긴하지만 swift로 내용을 변경하는 것은 어렵지 않을 것이다. 그런데 문제는 나의 이렇게 해도 해결이 되지 않는다는 것이다. 사실 위 글을 잘 읽어보면 MFMailComposeViewController을 재사용할 경우에 대한 문제로 시뮬레이터에서 발생하는 문제와는 상관이 없다. 그래서 여러곳을 찾아보니 시뮬레이터만 문제가되고 실 기기에서는 해당 오류가 나지 않는다는 이야기들이 있다. 그리고 iOS 8.3에서 해결되었다는 등의 이야기도 있다. 그런데 나는 iOS 9 기준으로 테스트를 해봤지만 해결되지 않았다. <a href="https://forums.developer.apple.com/thread/4415">MailCompositionService quit unexpectedly</a>를 보면 아직도 해결되지 않은 것으로 보인다. 하지만 기기에서만 문제되지 않는다면 나도 일단은 상관없다고 생각한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/20/ios-9-xcode-you-must-rebuild-it-with-bitcode-enabled/</id><title type="html">Xcode 7 - You must rebuild it with bitcode enabled 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/20/ios-9-xcode-you-must-rebuild-it-with-bitcode-enabled/"/><published>2015-10-20T09:08:30+09:00</published><updated>2015-10-20T09:08:30+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[Xcode 7에서 빌드시 아래와 같은 오류가 날 수 있다. ld: '/Volumes/Data/work/ios/bang9/Pods/GoogleMaps/Frameworks/GoogleMaps.framework/GoogleMaps(GMSCachedTile.o)' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture armv7 clang: error: linker command failed with exit code 1 (use -v to see invocation) 내용을 확인해 보니 Xcode 7부터는 Bitcode가 기본적으로 enabled 되어 있다는 것이다. iOS9 출시에 따른 개발자 대응 방안에 보면 Bitcode에 대해 설명되어 있다. iOS9 에서 LLVM Compiler에서 Bitcode를 생성을 지원한다. Bitcode를 사용하는 경우 AppStore에서 필요한 경우에 해당 코드를 사용하여 다시 최적화 된 바이너리를 생성하여 End user에게 전송해 주는 역할을 담당한다. Xcode에서 Bitcode를 포함한 iOS 앱을 AppStore로 전송하면, AppStore 내에서 사용자의 디바이스에 따라 최적화된 바이너리를 다시 빌드하는 과정을 거친다. 따라서, Bitcode가 적용된 앱을 앱스토어로 전송한 경우 개발자는 추후 새롭게 출시되는 디바이스의 특성에 따라 다시 빌드하는 수고를 덜어줄 것으로 예상된다. 결론은 가장 쉽게 해결하는 방법은 Bitcode를 Disabled로 변경하면된다. 프로젝트를 선택한 후 Build Settings 탭에서 bitcode로 검색하면 해당 항목을 찾을 수 있다. 여기서 값을 NO로 변경하면 된다. 찾기가 어렵다면 위 링크에 스샷으로 설명해주고 있으니 참고 바란다. 그리고 혹시 예전에 생성했던 프로젝트라면 해당 설정이 없을 수 있다. 그렇다면 iOS9 ENABLE_BITCODE 설정을 찾을 수 없을 때 강제 추가하기를 참고해서 강제로 추가하면 된다. 그런데 나의 경우는 GoogleMaps에서 문제가 발생한 경우다. 그래서 Bitcode를 Enabled 상태로 문제를 해결하는 방법을 찾고 싶었다. 그래서 조금 더 찾아보니 Google SDK to 1.10.2+ 이상을 사용하면 된다는 내용을 찾았다. 하지만 내가 사용하던 버전은 1.10.3이었다. 그래도 혹시나 싶어 cocoapod에서 업데이트 했더니 1.10.4로 업데이트가 되었다. 그래서 다시 빌드 시도. 그런데 결과는 역시나 동일한 오류가 난다. gmaps-api-issues - Bitcode Build에 보면 관련된 이슈가 진행중이다. 이 문제는 해당 라이브러리에서 지원해야만 해결할 수 있는 문제로 구글에서 패치가 될 때까지는 Bitcode를 Disabled 상태로 사용할 수 밖에 없다. 하지만 곧 해결될 것이라고 생각한다.]]></summary><content type="html"><![CDATA[<p>Xcode 7에서 빌드시 아래와 같은 오류가 날 수 있다.</p>
<pre><code>ld: '/Volumes/Data/work/ios/bang9/Pods/GoogleMaps/Frameworks/GoogleMaps.framework/GoogleMaps(GMSCachedTile.o)' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. for architecture armv7
clang: error: linker command failed with exit code 1 (use -v to see invocation)</code></pre>
<p>내용을 확인해 보니 Xcode 7부터는 <a href="https://developer.apple.com/library/prerelease/watchos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html#//apple_ref/doc/uid/TP40012582-CH35-SW2">Bitcode</a>가 기본적으로 enabled 되어 있다는 것이다.</p>
<p><a href="http://blog.kollus.com/?p=1252">iOS9 출시에 따른 개발자 대응 방안</a>에 보면 Bitcode에 대해 설명되어 있다.</p>
<blockquote>
<p>iOS9 에서 LLVM Compiler에서 Bitcode를 생성을 지원한다. Bitcode를 사용하는 경우 AppStore에서 필요한 경우에 해당 코드를 사용하여 다시 최적화 된 바이너리를 생성하여 End user에게 전송해 주는 역할을 담당한다.
Xcode에서 Bitcode를 포함한 iOS 앱을 AppStore로 전송하면, AppStore 내에서 사용자의 디바이스에 따라 최적화된 바이너리를 다시 빌드하는 과정을 거친다. 따라서, Bitcode가 적용된 앱을 앱스토어로 전송한 경우 개발자는 추후 새롭게 출시되는 디바이스의 특성에 따라 다시 빌드하는 수고를 덜어줄 것으로 예상된다.</p>
</blockquote>
<p>결론은 가장 쉽게 해결하는 방법은 Bitcode를 Disabled로 변경하면된다.</p>
<p>프로젝트를 선택한 후 Build Settings 탭에서 bitcode로 검색하면 해당 항목을 찾을 수 있다. 여기서 값을 NO로 변경하면 된다. 찾기가 어렵다면 위 링크에 스샷으로 설명해주고 있으니 참고 바란다. 그리고 혹시 예전에 생성했던 프로젝트라면 해당 설정이 없을 수 있다. 그렇다면 <a href="http://theeye.pe.kr/archives/2501">iOS9 ENABLE_BITCODE 설정을 찾을 수 없을 때 강제 추가하기</a>를 참고해서 강제로 추가하면 된다.</p>
<p>그런데 나의 경우는 GoogleMaps에서 문제가 발생한 경우다. 그래서 Bitcode를 Enabled 상태로 문제를 해결하는 방법을 찾고 싶었다. 그래서 조금 더 찾아보니 Google SDK to 1.10.2+ 이상을 사용하면 된다는 내용을 찾았다. 하지만 내가 사용하던 버전은 1.10.3이었다. 그래도 혹시나 싶어 cocoapod에서 업데이트 했더니 1.10.4로 업데이트가 되었다. 그래서 다시 빌드 시도. 그런데 결과는 역시나 동일한 오류가 난다.</p>
<p><a href="https://code.google.com/p/gmaps-api-issues/issues/detail?id=8219">gmaps-api-issues - Bitcode Build</a>에 보면 관련된 이슈가 진행중이다. 이 문제는 해당 라이브러리에서 지원해야만 해결할 수 있는 문제로 구글에서 패치가 될 때까지는 Bitcode를 Disabled 상태로 사용할 수 밖에 없다. 하지만 곧 해결될 것이라고 생각한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/19/vagrant-port-forwarding-on-mac/</id><title type="html">Vagrant Port Forwarding : Mac에서 1024 이하 포트 사용</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/19/vagrant-port-forwarding-on-mac/"/><published>2015-10-19T12:24:24+09:00</published><updated>2015-10-19T12:24:24+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[Vagrant는 포트 포워딩을 지원한다. VAGRANT DOCS의 FORWARDED PORTS 문서를 보면 설명되어 있다. 간단하게 살펴보자면 아래와 같이 설정할 수 있다. Vagrant.configure("2") do |config| config.vm.network "forwarded_port", guest: 80, host: 8080 end 위 설정의 의미는 host(PC)에 8080 포트로 접근하면 guest(VM)의 80 포트로 포워딩 한다는 뜻이다. 따라서 host에서 localhost:8080로 접속하면 guest의 웹 서버에 접근할 수 있다. 사용할 수 있는 옵션은 아래와 같이 설명되어 있다. guest (int) - The port on the guest that you want to be exposed on the host. This can be any port. guest_ip (string) - The guest IP to bind the forwarded port to. If this is not set, the port will go to the every interface. By default, this is empty. host (int) - The port on the host that you want to use to access the port on the guest. This must be greater than port 1024 unless Vagrant is running as root (which is not recommended). host_ip (string) - The IP on the host you want to bind the forwarded port to. If not specified, it will be bound to every IP. By default, this is empty. protocol (string) - Either "udp" or "tcp". This specifies the protocol that will be allowed through the forwarded port. By default this is "tcp". 크게 어려운 부분은 없기 때문에 더욱 자세한 설명은 필요없을 듯 하다. 그런데 여기서 한가지 상황을 생각해보자. localhost:8080로 접속하기는 싫고 localhost로 접속하고 싶다면 어떻게 해야 하나? 위의 설명대로라면 아래와 같이 설정하면 된다. Vagrant.configure("2") do |config| config.vm.network "forwarded_port", guest: 80, host: 80 end 그런데 위와 같이 설정하면 vagrant 실행시 오류를 만나게 된다. 이와 관련된 정보는 virtualbox 메뉴얼 6.3.3. NAT limitations에서 찾을 수 있다. Forwarding host ports < 1024 impossible: On Unix-based hosts (e.g. Linux, Solaris, Mac OS X) it is not possible to bind to ports below 1024 from applications that are not run by root. As a result, if you try to configure such a port forwarding, the VM will refuse to start. ipfw deprecated as of mavericks 간단히 말하자면 Unix 계열에서는 1024 이하 포트에 대한 포워딩을 하려면 root 권한이 있어야 한다는 것. 그렇다면 해결 방법은 나왔다. 간단하게 vagrant 자체를 root 권한으로 실행하면 된다. $ sudo vagrant up 그런데 이렇게하면 vagrant나 virtualbox가 별개로 실행된다(로그인된 계정이 아닌 root계정에서 실행하게 된다). 따라서 virtualbox를 실행해보아도 해당 VM을 볼 수 없을 것이다. 일단 어디에 있는지 보려면 아래의 명령으로 virtualbox를 실행해보자. $ sudo VirtualBox VirtualBox가 따로 실행되면서 추가된 VM도 볼 수 있다. 나는 다른 방법을 찾을 수 없어 얼마전까지 이렇게 사용해 왔다. 그런데 최근에 다시 vagrant를 설정할 일이 생겨 작업을 하면서 다시 찾아봤더니 그 사이에 해결 방법이 나와 있었다. 게다가 더욱 세련된(?) 방법으로. Vagrant Port Forwarding On Mac OSX Yosemite Port Forwarding for Vagrant Web Development on Port 80 and 443 in Vagrant 여러개의 글을 링크했지만 모두 비슷한 방법이다. 그러나 마지막 글의 경우는 확인이 필요하다. 마지막 글에서 사용하는 ipfw는 요세미티에서 deprecated 되었다는 이야기가 있다. 나머지 두개는 같은 방법인데 간단히 요약하자면 아래와 같다. 우선 vagrant-triggers 플러그인을 설치한다. $ vagrant plugin install vagrant-triggers Vagrantfile에 아래의 내용을 추가한다. 당연히 원하는 포트가 다르다면 조정해서 추가하면 된다. config.vm.network :forwarded_port, guest: 80, host: 8080 config.vm.network :forwarded_port, guest: 443, host: 8443 config.trigger.after [:provision, :up, :reload] do system('echo " rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 80 -> 127.0.0.1 port 8080 rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 443 -> 127.0.0.1 port 8443 " | sudo pfctl -f - > /dev/null 2>&1; echo "==> Fowarding Ports: 80 -> 8080, 443 -> 8443"') end config.trigger.after [:halt, :destroy] do system("sudo pfctl -f /etc/pf.conf > /dev/null 2>&1; echo '==> Removing Port Forwarding'") end 한가지 설명을 더 추가 해야할 것 같다. 위 명령은 pf가 enabled 되어 있을 경우만 제대로 동작한다. 하지만 대부분의 경우 pf가 disabled 되어 있을 것이다. pfctl -ef와 같이 e 옵션을 추가해 주면 pf를 강제로 켜서 실행해 준다. 하지만 이 방법은 vagrant가 halt된 후에도 pf가 enabled된 상태를 유지하므로 뭔가 꺼림직하다. 개선 방법은 halt시 d 옵션을 줘서 다시 pfctl을 disabled 상태로 변경하면 된다. 그런데 이렇게하면 반대로 enabled가 기본인 상태였다면 pf를 disabled 상태로 바꿔버리는 결과를 가져온다. 그래서 이 부분을 해결한 스크립트를 아래에 추가한다. 기존 pf의 상태와 무관하게 룰을 추가하고 사용이 끝나면 해당 룰만 제거하는 것이다. config.vm.network :forwarded_port, guest: 80, host: 8080 config.vm.network :forwarded_port, guest: 443, host: 8443 config.trigger.after [:provision, :up, :reload] do system('echo " rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 80 -> 127.0.0.1 port 8080 rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 443 -> 127.0.0.1 port 8443 " | sudo pfctl -Ef - > /dev/null 2> pfctl.token; echo "==> Fowarding Ports: 80 -> 8080, 443 -> 8443"') end config.trigger.after [:halt, :destroy] do system("PFCTL_TOKEN=\"$(cat pfctl.token |grep Token| awk '{ split($0,numbers,\":\"); print numbers[2]; }'| tr -d '[[:space:]]')\"; sudo pfctl -X $PFCTL_TOKEN -f /etc/pf.conf > /dev/null 2>&1; echo \"==> Removing Port Forwarding : $PFCTL_TOKEN\"") end 원리를 간단히 설명하겠다. 우선 pfctl에 있는 옵션 중 E 옵션을 추가했다. 소문자 e와는 다르다. -e : Enable the packet filter. -E : Enable the packet filter and increment the pf enable reference count. E를 사용하면 pf enable reference count를 증가시키고 token을 반환해 준다. 이 토큰을 pfctl.token에 저장해 놨다가 halt시 X 옵션을 통해서 pf에게 disabled 요청을 한다. 이제부터는 80포트와 443 포트가 guest로 포워딩 된다. 이젠 http://127.0.0.1로 접속할 수 있다. 나의 경우엔 DNS에 별도의 도메인을 127.0.0.1로 지정해서 사용중이다. 따라서 http://vagrant.mydomain.com으로 웹 화면을 확인할 수 있다.]]></summary><content type="html"><![CDATA[<p>Vagrant는 포트 포워딩을 지원한다. VAGRANT DOCS의 <a href="https://docs.vagrantup.com/v2/networking/forwarded_ports.html">FORWARDED PORTS</a> 문서를 보면 설명되어 있다.</p>
<p>간단하게 살펴보자면 아래와 같이 설정할 수 있다.</p>
<pre class="hljs ruby">Vagrant.configure(<span class="hljs-string">"2"</span>) <span class="hljs-keyword">do</span> <span class="hljs-params">|config|</span>
  config.vm.network <span class="hljs-string">"forwarded_port"</span>, <span class="hljs-symbol">guest:</span> <span class="hljs-number">80</span>, <span class="hljs-symbol">host:</span> <span class="hljs-number">8080</span>
<span class="hljs-keyword">end</span></pre>
<p>위 설정의 의미는 host(PC)에 8080 포트로 접근하면 guest(VM)의 80 포트로 포워딩 한다는 뜻이다. 따라서 host에서 <code>localhost:8080</code>로 접속하면 guest의 웹 서버에 접근할 수 있다.</p>
<p>사용할 수 있는 옵션은 아래와 같이 설명되어 있다.</p>
<ul>
<li>guest (int) - The port on the guest that you want to be exposed on the host. This can be any port.</li>
<li>guest_ip (string) - The guest IP to bind the forwarded port to. If this is not set, the port will go to the every interface. By default, this is empty.</li>
<li>host (int) - The port on the host that you want to use to access the port on the guest. This must be greater than port 1024 unless Vagrant is running as root (which is not recommended).</li>
<li>host_ip (string) - The IP on the host you want to bind the forwarded port to. If not specified, it will be bound to every IP. By default, this is empty.</li>
<li>protocol (string) - Either &quot;udp&quot; or &quot;tcp&quot;. This specifies the protocol that will be allowed through the forwarded port. By default this is &quot;tcp&quot;.</li>
</ul>
<p>크게 어려운 부분은 없기 때문에 더욱 자세한 설명은 필요없을 듯 하다.</p>
<p>그런데 여기서 한가지 상황을 생각해보자. <code>localhost:8080</code>로 접속하기는 싫고 <code>localhost</code>로 접속하고 싶다면 어떻게 해야 하나? 위의 설명대로라면 아래와 같이 설정하면 된다.</p>
<pre class="hljs ruby">Vagrant.configure(<span class="hljs-string">"2"</span>) <span class="hljs-keyword">do</span> <span class="hljs-params">|config|</span>
  config.vm.network <span class="hljs-string">"forwarded_port"</span>, <span class="hljs-symbol">guest:</span> <span class="hljs-number">80</span>, <span class="hljs-symbol">host:</span> <span class="hljs-number">80</span>
<span class="hljs-keyword">end</span></pre>
<p>그런데 위와 같이 설정하면 vagrant 실행시 오류를 만나게 된다. 이와 관련된 정보는 virtualbox 메뉴얼 <a href="https://www.virtualbox.org/manual/ch06.html#nat-limitations">6.3.3. NAT limitations</a>에서 찾을 수 있다.</p>
<blockquote>
<p>Forwarding host ports &lt; 1024 impossible:
On Unix-based hosts (e.g. Linux, Solaris, Mac OS X) it is not possible to bind to ports below 1024 from applications that are not run by root. As a result, if you try to configure such a port forwarding, the VM will refuse to start. ipfw deprecated as of mavericks</p>
</blockquote>
<p>간단히 말하자면 <strong>Unix 계열에서는 1024 이하 포트에 대한 포워딩을 하려면 root 권한이 있어야 한다는 것</strong>.
그렇다면 해결 방법은 나왔다. 간단하게 vagrant 자체를 root 권한으로 실행하면 된다.</p>
<pre class="hljs bash">$ sudo vagrant up</pre>
<p>그런데 이렇게하면 vagrant나 virtualbox가 별개로 실행된다(로그인된 계정이 아닌 root계정에서 실행하게 된다). 따라서 virtualbox를 실행해보아도 해당 VM을 볼 수 없을 것이다. 일단 어디에 있는지 보려면 아래의 명령으로 virtualbox를 실행해보자.</p>
<pre><code>$ sudo VirtualBox</code></pre>
<p>VirtualBox가 따로 실행되면서 추가된 VM도 볼 수 있다.</p>
<p>나는 다른 방법을 찾을 수 없어 얼마전까지 이렇게 사용해 왔다. 그런데 최근에 다시 vagrant를 설정할 일이 생겨 작업을 하면서 다시 찾아봤더니 그 사이에 해결 방법이 나와 있었다. 게다가 더욱 세련된(?) 방법으로.</p>
<ul>
<li><a href="http://salvatore.garbesi.com/vagrant-port-forwarding-on-mac/">Vagrant Port Forwarding On Mac</a></li>
<li><a href="https://www.danpurdy.co.uk/web-development/osx-yosemite-port-forwarding-for-vagrant/">OSX Yosemite Port Forwarding for Vagrant</a></li>
<li><a href="http://www.dmuth.org/node/1404/web-development-port-80-and-443-vagrant">Web Development on Port 80 and 443 in Vagrant</a></li>
</ul>
<p>여러개의 글을 링크했지만 모두 비슷한 방법이다. 그러나 마지막 글의 경우는 확인이 필요하다. 마지막 글에서 사용하는 ipfw는 요세미티에서 deprecated 되었다는 이야기가 있다. 나머지 두개는 같은 방법인데 간단히 요약하자면 아래와 같다.</p>
<p>우선 vagrant-triggers 플러그인을 설치한다.</p>
<pre class="hljs bash">$ vagrant plugin install vagrant-triggers</pre>
<p>Vagrantfile에 아래의 내용을 추가한다. 당연히 원하는 포트가 다르다면 조정해서 추가하면 된다.</p>
<pre class="hljs ruby">config.vm.network <span class="hljs-symbol">:forwarded_port</span>, <span class="hljs-symbol">guest:</span> <span class="hljs-number">80</span>, <span class="hljs-symbol">host:</span> <span class="hljs-number">8080</span>
config.vm.network <span class="hljs-symbol">:forwarded_port</span>, <span class="hljs-symbol">guest:</span> <span class="hljs-number">443</span>, <span class="hljs-symbol">host:</span> <span class="hljs-number">8443</span>

config.trigger.after [<span class="hljs-symbol">:provision</span>, <span class="hljs-symbol">:up</span>, <span class="hljs-symbol">:reload</span>] <span class="hljs-keyword">do</span>
      system(<span class="hljs-string">'echo "
        rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 80 -&gt; 127.0.0.1 port 8080
        rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 443 -&gt; 127.0.0.1 port 8443
        " | sudo pfctl -f - &gt; /dev/null 2&gt;&amp;1; echo "==&gt; Fowarding Ports: 80 -&gt; 8080, 443 -&gt; 8443"'</span>)
<span class="hljs-keyword">end</span>

config.trigger.after [<span class="hljs-symbol">:halt</span>, <span class="hljs-symbol">:destroy</span>] <span class="hljs-keyword">do</span>
    system(<span class="hljs-string">"sudo pfctl -f /etc/pf.conf &gt; /dev/null 2&gt;&amp;1; echo '==&gt; Removing Port Forwarding'"</span>)
<span class="hljs-keyword">end</span></pre>
<p>한가지 설명을 더 추가 해야할 것 같다. 위 명령은 pf가 enabled 되어 있을 경우만 제대로 동작한다. 하지만 대부분의 경우 pf가 disabled 되어 있을 것이다. <code>pfctl -ef</code>와 같이 <code>e</code> 옵션을 추가해 주면 pf를 강제로 켜서 실행해 준다. 하지만 이 방법은 vagrant가 <code>halt</code>된 후에도 pf가 enabled된 상태를 유지하므로 뭔가 꺼림직하다. 개선 방법은 <code>halt</code>시 <code>d</code> 옵션을 줘서 다시 pfctl을 disabled 상태로 변경하면 된다. 그런데 이렇게하면 반대로 enabled가 기본인 상태였다면 pf를 disabled 상태로 바꿔버리는 결과를 가져온다. 그래서 이 부분을 해결한 스크립트를 아래에 추가한다. 기존 pf의 상태와 무관하게 룰을 추가하고 사용이 끝나면 해당 룰만 제거하는 것이다.</p>
<pre class="hljs ruby">config.vm.network <span class="hljs-symbol">:forwarded_port</span>, <span class="hljs-symbol">guest:</span> <span class="hljs-number">80</span>, <span class="hljs-symbol">host:</span> <span class="hljs-number">8080</span>
config.vm.network <span class="hljs-symbol">:forwarded_port</span>, <span class="hljs-symbol">guest:</span> <span class="hljs-number">443</span>, <span class="hljs-symbol">host:</span> <span class="hljs-number">8443</span>

config.trigger.after [<span class="hljs-symbol">:provision</span>, <span class="hljs-symbol">:up</span>, <span class="hljs-symbol">:reload</span>] <span class="hljs-keyword">do</span>
      system(<span class="hljs-string">'echo "
        rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 80 -&gt; 127.0.0.1 port 8080
        rdr pass on lo0 inet proto tcp from any to 127.0.0.1 port 443 -&gt; 127.0.0.1 port 8443
        " | sudo pfctl -Ef - &gt; /dev/null 2&gt; pfctl.token; echo "==&gt; Fowarding Ports: 80 -&gt; 8080, 443 -&gt; 8443"'</span>)
<span class="hljs-keyword">end</span>

config.trigger.after [<span class="hljs-symbol">:halt</span>, <span class="hljs-symbol">:destroy</span>] <span class="hljs-keyword">do</span>
    system(<span class="hljs-string">"PFCTL_TOKEN=\"$(cat pfctl.token |grep Token| awk '{ split($0,numbers,\":\"); print numbers[2]; }'| tr -d '[[:space:]]')\"; sudo pfctl -X $PFCTL_TOKEN -f /etc/pf.conf &gt; /dev/null 2&gt;&amp;1; echo \"==&gt; Removing Port Forwarding : $PFCTL_TOKEN\""</span>)
<span class="hljs-keyword">end</span></pre>
<p>원리를 간단히 설명하겠다. 우선 pfctl에 있는 옵션 중 <code>E</code> 옵션을 추가했다. 소문자 <code>e</code>와는 다르다.</p>
<ul>
<li>-e : Enable the packet filter.</li>
<li>-E : Enable the packet filter and increment the pf enable reference count.</li>
</ul>
<p><code>E</code>를 사용하면 pf enable reference count를 증가시키고 token을 반환해 준다. 이 토큰을 <code>pfctl.token</code>에 저장해 놨다가 <code>halt</code>시 <code>X</code> 옵션을 통해서 pf에게 disabled 요청을 한다.</p>
<p>이제부터는 80포트와 443 포트가 guest로 포워딩 된다. 이젠 <code>http://127.0.0.1</code>로 접속할 수 있다. 나의 경우엔 DNS에 별도의 도메인을 127.0.0.1로 지정해서 사용중이다. 따라서 <code>http://vagrant.mydomain.com</code>으로 웹 화면을 확인할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/19/ios-9-the-resource-could-not-be-loaded-because-the-app-transport-security-policy-requires-the-use-of-a-secure-connection/</id><title type="html">iOS 9 : The resource could not be loaded because the App Transport Security policy requires the use of a secure connection 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/19/ios-9-the-resource-could-not-be-loaded-because-the-app-transport-security-policy-requires-the-use-of-a-secure-connection/"/><published>2015-10-19T09:24:41+09:00</published><updated>2015-10-19T09:24:41+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[iOS 9을 대상으로 개발시 아래와 같은 오류를 만날 수 있다. ERRO AppDelegate[application(_:didFinishLaunchingWithOptions:):32]: Optional(Error Domain=NSURLErrorDomain Code=-1022 "The resource could not be loaded because the App Transport Security policy requires the use of a secure connection." UserInfo={NSUnderlyingError=0x7fddb1cb34b0 {Error Domain=kCFErrorDomainCFNetwork Code=-1022 "(null)"}, NSErrorFailingURLStringKey=http://yourdomain.com/session/get, NSErrorFailingURLKey=http://yourdomain.com/session/get, NSLocalizedDescription=The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.}) iOS 9과 OS X 10.11 이후에 App Transport Security 정책이 추가되어 발생하는 오류로 관련된 정보는 App Transport Security Technote에서 자세히 볼 수 있다. 안내에 나와 있듯이 현재 개발중인 기능이라 추후 변경 가능성이 있다고 되어있다. App Transport Security is a feature that improves the security of connections between an app and web services. The feature consists of default connection requirements that conform to best practices for secure connections. Apps can override this default behavior and turn off transport security. Transport security is available in iOS 9.0 or later, and in OS X v10.11 and later. 해결방법은 아래와 같다. Info.plist 파일에 NSAppTransportSecurity 항목을 추가해서 필요한 설정을 해준다. NSAppTransportSecurity의 구조는 아래와 같다. Key Type NSAppTransportSecurity Dictionary NSAllowsArbitraryLoads Boolean NSExceptionDomains Dictionary <domain-name-for-exception-as-string> Dictionary NSExceptionMinimumTLSVersion String NSExceptionRequiresForwardSecrecy Boolean NSExceptionAllowsInsecureHTTPLoads Boolean NSIncludesSubdomains Boolean NSThirdPartyExceptionMinimumTLSVersion String NSThirdPartyExceptionRequiresForwardSecrecy Boolean NSThirdPartyExceptionAllowsInsecureHTTPLoads Boolean 정확하게 설명하자면 두가지 방법이 있다. NSAppTransportSecurity > NSAllowsArbitraryLoads를 추가해서 NSAllowsArbitraryLoads 값을 YES로 넣어준다. 앱 내의 모든 네트워크 통신에 대한 제한을 푼다. NSAppTransportSecurity > NSExceptionDomains를 추가하고 세부항목을 설정한다. 지정된 도메인의 네트워크 통신에 대한 제한을 푼다. NSExceptionMinimumTLSVersion: TLS 최소 버전을 문자열로 입력한다. 아래 값들 중 하나를 넣을 수 있거나 생략할 수 있다. TLSv1.0 TLSv1.1 TLSv1.2 (생략할 경우의 기본값) NSExceptionRequiresForwardSecrecy: forward secrecy 라는 비밀키 암호화 설정이다. 기본으 YES이며 NO를 선택시 사용할 수 있는 ciphers 목록은 아래와 같다. TLS_RSA_WITH_AES_256_GCM_SHA384 TLS_RSA_WITH_AES_128_GCM_SHA256 TLS_RSA_WITH_AES_256_CBC_SHA256 TLS_RSA_WITH_AES_256_CBC_SHA TLS_RSA_WITH_AES_128_CBC_SHA256 TLS_RSA_WITH_AES_128_CBC_SHA NSExceptionAllowsInsecureHTTPLoads: HTTPS(SSL) 연결이 아니더라도 통신을 허용 것인지에 대한 설정이다. 기본값은 NO이다. NSIncludesSubdomains: 이 사이트의 하부도메인들에도 이 설정을 적용할 것인지에 대한 설정이다. 기본값은 NO이다. NSThirdPartyExceptionMinimumTLSVersion: 써드파티 TLS 버전을 설정한다. NSThirdPartyExceptionRequiresForwardSecrecy: 써드파티 Forward Secrecy 설정이다. NSThirdPartyExceptionAllowsInsecureHTTPLoads: 써드파티 HTTPS 연결을 강제를 할 것이지에 대한 설정이다. 필요에 따라 방법을 선택하면 된다.]]></summary><content type="html"><![CDATA[<p>iOS 9을 대상으로 개발시 아래와 같은 오류를 만날 수 있다.</p>
<pre><code>ERRO AppDelegate[application(_:didFinishLaunchingWithOptions:):32]: Optional(Error Domain=NSURLErrorDomain Code=-1022 "The resource could not be loaded because the App Transport Security policy requires the use of a secure connection." UserInfo={NSUnderlyingError=0x7fddb1cb34b0 {Error Domain=kCFErrorDomainCFNetwork Code=-1022 "(null)"}, NSErrorFailingURLStringKey=http://yourdomain.com/session/get, NSErrorFailingURLKey=http://yourdomain.com/session/get, NSLocalizedDescription=The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.})</code></pre>
<p>iOS 9과 OS X 10.11 이후에 App Transport Security 정책이 추가되어 발생하는 오류로 관련된 정보는 <a href="https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/index.html">App Transport Security Technote</a>에서 자세히 볼 수 있다. 안내에 나와 있듯이 현재 개발중인 기능이라 추후 변경 가능성이 있다고 되어있다.</p>
<blockquote>
<p>App Transport Security is a feature that improves the security of connections between an app and web services. The feature consists of default connection requirements that conform to best practices for secure connections. Apps can override this default behavior and turn off transport security.</p>
<p>Transport security is available in iOS 9.0 or later, and in OS X v10.11 and later.</p>
</blockquote>
<p>해결방법은 아래와 같다.</p>
<p>Info.plist 파일에 NSAppTransportSecurity 항목을 추가해서 필요한 설정을 해준다. NSAppTransportSecurity의 구조는 아래와 같다.</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSAppTransportSecurity</td>
<td>Dictionary</td>
</tr>
<tr>
<td>&nbsp; NSAllowsArbitraryLoads</td>
<td>Boolean</td>
</tr>
<tr>
<td>&nbsp; NSExceptionDomains</td>
<td>Dictionary</td>
</tr>
<tr>
<td>&nbsp;&nbsp;&nbsp;&nbsp; &lt;domain-name-for-exception-as-string&gt;</td>
<td>Dictionary</td>
</tr>
<tr>
<td>&nbsp;&nbsp;&nbsp;&nbsp; NSExceptionMinimumTLSVersion</td>
<td>String</td>
</tr>
<tr>
<td>&nbsp;&nbsp;&nbsp;&nbsp; NSExceptionRequiresForwardSecrecy</td>
<td>Boolean</td>
</tr>
<tr>
<td>&nbsp;&nbsp;&nbsp;&nbsp; NSExceptionAllowsInsecureHTTPLoads</td>
<td>Boolean</td>
</tr>
<tr>
<td>&nbsp;&nbsp;&nbsp;&nbsp; NSIncludesSubdomains</td>
<td>Boolean</td>
</tr>
<tr>
<td>&nbsp;&nbsp;&nbsp;&nbsp; NSThirdPartyExceptionMinimumTLSVersion</td>
<td>String</td>
</tr>
<tr>
<td>&nbsp;&nbsp;&nbsp;&nbsp; NSThirdPartyExceptionRequiresForwardSecrecy</td>
<td>Boolean</td>
</tr>
<tr>
<td>&nbsp;&nbsp;&nbsp;&nbsp; NSThirdPartyExceptionAllowsInsecureHTTPLoads</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
<p>정확하게 설명하자면 두가지 방법이 있다.</p>
<ul>
<li>NSAppTransportSecurity &gt; NSAllowsArbitraryLoads를 추가해서 NSAllowsArbitraryLoads 값을 YES로 넣어준다.
<ul>
<li>앱 내의 모든 네트워크 통신에 대한 제한을 푼다.</li>
</ul></li>
<li>NSAppTransportSecurity &gt; NSExceptionDomains를 추가하고 세부항목을 설정한다.
<ul>
<li>지정된 도메인의 네트워크 통신에 대한 제한을 푼다.</li>
<li>NSExceptionMinimumTLSVersion: TLS 최소 버전을 문자열로 입력한다. 아래 값들 중 하나를 넣을 수 있거나 생략할 수 있다.</li>
<li>TLSv1.0</li>
<li>TLSv1.1</li>
<li>TLSv1.2 (생략할 경우의 기본값)</li>
<li>NSExceptionRequiresForwardSecrecy: forward secrecy 라는 비밀키 암호화 설정이다. 기본으 YES이며 NO를 선택시 사용할 수 있는 ciphers 목록은 아래와 같다.</li>
<li>TLS_RSA_WITH_AES_256_GCM_SHA384</li>
<li>TLS_RSA_WITH_AES_128_GCM_SHA256</li>
<li>TLS_RSA_WITH_AES_256_CBC_SHA256</li>
<li>TLS_RSA_WITH_AES_256_CBC_SHA</li>
<li>TLS_RSA_WITH_AES_128_CBC_SHA256</li>
<li>TLS_RSA_WITH_AES_128_CBC_SHA</li>
<li>NSExceptionAllowsInsecureHTTPLoads: HTTPS(SSL) 연결이 아니더라도 통신을 허용 것인지에 대한 설정이다. 기본값은 NO이다.</li>
<li>NSIncludesSubdomains: 이 사이트의 하부도메인들에도 이 설정을 적용할 것인지에 대한 설정이다. 기본값은 NO이다.</li>
<li>NSThirdPartyExceptionMinimumTLSVersion: 써드파티 TLS 버전을 설정한다.</li>
<li>NSThirdPartyExceptionRequiresForwardSecrecy: 써드파티 Forward Secrecy 설정이다.</li>
<li>NSThirdPartyExceptionAllowsInsecureHTTPLoads: 써드파티 HTTPS 연결을 강제를 할 것이지에 대한 설정이다.</li>
</ul></li>
</ul>
<p>필요에 따라 방법을 선택하면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/16/centos-7-firewalld/</id><title type="html">CentOS 7 firewalld vs iptables</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/16/centos-7-firewalld/"/><published>2015-10-16T14:33:14+09:00</published><updated>2015-10-16T14:33:14+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[CentOS 7부터 방화벽으로 iptables를 사용하지 않고 firewalld를 사용한다. /etc/sysconfig/iptables 파일도 존재하지 않는다. 따라서 firewall-cmd를 사용해서 방화벽을 설정해야 한다(x windows에서는 firewall-config를 사용한다고하나 콘솔만 사용해봐서 firewall-config는 어떻게 생겼는지 모르겠다). Redhat Products & Servies의 4.11. 보안 및 액세스 제어에 아래와 같이 설명되어 있다. 4.11.1. 새로운 방화벽 (firewalld) Red Hat Enterprise Linux 6에서 방화벽 기능은 iptables 유틸리티에 의해 제공되어 명령행이나 그래픽 설정 도구, system-config-firewall에서 설정되었습니다. Red Hat Enterprise Linux 7에서 방화벽 기능은 iptables에 의해 제공되지만 관리자는 동적 방화벽 데몬, firewalld, 설정 도구를 통해 iptables와 상호 작용합니다. 설정 도구에는 firewall-config, firewall-cmd, firewall-applet이 있으며 이는 Red Hat Enterprise Linux 7 기본값 설치에 포함되어 있지 않습니다. firewalld는 동적이기 때문에 언제든지 설정을 변경할 수 있고 바로 실행됩니다. 방화벽을 다시 로딩할 필요가 없으므로 기존 네트워크 연결에서 의도하지 않은 중단이 발생하지 않습니다. Red Hat Enterprise Linux 6와 7 간의 방화벽에서의 주요 차이점은 다음과 같습니다: 방화벽 설정에 대한 자세한 내용은 /etc/sysconfig/iptables에 저장되어 있지 않고 이 파일이 존재하지도 않습니다. 대신 설정 상세 정보는 /usr/lib/firewalld 및 /etc/firewalld 디렉토리에 있는 다양한 파일에 저장됩니다. Red Hat Enterprise Linux 6의 방화벽 시스템에서는 설정 변경 사항이 있을 때 마다 모든 규칙이 삭제되고 다시 적용되어 firewalld는 설정 차이만을 적용합니다. 그 결과 firewalld는 기존 연결을 중단하지 않고 런타임 동안 설정을 변경할 수 있습니다. 또한 firewalld concept and configuration에 보면 "firewalld의 필요성"에 대해 설명하고 있다(6 page). 편의를 위해 해당 부분만 아래에 안내한다. firewalld 의 필요성 기존 iptables의 한계 룰 변경시 서비스 중지 및 설정 변경 오픈스택이나 KVM과 같은 가상화 호스트에서는 네트워크 변 화가 수시로 발생되므로 필터링 정책에 변경이 필요 응용프로그램 자체에서 필터링 정책을 구성하는 경우 iptables 정책과 충돌되는 등의 문제 야기 firewalld가 필요한 이유? KVM , openstack 과 같은 가상화, 클라우드 환경하에서의 필 터링 정책 동적 추가 가능 DBUS API를 통한 정보 공유를 통해 정책 충돌 문제 해결 DBUS란? 어플리케이션간의 통신을 지원하는 인터페이스 마지막으로 Doly의 CentOS7 강좌30 12. 네트워크 보안설정 12.2 iptables 서비스 (1/3)에서는 아래와 같이 안내하고 있다. 12.2. iptables 서비스 firewalld는 분명 CentOS7의 아주 혁신적인 기능중의 하나이다. 하지만 필자는 본 서적을 집필하면서 인터페이스가 편리 하나 많은 부분에서 부족함을 느꼈다. 특히 소스IP를 명시하는 부분이 명확하지 않다. 방화벽의 기본은 출발지 IP, 프로토콜, 포트 도착지 IP, 프로토콜, 포트를 기본으로 방화벽 규칙을 만들어간다. 하지만, firewalld는 출발지 IP와 목적지 IP에 대한 정의가 명확하지 않다. 리눅스 스킬이 중급 이상이라면 이러한 이유로 firewalld 서비스를 제거하고 예전 iptables 서비스로 돌아가길 권장하고 싶다. 사실 "소스IP를 명시하는 부분이 명확하지 않다." 라는 부분은 글쓴이의 정확한 의도를 알 수 없어 단언하기는 힘들지만 틀린 부분이 있을 수 있다고 생각한다. firewalld를 사용하더라도 소스 IP를 지정할 수 없는 것은 아니다. firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" source address="1.2.3.4/32" port protocol="tcp" port="80" accept' 위 명령에서 보는 것과 같이 rich-rule를 사용해서 소스 IP를 지정할 수 있다. 그리고 지정된 내역을 보는 방법은 firewall-cmd을 사용하면 되지만 개인적으로는 cat /etc/firewalld/zones/public.xml를 사용해서 확인하는게 더 편한 것 같다. 사실은 아직 firewall-cmd를 능숙하게 사용하지를 못해서 어떻게하면 보기 쉽게 나오는지 잘 모르겠다(몇가지 명령을 시도해 봤는데 내용이 너무 많이 나온다.). 결론적으로 무조건 firewalld를 사용해야 하는 것은 아니다. firewalld를 중지시키고 iptables를 설치해서 기존처럼 관리하는 것도 가능하다. 아래의 명령을 실행하면 된다. $ systemctl stop firewalld $ systemctl mask firewalld $ yum install iptables-services $ systemctl enable iptables $ service iptables save firewalld를 사용할지 iptables를 사용할지는 자신의 선택이다. 현재 시점에서의 내 생각은 firewalld로 이전하는 것이다. 아직은 사용이 익숙치 않아 정확한 이전이 가능할지는 모르겠다. 이제부터 방법을 하나씩 찾아봐야 할 것이다. 하지만 Redhat에서 설명하는 것 처럼 결국은 iptables와 상호 작용하는 형태라고는 해도 접근 지점이 firewalld로 변경되었으며 앞으로도 그럴 것이기 때문이다. 주로 개발업무를 하다보니 서버를 전문적으로 운영했다고는 할 수 없으나 나름의 경험으로 볼 때 일시적인 대응은 결국 대세를 따르도록 변하게 된다.]]></summary><content type="html"><![CDATA[<p>CentOS 7부터 방화벽으로 iptables를 사용하지 않고 firewalld를 사용한다. <code>/etc/sysconfig/iptables</code> 파일도 존재하지 않는다. 따라서 <code>firewall-cmd</code>를 사용해서 방화벽을 설정해야 한다(x windows에서는 firewall-config를 사용한다고하나 콘솔만 사용해봐서 firewall-config는 어떻게 생겼는지 모르겠다).</p>
<p><a href="https://access.redhat.com/documentation/ko-KR/Red_Hat_Enterprise_Linux/7/html/Migration_Planning_Guide/ch04s11.html#idp7905344">Redhat Products &amp; Servies의 4.11. 보안 및 액세스 제어</a>에 아래와 같이 설명되어 있다.</p>
<blockquote>
<p><strong>4.11.1. 새로운 방화벽 (firewalld)</strong></p>
<p>Red Hat Enterprise Linux 6에서 방화벽 기능은 iptables 유틸리티에 의해 제공되어 명령행이나 그래픽 설정 도구, system-config-firewall에서 설정되었습니다. Red Hat Enterprise Linux 7에서 방화벽 기능은 iptables에 의해 제공되지만 관리자는 동적 방화벽 데몬, firewalld, 설정 도구를 통해 iptables와 상호 작용합니다. 설정 도구에는 firewall-config, firewall-cmd, firewall-applet이 있으며 이는 Red Hat Enterprise Linux 7 기본값 설치에 포함되어 있지 않습니다.</p>
<p>firewalld는 동적이기 때문에 언제든지 설정을 변경할 수 있고 바로 실행됩니다. 방화벽을 다시 로딩할 필요가 없으므로 기존 네트워크 연결에서 의도하지 않은 중단이 발생하지 않습니다.</p>
<p>Red Hat Enterprise Linux 6와 7 간의 방화벽에서의 주요 차이점은 다음과 같습니다:</p>
<ul>
<li>
<p>방화벽 설정에 대한 자세한 내용은 /etc/sysconfig/iptables에 저장되어 있지 않고 이 파일이 존재하지도 않습니다. 대신 설정 상세 정보는 /usr/lib/firewalld 및 /etc/firewalld 디렉토리에 있는 다양한 파일에 저장됩니다.</p>
</li>
<li>
<p>Red Hat Enterprise Linux 6의 방화벽 시스템에서는 설정 변경 사항이 있을 때 마다 모든 규칙이 삭제되고 다시 적용되어 firewalld는 설정 차이만을 적용합니다. 그 결과 firewalld는 기존 연결을 중단하지 않고 런타임 동안 설정을 변경할 수 있습니다.</p>
</li>
</ul>
</blockquote>
<p>또한 <a href="http://www.slideshare.net/sukkim737/oracle-enterprise-linux-new-featurefirewalld">firewalld concept and configuration</a>에 보면 &quot;firewalld의 필요성&quot;에 대해 설명하고 있다(6 page). 편의를 위해 해당 부분만 아래에 안내한다.</p>
<blockquote>
<p><strong>firewalld 의 필요성</strong></p>
<ul>
<li>
<p>기존 iptables의 한계</p>
<ul>
<li>룰 변경시 서비스 중지 및 설정 변경</li>
<li>오픈스택이나 KVM과 같은 가상화 호스트에서는 네트워크 변 화가 수시로 발생되므로 필터링 정책에 변경이 필요</li>
<li>응용프로그램 자체에서 필터링 정책을 구성하는 경우 iptables 정책과 충돌되는 등의 문제 야기</li>
</ul>
</li>
<li>
<p>firewalld가 필요한 이유?</p>
<ul>
<li>KVM , openstack 과 같은 가상화, 클라우드 환경하에서의 필 터링 정책 동적 추가 가능</li>
<li>DBUS API를 통한 정보 공유를 통해 정책 충돌 문제 해결</li>
</ul>
</li>
<li>
<p>DBUS란? 어플리케이션간의 통신을 지원하는 인터페이스</p>
</li>
</ul>
</blockquote>
<p>마지막으로 <a href="https://www.linux.co.kr/home2/board/subbs/board.php?bo_table=lecture&amp;wr_id=1860&amp;sca=&amp;page=0">Doly의 CentOS7 강좌30 12. 네트워크 보안설정 12.2 iptables 서비스 (1/3)</a>에서는 아래와 같이 안내하고 있다.</p>
<blockquote>
<p><strong>12.2. iptables 서비스</strong></p>
<p>firewalld는 분명 CentOS7의 아주 혁신적인 기능중의 하나이다. 하지만 필자는 본 서적을 집필하면서 인터페이스가 편리 하나 많은 부분에서 부족함을 느꼈다. 특히 소스IP를 명시하는 부분이 명확하지 않다. 방화벽의 기본은 출발지 IP, 프로토콜, 포트 도착지 IP, 프로토콜, 포트를 기본으로 방화벽 규칙을 만들어간다. 하지만, firewalld는 출발지 IP와 목적지 IP에 대한 정의가 명확하지 않다. 리눅스 스킬이 중급 이상이라면 이러한 이유로 firewalld 서비스를 제거하고 예전 iptables 서비스로 돌아가길 권장하고 싶다.</p>
</blockquote>
<p>사실 &quot;소스IP를 명시하는 부분이 명확하지 않다.&quot; 라는 부분은 글쓴이의 정확한 의도를 알 수 없어 단언하기는 힘들지만 틀린 부분이 있을 수 있다고 생각한다. firewalld를 사용하더라도 소스 IP를 지정할 수 없는 것은 아니다.</p>
<pre class="hljs bash">firewall-cmd --permanent --zone=public --add-rich-rule=<span class="hljs-string">'rule family="ipv4" source address="1.2.3.4/32" port protocol="tcp" port="80" accept'</span></pre>
<p>위 명령에서 보는 것과 같이 <code>rich-rule</code>를 사용해서 소스 IP를 지정할 수 있다. 그리고 지정된 내역을 보는 방법은 <code>firewall-cmd</code>을 사용하면 되지만 개인적으로는 <code>cat /etc/firewalld/zones/public.xml</code>를 사용해서 확인하는게 더 편한 것 같다. 사실은 아직 <code>firewall-cmd</code>를 능숙하게 사용하지를 못해서 어떻게하면 보기 쉽게 나오는지 잘 모르겠다(몇가지 명령을 시도해 봤는데 내용이 너무 많이 나온다.).</p>
<p>결론적으로 <strong>무조건 firewalld를 사용해야 하는 것은 아니다.</strong> firewalld를 중지시키고 iptables를 설치해서 기존처럼 관리하는 것도 가능하다. 아래의 명령을 실행하면 된다.</p>
<pre class="hljs bash">$ systemctl stop firewalld
$ systemctl mask firewalld

$ yum install iptables-services
$ systemctl <span class="hljs-built_in">enable</span> iptables

$ service iptables save</pre>
<p><strong>firewalld를 사용할지 iptables를 사용할지는 자신의 선택이다.</strong></p>
<p>현재 시점에서의 내 생각은 firewalld로 이전하는 것이다. 아직은 사용이 익숙치 않아 정확한 이전이 가능할지는 모르겠다. 이제부터 방법을 하나씩 찾아봐야 할 것이다. 하지만 Redhat에서 설명하는 것 처럼 결국은 iptables와 상호 작용하는 형태라고는 해도 접근 지점이 firewalld로 변경되었으며 앞으로도 그럴 것이기 때문이다. 주로 개발업무를 하다보니 서버를 전문적으로 운영했다고는 할 수 없으나 나름의 경험으로 볼 때 일시적인 대응은 결국 대세를 따르도록 변하게 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/16/android-verticalcenterspan/</id><title type="html">안드로이드 세로 중앙정렬 Span(VerticalCenterSpan)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/16/android-verticalcenterspan/"/><published>2015-10-16T13:37:07+09:00</published><updated>2015-10-16T13:37:07+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[SpannableString을 사용하던 중에 사이즈가 다른 두 단어를 세로로 중앙 정렬해야 할 일이 생겼다. 그런데 찾아보니 그런 Span은 없고 비슷한 기능이 있는 것들도 BASELINE 또는 BOTTOM으로만 정렬이 가능했다. 그래서 간단하게 Span 클래스를 하나 만들었다. 단, 주의할 것은 multi line은 지원하지 않는다는 것이다(내가 당장 필요하지 않아서 기능을 구현하지 않았다). VerticalCenterSpan.java import android.graphics.Canvas; import android.graphics.Paint; import android.text.style.ReplacementSpan; public class VerticalCenterSpan extends ReplacementSpan { public VerticalCenterSpan() { } @Override public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) { int yPos = (int) ((canvas.getHeight() / 2) - ((paint.descent() + paint.ascent()) / 2)); canvas.drawText(text, start, end, x, yPos, paint); } @Override public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) { return Math.round(paint.measureText(text, start, end)); } } 그런데 사용시에 유의할 점이 있다. 다른 Span과 함께 적용시에 일부는 적용되지 않을 수 있다는 것이다. 예를 들어 아래의 예를 보자(아래 소스는 이해를 위해 부분만 넣어둔 것이다). styledText.setSpan(new AbsoluteSizeSpan(12, true), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); styledText.setSpan(new ForegroundColorSpan(ContextCompat.getColor(this, R.color.newColor)), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); styledText.setSpan(new VerticalCenterSpan(), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); 위 소스는 글자 크기와 색상을 바꾼 후 세로 중앙정렬을 하기 위한 코드다. 그런데 실행해보면 색상이 적용되지 않는다. 이 것과 관련해서는 정확한 이유를 확인해보지는 못했지만 ForegroundColorSpan is not applied to ReplacementSpan를 보면 버그라고 추정하는 것 같다. 어쨌든 색상도 함께 바꾸어야 할 경우를 위해 조금 변경한 소스는 아래와 같다. ColorVerticalCenterSpan.java import android.graphics.Canvas; import android.graphics.Paint; import android.graphics.RectF; import android.text.style.ReplacementSpan; public class ColorVerticalCenterSpan extends ReplacementSpan { private int backgroundColor = 0; private int foregroundColor = 0; public ColorVerticalCenterSpan(int foregroundColor) { this.foregroundColor = foregroundColor; } public ColorVerticalCenterSpan(int foregroundColor, int backgroundColor) { this.backgroundColor = backgroundColor; this.foregroundColor = foregroundColor; } @Override public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) { // Background if (backgroundColor != 0) { paint.setColor(backgroundColor); canvas.drawRect(new RectF(x, top, x + paint.measureText(text, start, end), bottom), paint); } // Text if (foregroundColor != 0) { paint.setColor(foregroundColor); } int yPos = (int) ((canvas.getHeight() / 2) - ((paint.descent() + paint.ascent()) / 2)); canvas.drawText(text, start, end, x, yPos, paint); } @Override public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) { return Math.round(paint.measureText(text, start, end)); } } 이 코드를 이용해서 아래와 같이 사용하면 원하는 결과를 얻을 수 있다. styledText.setSpan(new AbsoluteSizeSpan(12, true), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); styledText.setSpan(new ColorVerticalCenterSpan(ContextCompat.getColor(this, R.color.newColor)), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); 아니면 위에 링크한 StackOverflow의 답변처럼 FontColorSpan 클래스를 추가해서 사용하는 방법도 가능하다. 예를들면 아래처럼. styledText.setSpan(new AbsoluteSizeSpan(12, true), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); styledText.setSpan(new FontColorSpan(ContextCompat.getColor(this, R.color.newColor)), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); styledText.setSpan(new VerticalCenterSpan(), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);]]></summary><content type="html"><![CDATA[<p>SpannableString을 사용하던 중에 사이즈가 다른 두 단어를 세로로 중앙 정렬해야 할 일이 생겼다. 그런데 찾아보니 그런 Span은 없고 비슷한 기능이 있는 것들도 BASELINE 또는 BOTTOM으로만 정렬이 가능했다. 그래서 간단하게 Span 클래스를 하나 만들었다. 단, 주의할 것은 multi line은 지원하지 않는다는 것이다(내가 당장 필요하지 않아서 기능을 구현하지 않았다).</p>
<p><strong>VerticalCenterSpan.java</strong></p>
<pre class="hljs java"><span class="hljs-keyword">import</span> android.graphics.Canvas;
<span class="hljs-keyword">import</span> android.graphics.Paint;
<span class="hljs-keyword">import</span> android.text.style.ReplacementSpan;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VerticalCenterSpan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ReplacementSpan</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">VerticalCenterSpan</span><span class="hljs-params">()</span> </span>{
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">(Canvas canvas, CharSequence text, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end, <span class="hljs-keyword">float</span> x, <span class="hljs-keyword">int</span> top, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> bottom, Paint paint)</span> </span>{
        <span class="hljs-keyword">int</span> yPos = (<span class="hljs-keyword">int</span>) ((canvas.getHeight() / <span class="hljs-number">2</span>) - ((paint.descent() + paint.ascent()) / <span class="hljs-number">2</span>));
        canvas.drawText(text, start, end, x, yPos, paint);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">(Paint paint, CharSequence text, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end, Paint.FontMetricsInt fm)</span> </span>{
        <span class="hljs-keyword">return</span> Math.round(paint.measureText(text, start, end));
    }
}
</pre>
<p>그런데 사용시에 유의할 점이 있다. 다른 Span과 함께 적용시에 일부는 적용되지 않을 수 있다는 것이다. 예를 들어 아래의 예를 보자(아래 소스는 이해를 위해 부분만 넣어둔 것이다).</p>
<pre class="hljs java">styledText.setSpan(<span class="hljs-keyword">new</span> AbsoluteSizeSpan(<span class="hljs-number">12</span>, <span class="hljs-keyword">true</span>), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
styledText.setSpan(<span class="hljs-keyword">new</span> ForegroundColorSpan(ContextCompat.getColor(<span class="hljs-keyword">this</span>, R.color.newColor)), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
styledText.setSpan(<span class="hljs-keyword">new</span> VerticalCenterSpan(), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</pre>
<p>위 소스는 글자 크기와 색상을 바꾼 후 세로 중앙정렬을 하기 위한 코드다. 그런데 실행해보면 색상이 적용되지 않는다. 이 것과 관련해서는 정확한 이유를 확인해보지는 못했지만 <a href="http://stackoverflow.com/a/28329166">ForegroundColorSpan is not applied to ReplacementSpan</a>를 보면 버그라고 추정하는 것 같다. 어쨌든 색상도 함께 바꾸어야 할 경우를 위해 조금 변경한 소스는 아래와 같다.</p>
<p><strong>ColorVerticalCenterSpan.java</strong></p>
<pre class="hljs java"><span class="hljs-keyword">import</span> android.graphics.Canvas;
<span class="hljs-keyword">import</span> android.graphics.Paint;
<span class="hljs-keyword">import</span> android.graphics.RectF;
<span class="hljs-keyword">import</span> android.text.style.ReplacementSpan;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ColorVerticalCenterSpan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ReplacementSpan</span> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> backgroundColor = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> foregroundColor = <span class="hljs-number">0</span>;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ColorVerticalCenterSpan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> foregroundColor)</span> </span>{
        <span class="hljs-keyword">this</span>.foregroundColor = foregroundColor;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ColorVerticalCenterSpan</span><span class="hljs-params">(<span class="hljs-keyword">int</span> foregroundColor, <span class="hljs-keyword">int</span> backgroundColor)</span> </span>{
        <span class="hljs-keyword">this</span>.backgroundColor = backgroundColor;
        <span class="hljs-keyword">this</span>.foregroundColor = foregroundColor;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">(Canvas canvas, CharSequence text, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end, <span class="hljs-keyword">float</span> x, <span class="hljs-keyword">int</span> top, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> bottom, Paint paint)</span> </span>{
        <span class="hljs-comment">// Background</span>
        <span class="hljs-keyword">if</span> (backgroundColor != <span class="hljs-number">0</span>) {
            paint.setColor(backgroundColor);
            canvas.drawRect(<span class="hljs-keyword">new</span> RectF(x, top, x + paint.measureText(text, start, end), bottom), paint);
        }

        <span class="hljs-comment">// Text</span>
        <span class="hljs-keyword">if</span> (foregroundColor != <span class="hljs-number">0</span>) {
            paint.setColor(foregroundColor);
        }
        <span class="hljs-keyword">int</span> yPos = (<span class="hljs-keyword">int</span>) ((canvas.getHeight() / <span class="hljs-number">2</span>) - ((paint.descent() + paint.ascent()) / <span class="hljs-number">2</span>));
        canvas.drawText(text, start, end, x, yPos, paint);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">(Paint paint, CharSequence text, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end, Paint.FontMetricsInt fm)</span> </span>{
        <span class="hljs-keyword">return</span> Math.round(paint.measureText(text, start, end));
    }
}</pre>
<p>이 코드를 이용해서 아래와 같이 사용하면 원하는 결과를 얻을 수 있다.</p>
<pre class="hljs java">styledText.setSpan(<span class="hljs-keyword">new</span> AbsoluteSizeSpan(<span class="hljs-number">12</span>, <span class="hljs-keyword">true</span>), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
styledText.setSpan(<span class="hljs-keyword">new</span> ColorVerticalCenterSpan(ContextCompat.getColor(<span class="hljs-keyword">this</span>, R.color.newColor)), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</pre>
<p>아니면 위에 링크한 StackOverflow의 답변처럼 FontColorSpan 클래스를 추가해서 사용하는 방법도 가능하다. 예를들면 아래처럼.</p>
<pre class="hljs java">styledText.setSpan(<span class="hljs-keyword">new</span> AbsoluteSizeSpan(<span class="hljs-number">12</span>, <span class="hljs-keyword">true</span>), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
styledText.setSpan(<span class="hljs-keyword">new</span> FontColorSpan(ContextCompat.getColor(<span class="hljs-keyword">this</span>, R.color.newColor)), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
styledText.setSpan(<span class="hljs-keyword">new</span> VerticalCenterSpan(), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/16/android-spannablestring-concat/</id><title type="html">안드로이드 SpannableString 합치기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/16/android-spannablestring-concat/"/><published>2015-10-16T13:16:51+09:00</published><updated>2015-10-16T13:16:51+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 TextView, EditText 등에서 문자를 출력할 때 스타일을 지정하기 위해서 SpannableString을 사용한다. 다른 방법으로는 Html.fromHtml을 사용하는 방법도 있으나 결국 내부에서는 SpannableString로 처리된다. 그런데 작업을 하다보면 각각의 SpannableString을 합쳐야할 때가 있다. 이런 경우에 사용할 수 있는 것이 TextUtils.concat 이다. 아래의 예시를 보자. SpannableString styledText1 = new SpannableString("Text String1"); styledText1.setSpan(new AbsoluteSizeSpan(12, true), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); SpannableString styledText2 = new SpannableString("Text String2"); styledText2.setSpan(new AbsoluteSizeSpan(20, true), 0, 4, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE); CharSequence concatString = TextUtils.concat(styledText1, " ", styledText2); 소스를 보면 알겠지만 주의할 점은 반환값이 CharSequence라는 것이다. 그리고 SpannableString을 이미 사용한다면 대부분 아는 내용일 수 있지만 처음 사용하는 사람이라면 SpannableString에서 가능한 것들이 무엇이 있는지 궁금할 수 있다(Class가 다양하다). 이 경우엔 Spans, a Powerful Concept.를 참고하면 도움이 될 것이다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 TextView, EditText 등에서 문자를 출력할 때 스타일을 지정하기 위해서 <a href="http://developer.android.com/intl/ko/reference/android/text/SpannableString.html">SpannableString</a>을 사용한다. 다른 방법으로는 <a href="http://developer.android.com/intl/ko/reference/android/text/Html.html#fromHtml%28java.lang.String%29">Html.fromHtml</a>을 사용하는 방법도 있으나 결국 내부에서는 SpannableString로 처리된다.</p>
<p>그런데 작업을 하다보면 각각의 SpannableString을 합쳐야할 때가 있다. 이런 경우에 사용할 수 있는 것이 <a href="http://developer.android.com/intl/ko/reference/android/text/TextUtils.html#concat%28java.lang.CharSequence...%29">TextUtils.concat</a> 이다. 아래의 예시를 보자.</p>
<pre class="hljs java">SpannableString styledText1 = <span class="hljs-keyword">new</span> SpannableString(<span class="hljs-string">"Text String1"</span>);
styledText1.setSpan(<span class="hljs-keyword">new</span> AbsoluteSizeSpan(<span class="hljs-number">12</span>, <span class="hljs-keyword">true</span>), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

SpannableString styledText2 = <span class="hljs-keyword">new</span> SpannableString(<span class="hljs-string">"Text String2"</span>);
styledText2.setSpan(<span class="hljs-keyword">new</span> AbsoluteSizeSpan(<span class="hljs-number">20</span>, <span class="hljs-keyword">true</span>), <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);

CharSequence concatString = TextUtils.concat(styledText1, <span class="hljs-string">" "</span>, styledText2);</pre>
<p>소스를 보면 알겠지만 주의할 점은 반환값이 <a href="http://developer.android.com/intl/ko/reference/java/lang/CharSequence.html">CharSequence</a>라는 것이다.</p>
<p>그리고 SpannableString을 이미 사용한다면 대부분 아는 내용일 수 있지만 처음 사용하는 사람이라면 SpannableString에서 가능한 것들이 무엇이 있는지 궁금할 수 있다(Class가 다양하다). 이 경우엔 <a href="http://flavienlaurent.com/blog/2014/01/31/spans/">Spans, a Powerful Concept.</a>를 참고하면 도움이 될 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/14/creating-a-vagrant-base-box/</id><title type="html">Vagrant BASE Box 만들기(CentOS 7)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/14/creating-a-vagrant-base-box/"/><published>2015-10-14T12:50:15+09:00</published><updated>2015-10-14T12:50:15+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[Vagrant에는 Discover Vagrant Boxes 페이지를 제공하는데 여기에는 여러가지 Box가 이미 만들어져 있어 그중 하나를 선택해서 사용할 수 있다. 하지만 여기서 원하는 Box를 찾을 수 없거나 특별히 직접 만들어야 할 경우가 있다. 이 글은 이런 경우에 직접 Box를 만드는 방법에 대해 설명한다. 단, 아래는 OSX에서 작업하는 것을 기준으로 설명한다. Vagrant 설치 INSTALLING VAGRANT의 안내에 따라 DOWNLOAD VAGRANT에 가면 OS별로 Vagrant 설치 파일을 다운 받을 수 있다. 설치는 다운 받아서 설치하면 되므로 굳이 설명할 것이 없다. 그리고 필요한 것이 VirtualBox인데 이것 또한 그냥 다운 받아 실행하면 설치가 완료되므로 간단하다. Base Box 만들기 VirtualBox 가상 머신 생성 Box를 만드려면 VirtualBox 가상 머신이 필요하다. 우선 VirtualBox를 실행해서 "새로 만들기"를 선택하면 아래의 화면이 나타난다. 적절한 이름과 종류를 선택하고 계속을 선택한다. 여기서는 CentOS 7을 설치하는 것을 기준으로 설명한다. 그 다음엔 사용할 메모리 크기를 설정하는 화면이 나오는데 필요에 맞게 설정한다. 나는 1GB를 할당했다. 그 다음엔 가상 하드 드라이브를 설정하는 화면이다. 특별한 경우가 아니라면 "지금 가상 하드 드라이브 만들기"를 선택하면 된다. 디스크 파일 형식의 경우는 기본으로 선택된 VDI를 선택한다. 하드 드라이브의 크기는 특별한 이유가 없다면 동적 할당을 선택하면 된다. 파일 위치 및 크기는 용도에 맞게 설정하면 된다. 여기까지 설정하고 나면 가상 머신이 하나 만들어 진다. 만들어진 가상 머신을 선택하고 설정을 선택하면 아래의 화면이 나온다. 여기서는 필요한 설정을 해주면 되는데 나의 경우엔 플로피디스크, USB, Audio를 사용하지 않도록 하고 네트워크는 "NAT"를 선택했다. "브릿지 어뎁터"를 사용하면 내 컴퓨터의 IP를 함께 사용하지 않고 새로운 IP를 설정할 수 있는데 특수한 경우가 아니라면 일단 NAT를 사용하도록 설정한다. 그리고 NAT를 사용하게되면 가상의 사설 IP가 할당되므로 나중에 SSH 접속을하기 위해서는 포트 포워딩 설정이 필요하다. 아래의 이미지를 참고해서 2222포트를 22포트로 포워딩 되도록 설정한다. 사용할 OS 설치 이제는 설치할 OS를 지정해 줘야 한다. 설정 화면에서 저장소를 선택하면 컨트롤러 IDE에 CD 드라이브가 보일 것이다. 나는 CentOS 7을 설치할 것이므로 해당 ISO 파일을 다운 받아서 선택해 줬다. 이제 설정을 완료하고 서버를 시작하면 설정 해준 ISO(CD)가 로딩되면서 OS 설치가 시작될 것이다. 내가 설치한 CentOS 7의 설치 과정은 CentOS 7 minimal 설치를 참고하면 된다. OS에 대한 기본 설치를 마쳤다면 VirtualBox에서 해당 가상 머신을 켠 상태에서 메뉴의 "Devices > Insert Guest Additions CD Image..."를 선택한다. 그 다음엔 콘솔에서 아래의 명령을 수행해서 게스트 확장을 설치한다. 그리고 설치가 정상적으로 완료되었다면 재시작 한다(굳이 할 필요는 없지만 kernel과 관련된 변경이 있는 것으로 보여 재시작 해 줬다). $ su $ mount -r /dev/cdrom /media/ $ ll /media/ $ yum install -y bzip2 kernel-devel make gcc perl $ /media/VBoxLinuxAdditions.run --nox11 $ yum clean all $ usermod -u 471 vboxadd $ groupmod -g 471 vboxsf #lsmod | grep vboxsf $ export MAKE='/usr/bin/gmake -i' $ /etc/init.d/vboxadd setup $ unset MAKE $ reboot 간혹 VBoxLinuxAdditions.run을 실행하는 과정에 kernel-devel이 없다는 오류가 날 수 있다. 이 경우엔 오류 메시지에 kernel-devel의 특정 버전을 yum으로 설치하라는 내용이 포함되어 있다. 이 명령을 따라 kernel-devel을 설치하고 VBoxLinuxAdditions.run를 다시 실행하면 오류없이 설치가 된다. Vagrant 관련 설정 우선 vagrant 계정을 추가한다. $ /usr/sbin/groupadd -g 470 vagrant $ /usr/sbin/useradd -g vagrant -u 470 vagrant $ passwd vagrant # vagrant 를 암호로 입력 $ chown vagrant.vagrant /home/vagrant/ vagrant 계정에서 root 명량을 수행할 수 있도록 sudo에 추가해 준다. $ visudo # 아래 내용 추가 Defaults env_keep += "SSH_AUTH_SOCK" %vagrant ALL=(ALL) NOPASSWD: ALL Defaults:vagrant !requiretty sudo에 정상적으로 추가되었는지를 확인하기 위해 아래의 명령을 수행해 본다. $ su vagrant $ cd $ sudo ls -al vagrant의 ssh key를 추가해 준다. 위의 확인 코드를 수행했다면 /home/vagrant에 위치하고 있을 것이다. 아니라면 해당 폴더로 이동한다. $ mkdir .ssh $ curl -k https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub > .ssh/authorized_keys $ chmod 0700 .ssh $ chmod 0600 .ssh/authorized_keys # .ssh/authorized_keys 내용 확인 $ cat .ssh/authorized_keys 여기서 주의할 것이 있다. authorized_keys 파일이 빈 파일로 저장되는 경우가 있다. 정확한 원인은 확인하지 못했지만 이번에 작업하다보니 이런 경우가 생겼다. 현재로써는 curl의 문제로 보이지만 확실하진 않다. 이 경우엔 일단 파일을 받아야 하니 아래와 같이 wget을 사용해서 받자. $ sudo yum install wget -y $ mkdir .ssh $ wget --no-check-certificate https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub -O .ssh/authorized_keys $ chmod 0700 .ssh $ chmod 0600 .ssh/authorized_keys # .ssh/authorized_keys 내용 확인 $ cat .ssh/authorized_keys 이제는 ssh 설정을 조정한다. $ sudo vi /etc/ssh/sshd_config # 아래의 내용을 확인해서 맞춰준다. Port 22 PubkeyAuthentication yes AuthorizedKeysFile .ssh/authorized_keys 디스크를 정리해서 용량을 줄인다. 디스크 용량이 부족하다는 오류가 나올 수 있는데 무시하면 된다. 디스크가 가득 찰때까지 내용을 채우기 때문이라고 한다.(http://stackoverflow.com/a/24956805) 이렇게 하면 가상이미지를 Box로 변환시 용량을 줄일 수 있다고 한다. sudo dd if=/dev/zero of=/EMPTY bs=1M sudo rm -f /EMPTY 이제 기본 설정을 마쳤으므로 서버를 종료한다. $ sudo halt Box 만들기 이제 마지막 단계다. OSX의 shell에서 아래 명령을 입력하면 설치된 VirtualBox 목록이 출력된다. 여기서 생성했던 가상 머신의 이름을 확인한다. VBoxManage list vms 이제 박스를 만든다. "vagrant-centos7-x86_64"는 위에서 확인한 VirtualBox 이름을 넣으면 되고 "centos7-x86_64.box"는 생성할 박스의 이름을 넣으면 된다. vagrant package --output centos7-x86_64.box --base vagrant-centos7-x86_64 혹시 퍼미션 오류가 난다면 아래처럼 sudo를 사용하면 된다. 사실 일반적인 경우라면 당연히 퍼미션 오류가 나지 않는다. 그런데 나의 경우엔 1024 이하의 포트를 포트 포워딩하기 위해 vagrant와 VirtualBox를 root 권한에서 사용하고 있다(OSX에서는 1024 포트를 포트 포워딩하기 위해서는 root 권한이 필요하다). 이런 경우라면 vagrant 명령에서 권한 오류가 날 수 있다. sudo vagrant package --output centos7-x86_64.box --base vagrant-centos7-x86_64 Vagrantfile 만들기 아래의 명령을 실행하면 Vagrantfile가 만들어 진다. 아래는 두가지 방법을 설명하고 있다. 첫 번째는 local에 box을 추가해서 init하는 것이고 두 번째는 현재 폴더의 box 파일을 사용해서 init하는 것이다. 어떤 방법을 써도 Vagrantfile는 만들어지니 편한 방법을 사용하면 된다. 어짜피 vagrant up 실행시 박스는 만들어진다. 보통 "~/.vagrant.d/boxes"에 Box 파일이 추가된다. $ vagrant box add centos7 centos7-x86_64.box $ vagrant init centos7 또는 $ vagrant init centos7-x86_64.box # or $ vagrant init 여기서 만들어진 파일은 가장 기본 설정만 되어 있으므로 자신에게 맞는 설정을 해주어야 한다. 이 부분은 또 내용이 길기 때문에 다음에 포스팅 하도록 하겠다. 실행해보기 $ vagrant up 앞선 과정에서 문제가 없었다면 정상적으로 vagrant가 실행된다. 당연히 최소 실행시에는 box를 다운받는 과정이 있어 실행이 좀 오래 걸린다. 아래의 명령으로 접속이 된다면 일단 성공이다. $ vagrant ssh 박스의 종료. $ vagrant halt 추가된 box를 제거하려면 아래를 참고하자. $ vagrant destroy $ vagrant box list $ vagrant box remove centos7-x86_64.box destroy는 VirtualBox에서 가상 머신을 제거한다. 하지만 추가된 box는 제거되지 않는다. 따라서 box list를 이용해서 box명을 확인해서 box remove를 해주어야 box까지 제거된다. 여기서 제거란 설치된 파일의 제거를 뜻하므로 만들어둔 box파일과 Vagrantfile 파일은 그대로 유지된다.]]></summary><content type="html"><![CDATA[<p>Vagrant에는 <a href="https://atlas.hashicorp.com/boxes/search">Discover Vagrant Boxes</a> 페이지를 제공하는데 여기에는 여러가지 Box가 이미 만들어져 있어 그중 하나를 선택해서 사용할 수 있다. 하지만 여기서 원하는 Box를 찾을 수 없거나 특별히 직접 만들어야 할 경우가 있다. 이 글은 이런 경우에 직접 Box를 만드는 방법에 대해 설명한다. 단, 아래는 OSX에서 작업하는 것을 기준으로 설명한다.</p>
<h2>Vagrant 설치</h2>
<p><a href="http://docs.vagrantup.com/v2/installation/index.html">INSTALLING VAGRANT</a>의 안내에 따라 <a href="http://www.vagrantup.com/downloads">DOWNLOAD VAGRANT</a>에 가면 OS별로 Vagrant 설치 파일을 다운 받을 수 있다. 설치는 다운 받아서 설치하면 되므로 굳이 설명할 것이 없다.</p>
<p>그리고 필요한 것이 <a href="https://www.virtualbox.org/">VirtualBox</a>인데 이것 또한 그냥 다운 받아 실행하면 설치가 완료되므로 간단하다.</p>
<h2>Base Box 만들기</h2>
<h3>VirtualBox 가상 머신 생성</h3>
<p>Box를 만드려면 VirtualBox 가상 머신이 필요하다. 우선 VirtualBox를 실행해서 &quot;새로 만들기&quot;를 선택하면 아래의 화면이 나타난다. 적절한 이름과 종류를 선택하고 계속을 선택한다. 여기서는 CentOS 7을 설치하는 것을 기준으로 설명한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-creating-a-vagrant-base-box-1.png" alt="creating-a-vagrant-base-box-1" width="882" height="750" /></p>
<p>그 다음엔 사용할 메모리 크기를 설정하는 화면이 나오는데 필요에 맞게 설정한다. 나는 1GB를 할당했다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-creating-a-vagrant-base-box-2.png" alt="creating-a-vagrant-base-box-2" width="882" height="750" /></p>
<p>그 다음엔 가상 하드 드라이브를 설정하는 화면이다. 특별한 경우가 아니라면 &quot;지금 가상 하드 드라이브 만들기&quot;를 선택하면 된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-creating-a-vagrant-base-box-3.png" alt="creating-a-vagrant-base-box-3" width="882" height="750" /></p>
<p>디스크 파일 형식의 경우는 기본으로 선택된 VDI를 선택한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-creating-a-vagrant-base-box-4.png" alt="creating-a-vagrant-base-box-4" width="882" height="750" /></p>
<p>하드 드라이브의 크기는 특별한 이유가 없다면 동적 할당을 선택하면 된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-creating-a-vagrant-base-box-5.png" alt="creating-a-vagrant-base-box-5" width="882" height="750" /></p>
<p>파일 위치 및 크기는 용도에 맞게 설정하면 된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-creating-a-vagrant-base-box-6.png" alt="creating-a-vagrant-base-box-6" width="882" height="750" /></p>
<p>여기까지 설정하고 나면 가상 머신이 하나 만들어 진다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-creating-a-vagrant-base-box-7.png" alt="creating-a-vagrant-base-box-7" width="854" height="722" /></p>
<p>만들어진 가상 머신을 선택하고 설정을 선택하면 아래의 화면이 나온다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-creating-a-vagrant-base-box-8.png" alt="creating-a-vagrant-base-box-8" width="854" height="722" /></p>
<p>여기서는 필요한 설정을 해주면 되는데 나의 경우엔 플로피디스크, USB, Audio를 사용하지 않도록 하고 네트워크는 &quot;NAT&quot;를 선택했다. &quot;브릿지 어뎁터&quot;를 사용하면 내 컴퓨터의 IP를 함께 사용하지 않고 새로운 IP를 설정할 수 있는데 특수한 경우가 아니라면 일단 NAT를 사용하도록 설정한다. 그리고 NAT를 사용하게되면 가상의 사설 IP가 할당되므로 나중에 SSH 접속을하기 위해서는 포트 포워딩 설정이 필요하다. 아래의 이미지를 참고해서 2222포트를 22포트로 포워딩 되도록 설정한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-creating-a-vagrant-base-box-9.png" alt="creating-a-vagrant-base-box-9" width="854" height="722" /></p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-creating-a-vagrant-base-box-10.png" alt="creating-a-vagrant-base-box-10" width="854" height="722" /></p>
<h3>사용할 OS 설치</h3>
<p>이제는 설치할 OS를 지정해 줘야 한다. 설정 화면에서 저장소를 선택하면 컨트롤러 IDE에 CD 드라이브가 보일 것이다. 나는 CentOS 7을 설치할 것이므로 해당 ISO 파일을 다운 받아서 선택해 줬다.</p>
<p>이제 설정을 완료하고 서버를 시작하면 설정 해준 ISO(CD)가 로딩되면서 OS 설치가 시작될 것이다. 내가 설치한 CentOS 7의 설치 과정은 <a href="https://blog.asamaru.net/2015/10/14/centos-7-minimal-install/">CentOS 7 minimal 설치</a>를 참고하면 된다.</p>
<p>OS에 대한 기본 설치를 마쳤다면 VirtualBox에서 해당 가상 머신을 켠 상태에서 메뉴의 &quot;Devices &gt; Insert Guest Additions CD Image...&quot;를 선택한다. 그 다음엔 콘솔에서 아래의 명령을 수행해서 게스트 확장을 설치한다. 그리고 설치가 정상적으로 완료되었다면 재시작 한다(굳이 할 필요는 없지만 kernel과 관련된 변경이 있는 것으로 보여 재시작 해 줬다).</p>
<pre class="hljs bash">$ su
$ mount -r /dev/cdrom /media/
$ ll /media/
$ yum install -y bzip2 kernel-devel make gcc perl
$ /media/VBoxLinuxAdditions.run --nox11
$ yum clean all

$ usermod -u 471 vboxadd
$ groupmod -g 471 vboxsf
<span class="hljs-comment">#lsmod | grep vboxsf</span>

$ <span class="hljs-built_in">export</span> MAKE=<span class="hljs-string">'/usr/bin/gmake -i'</span>
$ /etc/init.d/vboxadd setup
$ <span class="hljs-built_in">unset</span> MAKE

$ reboot</pre>
<p>간혹 VBoxLinuxAdditions.run을 실행하는 과정에 kernel-devel이 없다는 오류가 날 수 있다. 이 경우엔 오류 메시지에 kernel-devel의 특정 버전을 yum으로 설치하라는 내용이 포함되어 있다. 이 명령을 따라 kernel-devel을 설치하고 VBoxLinuxAdditions.run를 다시 실행하면 오류없이 설치가 된다. </p>
<h3>Vagrant 관련 설정</h3>
<p>우선 vagrant 계정을 추가한다.</p>
<pre class="hljs bash">$ /usr/sbin/groupadd -g 470 vagrant
$ /usr/sbin/useradd -g vagrant -u 470 vagrant
$ passwd vagrant
    <span class="hljs-comment"># vagrant 를 암호로 입력</span>
$ chown vagrant.vagrant /home/vagrant/</pre>
<p>vagrant 계정에서 root 명량을 수행할 수 있도록 sudo에 추가해 준다.</p>
<pre class="hljs bash">$ visudo
    <span class="hljs-comment"># 아래 내용 추가</span>
Defaults    env_keep += <span class="hljs-string">"SSH_AUTH_SOCK"</span>
%vagrant        ALL=(ALL)       NOPASSWD: ALL
Defaults:vagrant !requiretty</pre>
<p>sudo에 정상적으로 추가되었는지를 확인하기 위해 아래의 명령을 수행해 본다.</p>
<pre class="hljs bash">$ su vagrant
$ <span class="hljs-built_in">cd</span>
$ sudo ls -al</pre>
<p>vagrant의 ssh key를 추가해 준다. 위의 확인 코드를 수행했다면 /home/vagrant에 위치하고 있을 것이다. 아니라면 해당 폴더로 이동한다.</p>
<pre class="hljs bash">$ mkdir .ssh
$ curl -k https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub &gt; .ssh/authorized_keys
$ chmod 0700 .ssh
$ chmod 0600 .ssh/authorized_keys
<span class="hljs-comment"># .ssh/authorized_keys 내용 확인</span>
$ cat .ssh/authorized_keys</pre>
<p>여기서 주의할 것이 있다. authorized_keys 파일이 빈 파일로 저장되는 경우가 있다. 정확한 원인은 확인하지 못했지만 이번에 작업하다보니 이런 경우가 생겼다. 현재로써는 curl의 문제로 보이지만 확실하진 않다. 이 경우엔 일단 파일을 받아야 하니 아래와 같이 wget을 사용해서 받자.</p>
<pre class="hljs bash">$ sudo yum install wget -y
$ mkdir .ssh
$ wget --no-check-certificate https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub -O .ssh/authorized_keys
$ chmod 0700 .ssh
$ chmod 0600 .ssh/authorized_keys
<span class="hljs-comment"># .ssh/authorized_keys 내용 확인</span>
$ cat .ssh/authorized_keys</pre>
<p>이제는 ssh 설정을 조정한다.</p>
<pre class="hljs bash">$ sudo vi /etc/ssh/sshd_config
    <span class="hljs-comment"># 아래의 내용을 확인해서 맞춰준다.</span>
Port 22
PubkeyAuthentication yes
AuthorizedKeysFile      .ssh/authorized_keys</pre>
<p>디스크를 정리해서 용량을 줄인다. 디스크 용량이 부족하다는 오류가 나올 수 있는데 무시하면 된다. 디스크가 가득 찰때까지 내용을 채우기 때문이라고 한다.(<a href="http://stackoverflow.com/a/24956805">http://stackoverflow.com/a/24956805</a>) 이렇게 하면 가상이미지를 Box로 변환시 용량을 줄일 수 있다고 한다.</p>
<pre class="hljs bash">sudo dd <span class="hljs-keyword">if</span>=/dev/zero of=/EMPTY bs=1M
sudo rm -f /EMPTY</pre>
<p>이제 기본 설정을 마쳤으므로 서버를 종료한다.</p>
<pre class="hljs bash">$ sudo halt</pre>
<h3>Box 만들기</h3>
<p>이제 마지막 단계다. OSX의 shell에서 아래 명령을 입력하면 설치된 VirtualBox 목록이 출력된다. 여기서 생성했던 가상 머신의 이름을 확인한다.</p>
<pre class="hljs bash">VBoxManage list vms</pre>
<p>이제 박스를 만든다. &quot;vagrant-centos7-x86_64&quot;는 위에서 확인한 VirtualBox 이름을 넣으면 되고 &quot;centos7-x86_64.box&quot;는 생성할 박스의 이름을 넣으면 된다.</p>
<pre class="hljs bash">vagrant package --output centos7-x86_64.box --base vagrant-centos7-x86_64</pre>
<p>혹시 퍼미션 오류가 난다면 아래처럼 sudo를 사용하면 된다. 사실 일반적인 경우라면 당연히 퍼미션 오류가 나지 않는다. 그런데 나의 경우엔 1024 이하의 포트를 포트 포워딩하기 위해 vagrant와 VirtualBox를 root 권한에서 사용하고 있다(OSX에서는 1024 포트를 포트 포워딩하기 위해서는 root 권한이 필요하다). 이런 경우라면 vagrant 명령에서 권한 오류가 날 수 있다.</p>
<pre class="hljs bash">sudo vagrant package --output centos7-x86_64.box --base vagrant-centos7-x86_64</pre>
<h3>Vagrantfile 만들기</h3>
<p>아래의 명령을 실행하면 Vagrantfile가 만들어 진다. 아래는 두가지 방법을 설명하고 있다. 첫 번째는 local에 box을 추가해서 init하는 것이고 두 번째는 현재 폴더의 box 파일을 사용해서 init하는 것이다. 어떤 방법을 써도 Vagrantfile는 만들어지니 편한 방법을 사용하면 된다. 어짜피 vagrant up 실행시 박스는 만들어진다. 보통 &quot;~/.vagrant.d/boxes&quot;에 Box 파일이 추가된다.</p>
<pre class="hljs bash">$ vagrant box add centos7 centos7-x86_64.box
$ vagrant init centos7</pre>
<p>또는</p>
<pre class="hljs bash">$ vagrant init centos7-x86_64.box
<span class="hljs-comment"># or</span>
$ vagrant init</pre>
<p>여기서 만들어진 파일은 가장 기본 설정만 되어 있으므로 자신에게 맞는 설정을 해주어야 한다. 이 부분은 또 내용이 길기 때문에 다음에 포스팅 하도록 하겠다.</p>
<h3>실행해보기</h3>
<pre class="hljs bash">$ vagrant up</pre>
<p>앞선 과정에서 문제가 없었다면 정상적으로 vagrant가 실행된다. 당연히 최소 실행시에는 box를 다운받는 과정이 있어 실행이 좀 오래 걸린다.</p>
<p>아래의 명령으로 접속이 된다면 일단 성공이다.</p>
<pre class="hljs bash">$ vagrant ssh</pre>
<p>박스의 종료.</p>
<pre class="hljs bash">$ vagrant halt</pre>
<p>추가된 box를 제거하려면 아래를 참고하자.</p>
<pre class="hljs bash">$ vagrant destroy

$ vagrant box list
$ vagrant box remove centos7-x86_64.box</pre>
<p>destroy는 VirtualBox에서 가상 머신을 제거한다. 하지만 추가된 box는 제거되지 않는다. 따라서 box list를 이용해서 box명을 확인해서 box remove를 해주어야 box까지 제거된다. 여기서 제거란 설치된 파일의 제거를 뜻하므로 만들어둔 box파일과 Vagrantfile 파일은 그대로 유지된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/14/centos-7-minimal-install/</id><title type="html">CentOS 7 minimal 설치</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/14/centos-7-minimal-install/"/><published>2015-10-14T11:46:55+09:00</published><updated>2015-10-14T11:46:55+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[Minimal 설치 설치를 시작하면 아래와 같은 화면이 나온다. 그냥 Enter를 치면된다. 커서를 옮겨 "Install CentOS 7"을 선택한다. 언어를 한국어로 선택한다. 설치 대상을 선택해서 드라이브를 선택한다. 파티션을 직접 설정하고 싶다면 "파티션을 설정합니다."를 체크하고 완료한다. 직접 설정하기로 했다면 왼쪽 하단의 "+"를 누르면 아래와 같이 파티션과 용량을 선택할 수 있는 화면이 나온다. 파티션과 용량은 자신에게 맞게 설정하면 된다. 관련해서는 Centos 7 설치시 파티셔닝을 참고하길 바란다. 완료를 선택하면 확인 창이 나온다. 확인 후 이상이 없다면 "변경 사항을 적용"을 선택한다. 이제 설치가 시작된다. 설치가 되는 동안 "Root 암호"를 선택해서 암호를 입력한다. 설치가 완료되면 Consol이 나타난다. 여기서는 root로 로그인하면 되는데 비밀번호는 설치과정에서 입력했던 비밀번호를 사용하면 된다. 일단 설치는 완료. 초기 설정 Minimal 설치 과정에서 네트워크 설정을 하지 않았다면 네트워크부터 설정해야 한다. $ vi /etc/sysconfig/network-scripts/ifcfg-enp0s3 네트워크 설정 파일을 열어 필요한 부분을 수정한다. 단, ifcfg-enp0s3 부분은 장비에 따라 다르게 나올 수 있다. 기본적으로 dhcp를 사용하도록 되어 있을텐데 dhcp를 그대로 사용한다면 ONBOOT=no 부분을 ONBOOT=yes으로 바꿔주기만 하면된다. dhcp를 사용하지 않는다면 사용할 IP를 지정한다. 네트워크를 재시작하여 네트워크를 활성화한다. $ service network restart 설정에 이상이 없다면 이제 네트워크를 사용할 수 있다. 이제부터는 ssh를 통해서 접속해서 작업하는게 편하다. 그런데 그러려면 해당 IP를 알아야하고(dhcp 사용시) ssh server가 설치되어야 한다. 아이피부터 확인하자. $ ifconfig -a 그런데 위 명령을 입력하면 command not found 오류가 난다. centos 7에서는 이것도 기본 설치에서 제외되어 있는 듯 하다(기억이 잘나지 않지만 7 미만 버전에서는 이건 기본 설치 되어 있었던 것 같은데). 일단 다른 명령으로 ip를 확인하자. 굳이 ifconfig를 당장 써야 겠다면 ‘Ifconfig’ Command Not Found In CentOS 7 Minimal Installation – A Quick Tip To Fix It를 참고하자. $ ip addr 이제는 ssh server를 설치하자. 어짜피 ifconfig 등을 사용할테니 net-tools도 함께 설치하자. 그리고 ssh server를 켜고 재부팅시 자동으로 시작되도록 수정한다. $ yum install -y openssh-server net-tools $ service sshd start Redirecting to /bin/systemctl restart sshd.service $ chkconfig sshd on 알림: 'systemctl enable sshd.service'에 요청을 전송하고 있습니다. 위 내용에서 보이듯이 service sshd start 명령 실행시 /bin/systemctl restart sshd.service으로 대체되었다고 나온다. 그 아래 chkconfig sshd on 명령 실행시에도 마찬가지다. 이유는 CentOS 7 부터 initd 대신 systemd가 기본으로 사용된다. 따라서 안내된 명령이 정확한 명령이다. 위 내용은 이 부분을 보여주기 위해서 일부러 CentOS 7 미만에서 사용되던 명령을 보여준 것이다. systemd에 대해서는 systemd 살펴보기를 참고하자. 이제는 ssh client로 접속도 가능하다. 직접 콘솔을 사용하는 것보다 client로 접속해서 처리하는게 간편하니 ssh client로 접속해서 작업하자. 아직 다른 계정을 만들지 않았으므로 root로 접속하면 된다. 그냥 콘솔에서 하겠다면 그냥 해도 된다. 이제는 최신 버전으로 패키지를 업데이트 한다. 최신 버전의 CentOS를 받아서 설치했더라도 패키지들의 업데이트가 있을테니 업데이트하는게 좋다. $ yum update -y 이것으로 가장 기본적인 설치까지 완료되었다. 말그대로 초기세팅만 했은니 사용을 위해서는 여러가지 작업을 따로 해야한다. 이 부분은 용도에 따라 달라질 수 있으니 상황에 맞게 작업하면 된다. 다만 여기서는 길어져서 설명하진 않지만 방화벽 설정, ssh 설정 등 사용을 위한 기본적인 설정은 하는게 좋다. 이와 관련해서는 따로 포스팅하도록 하겠다.]]></summary><content type="html"><![CDATA[<h2>Minimal 설치</h2>
<p>설치를 시작하면 아래와 같은 화면이 나온다. 그냥 Enter를 치면된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-1.png" alt="centos-7-minimal-install-1" width="832" height="555" /></p>
<p>커서를 옮겨 &quot;Install CentOS 7&quot;을 선택한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-2.png" alt="centos-7-minimal-install-2" width="752" height="635" /></p>
<p>언어를 한국어로 선택한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-3.png" alt="centos-7-minimal-install-3" width="1136" height="923" /></p>
<p>설치 대상을 선택해서 드라이브를 선택한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-4.png" alt="centos-7-minimal-install-4" width="1136" height="923" /></p>
<p>파티션을 직접 설정하고 싶다면 &quot;파티션을 설정합니다.&quot;를 체크하고 완료한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-5.png" alt="centos-7-minimal-install-5" width="1136" height="923" /></p>
<p>직접 설정하기로 했다면 왼쪽 하단의 &quot;+&quot;를 누르면 아래와 같이 파티션과 용량을 선택할 수 있는 화면이 나온다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-6.png" alt="centos-7-minimal-install-6" width="1136" height="923" /></p>
<p>파티션과 용량은 자신에게 맞게 설정하면 된다. 관련해서는 <a href="https://blog.asamaru.net/2015/10/14/centos-7-install-partitioning/">Centos 7 설치시 파티셔닝</a>을 참고하길 바란다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-7.png" alt="centos-7-minimal-install-7" width="1136" height="923" /></p>
<p>완료를 선택하면 확인 창이 나온다. 확인 후 이상이 없다면 &quot;변경 사항을 적용&quot;을 선택한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-8.png" alt="centos-7-minimal-install-8" width="1136" height="923" /></p>
<p>이제 설치가 시작된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-9.png" alt="centos-7-minimal-install-9" width="1136" height="923" /></p>
<p>설치가 되는 동안 &quot;Root 암호&quot;를 선택해서 암호를 입력한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-10.png" alt="centos-7-minimal-install-10" width="1136" height="923" /></p>
<p>설치가 완료되면 Consol이 나타난다. 여기서는 root로 로그인하면 되는데 비밀번호는 설치과정에서 입력했던 비밀번호를 사용하면 된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-14-centos-7-minimal-install-11.png" alt="centos-7-minimal-install-11" width="832" height="555" /></p>
<p>일단 설치는 완료.</p>
<h2>초기 설정</h2>
<p>Minimal 설치 과정에서 네트워크 설정을 하지 않았다면 네트워크부터 설정해야 한다.</p>
<pre class="hljs bash">$ vi /etc/sysconfig/network-scripts/ifcfg-enp0s3</pre>
<p>네트워크 설정 파일을 열어 필요한 부분을 수정한다. 단, <code>ifcfg-enp0s3</code> 부분은 장비에 따라 다르게 나올 수 있다.
기본적으로 dhcp를 사용하도록 되어 있을텐데 dhcp를 그대로 사용한다면 <code>ONBOOT=no</code> 부분을 <code>ONBOOT=yes</code>으로 바꿔주기만 하면된다. dhcp를 사용하지 않는다면 사용할 IP를 지정한다.</p>
<p>네트워크를 재시작하여 네트워크를 활성화한다.</p>
<pre class="hljs bash">$ service network restart</pre>
<p>설정에 이상이 없다면 이제 네트워크를 사용할 수 있다. 이제부터는 ssh를 통해서 접속해서 작업하는게 편하다. 그런데 그러려면 해당 IP를 알아야하고(dhcp 사용시) ssh server가 설치되어야 한다.</p>
<p>아이피부터 확인하자.</p>
<pre class="hljs bash">$ ifconfig -a</pre>
<p>그런데 위 명령을 입력하면 <code>command not found</code> 오류가 난다. centos 7에서는 이것도 기본 설치에서 제외되어 있는 듯 하다(기억이 잘나지 않지만 7 미만 버전에서는 이건 기본 설치 되어 있었던 것 같은데). 일단 다른 명령으로 ip를 확인하자. 굳이 ifconfig를 당장 써야 겠다면 <a href="http://www.unixmen.com/ifconfig-command-found-centos-7-minimal-installation-quick-tip-fix/">‘Ifconfig’ Command Not Found In CentOS 7 Minimal Installation – A Quick Tip To Fix It</a>를 참고하자.</p>
<pre class="hljs bash">$ ip addr</pre>
<p>이제는 ssh server를 설치하자. 어짜피 ifconfig 등을 사용할테니 net-tools도 함께 설치하자. 그리고 ssh server를 켜고 재부팅시 자동으로 시작되도록 수정한다.</p>
<pre class="hljs bash">$ yum install -y openssh-server net-tools

$ service sshd start
Redirecting to /bin/systemctl restart  sshd.service

$ chkconfig sshd on
알림: <span class="hljs-string">'systemctl enable sshd.service'</span>에 요청을 전송하고 있습니다.</pre>
<p>위 내용에서 보이듯이 <code>service sshd start</code> 명령 실행시 <code>/bin/systemctl restart  sshd.service</code>으로 대체되었다고 나온다. 그 아래 <code>chkconfig sshd on</code> 명령 실행시에도 마찬가지다. 이유는 CentOS 7 부터 initd 대신 systemd가 기본으로 사용된다. 따라서 안내된 명령이 정확한 명령이다. 위 내용은 이 부분을 보여주기 위해서 일부러 CentOS 7 미만에서 사용되던 명령을 보여준 것이다. systemd에 대해서는 <a href="http://lunatine.net/about-systemd/">systemd 살펴보기</a>를 참고하자.</p>
<p>이제는 ssh client로 접속도 가능하다. 직접 콘솔을 사용하는 것보다 client로 접속해서 처리하는게 간편하니 ssh client로 접속해서 작업하자. 아직 다른 계정을 만들지 않았으므로 root로 접속하면 된다. 그냥 콘솔에서 하겠다면 그냥 해도 된다.</p>
<p>이제는 최신 버전으로 패키지를 업데이트 한다. 최신 버전의 CentOS를 받아서 설치했더라도 패키지들의 업데이트가 있을테니 업데이트하는게 좋다.</p>
<pre class="hljs bash">$ yum update -y</pre>
<p>이것으로 가장 기본적인 설치까지 완료되었다. 말그대로 초기세팅만 했은니 사용을 위해서는 여러가지 작업을 따로 해야한다. 이 부분은 용도에 따라 달라질 수 있으니 상황에 맞게 작업하면 된다. 다만 여기서는 길어져서 설명하진 않지만 방화벽 설정, ssh 설정 등 사용을 위한 기본적인 설정은 하는게 좋다. 이와 관련해서는 따로 포스팅하도록 하겠다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/14/centos-7-install-partitioning/</id><title type="html">Centos 7 설치시 파티셔닝</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/14/centos-7-install-partitioning/"/><published>2015-10-14T11:44:41+09:00</published><updated>2015-10-14T11:44:41+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[Linux 설치 과정에서 고민되는 것 중 하나가 파티션닝이다. 크게 중요하지 않은 상황이라면 자동으로 설정해주는 것을 그대로 사용하는 것이 편하긴하다. 설치 후에도 파티션을 변경할 수 있는 경우도 있으나 일반적으로 Linux를 서버로 사용하는 경우 동적으로 변경하는 상황은 흔치 않기 때문에 처음 설치시 신중하게 설정하는 것이 좋다. 파티셔닝은 서버의 사용 용도 등에 따라 파티션별 파일시스템의 종류와 용량이 많은 차이를 보일 수 있으므로 참고만 하고 자신이 직접 고민을 해보는 것이 좋을 것이다. 아래의 내용은 RED HAT ENTERPRISE LINUX 7 Installation Guide : Manual Partitioning을 기준으로 정리하고자 한다(CentOS 7 기준이지만 대부분의 Linux에서도 비슷할 것이다). 따라서 자세한 내용을 보려면 해당 문서를 자세히 읽어보기를 권한다(아래는 간단하게 필요한 부분만 발췌해서 간단히 개인적인 의견을 적은 것이다). 파티션의 분할 '6.13.4.5. Recommended Partitioning Scheme'에서 권장하는 파티션 분할은 아래와 같다. /boot partition - recommended size at least 500 MB / (root) partition - recommended size of 10 GB /home partition - recommended size at least 1 GB swap partition - recommended size at least 1 GB 위의 파티셔닝은 말그대로 그냥 권장일뿐 상황에 따라서 바뀔 수 있다. 예를들어 나는 간단한 서버인 경우 home 파티션을 구분하지 않고 boot와 swap만 지정하고 나머지 모두를 /에 할달해서 사용한다(관리 편의상). 그런데 swap은 사람들마다 용량에 대한 의견에 차이가 많은 파티션 중 하나다. 우선 참고할만한 글은 아래와 같다. 리눅스 스왑메모리 크기 권고 CentOS 5 Documentation : Swap Space RED HAT ENTERPRISE LINUX 7 Installation Guide : Manual Partitioning 중 '6.13.4.5. Recommended Partitioning Scheme' 아래는 RED HAT ENTERPRISE LINUX 7 Installation Guide에 안내된 내용을 가져온 것이다. 일반적인 상황이라면 아래의 기준치를 참고해서 정하면된다. 하지만 서비스를 위한 서버라면 일반적으로 swap 자체가 사용되는 상황을 최대한 없애야 하기 때문에 swap 용량을 많이 책정할 이유는 없다. Amount of RAM in the system Recommended swap space Recommended swap space if allowing for hibernation less than 2 GB 2 times the amount of RAM 3 times the amount of RAM 2 GB - 8 GB Equal to the amount of RAM 2 times the amount of RAM 8 GB - 64 GB 0.5 times the amount of RAM 1.5 times the amount of RAM more than 64 GB workload dependent hibernation not recommended 파일시스템의 선택 CentOS 7은 기본 파일시스템으로 xfs를 사용한다(CentOS 6의 경우 ext4가 기본 파일시스템 이었다). xfs는 데비안 계열의 배포판에서 오래전부터 기본 파일시스템으로 사용하던 것으로 대용량 파일을 지원하며 오랜시간 타 리눅스 배포판에서 사용되면서 안정성이 입증되었다고 판단한 것으로 보인다. 다른 파일시스템도 지원하므로 선택은 자유다. 자세한 내용은 메뉴얼에도 나와있고 찾아보면 많은 자료를 쉽게 찾을 수 있다. 나의 경우는 파일시스템의 경우 특별한 이유가 있지 않는한 해당 OS에서 기본으로 사용하는 파일시스템을 사용한다. 정리 앞서 설명할때는 고민을 많이 해야 한다고 했는데 글을 적고 보니 너무 간단한 느낌이다. 사실 아주 고성능과 고가용성이 필요한 서버가 아니라면 위의 내용 정도만 생각해줘도 크게 무리는 없다는 생각이다. 자세히 설명하자면 파티션별 사이즈, 파일시스템 하나 하나에 대해서 설명해야 하는데 그러려면 책이 한권이다. 따라서 그 이상이 필요하다면 메뉴얼을 참고하면 관련 사항들을 하나씩 더 찾아보기 바란다.]]></summary><content type="html"><![CDATA[<p>Linux 설치 과정에서 고민되는 것 중 하나가 파티션닝이다. 크게 중요하지 않은 상황이라면 자동으로 설정해주는 것을 그대로 사용하는 것이 편하긴하다. 설치 후에도 파티션을 변경할 수 있는 경우도 있으나 일반적으로 Linux를 서버로 사용하는 경우 동적으로 변경하는 상황은 흔치 않기 때문에 처음 설치시 신중하게 설정하는 것이 좋다.</p>
<p>파티셔닝은 서버의 사용 용도 등에 따라 파티션별 파일시스템의 종류와 용량이 많은 차이를 보일 수 있으므로 참고만 하고 자신이 직접 고민을 해보는 것이 좋을 것이다.</p>
<p>아래의 내용은 <a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Installation_Guide/sect-disk-partitioning-setup-x86.html#sect-custom-partitioning-x86">RED HAT ENTERPRISE LINUX 7 Installation Guide : Manual Partitioning</a>을 기준으로 정리하고자 한다(CentOS 7 기준이지만 대부분의 Linux에서도 비슷할 것이다). 따라서 자세한 내용을 보려면 해당 문서를 자세히 읽어보기를 권한다(아래는 간단하게 필요한 부분만 발췌해서 간단히 개인적인 의견을 적은 것이다).</p>
<h2>파티션의 분할</h2>
<p>'6.13.4.5. Recommended Partitioning Scheme'에서 권장하는 파티션 분할은 아래와 같다.</p>
<ul>
<li>/boot partition - recommended size at least 500 MB</li>
<li>/ (root) partition - recommended size of 10 GB</li>
<li>/home partition - recommended size at least 1 GB</li>
<li>swap partition - recommended size at least 1 GB</li>
</ul>
<p>위의 파티셔닝은 말그대로 그냥 권장일뿐 상황에 따라서 바뀔 수 있다. 예를들어 나는 간단한 서버인 경우
home 파티션을 구분하지 않고 boot와 swap만 지정하고 나머지 모두를 /에 할달해서 사용한다(관리 편의상).</p>
<p>그런데 swap은 사람들마다 용량에 대한 의견에 차이가 많은 파티션 중 하나다. 우선 참고할만한 글은 아래와 같다.</p>
<ul>
<li><a href="http://zetawiki.com/wiki/%EB%A6%AC%EB%88%85%EC%8A%A4_%EC%8A%A4%EC%99%91%EB%A9%94%EB%AA%A8%EB%A6%AC_%ED%81%AC%EA%B8%B0_%EA%B6%8C%EA%B3%A0">리눅스 스왑메모리 크기 권고
</a></li>
<li><a href="https://www.centos.org/docs/5/html/Deployment_Guide-en-US/ch-swapspace.html">CentOS 5 Documentation : Swap Space</a></li>
<li><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Installation_Guide/sect-disk-partitioning-setup-x86.html#sect-custom-partitioning-x86">RED HAT ENTERPRISE LINUX 7 Installation Guide : Manual Partitioning</a> 중 '6.13.4.5. Recommended Partitioning Scheme'</li>
</ul>
<p>아래는 RED HAT ENTERPRISE LINUX 7 Installation Guide에 안내된 내용을 가져온 것이다. 일반적인 상황이라면 아래의 기준치를 참고해서 정하면된다. 하지만 서비스를 위한 서버라면 일반적으로 swap 자체가 사용되는 상황을 최대한 없애야 하기 때문에 swap 용량을 많이 책정할 이유는 없다.</p>
<table>
<thead>
<tr>
<th>Amount of RAM in the system</th>
<th>Recommended swap space</th>
<th>Recommended swap space if allowing for hibernation</th>
</tr>
</thead>
<tbody>
<tr>
<td>less than 2 GB</td>
<td>2 times the amount of RAM</td>
<td>3 times the amount of RAM</td>
</tr>
<tr>
<td>2 GB - 8 GB</td>
<td>Equal to the amount of RAM</td>
<td>2 times the amount of RAM</td>
</tr>
<tr>
<td>8 GB - 64 GB</td>
<td>0.5 times the amount of RAM</td>
<td>1.5 times the amount of RAM</td>
</tr>
<tr>
<td>more than 64 GB</td>
<td>workload dependent</td>
<td>hibernation not recommended</td>
</tr>
</tbody>
</table>
<h2>파일시스템의 선택</h2>
<p>CentOS 7은 기본 파일시스템으로 xfs를 사용한다(CentOS 6의 경우 ext4가 기본 파일시스템 이었다). xfs는 데비안 계열의 배포판에서 오래전부터 기본 파일시스템으로 사용하던 것으로 대용량 파일을 지원하며 오랜시간 타 리눅스 배포판에서 사용되면서 안정성이 입증되었다고 판단한 것으로 보인다. 다른 파일시스템도 지원하므로 선택은 자유다. 자세한 내용은 메뉴얼에도 나와있고 찾아보면 많은 자료를 쉽게 찾을 수 있다.
나의 경우는 파일시스템의 경우 특별한 이유가 있지 않는한 해당 OS에서 기본으로 사용하는 파일시스템을 사용한다.</p>
<h2>정리</h2>
<p>앞서 설명할때는 고민을 많이 해야 한다고 했는데 글을 적고 보니 너무 간단한 느낌이다. 사실 아주 고성능과 고가용성이 필요한 서버가 아니라면 위의 내용 정도만 생각해줘도 크게 무리는 없다는 생각이다. 자세히 설명하자면 파티션별 사이즈, 파일시스템 하나 하나에 대해서 설명해야 하는데 그러려면 책이 한권이다. 따라서 그 이상이 필요하다면 메뉴얼을 참고하면 관련 사항들을 하나씩 더 찾아보기 바란다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/13/java-dot-lang-dot-illegalstateexception-can-not-perform-this-action-after-onsaveinstancestate/</id><title type="html">java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/13/java-dot-lang-dot-illegalstateexception-can-not-perform-this-action-after-onsaveinstancestate/"/><published>2015-10-13T16:53:54+09:00</published><updated>2015-10-13T16:53:54+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 Fragment 작업 중에 java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState 오류가 발생했다. 상황은 이렇다. Fragment를 가진 Activity에서 새로운 Activity를 띄우고 해당 Activity에서 setResult를 통해 값을 반환했다. 새로운 Activity를 열었던 Activity에서는 protected void onActivityResult(int requestCode, int resultCode, Intent intent)를 통해 값을 전달 받아 새로운 Fragment를 불렀다. 그런데 위 오류가 난다. 아래는 작성했던 코드의 일부를 예시를 위해 수정한 것이다(실행가능한 코드가 아니다). @Override protected void onActivityResult(int requestCode, int resultCode, Intent intent) { if (resultCode == RESULT_OK) { FragmentManager ft = getChildFragmentManager(); ft.beginTransaction() .replace(R.id.fragmentContainer, (Fragment) fragment) .commit(); } super.onActivityResult(requestCode, resultCode, intent); } 관련된 정보를 찾아보니 아래와 같은 문서들이 보였다. java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState Fragment 파헤치기 – 3. FragmentManager, FragmentTransaction에 대해서 간단히 요약하자면 commit() 대신 commitAllowingStateLoss()을 사용하면 된다. 원인에 대해서는 위의 글들을 참고하면 상세히 설명되어 있다. 그래서 고쳐진 코드는 다음과 같다. @Override protected void onActivityResult(int requestCode, int resultCode, Intent intent) { if (resultCode == RESULT_OK) { FragmentManager ft = getChildFragmentManager(); ft.beginTransaction() .replace(R.id.fragmentContainer, (Fragment) fragment) .commitAllowingStateLoss(); } super.onActivityResult(requestCode, resultCode, intent); } 안드로이드는 이런 문제들에 대해서 알아서 좀 대응할 수 없는건가? 아쉽다. 그런데 함수 이름에도 나와 있는 것 처럼 commitAllowingStateLoss()를 사용하면 상태값을 잃을 수 있다. FragmentTransaction 메뉴얼에 아래와 같이 나와있다. public abstract int commitAllowingStateLoss () Like commit() but allows the commit to be executed after an activity's state is saved. This is dangerous because the commit can be lost if the activity needs to later be restored from its state, so this should only be used for cases where it is okay for the UI state to change unexpectedly on the user. commitAllowingStateLoss()를 사용하지 않고 해결하는 방법은 없을까? 생각해보면 실행되는 시점의 문제이므로 시점을 조금 지연하는 방법을 쓸 수도 있다. @Override protected void onActivityResult(int requestCode, int resultCode, Intent intent) { if (resultCode == RESULT_OK) { Handler handler_ = new Handler(Looper.getMainLooper()); handler_.postDelayed(new Runnable() { @Override public void run() { FragmentManager ft = getChildFragmentManager(); ft.beginTransaction() .replace(R.id.fragmentContainer, (Fragment) fragment) .commitAllowingStateLoss(); } }, 0); } super.onActivityResult(requestCode, resultCode, intent); } 위 코드를 보면 Handler의 postDelayed() 함수를 사용해서 처리시점을 지연시켰다(사실 시간은 0이므로 작업을 잠시 뒤로 미룬것이다). 이렇게 해도 위 오류는 발생하지 않는다. 어떤 방법이 맞는지에 대해서는 아직은 정확히 모르겠다(이렇게하면 상태를 잃어버리는 것과 무관해 지는지 명확하지 않다는 뜻이다). 선택은 자유다.]]></summary><content type="html"><![CDATA[<p>안드로이드 Fragment 작업 중에 <code>java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState</code> 오류가 발생했다. 상황은 이렇다. Fragment를 가진 Activity에서 새로운 Activity를 띄우고 해당 Activity에서 <code>setResult</code>를 통해 값을 반환했다. 새로운 Activity를 열었던 Activity에서는 <code>protected void onActivityResult(int requestCode, int resultCode, Intent intent)</code>를 통해 값을 전달 받아 새로운 Fragment를 불렀다. 그런데 위 오류가 난다. 아래는 작성했던 코드의 일부를 예시를 위해 수정한 것이다(실행가능한 코드가 아니다).</p>
<pre class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onActivityResult</span><span class="hljs-params">(<span class="hljs-keyword">int</span> requestCode, <span class="hljs-keyword">int</span> resultCode, Intent intent)</span> </span>{
    <span class="hljs-keyword">if</span> (resultCode == RESULT_OK) {
        FragmentManager ft = getChildFragmentManager();
        ft.beginTransaction()
                .replace(R.id.fragmentContainer, (Fragment) fragment)
                .commit();
    }
    <span class="hljs-keyword">super</span>.onActivityResult(requestCode, resultCode, intent);
}</pre>
<p>관련된 정보를 찾아보니 아래와 같은 문서들이 보였다.</p>
<ul>
<li><a href="http://binsolb.tistory.com/entry/javalangIllegalStateException-Can-not-perform-this-action-after-onSaveInstanceState">java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState</a></li>
<li><a href="http://www.kmshack.kr/2013/08/fragment-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0-3-fragmentmanager-fragmenttransaction%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C/">Fragment 파헤치기 – 3. FragmentManager, FragmentTransaction에 대해서</a></li>
</ul>
<p><strong>간단히 요약하자면 <code>commit()</code> 대신 <code>commitAllowingStateLoss()</code>을 사용하면 된다.</strong> 원인에 대해서는 위의 글들을 참고하면 상세히 설명되어 있다. 그래서 고쳐진 코드는 다음과 같다.</p>
<pre class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onActivityResult</span><span class="hljs-params">(<span class="hljs-keyword">int</span> requestCode, <span class="hljs-keyword">int</span> resultCode, Intent intent)</span> </span>{
    <span class="hljs-keyword">if</span> (resultCode == RESULT_OK) {
        FragmentManager ft = getChildFragmentManager();
        ft.beginTransaction()
                .replace(R.id.fragmentContainer, (Fragment) fragment)
                .commitAllowingStateLoss();
    }
    <span class="hljs-keyword">super</span>.onActivityResult(requestCode, resultCode, intent);
}</pre>
<p>안드로이드는 이런 문제들에 대해서 알아서 좀 대응할 수 없는건가? 아쉽다.
그런데 함수 이름에도 나와 있는 것 처럼 <code>commitAllowingStateLoss()</code>를 사용하면 상태값을 잃을 수 있다.</p>
<p><a href="http://developer.android.com/intl/ko/reference/android/app/FragmentTransaction.html#commitAllowingStateLoss%28%29">FragmentTransaction 메뉴얼</a>에 아래와 같이 나와있다.</p>
<blockquote>
<p>public abstract int commitAllowingStateLoss ()</p>
<p>Like commit() but allows the commit to be executed after an activity's state is saved. This is dangerous because the commit can be lost if the activity needs to later be restored from its state, so this should only be used for cases where it is okay for the UI state to change unexpectedly on the user.</p>
</blockquote>
<p><code>commitAllowingStateLoss()</code>를 사용하지 않고 해결하는 방법은 없을까? 생각해보면 실행되는 시점의 문제이므로 시점을 조금 지연하는 방법을 쓸 수도 있다.</p>
<pre class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onActivityResult</span><span class="hljs-params">(<span class="hljs-keyword">int</span> requestCode, <span class="hljs-keyword">int</span> resultCode, Intent intent)</span> </span>{
    <span class="hljs-keyword">if</span> (resultCode == RESULT_OK) {
        Handler handler_ = <span class="hljs-keyword">new</span> Handler(Looper.getMainLooper());
        handler_.postDelayed(<span class="hljs-keyword">new</span> Runnable() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{
                FragmentManager ft = getChildFragmentManager();
                ft.beginTransaction()
                        .replace(R.id.fragmentContainer, (Fragment) fragment)
                        .commitAllowingStateLoss();
            }
        }, <span class="hljs-number">0</span>);
    }
    <span class="hljs-keyword">super</span>.onActivityResult(requestCode, resultCode, intent);
}</pre>
<p>위 코드를 보면 Handler의 <code>postDelayed()</code> 함수를 사용해서 처리시점을 지연시켰다(사실 시간은 0이므로 작업을 잠시 뒤로 미룬것이다). 이렇게 해도 위 오류는 발생하지 않는다.</p>
<p>어떤 방법이 맞는지에 대해서는 아직은 정확히 모르겠다(이렇게하면 상태를 잃어버리는 것과 무관해 지는지 명확하지 않다는 뜻이다). 선택은 자유다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/13/octopress-github-flavored-markdown-redcarpet/</id><title type="html">Octopress에서 GitHub Flavored Markdown 사용하기(redcarpet)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/13/octopress-github-flavored-markdown-redcarpet/"/><published>2015-10-13T14:38:25+09:00</published><updated>2015-10-13T14:38:25+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="octopress" label="octopress" /><summary><![CDATA[옥토프레스에서는 markdown 해석기로 rdiscount를 기본으로 사용하고 있다. 현재 사용해보니 rdiscount에서도 GitHub Flavored Markdown를 지원하는 것으로 보이는데 예전엔 제대로 지원이 안되고 있었는지 redcarpet으로 바꾸서 사용하는 사람들이 많았다. 그래서 나도 바꿔 봤다. 변경을 위해 참고한 글은 다음과 같다. Octopress で GitHub Flavored Markdown (GFM) を使う Using Octopress With Github Flavored Markdown (RedCarpet) 그런데 위 글들이 작성된 시점이 조금 오래되어서 그런지 그대로 따라해서는 정상적으로 적용이 되지 않았다. 그래서 몇가지를 수정해서 적용을 완료했다. redcarpet 설치 Gemfile에 아래의 내용을 추가 한다. Gemfile gem 'redcarpet', '~> 3.3.2' gem 'albino', '~> 1.3.3' [sudo] bundle install redcarpet 플러그인 설치 plugins/redcarpet2_markdown.rb 파일을 추가한다. 원본은 https://github.com/nono/Jekyll-plugins에 가면 볼 수 있다. 거의 그대로인데 약간 수정을 했다. plugins/redcarpet2_markdown.rb require 'fileutils' require 'digest/md5' require 'redcarpet' require 'albino' # PYGMENTS_CACHE_DIR = File.expand_path('../../_cache', __FILE__) FileUtils.mkdir_p(PYGMENTS_CACHE_DIR) class Redcarpet2Markdown < Redcarpet::Render::HTML def block_code(code, lang) lang = lang || "text" path = File.join(PYGMENTS_CACHE_DIR, "#{lang}-#{Digest::MD5.hexdigest code}.html") cache(path) do colorized = Albino.colorize(code, lang.downcase) add_code_tags(colorized, lang) end end def add_code_tags(code, lang) code.sub(/<pre>/, "<pre><code class=\"#{lang}\">"). sub(/<\/pre>/, "</code></pre>") end def cache(path) if File.exist?(path) File.read(path) else content = yield File.open(path, 'w') {|f| f.print(content) } content end end end class Jekyll::MarkdownConverter def extensions Hash[ *@config['redcarpet']['extensions'].map {|e| [e.to_sym, true] }.flatten ] end def markdown @markdown ||= Redcarpet::Markdown.new(Redcarpet2Markdown.new(extensions), extensions) end def convert(content) return super unless @config['markdown'] == 'redcarpet' markdown.render(content) end end config 설정 _config.yml 파일을 열어서 rdiscount 부분을 아래와 같이 수정한다. #markdown: rdiscount markdown: redcarpet redcarpet: extensions: ["no_intra_emphasis", "fenced_code_blocks", "autolink", "tables", "with_toc_data", "strikethrough", "superscript"] #rdiscount: # extensions: # - autolink # - footnotes # - smart 참고 사이트들 설명을 보면 extensions에 hard_wrap을 추가하라고 되어 있는데 나의 경우는 이 옵션을 추가하면 Pygments에서 오류가 났다. 이것으로 설치는 끝이다. generate를 해보면 페이지가 잘 생성된다.]]></summary><content type="html"><![CDATA[<p>옥토프레스에서는 markdown 해석기로 <a href="https://github.com/davidfstr/rdiscount">rdiscount</a>를 기본으로 사용하고 있다. 현재 사용해보니 rdiscount에서도 GitHub Flavored Markdown를 지원하는 것으로 보이는데 예전엔 제대로 지원이 안되고 있었는지 <a href="https://github.com/vmg/redcarpet">redcarpet</a>으로 바꾸서 사용하는 사람들이 많았다. 그래서 나도 바꿔 봤다.</p>
<p>변경을 위해 참고한 글은 다음과 같다.</p>
<ul>
<li><a href="http://blog.tdksk.com/2013/05/06/use-gfm-in-octopress.html">Octopress で GitHub Flavored Markdown (GFM) を使う</a></li>
<li><a href="http://yangsu.github.io/blog/2012/10/11/using-octopress-with-github-flavored-markdown-redcarpet/">Using Octopress With Github Flavored Markdown (RedCarpet)</a></li>
</ul>
<p>그런데 위 글들이 작성된 시점이 조금 오래되어서 그런지 그대로 따라해서는 정상적으로 적용이 되지 않았다. 그래서 몇가지를 수정해서 적용을 완료했다.</p>
<h2>redcarpet 설치</h2>
<p>Gemfile에 아래의 내용을 추가 한다.</p>
<p><strong>Gemfile</strong></p>
<pre class="hljs ruby">gem <span class="hljs-string">'redcarpet'</span>, <span class="hljs-string">'~&gt; 3.3.2'</span>
gem <span class="hljs-string">'albino'</span>, <span class="hljs-string">'~&gt; 1.3.3'</span></pre>
<pre class="hljs bash">[sudo] bundle install</pre>
<h2>redcarpet 플러그인 설치</h2>
<p>plugins/redcarpet2_markdown.rb 파일을 추가한다. 원본은 <a href="https://github.com/nono/Jekyll-plugins에">https://github.com/nono/Jekyll-plugins에</a> 가면 볼 수 있다. 거의 그대로인데 약간 수정을 했다.</p>
<p><strong>plugins/redcarpet2_markdown.rb</strong></p>
<pre class="hljs ruby"><span class="hljs-keyword">require</span> <span class="hljs-string">'fileutils'</span>
<span class="hljs-keyword">require</span> <span class="hljs-string">'digest/md5'</span>
<span class="hljs-keyword">require</span> <span class="hljs-string">'redcarpet'</span>
<span class="hljs-keyword">require</span> <span class="hljs-string">'albino'</span>

<span class="hljs-comment"># PYGMENTS_CACHE_DIR = File.expand_path('../../_cache', __FILE__)</span>
FileUtils.mkdir_p(PYGMENTS_CACHE_DIR)

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Redcarpet2Markdown</span> &lt; Redcarpet::Render::<span class="hljs-title">HTML</span></span>
  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">block_code</span><span class="hljs-params">(code, lang)</span></span>
    lang = lang <span class="hljs-params">||</span> <span class="hljs-string">"text"</span>
    path = File.join(PYGMENTS_CACHE_DIR, <span class="hljs-string">"<span class="hljs-subst">#{lang}</span>-<span class="hljs-subst">#{Digest::MD5.hexdigest code}</span>.html"</span>)
    cache(path) <span class="hljs-keyword">do</span>
      colorized = Albino.colorize(code, lang.downcase)
      add_code_tags(colorized, lang)
    <span class="hljs-keyword">end</span>
  <span class="hljs-keyword">end</span>

  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_code_tags</span><span class="hljs-params">(code, lang)</span></span>
    code.sub(<span class="hljs-regexp">/&lt;pre&gt;/</span>, <span class="hljs-string">"&lt;pre&gt;&lt;code class=\"<span class="hljs-subst">#{lang}</span>\"&gt;"</span>).
         sub(<span class="hljs-regexp">/&lt;\/pre&gt;/</span>, <span class="hljs-string">"&lt;/code&gt;&lt;/pre&gt;"</span>)
  <span class="hljs-keyword">end</span>

  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cache</span><span class="hljs-params">(path)</span></span>
    <span class="hljs-keyword">if</span> File.exist?(path)
      File.read(path)
    <span class="hljs-keyword">else</span>
      content = <span class="hljs-keyword">yield</span>
      File.open(path, <span class="hljs-string">'w'</span>) {<span class="hljs-params">|f|</span> f.print(content) }
      content
    <span class="hljs-keyword">end</span>
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jekyll::MarkdownConverter</span></span>
  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">extensions</span></span>
    Hash[ *@config[<span class="hljs-string">'redcarpet'</span>][<span class="hljs-string">'extensions'</span>].map {<span class="hljs-params">|e|</span> [e.to_sym, <span class="hljs-literal">true</span>] }.flatten ]
  <span class="hljs-keyword">end</span>

  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">markdown</span></span>
    @markdown <span class="hljs-params">||</span>= Redcarpet::Markdown.new(Redcarpet2Markdown.new(extensions), extensions)
  <span class="hljs-keyword">end</span>

  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert</span><span class="hljs-params">(content)</span></span>
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span> <span class="hljs-keyword">unless</span> @config[<span class="hljs-string">'markdown'</span>] == <span class="hljs-string">'redcarpet'</span>
    markdown.render(content)
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span></pre>
<h2>config 설정</h2>
<p>_config.yml 파일을 열어서 rdiscount 부분을 아래와 같이 수정한다.</p>
<pre class="hljs ruby"><span class="hljs-comment">#markdown: rdiscount</span>
<span class="hljs-symbol">markdown:</span> redcarpet
<span class="hljs-symbol">redcarpet:</span>
  <span class="hljs-symbol">extensions:</span> [<span class="hljs-string">"no_intra_emphasis"</span>, <span class="hljs-string">"fenced_code_blocks"</span>, <span class="hljs-string">"autolink"</span>, <span class="hljs-string">"tables"</span>, <span class="hljs-string">"with_toc_data"</span>, <span class="hljs-string">"strikethrough"</span>, <span class="hljs-string">"superscript"</span>]
<span class="hljs-comment">#rdiscount:</span>
<span class="hljs-comment">#  extensions:</span>
<span class="hljs-comment">#    - autolink</span>
<span class="hljs-comment">#    - footnotes</span>
<span class="hljs-comment">#    - smart</span></pre>
<p>참고 사이트들 설명을 보면 extensions에 hard_wrap을 추가하라고 되어 있는데 나의 경우는 이 옵션을 추가하면 Pygments에서 오류가 났다.</p>
<p>이것으로 설치는 끝이다. generate를 해보면 페이지가 잘 생성된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/13/remove-line-break-in-tablayout/</id><title type="html">안드로이드 TabLayout 사용시 Tab Text가 두줄로 나오는 문제 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/13/remove-line-break-in-tablayout/"/><published>2015-10-13T11:35:54+09:00</published><updated>2015-10-13T11:35:54+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[TabLayout에 대한 사용법은 Google Play Style Tabs using TabLayout에 잘 나와 있으므로 생략한다. 안드로이드의 TabLayout 사용시 Tab 안의 Text가 두줄로 나오는 문제가 있다. 정확하게 이야기하자면 Desigon Support Library 23.0.1 미만에서 문제가 있다(자세한 내용은 아래에서 설명한다). 예를들어 아래와 같은 경우다. 위 이미지는 Remove line break in TabLayout에서 질문을 위해 올린 이미지인데 새로 캡춰해서 넣기 귀찮아서 복사해 왔다. 이 글에서도 동일한 문제에 대해 질문하고 있는데 이 문제는 app:tabMode="fixed"를 사용할 때 발생한다. 당연히 app:tabMode="scrollable"를 사용하면 해결될 수 있는 문제이지만 Text가 짧으면 가로 사이즈에 맞춰서 fit하고 싶을 경우는 무조건 scrollable을 사용할 순 없는 것이다. 이 질문에 대한 답변에 보면 setCustomView (View view)를 사용하는 방법을 안내하고 있다. 그냥 글자를 한줄로 나오게만 하고 싶은 것이라면 이 방법을 사용하는 것도 해결 방법이 될 수 있지만 fixed와 scrollable을 선택적으로 사용하는 것에는 사용될 수 없다(사실 그런 기능은 원래 없다). 다시 정리하자면 Tab의 개수나 Tab의 Text의 길이가 유동적인 경우에 들어갈 수 있는 공간이 충분하다면 fixed를 사용하고 길다면 scrollable을 사용하고 싶은 경우에는 어떻게 해야할까? 이 문제를 해결해주는 오픈소스 android-tablayouthelper가 있다. android-tablayouthelper를 사용하면 Tab 들의 길이에 맞춰서 fixed와 scrollable을 자동 변경해 준다. 그런데 여기서도 문제가 있다. 이 라이브러리에서는 Tab의 길이를 내부적으로 계산해서 fixed와 scrollable를 선택해 주는데 fixed일때와 scrollable일때 가로 사이즈가 차이가 날 수 있다(내부적으로 스타일이 약간 다르게 지정되는 것으로 보인다). 특히 Tab의 Text가 여러줄이 될 수 있도록 되어 있으면 문제가 더 심하게 나타난다(경험적으로). 이 문제를 개선하려면 Tab의 Text를 무조건 한줄로 나오게 하면 된다. 아래의 예시를 보자. layout.xml <android.support.design.widget.TabLayout android:id="@+id/tabs" style="@style/MyCustomTabLayout" android:layout_width="match_parent" android:layout_height="wrap_content"> </android.support.design.widget.TabLayout> styles.xml <style name="MyCustomTabLayout" parent="Widget.Design.TabLayout"> <item name="tabTextAppearance">@style/MyCustomTabTextAppearance</item> </style> <style name="MyCustomTabTextAppearance" parent="TextAppearance.Design.Tab"> <item name="android:singleLine">true</item> <item name="android:maxLines">1</item> </style> 위 방법으로 Tab의 Text를 1줄로 표시할 수 있다. 그런데 이 부분에 또 문제가 있다. Desigon Support Library 23.0.1 미만에서는 maxLines가 적용되지 않는다. 이유는 TabLayout hard codes maxLines to 2를 보면 알 수 있다. 예전 버전에서는 TabLayout 소스 코드에 MAX_TAB_TEXT_LINES가 상수로 2로 선언되어 있었다. 내용에 보면 v22.2.1에 수정되었다고 했다가 해결되지 않았고 v23.0.1에서 반영되었다. v23.0.1에서 해결된 것은 직접 확인했다. 관련된 부분이 필요해서 기존에 프로젝트에서 tablayouthelper를 상속받아 직접 처리 했었던 부분을 제거하고 정상 동작하는 것을 확인했다. 매번 이야기하는 것이지만 안드로이드는 정말 너무 엉망이다. 이런 문제들을 너무 많이 봤다. 결론은 Desigon Support Library 23.0.1 이상을 사용한다면 문제들을 해결할 수 있다. 자 마지막으로 한가지만 더 설명하겠다. 위의 예시는 TabLayout을 layout xml에서 직접 사용할 때 처리하는 방법이다. 그렇다면 소스 코드에서 TabLayout 인스턴스를 만들어야 할 경우는 어떻게 style을 적용할까? 현재 시점에서는 기본적으론 방법이 없다. 아래의 코드를 보자. TabLayout tabLayout = new TabLayout(getContext()); try { Class<?> clazz = Class.forName(TabLayout.class.getName()); Field field = clazz.getDeclaredField("mTabTextAppearance"); field.setAccessible(true); field.set(tabLayout, R.style.MyCustomTabTextAppearance); } catch (Exception e) { e.printStackTrace(); } 그렇다 직접 지정할 방법이 없어서 reflection을 사용했다. 정말 이렇게까지 하고 싶지는 않아서 다른 방법들을 찾아봤지만 아직은 발견하지 못했다. 다만, 안드로이드 메뉴얼 중 View를 보면 int defStyleRes를 네 번째 인자로 가지는 생성자가 있는 것을 발견했다. 단, api 21 이후부터 추가된 생성자다. 예상하기론 defStyleRes를 지정할 수 있으면 MyCustomTabLayout를 지정해서 소스 코드에서도 스타일을 지정할 수 있을 것 같긴한데 TabLayout은 public TabLayout (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) 생성자를 제공하지 않는다(v23.0.1 기준). TabLayout의 public TabLayout(Context context, AttributeSet attrs, int defStyleAttr) 생성자에 있는 내용을 보면 아래의 코드가 있다. TypedArray a = context.obtainStyledAttributes(attrs, styleable.TabLayout, defStyleAttr, style.Widget_Design_TabLayout); 여기서 style.Widget_Design_TabLayout 대신 defStyleRes를 넘겨받아 넣어주도록만 해줘도 가능할 것 같은데 아직은 지원하지 않는 것이다. 어쨌든 현재 시점을 기준으로 해결 방법은 위의 예시처럼 reflection을 사용하는 방법뿐이다.]]></summary><content type="html"><![CDATA[<p>TabLayout에 대한 사용법은 <a href="https://guides.codepath.com/android/Google-Play-Style-Tabs-using-TabLayout">Google Play Style Tabs using TabLayout</a>에 잘 나와 있으므로 생략한다.</p>
<p>안드로이드의 TabLayout 사용시 Tab 안의 Text가 두줄로 나오는 문제가 있다. 정확하게 이야기하자면 Desigon Support Library 23.0.1 미만에서 문제가 있다(자세한 내용은 아래에서 설명한다). 예를들어 아래와 같은 경우다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-13-remove-line-break-in-tablayout-1.png" alt="Remove line break in TabLayou" width="613" height="224" /></p>
<p>위 이미지는 <a href="http://stackoverflow.com/questions/31698756/remove-line-break-in-tablayout">Remove line break in TabLayout</a>에서 질문을 위해 올린 이미지인데 새로 캡춰해서 넣기 귀찮아서 복사해 왔다. 이 글에서도 동일한 문제에 대해 질문하고 있는데 이 문제는 <code>app:tabMode="fixed"</code>를 사용할 때 발생한다. 당연히 <code>app:tabMode="scrollable"</code>를 사용하면 해결될 수 있는 문제이지만 Text가 짧으면 가로 사이즈에 맞춰서 fit하고 싶을 경우는 무조건 scrollable을 사용할 순 없는 것이다. 이 질문에 대한 답변에 보면 <a href="https://developer.android.com/intl/ru/reference/android/support/design/widget/TabLayout.Tab.html#setCustomView%28android.view.View%29">setCustomView (View view)</a>를 사용하는 방법을 안내하고 있다. 그냥 글자를 한줄로 나오게만 하고 싶은 것이라면 이 방법을 사용하는 것도 해결 방법이 될 수 있지만 fixed와 scrollable을 선택적으로 사용하는 것에는 사용될 수 없다(사실 그런 기능은 원래 없다).</p>
<p>다시 정리하자면 Tab의 개수나 Tab의 Text의 길이가 유동적인 경우에 들어갈 수 있는 공간이 충분하다면 fixed를 사용하고 길다면 scrollable을 사용하고 싶은 경우에는 어떻게 해야할까? 이 문제를 해결해주는 오픈소스 <a href="https://github.com/h6ah4i/android-tablayouthelper">android-tablayouthelper</a>가 있다.</p>
<p><a href="https://github.com/h6ah4i/android-tablayouthelper">android-tablayouthelper</a>를 사용하면 Tab 들의 길이에 맞춰서 fixed와 scrollable을 자동 변경해 준다.</p>
<p>그런데 여기서도 문제가 있다. 이 라이브러리에서는 Tab의 길이를 내부적으로 계산해서 fixed와 scrollable를 선택해 주는데 fixed일때와 scrollable일때 가로 사이즈가 차이가 날 수 있다(내부적으로 스타일이 약간 다르게 지정되는 것으로 보인다). 특히 Tab의 Text가 여러줄이 될 수 있도록 되어 있으면 문제가 더 심하게 나타난다(경험적으로). 이 문제를 개선하려면 Tab의 Text를 무조건 한줄로 나오게 하면 된다. 아래의 예시를 보자.</p>
<p><strong>layout.xml</strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">android.support.design.widget.TabLayout</span>
        <span class="hljs-attr">android:id</span>=<span class="hljs-string">"@+id/tabs"</span>
        <span class="hljs-attr">style</span>=<span class="hljs-string">"@style/MyCustomTabLayout"</span>
        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">"match_parent"</span>
        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">"wrap_content"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">android.support.design.widget.TabLayout</span>&gt;</span></pre>
<p><strong>styles.xml</strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"MyCustomTabLayout"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"Widget.Design.TabLayout"</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"tabTextAppearance"</span>&gt;</span>@style/MyCustomTabTextAppearance<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"MyCustomTabTextAppearance"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"TextAppearance.Design.Tab"</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:singleLine"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:maxLines"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>
<p>위 방법으로 Tab의 Text를 1줄로 표시할 수 있다. 그런데 이 부분에 또 문제가 있다. Desigon Support Library 23.0.1 미만에서는 maxLines가 적용되지 않는다. 이유는 <a href="https://code.google.com/p/android/issues/detail?id=175516">TabLayout hard codes maxLines to 2</a>를 보면 알 수 있다. 예전 버전에서는 TabLayout 소스 코드에 MAX_TAB_TEXT_LINES가 상수로 2로 선언되어 있었다. 내용에 보면 v22.2.1에 수정되었다고 했다가 해결되지 않았고 v23.0.1에서 반영되었다. v23.0.1에서 해결된 것은 직접 확인했다. 관련된 부분이 필요해서 기존에 프로젝트에서 tablayouthelper를 상속받아 직접 처리 했었던 부분을 제거하고 정상 동작하는 것을 확인했다.</p>
<p>매번 이야기하는 것이지만 안드로이드는 정말 너무 엉망이다. 이런 문제들을 너무 많이 봤다.</p>
<p><strong>결론은 Desigon Support Library 23.0.1 이상을 사용한다면 문제들을 해결할 수 있다.</strong></p>
<p>자 마지막으로 한가지만 더 설명하겠다. 위의 예시는 TabLayout을 layout xml에서 직접 사용할 때 처리하는 방법이다. 그렇다면 소스 코드에서 TabLayout 인스턴스를 만들어야 할 경우는 어떻게 style을 적용할까? 현재 시점에서는 기본적으론 방법이 없다. 아래의 코드를 보자.</p>
<pre class="hljs java">TabLayout tabLayout = <span class="hljs-keyword">new</span> TabLayout(getContext());
<span class="hljs-keyword">try</span> {
    Class&lt;?&gt; clazz = Class.forName(TabLayout.class.getName());
    Field field = clazz.getDeclaredField(<span class="hljs-string">"mTabTextAppearance"</span>);
    field.setAccessible(<span class="hljs-keyword">true</span>);
    field.set(tabLayout, R.style.MyCustomTabTextAppearance);
} <span class="hljs-keyword">catch</span> (Exception e) {
    e.printStackTrace();
}</pre>
<p>그렇다 직접 지정할 방법이 없어서 reflection을 사용했다. 정말 이렇게까지 하고 싶지는 않아서 다른 방법들을 찾아봤지만 아직은 발견하지 못했다.</p>
<p>다만, 안드로이드 메뉴얼 중 <a href="http://developer.android.com/intl/ru/reference/android/view/View.html#View%28android.content.Context,%20android.util.AttributeSet,%20int,%20int%29">View</a>를 보면 <code>int defStyleRes</code>를 네 번째 인자로 가지는 생성자가 있는 것을 발견했다. 단, api 21 이후부터 추가된 생성자다. 예상하기론 defStyleRes를 지정할 수 있으면 MyCustomTabLayout를 지정해서 소스 코드에서도 스타일을 지정할 수 있을 것 같긴한데 TabLayout은 <code>public TabLayout (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)</code> 생성자를 제공하지 않는다(v23.0.1 기준).</p>
<p>TabLayout의 <code>public TabLayout(Context context, AttributeSet attrs, int defStyleAttr)</code> 생성자에 있는 내용을 보면 아래의 코드가 있다.</p>
<pre class="hljs java">TypedArray a = context.obtainStyledAttributes(attrs, styleable.TabLayout, defStyleAttr, style.Widget_Design_TabLayout);</pre>
<p>여기서 <code>style.Widget_Design_TabLayout</code> 대신 defStyleRes를 넘겨받아 넣어주도록만 해줘도 가능할 것 같은데 아직은 지원하지 않는 것이다.</p>
<p>어쨌든 현재 시점을 기준으로 해결 방법은 위의 예시처럼 reflection을 사용하는 방법뿐이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/12/bookmarklet/</id><title type="html">북마클릿(bookmarklet) 생성기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/12/bookmarklet/"/><published>2015-10-12T19:58:04+09:00</published><updated>2015-10-12T19:58:04+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[Bookmarklet은 브라우저에 새로운 기능을 추가하는 자바스크립트 명령을 포함한 브라우저 북마크다. 표준으로 정의된 형식은 없으나 일반적으로 아래와 같은 형태를 가진다. javascript:(function(){ //Statements returning a non-undefined type. })(); 북마클릿에 대해 상세히 설명할 내용은 없다. 북마클릿을 사용해서 할 수 있는 일은 무궁무진하다. 단, 브라우저에 사용자가 직접 추가해야하며 직접 북마크를 눌러 실행해야 한다. 예를들어 핀터레스트에서는 "Pin it" 기능을 The Pin It button 북마클릿으로 제공하고 있다. 마지막으로 북마클릿을 쉽게 만들수 있도록 도와주는 도구를 소개하고자 한다. Bookmarklet Generator 여러가지 도구가 있지만 이게 가장 직관적인 것 같다. 이 도구는 bookmarklet generator을 fork하여 jquery 버전만 수정했다. 기존 프로젝트는 사용중인 jquery의 버전이 낮아서 만들어진 북마크릿이 정상 동작하지 않는다. 향후 시간이 된다면 불편한 부분들을 개선하도록 하겠다.]]></summary><content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Bookmarklet">Bookmarklet</a>은 브라우저에 새로운 기능을 추가하는 자바스크립트 명령을 포함한 브라우저 북마크다.
표준으로 정의된 형식은 없으나 일반적으로 아래와 같은 형태를 가진다.</p>
<pre class="hljs javascript">javascript:(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-comment">//Statements returning a non-undefined type.</span>
})();</pre>
<p>북마클릿에 대해 상세히 설명할 내용은 없다. 북마클릿을 사용해서 할 수 있는 일은 무궁무진하다. 단, 브라우저에 사용자가 직접 추가해야하며 직접 북마크를 눌러 실행해야 한다. 예를들어 핀터레스트에서는 &quot;Pin it&quot; 기능을 <a href="https://about.pinterest.com/en/goodies">The Pin It button</a> 북마클릿으로 제공하고 있다.</p>
<p>마지막으로 북마클릿을 쉽게 만들수 있도록 도와주는 도구를 소개하고자 한다.</p>
<p><strong><a href="http://bookmarklet.asamaru.net/">Bookmarklet Generator</a></strong></p>
<p>여러가지 도구가 있지만 이게 가장 직관적인 것 같다. 이 도구는 <a href="http://web-development.cc/bookmarklet-generator/">bookmarklet generator</a>을 fork하여 jquery 버전만 수정했다. 기존 프로젝트는 사용중인 jquery의 버전이 낮아서 만들어진 북마크릿이 정상 동작하지 않는다. 향후 시간이 된다면 불편한 부분들을 개선하도록 하겠다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/12/java-dot-lang-dot-illegalstateexception-recursive-entry-to-executependingtransactions/</id><title type="html">java.lang.IllegalStateException: Recursive entry to executePendingTransactions 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/12/java-dot-lang-dot-illegalstateexception-recursive-entry-to-executependingtransactions/"/><published>2015-10-12T12:07:06+09:00</published><updated>2015-10-12T12:07:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 작업중 java.lang.IllegalStateException: Recursive entry to executePendingTransactions 오류를 만났다. 오류가 발생한 상황은 다음과 같다. 작업중 Fragment에서 하위에 또 다른 Fragment를 추가할 일이 생겼다. 이 작업 중에 하위에 추가되는 Fragment에서 executePendingTransactions() 함수를 호출하니 위 오류가 발생했다. 이해를 위해 처리 과정 중 문제가 발생한 부분만 적는다. FragmentManager ft = getActivity().getSupportFragmentManager(); ft.beginTransaction() .add(R.id.fragmentContainer, (Fragment) fragment) .commit(); ft.executePendingTransactions(); FragmentManager를 얻기 위해 현재 Fragment의 Activity를 가져와 getSupportFragmentManager()를 사용했다. 이 부분이 문제가 생기는 이유다. 이런 경우는 아래와 같이 처리할 수 있다. FragmentManager ft = getChildFragmentManager(); ft.beginTransaction() .add(R.id.fragmentContainer, (Fragment) fragment) .commit(); ft.executePendingTransactions(); getChildFragmentManager()를 사용해서 FragmentManager를 얻어서 처리하면 위 오류는 발생하지 않는다. 이와 관련된 설명은 Nested Fragments를 보면 된다. 4.2에 변경된 내용으로 나와 있지만 support library를 사용한다면 하위 호환이 가능한 상황이라 문제되지 않는다. 추가적으로 public abstract boolean executePendingTransactions()에 대해서 궁금하다면 프래그먼트 트랜잭션 수행)를 참고하면 된다. commit()을 호출해도 그 즉시 트랜잭션을 수행하지는 않습니다. 그보다는, 액티비티의 UI 스레드("주요" 스레드)를 스레드가 할 수 있는 한 빨리 이 트랜잭션을 수행하도록 일정을 예약하는 것에 가깝습니다. 하지만 필요한 경우 UI 스레드로부터 executePendingTransactions()를 호출하면 commit()이 제출한 트랜잭션을 즉시 실행할 수 있습니다. 트랜잭션이 다른 스레드의 작업에 대한 종속성이 아니라면 굳이 이렇게 해야만 하는 것은 아닙니다.]]></summary><content type="html"><![CDATA[<p>안드로이드 작업중 <code>java.lang.IllegalStateException: Recursive entry to executePendingTransactions</code> 오류를 만났다. 오류가 발생한 상황은 다음과 같다.</p>
<p>작업중 Fragment에서 하위에 또 다른 Fragment를 추가할 일이 생겼다. 이 작업 중에 하위에 추가되는 Fragment에서 <code>executePendingTransactions()</code> 함수를 호출하니 위 오류가 발생했다. 이해를 위해 처리 과정 중 문제가 발생한 부분만 적는다.</p>
<pre class="hljs java">FragmentManager ft = getActivity().getSupportFragmentManager();
ft.beginTransaction()
        .add(R.id.fragmentContainer, (Fragment) fragment)
        .commit();
ft.executePendingTransactions();</pre>
<p>FragmentManager를 얻기 위해 현재 Fragment의 Activity를 가져와 <code>getSupportFragmentManager()</code>를 사용했다. 이 부분이 문제가 생기는 이유다. 이런 경우는 아래와 같이 처리할 수 있다.</p>
<pre class="hljs java">FragmentManager ft = getChildFragmentManager();
ft.beginTransaction()
        .add(R.id.fragmentContainer, (Fragment) fragment)
        .commit();
ft.executePendingTransactions();</pre>
<p><code>getChildFragmentManager()</code>를 사용해서 FragmentManager를 얻어서 처리하면 위 오류는 발생하지 않는다.</p>
<p>이와 관련된 설명은 <a href="http://developer.android.com/intl/ru/about/versions/android-4.2.html#NestedFragments">Nested Fragments</a>를 보면 된다. 4.2에 변경된 내용으로 나와 있지만 support library를 사용한다면 하위 호환이 가능한 상황이라 문제되지 않는다.</p>
<p>추가적으로 <a href="http://developer.android.com/intl/ko/reference/android/app/FragmentManager.html#executePendingTransactions%28%29">public abstract boolean executePendingTransactions()</a>에 대해서 궁금하다면 <a href="http://developer.android.com/intl/ko/guide/components/fragments.html#Transactions">프래그먼트 트랜잭션 수행</a>)를 참고하면 된다.</p>
<blockquote>
<p>commit()을 호출해도 그 즉시 트랜잭션을 수행하지는 않습니다. 그보다는, 액티비티의 UI 스레드(&quot;주요&quot; 스레드)를 스레드가 할 수 있는 한 빨리 이 트랜잭션을 수행하도록 일정을 예약하는 것에 가깝습니다. 하지만 필요한 경우 UI 스레드로부터 executePendingTransactions()를 호출하면 commit()이 제출한 트랜잭션을 즉시 실행할 수 있습니다. 트랜잭션이 다른 스레드의 작업에 대한 종속성이 아니라면 굳이 이렇게 해야만 하는 것은 아닙니다.</p>
</blockquote>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/12/androidannotations-at-extra-with-intent-dot-flag-activity-clear-top-or-intent-dot-flag-activity-single-top/</id><title type="html">안드로이드에서 인턴트 호출시 Intent.FLAG_ACTIVITY_CLEAR_TOP 또는 Intent.FLAG_ACTIVITY_SINGLE_TOP 사용시 Androidannotations @Extra가 동작하지 않는 문제</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/12/androidannotations-at-extra-with-intent-dot-flag-activity-clear-top-or-intent-dot-flag-activity-single-top/"/><published>2015-10-12T10:14:56+09:00</published><updated>2015-10-12T10:14:56+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[Androidannotations를 사용하면 @Extra를 사용해서 인자를 받을 수 있다. 그런데 여기서 주의할 점이 있다. 인턴트 호출시 Intent.FLAG_ACTIVITY_CLEAR_TOP 또는 Intent.FLAG_ACTIVITY_SINGLE_TOP를 사용하게되면 인턴트가 이미 존재할 경우 @Extra가 동작하지 않는다. 이와 관련해서 Always call #onNewIntent(), even without @AfterExtras method(s)에서도 이슈가 진행중이다. 앞서 이야기한 문제와 이 이슈는 정확하게 같은 내용은 아니지만 동일한 이유로 발생하며 유사한 내용이라고도 볼 수 있다. 간단히 요약하자면 @Extra는 관련 처리를 setIntent()와 onCraete()에서 하는데 Intent.FLAG_ACTIVITY_CLEAR_TOP 또는 Intent.FLAG_ACTIVITY_SINGLE_TOP를 사용하게되면 인턴트가 존재할 경우 두 함수가 실행되지 않는다는 것이다(onCraete() 대신에 onNewIntent(Intent intent)가 호출이 되고 그 다음 onResume() 이 호출이 된다). 현재까지는 Androidannotations에서 해당 문제를 해결하지 않았으므로 그에 따른 대응이 필요하다(Androidannotations을 사용하지 않는 상황이라면 onResume에서 extra 값을 받아오도록 하면 당연히 문제가 없다). 현재로써는 특별한 방법이 없어 아래와 같이 onNewIntent()애서 직접 값을 받도록 처리했다. @Override protected void onNewIntent(Intent intent) { super.onNewIntent(intent); moveOwnLocation = intent.getBooleanExtra("EXTRA_NAME", false); } 하지만 이렇게 한다면 @Extra를 사용하는 의미가 없고 @AfterExtras도 정상적으로 사용할 수 없으므로 패치를 기다렸다가 코드를 다시 처리 해야할 것 같다.]]></summary><content type="html"><![CDATA[<p><a href="http://androidannotations.org/">Androidannotations</a>를 사용하면 <code>@Extra</code>를 사용해서 인자를 받을 수 있다. 그런데 여기서 주의할 점이 있다. 인턴트 호출시 <code>Intent.FLAG_ACTIVITY_CLEAR_TOP</code> 또는 <code>Intent.FLAG_ACTIVITY_SINGLE_TOP</code>를 사용하게되면 인턴트가 이미 존재할 경우 <code>@Extra</code>가 동작하지 않는다. 이와 관련해서 <a href="https://github.com/excilys/androidannotations/issues/1578">Always call #onNewIntent(), even without @AfterExtras method(s)</a>에서도 이슈가 진행중이다. 앞서 이야기한 문제와 이 이슈는 정확하게 같은 내용은 아니지만 동일한 이유로 발생하며 유사한 내용이라고도 볼 수 있다.</p>
<p>간단히 요약하자면 <code>@Extra</code>는 관련 처리를 <code>setIntent()</code>와 <code>onCraete()</code>에서 하는데 <code>Intent.FLAG_ACTIVITY_CLEAR_TOP</code> 또는 <code>Intent.FLAG_ACTIVITY_SINGLE_TOP</code>를 사용하게되면 인턴트가 존재할 경우 두 함수가 실행되지 않는다는 것이다(<code>onCraete()</code> 대신에 <code>onNewIntent(Intent intent)</code>가 호출이 되고 그 다음 onResume() 이 호출이 된다).</p>
<p>현재까지는 <a href="http://androidannotations.org/">Androidannotations</a>에서 해당 문제를 해결하지 않았으므로 그에 따른 대응이 필요하다(Androidannotations을 사용하지 않는 상황이라면 <code>onResume</code>에서 extra 값을 받아오도록 하면 당연히 문제가 없다).</p>
<p>현재로써는 특별한 방법이 없어 아래와 같이 <code>onNewIntent()</code>애서 직접 값을 받도록 처리했다.</p>
<pre class="hljs java"><span class="hljs-meta">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onNewIntent</span><span class="hljs-params">(Intent intent)</span> </span>{
    <span class="hljs-keyword">super</span>.onNewIntent(intent);
    moveOwnLocation = intent.getBooleanExtra(<span class="hljs-string">"EXTRA_NAME"</span>, <span class="hljs-keyword">false</span>);
}</pre>
<p>하지만 이렇게 한다면 <code>@Extra</code>를 사용하는 의미가 없고 <code>@AfterExtras</code>도 정상적으로 사용할 수 없으므로 패치를 기다렸다가 코드를 다시 처리 해야할 것 같다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/12/gitlab-ce-to-gitlab-dot-com/</id><title type="html">자체 설치한 gitlab-ce에서 gitlab.com으로 이전하다</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/12/gitlab-ce-to-gitlab-dot-com/"/><published>2015-10-12T08:26:40+09:00</published><updated>2015-10-12T08:26:40+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="git" label="git" /><summary><![CDATA[CentOS에 Gitlab 설치하기에 포스팅 했던 것 처럼 회사에서 git를 사용하기 위해 Gitlab CE 버전을 자체 서버에 설치해서 사용했다. 얼마 사용하지는 않았는데 속도가 너무 느린감이 있어서 옮기게 되었다. 사실 Gitlab을 설치한 서버는 사내에 다른 용도로 사용하던 서버로 dual lan이 설정되어 있는데 간혹 네트워크가 느려지는 문제가 있다. gateway를 지정해서 어느정도 문제를 해결해서 사용하긴 하지만 간혹 접속이 느려지는 경우가 있다. 사실 이 문제가 아니라 gitlab 자체가 많이 느린 느낌이다. 그래서 private project를 지원하는 bitbucket으로 옮겼다. 사실 github가 최고이긴하나 굳이 비용을 들여가면서 사용할 이유는 없기 때문이다(아직 다양한 기능을 활용하지 못하니). 그런데 여기서도 문제에 부딪혔다. 네트워크 속도가 느리다. 외국에서 서비스 하고 있다보니 어느 정도는 감안해야 하지만 그래도 너무 느렸다. clone 받는데 30kb/s 가 평균이었다. 그래서 어쩔 수 없이 다른 곳을 알아보았다. 그런데 gitlab에서도 무료 호스팅을 해주고 있었다. 전에 gitlab을 다운 받을 때는 자세히 보지 않아서 몰랐지만 이미 제공되고 있었던 것이다. 게대가 bitbucket과 같은 제약 사항도 없다. 앞으로도 유료화하지 않을 것이라는 안내도 되어있다. 그래서 다시 옮겼다. 옮기는 과정은 굳이 설명하지 않아도 될것 같다. gitlab에서 기능을 잘 제공하고 있다. bitbucket에서 자동 이전할 수 있는 기능을 제공한다(github, bitbucket, gitorious.org, google code, fogbugz, any repo by url을 제공한다). 결과는 나른 만족스럽다. 이전도 아주 단순하고 gitlab의 ce 버전 이상의 기능을 제공하며 속도도 그럭저럭 쓸만하다. 아주 쾌적한 속도는 아니지만 bitbucket에 비하면 아주 빠르다. 당분간은 gitlab을 사용하게 될 것 같다. 향후에 git의 다양한 기능을 제대로 활용하게되고 익숙해 진다면 github로 이전을 다시 할지는 모르겠으나 이 정도면 아직은 충분한 것 같다.]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2015/09/22/how-to-install-gitlib-on-centos/">CentOS에 Gitlab 설치하기</a>에 포스팅 했던 것 처럼 회사에서 git를 사용하기 위해 Gitlab CE 버전을 자체 서버에 설치해서 사용했다. 얼마 사용하지는 않았는데 속도가 너무 느린감이 있어서 옮기게 되었다. 사실 Gitlab을 설치한 서버는 사내에 다른 용도로 사용하던 서버로 dual lan이 설정되어 있는데 간혹 네트워크가 느려지는 문제가 있다. gateway를 지정해서 어느정도 문제를 해결해서 사용하긴 하지만 간혹 접속이 느려지는 경우가 있다. 사실 이 문제가 아니라 gitlab 자체가 많이 느린 느낌이다.</p>
<p>그래서 private project를 지원하는 <a href="https://bitbucket.org/">bitbucket</a>으로 옮겼다. 사실 github가 최고이긴하나 굳이 비용을 들여가면서 사용할 이유는 없기 때문이다(아직 다양한 기능을 활용하지 못하니). 그런데 여기서도 문제에 부딪혔다. 네트워크 속도가 느리다. 외국에서 서비스 하고 있다보니 어느 정도는 감안해야 하지만 그래도 너무 느렸다. clone 받는데 30kb/s 가 평균이었다. 그래서 어쩔 수 없이 다른 곳을 알아보았다.</p>
<p>그런데 <a href="https://gitlab.com/">gitlab</a>에서도 무료 호스팅을 해주고 있었다. 전에 gitlab을 다운 받을 때는 자세히 보지 않아서 몰랐지만 이미 제공되고 있었던 것이다. 게대가 bitbucket과 같은 제약 사항도 없다. 앞으로도 유료화하지 않을 것이라는 안내도 되어있다. 그래서 다시 옮겼다.</p>
<p>옮기는 과정은 굳이 설명하지 않아도 될것 같다. gitlab에서 기능을 잘 제공하고 있다. bitbucket에서 자동 이전할 수 있는 기능을 제공한다(github, bitbucket, gitorious.org, google code, fogbugz, any repo by url을 제공한다).</p>
<p>결과는 나른 만족스럽다. 이전도 아주 단순하고 gitlab의 ce 버전 이상의 기능을 제공하며 속도도 그럭저럭 쓸만하다. 아주 쾌적한 속도는 아니지만 bitbucket에 비하면 아주 빠르다.</p>
<p>당분간은 gitlab을 사용하게 될 것 같다. 향후에 git의 다양한 기능을 제대로 활용하게되고 익숙해 진다면 github로 이전을 다시 할지는 모르겠으나 이 정도면 아직은 충분한 것 같다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/08/change-centos-6-nic-i-slash-f-number-eth-star/</id><title type="html">NIC I/F 번호(eth*)를 변경</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/08/change-centos-6-nic-i-slash-f-number-eth-star/"/><published>2015-10-08T12:06:26+09:00</published><updated>2015-10-08T12:06:26+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[NIC 교체 및 추가 시 MAC 정보와 H/W 정보가 변경되어 /etc/sysconfig/network-script/ifcfg-ethX 파일이 증가한다. 이때 기존의 I/F 번호를 변경하려면 /etc/udev/rules.d/70-persistent-net.rules의 기존 정보 삭제 및 신규 I/F의 NAME을 변경하고 Rebooting 하면 된다.]]></summary><content type="html"><![CDATA[<p>NIC 교체 및 추가 시 MAC 정보와 H/W 정보가 변경되어 /etc/sysconfig/network-script/ifcfg-ethX 파일이 증가한다.
이때 기존의 I/F 번호를 변경하려면 /etc/udev/rules.d/70-persistent-net.rules의 기존 정보 삭제 및 신규 I/F의 NAME을 변경하고 Rebooting 하면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/08/centos-autofs/</id><title type="html">CentOS autofs</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/08/centos-autofs/"/><published>2015-10-08T12:04:05+09:00</published><updated>2015-10-08T12:04:05+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[설치 yum install -y autofs 설정 # 서버 부팅시 자동 시작 /sbin/chkconfig --add autofs /sbin/chkconfig --level 35 autofs on mount 설정 vi /etc/auto.master /home/nfsusers /etc/auto.users --timeout 60 vi /etc/auto.users yyj -rw,vers=3,udp,nolock 192.168.11.99:/czdev/vagrant/work/web service autofs restart 관리 # 데몬 재시작 service autofs restart # 상태 확인 service autofs status # 설정 다시 일기 service autofs reload Troubleshooting # 동작 로그 보기 service autofs stop automount -f -v]]></summary><content type="html"><![CDATA[<h2>설치</h2>
<pre class="hljs bash">yum install -y autofs</pre>
<h2>설정</h2>
<pre class="hljs bash"><span class="hljs-comment"># 서버 부팅시 자동 시작</span>
/sbin/chkconfig --add autofs
/sbin/chkconfig --level 35 autofs on</pre>
<h2>mount 설정</h2>
<pre class="hljs bash">vi /etc/auto.master

/home/nfsusers   /etc/auto.users --timeout 60

vi /etc/auto.users
yyj -rw,vers=3,udp,nolock   192.168.11.99:/czdev/vagrant/work/web

service autofs restart</pre>
<h2>관리</h2>
<pre class="hljs bash"><span class="hljs-comment"># 데몬 재시작</span>
service autofs restart

<span class="hljs-comment"># 상태 확인</span>
service autofs status

<span class="hljs-comment"># 설정 다시 일기</span>
service autofs reload</pre>
<h2>Troubleshooting</h2>
<pre class="hljs bash"><span class="hljs-comment"># 동작 로그 보기</span>
service autofs stop
automount -f -v</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/08/useful-commands-for-linux/</id><title type="html">리눅스 명령어 모음(Centos 6)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/08/useful-commands-for-linux/"/><published>2015-10-08T11:44:32+09:00</published><updated>2015-10-08T11:44:32+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[아래의 내용은 개인적으로 간혹 사용이 필요한 내용을 기록해 두기 위한 것으로 잘못된 정보일 수 있으니 참고만 하기 바란다. 시스템 로그 삭제 /etc/init.d/rsyslog restart sl 인증서 + apache 시작시 비밀번호 입력 제거 openssl rsa -in key.pem -out key.nopw.pem ssh 접속자 강제 로그아웃 # 602 : userid pkill -KILL -u 602 bash script에서 실행경로 구하기 cd ${0%/*} 2>/dev/null echo $PWD/${0##*/} 서버 네트워크 상태 확인 netstat -an|grep ":80"|awk '/tcp/ {print $6}'|sort -nr| uniq -c 아파치 동시접속자 수 확인 netstat -anp | grep :80 | grep ESTAB | wc -l 권한 파일 찾기 / 바꾸기 # root 권한 파일 찾기 find . -uid 0 # chown 특정 사용자만 변경 chown web.usergroup * -R --from=root.root chown --from=511 -R web account/ 포트 강제로 죽이기 sudo fuser -k -n tcp 444 실행 결과 숨기기(stdout, stderr) 명력어 > /dev/null 2>&1 검색된 파일만 vi 열기 vi -p $(find .|grep ModuleLink|grep -v '.svn'|grep -v CZFramework) 내용 일괄변환 find . -type f -name *.php -exec perl -pi -e 's|\\CZ\\CZFramework|\\CZF|g' {} \; ssh 비밀번호 없이 접속 local ssh-keygen -t rsa # scp /root/.ssh/id_rsa.pub root@[ip]:/root/.ssh/authorized_keys ssh-copy-id -i ~/.ssh/id_rsa.pub admin@[ip] 대상 서버(호스트)의 퍼미션 750 /home/admin/ 700 /home/admin/.ssh/ 600 /home/admin/.ssh/authorized_keys 배드블럭 검사 badblocks -v /dev/sda1 프로세스 실행경로 확인 # 프로세스 정보 ps ef ps aux # 프로세스 트리보기 pstree -aph #프로세스 상세보기 lsof -P 아파치 : 모든 페이지 요청시 동일페이지 노출 RewriteEngine On RewriteRule ^(.*)$ /target/index.html Mysql 사용자 관리 패턴 grant all privileges on 디비명.테이블명 to 사용자@'접속지 주소' identified by '암호' (with grant option); 권한 생성 # 원격지에서 root로 접속하는 경우 grant all privileges on *.* to root identified by '암호' with grant option; # '사용자'가 '암호'으로 모든 컴퓨터에서 모든 디비와 테이블에 접속하도록 허용 grant all privileges on *.* to 사용자 identified by '암호'; # '사용자'가 '암호'으로 localhost 에서 db1 디비의 table1에 접속하도록 허용 grant all privileges on root.db1 to 사용자@'localhost' identified by '암호'; # '사용자'가 '암호'으로 111.222.333.444 에서 db1 디비의 모든 테이블에 접속하도록 허용 grant all privileges on root.* to 사용자@'111.222.333.444' identified by '암호'; # '사용자'가 '암호'으로 111.222.333.0/24 에서 모든 디비와 테이블에 접속하도록 허용 grant all privileges on *.* to 사용자 @'111.222.333.%' identified by '암호'; 권한 제거 revoke all on 디비명.테이블명 from 사용자; 권한 적용 # 모든 명령 후에 항상 아래 명령을 실행해야 실제로 적용된다. flush privileges; Connection 상태 확인하기 SHOW FULL PROCESSLIST; Connection 수 확인하기 SHOW STATUS LIKE 'Threads_connected'; 동작중인 Connection 수 확인하기 SHOW STATUS LIKE 'Threads_running'; Connection 상태 확인하기 SHOW FULL PROCESSLIST;]]></summary><content type="html"><![CDATA[<p>아래의 내용은 개인적으로 간혹 사용이 필요한 내용을 기록해 두기 위한 것으로 잘못된 정보일 수 있으니 참고만 하기 바란다.</p>
<h3>시스템 로그 삭제</h3>
<pre class="hljs bash">/etc/init.d/rsyslog restart</pre>
<h3>sl 인증서 + apache 시작시 비밀번호 입력 제거</h3>
<pre class="hljs bash">openssl rsa -<span class="hljs-keyword">in</span> key.pem -out key.nopw.pem</pre>
<h3>ssh 접속자 강제 로그아웃</h3>
<pre class="hljs bash"><span class="hljs-comment"># 602 : userid</span>
pkill -KILL -u 602</pre>
<h3>bash script에서 실행경로 구하기</h3>
<pre class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">${0%/*}</span> 2&gt;/dev/null
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PWD</span>/<span class="hljs-variable">${0##*/}</span></pre>
<h3>서버 네트워크 상태 확인</h3>
<pre class="hljs bash">netstat -an|grep <span class="hljs-string">":80"</span>|awk <span class="hljs-string">'/tcp/ {print $6}'</span>|sort -nr| uniq -c</pre>
<h3>아파치 동시접속자 수 확인</h3>
<pre class="hljs bash">netstat -anp | grep :80 | grep ESTAB | wc -l</pre>
<h3>권한 파일 찾기 / 바꾸기</h3>
<pre class="hljs bash"><span class="hljs-comment"># root 권한 파일 찾기</span>
find . -uid 0

<span class="hljs-comment"># chown 특정 사용자만 변경</span>
chown web.usergroup * -R --from=root.root
chown --from=511 -R web account/</pre>
<h3>포트 강제로 죽이기</h3>
<pre class="hljs bash">sudo fuser -k -n tcp 444</pre>
<h3>실행 결과 숨기기(stdout, stderr)</h3>
<pre class="hljs bash">명력어 &gt; /dev/null 2&gt;&amp;1</pre>
<h3>검색된 파일만 vi 열기</h3>
<pre class="hljs bash">vi -p $(find .|grep ModuleLink|grep -v <span class="hljs-string">'.svn'</span>|grep -v CZFramework)</pre>
<h3>내용 일괄변환</h3>
<pre class="hljs bash">find . -<span class="hljs-built_in">type</span> f -name *.php -<span class="hljs-built_in">exec</span> perl -pi -e <span class="hljs-string">'s|\\CZ\\CZFramework|\\CZF|g'</span> {} \;</pre>
<h3>ssh 비밀번호 없이 접속</h3>
<h4>local</h4>
<pre class="hljs bash">ssh-keygen -t rsa
<span class="hljs-comment"># scp /root/.ssh/id_rsa.pub root@[ip]:/root/.ssh/authorized_keys</span>
ssh-copy-id -i ~/.ssh/id_rsa.pub admin@[ip]</pre>
<h4>대상 서버(호스트)의 퍼미션</h4>
<pre class="hljs bash">750 /home/admin/
700 /home/admin/.ssh/
600 /home/admin/.ssh/authorized_keys</pre>
<h3>배드블럭 검사</h3>
<pre class="hljs bash">badblocks -v /dev/sda1</pre>
<h3>프로세스 실행경로 확인</h3>
<pre class="hljs bash"><span class="hljs-comment"># 프로세스 정보</span>
ps ef
ps aux

<span class="hljs-comment"># 프로세스 트리보기</span>
pstree -aph

<span class="hljs-comment">#프로세스 상세보기</span>
lsof -P</pre>
<h3>아파치 :  모든 페이지 요청시 동일페이지 노출</h3>
<pre class="hljs apache"><span class="hljs-attribute"><span class="hljs-nomarkup">RewriteEngine</span></span> <span class="hljs-literal">On</span>
<span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> ^(.*)$ /target/index.html</pre>
<h2>Mysql 사용자 관리</h2>
<h4>패턴</h4>
<pre class="hljs sql"><span class="hljs-keyword">grant</span> all <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> 디비명.테이블명 <span class="hljs-keyword">to</span> 사용자@<span class="hljs-string">'접속지 주소'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'암호'</span> (<span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>);</pre>
<h4>권한 생성</h4>
<pre class="hljs sql"># 원격지에서 root로 접속하는 경우
<span class="hljs-keyword">grant</span> all <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> root <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'암호'</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;

# '사용자'가 '암호'으로 모든 컴퓨터에서 모든 디비와 테이블에 접속하도록 허용
<span class="hljs-keyword">grant</span> all <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> 사용자 <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'암호'</span>;

# '사용자'가 '암호'으로 localhost 에서 db1 디비의 table1에 접속하도록 허용
<span class="hljs-keyword">grant</span> all <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> root.db1 <span class="hljs-keyword">to</span> 사용자@<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'암호'</span>;

# '사용자'가 '암호'으로 111.222.333.444 에서 db1 디비의 모든 테이블에 접속하도록 허용
<span class="hljs-keyword">grant</span> all <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> root.* <span class="hljs-keyword">to</span> 사용자@<span class="hljs-string">'111.222.333.444'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'암호'</span>;

# '사용자'가 '암호'으로 111.222.333.0/24 에서 모든 디비와 테이블에 접속하도록 허용
<span class="hljs-keyword">grant</span> all <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> 사용자 @<span class="hljs-string">'111.222.333.%'</span> <span class="hljs-keyword">identified</span> <span class="hljs-keyword">by</span> <span class="hljs-string">'암호'</span>;</pre>
<h4>권한 제거</h4>
<pre class="hljs sql"><span class="hljs-keyword">revoke</span> all <span class="hljs-keyword">on</span> 디비명.테이블명 <span class="hljs-keyword">from</span> 사용자;</pre>
<h4>권한 적용</h4>
<pre class="hljs sql"># 모든 명령 후에 항상 아래 명령을 실행해야 실제로 적용된다.
<span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;</pre>
<h4>Connection 상태 확인하기</h4>
<pre class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">FULL</span> <span class="hljs-keyword">PROCESSLIST</span>;</pre>
<h4>Connection 수 확인하기</h4>
<pre class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">STATUS</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'Threads_connected'</span>;</pre>
<h4>동작중인 Connection 수 확인하기</h4>
<pre class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">STATUS</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'Threads_running'</span>;</pre>
<h4>Connection 상태 확인하기</h4>
<pre class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">FULL</span> <span class="hljs-keyword">PROCESSLIST</span>;</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/08/change-xcode-project-app-name/</id><title type="html">Xcode 프로젝트 앱 이름 변경</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/08/change-xcode-project-app-name/"/><published>2015-10-08T11:41:12+09:00</published><updated>2015-10-08T11:41:12+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[앱 이름 변경 xxx-Info.plist 선택 Bundle display name 선택 새로운 이름으로 변경 끝]]></summary><content type="html"><![CDATA[<p>앱 이름 변경</p>
<ol>
<li>xxx-Info.plist 선택</li>
<li>Bundle display name 선택</li>
<li>새로운 이름으로 변경</li>
<li>끝</li>
</ol>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/06/punycode/</id><title type="html">퓨니코드(Punycode)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/06/punycode/"/><published>2015-10-06T11:49:03+09:00</published><updated>2015-10-06T11:49:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[퓨니코드(Punycode)는 유니코드 문자열을 호스트 이름에서 허용된 문자만으로 인코딩하는 방법으로, RFC 3492에 기술되어 있다. 퓨니코드는 유니코드가 지원하는 모든 언어로 국제화 도메인을 쓸 수 있게 한 IDNA의 일부로, 변환은 전적으로 웹 브라우저와 같은 클라이언트에서 이루어진다. 출처 : https://ko.wikipedia.org/wiki/%ED%93%A8%EB%8B%88%EC%BD%94%EB%93%9C 쉽게 얘기해서 기본적으로 도메인은 ASCII 문자 집합만 사용 가능한데 국제화 도메인을 사용하기 위해서 퓨니코드라는 것이 필요하다는 것이다. 퓨니코드는 xn-- 접두어를 통해 구분된다. 예를들어 "wiki백과.한국" 도메인은 IDNA에서 xn--wiki-ei4p334e.xn--3e0b707e로 변환된다. 국제화 도메인과 퓨니코드를 상호 변환을 테스트 해보려면 KISA 퓨니코드 변환기를 사용할 수 있다. 이 외에도 퓨니코드 변환기로 검색하면 많은 변환기들이 존재한다. 사실 이 퓨니코드에 대한 소개를 하는 이유는 일반적인 상황에서는 직접 처리해야할 일이 없지만 특수한 경우에는 이것이 필요할 수 있기 때문이다. 예를들어 이런 경우가 있다. IE8 이하에서는 한글도메인과 퓨니코드로 변환된 도메인을 다르게 인식하여 AJAX 사용시 cross domain 문제를 일으킬 수 있다. 이런 경우엔 퓨니코드를 한글 도메인으로 다시 변환하여 URL을 사용해야 문제를 막을 수 있다. 따라서 퓨니코드에 대한 이해와 변환 방법에 대해 알아두면 도움이 될 것이다. 아래는 변환에 바로 사용할 수 있는 몇가지 오픈소스 프로젝트를 안내한다. 이외에도 조금만 검색하면 많은 오픈소스를 찾을 수 있다. punycode.js php-punycode Punycode-Cocoa Punycode.java]]></summary><content type="html"><![CDATA[<blockquote>
<p>퓨니코드(Punycode)는 유니코드 문자열을 호스트 이름에서 허용된 문자만으로 인코딩하는 방법으로, <a href="https://tools.ietf.org/html/rfc3492">RFC 3492</a>에 기술되어 있다. 퓨니코드는 유니코드가 지원하는 모든 언어로 국제화 도메인을 쓸 수 있게 한 IDNA의 일부로, 변환은 전적으로 웹 브라우저와 같은 클라이언트에서 이루어진다.
출처 : <a href="https://ko.wikipedia.org/wiki/%ED%93%A8%EB%8B%88%EC%BD%94%EB%93%9C">https://ko.wikipedia.org/wiki/%ED%93%A8%EB%8B%88%EC%BD%94%EB%93%9C</a></p>
</blockquote>
<p>쉽게 얘기해서 기본적으로 도메인은 <a href="http://www.asciitable.com/">ASCII 문자</a> 집합만 사용 가능한데 국제화 도메인을 사용하기 위해서 퓨니코드라는 것이 필요하다는 것이다. 퓨니코드는 <code>xn--</code> 접두어를 통해 구분된다. 예를들어 &quot;wiki백과.한국&quot; 도메인은 IDNA에서 xn--wiki-ei4p334e.xn--3e0b707e로 변환된다.</p>
<p>국제화 도메인과 퓨니코드를 상호 변환을 테스트 해보려면 <a href="http://krnic.or.kr/jsp/resources/domainInfo/punyCode.jsp">KISA 퓨니코드 변환기</a>를 사용할 수 있다. 이 외에도 퓨니코드 변환기로 검색하면 많은 변환기들이 존재한다.</p>
<p>사실 이 퓨니코드에 대한 소개를 하는 이유는 일반적인 상황에서는 직접 처리해야할 일이 없지만 특수한 경우에는 이것이 필요할 수 있기 때문이다. 예를들어 이런 경우가 있다. IE8 이하에서는 한글도메인과 퓨니코드로 변환된 도메인을 다르게 인식하여 AJAX 사용시 cross domain 문제를 일으킬 수 있다. 이런 경우엔 퓨니코드를 한글 도메인으로 다시 변환하여 URL을 사용해야 문제를 막을 수 있다.</p>
<p>따라서 퓨니코드에 대한 이해와 변환 방법에 대해 알아두면 도움이 될 것이다. 아래는 변환에 바로 사용할 수 있는 몇가지 오픈소스 프로젝트를 안내한다. 이외에도 조금만 검색하면 많은 오픈소스를 찾을 수 있다.</p>
<ul>
<li><a href="https://github.com/bestiejs/punycode.js">punycode.js</a></li>
<li><a href="https://github.com/true/php-punycode">php-punycode</a></li>
<li><a href="https://github.com/Wevah/Punycode-Cocoa">Punycode-Cocoa</a></li>
<li><a href="http://opensource.apple.com/source/ChatServer/ChatServer-262/libidn/java/gnu/inet/encoding/Punycode.java">Punycode.java</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/06/resolving-the-functionality-not-enabled-message-in-google-apps/</id><title type="html">Google Apps Gmail에서 '다른 주소에서 메일 보내기' 사용시 'Functionality Not Enabled.' 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/06/resolving-the-functionality-not-enabled-message-in-google-apps/"/><published>2015-10-06T08:01:10+09:00</published><updated>2015-10-06T08:01:10+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[지금은 구글 앱스의 무료 계정이 없지만 예전에는 사용자 50명 이내에 한해서 무료 계정을 제공했다. 그때 나의 개인 계정과 회사 계정을 등록해 두어서 현재까지 무료로 사용중이다. 요즘에는 다음 등에서도 비슷한 서비스를 제공하지만 역시 구글이 훨씬 다양한 기능을 제공한다. 우선 나는 내 개인 계정 한군데에 다른 메일 서비스에 수신되는 모든 메일이 포워딩 되도록 사용중이다. 따라서 메일 발수신을 모두 내 계정에서 한다. 수신은 당연히 문제가 없지만 발신의 경우 특정 이메일을 사용해서 발신해야 하는 경우가 있다. 예를들어 회사 업무차 메일을 보낼때는 회사 메일 주소로 메일을 보내야 하는 것이다. 어런 경우에 유용하게 사용할 수 있는 것이 "다른 주소에서 메일 보내기" 기능이다. 이 기능은 "환경설정 > 계정"에서 찾을 수 있다. "다른 주소에서 메일 보내기"에서 발신을 위한 메일 주소를 등록해두면 메일 발신시 해당 메일 주소로 메일을 보낼 수 있다. 그런데 어제 새로운 메일 주소를 등록하려고 하니 "Functionality Not Enabled." 오류 메시지와 함께 정상 등록되지 않았다. 현재 등록하려던 곳은 일반 GMail이 아닌 Google Apps에서 제공하는 Gmail 이다. 분명 예전에는 새로운 메일 주소를 등록하면 해당 주소로 확인 메일을 보내주고 메일 내용에 들어있는 확인 코드를 넣으면 간단히 등록되었었다. 구글의 정책이 변경된 것으로 보인다. 어쨌든 등록을 해야해서 오류를 해결하는 방법을 찾아보았다. 일반 Gmail을 사용하는 경우라면 위 오류가 나타나지 않았을 것이니 이 단계가 필요없다. 단, 다른 구글 계정의 이메일 주소를 연결하는 방법을 보려면 조금 더 아래의 내용을 참고하자. Send mail as - Add another email address you own - "Functionality not enabled" message. Resolving The Functionality Not Enabled Message In Google Apps 위 링크들을 참고하면 이 문제를 쉽게 해결할 수 있다. 요약하자면 아래와 같다. 다시말하지만 이 경우는 Google Apps인 경우다. 도메인 관리(Google Apps 관리) 페이지로 접속한다. 사용자 > 해당 사용자 선택 > 사용하도록 설정된 Google Apps > GMail로 들어간다. 고급 설정 > 최종 사용자 액세스 > 사용자별 발신 게이트웨이 허용을 체크한다. 일단 이렇게 설정하면 위 오류 메시지는 해결된다. 단, 이 변경이 적용되는데 어느 정도 시간이 걸린다. 저장시에 안내 메시지가 나오는데 내 경우는 1시간 이내라고 안내가 나왔었다. 자.. 그래서 1시간 후 다시 시도. Gmail로 돌아와서 "다른 이메일 주소 추가"를 누르면 기존과 동일하게 아래의 화면이 나타난다. 원하는 이름과 이메일 주소를 입력하고 "다음 단계"를 선택. 그럼 아래와 같이 오류 대신 SMTP 서버 정보를 넣으라는 화면이 나온다(기존에는 이 단계가 없었다). 이 단계에서는 SMTP 서버 정보를 넣으면 되는데 추가하려는 이메일 주소가 Gmail 또는 Google Apps Gmail 인 경우라면 SMTP 서버에 "smtp.gmail.com", 포트는 587을 선택하고 아이디와 비밀번호를 입력하면 된다. 단, 아이디(사용자 이름)은 abc@gmail.com 등과 같이 이메일 풀주소를 넣어야 한다. 조금더 상세한 정보는 How To Use Google's SMTP Server를 참고하자. 단, 여기서는 포트를 465로 안내하고 있지만 내 경우는 587을 사용해야 했다. 마지막 확인 코드 입력 화면이다. 정상적으로 정보가 확인된다면 입력한 이메일 주소로 확인 코드를 보내주는데 이 확인 코드를 아래의 화면에 입력하면 등록이 완료된다. 확인 코드를 정상적으로 입력했다면 추가한 이메일이 보일 것이다. 이제부터는 메일을 보낼때 이 이메일 주소를 사용할 수 있다.]]></summary><content type="html"><![CDATA[<p>지금은 구글 앱스의 무료 계정이 없지만 예전에는 사용자 50명 이내에 한해서 무료 계정을 제공했다. 그때 나의 개인 계정과 회사 계정을 등록해 두어서 현재까지 무료로 사용중이다. 요즘에는 다음 등에서도 비슷한 서비스를 제공하지만 역시 구글이 훨씬 다양한 기능을 제공한다.</p>
<p>우선 나는 내 개인 계정 한군데에 다른 메일 서비스에 수신되는 모든 메일이 포워딩 되도록 사용중이다. 따라서 메일 발수신을 모두 내 계정에서 한다. 수신은 당연히 문제가 없지만 발신의 경우 특정 이메일을 사용해서 발신해야 하는 경우가 있다. 예를들어 회사 업무차 메일을 보낼때는 회사 메일 주소로 메일을 보내야 하는 것이다. 어런 경우에 유용하게 사용할 수 있는 것이 &quot;다른 주소에서 메일 보내기&quot; 기능이다. 이 기능은 &quot;환경설정 &gt; 계정&quot;에서 찾을 수 있다.</p>
<p>&quot;다른 주소에서 메일 보내기&quot;에서 발신을 위한 메일 주소를 등록해두면 메일 발신시 해당 메일 주소로 메일을 보낼 수 있다.</p>
<p>그런데 어제 새로운 메일 주소를 등록하려고 하니 &quot;Functionality Not Enabled.&quot; 오류 메시지와 함께 정상 등록되지 않았다. 현재 등록하려던 곳은 일반 GMail이 아닌 Google Apps에서 제공하는 Gmail 이다. 분명 예전에는 새로운 메일 주소를 등록하면 해당 주소로 확인 메일을 보내주고 메일 내용에 들어있는 확인 코드를 넣으면 간단히 등록되었었다.</p>
<p>구글의 정책이 변경된 것으로 보인다. 어쨌든 등록을 해야해서 오류를 해결하는 방법을 찾아보았다. 일반 Gmail을 사용하는 경우라면 위 오류가 나타나지 않았을 것이니 이 단계가 필요없다. 단, 다른 구글 계정의 이메일 주소를 연결하는 방법을 보려면 조금 더 아래의 내용을 참고하자.</p>
<ul>
<li><a href="https://productforums.google.com/forum/#!topic/apps/z1IS-ocp6yk">Send mail as - Add another email address you own - &quot;Functionality not enabled&quot; message.</a></li>
<li><a href="https://www.youtube.com/watch?v=kK7QpOWCz_A">Resolving The Functionality Not Enabled Message In Google Apps</a></li>
</ul>
<p>위 링크들을 참고하면 이 문제를 쉽게 해결할 수 있다. 요약하자면 아래와 같다. 다시말하지만 이 경우는 Google Apps인 경우다.</p>
<ul>
<li>도메인 관리(Google Apps 관리) 페이지로 접속한다.</li>
<li>사용자 &gt; 해당 사용자 선택 &gt; 사용하도록 설정된 Google Apps &gt; GMail로 들어간다.</li>
<li>고급 설정 &gt; 최종 사용자 액세스 &gt; 사용자별 발신 게이트웨이 허용을 체크한다.</li>
</ul>
<p>일단 이렇게 설정하면 위 오류 메시지는 해결된다. 단, 이 변경이 적용되는데 어느 정도 시간이 걸린다. 저장시에 안내 메시지가 나오는데 내 경우는 1시간 이내라고 안내가 나왔었다.</p>
<p>자.. 그래서 1시간 후 다시 시도.</p>
<p>Gmail로 돌아와서 &quot;다른 이메일 주소 추가&quot;를 누르면 기존과 동일하게 아래의 화면이 나타난다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-06-resolving-the-functionality-not-enabled-message-in-google-apps-1.png" alt="다른 이메일 주소를 추가하세요" width="494" height="279" /></p>
<p>원하는 이름과 이메일 주소를 입력하고 &quot;다음 단계&quot;를 선택. 그럼 아래와 같이 오류 대신 SMTP 서버 정보를 넣으라는 화면이 나온다(기존에는 이 단계가 없었다).</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-06-resolving-the-functionality-not-enabled-message-in-google-apps-2.png" alt="다른 이메일 주소를 추가하세요" width="496" height="290" /></p>
<p>이 단계에서는 SMTP 서버 정보를 넣으면 되는데 추가하려는 이메일 주소가 Gmail 또는 Google Apps Gmail 인 경우라면 SMTP 서버에 &quot;smtp.gmail.com&quot;, 포트는 587을 선택하고 아이디와 비밀번호를 입력하면 된다. 단, 아이디(사용자 이름)은 abc@gmail.com 등과 같이 이메일 풀주소를 넣어야 한다. 조금더 상세한 정보는 <a href="https://www.digitalocean.com/community/tutorials/how-to-use-google-s-smtp-server">How To Use Google's SMTP Server</a>를 참고하자. 단, 여기서는 포트를 465로 안내하고 있지만 내 경우는 587을 사용해야 했다.</p>
<p>마지막 확인 코드 입력 화면이다. 정상적으로 정보가 확인된다면 입력한 이메일 주소로 확인 코드를 보내주는데 이 확인 코드를 아래의 화면에 입력하면 등록이 완료된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-10-06-resolving-the-functionality-not-enabled-message-in-google-apps-3.png" alt="다른 이메일 주소를 추가하세요" width="552" height="285" /></p>
<p>확인 코드를 정상적으로 입력했다면 추가한 이메일이 보일 것이다. 이제부터는 메일을 보낼때 이 이메일 주소를 사용할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/05/swift-2-dot-1-try-catch/</id><title type="html">Swift 2.1에서의 오류 처리(do try catch)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/05/swift-2-dot-1-try-catch/"/><published>2015-10-05T21:19:47+09:00</published><updated>2015-10-05T21:19:47+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><category term="swift" label="swift" /><summary><![CDATA[애플이 2015.06.08.에 '세계개발자회의(WWDC) 2015'에서 스위프트 2.0을 공개 했지만 최근 다시 iOS 작업을 시작하면서 이제서야 swift 2.0을 사용하게 되었다. 그런데 이제 2.0 보려고 하는데 벌써 Xcode 7.1 beta 2가 나오면서 swift 2.1이 공개되었다. 오늘은 swift의 내용 중에서 오류 처리에 관련된 내용을 살펴보고자 한다. 아래의 내용은 Swift 2.0 の try, catch ファーストインプレッション와 공식 메뉴얼(Error Handling)의 내용을 참고하여 정리한 것이다. 공식 메뉴얼(Error Handling)에서는 swift 2.0이 아닌 swift 2.1로 안내하고 있으니 그냥 2.1을 기준으로 살펴보고자 한다(확실하지는 않지만 대충 알아본 결과 2.1에서의 변화에 Error Handling 부분은 포함되지 않는 것 같다). 메뉴얼의 내용을 빌어 Error Handling의 필요성에 대해 설명하자면 다음과 같다. 일부 작업은 항상 완전한 실행을 보증하거나 유용한 출력을 생성하지 않는다. Optionals를 사용하여 값의 유무를 전달함으로써 작업의 성공/실패 유무를 판단할 수 있지만 작업이 실패 할 때 코드가 적절히 응답 할 수 있도록 함으로써 오류의 원인을 이해하는 데 도움을 줄 수 있다. 예를들어 디스크상의 파일을 읽어서 처리하는 작업에서 발생할 수 있는 오류는 '존재하지 않는 파일', '읽기 권한 없음', '호환되는 형식이 아님' 등의 여러가지가 존재할 수 있다. 이러한 경우처럼 오류의 원인에 따라 다양한 대응이 필요한 경우라면 오류의 정보를 정확히 전달함으로써 오류를 복구하는데 도움을 줄 수 있다. Swift 2.0 이후부터는 Error Handling(런타임 상에서 오류를 발견하여 응답하고 복구하는 과정)을 위해 throwing, catching, propagating(전파), 런타임에서 복구할 수 있는 오류를 조작(manipulating recoverable errors at runtime) 할 수 있도록 지원한다. 오류의 사용자 정의 Swift에서는 ErrorType protocol라는 빈 protocol을 사용하여 오류를 표시한다. enum VendingMachineError: ErrorType { case InvalidSelection case InsufficientFunds(coinsNeeded: Int) case OutOfStock } 이렇게 생성된 Error는 아래와 같이 발생시킬 수 있다. throw VendingMachineError.InsufficientFunds(coinsNeeded: 5) 조금더 자세히 보자면 ErrorType은 enum으로 정의될 수 있다. Swift에서 try, catch는 항상 ErrorType를 throw 한다. Java에서는 오류 유형을 클래스로 취급하므로 종류마다 클래스를 정의하므로 개수가 많아지고 오류를 처리에 따라 묶어서 관리하기 어렵다. 하지만 Swift의 ErrorType는 관련 오류를 enum으로 정리할 수 있기 때문에 정리가 쉽다. 예들들어 String을 Int로 변환하는 함수를 가정할 경우 발생할 수 있는 오류는 String이 nil이거나 숫자로 변환될 수 없는 문자열일 수 있다. 이를 ErrorType 로 구현하면 다음과 같이 정의할 수 있다. enum ParseError : ErrorType { case Nil // nil 인 경우 case IllegalFormat // Int로 해석 할 수 없었던 경우 } ErrorType는 오류의 종류를 나타낼뿐만 아니라 오류 정보를 함께 가질 수 있다. 위의 예시에서 IllegalFormat 오류일 때 해당 String이 무엇이었는지를 함께 넘겨주고 싶을 수 있다. enum ParseError : ErrorType { case Nil case IllegalFormat (String) } 이 방식의 좋은 점은 오류의 종류에 따라 다른 유형의 인자를 가질 수 있어 Type Safe하게 값을 얻어낼 수 있다는 것이다. switch error { case. Nil : print ( "The text is nil.") case. IllegalFormat (let string) : print ( "Illegal format : \ (string)") } Objective-C의 NSError에서도 오류 정보를 가질 수 있지만, Type 정보가 사라져 버리기 때문에 Type Safe 하지 않다. 오류 제어 오류가 발생하면 문제를 보정하는 방법을 시도하거나 사용자에게 알림으로써 오류를 처리해야 한다. Swift에서는 오류를 처리 할 수있는 네 가지 방법이 있다. Throwing Functions을 이용한 오류 전파(Propagating Errors Using Throwing Functions) Do-Catch를 이용한 오류 처리(Handling Errors Using Do-Catch) Error를 Optional Values로 변환(Converting Errors to Optional Values) 오류 전파 비활성화(Disabling Error Propagation) 각각의 처리 방법을 하나씩 알아보자. Throwing Functions을 이용한 오류 전파(Propagating Errors Using Throwing Functions) 함수, 메소드, 초기화시에 오류가 throw될 수 있음을 표시하려면 함수 선언시 인자 뒤에 throws 키워드를 추가할 수 있다. 아래의 예시를 보면 이해가 편할 것이다. func canThrowErrors() throws -> String func cannotThrowErrors() -> String canThrowErrors 함수 내부에서 오류가 발생하면 이 오류는 자신을 호출한 함수로 전파된다. Do-Catch를 이용한 오류 처리(Handling Errors Using Do-Catch) 오류를 제어 하고자하는 코드의 블록이 있을 경우는 do-catch를 사용할 수 있다. 문법 상의 차이는 있지만 다른 언어에서의 try-catch와 유사하므로 코드를 보는 것이 이해가 더 빠를 것으로 생각된다. var vendingMachine = VendingMachine() vendingMachine.coinsDeposited = 8 do { try buyFavoriteSnack("Alice", vendingMachine: vendingMachine) } catch VendingMachineError.InvalidSelection { print("Invalid Selection.") } catch VendingMachineError.OutOfStock { print("Out of Stock.") } catch VendingMachineError.InsufficientFunds(let coinsNeeded) { print("Insufficient funds. Please insert an additional \(coinsNeeded) coins.") } buyFavoriteSnack 함수는 try에 의해 호출되며 오류가 발생하면 오류의 타입에 해당하는 catch에 의해 제어된다. 다른 예시를 하나 살펴보자. do { let number = try toInt (label. text) // number를 사용한 처리 } catch ParseError. Nil { print ( "The text is nil.") } catch ParseError. IllegalFormat (let string) { print ( "Illegal format : \ (string)") } Error를 Optional Values로 변환(Converting Errors to Optional Values) try? 구문을 이용해서 오류를 optional value로 변환할 수 있다. 예를들어 어떤 값을 반환하는 함수가 있을 때 내부에서 오류가 발생하면 오류를 무시하고 nil이 반환된 것과 동일하게 처리할 수 있다. 역시 아래의 예시를 보자. func someThrowingFunction() throws -> Int { // ... } let x = try? someThrowingFunction() let y: Int? do { y = try someThrowingFunction() } catch { y = nil } 아래와 같이 사용하는 것도 가능하다. func fetchData() -> Data? { if let data = try? fetchDataFromDisk() { return data } if let data = try? fetchDataFromServer() { return data } return nil } 오류 전파 비활성화(Disabling Error Propagation) 실질적으로는 런타임시 오류를 발생시키지 않는 throwing 함수나 메서드를 사용할 경우가 있다. 이 경우 try!(forced-try)를 사용하여 throwing 함수나 메서드를 호출할 수 있다. try!를 사용하여 throwing 함수나 메서드를 호출하면 error 전파가 비활성화 되고 에러를 던지지 않는 런타임 assertion 안에서의 호출로 랩핑된다. 따라서 만일 실제로 에러가 thrown 되면, 런타임 에러를 만나게 된다. 아래의 예시를 보자. let photo = try! loadImage("./Resources/John Appleseed.jpg") loadImage(_:) 함수의 경우 Resources에서 이미지를 호출하고 있으므로 런타임 상에서 오류가 발생하지 않는다(빌드시 이미지가 포함되므로). 이런 경우 try!를 사용하여 오류 제어를 줄일 수 있다. Clean-Up Actions 지정 (Specifying Clean-Up Actions) defer를 사용하면 코드의 실행이 코드 블럭을 벗어나기 전에 일련의 작업을 수행하게 할 수 있다. 다시말해 오류의 발생과 무관하게 반드시 실행되어야할 작업을 지정할 수 있다. 다른 언어의 finally와 유사하다고 볼 수 있다. 예를들면 열려진 파일을 닫거나, 수동으로 할당된 메모리를 해제하는 작업이 될 수 있다. defer 내부의 구문은 제어흐픔을 벗어나게 할 수 있는 break, return, throw 등을 포함해서는 안된다. 또한 defer는 기술된 순서의 역순으로 실행된다. 다시말해 마지막에 있는 defer부터 실행되어 올라온다. 아래의 예시는 파일을 열어서 내용을 읽어서 처리하며 defer를 사용하여 오류 발생과 무관하게 파일을 닫아주도록 하고 있다. func processFile(filename:String) throws { if exists(filename) { let file = open(filename) defer { close(file) } while let line = try file.readline() { // work with the file } // close(file) is called here, at the end of the scope. } }]]></summary><content type="html"><![CDATA[<p>애플이 2015.06.08.에 <a href="https://developer.apple.com/swift/blog/?id=29">'세계개발자회의(WWDC) 2015'에서 스위프트 2.0을 공개</a> 했지만 최근 다시 iOS 작업을 시작하면서 이제서야 swift 2.0을 사용하게 되었다. 그런데 이제 2.0 보려고 하는데 벌써 Xcode 7.1 beta 2가 나오면서 swift 2.1이 공개되었다.</p>
<p>오늘은 swift의 내용 중에서 오류 처리에 관련된 내용을 살펴보고자 한다. 아래의 내용은 <a href="http://qiita.com/koher/items/0c60b13ff0fe93220210">Swift 2.0 の try, catch ファーストインプレッション</a>와 공식 메뉴얼(<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html">Error Handling</a>)의 내용을 참고하여 정리한 것이다.</p>
<p>공식 메뉴얼(<a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html">Error Handling</a>)에서는 swift 2.0이 아닌 swift 2.1로 안내하고 있으니 그냥 2.1을 기준으로 살펴보고자 한다(확실하지는 않지만 대충 알아본 결과 2.1에서의 변화에 Error Handling 부분은 포함되지 않는 것 같다).</p>
<p>메뉴얼의 내용을 빌어 Error Handling의 필요성에 대해 설명하자면 다음과 같다.</p>
<blockquote>
<p>일부 작업은 항상 완전한 실행을 보증하거나 유용한 출력을 생성하지 않는다. Optionals를 사용하여 값의 유무를 전달함으로써 작업의 성공/실패 유무를 판단할 수 있지만 작업이 실패 할 때 코드가 적절히 응답 할 수 있도록 함으로써 오류의 원인을 이해하는 데 도움을 줄 수 있다. 예를들어 디스크상의 파일을 읽어서 처리하는 작업에서 발생할 수 있는 오류는 '존재하지 않는 파일', '읽기 권한 없음', '호환되는 형식이 아님' 등의 여러가지가 존재할 수 있다. 이러한 경우처럼 오류의 원인에 따라 다양한 대응이 필요한 경우라면 오류의 정보를 정확히 전달함으로써 오류를 복구하는데 도움을 줄 수 있다.</p>
</blockquote>
<p><strong>Swift 2.0 이후부터는 Error Handling(런타임 상에서 오류를 발견하여 응답하고 복구하는 과정)을 위해 throwing, catching, propagating(전파), 런타임에서 복구할 수 있는 오류를 조작(manipulating recoverable errors at runtime) 할 수 있도록 지원한다.</strong></p>
<h2>오류의 사용자 정의</h2>
<p>Swift에서는 ErrorType protocol라는 빈 protocol을 사용하여 오류를 표시한다.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">VendingMachineError</span>: <span class="hljs-title">ErrorType</span> </span>{
    <span class="hljs-keyword">case</span> <span class="hljs-type">InvalidSelection</span>
    <span class="hljs-keyword">case</span> <span class="hljs-type">InsufficientFunds</span>(coinsNeeded: <span class="hljs-type">Int</span>)
    <span class="hljs-keyword">case</span> <span class="hljs-type">OutOfStock</span>
}</pre>
<p>이렇게 생성된 Error는 아래와 같이 발생시킬 수 있다.</p>
<pre class="hljs swift"><span class="hljs-keyword">throw</span> <span class="hljs-type">VendingMachineError</span>.<span class="hljs-type">InsufficientFunds</span>(coinsNeeded: <span class="hljs-number">5</span>)</pre>
<p>조금더 자세히 보자면 ErrorType은 enum으로 정의될 수 있다. Swift에서 try, catch는 항상 ErrorType를 throw 한다. Java에서는 오류 유형을 클래스로 취급하므로 종류마다 클래스를 정의하므로 개수가 많아지고 오류를 처리에 따라 묶어서 관리하기 어렵다. 하지만 Swift의 ErrorType는 관련 오류를 enum으로 정리할 수 있기 때문에 정리가 쉽다.</p>
<p>예들들어 String을 Int로 변환하는 함수를 가정할 경우 발생할 수 있는 오류는 String이 nil이거나 숫자로 변환될 수 없는 문자열일 수 있다. 이를 ErrorType 로 구현하면 다음과 같이 정의할 수 있다.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ParseError</span> : <span class="hljs-title">ErrorType</span> </span>{
    <span class="hljs-keyword">case</span> <span class="hljs-type">Nil</span> <span class="hljs-comment">// nil 인 경우</span>
    <span class="hljs-keyword">case</span> <span class="hljs-type">IllegalFormat</span> <span class="hljs-comment">// Int로 해석 할 수 없었던 경우</span>
}</pre>
<p>ErrorType는 오류의 종류를 나타낼뿐만 아니라 오류 정보를 함께 가질 수 있다.
위의 예시에서 IllegalFormat 오류일 때 해당 String이 무엇이었는지를 함께 넘겨주고 싶을 수 있다.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ParseError</span> : <span class="hljs-title">ErrorType</span> </span>{
    <span class="hljs-keyword">case</span> <span class="hljs-type">Nil</span>
    <span class="hljs-keyword">case</span> <span class="hljs-type">IllegalFormat</span> (<span class="hljs-type">String</span>)
}</pre>
<p>이 방식의 좋은 점은 오류의 종류에 따라 다른 유형의 인자를 가질 수 있어 Type Safe하게 값을 얻어낼 수 있다는 것이다.</p>
<pre class="hljs swift"><span class="hljs-keyword">switch</span> error {
    <span class="hljs-keyword">case</span>. <span class="hljs-type">Nil</span> :
        <span class="hljs-built_in">print</span> ( <span class="hljs-string">"The text is nil."</span>)
    <span class="hljs-keyword">case</span>. <span class="hljs-type">IllegalFormat</span> (<span class="hljs-keyword">let</span> string) :
        <span class="hljs-built_in">print</span> ( <span class="hljs-string">"Illegal format : \ (string)"</span>)
}</pre>
<p>Objective-C의 NSError에서도 오류 정보를 가질 수 있지만, Type 정보가 사라져 버리기 때문에 Type Safe 하지 않다.</p>
<h2>오류 제어</h2>
<p>오류가 발생하면 문제를 보정하는 방법을 시도하거나 사용자에게 알림으로써 오류를 처리해야 한다. Swift에서는 오류를 처리 할 수있는 네 가지 방법이 있다.</p>
<ul>
<li>Throwing Functions을 이용한 오류 전파(Propagating Errors Using Throwing Functions)</li>
<li>Do-Catch를 이용한 오류 처리(Handling Errors Using Do-Catch)</li>
<li>Error를 Optional Values로 변환(Converting Errors to Optional Values)</li>
<li>오류 전파 비활성화(Disabling Error Propagation)</li>
</ul>
<p>각각의 처리 방법을 하나씩 알아보자.</p>
<h3>Throwing Functions을 이용한 오류 전파(Propagating Errors Using Throwing Functions)</h3>
<p>함수, 메소드, 초기화시에 오류가 throw될 수 있음을 표시하려면 함수 선언시 인자 뒤에 throws 키워드를 추가할 수 있다. 아래의 예시를 보면 이해가 편할 것이다.</p>
<pre class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">canThrowErrors</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">throws</span> -&gt; <span class="hljs-type">String</span>

<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cannotThrowErrors</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-type">String</span></pre>
<p><code>canThrowErrors</code> 함수 내부에서 오류가 발생하면 이 오류는 자신을 호출한 함수로 전파된다.</p>
<h3>Do-Catch를 이용한 오류 처리(Handling Errors Using Do-Catch)</h3>
<p>오류를 제어 하고자하는 코드의 블록이 있을 경우는 do-catch를 사용할 수 있다. 문법 상의 차이는 있지만 다른 언어에서의 try-catch와 유사하므로 코드를 보는 것이 이해가 더 빠를 것으로 생각된다.</p>
<pre class="hljs swift"><span class="hljs-keyword">var</span> vendingMachine = <span class="hljs-type">VendingMachine</span>()
vendingMachine.coinsDeposited = <span class="hljs-number">8</span>
<span class="hljs-keyword">do</span> {
    <span class="hljs-keyword">try</span> buyFavoriteSnack(<span class="hljs-string">"Alice"</span>, vendingMachine: vendingMachine)
} <span class="hljs-keyword">catch</span> <span class="hljs-type">VendingMachineError</span>.<span class="hljs-type">InvalidSelection</span> {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Invalid Selection."</span>)
} <span class="hljs-keyword">catch</span> <span class="hljs-type">VendingMachineError</span>.<span class="hljs-type">OutOfStock</span> {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Out of Stock."</span>)
} <span class="hljs-keyword">catch</span> <span class="hljs-type">VendingMachineError</span>.<span class="hljs-type">InsufficientFunds</span>(<span class="hljs-keyword">let</span> coinsNeeded) {
    <span class="hljs-built_in">print</span>(<span class="hljs-string">"Insufficient funds. Please insert an additional <span class="hljs-subst">\(coinsNeeded)</span> coins."</span>)
}</pre>
<p><code>buyFavoriteSnack</code> 함수는 try에 의해 호출되며 오류가 발생하면 오류의 타입에 해당하는 catch에 의해 제어된다. 다른 예시를 하나 살펴보자.</p>
<pre class="hljs swift"><span class="hljs-keyword">do</span> {
    <span class="hljs-keyword">let</span> number = <span class="hljs-keyword">try</span> toInt (label. text)
    <span class="hljs-comment">// number를 사용한 처리</span>
} <span class="hljs-keyword">catch</span> <span class="hljs-type">ParseError</span>. <span class="hljs-type">Nil</span> {
    <span class="hljs-built_in">print</span> ( <span class="hljs-string">"The text is nil."</span>)
} <span class="hljs-keyword">catch</span> <span class="hljs-type">ParseError</span>. <span class="hljs-type">IllegalFormat</span> (<span class="hljs-keyword">let</span> string) {
    <span class="hljs-built_in">print</span> ( <span class="hljs-string">"Illegal format : \ (string)"</span>)
}</pre>
<h3>Error를 Optional Values로 변환(Converting Errors to Optional Values)</h3>
<p><code>try?</code> 구문을 이용해서 오류를 optional value로 변환할 수 있다. 예를들어 어떤 값을 반환하는 함수가 있을 때 내부에서 오류가 발생하면 오류를 무시하고 nil이 반환된 것과 동일하게 처리할 수 있다. 역시 아래의 예시를 보자.</p>
<pre class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">someThrowingFunction</span><span class="hljs-params">()</span></span> <span class="hljs-keyword">throws</span> -&gt; <span class="hljs-type">Int</span> {
    <span class="hljs-comment">// ...</span>
}

<span class="hljs-keyword">let</span> x = <span class="hljs-keyword">try</span>? someThrowingFunction()
<span class="hljs-keyword">let</span> y: <span class="hljs-type">Int</span>?
<span class="hljs-keyword">do</span> {
    y = <span class="hljs-keyword">try</span> someThrowingFunction()
} <span class="hljs-keyword">catch</span> {
    y = <span class="hljs-literal">nil</span>
}</pre>
<p>아래와 같이 사용하는 것도 가능하다.</p>
<pre class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fetchData</span><span class="hljs-params">()</span></span> -&gt; <span class="hljs-type">Data</span>? {
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">try</span>? fetchDataFromDisk() { <span class="hljs-keyword">return</span> data }
    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">try</span>? fetchDataFromServer() { <span class="hljs-keyword">return</span> data }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>
}</pre>
<h3>오류 전파 비활성화(Disabling Error Propagation)</h3>
<p>실질적으로는 런타임시 오류를 발생시키지 않는 throwing 함수나 메서드를 사용할 경우가 있다. 이 경우 <code>try!</code>(forced-try)를 사용하여 throwing 함수나 메서드를 호출할 수 있다. <code>try!</code>를 사용하여 throwing 함수나 메서드를 호출하면 error 전파가 비활성화 되고 에러를 던지지 않는 런타임
assertion 안에서의 호출로 랩핑된다. 따라서 만일 실제로 에러가 thrown 되면, 런타임 에러를 만나게 된다. 아래의 예시를 보자.</p>
<pre class="hljs swift"><span class="hljs-keyword">let</span> photo = <span class="hljs-keyword">try</span>! loadImage(<span class="hljs-string">"./Resources/John Appleseed.jpg"</span>)</pre>
<p><code>loadImage(_:)</code> 함수의 경우 Resources에서 이미지를 호출하고 있으므로 런타임 상에서 오류가 발생하지 않는다(빌드시 이미지가 포함되므로). 이런 경우 <code>try!</code>를 사용하여 오류 제어를 줄일 수 있다.</p>
<h2>Clean-Up Actions 지정 (Specifying Clean-Up Actions)</h2>
<p><code>defer</code>를 사용하면 코드의 실행이 코드 블럭을 벗어나기 전에 일련의 작업을 수행하게 할 수 있다. 다시말해 오류의 발생과 무관하게 반드시 실행되어야할 작업을 지정할 수 있다. 다른 언어의 finally와 유사하다고 볼 수 있다. 예를들면 열려진 파일을 닫거나, 수동으로 할당된 메모리를 해제하는 작업이 될 수 있다.</p>
<p>defer 내부의 구문은 제어흐픔을 벗어나게 할 수 있는 break, return, throw 등을 포함해서는 안된다. 또한 defer는 기술된 순서의 역순으로 실행된다. 다시말해 마지막에 있는 defer부터 실행되어 올라온다.</p>
<p>아래의 예시는 파일을 열어서 내용을 읽어서 처리하며 defer를 사용하여 오류 발생과 무관하게 파일을 닫아주도록 하고 있다.</p>
<pre class="hljs swift"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">processFile</span><span class="hljs-params">(filename:String)</span></span> <span class="hljs-keyword">throws</span> {
    <span class="hljs-keyword">if</span> exists(filename) {
        <span class="hljs-keyword">let</span> file = <span class="hljs-keyword">open</span>(filename)
        <span class="hljs-keyword">defer</span> {
            close(file)
        }

        <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> line = <span class="hljs-keyword">try</span> file.readline() {
            <span class="hljs-comment">// work with the file</span>
        }
        <span class="hljs-comment">// close(file) is called here, at the end of the scope.</span>
    }
}</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/05/google-play-services-and-dex-method-limits/</id><title type="html">Google Play services 와 DEX method limits 문제</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/05/google-play-services-and-dex-method-limits/"/><published>2015-10-05T20:49:03+09:00</published><updated>2015-10-05T20:49:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[Android Gradle 빌드 속도 높이기에서 잠시 언급했던 multidex와 Google Play services와의 관계에 대해서 잠시 이야기 하고자 한다. 그 당시에도 설명했던 것과 같이 multidex를 사용해야 하는 상황은 가급적 피하는 것이 좋다. 하지만 오래된 버전의 Google Play services를 사용하면 65K이상의 method를 사용하게될 확률이 높다. 이 라이브러리에서 사용하고 있는 method의 수가 상당하기 때문에 proguard를 통해 사용하지 않는 함수를 제거하지 않는 이상 65K개를 넘어설 확률이 높은 것이다(대부분 여러가지 라이브러리를 사용해서 앱을 개발하므로). 문제는 proguard를 적용하게되면 빌드 시간이 증가하기 때문에 작업시 불편하다. Android Gradle 빌드 속도 높이기에서 언급 했던 내용들을 적용한다면 상당한 속도 향상을 가져올 수 있지만 그래도 1초라도 시간을 줄이는 것이 좋지 않은가? 하루에 한번만 빌드할 것도 아닌데. 이와 관련해서는 Google Play services and DEX method limits라는 글에 잘 설명하고 있다. Google Play services의 버전을 6.5(2015.10.05. 기준 8.1이 최신) 이상 사용한다면 아래와 같이 필요한 부분만 적용함으로써 이 문제를 어느 정도 해결할 수 있다(6.5 미만에서는 무조건 통째로 불러서 사용할 수 밖에 없다). // 기존 compile 'com.google.android.gms:play-services:6.5.87' // 6.5 이후 compile 'com.google.android.gms:play-services-maps:6.5.87' compile 'com.google.android.gms:play-services-base:6.5.87' Setting Up Google Play Services 문서를 참고하면 사용할 수 있는 전체 목록을 확인할 수 있다. 아래는 현재 기준 목록이다. Google Play services API Description in build.gradle Google+ com.google.android.gms:play-services-plus:8.1.0 Google Account Login com.google.android.gms:play-services-identity:8.1.0 Google Actions, Base Client Library com.google.android.gms:play-services-base:8.1.0 Google App Indexing com.google.android.gms:play-services-appindexing:8.1.0 Google App Invites com.google.android.gms:play-services-appinvite:8.1.0 Google Analytics com.google.android.gms:play-services-analytics:8.1.0 Google Cast com.google.android.gms:play-services-cast:8.1.0 Google Cloud Messaging com.google.android.gms:play-services-gcm:8.1.0 Google Drive com.google.android.gms:play-services-drive:8.1.0 Google Fit com.google.android.gms:play-services-fitness:8.1.0 Google Location, Activity Recognition, and Places com.google.android.gms:play-services-location:8.1.0 Google Maps com.google.android.gms:play-services-maps:8.1.0 Google Mobile Ads com.google.android.gms:play-services-ads:8.1.0 Mobile Vision com.google.android.gms:play-services-vision:8.1.0 Google Nearby com.google.android.gms:play-services-nearby:8.1.0 Google Panorama Viewer com.google.android.gms:play-services-panorama:8.1.0 Google Play Game services com.google.android.gms:play-services-games:8.1.0 SafetyNet c m.google.android.gms:play-services-safetynet:8.1.0 Google Wallet com.google.android.gms:play-services-wallet:8.1.0 Android Wear com.google.android.gms:play-services-wearable:8.1.0 어쨌든 java라는 언어의 특성상 method의 수가 많을 수 밖에 없는데 65K limit은 최초의 설계부터 잘못된 것이 아닌가? 하는 생각이다.]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2015/09/29/android-gradle-builds-speed-up/">Android Gradle 빌드 속도 높이기</a>에서 잠시 언급했던 multidex와 <a href="https://developers.google.com/android/guides/overview">Google Play services</a>와의 관계에 대해서 잠시 이야기 하고자 한다. 그 당시에도 설명했던 것과 같이 multidex를 사용해야 하는 상황은 가급적 피하는 것이 좋다. 하지만 오래된 버전의 Google Play services를 사용하면 65K이상의 method를 사용하게될 확률이 높다. 이 라이브러리에서 사용하고 있는 method의 수가 상당하기 때문에 proguard를 통해 사용하지 않는 함수를 제거하지 않는 이상 65K개를 넘어설 확률이 높은 것이다(대부분 여러가지 라이브러리를 사용해서 앱을 개발하므로). 문제는 proguard를 적용하게되면 빌드 시간이 증가하기 때문에 작업시 불편하다. <a href="https://blog.asamaru.net/2015/09/29/android-gradle-builds-speed-up/">Android Gradle 빌드 속도 높이기</a>에서 언급 했던 내용들을 적용한다면 상당한 속도 향상을 가져올 수 있지만 그래도 1초라도 시간을 줄이는 것이 좋지 않은가? 하루에 한번만 빌드할 것도 아닌데.</p>
<p>이와 관련해서는 <a href="http://android-developers.blogspot.kr/2014/12/google-play-services-and-dex-method.html">Google Play services and DEX method limits</a>라는 글에 잘 설명하고 있다.</p>
<p>Google Play services의 버전을 6.5(2015.10.05. 기준 8.1이 최신) 이상 사용한다면 아래와 같이 필요한 부분만 적용함으로써 이 문제를 어느 정도 해결할 수 있다(6.5 미만에서는 무조건 통째로 불러서 사용할 수 밖에 없다).</p>
<pre><code>// 기존
compile 'com.google.android.gms:play-services:6.5.87'

// 6.5 이후
compile 'com.google.android.gms:play-services-maps:6.5.87'
compile 'com.google.android.gms:play-services-base:6.5.87'</code></pre>
<p><a href="https://developers.google.com/android/guides/setup">Setting Up Google Play Services</a> 문서를 참고하면 사용할 수 있는 전체 목록을 확인할 수 있다. 아래는 현재 기준 목록이다.</p>
<table>
<thead>
<tr>
<th>Google Play services API</th>
<th>Description in build.gradle</th>
</tr>
</thead>
<tbody>
<tr>
<td>Google+</td>
<td>com.google.android.gms:play-services-plus:8.1.0</td>
</tr>
<tr>
<td>Google Account Login</td>
<td>com.google.android.gms:play-services-identity:8.1.0</td>
</tr>
<tr>
<td>Google Actions, Base Client Library</td>
<td>com.google.android.gms:play-services-base:8.1.0</td>
</tr>
<tr>
<td>Google App Indexing</td>
<td>com.google.android.gms:play-services-appindexing:8.1.0</td>
</tr>
<tr>
<td>Google App Invites</td>
<td>com.google.android.gms:play-services-appinvite:8.1.0</td>
</tr>
<tr>
<td>Google Analytics</td>
<td>com.google.android.gms:play-services-analytics:8.1.0</td>
</tr>
<tr>
<td>Google Cast</td>
<td>com.google.android.gms:play-services-cast:8.1.0</td>
</tr>
<tr>
<td>Google Cloud Messaging</td>
<td>com.google.android.gms:play-services-gcm:8.1.0</td>
</tr>
<tr>
<td>Google Drive</td>
<td>com.google.android.gms:play-services-drive:8.1.0</td>
</tr>
<tr>
<td>Google Fit</td>
<td>com.google.android.gms:play-services-fitness:8.1.0</td>
</tr>
<tr>
<td>Google Location, Activity Recognition, and Places</td>
<td>com.google.android.gms:play-services-location:8.1.0</td>
</tr>
<tr>
<td>Google Maps</td>
<td>com.google.android.gms:play-services-maps:8.1.0</td>
</tr>
<tr>
<td>Google Mobile Ads</td>
<td>com.google.android.gms:play-services-ads:8.1.0</td>
</tr>
<tr>
<td>Mobile Vision</td>
<td>com.google.android.gms:play-services-vision:8.1.0</td>
</tr>
<tr>
<td>Google Nearby</td>
<td>com.google.android.gms:play-services-nearby:8.1.0</td>
</tr>
<tr>
<td>Google Panorama Viewer</td>
<td>com.google.android.gms:play-services-panorama:8.1.0</td>
</tr>
<tr>
<td>Google Play Game services</td>
<td>com.google.android.gms:play-services-games:8.1.0</td>
</tr>
<tr>
<td>SafetyNet</td>
<td>c m.google.android.gms:play-services-safetynet:8.1.0</td>
</tr>
<tr>
<td>Google Wallet</td>
<td>com.google.android.gms:play-services-wallet:8.1.0</td>
</tr>
<tr>
<td>Android Wear</td>
<td>com.google.android.gms:play-services-wearable:8.1.0</td>
</tr>
</tbody>
</table>
<p>어쨌든 java라는 언어의 특성상 method의 수가 많을 수 밖에 없는데 65K limit은 최초의 설계부터 잘못된 것이 아닌가? 하는 생각이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/05/no-more-stringbyappendingpathcomponent-in-xcode-7/</id><title type="html">Swift 2 : 'lastPathComponent' is unavailable: Use lastPathComponent on NSURL instead. 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/05/no-more-stringbyappendingpathcomponent-in-xcode-7/"/><published>2015-10-05T13:14:55+09:00</published><updated>2015-10-05T13:14:55+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><category term="swift" label="swift" /><summary><![CDATA[Swift 2 : Binary operator '|' cannot be applied to two 'UIViewAutoresizing' operands 오류 해결에 이어 Swift 2로 넘어가면서 만난 또 다른 오류. 'lastPathComponent' is unavailable: Use lastPathComponent on NSURL instead. 관련해서 찾아보니 No more stringByAppendingPathComponent in Xcode 7 beta 5?라는 글이 있었다. 내용을 보니 해당 함수가 없어져서 다른 방법으로 수정해야 한다는 것. 내용중 tieferbegabt라는 사람이 간단히 해결할 수 있는 코드를 올려 놓았다. extension String { var lastPathComponent: String { get { return (self as NSString).lastPathComponent } } var pathExtension: String { get { return (self as NSString).pathExtension } } var stringByDeletingLastPathComponent: String { get { return (self as NSString).stringByDeletingLastPathComponent } } var stringByDeletingPathExtension: String { get { return (self as NSString).stringByDeletingPathExtension } } var pathComponents: [String] { get { return (self as NSString).pathComponents } } func stringByAppendingPathComponent(path: String) -> String { let nsSt = self as NSString return nsSt.stringByAppendingPathComponent(path) } func stringByAppendingPathExtension(ext: String) -> String? { let nsSt = self as NSString return nsSt.stringByAppendingPathExtension(ext) } } Objective-C의 category나 swift의 extension은 개인적으로 정말 좋은 기능이라고 생각한다. 하지만 위의 코드는 임시로 사용하고 가급적 위 코드의 내용을 참고해서 오류가 나는 부분을 직접 변경하는 것을 권장하고 싶다. 어짜피 나중에는 애플에서 권장하는대로 코딩을 해야할테니 정확한 방법을 익히도록 처리하는 것이 좋다는 얘기다. 아래는 내가 사용한 코드의 일부를 예시로 남긴다. // before let filename = file.lastPathComponent.stringByDeletingPathExtension // after let filename = ((file as NSString).lastPathComponent as NSString).stringByDeletingPathExtension]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2015/10/05/binary-operator-cannot-be-applied-to-two-uiviewautoresizing-operands/">Swift 2 : Binary operator '|' cannot be applied to two 'UIViewAutoresizing' operands 오류 해결</a>에 이어 Swift 2로 넘어가면서 만난 또 다른 오류.</p>
<pre><code>'lastPathComponent' is unavailable: Use lastPathComponent on NSURL instead.</code></pre>
<p>관련해서 찾아보니 <a href="https://forums.developer.apple.com/thread/13580">No more stringByAppendingPathComponent in Xcode 7 beta 5?</a>라는 글이 있었다. 내용을 보니 해당 함수가 없어져서 다른 방법으로 수정해야 한다는 것. 내용중 <a href="https://forums.developer.apple.com/people/tieferbegabt">tieferbegabt</a>라는 사람이 간단히 해결할 수 있는 코드를 올려 놓았다.</p>
<pre class="hljs swift"><span class="hljs-class"><span class="hljs-keyword">extension</span> <span class="hljs-title">String</span> </span>{
    <span class="hljs-keyword">var</span> lastPathComponent: <span class="hljs-type">String</span> {
        <span class="hljs-keyword">get</span> {
            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">self</span> <span class="hljs-keyword">as</span> <span class="hljs-type">NSString</span>).lastPathComponent
        }
    }
    <span class="hljs-keyword">var</span> pathExtension: <span class="hljs-type">String</span> {
        <span class="hljs-keyword">get</span> {
            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">self</span> <span class="hljs-keyword">as</span> <span class="hljs-type">NSString</span>).pathExtension
        }
    }
    <span class="hljs-keyword">var</span> stringByDeletingLastPathComponent: <span class="hljs-type">String</span> {
        <span class="hljs-keyword">get</span> {
            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">self</span> <span class="hljs-keyword">as</span> <span class="hljs-type">NSString</span>).stringByDeletingLastPathComponent
        }
    }
    <span class="hljs-keyword">var</span> stringByDeletingPathExtension: <span class="hljs-type">String</span> {
        <span class="hljs-keyword">get</span> {
            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">self</span> <span class="hljs-keyword">as</span> <span class="hljs-type">NSString</span>).stringByDeletingPathExtension
        }
    }
    <span class="hljs-keyword">var</span> pathComponents: [<span class="hljs-type">String</span>] {
        <span class="hljs-keyword">get</span> {
            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">self</span> <span class="hljs-keyword">as</span> <span class="hljs-type">NSString</span>).pathComponents
        }
    }
    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stringByAppendingPathComponent</span><span class="hljs-params">(path: String)</span></span> -&gt; <span class="hljs-type">String</span> {
        <span class="hljs-keyword">let</span> nsSt = <span class="hljs-keyword">self</span> <span class="hljs-keyword">as</span> <span class="hljs-type">NSString</span>
        <span class="hljs-keyword">return</span> nsSt.stringByAppendingPathComponent(path)
    }

    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">stringByAppendingPathExtension</span><span class="hljs-params">(ext: String)</span></span> -&gt; <span class="hljs-type">String</span>? {
        <span class="hljs-keyword">let</span> nsSt = <span class="hljs-keyword">self</span> <span class="hljs-keyword">as</span> <span class="hljs-type">NSString</span>
        <span class="hljs-keyword">return</span> nsSt.stringByAppendingPathExtension(ext)
    }
}</pre>
<p>Objective-C의 category나 swift의 extension은 개인적으로 정말 좋은 기능이라고 생각한다. 하지만 위의 코드는 임시로 사용하고 가급적 위 코드의 내용을 참고해서 오류가 나는 부분을 직접 변경하는 것을 권장하고 싶다. 어짜피 나중에는 애플에서 권장하는대로 코딩을 해야할테니 정확한 방법을 익히도록 처리하는 것이 좋다는 얘기다.</p>
<p>아래는 내가 사용한 코드의 일부를 예시로 남긴다.</p>
<pre class="hljs swift"><span class="hljs-comment">// before</span>
<span class="hljs-keyword">let</span> filename = file.lastPathComponent.stringByDeletingPathExtension
<span class="hljs-comment">// after</span>
<span class="hljs-keyword">let</span> filename = ((file <span class="hljs-keyword">as</span> <span class="hljs-type">NSString</span>).lastPathComponent <span class="hljs-keyword">as</span> <span class="hljs-type">NSString</span>).stringByDeletingPathExtension</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/05/binary-operator-cannot-be-applied-to-two-uiviewautoresizing-operands/</id><title type="html">Swift 2 : Binary operator '|' cannot be applied to two 'UIViewAutoresizing' operands 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/05/binary-operator-cannot-be-applied-to-two-uiviewautoresizing-operands/"/><published>2015-10-05T12:44:59+09:00</published><updated>2015-10-05T12:44:59+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><category term="swift" label="swift" /><summary><![CDATA[이번에 iOS 작업중 Swift 2로 변경을 하면서 아래와 같은 오류를 만났다. Binary operator '|' cannot be applied to two 'UIViewAutoresizing' operands 사실 이 부분말고도 여러가지 오류가 나왔지만 기본적으로 swift 버전업을 도와주는 헬프 기능 등을 통해 어느 정도는 쉽게 고칠 수 있었다. 어쨌든 이 오류는 아래의 코드를 보면 해결 방법을 바로 알 수 있다. let view = UIView(frame: CGRect(x: 0, y: 0, width: 100, height: 100)) addSubview(view) // Swift 2.0 미만 view.autoresizingMask = UIViewAutoresizing.FlexibleWidth | UIViewAutoresizing.FlexibleHeight // Swift 2.0 이상 view.autoresizingMask = [.FlexibleWidth, .FlexibleHeight] 이와 유사하게 UIUserNotificationType의 경우도 아래와 같이 수정이 필요하다. // Swift 2.0 미만 let settings = UIUserNotificationSettings(forTypes: UIUserNotificationType.Alert | UIUserNotificationType.Badge, categories: nil) // Swift 2.0 이상 let settings = UIUserNotificationSettings(forTypes: [.Alert, .Badge], categories: nil) UIApplication.sharedApplication().registerUserNotificationSettings(settings) if settings.types.contains(.Badge) { // whatever }]]></summary><content type="html"><![CDATA[<p>이번에 iOS 작업중 Swift 2로 변경을 하면서 아래와 같은 오류를 만났다.</p>
<pre><code>Binary operator '|' cannot be applied to two 'UIViewAutoresizing' operands</code></pre>
<p>사실 이 부분말고도 여러가지 오류가 나왔지만 기본적으로 swift 버전업을 도와주는 헬프 기능 등을 통해 어느 정도는 쉽게 고칠 수 있었다.</p>
<p>어쨌든 이 오류는 아래의 코드를 보면 해결 방법을 바로 알 수 있다.</p>
<pre class="hljs swift"><span class="hljs-keyword">let</span> view = <span class="hljs-type">UIView</span>(frame: <span class="hljs-type">CGRect</span>(x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>, width: <span class="hljs-number">100</span>, height: <span class="hljs-number">100</span>))
addSubview(view)
<span class="hljs-comment">// Swift 2.0 미만</span>
view.autoresizingMask = <span class="hljs-type">UIViewAutoresizing</span>.<span class="hljs-type">FlexibleWidth</span> | <span class="hljs-type">UIViewAutoresizing</span>.<span class="hljs-type">FlexibleHeight</span>
<span class="hljs-comment">// Swift 2.0 이상</span>
view.autoresizingMask = [.<span class="hljs-type">FlexibleWidth</span>, .<span class="hljs-type">FlexibleHeight</span>]</pre>
<p>이와 유사하게 UIUserNotificationType의 경우도 아래와 같이 수정이 필요하다.</p>
<pre class="hljs swift"><span class="hljs-comment">// Swift 2.0 미만</span>
<span class="hljs-keyword">let</span> settings = <span class="hljs-type">UIUserNotificationSettings</span>(forTypes: <span class="hljs-type">UIUserNotificationType</span>.<span class="hljs-type">Alert</span> | <span class="hljs-type">UIUserNotificationType</span>.<span class="hljs-type">Badge</span>, categories: <span class="hljs-literal">nil</span>)
<span class="hljs-comment">// Swift 2.0 이상</span>
<span class="hljs-keyword">let</span> settings = <span class="hljs-type">UIUserNotificationSettings</span>(forTypes: [.<span class="hljs-type">Alert</span>, .<span class="hljs-type">Badge</span>], categories: <span class="hljs-literal">nil</span>)
<span class="hljs-type">UIApplication</span>.sharedApplication().registerUserNotificationSettings(settings)
<span class="hljs-keyword">if</span> settings.types.<span class="hljs-built_in">contains</span>(.<span class="hljs-type">Badge</span>) {
    <span class="hljs-comment">// whatever</span>
}</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/05/using-applicationidsuffix-with-androidannotations/</id><title type="html">Gradle applicationIdSuffix 사용시 AndroidAnnotations 설정</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/05/using-applicationidsuffix-with-androidannotations/"/><published>2015-10-05T10:05:11+09:00</published><updated>2015-10-05T10:05:11+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[Gradle DSL method not found: 'packageNameSuffix()' 오류 해결에서 오류 해결 방법을 안내하면서 언급했던 applicationIdSuffix를 사용시 유의사항이 있다. applicationId가 debug 모드에서 변경됨에 따라 관련된 부분에서 문제가 일어날 수 있다는 것이다. 나의 경우는 AndroidAnnotations을 함께 사용하는 부분에서 오류를 만났다. AndroidAnnotations에서 applicationId를 기준으로 resource에 접근해서 자동 생성된 class들을 찾지 못하는 문제이다. 이런 경우에 대비해서 AndroidAnnotations에는 resourcePackageName라는 속성을 제공한다. CustomizeAnnotationProcessing에 보면 아래와 같이 안내되어 있다. resourcePackageName Type: string By default, AndroidAnnotations try to find the R class by extracting application package from AndroidManifest.xml file. But in some cases you may want to specify a custom package to look for the R class. This is why we added resourcePackageName option. 결론은 아래처럼 resourcePackageName에 기존 packageName을 넣어줌으로써 해결이 가능하다. apt { arguments { resourcePackageName "net.yourdomain" } }]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2015/10/05/gradle-dsl-method-not-found-packagenamesuffix/">Gradle DSL method not found: 'packageNameSuffix()' 오류 해결</a>에서 오류 해결 방법을 안내하면서 언급했던 applicationIdSuffix를 사용시 유의사항이 있다. <strong>applicationId가 debug 모드에서 변경됨에 따라 관련된 부분에서 문제가 일어날 수 있다는 것이다.</strong></p>
<p>나의 경우는 AndroidAnnotations을 함께 사용하는 부분에서 오류를 만났다. AndroidAnnotations에서 applicationId를 기준으로 resource에 접근해서 자동 생성된 class들을 찾지 못하는 문제이다.</p>
<p>이런 경우에 대비해서 AndroidAnnotations에는 resourcePackageName라는 속성을 제공한다.</p>
<p><a href="https://github.com/excilys/androidannotations/wiki/CustomizeAnnotationProcessing">CustomizeAnnotationProcessing</a>에 보면 아래와 같이 안내되어 있다.</p>
<blockquote>
<p><strong>resourcePackageName</strong></p>
<p>Type: string
By default, AndroidAnnotations try to find the R class by extracting application package from AndroidManifest.xml file. But in some cases you may want to specify a custom package to look for the R class. This is why we added resourcePackageName option.</p>
</blockquote>
<p>결론은 아래처럼 resourcePackageName에 기존 packageName을 넣어줌으로써 해결이 가능하다.</p>
<pre><code>apt {
    arguments {
        resourcePackageName "net.yourdomain"
    }
}</code></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/05/gradle-dsl-method-not-found-packagenamesuffix/</id><title type="html">Gradle DSL method not found: 'packageNameSuffix()' 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/05/gradle-dsl-method-not-found-packagenamesuffix/"/><published>2015-10-05T08:13:08+09:00</published><updated>2015-10-05T08:13:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 빌드시 packageName을 동적으로 변경하기 위해 packageNameSuffix를 사용하는 경우가 있다. 예를들어 배포된 앱과 개발중인 앱을 동시에 사용하기 위해 packageNameSuffix를 사용할 수 있다. 아래의 예시를 보자. android { buildTypes { debug { packageNameSuffix '.debug' versionNameSuffix '-debug' } } } debug 모드에서 빌드할 경우에는 packageName 뒤에 .debug를 붙이도록 설정한 것이다. 이렇게 함으로써 release와 debug가 packageName이 달라져서 두개의 앱으로 인식되므로 모두를 설치할 수 있다. 이 방법을 모를때는 매번 앱을 지우고 새로 깔고... 귀찮은 작업을 반복하며 작업을 했었다. 그런데 이렇게 사용하면 아래의 경우를 만날 수 있다. Gradle sync failed: Gradle DSL method not found: 'packageNameSuffix()' Consult IDE log for more details (Help | Show Log) 이유는 packageNameSuffix라는 속성이 applicationIdSuffix로 변경되었기 때문이다. 관련 메뉴얼은 ApplicationId versus PackageName에서 볼 수 있다. 그래서 아래와 같이 수정하면 정상적으로 사용이 가능하다. android { buildTypes { debug { applicationIdSuffix '.debug' versionNameSuffix '-debug' } } }]]></summary><content type="html"><![CDATA[<p>안드로이드에서 빌드시 packageName을 동적으로 변경하기 위해 packageNameSuffix를 사용하는 경우가 있다. 예를들어 배포된 앱과 개발중인 앱을 동시에 사용하기 위해 packageNameSuffix를 사용할 수 있다.</p>
<p>아래의 예시를 보자.</p>
<pre><code>android {
    buildTypes {
        debug {
            packageNameSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }
}</code></pre>
<p>debug 모드에서 빌드할 경우에는 packageName 뒤에 <code>.debug</code>를 붙이도록 설정한 것이다. 이렇게 함으로써 release와 debug가 packageName이 달라져서 두개의 앱으로 인식되므로 모두를 설치할 수 있다.
이 방법을 모를때는 매번 앱을 지우고 새로 깔고... 귀찮은 작업을 반복하며 작업을 했었다.</p>
<p>그런데 이렇게 사용하면 아래의 경우를 만날 수 있다.</p>
<pre><code> Gradle sync failed: Gradle DSL method not found: 'packageNameSuffix()'
            Consult IDE log for more details (Help | Show Log)</code></pre>
<p>이유는 packageNameSuffix라는 속성이 applicationIdSuffix로 변경되었기 때문이다. 관련 메뉴얼은 <a href="http://tools.android.com/tech-docs/new-build-system/applicationid-vs-packagename">ApplicationId versus PackageName</a>에서 볼 수 있다.</p>
<p>그래서 아래와 같이 수정하면 정상적으로 사용이 가능하다.</p>
<pre><code>android {
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
    }
}</code></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/02/linux-how-to-clear-memory-swap/</id><title type="html">리눅스에서 swap 메모리 초기화</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/02/linux-how-to-clear-memory-swap/"/><published>2015-10-02T08:31:46+09:00</published><updated>2015-10-02T08:31:46+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="linux" label="linux" /><summary><![CDATA[리눅스에서 swap 메모리를 초기화하는 것은 아주 간단하다. 일시적 메모리 사용의 증가로 swap을 사용하게될 경우 메모리에 여유가 생겨도 swap 메모리는 자동으로 초기화되지 않는다. 이것을 수동으로 초기화하려면 아래의 명령을 입력하면 된다. 당연히 root 권한에서 실행해야 한다. swapoff -a && swapon -a swapoff 처리에 시간이 조금 오래 걸릴 수 있는데 서버가 멈춘 것은 아니므로 걱정하지 않아도 된다. swap 메모리에서 필요한 부분을 물리 메모리로 옮기는 처리중인 것이다.]]></summary><content type="html"><![CDATA[<p>리눅스에서 swap 메모리를 초기화하는 것은 아주 간단하다.
일시적 메모리 사용의 증가로 swap을 사용하게될 경우 메모리에 여유가 생겨도 swap 메모리는 자동으로 초기화되지 않는다. 이것을 수동으로 초기화하려면 아래의 명령을 입력하면 된다. 당연히 root 권한에서 실행해야 한다.</p>
<pre class="hljs bash">swapoff -a &amp;&amp; swapon -a</pre>
<p>swapoff 처리에 시간이 조금 오래 걸릴 수 있는데 서버가 멈춘 것은 아니므로 걱정하지 않아도 된다. swap 메모리에서 필요한 부분을 물리 메모리로 옮기는 처리중인 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/10/01/android-acra-please-configure-buildconfigclass-in-your-acra-config/</id><title type="html">ACRA : Please configure 'buildConfigClass' in your ACRA config 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/10/01/android-acra-please-configure-buildconfigclass-in-your-acra-config/"/><published>2015-10-01T19:48:09+09:00</published><updated>2015-10-01T19:48:09+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거 포스트에서 언급했던 것처럼 개발 중인 앱에서 Crash Report를 위해 ACRA를 사용중이다. 아직 4.7.0으로 정식 버전업이 되지는 않았지만 4.7.0 RC1 버전이 maven에 올려져 있어서 적용해 보았다. 사실은 미리 적용할 예정은 없었으나 Android Gradle 빌드 속도 높이기와 관련하여 Gradle을 2.4로 버전업 하면서 release 빌드 시에 다른 오류(setLatestEventInfo 함수가 제거됨)가 나타나서 어쩔 수 없이 버전업을 해야했다. 그런데 버전업을하고 나서 Crash 테스트를 하는 도중 또 다른 오류를 만났다. 기존에도 오류가 나고 있었는지 버전업 후의 문제인지는 확실치는 않다. 안드로이드 작업은 끝없는 오류 해결의 연속인 듯하다. 오류는 아래와 같다. E/ACRA: Not adding buildConfig to log. Class Not found : net.yourdomain.BuildConfig. Please configure 'buildConfigClass' in your ACRA config 우선 ACRA를 초기화하는 코드를 살펴보자. 당연하지만 실제 적용코드가 아닌 부분적으로 정리된 코드다. ACRAConfiguration config = ACRA.getNewDefaultConfig(this); config.setFormUri("http://dev.yourdomain.net/AppCrash"); ACRA.init(this, config); // The following line triggers the initialization of ACRA @ReportsCrashes 어노테이션을 사용하지 않고 동적으로 초기화시켜주는 코드다. 실제로 Crash를 발생시키면 위에서 보여준 오류가 난다. 사실 이 문제는 원인을 확인한 결과 Proguard가 적용되었을 때만 오류가 발생한다. 아래의 ACRA 소스 코드의 일부를 보자. CrashReportDataFactory.java private Class<?> getBuildConfigClass() throws ClassNotFoundException { final Class configuredBuildConfig = ACRA.getConfig().buildConfigClass(); if ((configuredBuildConfig != null) && !configuredBuildConfig.equals(Object.class)) { // If set via annotations or programatically then it will have a real value, // otherwise it will be Object.class (annotation default) or null (explicit programmatic). return configuredBuildConfig; } final String className = context.getClass().getPackage().getName() + ".BuildConfig"; try { return Class.forName(className); } catch (ClassNotFoundException e) { ACRA.log.e(LOG_TAG, "Not adding buildConfig to log. Class Not found : " + className + ". Please configure 'buildConfigClass' in your ACRA config"); throw e; } } final String className = context.getClass().getPackage().getName() + ".BuildConfig"; 이 부분을 보면 패키지명에 BuildConfig를 더해 Class를 찾고 있다. 이 부분이 문제다. Proguard에서 BuildConfig를 난독화해버려서 리플렉션으로 찾을 수 없는 것이다. 해결을 위한 아래의 코드를 보자. ACRAConfiguration config = ACRA.getNewDefaultConfig(this); config.setBuildConfigClass(BuildConfig.class); config.setFormUri("http://dev.yourdomain.net/AppCrash"); ACRA.init(this, config); // The following line triggers the initialization of ACRA config.setBuildConfigClass(BuildConfig.class); 이 부분을 추가했다. ACRA 코드에서 보듯이 setBuildConfigClass로 직접 BuildConfig를 넘겨주면 패키지명으로 찾지 않는다. 따라서 Proguard가 적용되어도 문제가 없다. 이 오류는 이것으로 해결이 가능하다. 하지만 나는 지금 다른 문제로 다시 고군분투 중이다. 오류 발생시 HTTP/POST를 통해 오류 관련 정보를 전송하도록 사용중이었다. 그런데 앞서 이야기 한것과 같이 이번에 버전업이 되면서 HTTP 접속 관련 부분이 변경되었다. 여기에 문제가 있다. ... urlConnection.setChunkedStreamingMode(0); ... 위 부분은 ACRA에서 HTTP 전송시 사용하는 HttpRequest.java 의 일부분이다. setChunkedStreamingMode에 대해서는 여기서 설명하기엔 너무 길고 간단히 요약하자면 chunked 상태로 데이터가 전송된다. 그런데 이 상태로 전송되면 현재 내가 사용하고 있는 서버에서 POST 값이 모두 비어 있다. request의 body가 수신되지 못하는 것이다. 이 부분은 나의 환경인 php-fpm가 proxy로 연결되어 있는 것과 관련이 있는 것으로 보인다. 이 부분에 대해서는 여러가지로 시도해 보았으나 해결이 되지 않았고 일단은 몇개의 클래스를 재정의해서 문제를 막아 놓았다. 그리고 관련해서는 ACRA에 Issue로 등록해 두었다. 개선이 될런지는 미지수인데 안된다면 앞으로 사용상에 걸림돌이 될 것 같다. 이 부분에 관련된 해결책이 나온다면 다시 포스팅을 하도록 하겠다.]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2015/09/25/android-6-apache-http-client-removal/">Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거</a> 포스트에서 언급했던 것처럼 개발 중인 앱에서 Crash Report를 위해 <a href="https://github.com/ACRA/acra">ACRA</a>를 사용중이다. 아직 4.7.0으로 정식 버전업이 되지는 않았지만 4.7.0 RC1 버전이 maven에 올려져 있어서 적용해 보았다.
사실은 미리 적용할 예정은 없었으나 <a href="https://blog.asamaru.net/2015/09/29/android-gradle-builds-speed-up/">Android Gradle 빌드 속도 높이기</a>와 관련하여 Gradle을 2.4로 버전업 하면서 release 빌드 시에 다른 오류(setLatestEventInfo 함수가 제거됨)가 나타나서 어쩔 수 없이 버전업을 해야했다.</p>
<p>그런데 버전업을하고 나서 Crash 테스트를 하는 도중 또 다른 오류를 만났다. 기존에도 오류가 나고 있었는지 버전업 후의 문제인지는 확실치는 않다. 안드로이드 작업은 끝없는 오류 해결의 연속인 듯하다. 오류는 아래와 같다.</p>
<pre class="hljs java">E/ACRA: Not adding buildConfig to log. Class Not found : net.yourdomain.BuildConfig. Please configure <span class="hljs-string">'buildConfigClass'</span> in your ACRA config</pre>
<p>우선 ACRA를 초기화하는 코드를 살펴보자. 당연하지만 실제 적용코드가 아닌 부분적으로 정리된 코드다.</p>
<pre class="hljs java">ACRAConfiguration config = ACRA.getNewDefaultConfig(<span class="hljs-keyword">this</span>);
config.setFormUri(<span class="hljs-string">"http://dev.yourdomain.net/AppCrash"</span>);
ACRA.init(<span class="hljs-keyword">this</span>, config); <span class="hljs-comment">// The following line triggers the initialization of ACRA</span></pre>
<p>@ReportsCrashes 어노테이션을 사용하지 않고 동적으로 초기화시켜주는 코드다. 실제로 Crash를 발생시키면 위에서 보여준 오류가 난다. 사실 이 문제는 원인을 확인한 결과 Proguard가 적용되었을 때만 오류가 발생한다. 아래의 ACRA 소스 코드의 일부를 보자.</p>
<p><strong><a href="https://github.com/ACRA/acra/blob/master/src/main/java/org/acra/collector/CrashReportDataFactory.java">CrashReportDataFactory.java</a></strong></p>
<pre class="hljs java"><span class="hljs-keyword">private</span> Class&lt;?&gt; getBuildConfigClass() <span class="hljs-keyword">throws</span> ClassNotFoundException {
    <span class="hljs-keyword">final</span> Class configuredBuildConfig = ACRA.getConfig().buildConfigClass();
    <span class="hljs-keyword">if</span> ((configuredBuildConfig != <span class="hljs-keyword">null</span>) &amp;&amp; !configuredBuildConfig.equals(Object.class)) {
        <span class="hljs-comment">// If set via annotations or programatically then it will have a real value,</span>
        <span class="hljs-comment">// otherwise it will be Object.class (annotation default) or null (explicit programmatic).</span>
        <span class="hljs-keyword">return</span> configuredBuildConfig;
    }

    <span class="hljs-keyword">final</span> String className = context.getClass().getPackage().getName() + <span class="hljs-string">".BuildConfig"</span>;
    <span class="hljs-keyword">try</span> {
        <span class="hljs-keyword">return</span> Class.forName(className);
    } <span class="hljs-keyword">catch</span> (ClassNotFoundException e) {
        ACRA.log.e(LOG_TAG, <span class="hljs-string">"Not adding buildConfig to log. Class Not found : "</span> + className + <span class="hljs-string">". Please configure 'buildConfigClass' in your ACRA config"</span>);
        <span class="hljs-keyword">throw</span> e;
    }
}</pre>
<p><code>final String className = context.getClass().getPackage().getName() + ".BuildConfig";</code> 이 부분을 보면 패키지명에 BuildConfig를 더해 Class를 찾고 있다. 이 부분이 문제다. Proguard에서 BuildConfig를 난독화해버려서 리플렉션으로 찾을 수 없는 것이다.
해결을 위한 아래의 코드를 보자.</p>
<pre class="hljs java">ACRAConfiguration config = ACRA.getNewDefaultConfig(<span class="hljs-keyword">this</span>);
config.setBuildConfigClass(BuildConfig.class);
config.setFormUri(<span class="hljs-string">"http://dev.yourdomain.net/AppCrash"</span>);
ACRA.init(<span class="hljs-keyword">this</span>, config); <span class="hljs-comment">// The following line triggers the initialization of ACRA</span></pre>
<p><code>config.setBuildConfigClass(BuildConfig.class);</code> 이 부분을 추가했다. ACRA 코드에서 보듯이 setBuildConfigClass로 직접 BuildConfig를 넘겨주면 패키지명으로 찾지 않는다. 따라서 Proguard가 적용되어도 문제가 없다.</p>
<hr />
<p>이 오류는 이것으로 해결이 가능하다. 하지만 나는 지금 다른 문제로 다시 고군분투 중이다.
오류 발생시 HTTP/POST를 통해 오류 관련 정보를 전송하도록 사용중이었다. 그런데 앞서 이야기 한것과 같이 이번에 버전업이 되면서 HTTP 접속 관련 부분이 변경되었다. 여기에 문제가 있다.</p>
<pre class="hljs java">...
urlConnection.setChunkedStreamingMode(<span class="hljs-number">0</span>);
...</pre>
<p>위 부분은 ACRA에서 HTTP 전송시 사용하는 HttpRequest.java 의 일부분이다. <code>setChunkedStreamingMode</code>에 대해서는 여기서 설명하기엔 너무 길고 간단히 요약하자면 chunked 상태로 데이터가 전송된다.
그런데 이 상태로 전송되면 현재 내가 사용하고 있는 서버에서 POST 값이 모두 비어 있다. request의 body가 수신되지 못하는 것이다. 이 부분은 나의 환경인 php-fpm가 proxy로 연결되어 있는 것과 관련이 있는 것으로 보인다. 이 부분에 대해서는 여러가지로 시도해 보았으나 해결이 되지 않았고 일단은 몇개의 클래스를 재정의해서 문제를 막아 놓았다. 그리고 관련해서는 ACRA에 Issue로 등록해 두었다. 개선이 될런지는 미지수인데 안된다면 앞으로 사용상에 걸림돌이 될 것 같다. 이 부분에 관련된 해결책이 나온다면 다시 포스팅을 하도록 하겠다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/30/loan-calculator/</id><title type="html">필요해서 만든 대출 이자 계산기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/30/loan-calculator/"/><published>2015-09-30T21:17:45+09:00</published><updated>2015-09-30T21:17:45+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[올해 집을 이사하면서 돈이 부족해서 대출을 받게 되었다. 대출을 받기 전에 예산을 잡는 과정에서 대출 비용에 따른 월 부담 비용을 알아보기 위해 대출 계산기를 찾아다녔었다. 그런데 딱히 편한게 없었다. 어짜피 계산값이야 다를 수 없는 것이므로 계산이 불편하지는 않았으나 계산했던 결과를 저장해 둘 수가 없어서 매번 다시 계산해야하는 불편함이 있었다. 하루에도 몇번씩 얼마를 빌려야할지가 변하는 상황에서 월 비용을 모두 기억할 수는 없었기 때문에 자주 다시 계산하게 되었던 것이다. 그래서 직접 안드로이드 앱을 만들어 버렸다. 아래의 링크를 통해 마켓으로 갈 수 있다. 안드로이드 대출 계산기 앱 그리고 앱을 만들면서 하이브리드앱 형태로 만들었었기 때문에 조금만 수정해서 웹 버전도 만들었다. 단, 아직 계산 결과 저장 기능은 넣이 않았다. 그게 제일 중요한 목적이긴 했는데 아직 완성하지 못했다. 시간이 되는대로 기능을 넣을 예정이다. 웹 버전은 아래의 링크를 통해 볼 수 있다. 대출 이자 계산기 내가 필요해서 만든 것이지만 혹시라도 필요한 사람들이 있을까해서 공개해 본다. 앞으로의 버전업은 크게 기대하기 어렵지만 앱/웹 버전 모두 소스를 공개해 두었기 때문에 계산 로직 등이 필요한 사람들은 도움이 될지도 모르겠다. 위의 프로그램들과는 크게 상관없지만 대출의 종류를 간단히 소개하고자 한다. 원리금균등분할상환 일반적으로 사용되는 상황방식으로 매기간 원금과 이자의 합계가 균등한 저당이다. 초기에는 원리금 중 이자가 차지하는 부분이 많으나 후기에는 원금상환 비중이 커지면 대출만기 일자에 대출원금은 완전히 상환된다. 원금균등분할상환 대출원금을 융자기간으로 나눈 할부 상환금에 월별잔고에 대한 이자를 합산하여 납부하는 방식이다. 원금액은 동일하나 이자지불액은 원금을 갚아나가면서 조금씩 줄어듦에 따라 매 기간 적어지게 된다. 따라서 원금균등상환방식은 초기에는 월부금이 많이 지급되고 후기에는 점차 줄어들기 때문에 대출자 입장에서는 차입자에게 원금균등분할상환방식으로 대출해 주는 것이 원금회수 측면에서 보다 안전하다. 원금만기일시상환(만기상환저당) 원금은 만기에 상환하고 대출기간 중에는 이자만 지불하는 저당대출을 말한다. 이 방식을 인터리스트 온리 모기지(interest only mortgage)라고도 한다. 내가 알기론 원금균등상환이 돈을 빌리는 입장에서 제일 유리한 것으로 알고 있으나 대부분의 대출 상품은 원리금균등상환이다. 예전엔 빚테크라는 말도 있듯이 대출을 잘 활용하는 것이 좋았지만 요즘같은 시국엔 빚없이 사는게 제일인 것 같다. 아무쪼록 내가 만든 프로그램들이 대출을 효율적으로 받는데 도움이 되었으면 한다.]]></summary><content type="html"><![CDATA[<p>올해 집을 이사하면서 돈이 부족해서 대출을 받게 되었다.
대출을 받기 전에 예산을 잡는 과정에서 대출 비용에 따른 월 부담 비용을 알아보기 위해 대출 계산기를 찾아다녔었다. 그런데 딱히 편한게 없었다. 어짜피 계산값이야 다를 수 없는 것이므로 계산이 불편하지는 않았으나 계산했던 결과를 저장해 둘 수가 없어서 매번 다시 계산해야하는 불편함이 있었다. 하루에도 몇번씩 얼마를 빌려야할지가 변하는 상황에서 월 비용을 모두 기억할 수는 없었기 때문에 자주 다시 계산하게 되었던 것이다. 그래서 직접 안드로이드 앱을 만들어 버렸다. 아래의 링크를 통해 마켓으로 갈 수 있다.</p>
<h3><a href="https://play.google.com/store/apps/details?id=net.asamaru.loancalc">안드로이드 대출 계산기 앱</a></h3>
<p>그리고 앱을 만들면서 하이브리드앱 형태로 만들었었기 때문에 조금만 수정해서 웹 버전도 만들었다. 단, 아직 계산 결과 저장 기능은 넣이 않았다. 그게 제일 중요한 목적이긴 했는데 아직 완성하지 못했다. 시간이 되는대로 기능을 넣을 예정이다. 웹 버전은 아래의 링크를 통해 볼 수 있다.</p>
<h3><a href="http://loan.asamaru.net/">대출 이자 계산기</a></h3>
<p>내가 필요해서 만든 것이지만 혹시라도 필요한 사람들이 있을까해서 공개해 본다. 앞으로의 버전업은 크게 기대하기 어렵지만 앱/웹 버전 모두 소스를 공개해 두었기 때문에 계산 로직 등이 필요한 사람들은 도움이 될지도 모르겠다.</p>
<hr />
<p>위의 프로그램들과는 크게 상관없지만 대출의 종류를 간단히 소개하고자 한다.</p>
<h4>원리금균등분할상환</h4>
<blockquote>
<p>일반적으로 사용되는 상황방식으로 매기간 원금과 이자의 합계가 균등한 저당이다. 초기에는 원리금 중 이자가 차지하는 부분이 많으나 후기에는 원금상환 비중이 커지면 대출만기 일자에 대출원금은 완전히 상환된다.</p>
</blockquote>
<h4>원금균등분할상환</h4>
<blockquote>
<p>대출원금을 융자기간으로 나눈 할부 상환금에 월별잔고에 대한 이자를 합산하여 납부하는 방식이다. 원금액은 동일하나 이자지불액은 원금을 갚아나가면서 조금씩 줄어듦에 따라 매 기간 적어지게 된다. 따라서 원금균등상환방식은 초기에는 월부금이 많이 지급되고 후기에는 점차 줄어들기 때문에 대출자 입장에서는 차입자에게 원금균등분할상환방식으로 대출해 주는 것이 원금회수 측면에서 보다 안전하다.</p>
</blockquote>
<h4>원금만기일시상환(만기상환저당)</h4>
<blockquote>
<p>원금은 만기에 상환하고 대출기간 중에는 이자만 지불하는 저당대출을 말한다. 이 방식을 인터리스트 온리 모기지(interest only mortgage)라고도 한다.</p>
</blockquote>
<p>내가 알기론 원금균등상환이 돈을 빌리는 입장에서 제일 유리한 것으로 알고 있으나 대부분의 대출 상품은 원리금균등상환이다.</p>
<p><strong>예전엔 빚테크라는 말도 있듯이 대출을 잘 활용하는 것이 좋았지만 요즘같은 시국엔 빚없이 사는게 제일인 것 같다.</strong> 아무쪼록 내가 만든 프로그램들이 대출을 효율적으로 받는데 도움이 되었으면 한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/30/service-not-available-geocoder-android/</id><title type="html">안드로이드 Geocoder 사용시 Service not Available 오류</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/30/service-not-available-geocoder-android/"/><published>2015-09-30T16:15:20+09:00</published><updated>2015-09-30T16:15:20+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 특정 지점의 좌표를 주소로 변환하는 것이 필요해서 Geocoder 사용했다. 대략적인 코드는 아래와 같다. static abstract public class GeoCoderTask extends AsyncTask<LatLng, Void, Address[]> { @Override protected Address[] doInBackground(LatLng... arg0) { List<Address> res = new ArrayList<>(); if (arg0.length > 0) { try { Geocoder geocoder = new Geocoder(Helper.getAppContext(), Locale.KOREA); List<android.location.Address> addresses = geocoder.getFromLocation(arg0[0].latitude, arg0[0].longitude, 1); if ((addresses != null) && (addresses.size() > 0)) { android.location.Address result = addresses.get(0); Address resultAddress = new Address(); resultAddress.address = result.getAddressLine(0); resultAddress.lat = result.getLatitude(); resultAddress.lng = result.getLongitude(); resultAddress.premise = result.getPremises(); resultAddress.administrative_area_level_1 = result.getAdminArea(); resultAddress.sublocality_level_1 = result.getSubLocality(); resultAddress.country = result.getCountryName(); resultAddress.postal_code = result.getPostalCode(); res.add(resultAddress); } } catch (Exception e) { e.printStackTrace(); } } Address[] array = new Address[res.size()]; res.toArray(array); return array; } } 위 코드는 데이터를 다른 클래스로 넘겨서 반환하는 형태로 그대로 사용할 수는 없다. 그냥 이렇게 사용했다는 것을 보여주고자 넣은 코드니 참고만하기 바란다. 어쨌든 중요한 것은 잘 동작하던 코드가 테스트 기기에서 Service not Available 오류가 난다는 것이다. 테스트 기기는 nexus s에 4.0.4로 오래된 기기다. 처음엔 OS 버전 문제로 생각했다. 그래서 일단 검색해 봤다. 결론은 아래의 링크를 보고 해결했다. Service not Available - Geocoder Android 해결 방법은 기기 재부팅. 어의없다. 정말 안드로이드는 정이 안간다. 사실 동일한 오류를 만났을 때 위의 방법으로 해결되지 않을 수 있다. 원인은 다양할 수 있으니... 그래서 조금 더 찾아보니 여러가지 이슈가 있는 것을 확인 했다. 해결되지 않는다면 구글에서 검색해 보면 여러가지 정보를 얻을 수 있다. 이러한 정보 중에서 한가지는 Geocoder를 사용하지 않고 웹으로 호출해서 결과를 받는 것이다. 사실 나의 경우는 오류 때문이 아니라 api 사용량 때문에 사용하던 코드(API 키를 전달하지 않는 코드로 사용량에 제한을 받지 않는 것으로 보임)였는데 참고할 사람이 있을까하고 남겨본다. 그리고 한가지. 조금 전에 API key를 전달하지 않는다고 했는데 기존에는 이 방법으로 정상 동작했다. 그런데 최근 WIFI에서는 이상이 없는데 LTE 상태에서는 api 한계량 초과라는 메시지를 반환하고 있어서 사용하고 있지 않다. 이 부분은 이유를 정확히 확인해보지 못했다. static abstract public class WebGeoCoderTask extends AsyncTask<LatLng, Void, Address[]> { @Override final protected Address[] doInBackground(LatLng... arg0) { List<Address> res = new ArrayList<>(); if (arg0.length > 0) { String address = String.format(Locale.getDefault(), "https://maps.googleapis.com/maps/api/geocode/json?latlng=%1$f,%2$f&sensor=false&language=" + Locale.getDefault(), arg0[0].latitude, arg0[0].longitude); try { URL url = new URL(address); HttpURLConnection conn = (HttpURLConnection) url.openConnection(); InputStreamReader in = new InputStreamReader(conn.getInputStream()); StringBuilder jsonResults = new StringBuilder(); int read; char[] buff = new char[1024]; while ((read = in.read(buff)) != -1) { jsonResults.append(buff, 0, read); } String json = jsonResults.toString(); JSONObject jsonObject = new JSONObject(json); AFLog.d(json); if ("OK".equalsIgnoreCase(jsonObject.getString("status"))) { JSONArray results = jsonObject.getJSONArray("results"); if (results.length() > 0) { for (int i = 0, iCnt = results.length(); i < iCnt; i++) { try { JSONObject result = results.getJSONObject(i); Address resultAddress = new Address(); resultAddress.address = result.getString("formatted_address"); resultAddress.placeId = result.optString("place_id"); JSONObject geometry = result.optJSONObject("geometry"); if (geometry != null) { geometry = geometry.optJSONObject("location"); if (geometry != null) { resultAddress.lat = geometry.getDouble("lat"); resultAddress.lng = geometry.getDouble("lng"); } } JSONArray components = result.getJSONArray("address_components"); for (int a = 0; a < components.length(); a++) { JSONObject component = components.getJSONObject(a); JSONArray types = component.getJSONArray("types"); for (int j = 0; j < types.length(); j++) { String type = types.getString(j); switch (type) { case "premise": resultAddress.premise = component.optString("long_name"); break; case "administrative_area_level_1": resultAddress.administrative_area_level_1 = component.optString("long_name"); break; case "sublocality_level_1": resultAddress.sublocality_level_1 = component.optString("long_name"); break; case "sublocality_level_2": resultAddress.sublocality_level_2 = component.optString("long_name"); break; case "sublocality_level_3": resultAddress.sublocality_level_3 = component.optString("long_name"); break; case "sublocality_level_4": resultAddress.sublocality_level_4 = component.optString("long_name"); break; case "country": resultAddress.country = component.optString("long_name"); break; case "postal_code": resultAddress.postal_code = component.optString("long_name"); break; case "political": case "sublocality": break; default: // AFLog.d("Not catched : " + type); break; } } } res.add(resultAddress); } catch (JSONException e) { AFLog.e(e); } } } } } catch (Exception e) { AFLog.e(e); } } Address[] array = new Address[res.size()]; res.toArray(array); return array; } } 이 코드도 마찬가지로 참고만 하기 바란다. 내부적으로 사용중인 클래스들이 있어서 그대로 넣으면 동작하지 않는다. 하지만 코드를 보면 반환 클래스에 관련된 부분이므로 어디를 수정해야 할지 바로 알 수 있을 것으로 보인다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 특정 지점의 좌표를 주소로 변환하는 것이 필요해서 Geocoder 사용했다. 대략적인 코드는 아래와 같다.</p>
<pre class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GeoCoderTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AsyncTask</span>&lt;<span class="hljs-title">LatLng</span>, <span class="hljs-title">Void</span>, <span class="hljs-title">Address</span>[]&gt; </span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">protected</span> Address[] doInBackground(LatLng... arg0) {
        List&lt;Address&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
        <span class="hljs-keyword">if</span> (arg0.length &gt; <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">try</span> {
                Geocoder geocoder = <span class="hljs-keyword">new</span> Geocoder(Helper.getAppContext(), Locale.KOREA);
                List&lt;android.location.Address&gt; addresses = geocoder.getFromLocation(arg0[<span class="hljs-number">0</span>].latitude, arg0[<span class="hljs-number">0</span>].longitude, <span class="hljs-number">1</span>);
                <span class="hljs-keyword">if</span> ((addresses != <span class="hljs-keyword">null</span>) &amp;&amp; (addresses.size() &gt; <span class="hljs-number">0</span>)) {
                    android.location.Address result = addresses.get(<span class="hljs-number">0</span>);
                    Address resultAddress = <span class="hljs-keyword">new</span> Address();
                    resultAddress.address = result.getAddressLine(<span class="hljs-number">0</span>);
                    resultAddress.lat = result.getLatitude();
                    resultAddress.lng = result.getLongitude();
                    resultAddress.premise = result.getPremises();
                    resultAddress.administrative_area_level_1 = result.getAdminArea();
                    resultAddress.sublocality_level_1 = result.getSubLocality();
                    resultAddress.country = result.getCountryName();
                    resultAddress.postal_code = result.getPostalCode();
                    res.add(resultAddress);
                }
            } <span class="hljs-keyword">catch</span> (Exception e) {
                e.printStackTrace();
            }
        }
        Address[] array = <span class="hljs-keyword">new</span> Address[res.size()];
        res.toArray(array);
        <span class="hljs-keyword">return</span> array;
    }
}</pre>
<p>위 코드는 데이터를 다른 클래스로 넘겨서 반환하는 형태로 그대로 사용할 수는 없다. 그냥 이렇게 사용했다는 것을 보여주고자 넣은 코드니 참고만하기 바란다.</p>
<p>어쨌든 중요한 것은 잘 동작하던 코드가 테스트 기기에서 Service not Available 오류가 난다는 것이다. 테스트 기기는 nexus s에 4.0.4로 오래된 기기다. 처음엔 OS 버전 문제로 생각했다. 그래서 일단 검색해 봤다. 결론은 아래의 링크를 보고 해결했다.</p>
<p><a href="http://stackoverflow.com/a/13856839">Service not Available - Geocoder Android</a></p>
<p>해결 방법은 <strong>기기 재부팅</strong>. 어의없다. 정말 안드로이드는 정이 안간다.</p>
<p>사실 동일한 오류를 만났을 때 위의 방법으로 해결되지 않을 수 있다. 원인은 다양할 수 있으니... 그래서 조금 더 찾아보니 여러가지 이슈가 있는 것을 확인 했다. 해결되지 않는다면 구글에서 검색해 보면 여러가지 정보를 얻을 수 있다.</p>
<p>이러한 정보 중에서 한가지는 Geocoder를 사용하지 않고 웹으로 호출해서 결과를 받는 것이다. 사실 나의 경우는 오류 때문이 아니라 api 사용량 때문에 사용하던 코드(API 키를 전달하지 않는 코드로 사용량에 제한을 받지 않는 것으로 보임)였는데 참고할 사람이 있을까하고 남겨본다. 그리고 한가지. 조금 전에 API key를 전달하지 않는다고 했는데 기존에는 이 방법으로 정상 동작했다. 그런데 최근 WIFI에서는 이상이 없는데 LTE 상태에서는 api 한계량 초과라는 메시지를 반환하고 있어서 사용하고 있지 않다. 이 부분은 이유를 정확히 확인해보지 못했다.</p>
<pre class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebGeoCoderTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AsyncTask</span>&lt;<span class="hljs-title">LatLng</span>, <span class="hljs-title">Void</span>, <span class="hljs-title">Address</span>[]&gt; </span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">final</span> <span class="hljs-keyword">protected</span> Address[] doInBackground(LatLng... arg0) {
        List&lt;Address&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
        <span class="hljs-keyword">if</span> (arg0.length &gt; <span class="hljs-number">0</span>) {
            String address = String.format(Locale.getDefault(), <span class="hljs-string">"https://maps.googleapis.com/maps/api/geocode/json?latlng=%1$f,%2$f&amp;sensor=false&amp;language="</span> + Locale.getDefault(), arg0[<span class="hljs-number">0</span>].latitude, arg0[<span class="hljs-number">0</span>].longitude);
            <span class="hljs-keyword">try</span> {
                URL url = <span class="hljs-keyword">new</span> URL(address);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                InputStreamReader in = <span class="hljs-keyword">new</span> InputStreamReader(conn.getInputStream());
                StringBuilder jsonResults = <span class="hljs-keyword">new</span> StringBuilder();

                <span class="hljs-keyword">int</span> read;
                <span class="hljs-keyword">char</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];
                <span class="hljs-keyword">while</span> ((read = in.read(buff)) != -<span class="hljs-number">1</span>) {
                    jsonResults.append(buff, <span class="hljs-number">0</span>, read);
                }
                String json = jsonResults.toString();
                JSONObject jsonObject = <span class="hljs-keyword">new</span> JSONObject(json);
                AFLog.d(json);

                <span class="hljs-keyword">if</span> (<span class="hljs-string">"OK"</span>.equalsIgnoreCase(jsonObject.getString(<span class="hljs-string">"status"</span>))) {
                    JSONArray results = jsonObject.getJSONArray(<span class="hljs-string">"results"</span>);
                    <span class="hljs-keyword">if</span> (results.length() &gt; <span class="hljs-number">0</span>) {
                        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, iCnt = results.length(); i &lt; iCnt; i++) {
                            <span class="hljs-keyword">try</span> {
                                JSONObject result = results.getJSONObject(i);

                                Address resultAddress = <span class="hljs-keyword">new</span> Address();
                                resultAddress.address = result.getString(<span class="hljs-string">"formatted_address"</span>);
                                resultAddress.placeId = result.optString(<span class="hljs-string">"place_id"</span>);
                                JSONObject geometry = result.optJSONObject(<span class="hljs-string">"geometry"</span>);
                                <span class="hljs-keyword">if</span> (geometry != <span class="hljs-keyword">null</span>) {
                                    geometry = geometry.optJSONObject(<span class="hljs-string">"location"</span>);
                                    <span class="hljs-keyword">if</span> (geometry != <span class="hljs-keyword">null</span>) {
                                        resultAddress.lat = geometry.getDouble(<span class="hljs-string">"lat"</span>);
                                        resultAddress.lng = geometry.getDouble(<span class="hljs-string">"lng"</span>);
                                    }
                                }

                                JSONArray components = result.getJSONArray(<span class="hljs-string">"address_components"</span>);
                                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>; a &lt; components.length(); a++) {
                                    JSONObject component = components.getJSONObject(a);
                                    JSONArray types = component.getJSONArray(<span class="hljs-string">"types"</span>);
                                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; types.length(); j++) {
                                        String type = types.getString(j);
                                        <span class="hljs-keyword">switch</span> (type) {
                                            <span class="hljs-keyword">case</span> <span class="hljs-string">"premise"</span>:
                                                resultAddress.premise = component.optString(<span class="hljs-string">"long_name"</span>);
                                                <span class="hljs-keyword">break</span>;
                                            <span class="hljs-keyword">case</span> <span class="hljs-string">"administrative_area_level_1"</span>:
                                                resultAddress.administrative_area_level_1 = component.optString(<span class="hljs-string">"long_name"</span>);
                                                <span class="hljs-keyword">break</span>;
                                            <span class="hljs-keyword">case</span> <span class="hljs-string">"sublocality_level_1"</span>:
                                                resultAddress.sublocality_level_1 = component.optString(<span class="hljs-string">"long_name"</span>);
                                                <span class="hljs-keyword">break</span>;
                                            <span class="hljs-keyword">case</span> <span class="hljs-string">"sublocality_level_2"</span>:
                                                resultAddress.sublocality_level_2 = component.optString(<span class="hljs-string">"long_name"</span>);
                                                <span class="hljs-keyword">break</span>;
                                            <span class="hljs-keyword">case</span> <span class="hljs-string">"sublocality_level_3"</span>:
                                                resultAddress.sublocality_level_3 = component.optString(<span class="hljs-string">"long_name"</span>);
                                                <span class="hljs-keyword">break</span>;
                                            <span class="hljs-keyword">case</span> <span class="hljs-string">"sublocality_level_4"</span>:
                                                resultAddress.sublocality_level_4 = component.optString(<span class="hljs-string">"long_name"</span>);
                                                <span class="hljs-keyword">break</span>;
                                            <span class="hljs-keyword">case</span> <span class="hljs-string">"country"</span>:
                                                resultAddress.country = component.optString(<span class="hljs-string">"long_name"</span>);
                                                <span class="hljs-keyword">break</span>;
                                            <span class="hljs-keyword">case</span> <span class="hljs-string">"postal_code"</span>:
                                                resultAddress.postal_code = component.optString(<span class="hljs-string">"long_name"</span>);
                                                <span class="hljs-keyword">break</span>;
                                            <span class="hljs-keyword">case</span> <span class="hljs-string">"political"</span>:
                                            <span class="hljs-keyword">case</span> <span class="hljs-string">"sublocality"</span>:
                                                <span class="hljs-keyword">break</span>;
                                            <span class="hljs-keyword">default</span>:
<span class="hljs-comment">//                                                  AFLog.d("Not catched : " + type);</span>
                                                <span class="hljs-keyword">break</span>;
                                        }
                                    }
                                }
                                res.add(resultAddress);
                            } <span class="hljs-keyword">catch</span> (JSONException e) {
                                AFLog.e(e);
                            }
                        }
                    }
                }
            } <span class="hljs-keyword">catch</span> (Exception e) {
                AFLog.e(e);
            }
        }
        Address[] array = <span class="hljs-keyword">new</span> Address[res.size()];
        res.toArray(array);
        <span class="hljs-keyword">return</span> array;
    }
}</pre>
<p>이 코드도 마찬가지로 참고만 하기 바란다. 내부적으로 사용중인 클래스들이 있어서 그대로 넣으면 동작하지 않는다. 하지만 코드를 보면 반환 클래스에 관련된 부분이므로 어디를 수정해야 할지 바로 알 수 있을 것으로 보인다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/29/android-gradle-builds-speed-up/</id><title type="html">Android Gradle 빌드 속도 높이기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/29/android-gradle-builds-speed-up/"/><published>2015-09-29T09:26:25+09:00</published><updated>2015-09-29T09:26:25+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 개발을 하면서 여러가지 불만이 있지만 그중에 가장 맘에 들지않는 것 중 하나가 빌드 속도이다. 프로젝트의 규모에 따라 다르겠지만 xcode와의 빌드 시간을 비교하면 전체 빌드의 시간은 비슷한 것 같으나 수시로 하게되는 빌드는 안드로이드 스튜디오가 훨씬 느리게 느껴진다. 안드로이드 개발시 빌드에 사용되는 Gradle은 많은 유연성을 제공하지만 빌드에 많은 프로세스 비용이 든다는 것이 단점이다. 그래서 빌드 속도를 높일 수 있는 방법을 찾아서 적용해 보았다. 그리고 빌드 시간에 크게 영향을 주는 것 중에는 proguard와 multidex가 포함된다. proguard는 코드 최적화/난독화 등을 위한 처리이며 multidex는 65K이상의 메소드를 사용할 경우에 대한 대응책으로 사용되며 자세한 내용은 Building Apps with Over 65K Methods에서 참고하면 된다. 메소드 수가 어떻게하면 65K를 넘나 싶을 수 있지만 금방 넘어선다. 라이브러리를 막 추가하다보면 금방 문제를 만나게 된다(proguard 등을 통해 메소드 수를 줄일 수 있다). 이 글에서도 나와있는 것이지만 빌드 속도 문제를 떠나서도 최대한 multidex를 사용하는 상황을 만들지 않는 것이 좋다. 그리고 나는 proguard를 항상 켜둔 상태도 개발을 하는 편이다. 프로젝트 막판에 proguard를 적용하게되면 proguard로 인한 여러가지 문제를 만날 수 있기 때문에 충돌을 미리 발견하기 위해서다. 하지만 이렇게하다보면 빌드 속도가 너무 떨어진다. 그래서 켰다가 껐다가 하긴하는데 너무 귀찮다. 그럼 본격적으로 설정을 시작해보자. 1. gradle.properties 파일을 변경 프로젝트 Root에 있는 gradle.properties을 편집한다. 기존에 파일이 없다면 추가한다. 여기에는 gradle 빌드 할 때 인수를 설정할 수 있다. 한가지 더 알려주자면 프로젝트별로 설정하는 것외에도 모든 프로젝트에 설정을 추가할 수도 있다. 해당 파일의 경로는 OSX 기준으로 ~/.gradle/gradle.properties 이다. 윈도우나 리눅스도 비슷한 경로에 있을 것으로 생각된다(없다면 추가해도 된다). gradle.properties # Project-wide Gradle settings. # IDE (eg Android Studio) users : # Settings specified in this file will override any Gradle settings # configured through the IDE. # For more details on how to configure your build environment visit # http : // www.gradle.org/docs/current/userguide/build_environment.html # The Gradle daemon aims to improve the startup and execution time of Gradle. # When set to true the Gradle daemon is to run the build. # TODO : disable daemon on CI, Since Builds should BE clean and Reliable on servers org.gradle.daemon = true # Specifies the JVM arguments used for the daemon process. # The setting is particularly useful for tweaking memory settings. # Default value : -Xmx10248m -XX : MaxPermSize = 256M org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 # When configured, Gradle will run in incubating parallel mode. # This option should only be used with decoupled projects. More details, visit # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec : decoupled_projects org.gradle.parallel = true # Enables new incubating mode that makes Gradle selective when configuring projects. # Only relevant projects are configured which results in faster builds for large multi-projects. # http://www.gradle.org/docs/current/userguide/multi_project_builds.html #sec : configuration_on_demand org.gradle.configureondemand = true 위 설정에 대한 간략한 설명은 아래와 같다. org.gradle.daemon : 데몬 프로세스를 사용할지 여부 설정한다. true 설정시 gradle을 daemon 모드로 실행하여 빌드시 gradle을 다시 실행하는 시간을 줄여준다. org.gradle.jvmargs : 실행시 JVM 인수로 메모리를 설정을 늘려 메모리 부족으로 인한 속도저하를 막는 것이 목적이다. 따라서 적절한 양의 메모리를 할당해 주면 된다. org.gradle.parallel : gradle 병렬 빌드 모드를 설정한다. 여러 프로젝트를 빌드 할 때 효과가 있다. org.gradle.configureondemand : 관련 프로젝트가 있다면 필요한 부분만 빌드 설정한다. 크게 성능이 향상되는 것 같지는 않지만 조금의 성능 향상은 있는 것 같다. 사실 다음에 소개할 gradle 버전 업이 훨씬 체감 성능 향상에 도움을 준다. 2. Android Studio 1.3 / Gradle 2.4 이상 사용 Android Studio 1.3 / Gradle 2.4 이상으로 버전업되면서 대폭 성능 향상이 있었다. 실제로 나의 경우엔 상당한 속도 향상이 있었다. 그래도 proguard를 적용하게되면 느리긴 마찬가지긴 하다. 구글의 설명을 보려면 Google I/O 2015 - What's New in Android Development Tools을 참고하면 된다. 단, 주의할 것은 Android Studio 1.3 이상을 사용한다고 Gradle 2.4 이상을 무조건 사용하는 것은 아니라는 것이다. 신규 프로젝트가 아니어서 그런지 나의 프로젝트에서는 2.2.1을 그대로 사용하고 있었다(File > Project Structure > Project > Gradle version에서 2.4로 변경함으로써 적용할 수 있다). 3. gradle를 오프라인 모드로 변경 다른 사람들은 이 방법이 아주 효과적이었다고 하는데 나의 경우는 크게 차이가 나지 않았다(proguard로 인한 속도 저하라서 이 방법에 큰 도움이 되지 않았던 것 같다). 어쨌든 이 설정을 적용하면 gradle에서 매번 최신 버전을 확인하러가는 것을 생략 해 준다. 단, 신규 dependency를 추가하거나 변경하는 경우는 이 설정을 해제해야 한다. 약간은 귀찮을 수 있지만 dependency 변경은 크게 자주 발생하는 경우는 아니므로 문제되지 않을 것으로 생각된다. Android Studio> Preferences> Gradle 의 Offline work에 체크. 4. jcenter Maven Repository 사용 jcenter와 Maven Central은 모두 Java / Android 라이브러리들을 배포한다. 초기 안드로이드 스튜디오에서 프로젝트를 생성하면 기본적으로 Maven Central를 사용(repositories { mavenCentral() })하도록 세팅되었다. 하지만 이제는 안드로이드 스튜디오에서 프로젝트를 생성하면 jcenter가 사용(repositories { jcenter() })되도록 세팅된다. 이 부분이 변경된 이유는 여러가지가 있다고 하지만 그중에서 빌드 속도에 영향을 줄 수 있는 부분이 있다. jcenter는 CDN을 통해 라이브러리를 배포하기 때문에 Maven Central에 비해 빠르다는 것이다. 자세한 내용은 Android Studio – Migration from Maven Central to JCenter를 참고하자. 5. Speeding up Gradle builds Speeding up Gradle builds에서는 몇가지 방법을 더 안내하고 있다. 간략하게 요약하면 아래와 같다(위의 설명들과 유사한 부분도 많다). 상세한 설명은 위 링크를 참조하기 바란다. Maven Central vs. JCenter mavenCentral() 대신 jcenter()를 사용해라. Get the latest version of Gradle 최신 버전의 Gradle을 사용하라. Gradle properties 아래의 Gradle properties를 적용하라(위의 설명이 더 상세하다). org.gradle.parallel=true org.gradle.daemon=true org.gradle.jvmargs=-Xms256m -Xmx1024m How to use Gradle properties Gradle properties를 프로젝트별로 설정하기보다 전역으로 설정하라. 다중 모듈 빌드 다중 모뮬을 사용하는 경우에 속도 향상 방법이 안내되어 있으니 필요한 경우에 원본글에 가서 참조 바란다.]]></summary><content type="html"><![CDATA[<p>안드로이드 개발을 하면서 여러가지 불만이 있지만 그중에 가장 맘에 들지않는 것 중 하나가 빌드 속도이다. 프로젝트의 규모에 따라 다르겠지만 xcode와의 빌드 시간을 비교하면 전체 빌드의 시간은 비슷한 것 같으나 수시로 하게되는 빌드는 안드로이드 스튜디오가 훨씬 느리게 느껴진다. 안드로이드 개발시 빌드에 사용되는 Gradle은 많은 유연성을 제공하지만 빌드에 많은 프로세스 비용이 든다는 것이 단점이다. 그래서 빌드 속도를 높일 수 있는 방법을 찾아서 적용해 보았다.</p>
<p>그리고 빌드 시간에 크게 영향을 주는 것 중에는 proguard와 multidex가 포함된다. proguard는 코드 최적화/난독화 등을 위한 처리이며 multidex는 65K이상의 메소드를 사용할 경우에 대한 대응책으로 사용되며 자세한 내용은 <a href="https://developer.android.com/intl/ko/tools/building/multidex.html">Building Apps with Over 65K Methods</a>에서 참고하면 된다. 메소드 수가 어떻게하면 65K를 넘나 싶을 수 있지만 금방 넘어선다. 라이브러리를 막 추가하다보면 금방 문제를 만나게 된다(proguard 등을 통해 메소드 수를 줄일 수 있다). 이 글에서도 나와있는 것이지만 빌드 속도 문제를 떠나서도 최대한 multidex를 사용하는 상황을 만들지 않는 것이 좋다. 그리고 나는 proguard를 항상 켜둔 상태도 개발을 하는 편이다. 프로젝트 막판에 proguard를 적용하게되면 proguard로 인한 여러가지 문제를 만날 수 있기 때문에 충돌을 미리 발견하기 위해서다. 하지만 이렇게하다보면 빌드 속도가 너무 떨어진다. 그래서 켰다가 껐다가 하긴하는데 너무 귀찮다.</p>
<p>그럼 본격적으로 설정을 시작해보자.</p>
<h2>1. gradle.properties 파일을 변경</h2>
<p>프로젝트 Root에 있는 gradle.properties을 편집한다. 기존에 파일이 없다면 추가한다. 여기에는 gradle 빌드 할 때 인수를 설정할 수 있다.
한가지 더 알려주자면 프로젝트별로 설정하는 것외에도 모든 프로젝트에 설정을 추가할 수도 있다. 해당 파일의 경로는 OSX 기준으로 <code>~/.gradle/gradle.properties</code> 이다. 윈도우나 리눅스도 비슷한 경로에 있을 것으로 생각된다(없다면 추가해도 된다).</p>
<p><strong>gradle.properties</strong></p>
<pre class="hljs ini"><span class="hljs-comment"># Project-wide Gradle settings.</span>
<span class="hljs-comment"># IDE (eg Android Studio) users :</span>
<span class="hljs-comment"># Settings specified in this file will override any Gradle settings</span>
<span class="hljs-comment"># configured through the IDE.</span>
<span class="hljs-comment"># For more details on how to configure your build environment visit</span>
<span class="hljs-comment"># http : // www.gradle.org/docs/current/userguide/build_environment.html</span>
<span class="hljs-comment"># The Gradle daemon aims to improve the startup and execution time of Gradle.</span>
<span class="hljs-comment"># When set to true the Gradle daemon is to run the build.</span>
<span class="hljs-comment"># TODO : disable daemon on CI, Since Builds should BE clean and Reliable on servers</span>
org.gradle.daemon = true

<span class="hljs-comment"># Specifies the JVM arguments used for the daemon process.</span>
<span class="hljs-comment"># The setting is particularly useful for tweaking memory settings.</span>
<span class="hljs-comment"># Default value : -Xmx10248m -XX : MaxPermSize = 256M</span>
org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

<span class="hljs-comment"># When configured, Gradle will run in incubating parallel mode.</span>
<span class="hljs-comment"># This option should only be used with decoupled projects. More details, visit</span>
<span class="hljs-comment"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec : decoupled_projects</span>
org.gradle.parallel = true

<span class="hljs-comment"># Enables new incubating mode that makes Gradle selective when configuring projects.</span>
<span class="hljs-comment"># Only relevant projects are configured which results in faster builds for large multi-projects.</span>
<span class="hljs-comment"># http://www.gradle.org/docs/current/userguide/multi_project_builds.html #sec : configuration_on_demand</span>
org.gradle.configureondemand = true</pre>
<p>위 설정에 대한 간략한 설명은 아래와 같다.</p>
<ul>
<li><strong>org.gradle.daemon</strong> : 데몬 프로세스를 사용할지 여부 설정한다. true 설정시 gradle을 daemon 모드로 실행하여 빌드시 gradle을 다시 실행하는 시간을 줄여준다.</li>
<li><strong>org.gradle.jvmargs</strong> : 실행시 JVM 인수로 메모리를 설정을 늘려 메모리 부족으로 인한 속도저하를 막는 것이 목적이다. 따라서 적절한 양의 메모리를 할당해 주면 된다.</li>
<li><strong>org.gradle.parallel</strong> : gradle 병렬 빌드 모드를 설정한다. 여러 프로젝트를 빌드 할 때 효과가 있다.</li>
<li><strong>org.gradle.configureondemand</strong> : 관련 프로젝트가 있다면 필요한 부분만 빌드 설정한다.</li>
</ul>
<p>크게 성능이 향상되는 것 같지는 않지만 조금의 성능 향상은 있는 것 같다. 사실 다음에 소개할 gradle 버전 업이 훨씬 체감 성능 향상에 도움을 준다.</p>
<h2>2. Android Studio 1.3 / Gradle 2.4 이상 사용</h2>
<p>Android Studio 1.3 / Gradle 2.4 이상으로 버전업되면서 대폭 성능 향상이 있었다. 실제로 나의 경우엔 상당한 속도 향상이 있었다. 그래도 proguard를 적용하게되면 느리긴 마찬가지긴 하다.
구글의 설명을 보려면 <a href="https://www.youtube.com/watch?t=502&amp;v=f7ihSQ44WO0">Google I/O 2015 - What's New in Android Development Tools</a>을 참고하면 된다. 단, 주의할 것은 Android Studio 1.3 이상을 사용한다고 Gradle 2.4 이상을 무조건 사용하는 것은 아니라는 것이다. 신규 프로젝트가 아니어서 그런지 나의 프로젝트에서는 2.2.1을 그대로 사용하고 있었다(File &gt; Project Structure &gt; Project &gt; Gradle version에서 2.4로 변경함으로써 적용할 수 있다).</p>
<h2>3. gradle를 오프라인 모드로 변경</h2>
<p>다른 사람들은 이 방법이 아주 효과적이었다고 하는데 나의 경우는 크게 차이가 나지 않았다(proguard로 인한 속도 저하라서 이 방법에 큰 도움이 되지 않았던 것 같다). 어쨌든 이 설정을 적용하면 gradle에서 매번 최신 버전을 확인하러가는 것을 생략 해 준다. 단, 신규 dependency를 추가하거나 변경하는 경우는 이 설정을 해제해야 한다. 약간은 귀찮을 수 있지만 dependency 변경은 크게 자주 발생하는 경우는 아니므로 문제되지 않을 것으로 생각된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-09-29-android-gradle-builds-speed-up-1.png" alt="Offline work" width="1666" height="1348" />
Android Studio&gt; Preferences&gt; Gradle 의 Offline work에 체크.</p>
<h2>4. jcenter Maven Repository 사용</h2>
<p><a href="https://bintray.com/bintray/jcenter">jcenter</a>와 <a href="http://search.maven.org/">Maven Central</a>은 모두 Java / Android 라이브러리들을 배포한다. 초기 안드로이드 스튜디오에서 프로젝트를 생성하면 기본적으로 Maven Central를 사용(<code>repositories { mavenCentral() }</code>)하도록 세팅되었다. 하지만 이제는 안드로이드 스튜디오에서 프로젝트를 생성하면 jcenter가 사용(<code>repositories { jcenter() }</code>)되도록 세팅된다. 이 부분이 변경된 이유는 여러가지가 있다고 하지만 그중에서 빌드 속도에 영향을 줄 수 있는 부분이 있다. jcenter는 CDN을 통해 라이브러리를 배포하기 때문에 Maven Central에 비해 빠르다는 것이다. 자세한 내용은 <a href="http://blog.bintray.com/2015/02/09/android-studio-migration-from-maven-central-to-jcenter/">Android Studio – Migration from Maven Central to JCenter</a>를 참고하자.</p>
<h2>5. <a href="http://kevinpelgrims.com/blog/2015/06/11/speeding-up-your-gradle-builds/">Speeding up Gradle builds</a></h2>
<p><a href="http://kevinpelgrims.com/blog/2015/06/11/speeding-up-your-gradle-builds/">Speeding up Gradle builds</a>에서는 몇가지 방법을 더 안내하고 있다. 간략하게 요약하면 아래와 같다(위의 설명들과 유사한 부분도 많다). 상세한 설명은 위 링크를 참조하기 바란다.</p>
<h3>Maven Central vs. JCenter</h3>
<p>mavenCentral() 대신 jcenter()를 사용해라.</p>
<h3>Get the latest version of Gradle</h3>
<p>최신 버전의 Gradle을 사용하라.</p>
<h3>Gradle properties</h3>
<p>아래의 Gradle properties를 적용하라(위의 설명이 더 상세하다).</p>
<pre class="hljs ini">org.gradle.parallel=true
org.gradle.daemon=true
org.gradle.jvmargs=-Xms256m -Xmx1024m</pre>
<h3>How to use Gradle properties</h3>
<p>Gradle properties를 프로젝트별로 설정하기보다 전역으로 설정하라.</p>
<h3>다중 모듈 빌드</h3>
<p>다중 모뮬을 사용하는 경우에 속도 향상 방법이 안내되어 있으니 필요한 경우에 원본글에 가서 참조 바란다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/25/if-android-theme-parent-doesnt-set-attribute/</id><title type="html">안드로이드 테마 정의시 parent를 지정하지 않을 경우 Error: Style Resource definition cycle 발생</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/25/if-android-theme-parent-doesnt-set-attribute/"/><published>2015-09-25T14:18:08+09:00</published><updated>2015-09-25T14:18:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[이번 포스팅은 정확하지 않은 정보일 확률이 높다. 하지만 비슷한 경우를 만나게되면 임시 해결 방법으론 도움이 될 것 같아 글을 남겨 본다. 이번에 작업하면서 발생한 문제를 해결하는 과정에서 이것저것 해보면서 알게된 부분을 정리해보려고 한다. 일단 문제를 만난 상황부터 이야기하자면 이렇다. 작업 중에 DialogTheme를 정의해서 사용할 일이 있었다. 그래서 다음과 같이 정의해서 사용중이었다. Theme가 무엇인지에 대해서는 http://developer.android.com/intl/ko/guide/topics/ui/themes.html 를 참고하자. values/styles.xml <style name="af_DialogTheme.Base"> <item name="android:windowNoTitle">true</item> <item name="android:windowFullscreen">false</item> <item name="android:windowBackground">@android:color/transparent</item> <item name="android:colorBackgroundCacheHint">@null</item> <item name="android:windowIsTranslucent">true</item> </style> <style name="af_DialogTheme" parent="af_DialogTheme.Base"/> 굳이 af_DialogTheme.Base를 정의하고 다시 af_DialogTheme에서 이를 상속받아 처리하는 것에는 이유가 있다. Theme에서 사용하는 속성들 또는 상황이 API 버전에 따라 다르기 때문이다. 예를 들어 내가 버전별로 다르게 사용한 style은 아래와 같다. values-v19/styles.xml <style name="af_DialogTheme" parent="af_DialogTheme.Base"> <item name="android:windowTranslucentStatus">true</item> </style> values-v21/styles.xml <style name="af_DialogTheme" parent="af_DialogTheme.Base"> <item name="android:statusBarColor">@android:color/transparent</item> <item name="android:windowTranslucentStatus">false</item> </style> 위 처럼 일부 속성만 replace하려면 공통 부분을 부모 스타일로 정의하고 받아서 쓰도록 해야한다. 같은 테마 이름을 사용하게되면 대체 xml 문서(values-v19/styles.xml, values-v21/styles.xml)에서 정의된 속성을 반영하는게 아니라 통째로 덮어써서 공통 부분은 정의가 안된 것과 동일하게 처리된다. 이렇게 통째로 덮어쓰지 않고 부분만 변경되게 하기 위해 parent 속성을 사용하는 것이다. 여기까지가 문제가 되는 부분에 대한 설명이다. 위의 내용을 보고 문제가 될 수 있는 부분을 찾을 수 있겠는가? 이유를 안다면 아래의 내용을 볼 필요가 없다. 나는 몰랐기 때문에 당혹스러웠다. 이 상태로 빌드해서 테스트하면 아무 이상도 없고 예상대로 동작한다. 그런데 release를 위해 빌드를 하는 순간 아래의 에러를 만나게 된다. Error:(11) Error: Style Resource definition cycle: AppThemeDialog => af_DialogTheme => af_DialogTheme.Base => af_DialogTheme [ResourceCycle] <style name="AppThemeDialog" parent="af_DialogTheme"/> ~~~~~~~~~~~~~~~~~~~~~~~ Explanation for issues of type "ResourceCycle": There should be no cycles in resource definitions as this can lead to runtime exceptions. 당황스럽다. 분명 테스트시에는 한번도 본 적 없는 오류다. 내용을 보자. ResourceCycle에 관련된 문제로 보인다. 맨 위의 문장과 함께 보면 Resource의 순환참조라는 이야기로 보인다. 하지만 위의 코드들을 보면 알겠지만 순환참조라고 할만한 내용은 없다. 난 절대로 오류 메시지처럼 참조 시키지 않았다. 처음엔 이유를 몰라 어떻게 해야 할지 몰랐다. af_DialogTheme.Base => af_DialogTheme라고 나오는데 그렇게 지정하지 않았는데 왜 알아서 참조를 한다고 난리일까? 고민을 하던 중 옆에 있던 후배가 하는 말이 "저기 이름에 있는 . 때문에 그런것 아니냐?"라는 것이다. 난 말도 안된다고 했다. 어떻게 그렇게 해석 될 수 있느냐? 게다가 .Base라는 구문은 안드로이드 내부 테마들이 정의될 때 사용하던 네이밍 규칙을 따라 한 것인데 그럴리가 없다는 것이 내 생각이었다. 하지만 결함의 발견은 절대 그럴리가 없다는 부분부터 시작해야 한다. 결론은 후배의 말이 맞았다. name을 af_DialogTheme.Base에서 af_DialogTheme_Base로 변경하자 오류는 사라졌다. 아... 어의없다. 보다 확실히 하기 위해 아래와 같이 name을 둔 채로 parent를 추가했다. 당연히 상속받을 것은 없으므로 공백으로... values/styles.xml <style name="af_DialogTheme.Base" parent=""> <item name="android:windowNoTitle">true</item> 이렇게 처리해도 오류는 사라졌다. 그럼 이제 경험에 의한 결론을 내려보자(서두에 이야기한 것 처럼 그냥 내가 추측하는 것이니 틀릴 확률이 높다는 것을 감안하고 보자). style 정의시 name에 .을 사용하고 parent가 지정되지 않았다면 . 앞부분의 name을 parent로 정의한 것으로 보고 상속을 시도한다. 결론적으로 내 의도는 .Base가 붙은 녀석이 부모가 되는 것을 원하고 네이밍한 것이 반대로 자식이 되어 순환참조를 발생시키게 한 것이다. 그런데 상황을 보자면 위에 정리한 내용이 맞다고 보아진다. 그런데 이상하다. 왜 release 모드에서만 오류가 나는가? 그래서 오류 부분을 조금 더 자세히 보니 :app:lintVitalRelease 영역에서 오류가 난다. 그렇다. lint 오류다. 오류가 의심되는 코드를 검증하는 과정에서 오류를 발생시킨 것이다. 여기서 최종적인 나의 생각(추측)을 정리하겠다. 예전(구버전 안드로이드)에는 위의 설명대로 .을 기준으로한 theme(style) 상속의 개념이 사용되었기 때문에 lint에 추가되어 있었다. 그런데 시간이 지나면서 이 기능은 제거되고 parent라는 속성이 추가되었으나 lint에서는 검증 코드가 제외되지 않았다. 이렇게 생각하는 이유는 실제로 lint 영역에서만 오류가 나지 동작시에는 아무런 문제가 없다. 그래서 어떻게 하면 되나? style를 사용한 theme 정의시 parent가 없다면 name에 .을 사용하지 말거나 공백으로라도 parent 속성을 사용하자. Style Resource definition cycle 오류를 만난다면 위의 글을 참고해서 해결에 도움이 되었으면 하는 바램이다. 나도 오늘 후배의 한마디가 아니었다면 아직도 헬게이트를 경험하고 있을지도 모른다.]]></summary><content type="html"><![CDATA[<p>이번 포스팅은 정확하지 않은 정보일 확률이 높다. 하지만 비슷한 경우를 만나게되면 임시 해결 방법으론 도움이 될 것 같아 글을 남겨 본다.
이번에 작업하면서 발생한 문제를 해결하는 과정에서 이것저것 해보면서 알게된 부분을 정리해보려고 한다. 일단 문제를 만난 상황부터 이야기하자면 이렇다.</p>
<p>작업 중에 DialogTheme를 정의해서 사용할 일이 있었다. 그래서 다음과 같이 정의해서 사용중이었다. Theme가 무엇인지에 대해서는 <a href="http://developer.android.com/intl/ko/guide/topics/ui/themes.html">http://developer.android.com/intl/ko/guide/topics/ui/themes.html</a> 를 참고하자.</p>
<p><strong>values/styles.xml </strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"af_DialogTheme.Base"</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowNoTitle"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowFullscreen"</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:colorBackgroundCacheHint"</span>&gt;</span>@null<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"af_DialogTheme"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"af_DialogTheme.Base"</span>/&gt;</span><span class=""></span></pre>
<p>굳이 <code>af_DialogTheme.Base</code>를 정의하고 다시 <code>af_DialogTheme</code>에서 이를 상속받아 처리하는 것에는 이유가 있다. Theme에서 사용하는 속성들 또는 상황이 API 버전에 따라 다르기 때문이다. 예를 들어 내가 버전별로 다르게 사용한 style은 아래와 같다.</p>
<p><strong>values-v19/styles.xml</strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"af_DialogTheme"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"af_DialogTheme.Base"</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>
<p><strong>values-v21/styles.xml</strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"af_DialogTheme"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">"af_DialogTheme.Base"</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowTranslucentStatus"</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span>
</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></pre>
<p>위 처럼 일부 속성만 replace하려면 공통 부분을 부모 스타일로 정의하고 받아서 쓰도록 해야한다. 같은 테마 이름을 사용하게되면 대체 xml 문서(values-v19/styles.xml, values-v21/styles.xml)에서 정의된 속성을 반영하는게 아니라 통째로 덮어써서 공통 부분은 정의가 안된 것과 동일하게 처리된다. 이렇게 통째로 덮어쓰지 않고 부분만 변경되게 하기 위해 parent 속성을 사용하는 것이다.</p>
<p>여기까지가 문제가 되는 부분에 대한 설명이다. 위의 내용을 보고 문제가 될 수 있는 부분을 찾을 수 있겠는가? 이유를 안다면 아래의 내용을 볼 필요가 없다. 나는 몰랐기 때문에 당혹스러웠다.</p>
<p>이 상태로 빌드해서 테스트하면 아무 이상도 없고 예상대로 동작한다. 그런데 release를 위해 빌드를 하는 순간 아래의 에러를 만나게 된다.</p>
<pre><code>Error:(11) Error: Style Resource definition cycle: AppThemeDialog =&gt; af_DialogTheme =&gt; af_DialogTheme.Base =&gt; af_DialogTheme [ResourceCycle]
    &lt;style name="AppThemeDialog" parent="af_DialogTheme"/&gt;
                                 ~~~~~~~~~~~~~~~~~~~~~~~
   Explanation for issues of type "ResourceCycle":
   There should be no cycles in resource definitions as this can lead to
   runtime exceptions.</code></pre>
<p>당황스럽다. 분명 테스트시에는 한번도 본 적 없는 오류다. 내용을 보자. <code>ResourceCycle</code>에 관련된 문제로 보인다. 맨 위의 문장과 함께 보면 Resource의 순환참조라는 이야기로 보인다. 하지만 위의 코드들을 보면 알겠지만 순환참조라고 할만한 내용은 없다. 난 절대로 오류 메시지처럼 참조 시키지 않았다.</p>
<p>처음엔 이유를 몰라 어떻게 해야 할지 몰랐다. <code>af_DialogTheme.Base =&gt; af_DialogTheme</code>라고 나오는데 그렇게 지정하지 않았는데 왜 알아서 참조를 한다고 난리일까? 고민을 하던 중 옆에 있던 후배가 하는 말이 &quot;저기 이름에 있는 . 때문에 그런것 아니냐?&quot;라는 것이다. 난 말도 안된다고 했다. 어떻게 그렇게 해석 될 수 있느냐? 게다가 .Base라는 구문은 안드로이드 내부 테마들이 정의될 때 사용하던 네이밍 규칙을 따라 한 것인데 그럴리가 없다는 것이 내 생각이었다. 하지만 <strong>결함의 발견은 절대 그럴리가 없다는 부분부터 시작해야 한다.</strong></p>
<p>결론은 후배의 말이 맞았다. name을 <code>af_DialogTheme.Base</code>에서 <code>af_DialogTheme_Base</code>로 변경하자 오류는 사라졌다. 아... 어의없다.
보다 확실히 하기 위해 아래와 같이 name을 둔 채로 parent를 추가했다. 당연히 상속받을 것은 없으므로 공백으로...</p>
<p><strong>values/styles.xml</strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"af_DialogTheme.Base"</span> <span class="hljs-attr">parent</span>=<span class="hljs-string">""</span>&gt;</span><span class="xml">
    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"android:windowNoTitle"</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span></span></pre>
<p>이렇게 처리해도 오류는 사라졌다. 그럼 이제 경험에 의한 결론을 내려보자(서두에 이야기한 것 처럼 그냥 내가 추측하는 것이니 틀릴 확률이 높다는 것을 감안하고 보자).</p>
<blockquote>
<p>style 정의시 name에 .을 사용하고 parent가 지정되지 않았다면 . 앞부분의 name을 parent로 정의한 것으로 보고 상속을 시도한다.</p>
</blockquote>
<p>결론적으로 내 의도는 .Base가 붙은 녀석이 부모가 되는 것을 원하고 네이밍한 것이 반대로 자식이 되어 순환참조를 발생시키게 한 것이다.</p>
<p>그런데 상황을 보자면 위에 정리한 내용이 맞다고 보아진다. 그런데 이상하다. 왜 release 모드에서만 오류가 나는가? 그래서 오류 부분을 조금 더 자세히 보니 <code>:app:lintVitalRelease</code> 영역에서 오류가 난다. 그렇다. <a href="https://ko.wikipedia.org/wiki/Lint">lint</a> 오류다. 오류가 의심되는 코드를 검증하는 과정에서 오류를 발생시킨 것이다.</p>
<p>여기서 최종적인 나의 생각(추측)을 정리하겠다.</p>
<blockquote>
<p>예전(구버전 안드로이드)에는 위의 설명대로 .을 기준으로한 theme(style) 상속의 개념이 사용되었기 때문에 lint에 추가되어 있었다. 그런데 시간이 지나면서 이 기능은 제거되고 parent라는 속성이 추가되었으나 lint에서는 검증 코드가 제외되지 않았다.</p>
</blockquote>
<p>이렇게 생각하는 이유는 실제로 lint 영역에서만 오류가 나지 동작시에는 아무런 문제가 없다.</p>
<h3>그래서 어떻게 하면 되나?</h3>
<blockquote>
<p>style를 사용한 theme 정의시 parent가 없다면 name에 .을 사용하지 말거나 공백으로라도 parent 속성을 사용하자.</p>
</blockquote>
<p><code>Style Resource definition cycle</code> 오류를 만난다면 위의 글을 참고해서 해결에 도움이 되었으면 하는 바램이다. 나도 오늘 후배의 한마디가 아니었다면 아직도 헬게이트를 경험하고 있을지도 모른다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/25/android-6-apache-http-client-removal/</id><title type="html">Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/25/android-6-apache-http-client-removal/"/><published>2015-09-25T13:47:37+09:00</published><updated>2015-09-25T13:47:37+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[지난 포스팅 Android 6(API 23)의 getColor() deprecated 대응 + getDrawable() deprecated에서 잠깐 언급했던 Apache HTTP 클라이언트 제거에 대해 이야기하고자 한다. 우선 안드로이드에 안내하고 있는 원문은 아래와 같다. 영문 : Apache HTTP Client Removal 한글 : Apache HTTP 클라이언트 제거 한글 문서의 내용은 아래와 같다. Apache HTTP 클라이언트에 대한 지원을 제거합니다. 앱이 이 클라이언트를 사용하고 Android 2.3(API 레벨 9) 이상을 대상으로 하는 경우, HttpURLConnection 클래스를 대신 사용하세요. 이는 투명한 압축과 응답 캐싱을 통해 네트워크 사용량을 줄이고 전력 소모를 최소화하기 때문에 API가 더 효율적입니다. Apache HTTP API를 계속 사용하려면 우선 다음과 같은 컴파일-시간 종속성을 build.gradle 파일에서 선언해야 합니다. android { useLibrary 'org.apache.http.legacy' } 이 부분이 제거되면서 문제가 되는 부분은 위의 안내와 같이 gradle에 임시 코드를 넣음으로써 해결이 가능하다. 하지만 제거 과정이 여러가지 문제를 일으켰다. 사실 안드로이드에서는 해당 기능을 Deprecated하고 대체 기능의 사용을 권장하고 있었으나 이를 사용하는 오픈소스 라이브러리들이 미리 대응을 하지 않았던 것이 문제가 되었다. 나의 경우는 ACRA와 Android Asynchronous Http Client가 해당 기능을 사용해서 구현되어 있어서 org.apache.http.legacy를 통해 급한 문제들은 해결했었다. 현재 기준으로 Android Asynchronous Http Client는 1.4.9로 버전업 되면서 Http에 관련된 부분을 대체 라이브러리로 교체함으로써 문제가 해결되었고 ACRA의 경우는 4.6.2로 버전 기준으로 처리가 되었다고 어디서 본것 같았는데 실제로는 빌드 과정에서 오류가 발생했다. 그래서 다시 알아보니 4.7.0 버전에서 HtttpUrlConnection를 사용함으로써 Android M (6.0)을 정식 지원한다고 안내되어 있다. 하지만 아직 RC2로 정식 버전업이 되지 않았다. 나의 경우는 조금만 더 기다리면 useLibrary 'org.apache.http.legacy'를 사용하지 않아도 될 것으로 예상된다. 사실 Android Asynchronous Http Client도 현재 버전에서는 문제가 있다. 공식 사이트에서는 해당 현상에 대한 이야기는 없으나 나의 경우엔 proguard 적용시 완료 callback이 호출되지 않는 문제가 있었다. 관련해서는 Android Asynchronous Http Client(android-async-http) 1.4.9 사용시 Proguard를 적용하면 onSuccess 또는 onFailure이 호출되지 않는 문제 해결에 별도로 포스팅한다. 어쨌든 이 문제는 시간이 지나면서 오픈 소스들이 대응을 시작하면 대부분 해결될 것으로 생각된다.]]></summary><content type="html"><![CDATA[<p>지난 포스팅 <a href="https://blog.asamaru.net/2015/08/28/android-getcolor-getdrawable-deprecated/">Android 6(API 23)의 getColor() deprecated 대응 + getDrawable() deprecated</a>에서 잠깐 언급했던 <a href="https://developer.android.com/intl/ko/preview/behavior-changes.html#behavior-apache-http-client">Apache HTTP 클라이언트 제거</a>에 대해 이야기하고자 한다.</p>
<p>우선 안드로이드에 안내하고 있는 원문은 아래와 같다.</p>
<ul>
<li>영문 : <a href="https://developer.android.com/preview/behavior-changes.html#behavior-apache-http-client">Apache HTTP Client Removal</a></li>
<li>한글 : <a href="https://developer.android.com/intl/ko/preview/behavior-changes.html#behavior-apache-http-client">Apache HTTP 클라이언트 제거</a></li>
</ul>
<p>한글 문서의 내용은 아래와 같다.</p>
<blockquote>
<p>Apache HTTP 클라이언트에 대한 지원을 제거합니다. 앱이 이 클라이언트를 사용하고 Android 2.3(API 레벨 9) 이상을 대상으로 하는 경우, HttpURLConnection 클래스를 대신 사용하세요. 이는 투명한 압축과 응답 캐싱을 통해 네트워크 사용량을 줄이고 전력 소모를 최소화하기 때문에 API가 더 효율적입니다. Apache HTTP API를 계속 사용하려면 우선 다음과 같은 컴파일-시간 종속성을 build.gradle 파일에서 선언해야 합니다.</p>
<pre class="hljs gradle">android {
useLibrary <span class="hljs-string">'org.apache.http.legacy'</span>
}</pre>
</blockquote>
<p>이 부분이 제거되면서 문제가 되는 부분은 위의 안내와 같이 gradle에 임시 코드를 넣음으로써 해결이 가능하다. 하지만 제거 과정이 여러가지 문제를 일으켰다. 사실 안드로이드에서는 해당 기능을 Deprecated하고 대체  기능의 사용을 권장하고 있었으나 이를 사용하는 오픈소스 라이브러리들이 미리 대응을 하지 않았던 것이 문제가 되었다. 나의 경우는 <a href="https://github.com/ACRA/acra">ACRA</a>와 <a href="http://loopj.com/android-async-http/">Android Asynchronous Http Client</a>가 해당 기능을 사용해서 구현되어 있어서 <code>org.apache.http.legacy</code>를 통해 급한 문제들은 해결했었다.</p>
<p>현재 기준으로 <a href="http://loopj.com/android-async-http/">Android Asynchronous Http Client</a>는 1.4.9로 버전업 되면서 Http에 관련된 부분을 대체 라이브러리로 교체함으로써 문제가 해결되었고 <a href="https://github.com/ACRA/acra">ACRA</a>의 경우는 4.6.2로 버전 기준으로 처리가 되었다고 어디서 본것 같았는데 실제로는 빌드 과정에서 오류가 발생했다. 그래서 다시 알아보니 4.7.0 버전에서 HtttpUrlConnection를 사용함으로써 Android M (6.0)을 정식 지원한다고 안내되어 있다. 하지만 아직 RC2로 정식 버전업이 되지 않았다. 나의 경우는 조금만 더 기다리면 useLibrary 'org.apache.http.legacy'를 사용하지 않아도 될 것으로 예상된다.</p>
<p>사실 <a href="http://loopj.com/android-async-http/">Android Asynchronous Http Client</a>도 현재 버전에서는 문제가 있다. 공식 사이트에서는 해당 현상에 대한 이야기는 없으나 나의 경우엔 proguard 적용시 완료 callback이 호출되지 않는 문제가 있었다. 관련해서는 <a href="https://blog.asamaru.net/2015/09/25/android-async-http-1-dot-4-9-not-called-onsuccess-or-onfailure/">Android Asynchronous Http Client(android-async-http) 1.4.9 사용시 Proguard를 적용하면 onSuccess 또는 onFailure이 호출되지 않는 문제 해결</a>에 별도로 포스팅한다.</p>
<p>어쨌든 이 문제는 시간이 지나면서 오픈 소스들이 대응을 시작하면 대부분 해결될 것으로 생각된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/25/android-async-http-1-dot-4-9-not-called-onsuccess-or-onfailure/</id><title type="html">Android Asynchronous Http Client(android-async-http) 1.4.9 사용시 Proguard를 적용하면 onSuccess 또는 onFailure이 호출되지 않는 문제 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/25/android-async-http-1-dot-4-9-not-called-onsuccess-or-onfailure/"/><published>2015-09-25T12:10:09+09:00</published><updated>2015-09-25T12:10:09+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 앱 개발시 사용하던 android-async-http가 최근 1.4.9 버전으로 버전업되었다. 1.4.8 이하 버전을 사용할 경우 이전에 포스팅한 Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거와 관련된 문제가 있다. 그런데 나는 이 1.4.9 버전을 사용하면서 다른 문제가 생겼다. 빌드에서 오류나 경고는 전혀 나타나지 않지만 URL 호출을 하면 onStart, onProgress까지는 들어오는데 onSuccess, onFailure를 호출해 주지 않았다. 그런데 이 현상이 proguard를 적용할 때만 발생한다는 것이다. 정밀하게 테스트해보지 않아 정확한 원인을 찾지는 못했지만 대략적인 상황을 보면 proguard에 의해 난독화 처리되는 부분이 문제로 보인다(그런데 실제로 내부 소스를 살펴보면 reflection 등을 사용하거나해서 난독화에 영향을 받을 만한 부분을 찾지 못했다). 우선 내가 사용했던 proguard의 설정 중 영향을 줄만한 부분은 다음과 같다. 나머지는 대부분 keep 등의 설정으로 android-async-http에 영향을 줄 만한 부분은 없다. -optimizationpasses 5 -repackageclasses '' -allowaccessmodification -overloadaggressively -verbose 사실 이 문제에 대해서 검색해보면 다른 이야기들이 많다. 대부분 호출이 되지 않는다는 질문을 하는 사람들의 경우는 onSuccess, onFailure의 오버로딩에 관련된 문제이다. 실제로 android-async-http는 ResponseHandler에 따라 여러 개의 onSuccess, onFailure 함수들을 가지고 있다. 이 함수들은 반환되는 데이터의 형태에 따라 다른 함수를 호출해주도록 되어있다. 이 부분은 편리하긴하나 개인적으론 조금 꺼려지는 형태다. 질문이 많이 올라오는 것처럼 반환 형태에 맞는 함수를 구현하는 것을 누락시킬 수 있기 때문이다. 어쨌든 나의 경우는 이에 해당하지 않았다. 확인을 위해 라이브러리 소스를 일부 수정해서 테스트 했으나 그 전단계까지도 들어오지 않았다. 이 문제는 proguard를 적용했을 때만 발생하는 문제였으므로 아래와 같이 proguard에 추가해주면 간단히 해결된다. -keep class com.loopj.android.http.** { *; } -keep interface com.loopj.android.** { *; } 그런데 개인적으로 이 해결법은 어떤 것이 문제인지 확인하지도 못했을 뿐아니라 문제를 해결하기 위해 통째로 proguard에서 제외하는 것이 맘에들지 않았다. 그래서 수십번의 빌드를 통해 어느 클래스가 문제를 일으키는지 찾아냈다. 아.. 인간 승리다. 수십여개의 클래스들을 넣어보고 빼보고... 결론은 아래의 코드를 proguard에 추가하면 문제가 해결된다. -keep class com.loopj.android.http.HttpGet { *; } 대충 소스를 보니 HttpGet는 이번에 Apache HTTP 클라이언트가 제거되면서 이를 대체하기 위한 라이브러리를 교체하면서 추가된 클래스로 보인다. 그런데 소스를 봐도 이게 왜 proguard에 영향을 받는지 잘 모르겠지만 위의 코드를 넣음으로써 해결이 되는 것은 확인했다. 더 자세히 코드를 추적해 간다면 원인을 찾을 수 있을지도 모르지만 굳이 거기까지 내가할 필요는 없다고 보고 github에 이슈를 등록하려고 한다. 해당 개발자들이 다음버전에 문제를 해결해 주기를 바라며... UPDATE - 2015-10-15 오늘 사용자에게서 오류가 보고 되었다. 문제는 파일업로드가 되지 않는다는 것인데 문제의 원인은 위 글의 내용과 동일하다. 정확히는 안드로이드 버전 문제도 포함된다. 하위 버전의 안드로이드에서는 위의 설정만으로는 해결이 되지 않았던 것이다. 결론은 아래의 내용을 proguard에 대체해서 넣어야 한다는 것. 상황적으로 봤을 때 내가 사용한 범위를 벗어나면 proguard와 충돌하는 부분이 더 있을 수 있을 것 같다(하지만 지금 내가 다 찾기엔 무리이므로 android-async-http 개발자분들에게 넘긴다). -keep class cz.msebera.android.httpclient.HttpResponse { *; } -keep class com.loopj.android.http.HttpGet { *; } -keep class com.loopj.android.http.HttpDelete { *; }]]></summary><content type="html"><![CDATA[<p>안드로이드 앱 개발시 사용하던 <a href="https://github.com/loopj/android-async-http">android-async-http</a>가 최근 1.4.9 버전으로 버전업되었다. 1.4.8 이하 버전을 사용할 경우 이전에 포스팅한 <a href="https://blog.asamaru.net/2015/09/25/android-6-apache-http-client-removal/">Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거</a>와 관련된 문제가 있다.</p>
<p>그런데 나는 이 1.4.9 버전을 사용하면서 다른 문제가 생겼다. 빌드에서 오류나 경고는 전혀 나타나지 않지만 URL 호출을 하면 onStart, onProgress까지는 들어오는데 onSuccess, onFailure를 호출해 주지 않았다. 그런데 이 현상이 proguard를 적용할 때만 발생한다는 것이다. 정밀하게 테스트해보지 않아 정확한 원인을 찾지는 못했지만 대략적인 상황을 보면 proguard에 의해 난독화 처리되는 부분이 문제로 보인다(그런데 실제로 내부 소스를 살펴보면 reflection 등을 사용하거나해서 난독화에 영향을 받을 만한 부분을 찾지 못했다).</p>
<p>우선 내가 사용했던 proguard의 설정 중 영향을 줄만한 부분은 다음과 같다. 나머지는 대부분 keep 등의 설정으로 <a href="https://github.com/loopj/android-async-http">android-async-http</a>에 영향을 줄 만한 부분은 없다.</p>
<pre><code>-optimizationpasses 5
-repackageclasses ''
-allowaccessmodification
-overloadaggressively
-verbose</code></pre>
<p>사실 이 문제에 대해서 검색해보면 다른 이야기들이 많다. 대부분 호출이 되지 않는다는 질문을 하는 사람들의 경우는 onSuccess, onFailure의 오버로딩에 관련된 문제이다. 실제로 android-async-http는 ResponseHandler에 따라 여러 개의 onSuccess, onFailure 함수들을 가지고 있다. 이 함수들은 반환되는 데이터의 형태에 따라 다른 함수를 호출해주도록 되어있다. 이 부분은 편리하긴하나 개인적으론 조금 꺼려지는 형태다. 질문이 많이 올라오는 것처럼 반환 형태에 맞는 함수를 구현하는 것을 누락시킬 수 있기 때문이다. 어쨌든 나의 경우는 이에 해당하지 않았다. 확인을 위해 라이브러리 소스를 일부 수정해서 테스트 했으나 그 전단계까지도 들어오지 않았다.</p>
<p>이 문제는 proguard를 적용했을 때만 발생하는 문제였으므로 아래와 같이 proguard에 추가해주면 간단히 해결된다.</p>
<pre><code>-keep class com.loopj.android.http.** { *; }
-keep interface com.loopj.android.** { *; }</code></pre>
<p>그런데 개인적으로 이 해결법은 어떤 것이 문제인지 확인하지도 못했을 뿐아니라 문제를 해결하기 위해 통째로 proguard에서 제외하는 것이 맘에들지 않았다. 그래서 수십번의 빌드를 통해 어느 클래스가 문제를 일으키는지 찾아냈다. 아.. 인간 승리다. 수십여개의 클래스들을 넣어보고 빼보고...</p>
<p>결론은 아래의 코드를 proguard에 추가하면 문제가 해결된다.</p>
<pre><code>-keep class com.loopj.android.http.HttpGet { *; }</code></pre>
<p>대충 소스를 보니 HttpGet는 이번에 Apache HTTP 클라이언트가 제거되면서 이를 대체하기 위한 라이브러리를 교체하면서 추가된 클래스로 보인다. 그런데 소스를 봐도 이게 왜 proguard에 영향을 받는지 잘 모르겠지만 위의 코드를 넣음으로써 해결이 되는 것은 확인했다. 더 자세히 코드를 추적해 간다면 원인을 찾을 수 있을지도 모르지만 굳이 거기까지 내가할 필요는 없다고 보고 github에 이슈를 등록하려고 한다. 해당 개발자들이 다음버전에 문제를 해결해 주기를 바라며...</p>
<h2>UPDATE - 2015-10-15</h2>
<p>오늘 사용자에게서 오류가 보고 되었다. 문제는 파일업로드가 되지 않는다는 것인데 문제의 원인은 위 글의 내용과 동일하다. 정확히는 안드로이드 버전 문제도 포함된다. 하위 버전의 안드로이드에서는 위의 설정만으로는 해결이 되지 않았던 것이다. 결론은 아래의 내용을 proguard에 대체해서 넣어야 한다는 것. 상황적으로 봤을 때 내가 사용한 범위를 벗어나면 proguard와 충돌하는 부분이 더 있을 수 있을 것 같다(하지만 지금 내가 다 찾기엔 무리이므로 android-async-http 개발자분들에게 넘긴다).</p>
<pre><code>-keep class cz.msebera.android.httpclient.HttpResponse { *; }
-keep class com.loopj.android.http.HttpGet { *; }
-keep class com.loopj.android.http.HttpDelete { *; }</code></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/25/git-tracking-empty-directories/</id><title type="html">Git : 빈 디렉토리 추가하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/25/git-tracking-empty-directories/"/><published>2015-09-25T10:47:30+09:00</published><updated>2015-09-25T10:47:30+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="git" label="git" /><summary><![CDATA[기존에는 SVN을 주로 사용하다가 최근 Git를 사용하기 시작했다. 맛보기를 시작한지는 조금 됐는데 본격적으로 사용하려고하니 아직 많이 미숙하다. 오늘은 작업을 하다가 빈 디렉토리를 추가하려고 하니 동작을 하지 않았다. SVN에서는 당연히 추가가 가능했는데 Git에서는 add로 추가해도 new file로 나타나지 않았다. 그래서 찾아보니 원래 Git는 빈 디렉토리는 Tracking 하지 않는다는 글들을 보게되었다. 이런... 불필요한 것을 관리하지 않는 것은 좋지만 log 디렉토리 등과 같이 빈 디렉토리가 추가되어야 할 상황이 있는데 어떻게 하지? 다행히 간단한 방법이 있었다. 사실 간단히 생각하면 아무 파일이나 넣어서 빈 디렉토리가 되지 않으면 되지 않는가? 그래서 많이 사용하는 방법이 .gitignore 또는 .keep 파일을 넣어서 Tracking하는 것이다. 해당 폴더에 가서 아래의 명령으로 .keep 파일을 만들고 add 하면 된다. touch .keep 한번에 모든 폴더를 검사해서 .keep 파일 넣기. git clean -nd | sed s/'^Would remove '// | xargs -I{} touch "{}.keep" log 폴더와 같이 정말 빈 디렉토리만 존재하고 내부에 생성되는 파일은 Tracking할 필요가 없을 때는 .gitignore 파일을 만들고 아래의 내용을 넣는다. #ignore all files in this dir... * #... except for this one. !.gitignore]]></summary><content type="html"><![CDATA[<p>기존에는 SVN을 주로 사용하다가 최근 Git를 사용하기 시작했다. 맛보기를 시작한지는 조금 됐는데 본격적으로 사용하려고하니 아직 많이 미숙하다.</p>
<p>오늘은 작업을 하다가 빈 디렉토리를 추가하려고 하니 동작을 하지 않았다. SVN에서는 당연히 추가가 가능했는데 Git에서는 add로 추가해도 new file로 나타나지 않았다.</p>
<p>그래서 찾아보니 원래 Git는 빈 디렉토리는 Tracking 하지 않는다는 글들을 보게되었다. 이런... 불필요한 것을 관리하지 않는 것은 좋지만 log 디렉토리 등과 같이 빈 디렉토리가 추가되어야 할 상황이 있는데 어떻게 하지?</p>
<p>다행히 간단한 방법이 있었다. 사실 간단히 생각하면 아무 파일이나 넣어서 빈 디렉토리가 되지 않으면 되지 않는가? 그래서 많이 사용하는 방법이 .gitignore 또는 .keep 파일을 넣어서 Tracking하는 것이다.</p>
<p>해당 폴더에 가서 아래의 명령으로 .keep 파일을 만들고 add 하면 된다.</p>
<pre class="hljs bash">touch .keep</pre>
<p>한번에 모든 폴더를 검사해서 .keep 파일 넣기.</p>
<pre class="hljs bash">git clean -nd | sed s/<span class="hljs-string">'^Would remove '</span>// | xargs -I{} touch <span class="hljs-string">"{}.keep"</span></pre>
<p>log 폴더와 같이 정말 빈 디렉토리만 존재하고 내부에 생성되는 파일은 Tracking할 필요가 없을 때는 .gitignore 파일을 만들고 아래의 내용을 넣는다.</p>
<pre><code>#ignore all files in this dir...
*
#... except for this one.
!.gitignore</code></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/22/adding-external-blog-to-naver-blog-search-section/</id><title type="html">외부 블로그를 네이버 블로그 검색 섹션에 노출시키기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/22/adding-external-blog-to-naver-blog-search-section/"/><published>2015-09-22T19:11:24+09:00</published><updated>2015-09-22T19:11:24+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="blog" label="blog" /><summary><![CDATA[결론부터 이야기 하자면 "외부 블로그를 네이버 블로그 검색 섹션에 노출시키는 것이 가능하고 상위에 노출하는 것도 가능하다."라는 것이다. 정확하게는 상위 노출은 명확히 검증되었다고 보기는 힘들지만 꽤 상위로 노출하는 것이 가능했다. 블로그를 처음 시작한 것은 2012년이다. 하지만 글 몇개를 끄적이다 다시 시작하기로하고 꾸준히 포스팅을 시작한지 한달 가량이 되었다. 내 블로그의 주된 내용은 프로그래밍에 관련된 내용이다보니 일반인들이 주로 찾는 정보들은 아니기 때문에 방문자가 많이 유입되기는 힘들다. 하지만 이왕 노력해서 글을 적는데 조금이라도 여러사람에게 노출되기를 원하는게 당연하지 않겠는가. 그래서 한달 전에 글 포스팅을 다시 시작하면서 구글 웹마스터 도구에 등록했다. 당연히 구글은 색인을 잘해서 노출도 조금씩 되기 시작했다(나중에 조금 더 이야기를 하겠지만 이 부분에는 옥토프레스의 역할도 크다고 생각한다). 시간이 조금 흘러 2주 가량이 지나자 글 포스팅 수가 20여건이 되었고 조금씩 유입자가 늘었다(정말 조금이다. 블로그는 꾸준함이 생명). 그러던 중 네이버 블로그 검색 섹션에도 외부 블로그의 글을 등록할 수 있다는 것이 생각났다. 아무래도 국내 트래픽은 네이버가 최고이므로 등록이 된다면 당연히 유입자를 늘리는데 도움이 될 것이라는 생각이 들었다. 그래서 조금 찾아봤다. 네이버 rss 등록신청으로 외부블로그 등록하기 티스토리 블로그를 네이버에 등록하기, 블로그 RSS 등록하는 방법 위의 글들 외에도 아주 많은 글들이 있다. 그만큼 네이버 검색에 대한 블로거들의 관심이 크다는 것이겠지. 그래서 글들을 보면서 따라 했다. 그런데 블로그 글들이 그리 오래된 글이 아님에도 불구하고 화면이 맞지 않았다. 당연히 등록하지 못했다. 하지만 비슷하게 찾아가다 보니 네이버 웹마스터도구를 안내해 주고 있었다. 블로그 등록이 없으니 여기라도 등록해보자는 생각에 등록해 봤다. 당연히 웹마스터 도구를 통해 등록했으니 웹 문서 섹션에서 노출될 것이라고 생각했다. 모두가 알다시피 네이버 검색에서 웹 문서는 정말 다른 검색결과가 없을 때나 노출될만한 크게 가치가 없는 섹션이다. 그리고 하는 김에 다음과 bing에도 등록을 해보려고 했으나 다음은 웹마스터 도구를 찾지 못했고 bing은 bing 웹마스터라는 것을 제공하고 있었다. 그래서 bing도 등록했다. 몇일이 지나자 블로그에 네이버를 통한 유입이 시작되었다. 그때 들었던 생각이 "역시 네이버는 대단하구나. 글도 몇개되지 않는데다가 웹문서에만 노출되는데 유입이 발생하다니..."라는 생각이다. 그런데 시간이 지날수록 유입량이 조금씩 늘기 시작했다. 그래서 직접 네이버에서 내 글을 검색해 봤다. "어디서 노출이 될까?" 하고... 그런데 검색된 내 글을 보고 놀랐다. 블로그로 분류되어서 블로그 섹션에서 검색되고 있었다. 게다가 웹문서에서도 동일한 글이 검색되고 있었다. 그래서 조금 찾아보니 아래와 같은 글이 있었다. 네이버 블로그 검색수집 시스템 개선 내용 네이버의 블로그 수집 시스템이 변경되어서 기존과는 처리 방식이 달라진 것이었다. 블로그가 워낙에 상업적으로 많이 사용되다보니 네이버에서 블로그 지수(네이버에서는 인정하지 않는..)를 계산하는 룰이 수시로 변경되면서 여러 대란이 있었다. 네이버 파워컨텐츠 그리고 블로그 저품질대란(?) 네이버 블로그 저품질 대란, 여러분의 블로그 안녕하신가요? 다시 본론으로 돌아와서... 더욱 놀란 사실은 글들이 꽤 상위에 나온다는 것이다. 사실 서두에 이야기한 것처럼 내 블로그의 글들은 기술 문서들이 많다보니 네이버에서는 상대적으로 경쟁글이 적은 편이다. 그래서 해당 키워드들 내에서는 상위로 노출되기 쉬운 것은 사실이나 글의 수도 적고 시작한지 얼마되지 않은데다가 키워드 최적화도 하지 않은 글들이 꽤 상위에 노출되는 것은 고무적이었다. 그래서 외부 블로그를 가지고도 네이버에서 상위 선점이 가능할 수 있다는 희망을 가지게 되었다. 실제로 내 블로그에 흔치않은 프로그래밍 외 주제에 해당하는 글인 부동산 관련글(내 경험에 대한 글)이 키워드에서 꽤 상위로 노출되고 있다(부동산 키워드는 관련글이 넘쳐나는 글 중 하나라고 생각한다). 상위로 노출되는 것은 동일한 주제를 가지고 꾸준히 포스팅을하며 블로그 운영에 사용하는 옥토프레스가 생성해주는 페이지가 어느 정도 SEO에 최적화되어 있기 때문이라고 생각한다. 실제로 HTML 마크업을 보면 여러가지 SEO/meta 요소가 포함되어 있으며, Sitemap을 자동으로 생생해주고, 내부 링크들이 만들어진다. 게다가 문서제목을 사용한 퍼머링크를 생성해 주고 있으므로 기본적으로 할 수 있는 SEO 요소들을 다수 제공하고 있다. 맷음말 현재 시점을 기준으로 내 블로그의 유입자 비율은 네이버와 구글의 비율이 7:3에서 6:4 정도로 유지되고 있다. 기술 문서를 네이버에서 많이 찾지 않는다는 것을 감안하면 역시 네이버의 국내 트래픽 영향력은 대단하다. 아무래도 "네이버 블로그를 쓰는 것이 쉬운 선택은 되겠지만 너무 종속될 필요는 없지않은가?"라는 것이 현재의 생각이다. 조금 더 상황을 지켜보다보면 바뀔 수도 있겠지만 현재 상황만 보자면 외부 블로그로 네이버에서 블로그와 웹문서 섹션에서 동시 노출함으로써 검색 트래픽의 혜택을 보면서도 자유롭게 블로그를 운영할 수 있는 방법이 있다는 것이다. 블로그를 시작한지는 얼마되지 않지만 블로그 최적화 등에 관련된 유사 업무를 해본적이 있는 입장에서 아래의 내용을 권해주고 싶다(사실 다른 곳에서도 볼 수 있는 당연하고 흔한 내용이긴하다). 블로그를 운영한다면 네이버 웹마스터도구를 이용해 네이버 블로그 섹션에 노출시키는 것을 고려하자. 옥토프레스가 아니더라도 SEO를 지원하는 블로그 서비스를 사용하거나 직접 SEO를 감안해서 제작하자. 너무 두서없이 글을 남발하기 보다 관련 주제로 양질의 컨텐츠를 꾸준히 포스팅하자. 네이버 검색을 위해 네이버 블로그를 선택하기 보다는 자유롭게 블로깅할 수 있는 다른 블로그 서비스도 고려하자.]]></summary><content type="html"><![CDATA[<p>결론부터 이야기 하자면 <strong>&quot;외부 블로그를 네이버 블로그 검색 섹션에 노출시키는 것이 가능하고 상위에 노출하는 것도 가능하다.&quot;</strong>라는 것이다. 정확하게는 상위 노출은 명확히 검증되었다고 보기는 힘들지만 꽤 상위로 노출하는 것이 가능했다.</p>
<hr />
<p>블로그를 처음 시작한 것은 2012년이다. 하지만 글 몇개를 끄적이다 다시 시작하기로하고 꾸준히 포스팅을 시작한지 한달 가량이 되었다. 내 블로그의 주된 내용은 프로그래밍에 관련된 내용이다보니 일반인들이 주로 찾는 정보들은 아니기 때문에 방문자가 많이 유입되기는 힘들다. 하지만 이왕 노력해서 글을 적는데 조금이라도 여러사람에게 노출되기를 원하는게 당연하지 않겠는가. 그래서 한달 전에 글 포스팅을 다시 시작하면서 <a href="https://www.google.com/webmasters/">구글 웹마스터 도구</a>에 등록했다. 당연히 구글은 색인을 잘해서 노출도 조금씩 되기 시작했다(나중에 조금 더 이야기를 하겠지만 이 부분에는 옥토프레스의 역할도 크다고 생각한다).</p>
<p>시간이 조금 흘러 2주 가량이 지나자 글 포스팅 수가 20여건이 되었고 조금씩 유입자가 늘었다(정말 조금이다. 블로그는 꾸준함이 생명). 그러던 중 네이버 블로그 검색 섹션에도 외부 블로그의 글을 등록할 수 있다는 것이 생각났다. 아무래도 국내 트래픽은 네이버가 최고이므로 등록이 된다면 당연히 유입자를 늘리는데 도움이 될 것이라는 생각이 들었다. 그래서 조금 찾아봤다.</p>
<ul>
<li><a href="http://reviewstory.tistory.com/433">네이버 rss 등록신청으로 외부블로그 등록하기</a></li>
<li><a href="http://auuu.tistory.com/15">티스토리 블로그를 네이버에 등록하기, 블로그 RSS 등록하는 방법</a></li>
</ul>
<p>위의 글들 외에도 아주 많은 글들이 있다. 그만큼 네이버 검색에 대한 블로거들의 관심이 크다는 것이겠지. 그래서 글들을 보면서 따라 했다. 그런데 블로그 글들이 그리 오래된 글이 아님에도 불구하고 화면이 맞지 않았다. 당연히 등록하지 못했다. 하지만 비슷하게 찾아가다 보니 <a href="http://webmastertool.naver.com/index.naver">네이버 웹마스터도구</a>를 안내해 주고 있었다. 블로그 등록이 없으니 여기라도 등록해보자는 생각에 등록해 봤다. 당연히 웹마스터 도구를 통해 등록했으니 웹 문서 섹션에서 노출될 것이라고 생각했다. 모두가 알다시피 네이버 검색에서 웹 문서는 정말 다른 검색결과가 없을 때나 노출될만한 크게 가치가 없는 섹션이다.</p>
<p>그리고 하는 김에 다음과 bing에도 등록을 해보려고 했으나 다음은 웹마스터 도구를 찾지 못했고 bing은 <a href="http://www.bing.com/toolbox/webmaster/">bing 웹마스터</a>라는 것을 제공하고 있었다. 그래서 bing도 등록했다.</p>
<p>몇일이 지나자 블로그에 네이버를 통한 유입이 시작되었다. 그때 들었던 생각이 &quot;역시 네이버는 대단하구나. 글도 몇개되지 않는데다가 웹문서에만 노출되는데 유입이 발생하다니...&quot;라는 생각이다. 그런데 시간이 지날수록 유입량이 조금씩 늘기 시작했다. 그래서 직접 네이버에서 내 글을 검색해 봤다. &quot;어디서 노출이 될까?&quot; 하고...</p>
<p>그런데 검색된 내 글을 보고 놀랐다. 블로그로 분류되어서 블로그 섹션에서 검색되고 있었다. 게다가 웹문서에서도 동일한 글이 검색되고 있었다. 그래서 조금 찾아보니 아래와 같은 글이 있었다.</p>
<p><a href="http://www.postview.co.kr/773">네이버 블로그 검색수집 시스템 개선 내용</a></p>
<p>네이버의 블로그 수집 시스템이 변경되어서 기존과는 처리 방식이 달라진 것이었다. 블로그가 워낙에 상업적으로 많이 사용되다보니 네이버에서 블로그 지수(네이버에서는 인정하지 않는..)를 계산하는 룰이 수시로 변경되면서 여러 대란이 있었다.</p>
<ul>
<li><a href="http://giantt.co.kr/7385">네이버 파워컨텐츠 그리고 블로그 저품질대란(?)</a></li>
<li><a href="http://www.eco2day.co.kr/news/articleView.html?idxno=2721">네이버 블로그 저품질 대란, 여러분의 블로그 안녕하신가요?</a></li>
</ul>
<p>다시 본론으로 돌아와서...
더욱 놀란 사실은 글들이 꽤 상위에 나온다는 것이다. 사실 서두에 이야기한 것처럼 내 블로그의 글들은 기술 문서들이 많다보니 네이버에서는 상대적으로 경쟁글이 적은 편이다. 그래서 해당 키워드들 내에서는 상위로 노출되기 쉬운 것은 사실이나 글의 수도 적고 시작한지 얼마되지 않은데다가 키워드 최적화도 하지 않은 글들이 꽤 상위에 노출되는 것은 고무적이었다. 그래서 외부 블로그를 가지고도 네이버에서 상위 선점이 가능할 수 있다는 희망을 가지게 되었다.</p>
<p>실제로 내 블로그에 흔치않은 프로그래밍 외 주제에 해당하는 글인 부동산 관련글(내 경험에 대한 글)이 키워드에서 꽤 상위로 노출되고 있다(부동산 키워드는 관련글이 넘쳐나는 글 중 하나라고 생각한다).</p>
<p>상위로 노출되는 것은 동일한 주제를 가지고 꾸준히 포스팅을하며 블로그 운영에 사용하는 옥토프레스가 생성해주는 페이지가 어느 정도 SEO에 최적화되어 있기 때문이라고 생각한다. 실제로 HTML 마크업을 보면 여러가지 SEO/meta 요소가 포함되어 있으며, Sitemap을 자동으로 생생해주고, 내부 링크들이 만들어진다. 게다가 문서제목을 사용한 퍼머링크를 생성해 주고 있으므로 기본적으로 할 수 있는 SEO 요소들을 다수 제공하고 있다.</p>
<h2>맷음말</h2>
<p>현재 시점을 기준으로 내 블로그의 유입자 비율은 네이버와 구글의 비율이 7:3에서 6:4 정도로 유지되고 있다. 기술 문서를 네이버에서 많이 찾지 않는다는 것을 감안하면 역시 네이버의 국내 트래픽 영향력은 대단하다.</p>
<p>아무래도 &quot;네이버 블로그를 쓰는 것이 쉬운 선택은 되겠지만 너무 종속될 필요는 없지않은가?&quot;라는 것이 현재의 생각이다. 조금 더 상황을 지켜보다보면 바뀔 수도 있겠지만 현재 상황만 보자면 외부 블로그로 네이버에서 블로그와 웹문서 섹션에서 동시 노출함으로써 검색 트래픽의 혜택을 보면서도 자유롭게 블로그를 운영할 수 있는 방법이 있다는 것이다.</p>
<p>블로그를 시작한지는 얼마되지 않지만 블로그 최적화 등에 관련된 유사 업무를 해본적이 있는 입장에서 아래의 내용을 권해주고 싶다(사실 다른 곳에서도 볼 수 있는 당연하고 흔한 내용이긴하다).</p>
<ul>
<li>블로그를 운영한다면 <a href="http://webmastertool.naver.com/index.naver">네이버 웹마스터도구</a>를 이용해 네이버 블로그 섹션에 노출시키는 것을 고려하자.</li>
<li>옥토프레스가 아니더라도 SEO를 지원하는 블로그 서비스를 사용하거나 직접 SEO를 감안해서 제작하자.</li>
<li>너무 두서없이 글을 남발하기 보다 관련 주제로 양질의 컨텐츠를 꾸준히 포스팅하자.</li>
<li>네이버 검색을 위해 네이버 블로그를 선택하기 보다는 자유롭게 블로깅할 수 있는 다른 블로그 서비스도 고려하자.</li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/22/how-to-install-gitlib-on-centos/</id><title type="html">CentOS에 Gitlab 설치하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/22/how-to-install-gitlib-on-centos/"/><published>2015-09-22T07:36:21+09:00</published><updated>2015-09-22T07:36:21+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="git" label="git" /><summary><![CDATA[지난 포스팅 CentOS에 gogs 설치하기에서 gitlab 대신 gogs를 설치했다. 심플해서 설치/사용이 쉬울 것 같았기 때문에 선택한 것이었다. 설치 후에 사용하면서 느낀 것은 설치도 그리 쉽지만은 않고 사용할 때는 기능이 조금 많이 빈약한 느낌이 든다. 사실 많은 기능을 필요로하는 것은 아닌데 아직은 초기 버전이라 그런지 정말 딱 기본 기능만 있는 느낌이다. 그래서 결국 Gitlab을 추가로 설치해서 비교 중이다. 설치 Gitlab의 설치는 생각보다 훨씬 간단했다. 다른 사람들의 글의 보니 예전에 의존성 관련해서 설치할 것들이 많았다고 하는데 최근에는 패키지로 거의 한방에 설치가 가능했다. Gitlab 다운로드 페이지에 가면 운영체제별로 안내가 잘되어 있다. 나는 이번에도 CentOS 6에 설치하므로 아래의 내용은 그 기준이다. 일단 그냥 시키는대로 주욱 명령을 실행한다. 그럼 그냥 설치 끝이다. sudo yum install curl openssh-server postfix cronie sudo service postfix start sudo chkconfig postfix on sudo lokkit -s http -s ssh curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash sudo yum install gitlab-ce 설정 및 실행 안내 페이지의 마지막에 보면 아래의 명령이 있다. 실행에 앞서 아래의 내용을 먼저 읽어보기를 권장한다. sudo gitlab-ctl reconfigure 이 명령은 초기설정 과정들을 진행하면서 시간이 조금 걸렸다. 처음엔 멈춰있는줄 알고 작업을 중지시키곤 했다. 그 후에 브라우저에서 접속해서 안내된 계정으로 접속한다. 사실 난 여기서 부터 조금 난해했다. 이미 해당 서버는 웹 서버가 돌고 있었으므로 어떻게 Gitlab 웹 서버가 동시에 뜰 수 있을까? 어딘가 분명 설정이 있을텐데... 그래서 찾아보니 /etc/gitlab/gitlab.rb 파일을 통해 설정이 가능했다. 우선 다른 설정은 다 무시하고 external_url 설정만 보자(실제로 이것만 활성화되어 있고 나머지는 다 주석처리 되어 있다). 이 설정을 통해 웹 서버가 사용할 도메인과 port를 지정할 수 있다. external_url 'http://your.domain:port' 이렇게 설정을 완료한 후 sudo gitlab-ctl reconfigure 명령을 실행하면 여기에 맞추어 서버를 알아서 구동해 준다(Gitlab은 내부적으로 웹 서버를 nginx를 사용한다). 이후에는 브라우저에서 접속해서 사용하면 된다. 서버의 시작 / 종료 아래의 명령들을 통해 서비스를 시작 / 종료할 수 있다. reconfigure는 설정을 반영해서 다시 설정하는 과정을 거치는 것으로 설정을 변경할 떄만 사용하면 된다. sudo gitlab-ctl start sudo gitlab-ctl stop 내장 웹서버(nginx)를 사용하지 않고 외부 웹서버에 연결하기 나의 경우는 이미 웹서버가 설치된 상황이었기 때문에 Gitlab 서버를 동시에 사용하려면 port를 따로 지정해서 사용하는 방법 밖에 없었다. 하지만 그렇게 사용하기는 보기 싫어서 웹 서버를 따로 구성하기로 했다. 자세히 본 것은 아니라서 정확하진 않지만 Gitlab은 내부적으로 unicorn과 nginx의 조합으로 이뤄져 있고 기능적 처리는 unicon과 연결된다. unicon의 기본 port가 8080으로 설정되어 있기 때문에 이 부분만 연결해주면 외부 웹서버로 연결하는 것도 당연히 가능하다. 아래는 아파치를 사용하는 상황에서의 설정 방법이다. 내용중 LimitRequestBody를 잊지말고 해주는 것이 좋다. 아니면 push에서 오류를 만날 수 있다. <VirtualHost *:80> ServerName your.domain ServerSignature Off ProxyPreserveHost On <IfModule !mod_proxy.c> LoadModule proxy_module modules/mod_proxy.so </IfModule> <IfModule !proxy_http_module.c> LoadModule proxy_http_module modules/mod_proxy_http.so </IfModule> <Location /> Order deny,allow Allow from all # push 전송시 용량 문제를 막기 위해 지정 : error: RPC failed; result=22, HTTP code = 413 LimitRequestBody 52428800 ProxyPassReverse http://127.0.0.1:8080 </Location> RewriteEngine on RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f RewriteRule .* http://127.0.0.1:8080%{REQUEST_URI} [P,QSA] # needed for downloading attachments DocumentRoot /opt/gitlab/embedded/service/gitlab-rails/public </VirtualHost> 그리고 /etc/gitlab/gitlab.rb에 아래의 내용을 추가한다. nginx['enable'] = false 그리고 재설정. sudo gitlab-ctl reconfigure 예시 내가 설정한 설정을 예로 보자면 아래와 같다. external_url 'http://git.asamaru.net' nginx['enable'] = false 이렇게 설정하면 위 주소로 접속시 gitlab 화면을 볼 수 있다. 첨언 이건 gitlab과 직접적인 관련이 있는 내용은 아니나 도움이 될까해서 적어둔다. gogs나 gitlab 모두 ssh 주소와 http 주소를 제공한다. 별도 설정을 하지 않는한 ssh 주소를 사용할 경우에는 shell 계정으로 push를 하게되고 http 주소를 사용할 경우는 해당 클라이언트(사용자 컴퓨터)의 git 설정에 있는 사용자명으로 push를 해준다. 따라서 이 사용자명을 바꾸고 싶다면 아래의 명령으로 수정할 수 있다. 단, OSX 기준이다. 아마도 linux는 같을 것이라고 보는데... 윈도우는 사용하질 않아서 잘 모르겠다. 윈도우도 git 사용자명 변경에 관련된 검색을 하면 많이 나올테니 쉽게 해결하리라 본다. git config --global user.name "사용자명" git config --global user.email "사용자 이메일" 이 사용자명(특히 이메일)을 gitlab에 가입된 user와 맞춰주면 변경사항 기록시 서로 연결된다. 따라서 그냥 설정할 것이 아니라 Gitlab 설치와 기본 설정 후 사용할 계정으로 가입 후 그 계정에 맞게 맞추는 것을 권장한다. 나의 경우엔 이메일만 연관이 있고 user는 달라도 상관은 없었다(정확한 기준은 확인해 보지 못했고 실수로 다르게 넣었는데 이메일이 같으니 알아서 연결해 주더라). 사실 Gitlab에서 프로젝트를 생성하고 최초 commit/push 전에 나오는 안내화면에 관련 설정 부분을 안내해 주고 있다.]]></summary><content type="html"><![CDATA[<p>지난 포스팅 <a href="https://blog.asamaru.net/2015/09/21/how-to-install-gogs-on-centos/">CentOS에 gogs 설치하기</a>에서 gitlab 대신 gogs를 설치했다. 심플해서 설치/사용이 쉬울 것 같았기 때문에 선택한 것이었다. 설치 후에 사용하면서 느낀 것은 설치도 그리 쉽지만은 않고 사용할 때는 기능이 조금 많이 빈약한 느낌이 든다. 사실 많은 기능을 필요로하는 것은 아닌데 아직은 초기 버전이라 그런지 정말 딱 기본 기능만 있는 느낌이다. 그래서 결국 Gitlab을 추가로 설치해서 비교 중이다.</p>
<h2>설치</h2>
<p>Gitlab의 설치는 생각보다 훨씬 간단했다. 다른 사람들의 글의 보니 예전에 의존성 관련해서 설치할 것들이 많았다고 하는데 최근에는 패키지로 거의 한방에 설치가 가능했다.</p>
<p><a href="https://about.gitlab.com/downloads/">Gitlab 다운로드 페이지</a>에 가면 운영체제별로 안내가 잘되어 있다. 나는 이번에도 CentOS 6에 설치하므로 아래의 내용은 그 기준이다.</p>
<p>일단 그냥 시키는대로 주욱 명령을 실행한다. 그럼 그냥 설치 끝이다.</p>
<pre class="hljs bash">sudo yum install curl openssh-server postfix cronie
sudo service postfix start
sudo chkconfig postfix on
sudo lokkit -s http -s ssh

curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
sudo yum install gitlab-ce</pre>
<h2>설정 및 실행</h2>
<p>안내 페이지의 마지막에 보면 아래의 명령이 있다. 실행에 앞서 아래의 내용을 먼저 읽어보기를 권장한다.</p>
<pre class="hljs bash">sudo gitlab-ctl reconfigure</pre>
<p>이 명령은 초기설정 과정들을 진행하면서 시간이 조금 걸렸다. 처음엔 멈춰있는줄 알고 작업을 중지시키곤 했다. 그 후에 브라우저에서 접속해서 안내된 계정으로 접속한다. 사실 난 여기서 부터 조금 난해했다. 이미 해당 서버는 웹 서버가 돌고 있었으므로 어떻게 Gitlab 웹 서버가 동시에 뜰 수 있을까? 어딘가 분명 설정이 있을텐데...</p>
<p>그래서 찾아보니 <code>/etc/gitlab/gitlab.rb</code> 파일을 통해 설정이 가능했다. 우선 다른 설정은 다 무시하고 external_url 설정만 보자(실제로 이것만 활성화되어 있고 나머지는 다 주석처리 되어 있다). 이 설정을 통해 웹 서버가 사용할 도메인과 port를 지정할 수 있다.</p>
<pre class="hljs ruby">external_url <span class="hljs-string">'http://your.domain:port'</span></pre>
<p>이렇게 설정을 완료한 후 <code>sudo gitlab-ctl reconfigure</code> 명령을 실행하면 여기에 맞추어 서버를 알아서 구동해 준다(Gitlab은 내부적으로 웹 서버를 nginx를 사용한다).</p>
<p>이후에는 브라우저에서 접속해서 사용하면 된다.</p>
<h2>서버의 시작 / 종료</h2>
<p>아래의 명령들을 통해 서비스를 시작 / 종료할 수 있다. reconfigure는 설정을 반영해서 다시 설정하는 과정을 거치는 것으로 설정을 변경할 떄만 사용하면 된다.</p>
<pre class="hljs bash">sudo gitlab-ctl start</pre>
<pre class="hljs bash">sudo gitlab-ctl stop</pre>
<h2>내장 웹서버(nginx)를 사용하지 않고 외부 웹서버에 연결하기</h2>
<p>나의 경우는 이미 웹서버가 설치된 상황이었기 때문에 Gitlab 서버를 동시에 사용하려면 port를 따로 지정해서 사용하는 방법 밖에 없었다. 하지만 그렇게 사용하기는 보기 싫어서 웹 서버를 따로 구성하기로 했다.</p>
<p>자세히 본 것은 아니라서 정확하진 않지만 Gitlab은 내부적으로 <a href="http://unicorn.bogomips.org/">unicorn</a>과 nginx의 조합으로 이뤄져 있고 기능적 처리는 unicon과 연결된다. unicon의 기본 port가 8080으로 설정되어 있기 때문에 이 부분만 연결해주면 외부 웹서버로 연결하는 것도 당연히 가능하다.</p>
<p>아래는 아파치를 사용하는 상황에서의 설정 방법이다. 내용중 LimitRequestBody를 잊지말고 해주는 것이 좋다. 아니면 push에서 오류를 만날 수 있다.</p>
<pre class="hljs apache"><span class="hljs-section">&lt;VirtualHost *:80&gt;</span>
  <span class="hljs-attribute"><span class="hljs-nomarkup">ServerName</span></span> your.domain
  <span class="hljs-attribute">ServerSignature</span> <span class="hljs-literal">Off</span>

  <span class="hljs-attribute">ProxyPreserveHost</span> <span class="hljs-literal">On</span>

  <span class="hljs-section">&lt;IfModule !mod_proxy.c&gt;</span>
    <span class="hljs-attribute"><span class="hljs-nomarkup">LoadModule</span></span> proxy_module modules/mod_proxy.so
  <span class="hljs-section">&lt;/IfModule&gt;</span>
  <span class="hljs-section">&lt;IfModule !proxy_http_module.c&gt;</span>
    <span class="hljs-attribute"><span class="hljs-nomarkup">LoadModule</span></span> proxy_http_module modules/mod_proxy_http.so
  <span class="hljs-section">&lt;/IfModule&gt;</span>

  <span class="hljs-section">&lt;Location /&gt;</span>
    <span class="hljs-attribute"><span class="hljs-nomarkup">Order</span></span> deny,allow
    <span class="hljs-attribute"><span class="hljs-nomarkup">Allow</span></span> from <span class="hljs-literal">all</span>
    <span class="hljs-comment"># push 전송시 용량 문제를 막기 위해 지정 : error: RPC failed; result=22, HTTP code = 413</span>
    <span class="hljs-attribute">LimitRequestBody</span> 52428800

    <span class="hljs-attribute">ProxyPassReverse</span> http://127.0.0.1:8080
  <span class="hljs-section">&lt;/Location&gt;</span>

  <span class="hljs-attribute"><span class="hljs-nomarkup">RewriteEngine</span></span> <span class="hljs-literal">on</span>
  <span class="hljs-attribute"><span class="hljs-nomarkup">RewriteCond</span></span> <span class="hljs-variable">%{DOCUMENT_ROOT}</span>/<span class="hljs-variable">%{REQUEST_FILENAME}</span> !-f
  <span class="hljs-attribute"><span class="hljs-nomarkup">RewriteRule</span></span> .* http://127.0.0.1:8080<span class="hljs-variable">%{REQUEST_URI}</span><span class="hljs-meta"> [P,QSA]</span>

  <span class="hljs-comment"># needed for downloading attachments</span>
  <span class="hljs-attribute"><span class="hljs-nomarkup">DocumentRoot</span></span> /opt/gitlab/embedded/service/gitlab-rails/public
<span class="hljs-section">&lt;/VirtualHost&gt;</span></pre>
<p>그리고 <code>/etc/gitlab/gitlab.rb</code>에 아래의 내용을 추가한다.</p>
<pre class="hljs ruby">nginx[<span class="hljs-string">'enable'</span>] = <span class="hljs-literal">false</span></pre>
<p>그리고 재설정.</p>
<pre class="hljs bash">sudo gitlab-ctl reconfigure</pre>
<h3>예시</h3>
<p>내가 설정한 설정을 예로 보자면 아래와 같다.</p>
<pre class="hljs ruby">external_url <span class="hljs-string">'http://git.asamaru.net'</span>
nginx[<span class="hljs-string">'enable'</span>] = <span class="hljs-literal">false</span></pre>
<p>이렇게 설정하면 위 주소로 접속시 gitlab 화면을 볼 수 있다.</p>
<h2>첨언</h2>
<p>이건 gitlab과 직접적인 관련이 있는 내용은 아니나 도움이 될까해서 적어둔다. gogs나 gitlab 모두 ssh 주소와 http 주소를 제공한다. 별도 설정을 하지 않는한 ssh 주소를 사용할 경우에는 shell 계정으로 push를 하게되고 http 주소를 사용할 경우는 해당 클라이언트(사용자 컴퓨터)의 git 설정에 있는 사용자명으로 push를 해준다. 따라서 이 사용자명을 바꾸고 싶다면 아래의 명령으로 수정할 수 있다. 단, OSX 기준이다. 아마도 linux는 같을 것이라고 보는데... 윈도우는 사용하질 않아서 잘 모르겠다. 윈도우도 git 사용자명 변경에 관련된 검색을 하면 많이 나올테니 쉽게 해결하리라 본다.</p>
<pre class="hljs bash">git config --global user.name <span class="hljs-string">"사용자명"</span>
git config --global user.email <span class="hljs-string">"사용자 이메일"</span></pre>
<p>이 사용자명(특히 이메일)을 gitlab에 가입된 user와 맞춰주면 변경사항 기록시 서로 연결된다. 따라서 그냥 설정할 것이 아니라 Gitlab 설치와 기본 설정 후 사용할 계정으로 가입 후 그 계정에 맞게 맞추는 것을 권장한다. 나의 경우엔 이메일만 연관이 있고 user는 달라도 상관은 없었다(정확한 기준은 확인해 보지 못했고 실수로 다르게 넣었는데 이메일이 같으니 알아서 연결해 주더라).
사실 Gitlab에서 프로젝트를 생성하고 최초 commit/push 전에 나오는 안내화면에 관련 설정 부분을 안내해 주고 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/21/how-to-install-gogs-on-centos/</id><title type="html">CentOS에 gogs 설치하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/21/how-to-install-gogs-on-centos/"/><published>2015-09-21T13:58:12+09:00</published><updated>2015-09-21T13:58:12+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="git" label="git" /><summary><![CDATA[기존에는 SCM(source code management)으로 SVN을 주로 사용했다. 하지만 git를 사용하기 시작하면서 부터 git를 주로 사용하긴 했는데 주로 github를 통해서만 사용했다. 그런데 이번에 회사 프로젝트에서 필요한 부분이 있어 자체 호스팅을 하기 위해 기존에 봐뒀던 gitlab을 쓰려다가 gogs를 알게 되면서 이걸 설치했다. gogs를 고른 이유는 간단하기 때문이다(GitHub vs GitLab vs Stash vs Gogs를 참고). 사실 아직 제대로 사용해보지 않아서 맞는지는 모르겠지만 gitlab은 ruby 기반이고 난 ruby 환경을 별로 좋아하지 않는다(내가 몰라서 그렇겠지만 이상하게 ruby 기반 프로젝트들은 설치/관리가 어려워서). git 설치 How To Install Git on CentOS 7를 참고하자. 다른 곳을 참조해도 당연히 무방하다. 난 사실 예전에 yum으로 git가 설치되어 있던 상황으로 이 단계는 건너뛰었다(게다가 나의 centos는 6이다). gogs 설치 기본적으로 설치방법은 gogs Installation에 잘 설명되어 있다. 하지만 centos가 없다. 조금 더 자세히 보면 대신 Install from packages가 있다. 이곳의 설명/링크를 따라 packager.io에 가면 설치 방법을 안내받을 수 있다. 찾아가는 수고를 덜어주기 위해 필요한 부분을 옮겨왔다. 2015.09.21 기준이므로 최신 내용을 확인하려면 위의 안내대로 사이트를 방문해서 안내받자. sudo rpm --import https://rpm.packager.io/key echo "[gogs] name=Repository for pkgr/gogs application. baseurl=https://rpm.packager.io/gh/pkgr/gogs/centos6/pkgr enabled=1" | sudo tee /etc/yum.repos.d/gogs.repo sudo yum install gogs 그냥 시키는대로 따라하면 설치는 간단히 완료된다. 단, gogs는 계정을 추가하는 부분이 있어 passwd, shadow 파일에 lock이 걸려있으면 아래와 같은 오류가 나며 제대로 설치가 되지 않는다. Error in PREIN scriptlet in rpm package gogs-0.6.9-1442807350.69b1d65.centos6.x86_64 useradd: /etc/passwd을(를) 열 수 없습니다 일단 풀어주고 설치하자. $ chattr -i /etc/passwd $ chattr -i /etc/shadow 설치가 완료되면 다시 원상복구. $ chattr +i /etc/passwd $ chattr +i /etc/shadow 설치가 정상적으로 되었다면 아래의 파일이 존재할 것이다.` ls /etc/init.d/gogs la /home/gogs 그리고 나중에 ssh를 통한 clone을 사용할 예정이라면 설치 과정에서 추가된 gogs 계정의 비밀번호를 지정해 두어야 한다. $ passwd gogs 환경구성 환경설정 파일은 /etc/gogs/conf/app.ini에 있다. 하지만 최초 웹페이지 접속시 자동으로 설치 화면이 뜬다. 게다가 이 파일을 열어보면 상단에 절대로 수정하지 말라고 되어 있다. 따라서 그냥 웹에서 설정하자. 본격적으로 세팅을 하기 전에 주의사항이 있다. gogs는 DB가 있어야 된다. 따라서 mysql 또는 postgresql이 미리 설치되어 있어야 한다. 이건 뭐 굳이 여기서 설명하지 않아도 설치방법이 다른 곳에 많으니 설치가 되어 있다고 가정하고 설명한다. DB 설정 우선 DB를 세팅한다. root 계정을 설정하는데 필요없다면 하지 않아도 된다. 기존에 DB가 이미 설치되어 있다면 당연히 이 부분이 처리가 되어 있을테니 하지 말자. mysqladmin -u root password "${MYSQL_PASSWORD}" mysqladmin -u root --password="${MYSQL_PASSWORD}" password "${MYSQL_PASSWORD}" 하지만 DB는 만들어 줘야 한다. mysql -u root -p${MYSQL_PASSWORD} -e "CREATE DATABASE IF NOT EXISTS ${APP_NAME}; use ${APP_NAME}; set global storage_engine=INNODB;" 예시 mysql -u root -p -e "CREATE DATABASE IF NOT EXISTS gogs; use gogs; set global storage_engine=INNODB;" WEB UI를 이용한 설정 그럼 본격적으로 설정을 시작하자. http://userdomain:3000/ 필요한 사항을 설정한다. 대부분 보면 뭘 해야할지 알 수 있다. 오류가 나면 해당 안내에 따라 설정하면 된다. 추후 설정에 변경이 필요하면 custom/conf/app.ini파일에 필요한 설정만 override 하면 된다(나의 경우는 /opt/gogs/custom/conf/app.ini 파일이다. 이 파일 위치를 찾느라 한참을 헤멨다.). http://gogs.io/docs/installation/configuration_and_run.html 를 참고 도메인 연결 이제는 도메인 연결을 할 차례이다. httpd 2 기준 <VirtualHost *:80> ServerName your.domain.com <IfModule !mod_proxy.c> LoadModule proxy_module modules/mod_proxy.so </IfModule> <IfModule !proxy_http_module.c> LoadModule proxy_http_module modules/mod_proxy_http.so </IfModule> ProxyPass / http://localhost:3000/ ProxyPassReverse / http://localhost:3000/ </VirtualHost> 나의 경우는 apache를 사용중이라 위와 같이 설정하면 되나 nginx를 사용하는 경우라면 아래를 참고하자(packager.io에 안내된 내용이다.). nginx cat > /etc/nginx/sites-available/default <<EOF server { listen 80; server_name ${HOSTNAME}; location / { proxy_pass http://localhost:6000; } } EOF sudo service nginx restart 서버 시작시 자동시작 우선 서버 시작시 자동 시작 되도록 설정하자(필요하다면). 나의 경우 setup으로 확인해보니 자동으로 들어가 있지 않았다. 그래서 아래와 같이 시도했다. # 서버 부팅시 자동 시작 /sbin/chkconfig --add gogs /sbin/chkconfig --level 35 gogs on /sbin/chkconfig --list 첫줄부터 안된다. "gogs 서비스는 chkconfig 를 지원하지 않습니다"라고 오류를 내보낸다. 말그대로 gogs는 chkconfig를 지원하지 않는다. 해서 아래와 같이 서버 시작시 스크립트를 실행하도록 넣어 버렸다. $ vi /etc/rc.d/rc.local # 아래 줄을 추가 /etc/init.d/gogs start 설정시 유의 사항 설치는 위의 과정들을 통해 완료되었다. 하지만 제대로 써보려면 설정을 환경에 맞게 몇가지 조정하는 것이 좋다. ROOT 설정 [repository] ROOT = /home/gogs 기본적으로 ROOT 부분은 ROOT = /home/gogs/gogs-repositories로 되어 있지만 위 처럼 gogs-repositories 부분을 제거해 주는 것이 좋다. 나중에 레포지토리를 생성하게되면 clone 주소를 알려준다. 이때 http와 ssh 주소 두가지를 알려주는데 이때 ssh를 사용하게 되면 주소 부분이 맞지 않게된다. 예를들어 gogs@git.asamaru.net:root/test.git 이라는 주소로 생성된 경우 아래와 같이 clone을 시도할 것이다. git clone gogs@git.corez.kr:root/test.git 하지만 아래와 같은 오류를 내며 정상적으로 clone이 되지 않는다. fatal: 'root/test.git' does not appear to be a git repository fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 다시 아래와 같이 해보면 정상적으로 clone 된다. git clone gogs@git.corez.kr:gogs-repositories/root/test.git ssh 주소를 사용하는 경우는 계정도 gogs를 사용하며 경로도 gogs의 home에서부터의 경로를 찾기 때문에 "gogs-repositories/"를 추가해 줘야하는 것이다. 이 주소를 일일이 넣는 것이 귀찮으므로 위에 설명한 것처럼 ROOT 경로를 변경해 버리는 것이 편하다. ssh 에서 home 경로를 바꿀 수도 있겠지만 이 방법이 더 나을 것으로 본다. ROOT를 변경한 후 재시작하고 레포지토리를 만들면 아래의 예시처럼(gogs에서 안내되는 주소) clone을 받을 수 있다. git clone gogs@git.corez.kr:root/test.git]]></summary><content type="html"><![CDATA[<p>기존에는 SCM(source code management)으로 SVN을 주로 사용했다. 하지만 git를 사용하기 시작하면서 부터 git를 주로 사용하긴 했는데 주로 github를 통해서만 사용했다. 그런데 이번에 회사 프로젝트에서 필요한 부분이 있어 자체 호스팅을 하기 위해 기존에 봐뒀던 <a href="https://about.gitlab.com/">gitlab</a>을 쓰려다가 <a href="http://gogs.io/">gogs</a>를 알게 되면서 이걸 설치했다. gogs를 고른 이유는 간단하기 때문이다(<a href="https://blog.deimos.fr/2014/08/19/github-vs-gitlab-vs-stash-vs-gogs/">GitHub vs GitLab vs Stash vs Gogs</a>를 참고). 사실 아직 제대로 사용해보지 않아서 맞는지는 모르겠지만 gitlab은 ruby 기반이고 난 ruby 환경을 별로 좋아하지 않는다(내가 몰라서 그렇겠지만 이상하게 ruby 기반 프로젝트들은 설치/관리가 어려워서).</p>
<h2>git 설치</h2>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-git-on-centos-7">How To Install Git on CentOS 7</a>를 참고하자. 다른 곳을 참조해도 당연히 무방하다. 난 사실 예전에 yum으로 git가 설치되어 있던 상황으로 이 단계는 건너뛰었다(게다가 나의 centos는 6이다).</p>
<h2>gogs 설치</h2>
<p>기본적으로 설치방법은 <a href="http://gogs.io/docs/installation">gogs Installation</a>에 잘 설명되어 있다. 하지만 centos가 없다. 조금 더 자세히 보면 대신 <a href="http://gogs.io/docs/installation/install_from_packages.html">Install from packages</a>가 있다. 이곳의 설명/링크를 따라 <a href="https://packager.io/gh/pkgr/gogs">packager.io</a>에 가면 설치 방법을 안내받을 수 있다.</p>
<p>찾아가는 수고를 덜어주기 위해 필요한 부분을 옮겨왔다. 2015.09.21 기준이므로 최신 내용을 확인하려면 위의 안내대로 사이트를 방문해서 안내받자.</p>
<pre class="hljs bash">sudo rpm --import https://rpm.packager.io/key
<span class="hljs-built_in">echo</span> <span class="hljs-string">"[gogs]
name=Repository for pkgr/gogs application.
baseurl=https://rpm.packager.io/gh/pkgr/gogs/centos6/pkgr
enabled=1"</span> | sudo tee /etc/yum.repos.d/gogs.repo
sudo yum install gogs</pre>
<p>그냥 시키는대로 따라하면 설치는 간단히 완료된다. 단, gogs는 계정을 추가하는 부분이 있어 passwd, shadow 파일에 lock이 걸려있으면 아래와 같은 오류가 나며 제대로 설치가 되지 않는다.</p>
<pre class="hljs bash">Error <span class="hljs-keyword">in</span> PREIN scriptlet <span class="hljs-keyword">in</span> rpm package gogs-0.6.9-1442807350.69b1d65.centos6.x86_64
useradd: /etc/passwd을(를) 열 수 없습니다</pre>
<p>일단 풀어주고 설치하자.</p>
<pre class="hljs bash">$ chattr -i /etc/passwd
$ chattr -i /etc/shadow</pre>
<p>설치가 완료되면 다시 원상복구.</p>
<pre class="hljs bash">$ chattr +i /etc/passwd
$ chattr +i /etc/shadow</pre>
<p>설치가 정상적으로 되었다면 아래의 파일이 존재할 것이다.`</p>
<pre class="hljs bash">ls /etc/init.d/gogs
la /home/gogs</pre>
<p>그리고 나중에 ssh를 통한 clone을 사용할 예정이라면 설치 과정에서 추가된 gogs 계정의 비밀번호를 지정해 두어야 한다.</p>
<pre class="hljs bash">$ passwd gogs</pre>
<h2>환경구성</h2>
<p>환경설정 파일은 <code>/etc/gogs/conf/app.ini</code>에 있다. 하지만 최초 웹페이지 접속시 자동으로 설치 화면이 뜬다. 게다가 이 파일을 열어보면 상단에 절대로 수정하지 말라고 되어 있다. 따라서 그냥 웹에서 설정하자.</p>
<p>본격적으로 세팅을 하기 전에 주의사항이 있다. gogs는 DB가 있어야 된다. 따라서 mysql 또는 postgresql이 미리 설치되어 있어야 한다. 이건 뭐 굳이 여기서 설명하지 않아도 설치방법이 다른 곳에 많으니 설치가 되어 있다고 가정하고 설명한다.</p>
<h3>DB 설정</h3>
<p>우선 DB를 세팅한다.</p>
<p>root 계정을 설정하는데 필요없다면 하지 않아도 된다. 기존에 DB가 이미 설치되어 있다면 당연히 이 부분이 처리가 되어 있을테니 하지 말자.</p>
<pre class="hljs bash">mysqladmin -u root password <span class="hljs-string">"<span class="hljs-variable">${MYSQL_PASSWORD}</span>"</span>
mysqladmin -u root --password=<span class="hljs-string">"<span class="hljs-variable">${MYSQL_PASSWORD}</span>"</span> password <span class="hljs-string">"<span class="hljs-variable">${MYSQL_PASSWORD}</span>"</span></pre>
<p>하지만 DB는 만들어 줘야 한다.</p>
<pre class="hljs bash">mysql -u root -p<span class="hljs-variable">${MYSQL_PASSWORD}</span> -e <span class="hljs-string">"CREATE DATABASE IF NOT EXISTS <span class="hljs-variable">${APP_NAME}</span>; use <span class="hljs-variable">${APP_NAME}</span>; set global storage_engine=INNODB;"</span></pre>
<p><strong>예시</strong></p>
<pre class="hljs bash">mysql -u root -p -e <span class="hljs-string">"CREATE DATABASE IF NOT EXISTS gogs; use gogs; set global storage_engine=INNODB;"</span></pre>
<h3>WEB UI를 이용한 설정</h3>
<p>그럼 본격적으로 설정을 시작하자.</p>
<p><a href="http://userdomain:3000/">http://userdomain:3000/</a></p>
<p>필요한 사항을 설정한다. 대부분 보면 뭘 해야할지 알 수 있다. 오류가 나면 해당 안내에 따라 설정하면 된다. 추후 설정에 변경이 필요하면 <code>custom/conf/app.ini</code>파일에 필요한 설정만 override 하면 된다(나의 경우는 <code>/opt/gogs/custom/conf/app.ini</code> 파일이다. 이 파일 위치를 찾느라 한참을 헤멨다.). <a href="http://gogs.io/docs/installation/configuration_and_run.html">http://gogs.io/docs/installation/configuration_and_run.html</a> 를 참고</p>
<h3>도메인 연결</h3>
<p>이제는 도메인 연결을 할 차례이다.</p>
<p><strong>httpd 2 기준</strong></p>
<pre class="hljs apache"><span class="hljs-section">&lt;VirtualHost *:80&gt;</span>
  <span class="hljs-attribute"><span class="hljs-nomarkup">ServerName</span></span> your.domain.com

  <span class="hljs-section">&lt;IfModule !mod_proxy.c&gt;</span>
    <span class="hljs-attribute"><span class="hljs-nomarkup">LoadModule</span></span> proxy_module modules/mod_proxy.so
  <span class="hljs-section">&lt;/IfModule&gt;</span>
  <span class="hljs-section">&lt;IfModule !proxy_http_module.c&gt;</span>
    <span class="hljs-attribute"><span class="hljs-nomarkup">LoadModule</span></span> proxy_http_module modules/mod_proxy_http.so
  <span class="hljs-section">&lt;/IfModule&gt;</span>

  <span class="hljs-attribute">ProxyPass</span> / http://localhost:3000/
  <span class="hljs-attribute">ProxyPassReverse</span> / http://localhost:3000/
<span class="hljs-section">&lt;/VirtualHost&gt;</span></pre>
<p>나의 경우는 apache를 사용중이라 위와 같이 설정하면 되나 nginx를 사용하는 경우라면 아래를 참고하자(packager.io에 안내된 내용이다.).</p>
<p><strong>nginx</strong></p>
<pre class="hljs bash">cat &gt; /etc/nginx/sites-available/default &lt;&lt;EOF
server {
  listen          80;
  server_name     <span class="hljs-variable">${HOSTNAME}</span>;
  location / {
    proxy_pass      http://localhost:6000;
  }
}
EOF
sudo service nginx restart</pre>
<h3>서버 시작시 자동시작</h3>
<p>우선 서버 시작시 자동 시작 되도록 설정하자(필요하다면). 나의 경우 <code>setup</code>으로 확인해보니 자동으로 들어가 있지 않았다. 그래서 아래와 같이 시도했다.</p>
<pre class="hljs bash"><span class="hljs-comment"># 서버 부팅시 자동 시작</span>
/sbin/chkconfig --add gogs
/sbin/chkconfig --level 35 gogs on
/sbin/chkconfig --list</pre>
<p>첫줄부터 안된다. &quot;gogs 서비스는 chkconfig 를 지원하지 않습니다&quot;라고 오류를 내보낸다. 말그대로 gogs는 chkconfig를 지원하지 않는다. 해서 아래와 같이 서버 시작시 스크립트를 실행하도록 넣어 버렸다.</p>
<pre class="hljs bash">$ vi /etc/rc.d/rc.local

<span class="hljs-comment"># 아래 줄을 추가</span>
/etc/init.d/gogs start</pre>
<h3>설정시 유의 사항</h3>
<p>설치는 위의 과정들을 통해 완료되었다. 하지만 제대로 써보려면 설정을 환경에 맞게 몇가지 조정하는 것이 좋다.</p>
<ul>
<li>ROOT 설정
<pre><code>[repository]
ROOT = /home/gogs</code></pre>
<p>기본적으로 ROOT 부분은 <code>ROOT = /home/gogs/gogs-repositories</code>로 되어 있지만 위 처럼 gogs-repositories 부분을 제거해 주는 것이 좋다. 나중에 레포지토리를 생성하게되면 clone 주소를 알려준다. 이때 http와 ssh 주소 두가지를 알려주는데 이때 ssh를 사용하게 되면 주소 부분이 맞지 않게된다. 예를들어 gogs@git.asamaru.net:root/test.git 이라는 주소로 생성된 경우 아래와 같이 clone을 시도할 것이다.</p></li>
</ul>
<pre class="hljs bash">git <span class="hljs-built_in">clone</span> gogs@git.corez.kr:root/test.git</pre>
<p>하지만 아래와 같은 오류를 내며 정상적으로 clone이 되지 않는다.</p>
<pre class="hljs bash">fatal: <span class="hljs-string">'root/test.git'</span> does not appear to be a git repository
fatal: Could not <span class="hljs-built_in">read</span> from remote repository.

Please make sure you have the correct access rights
and the repository exists.</pre>
<p>다시 아래와 같이 해보면 정상적으로 clone 된다.</p>
<pre class="hljs bash">git <span class="hljs-built_in">clone</span> gogs@git.corez.kr:gogs-repositories/root/test.git</pre>
<p>ssh 주소를 사용하는 경우는 계정도 gogs를 사용하며 경로도 gogs의 home에서부터의 경로를 찾기 때문에 &quot;gogs-repositories/&quot;를 추가해 줘야하는 것이다. 이 주소를 일일이 넣는 것이 귀찮으므로 위에 설명한 것처럼 ROOT 경로를 변경해 버리는 것이 편하다. ssh 에서 home 경로를 바꿀 수도 있겠지만 이 방법이 더 나을 것으로 본다.
ROOT를 변경한 후 재시작하고 레포지토리를 만들면 아래의 예시처럼(gogs에서 안내되는 주소) clone을 받을 수 있다.</p>
<pre class="hljs bash">git <span class="hljs-built_in">clone</span> gogs@git.corez.kr:root/test.git</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/21/android-tablayout-with-viewpager-setupwithviewpager-tab-click-not-working-after-swipe/</id><title type="html">안드로이드 TabLayout에서 setupWithViewPager() 사용시 Swipe 후 Tab 클릭시 ViewPager가 변경되지 않는 버그 수정</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/21/android-tablayout-with-viewpager-setupwithviewpager-tab-click-not-working-after-swipe/"/><published>2015-09-21T11:40:02+09:00</published><updated>2015-09-21T11:40:02+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[Android Design Support Library에 있는 TabLayout과 ViewPager를 연동해서 사용하기 위해 setupWithViewPager() 함수를 사용한다. public void setupWithViewPager (ViewPager viewPager) TabLayout와 ViewPager를 연동한다. 이 함수는 아래의 동작을 수행한다. Add a ViewPager.OnPageChangeListener that will forward events to this TabLayout. Populate the TabLayout's tabs from the ViewPager's PagerAdapter. Set our TabLayout.OnTabSelectedListener which will forward selected events to the ViewPager 결론은 setupWithViewPager()를 사용하면 손쉽게 TabLayout와 ViewPager를 연동할 수 있다. 다시말해 ViewPager를 넘기면 이에 맞추어 TabLayout의 선택이 변경되고 TabLayout에서 Tab을 터치하면 이에 맞게 ViewPager가 변경된다. 하지만 이 기능에는 버그가 있다. 그냥 쉽게 넘어가면 안드로이드가 아니지... 이 문제도 항상 발생하는 것은 아니나 간헐적으로 ViewPager을 Swipe하여 변경을 하다가 Tab을 터치하면 Tab은 터치에 맞게 변경되나 ViewPaper는 함께 변경되지 않는 문제가 발생한다. 이 문제에 대해서는 https://code.google.com/p/android/issues/detail?id=183123에 버그 리포트 되어 있다. 패치를 기다리기 전에 문제를 해결할 필요가 있어 아래와 같이 직접 수정해서 사용했다. tabLayout.setOnTabSelectedListener(new TabLayout.OnTabSelectedListener() { @Override public void onTabSelected(TabLayout.Tab tab) { if (tab.getPosition() != viewPager.getCurrentItem()) { viewPager.setCurrentItem(tab.getPosition()); } } @Override public void onTabUnselected(TabLayout.Tab tab) {} @Override public void onTabReselected(TabLayout.Tab tab) { if (tab.getPosition() != viewPager.getCurrentItem()) { viewPager.setCurrentItem(tab.getPosition()); } } }); 간단히 원리를 설명하자면 다음과 같다. tab이 변경되었음에도 ViewPager에 반영되지 않는 것이 문제이므로 OnTabSelectedListener를 추가해서 변경된 Tab과 ViewPager의 위치가 맞지 않으면 강제로 ViewPager의 위치를 이동하는 것이다. 그런데 최근 이 버그 이슈에 변경이 생겼는데 내용은 Android Design Support Library 23.0.1 버전에 패치(2015년 9월 5일자)가 되었다는 것. 확인해 보니 버그 패치가 되었다. 따라서 23.0.1 이상을 사용한다면 위의 방법을 사용할 필요는 없어졌다. setupWithViewPager를 사용할 수 없는 경우 등을 위해서 기록을 남겨둔다.]]></summary><content type="html"><![CDATA[<p><a href="http://android-developers.blogspot.kr/2015/05/android-design-support-library.html">Android Design Support Library</a>에 있는 <a href="https://developer.android.com/intl/ko/reference/android/support/design/widget/TabLayout.html">TabLayout</a>과 ViewPager를 연동해서 사용하기 위해 <a href="https://developer.android.com/intl/ko/reference/android/support/design/widget/TabLayout.html#setupWithViewPager%28android.support.v4.view.ViewPager%29">setupWithViewPager()</a> 함수를 사용한다.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setupWithViewPager</span> <span class="hljs-params">(ViewPager viewPager)</span></span></pre>
<blockquote>
<p>TabLayout와 ViewPager를 연동한다.</p>
</blockquote>
<p>이 함수는 아래의 동작을 수행한다.</p>
<ul>
<li>Add a ViewPager.OnPageChangeListener that will forward events to this TabLayout.</li>
<li>Populate the TabLayout's tabs from the ViewPager's PagerAdapter.</li>
<li>Set our TabLayout.OnTabSelectedListener which will forward selected events to the ViewPager</li>
</ul>
<p>결론은 setupWithViewPager()를 사용하면 손쉽게 TabLayout와 ViewPager를 연동할 수 있다. 다시말해 ViewPager를 넘기면 이에 맞추어 TabLayout의 선택이 변경되고 TabLayout에서 Tab을 터치하면 이에 맞게 ViewPager가 변경된다.</p>
<p>하지만 이 기능에는 버그가 있다. 그냥 쉽게 넘어가면 안드로이드가 아니지...
이 문제도 항상 발생하는 것은 아니나 간헐적으로 ViewPager을 Swipe하여 변경을 하다가 Tab을 터치하면 Tab은 터치에 맞게 변경되나 ViewPaper는 함께 변경되지 않는 문제가 발생한다. 이 문제에 대해서는 <a href="https://code.google.com/p/android/issues/detail?id=183123에">https://code.google.com/p/android/issues/detail?id=183123에</a> 버그 리포트 되어 있다.</p>
<p>패치를 기다리기 전에 문제를 해결할 필요가 있어 아래와 같이 직접 수정해서 사용했다.</p>
<pre class="hljs java">tabLayout.setOnTabSelectedListener(<span class="hljs-keyword">new</span> TabLayout.OnTabSelectedListener() {
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onTabSelected</span><span class="hljs-params">(TabLayout.Tab tab)</span> </span>{
        <span class="hljs-keyword">if</span> (tab.getPosition() != viewPager.getCurrentItem()) {
            viewPager.setCurrentItem(tab.getPosition());
        }
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onTabUnselected</span><span class="hljs-params">(TabLayout.Tab tab)</span> </span>{}

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onTabReselected</span><span class="hljs-params">(TabLayout.Tab tab)</span> </span>{
        <span class="hljs-keyword">if</span> (tab.getPosition() != viewPager.getCurrentItem()) {
            viewPager.setCurrentItem(tab.getPosition());
        }
    }
});</pre>
<p>간단히 원리를 설명하자면 다음과 같다.</p>
<p>tab이 변경되었음에도 ViewPager에 반영되지 않는 것이 문제이므로 OnTabSelectedListener를 추가해서 변경된 Tab과 ViewPager의 위치가 맞지 않으면 강제로 ViewPager의 위치를 이동하는 것이다.</p>
<p>그런데 최근 이 버그 이슈에 변경이 생겼는데 내용은 <strong>Android Design Support Library 23.0.1 버전에 패치(2015년 9월 5일자)가 되었다는 것</strong>. 확인해 보니 버그 패치가 되었다. 따라서 23.0.1 이상을 사용한다면 위의 방법을 사용할 필요는 없어졌다. setupWithViewPager를 사용할 수 없는 경우 등을 위해서 기록을 남겨둔다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/21/android-viewpager-dot-setonpagechangelistener-deprecated/</id><title type="html">안드로이드 ViewPager.setOnPageChangeListener() Deprecated 대응</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/21/android-viewpager-dot-setonpagechangelistener-deprecated/"/><published>2015-09-21T11:20:00+09:00</published><updated>2015-09-21T11:20:00+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[Android Support Library 22.2.0 이후부터 ViewPager.setOnPageChangeListener() 함수가 Deprecated 되었다. 안드로이드는 무슨 Deprecated가 이렇게 빈번한지... 하지만 이번 변경은 옳은 결정이라고 생각한다. 그냥 Deprecated된 것이 아니라 대체할 수 있는 함수가 함께 추가되었다(더 유연한). ViewPager.setOnPageChangeListener() - Deprecated public void setOnPageChangeListener (ViewPager.OnPageChangeListener listener) ViewPager의 페이지가 변경(선택된 페이지의 변경 : UI의 변경이 아닌)되거나 스크롤이 이동될 때 불려지는 listener를 지정한다. 기존 setOnPageChangeListener의 문제점은 listener를 하나만 사용할 수 있다는 것이다. 그래서 이번에 Deprecated되면서 여러개의 listener를 사용할 수 있도록 변경되었다. 대체 방법으로 아래의 함수들이 추가되었다. ViewPager.addOnPageChangeListener() public void addOnPageChangeListener (ViewPager.OnPageChangeListener listener) OnPageChangeListener를 추가한다. ViewPager.clearOnPageChangeListeners() public void clearOnPageChangeListeners () 등록된 OnPageChangeListener를 모두 제거한다. ViewPager.removeOnPageChangeListener() public void removeOnPageChangeListener (ViewPager.OnPageChangeListener listener) 지정된 OnPageChangeListener를 제거한다. 사용법은 설명하지 않아도 바로 이해할 수 있을 생각된다. setOnPageChangeListener와 addOnPageChangeListener의 인자가 동일하므로 함수명만 바꾸면 그대로 동작한다. 단, 기존 것은 setOnPageChangeListener는 removeOnPageChangeListener와 addOnPageChangeListener 동작을 합친 것처럼 동작했으니 동일한 역할이 필요하다면 removeOnPageChangeListener와 addOnPageChangeListener를 함께 사용해야 한다.]]></summary><content type="html"><![CDATA[<p><a href="https://developer.android.com/intl/ko/tools/support-library/index.html">Android Support Library 22.2.0</a> 이후부터 ViewPager.setOnPageChangeListener() 함수가 Deprecated 되었다. 안드로이드는 무슨 Deprecated가 이렇게 빈번한지... 하지만 이번 변경은 옳은 결정이라고 생각한다. 그냥 Deprecated된 것이 아니라 대체할 수 있는 함수가 함께 추가되었다(더 유연한).</p>
<p><strong><a href="https://developer.android.com/intl/ko/reference/android/support/v4/view/ViewPager.html#setOnPageChangeListener%28android.support.v4.view.ViewPager.OnPageChangeListener%29">ViewPager.setOnPageChangeListener() - Deprecated</a></strong></p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setOnPageChangeListener</span> <span class="hljs-params">(ViewPager.OnPageChangeListener listener)</span></span></pre>
<blockquote>
<p>ViewPager의 페이지가 변경(선택된 페이지의 변경 : UI의 변경이 아닌)되거나 스크롤이 이동될 때 불려지는 listener를 지정한다.</p>
</blockquote>
<p>기존 setOnPageChangeListener의 문제점은 listener를 하나만 사용할 수 있다는 것이다. 그래서 이번에 Deprecated되면서 여러개의 listener를 사용할 수 있도록 변경되었다.</p>
<p>대체 방법으로 아래의 함수들이 추가되었다.</p>
<p><strong><a href="https://developer.android.com/intl/ko/reference/android/support/v4/view/ViewPager.html#addOnPageChangeListener%28android.support.v4.view.ViewPager.OnPageChangeListener%29">ViewPager.addOnPageChangeListener()</a></strong></p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addOnPageChangeListener</span> <span class="hljs-params">(ViewPager.OnPageChangeListener listener)</span></span></pre>
<blockquote>
<p>OnPageChangeListener를 추가한다.</p>
</blockquote>
<p><strong><a href="https://developer.android.com/intl/ko/reference/android/support/v4/view/ViewPager.html#clearOnPageChangeListeners%28%29">ViewPager.clearOnPageChangeListeners()</a></strong></p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clearOnPageChangeListeners</span> <span class="hljs-params">()</span></span></pre>
<blockquote>
<p>등록된 OnPageChangeListener를 모두 제거한다.</p>
</blockquote>
<p><strong><a href="https://developer.android.com/intl/ko/reference/android/support/v4/view/ViewPager.html#removeOnPageChangeListener%28android.support.v4.view.ViewPager.OnPageChangeListener%29">ViewPager.removeOnPageChangeListener()</a></strong></p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeOnPageChangeListener</span> <span class="hljs-params">(ViewPager.OnPageChangeListener listener)</span></span></pre>
<blockquote>
<p>지정된 OnPageChangeListener를 제거한다.</p>
</blockquote>
<p>사용법은 설명하지 않아도 바로 이해할 수 있을 생각된다. setOnPageChangeListener와 addOnPageChangeListener의 인자가 동일하므로 함수명만 바꾸면 그대로 동작한다. 단, 기존 것은 setOnPageChangeListener는 removeOnPageChangeListener와 addOnPageChangeListener 동작을 합친 것처럼 동작했으니 동일한 역할이 필요하다면 removeOnPageChangeListener와 addOnPageChangeListener를 함께 사용해야 한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/20/css-units/</id><title type="html">CSS Units - px, pt, em, % 등</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/20/css-units/"/><published>2015-09-20T08:23:23+09:00</published><updated>2015-09-20T08:23:23+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="css" label="css" /><summary><![CDATA[w3schools의 CSS Units에는 다음과 같이 CSS에서 사용하는 단위에 대해 안내되어 있다. CSS는 단위(길이)를 표현하기 위한 여러가지 단위가 있다. width, margin, padding, font-size, border-width 등과 같은 많은 CSS 속성에서 사용한다. 단위는 10px, 2em과 같이 숫자 뒤에 공백없이 붙여서 사용하며 0인 경우는 생략할 수 있다. 단위는 음의 수를 가질 수 있으며 상대/절대 단위로 구분할 수 있다. Browser Support Unit Chrome IE Firefox Safari Opera em, ex, %, px, cm, mm, in, pt, pc 1.0 3.0 1.0 1.0 3.5 ch 27.0 9.0 1.0 7.0 20.0 rem 4.0 9.0 3.6 4.1 11.6 vh, vw 20.0 9.0 19.0 6.0 20.0 vmin 20.0 9.0* 19.0 6.0 20.0 vmax 26.0 Not supported 19.0 Not supported 20.0 Note: 인터넷 익스플로러 9에서는 vmin을 비표준 이름인 vm으로 지원한다. 상대 단위 상대 단위는 다른 단위 속성에 대한 상대적 길이를 지정한다. 상대 단위를 잘 사용하면 다양한 디바이스에 최적화된 보기를 제공할 수 있기 때문에 권장되는 단위이다. 하지만 일반적으로 고정된 사이즈 내에서 디자인하는 것에 익숙한 경우에는 사용이 다소 까다롭다(상대적 단위를 쓸 때 가장 중요한 것은 어느 것에 대한 상대적 사이즈인지를 생각해야 하기 때문이다. 단순해 보이지만 작업을 하다보면 조금 복잡한 상황이 생기기도 한다). Unit Description em 해당 Element의 font-size에 대한 비율(2em은 font-size의 2배 사이즈) ex 현재 글꼴의 x(소문자) 높이에 대한 비율 ch "0"의 width에 대한 비율 rem Root Element(html)의 font-size에 대한 비율 vw Viewport width의 1%에 대한 비율 vh Viewport height의 1%에 대한 비율 vmin Viewport smaller dimension의 1%에 대한 비율 vmax Viewport larger dimension의 1%에 대한 비율 % Tip: em과 rem 단위는 확장 레이아웃을 만는데 아주 실용적(효과적)이다. 절대 단위 절대 단위는 고정되어 있으며 지정된 단위로 정확히 표현된다. "웹 화면의 크기는 아주 다양하기 때문에 화면에서는 사용하지 않는 것이 좋다. 그러나 프린트 레이아웃과 같이 출력 화면을 알고 있는 경우에는 사용될 수 있다."라고는 하지만 일반적인 경우엔 상대 단위보다 더 많이 사용하게 된다. Unit Description cm 센티미터 mm 밀리미터 in 인치 (1in = 96px = 2.54cm) px * 픽셀 (1px = 1/96th of 1in) pt 포인트 (1pt = 1/72 of 1in) pc 피카 (1pc = 12 pt) Pixels(px)는 보여지는 기기에 따라 상대적이다. 예를들어 low-dpi 기기에서는 1px은 화면의 1 device pixel(dot)이다. 프린터 또는 고행상도 기기에서는 1px이 화면의 여러 pixel과 동일하다. 사용 제안 위에서 절대 단위를 더 많이 사용한다는 언급을 했던 것과 마찬가지로 대부분의 경우에 고정 단위를 많이 사용한다. 하지만 최근의 트랜드를 감안하면 상대 단위를 적극적으로 사용할 필요가 있다. 최근 유행하는 용어들인 멀티 디바이스, 적응형 웹, 반응형 웹, 미디어 쿼리 등에 상대 단위가 더 잘 부합된다. 사실 정확히 이야기하자면 선정된 환경(예측되는 한경)만 감안한다면 절대 단위만으로 원하는 결과를 대부분 얻을 수 있다. 하지만 지금처럼 다양한 환경(미리 환경을 예측할 수 없을 만큼)에 최선의 결과를 얻고 싶다면 기존 설계의 습관을 버리고 상대 단위를 기반으로한 디자인 설계를 적극 도입하자.]]></summary><content type="html"><![CDATA[<p>w3schools의 <a href="http://www.w3schools.com/cssref/css_units.asp">CSS Units</a>에는 다음과 같이 CSS에서 사용하는 단위에 대해 안내되어 있다.</p>
<blockquote>
<p>CSS는 단위(길이)를 표현하기 위한 여러가지 단위가 있다. width, margin, padding, font-size, border-width 등과 같은 많은 CSS 속성에서 사용한다. 단위는 10px, 2em과 같이 숫자 뒤에 공백없이 붙여서 사용하며 0인 경우는 생략할 수 있다. 단위는 음의 수를 가질 수 있으며 상대/절대 단위로 구분할 수 있다.</p>
</blockquote>
<h2>Browser Support</h2>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Chrome</th>
<th>IE</th>
<th>Firefox</th>
<th>Safari</th>
<th>Opera</th>
</tr>
</thead>
<tbody>
<tr>
<td>em, ex, %, px, cm, mm, in, pt, pc</td>
<td>1.0</td>
<td>3.0</td>
<td>1.0</td>
<td>1.0</td>
<td>3.5</td>
</tr>
<tr>
<td>ch</td>
<td>27.0</td>
<td>9.0</td>
<td>1.0</td>
<td>7.0</td>
<td>20.0</td>
</tr>
<tr>
<td>rem</td>
<td>4.0</td>
<td>9.0</td>
<td>3.6</td>
<td>4.1</td>
<td>11.6</td>
</tr>
<tr>
<td>vh, vw</td>
<td>20.0</td>
<td>9.0</td>
<td>19.0</td>
<td>6.0</td>
<td>20.0</td>
</tr>
<tr>
<td>vmin</td>
<td>20.0</td>
<td>9.0*</td>
<td>19.0</td>
<td>6.0</td>
<td>20.0</td>
</tr>
<tr>
<td>vmax</td>
<td>26.0</td>
<td>Not supported</td>
<td>19.0</td>
<td>Not supported</td>
<td>20.0</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Note: 인터넷 익스플로러 9에서는 vmin을 비표준 이름인 vm으로 지원한다.</p>
</blockquote>
<h2>상대 단위</h2>
<p>상대 단위는 다른 단위 속성에 대한 상대적 길이를 지정한다. 상대 단위를 잘 사용하면 다양한 디바이스에 최적화된 보기를 제공할 수 있기 때문에 권장되는 단위이다. 하지만 일반적으로 고정된 사이즈 내에서 디자인하는 것에 익숙한 경우에는 사용이 다소 까다롭다(상대적 단위를 쓸 때 가장 중요한 것은 어느 것에 대한 상대적 사이즈인지를 생각해야 하기 때문이다. 단순해 보이지만 작업을 하다보면 조금 복잡한 상황이 생기기도 한다).</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>em</td>
<td>해당 Element의 font-size에 대한 비율(2em은 font-size의 2배 사이즈)</td>
</tr>
<tr>
<td>ex</td>
<td>현재 글꼴의 x(소문자) 높이에 대한 비율</td>
</tr>
<tr>
<td>ch</td>
<td>&quot;0&quot;의 width에 대한 비율</td>
</tr>
<tr>
<td>rem</td>
<td>Root Element(html)의 font-size에 대한 비율</td>
</tr>
<tr>
<td>vw</td>
<td>Viewport width의 1%에 대한 비율</td>
</tr>
<tr>
<td>vh</td>
<td>Viewport height의 1%에 대한 비율</td>
</tr>
<tr>
<td>vmin</td>
<td>Viewport smaller dimension의 1%에 대한 비율</td>
</tr>
<tr>
<td>vmax</td>
<td>Viewport larger dimension의 1%에 대한 비율</td>
</tr>
<tr>
<td>%</td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Tip: em과 rem 단위는 확장 레이아웃을 만는데 아주 실용적(효과적)이다.</p>
</blockquote>
<h2>절대 단위</h2>
<p>절대 단위는 고정되어 있으며 지정된 단위로 정확히 표현된다. &quot;웹 화면의 크기는 아주 다양하기 때문에 화면에서는 사용하지 않는 것이 좋다. 그러나 프린트 레이아웃과 같이 출력 화면을 알고 있는 경우에는 사용될 수 있다.&quot;라고는 하지만 일반적인 경우엔 상대 단위보다 더 많이 사용하게 된다.</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>cm</td>
<td>센티미터</td>
</tr>
<tr>
<td>mm</td>
<td>밀리미터</td>
</tr>
<tr>
<td>in</td>
<td>인치 (1in = 96px = 2.54cm)</td>
</tr>
<tr>
<td>px *</td>
<td>픽셀 (1px = 1/96th of 1in)</td>
</tr>
<tr>
<td>pt</td>
<td>포인트 (1pt = 1/72 of 1in)</td>
</tr>
<tr>
<td>pc</td>
<td>피카 (1pc = 12 pt)</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Pixels(px)는 보여지는 기기에 따라 상대적이다. 예를들어 low-dpi 기기에서는 1px은 화면의 1 device pixel(dot)이다. 프린터 또는 고행상도 기기에서는 1px이 화면의 여러 pixel과 동일하다.</p>
</blockquote>
<h2>사용 제안</h2>
<p>위에서 절대 단위를 더 많이 사용한다는 언급을 했던 것과 마찬가지로 대부분의 경우에 고정 단위를 많이 사용한다. 하지만 최근의 트랜드를 감안하면 상대 단위를 적극적으로 사용할 필요가 있다. 최근 유행하는 용어들인 멀티 디바이스, 적응형 웹, 반응형 웹, 미디어 쿼리 등에 상대 단위가 더 잘 부합된다. 사실 정확히 이야기하자면 선정된 환경(예측되는 한경)만 감안한다면 절대 단위만으로 원하는 결과를 대부분 얻을 수 있다. 하지만 지금처럼 다양한 환경(미리 환경을 예측할 수 없을 만큼)에 최선의 결과를 얻고 싶다면 기존 설계의 습관을 버리고 상대 단위를 기반으로한 디자인 설계를 적극 도입하자.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/19/x-ua-compatible-ie-equals-edge-compatibility-view/</id><title type="html">익스플로러 호환성 보기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/19/x-ua-compatible-ie-equals-edge-compatibility-view/"/><published>2015-09-19T09:32:18+09:00</published><updated>2015-09-19T09:32:18+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="html" label="html" /><summary><![CDATA[현재는 많이 줄었다고는 해도 아직도 인터넷 익스플로러의 사용자가 많은 편이다. 최근 11버전을 새로 출시하면서 예전 보다는 많이 좋아졌다는 평가들이 많다. 하지만 아직도 나에겐 좋지않은 인상이 더 많이 남은 것 같다. 본격적으로 일로써 브라우저를 접할 때에는 인터넷 익스폴로러가 5.5에서 6으로 막 넘어가던 시기였다. 그 시절만 하더라도 익스플로러에 대항할 브라우저는 없었다. 그 당시에도 파이어폭스, 오페라가 있었지만 점유율은 높지 않았다. 그 상태로 오랜 시간이 흘러 익스플로러7이 나오고 다시 8이 나왔다. 이 시점에 등장한 것이 호환성 보기라는 기능이다(사실 정확한 시점은 기억나지 않지만 8이 나오는 시점이었던 것 같다). 우선 호환성 보기란 무엇인가? 마이크로소프트의 윈도우 사이트에 보면 "왜 Internet Explorer 8에서 일부 웹 사이트가 올바르게 표시되지 않습니까?"라는 글이 있다. 사실 이 글에서도 명확하게 설명하진 않지만 "이전 버전의 Internet Explorer(인터넷 익스플로러)용 웹 사이트는 현재 버전에서 올바르게 표시되지 않을 수도 있습니다. 하지만 호환성 보기를 사용하여 Internet Explorer(인터넷 익스플로러)에서 웹 사이트가 표시되는 방식을 개선할 수 있습니다."라고 되어 있다. MS 관련글 호환성 보기를 사용하여 사이트 표시 문제 해결하기 Internet Explorer 9에서 호환성 보기 방법 그렇다 새로운 인터넷 익스플로러에서 이전 버전의 익스플로러에 맞추어진 사이트가 정상적이지 보이지 않는 문제를 해결하기 위해 추가된 기능이다. 그럼 왜 정상적으로 보이지 않는 것일까? 인터넷 익스플로러는 웹 표준을 제대로 준수하지 않았기 때문에 버전이 올라가면서 호환성에 문제가 많이 발생한 것이다. 워낙에 점유율이 높은 상황이 이었으니 급진적 변화는 대란이 일어날 것이라는 생각에 호환성 보기를 추가했으리라 본다. 하지만 나는 이 호환성 보기라는 것이 더 큰 문제들을 만들었다고 생각한다. 어짜피 새로운 웹 표준으로 전향되어야 하는 상황에 알아서 맞춰주는 기능을 제공하니 서비스들이 변화에 적응하는 것이 더 늦어진 것이다. 변화할 시간을 준다는 목적이었을지 모르나 제대로된 웹으로 전환되는데 걸림돌이 되는 상황이다. 특히 이 호환성 모드가 8에서만 제공되는 것이 아니라 그 이후 9, 10, 11에서 조차도 제공한다는 것이다. 게다가 호환성 보기를 사용자가 판단하여 도저히 볼 수 없는 사이트를 골라서 적용하게 해야 하는데 인터넷 익스플로러가 자체적인 판단을 해서 호환성 모드로 보여주는 경우가 많다. 여기서 심각한 문제가 발생한다. 정작 웹표준을 준수하여 만들어진 페이지가 호환성 보기로 렌더링되어 깨지는 경우가 생기는 것이다(참고 - 랜더링 모드 선택 순서도 : https://hsivonen.fi/doctype/ie-mode.pdf). 나는 주변 지인들과이 대화에서 MS를 인터넷 발전의 "악의 축"이라고 자주 얘기하곤 한다. 그 이유를 나열하자면 한도 끝도 없을 것 같고... 웹 분야에 일을 하시는 분들이라면 대부분의 경우 무엇 때문에 그런 생각을 가지게 되었는지 공감할 것이라고 생각한다. 어쨌든 다시 본론으로 돌아가서 이 호환성 보기는 현재 시점(HTML5를 채용하는 신규 웹 프로젝트)에서는 사용할 일이 없는 기능이다. 하지만 앞서 얘기한 것처럼 익스플로러가 제작된 페이지를 호환성 보기로 보여줘 버리는 문제를 해결하지 않으면 불편한 상황을 만나게 될 수 있으니 미리 대비해야 한다. 인터넷 익스플로러가 호환성 보기가 아닌 지정된 모드로 랜더링되게 하는 방법을 하나씩 알아보자. X-UA-Compatible Meta 선언을 사용하여 브라우저의 호환성 모드를 조정 <!DOCTYPE html> <html> <head> <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> IE=edge : 최신모드로 지정된 DOCTYPE에 상관없이 IE8 이상 버전에서 항상 최신 표준 모드로 렌더링 chrome=1 : 크롬이 설치되어있다면 IE에서도 크롬 렌더링을 사용 당연히 위에 예시처럼 IE=edge,chrome=1을 사용하는 것이 권장된다. 하지만 그외에도 아래와 같은 설정도 있다. IE=5 : 관용모드(quirks mode)로 지정된 DOCTYPE에 상관없이 IE5 렌더링 방식이 사용됩니다. IE=7 : IE7 표준모드로 지정된 DOCTYPE에 상관없이 IE7 표준 모드 렌더링 방식이 사용 IE=EmulateIE7 : IE7 에뮬레이션 모드로 지정된 DOCTYPE에 따라 IE7 표준모드나 관용모드로 렌더링 IE=8 : IE8 표준모드로 지정된 DOCTYPE에 상관없이 IE8 표준모드로 렌더링 IE=EmulateIE8 : IE8 에뮬레이션 모드로 지정된 DOCTYPE에 따라 IE8 표준모드나 관용모드로 렌더링 X-UA-Compatible는 HTML5에서 비표준 속성으로 validation에서 경고가 나올 수 있다. 서버에서 응답 헤더에 X-UA-Compatible를 함께 전송 # ------------------------------------------------------------------------------ # | Better website experience | # ------------------------------------------------------------------------------ # Force IE to render pages in the highest available mode in the various # cases when it may not: http://hsivonen.iki.fi/doctype/ie-mode.pdf. <IfModule mod_headers.c> Header set X-UA-Compatible "IE=edge" # `mod_headers` can't match based on the content-type, however, we only # want to send this header for HTML pages and not for the other resources <FilesMatch "\.(appcache|crx|css|cur|eot|gif|htc|ico|jpe?g|js|m4a|m4v|manifest|mp4|oex|oga|ogg|ogv|opus|otf|pdf|png|safariextz|svgz?|ttf|vcf|webapp|webm|webp|woff|xml|xpi)$"> Header unset X-UA-Compatible </FilesMatch> </IfModule> # 또는 <IfModule mod_setenvif.c> <IfModule mod_headers.c> BrowserMatch MSIE ie Header set X-UA-Compatible "IE=Edge,chrome=1" env=ie </IfModule> </IfModule> <IfModule mod_headers.c> Header append Vary User-Agent </IfModule> server { #... add_header X-UA-Compatible "IE=Edge,chrome=1"; } <configuration> <system.webServer> <httpProtocol> <customHeaders> <add name="X-UA-Compatible" value="IE=edge,chrome=1" /> </customHeaders> </httpProtocol> </system.webServer> </configuration> 크롬 프레임 크롬 프레임이라는 ActiveX를 설치해서 익스플로러에서 크롬처럼 랜더링하는 것도 가능했지만 크롬 프레임의 개발 종료로 이제 더 이상 추천하지 않는다. 추가적 문제 자.. 그럼 이로써 모든 문제가 해결된 것인가? 항상 그렇듯 프로그래머에게는 쉽게 해피엔딩이 찾아오지 않는다. 사실 위의 X-UA-Compatible는 브라우저에게 주는 권고사항일뿐 강제사항이 아니다. IE에서 호환성 보기를 체크한 사용자 판별하기에 소개된 내용을 기준으로 보조적 해결 방법을 제시한다. 아래의 경우들을 보자. XP에서 IE8을 사용하는 경우 : 호환성 보기 버튼이 항상 표시되므로 사용자들이 언제든 호환성 보기로 변경이 가능하다. Windows 7에서 IE8, 9를 사용하는 경우 : 위와 같은 이유지만 이 경우는 윈도우 업데이트를 사용하지 않거나 일부러 업데이트를 막은 경우라고 볼 수 있다. 모든 사이트를 호환성으로 보도록 설정한 경우 : 이 옵션은 기본적으로 활성화 되지 않으므로 사용자가 스스로 이 옵션을 켰을 가능성이 높다. 개발자가 테스트 환경 구축을 위해서 이러는 경우도 있다. 가끔 Tweek된 버전의 윈도에 이 옵션이 기본으로 활성화 된 경우 : 사실 제일 곤란한 건 이런 경우이다. 호환성 보기 모드에서 사용자에게 호환성 보기 해제를 안내하기 우선 사용자가 호환성 보기 모드를 사용하는지를 판별해야 적절한 가이드를 제시할 수 있다. IE에서 호환성 보기를 체크한 사용자 판별하기에 소개된 아래의 예시를 보자. if( navigator.userAgent.indexOf( "MSIE 7" ) > 0 && navigator.userAgent.indexOf( "Trident" ) ) { // 호환성 보기 활성화 } // or if( /MSIE 7.*Trident/.test( navigator.userAgent ) ) { document.getElementsByTagName( "html" )[ 0 ].className += " ie-compatible"; } 판별 원리는 아래과 같다고도 소개되어 있다. MS의 렌더링 엔진은 Trident 입니다. IE7에서 처음 도입되었습니다. 하지만 userAgent에 Trident가 명시되기 시작한건 IE8 부터죠. 순정 IE7은 “MSIE 7″ 문자열은 포함하지만 “Trident”는 포함하지 않습니다. IE8 이상에서 호환성 보기를 전환하면 userAgent에 버전 정보가 MSIE 7로 표시가 되기 때문에, 두 가지 문자열을 다 포함하게 되죠. 이렇게 판별이 완료되면 사용자에게 호환성 보기에서는 정상적 사용이 되지 않는다는 것을 안내하면 되겠다.]]></summary><content type="html"><![CDATA[<p>현재는 많이 줄었다고는 해도 아직도 인터넷 익스플로러의 사용자가 많은 편이다. 최근 11버전을 새로 출시하면서 예전 보다는 많이 좋아졌다는 평가들이 많다. 하지만 아직도 나에겐 좋지않은 인상이 더 많이 남은 것 같다. 본격적으로 일로써 브라우저를 접할 때에는 인터넷 익스폴로러가 5.5에서 6으로 막 넘어가던 시기였다. 그 시절만 하더라도 익스플로러에 대항할 브라우저는 없었다. 그 당시에도 파이어폭스, 오페라가 있었지만 점유율은 높지 않았다. 그 상태로 오랜 시간이 흘러 익스플로러7이 나오고 다시 8이 나왔다. 이 시점에 등장한 것이 호환성 보기라는 기능이다(사실 정확한 시점은 기억나지 않지만 8이 나오는 시점이었던 것 같다).</p>
<p>우선 호환성 보기란 무엇인가?</p>
<p>마이크로소프트의 윈도우 사이트에 보면 &quot;<a href="http://windows.microsoft.com/ko-kr/windows/websites-display-incorrectly-internet-explorer-8#1TC=windows-7">왜 Internet Explorer 8에서 일부 웹 사이트가 올바르게 표시되지 않습니까?</a>&quot;라는 글이 있다. 사실 이 글에서도 명확하게 설명하진 않지만 &quot;이전 버전의 Internet Explorer(인터넷 익스플로러)용 웹 사이트는 현재 버전에서 올바르게 표시되지 않을 수도 있습니다. 하지만 호환성 보기를 사용하여 Internet Explorer(인터넷 익스플로러)에서 웹 사이트가 표시되는 방식을 개선할 수 있습니다.&quot;라고 되어 있다.</p>
<p><strong>MS 관련글</strong></p>
<ul>
<li><a href="http://windows.microsoft.com/ko-kr/internet-explorer/use-compatibility-view#ie=ie-11">호환성 보기를 사용하여 사이트 표시 문제 해결하기</a></li>
<li><a href="https://support.microsoft.com/ko-kr/kb/2536204">Internet Explorer 9에서 호환성 보기 방법</a></li>
</ul>
<p>그렇다 새로운 인터넷 익스플로러에서 이전 버전의 익스플로러에 맞추어진 사이트가 정상적이지 보이지 않는 문제를 해결하기 위해 추가된 기능이다. 그럼 왜 정상적으로 보이지 않는 것일까? 인터넷 익스플로러는 웹 표준을 제대로 준수하지 않았기 때문에 버전이 올라가면서 호환성에 문제가 많이 발생한 것이다. 워낙에 점유율이 높은 상황이 이었으니 급진적 변화는 대란이 일어날 것이라는 생각에 호환성 보기를 추가했으리라 본다.</p>
<p>하지만 나는 이 호환성 보기라는 것이 더 큰 문제들을 만들었다고 생각한다. 어짜피 새로운 웹 표준으로 전향되어야 하는 상황에 알아서 맞춰주는 기능을 제공하니 서비스들이 변화에 적응하는 것이 더 늦어진 것이다. 변화할 시간을 준다는 목적이었을지 모르나 제대로된 웹으로 전환되는데 걸림돌이 되는 상황이다. 특히 이 호환성 모드가 8에서만 제공되는 것이 아니라 그 이후 9, 10, 11에서 조차도 제공한다는 것이다. 게다가 호환성 보기를 사용자가 판단하여 도저히 볼 수 없는 사이트를 골라서 적용하게 해야 하는데 인터넷 익스플로러가 자체적인 판단을 해서 호환성 모드로 보여주는 경우가 많다. 여기서 심각한 문제가 발생한다. 정작 웹표준을 준수하여 만들어진 페이지가 호환성 보기로 렌더링되어 깨지는 경우가 생기는 것이다(참고 - 랜더링 모드 선택 순서도 : <a href="https://hsivonen.fi/doctype/ie-mode.pdf">https://hsivonen.fi/doctype/ie-mode.pdf</a>).</p>
<p>나는 주변 지인들과이 대화에서 MS를 인터넷 발전의 &quot;악의 축&quot;이라고 자주 얘기하곤 한다. 그 이유를 나열하자면 한도 끝도 없을 것 같고... 웹 분야에 일을 하시는 분들이라면 대부분의 경우 무엇 때문에 그런 생각을 가지게 되었는지 공감할 것이라고 생각한다.</p>
<p>어쨌든 다시 본론으로 돌아가서 이 호환성 보기는 현재 시점(HTML5를 채용하는 신규 웹 프로젝트)에서는 사용할 일이 없는 기능이다. 하지만 앞서 얘기한 것처럼 익스플로러가 제작된 페이지를 호환성 보기로 보여줘 버리는 문제를 해결하지 않으면 불편한 상황을 만나게 될 수 있으니 미리 대비해야 한다.</p>
<p>인터넷 익스플로러가 호환성 보기가 아닌 지정된 모드로 랜더링되게 하는 방법을 하나씩 알아보자.</p>
<h2>X-UA-Compatible Meta 선언을 사용하여 브라우저의 호환성 모드를 조정</h2>
<pre class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"IE=edge,chrome=1"</span>&gt;</span></pre>
<ul>
<li>IE=edge : 최신모드로 지정된 DOCTYPE에 상관없이 IE8 이상 버전에서 항상 최신 표준 모드로 렌더링</li>
<li>chrome=1 : 크롬이 설치되어있다면 IE에서도 크롬 렌더링을 사용</li>
</ul>
<p>당연히 위에 예시처럼 <code>IE=edge,chrome=1</code>을 사용하는 것이 권장된다. 하지만 그외에도 아래와 같은 설정도 있다.</p>
<ul>
<li>IE=5 : 관용모드(quirks mode)로 지정된 DOCTYPE에 상관없이 IE5 렌더링 방식이 사용됩니다.</li>
<li>IE=7 : IE7 표준모드로 지정된 DOCTYPE에 상관없이 IE7 표준 모드 렌더링 방식이 사용</li>
<li>IE=EmulateIE7 : IE7 에뮬레이션 모드로 지정된 DOCTYPE에 따라 IE7 표준모드나 관용모드로 렌더링</li>
<li>IE=8 : IE8 표준모드로 지정된 DOCTYPE에 상관없이 IE8 표준모드로 렌더링</li>
<li>IE=EmulateIE8 : IE8 에뮬레이션 모드로 지정된 DOCTYPE에 따라 IE8 표준모드나 관용모드로 렌더링</li>
</ul>
<p>X-UA-Compatible는 HTML5에서 비표준 속성으로 validation에서 경고가 나올 수 있다.</p>
<h2>서버에서 응답 헤더에 X-UA-Compatible를 함께 전송</h2>
<pre class="hljs apache"><span class="hljs-comment"># ------------------------------------------------------------------------------</span>
<span class="hljs-comment"># | Better website experience                                                  |</span>
<span class="hljs-comment"># ------------------------------------------------------------------------------</span>
<span class="hljs-comment"># Force IE to render pages in the highest available mode in the various</span>
<span class="hljs-comment"># cases when it may not: http://hsivonen.iki.fi/doctype/ie-mode.pdf.</span>
<span class="hljs-section">&lt;IfModule mod_headers.c&gt;</span>
    <span class="hljs-attribute"><span class="hljs-nomarkup">Header</span></span> set X-UA-Compatible <span class="hljs-string">"IE=edge"</span>
    <span class="hljs-comment"># `mod_headers` can't match based on the content-type, however, we only</span>
    <span class="hljs-comment"># want to send this header for HTML pages and not for the other resources</span>
    <span class="hljs-section">&lt;FilesMatch "\.(appcache|crx|css|cur|eot|gif|htc|ico|jpe?g|js|m4a|m4v|manifest|mp4|oex|oga|ogg|ogv|opus|otf|pdf|png|safariextz|svgz?|ttf|vcf|webapp|webm|webp|woff|xml|xpi)$"&gt;</span>
    <span class="hljs-attribute"><span class="hljs-nomarkup">Header</span></span> unset X-UA-Compatible
    <span class="hljs-section">&lt;/FilesMatch&gt;</span>
<span class="hljs-section">&lt;/IfModule&gt;</span>

<span class="hljs-comment"># 또는</span>

<span class="hljs-section">&lt;IfModule mod_setenvif.c&gt;</span>
  <span class="hljs-section">&lt;IfModule mod_headers.c&gt;</span>
    <span class="hljs-attribute">BrowserMatch</span> MSIE ie
    <span class="hljs-attribute"><span class="hljs-nomarkup">Header</span></span> set X-UA-Compatible <span class="hljs-string">"IE=Edge,chrome=1"</span> env=ie
  <span class="hljs-section">&lt;/IfModule&gt;</span>
<span class="hljs-section">&lt;/IfModule&gt;</span>
<span class="hljs-section">&lt;IfModule mod_headers.c&gt;</span>
  <span class="hljs-attribute"><span class="hljs-nomarkup">Header</span></span> append Vary User-Agent
<span class="hljs-section">&lt;/IfModule&gt;</span></pre>
<pre class="hljs nginx"><span class="hljs-section">server</span> {
  <span class="hljs-comment">#...</span>
  <span class="hljs-attribute">add_header</span> X-UA-Compatible <span class="hljs-string">"IE=Edge,chrome=1"</span>;
}</pre>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">system.webServer</span>&gt;</span>
     <span class="hljs-tag">&lt;<span class="hljs-name">httpProtocol</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">customHeaders</span>&gt;</span>
           <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"IE=edge,chrome=1"</span> /&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">customHeaders</span>&gt;</span>
     <span class="hljs-tag">&lt;/<span class="hljs-name">httpProtocol</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">system.webServer</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></pre>
<h2>크롬 프레임</h2>
<p><a href="https://tools.google.com/dlpage/chromeframe?hl=ko&amp;prefersystemlevel=true">크롬 프레임</a>이라는 ActiveX를 설치해서 익스플로러에서 크롬처럼 랜더링하는 것도 가능했지만 크롬 프레임의 개발 종료로 이제 더 이상 추천하지 않는다.</p>
<h2>추가적 문제</h2>
<p>자.. 그럼 이로써 모든 문제가 해결된 것인가? 항상 그렇듯 프로그래머에게는 쉽게 해피엔딩이 찾아오지 않는다. 사실 위의 X-UA-Compatible는 브라우저에게 주는 권고사항일뿐 강제사항이 아니다.</p>
<p><a href="http://blog.grotesq.com/post/380">IE에서 호환성 보기를 체크한 사용자 판별하기</a>에 소개된 내용을 기준으로 보조적 해결 방법을 제시한다.</p>
<p>아래의 경우들을 보자.</p>
<ul>
<li><strong>XP에서 IE8을 사용하는 경우</strong> : 호환성 보기 버튼이 항상 표시되므로 사용자들이 언제든 호환성 보기로 변경이 가능하다.</li>
<li><strong>Windows 7에서 IE8, 9를 사용하는 경우</strong> : 위와 같은 이유지만 이 경우는 윈도우 업데이트를 사용하지 않거나 일부러 업데이트를 막은 경우라고 볼 수 있다.</li>
<li><strong>모든 사이트를 호환성으로 보도록 설정한 경우</strong> : 이 옵션은 기본적으로 활성화 되지 않으므로 사용자가 스스로 이 옵션을 켰을 가능성이 높다. 개발자가 테스트 환경 구축을 위해서 이러는 경우도 있다.</li>
<li><strong>가끔 Tweek된 버전의 윈도에 이 옵션이 기본으로 활성화 된 경우</strong> : 사실 제일 곤란한 건 이런 경우이다.</li>
</ul>
<h3>호환성 보기 모드에서 사용자에게 호환성 보기 해제를 안내하기</h3>
<p>우선 사용자가 호환성 보기 모드를 사용하는지를 판별해야 적절한 가이드를 제시할 수 있다. <a href="http://blog.grotesq.com/post/380">IE에서 호환성 보기를 체크한 사용자 판별하기</a>에 소개된 아래의 예시를 보자.</p>
<pre class="hljs javascript"><span class="hljs-keyword">if</span>( navigator.userAgent.indexOf( <span class="hljs-string">"MSIE 7"</span> ) &gt; <span class="hljs-number">0</span> &amp;&amp; navigator.userAgent.indexOf( <span class="hljs-string">"Trident"</span> ) ) {
    <span class="hljs-comment">// 호환성 보기 활성화</span>
}

<span class="hljs-comment">// or</span>

<span class="hljs-keyword">if</span>( <span class="hljs-regexp">/MSIE 7.*Trident/</span>.test( navigator.userAgent ) ) {
    <span class="hljs-built_in">document</span>.getElementsByTagName( <span class="hljs-string">"html"</span> )[ <span class="hljs-number">0</span> ].className += <span class="hljs-string">" ie-compatible"</span>;
}</pre>
<p>판별 원리는 아래과 같다고도 소개되어 있다.</p>
<blockquote>
<p>MS의 렌더링 엔진은 Trident 입니다. IE7에서 처음 도입되었습니다. 하지만 userAgent에 Trident가 명시되기 시작한건 IE8 부터죠.
순정 IE7은 “MSIE 7″ 문자열은 포함하지만 “Trident”는 포함하지 않습니다.
IE8 이상에서 호환성 보기를 전환하면 userAgent에 버전 정보가 MSIE 7로 표시가 되기 때문에, 두 가지 문자열을 다 포함하게 되죠.</p>
</blockquote>
<p>이렇게 판별이 완료되면 사용자에게 호환성 보기에서는 정상적 사용이 되지 않는다는 것을 안내하면 되겠다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/18/google-translate-exclude-words/</id><title type="html">구글 번역 사용시 특정 영역을 번역에서 제외하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/18/google-translate-exclude-words/"/><published>2015-09-18T12:13:16+09:00</published><updated>2015-09-18T12:13:16+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="octopress" label="octopress" /><summary><![CDATA[이 블로그에는 구글 번역 기능이 붙어 있다. 관련해서 포스팅한 글 옥토프레스에 구글 번역기 달기도 있다. 현재 테스트로 몇가지 언어를 선택 가능하도록 하고 사용중인데 문제가 생겼다. 기존에는 기능을 달아 놓고 번역이 되는 것만 확인하고는 자세히 보지 않아서 몰랐는데 오늘 확인하니 소스 코드까지 부분적으로 번역이 되는 것이 아닌가. 사실 이 블로그의 주된 내용이 프로그래밍 관련이라 코드 블록이 아주 많다. 그래서 방법을 구글 번역 메뉴얼에서 보니 다음과 같은 방법이 나와있었다. 부분적으로 번역 제외하기 해당 영역을 둘러싸고 있는 Tag에 notranslate Class를 준다. <span class="notranslate">번역하지 말아야 할 영역</span> 문서 전체를 번역 제외하기 Html의 head 영역에 아래의 Meta 정보를 추가한다. <meta name="google" content="notranslate"> 옥토프레스에 적용하기 문제는 옥토프레스의 결과 HTML은 직접 만드는 것이 아니라는 것이다. 여러가지 방법이 있을 수 있으나 나는 code block만 검색에서 제외되면 되므로 그냥 관련 플러그인을 수정해 버렸다. backtick_code_block.rb 파일에서 <figure class='code'> 부분을 찾아서 <figure class='code notranslate'>로 바꿔 버렸다. 이것으로 모든 것이 해결된 것은 아니다. 문장 내에서 사용된 코드 블록은 backtick_code_block 플러그인에서 처리하지 않으니 다른 플러그인을 고쳐야 하는데 어딘지 찾지 못했다. 아마도 markdown 해석 플러그인 내부에 있을텐데 gem으로 설치된 것인지 내부에서는 보이지 않는 듯하다(사실 귀찮아서 자세히 찾지 않았다. 게다가 Ruby를 거의 모른다.) 어쨌든 이로써 소스 코드 영역은 번역에서 제외되어 조금은 나아졌다.]]></summary><content type="html"><![CDATA[<p>이 블로그에는 구글 번역 기능이 붙어 있다. 관련해서 포스팅한 글 <a href="https://blog.asamaru.net/2015/09/05/octopress-google-translate/">옥토프레스에 구글 번역기 달기</a>도 있다.
현재 테스트로 몇가지 언어를 선택 가능하도록 하고 사용중인데 문제가 생겼다. 기존에는 기능을 달아 놓고 번역이 되는 것만 확인하고는 자세히 보지 않아서 몰랐는데 오늘 확인하니 소스 코드까지 부분적으로 번역이 되는 것이 아닌가. 사실 이 블로그의 주된 내용이 프로그래밍 관련이라 코드 블록이 아주 많다.
그래서 방법을 구글 번역 메뉴얼에서 보니 다음과 같은 방법이 나와있었다.</p>
<h2>부분적으로 번역 제외하기</h2>
<p>해당 영역을 둘러싸고 있는 Tag에 notranslate Class를 준다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"notranslate"</span>&gt;</span>번역하지 말아야 할 영역<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></pre>
<h2>문서 전체를 번역 제외하기</h2>
<p>Html의 head 영역에 아래의 Meta 정보를 추가한다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"google"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"notranslate"</span>&gt;</span></pre>
<h2>옥토프레스에 적용하기</h2>
<p>문제는 옥토프레스의 결과 HTML은 직접 만드는 것이 아니라는 것이다. 여러가지 방법이 있을 수 있으나 나는 code block만 검색에서 제외되면 되므로 그냥 관련 플러그인을 수정해 버렸다. <code>backtick_code_block.rb</code> 파일에서 <code>&lt;figure class='code'&gt;</code> 부분을 찾아서 <code>&lt;figure class='code notranslate'&gt;</code>로 바꿔 버렸다.</p>
<p>이것으로 모든 것이 해결된 것은 아니다. 문장 내에서 사용된 코드 블록은 backtick_code_block 플러그인에서 처리하지 않으니 다른 플러그인을 고쳐야 하는데 어딘지 찾지 못했다. 아마도 markdown 해석 플러그인 내부에 있을텐데 gem으로 설치된 것인지 내부에서는 보이지 않는 듯하다(사실 귀찮아서 자세히 찾지 않았다. 게다가 Ruby를 거의 모른다.)</p>
<p>어쨌든 이로써 소스 코드 영역은 번역에서 제외되어 조금은 나아졌다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/18/autocompleteadapter-arrayadapter-with-filterable-the-content-of-the-adapter-has-changed-but-listview-did-not-receive-a-notification/</id><title type="html">AutoCompleteAdapter(ArrayAdapter with Filterable) 사용시 비주기적 오류 발생 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/18/autocompleteadapter-arrayadapter-with-filterable-the-content-of-the-adapter-has-changed-but-listview-did-not-receive-a-notification/"/><published>2015-09-18T09:48:32+09:00</published><updated>2015-09-18T09:48:32+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[AppCompatAutoCompleteTextView를 사용하고자 할때 필요한 것이 데이터를 넘겨주는 Adapter이다. 단, 이 Adepter는 extends ListAdapter & Filterable 가 적용되어야 한다. 그래서 보통은 public class StringAutoCompleteAdapter extends ArrayAdapter<String> implements Filterable 형태의 구현을 많이 사용한다. 그리고 대부분의 경우에 AutoCompleteTextView를 사용하는 이유는 검색어 자동완성 등에 사용되고 이 데이터는 서버에서 데이터를 호출해서 적용하도록 한다. 위에 설명한 내용대로 하나의 예시를 보면 아래와 같다(미리 설명하자면 아래의 예제는 잘못된 예제이다. 생각지 못한 오류를 비주기적으로 만나게 된다). package net.asamaru.android.test; import android.content.Context; import android.widget.ArrayAdapter; import android.widget.Filter; import android.widget.Filterable; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import java.io.IOException; import java.io.InputStreamReader; import java.net.HttpURLConnection; import java.net.MalformedURLException; import java.net.URL; import java.net.URLEncoder; import java.util.ArrayList; import java.util.List; public class StringAutoCompleteAdapter extends ArrayAdapter<String> implements Filterable { private List<String> resultList; public StringAutoCompleteAdapter(Context context, int textViewResourceId) { super(context, textViewResourceId); } @Override public int getCount() { return resultList.size(); } @Override public String getItem(int index) { if ((resultList.size() - 1) >= index) { return resultList.get(index); } return null; } @Override public Filter getFilter() { return new Filter() { @Override protected FilterResults performFiltering(CharSequence constraint) { FilterResults filterResults = new FilterResults(); if (constraint != null) { resultList = autocomplete(constraint.toString()); if (resultList != null) { filterResults.values = resultList; filterResults.count = resultList.size(); } } return filterResults; } @Override protected void publishResults(CharSequence constraint, FilterResults results) { if (results.count > 0) { notifyDataSetChanged(); } else { notifyDataSetInvalidated(); } } }; } public ArrayList<String> autocomplete(String input) { HttpURLConnection conn = null; StringBuilder jsonResults = new StringBuilder(); try { URL url = new URL("http://www.abc.com/search/?kwd=" + URLEncoder.encode(input, "utf8")); conn = (HttpURLConnection) url.openConnection(); InputStreamReader in = new InputStreamReader(conn.getInputStream()); int read; char[] buff = new char[1024]; while ((read = in.read(buff)) != -1) { jsonResults.append(buff, 0, read); } } catch (MalformedURLException e) { e.printStackTrace(); return null; } catch (IOException e) { e.printStackTrace(); return null; } finally { if (conn != null) { conn.disconnect(); } } return (new Gson()).fromJson(jsonResults.toString(), new TypeToken<ArrayList<String>>() {}.getType()); } } 위의 예제를 보면 얼핏봐서는 문제가 없어 보인다. 실제로 동작도 잘된다. 하지만 아주 낮은 빈도로 Exception이 발생해 앱이 죽는다. 이 문제로 인하여 원인을 찾지못해 고생하는 경우가 많다. 내가 작업하면서 발생했던 오류는 다음과 같다. The content of the adapter has changed but ListView did not receive a notification. java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.String java.lang.Object.toString()' on a null object reference 내부적 동작 코드들을 보면 이 외에도 View의 구성이나 기타 코딩에 따라 다른 오류가 날 수도 있을 것 같다. 하지만 원인은 대부분 아래의 부분 때문이다(정확하게는 저 부분에서 오류가 나는 것이 아니라 저 부분이 들어간 위치 때문에 다른 부분에서 오류가 난다). resultList = autocomplete(constraint.toString()); 이유를 설명하자면 Filter의 performFiltering() 함수는 백그라운드 쓰레드에서 동작하도록 되어 있다. 그런데 이 함수 안에서 Adapter의 데이터를 변경하는 코드가 들어있기 때문에 Adapter가 데이터의 변경을 확인하는 시점과 notify 되는 시점이 엉킬 경우 오류를 내게 된다. 따라서 타이밍에 따라서 오류가 발생하기도 안하기도 하는 것이다(나의 경우는 키워드를 입력하거나 지우는 등의 변경이 빠르게 반복될 때 데이터의 변경이 빈번히 반복되면서 오류가 나타났다). 실제로 오류를 재현하기가 어려울 정도로 잘 안나오는 경우도 있었다. 그럼 잘못된 예제와 오류, 원인을 알아봤으니 정확한 처리 예시를 보자. package net.asamaru.android.test; import android.content.Context; import android.widget.ArrayAdapter; import android.widget.Filter; import android.widget.Filterable; import com.google.gson.Gson; import com.google.gson.reflect.TypeToken; import java.io.IOException; import java.io.InputStreamReader; import java.net.HttpURLConnection; import java.net.MalformedURLException; import java.net.URL; import java.net.URLEncoder; import java.util.ArrayList; import java.util.List; public class StringAutoCompleteAdapter extends ArrayAdapter<String> implements Filterable { private List<String> resultList; public StringAutoCompleteAdapter(Context context, int textViewResourceId) { super(context, textViewResourceId); } @Override public int getCount() { return resultList.size(); } @Override public String getItem(int index) { if ((resultList.size() - 1) >= index) { return resultList.get(index); } return null; } @Override public Filter getFilter() { return new Filter() { @Override protected FilterResults performFiltering(CharSequence constraint) { FilterResults filterResults = new FilterResults(); ArrayList<String> queryResults; if ((constraint != null) && (constraint.length() != 0)) { queryResults = autocomplete(constraint.toString()); } else { queryResults = new ArrayList<>(); } filterResults.values = queryResults; filterResults.count = queryResults.size(); return filterResults; } @Override protected void publishResults(CharSequence constraint, FilterResults results) { // noinspection unchecked resultList = (ArrayList<String>) results.values; if (results.count > 0) { notifyDataSetChanged(); } else { notifyDataSetInvalidated(); } } }; } public ArrayList<String> autocomplete(String input) { HttpURLConnection conn = null; StringBuilder jsonResults = new StringBuilder(); try { URL url = new URL("http://www.abc.com/search/?kwd=" + URLEncoder.encode(input, "utf8")); conn = (HttpURLConnection) url.openConnection(); InputStreamReader in = new InputStreamReader(conn.getInputStream()); int read; char[] buff = new char[1024]; while ((read = in.read(buff)) != -1) { jsonResults.append(buff, 0, read); } } catch (MalformedURLException e) { e.printStackTrace(); return null; } catch (IOException e) { e.printStackTrace(); return null; } finally { if (conn != null) { conn.disconnect(); } } return (new Gson()).fromJson(jsonResults.toString(), new TypeToken<ArrayList<String>>() {}.getType()); } } 주요 변경 지점은 getFilter()이다. 기존에 resultList = autocomplete(constraint.toString()); 부분을 통해 미리 Adapter의 데이터를 변경하던 것을 publishResults로 옮긴 것이다. 그리고 검색된 결과가 없더라도 빈 ArrayList를 만들어 넣어준 것이다. 코드 상으로는 큰 차이가 나지않고 굳이 이렇게 해야하나 싶지만 내부 동작 방식을 보면 이렇게 하지 않으면 앞서 설명한 것과 같이 예기치 못한 상황을 만날 수 있다. 첨언 : 안드로이드는 조금만 잘못써도 오류가 발생하는 이런 경우를 많이 보게 되는데 아위운 점은 정확한 사용법을 제시하는 메뉴얼을 찾기 어렵다는 것이다. 코드 중간에 보면 // noinspection unchecked 부분이 있는데 크게 중요한 부분은 아니지만 이 부분을 제외하면 warning이 뜬다(안드로이드 스튜디오에서 노란 밑줄). 이 warning을 안드로이드 스튜디오에서 숨기는 역할을 하는 코드다.]]></summary><content type="html"><![CDATA[<p>AppCompatAutoCompleteTextView를 사용하고자 할때 필요한 것이 데이터를 넘겨주는 Adapter이다. 단, 이 Adepter는 <code>extends ListAdapter &amp; Filterable</code> 가 적용되어야 한다. 그래서 보통은 <code>public class StringAutoCompleteAdapter extends ArrayAdapter&lt;String&gt; implements Filterable</code> 형태의 구현을 많이 사용한다. 그리고 대부분의 경우에 AutoCompleteTextView를 사용하는 이유는 검색어 자동완성 등에 사용되고 이 데이터는 서버에서 데이터를 호출해서 적용하도록 한다.</p>
<p>위에 설명한 내용대로 하나의 예시를 보면 아래와 같다(미리 설명하자면 아래의 예제는 잘못된 예제이다. 생각지 못한 오류를 비주기적으로 만나게 된다).</p>
<pre class="hljs java"><span class="hljs-keyword">package</span> net.asamaru.android.test;

<span class="hljs-keyword">import</span> android.content.Context;
<span class="hljs-keyword">import</span> android.widget.ArrayAdapter;
<span class="hljs-keyword">import</span> android.widget.Filter;
<span class="hljs-keyword">import</span> android.widget.Filterable;

<span class="hljs-keyword">import</span> com.google.gson.Gson;
<span class="hljs-keyword">import</span> com.google.gson.reflect.TypeToken;

<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.io.InputStreamReader;
<span class="hljs-keyword">import</span> java.net.HttpURLConnection;
<span class="hljs-keyword">import</span> java.net.MalformedURLException;
<span class="hljs-keyword">import</span> java.net.URL;
<span class="hljs-keyword">import</span> java.net.URLEncoder;
<span class="hljs-keyword">import</span> java.util.ArrayList;
<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringAutoCompleteAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ArrayAdapter</span>&lt;<span class="hljs-title">String</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Filterable</span> </span>{
    <span class="hljs-keyword">private</span> List&lt;String&gt; resultList;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StringAutoCompleteAdapter</span><span class="hljs-params">(Context context, <span class="hljs-keyword">int</span> textViewResourceId)</span> </span>{
        <span class="hljs-keyword">super</span>(context, textViewResourceId);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> resultList.size();
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getItem</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{
        <span class="hljs-keyword">if</span> ((resultList.size() - <span class="hljs-number">1</span>) &gt;= index) {
            <span class="hljs-keyword">return</span> resultList.get(index);
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Filter <span class="hljs-title">getFilter</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Filter() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-function"><span class="hljs-keyword">protected</span> FilterResults <span class="hljs-title">performFiltering</span><span class="hljs-params">(CharSequence constraint)</span> </span>{
                FilterResults filterResults = <span class="hljs-keyword">new</span> FilterResults();
                <span class="hljs-keyword">if</span> (constraint != <span class="hljs-keyword">null</span>) {
                    resultList = autocomplete(constraint.toString());
                    <span class="hljs-keyword">if</span> (resultList != <span class="hljs-keyword">null</span>) {
                        filterResults.values = resultList;
                        filterResults.count = resultList.size();
                    }
                }
                <span class="hljs-keyword">return</span> filterResults;
            }

            <span class="hljs-meta">@Override</span>
            <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">publishResults</span><span class="hljs-params">(CharSequence constraint, FilterResults results)</span> </span>{
                <span class="hljs-keyword">if</span> (results.count &gt; <span class="hljs-number">0</span>) {
                    notifyDataSetChanged();
                } <span class="hljs-keyword">else</span> {
                    notifyDataSetInvalidated();
                }
            }
        };
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;String&gt; <span class="hljs-title">autocomplete</span><span class="hljs-params">(String input)</span> </span>{
        HttpURLConnection conn = <span class="hljs-keyword">null</span>;
        StringBuilder jsonResults = <span class="hljs-keyword">new</span> StringBuilder();
        <span class="hljs-keyword">try</span> {
            URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">"http://www.abc.com/search/?kwd="</span> + URLEncoder.encode(input, <span class="hljs-string">"utf8"</span>));
            conn = (HttpURLConnection) url.openConnection();
            InputStreamReader in = <span class="hljs-keyword">new</span> InputStreamReader(conn.getInputStream());
            <span class="hljs-keyword">int</span> read;
            <span class="hljs-keyword">char</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];
            <span class="hljs-keyword">while</span> ((read = in.read(buff)) != -<span class="hljs-number">1</span>) {
                jsonResults.append(buff, <span class="hljs-number">0</span>, read);
            }
        } <span class="hljs-keyword">catch</span> (MalformedURLException e) {
            e.printStackTrace();
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
        } <span class="hljs-keyword">catch</span> (IOException e) {
            e.printStackTrace();
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
        } <span class="hljs-keyword">finally</span> {
            <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) {
                conn.disconnect();
            }
        }
        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> Gson()).fromJson(jsonResults.toString(), <span class="hljs-keyword">new</span> TypeToken&lt;ArrayList&lt;String&gt;&gt;() {}.getType());
    }
}</pre>
<p>위의 예제를 보면 얼핏봐서는 문제가 없어 보인다. 실제로 동작도 잘된다. 하지만 아주 낮은 빈도로 Exception이 발생해 앱이 죽는다. 이 문제로 인하여 원인을 찾지못해 고생하는 경우가 많다. 내가 작업하면서 발생했던 오류는 다음과 같다.</p>
<ul>
<li>The content of the adapter has changed but ListView did not receive a notification.</li>
<li>java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.String java.lang.Object.toString()' on a null object reference</li>
</ul>
<p>내부적 동작 코드들을 보면 이 외에도 View의 구성이나 기타 코딩에 따라 다른 오류가 날 수도 있을 것 같다. 하지만 원인은 대부분 아래의 부분 때문이다(정확하게는 저 부분에서 오류가 나는 것이 아니라 저 부분이 들어간 위치 때문에 다른 부분에서 오류가 난다).</p>
<pre class="hljs java">resultList = autocomplete(constraint.toString());</pre>
<p>이유를 설명하자면 Filter의 performFiltering() 함수는 백그라운드 쓰레드에서 동작하도록 되어 있다. 그런데 이 함수 안에서 Adapter의 데이터를 변경하는 코드가 들어있기 때문에 Adapter가 데이터의 변경을 확인하는 시점과 notify 되는 시점이 엉킬 경우 오류를 내게 된다. 따라서 타이밍에 따라서 오류가 발생하기도 안하기도 하는 것이다(나의 경우는 키워드를 입력하거나 지우는 등의 변경이 빠르게 반복될 때 데이터의 변경이 빈번히 반복되면서 오류가 나타났다). 실제로 오류를 재현하기가 어려울 정도로 잘 안나오는 경우도 있었다.</p>
<p>그럼 잘못된 예제와 오류, 원인을 알아봤으니 정확한 처리 예시를 보자.</p>
<pre class="hljs java"><span class="hljs-keyword">package</span> net.asamaru.android.test;

<span class="hljs-keyword">import</span> android.content.Context;
<span class="hljs-keyword">import</span> android.widget.ArrayAdapter;
<span class="hljs-keyword">import</span> android.widget.Filter;
<span class="hljs-keyword">import</span> android.widget.Filterable;

<span class="hljs-keyword">import</span> com.google.gson.Gson;
<span class="hljs-keyword">import</span> com.google.gson.reflect.TypeToken;

<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> java.io.InputStreamReader;
<span class="hljs-keyword">import</span> java.net.HttpURLConnection;
<span class="hljs-keyword">import</span> java.net.MalformedURLException;
<span class="hljs-keyword">import</span> java.net.URL;
<span class="hljs-keyword">import</span> java.net.URLEncoder;
<span class="hljs-keyword">import</span> java.util.ArrayList;
<span class="hljs-keyword">import</span> java.util.List;

<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringAutoCompleteAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ArrayAdapter</span>&lt;<span class="hljs-title">String</span>&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title">Filterable</span> </span>{
    <span class="hljs-keyword">private</span> List&lt;String&gt; resultList;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StringAutoCompleteAdapter</span><span class="hljs-params">(Context context, <span class="hljs-keyword">int</span> textViewResourceId)</span> </span>{
        <span class="hljs-keyword">super</span>(context, textViewResourceId);
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCount</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> resultList.size();
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getItem</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{
        <span class="hljs-keyword">if</span> ((resultList.size() - <span class="hljs-number">1</span>) &gt;= index) {
            <span class="hljs-keyword">return</span> resultList.get(index);
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> Filter <span class="hljs-title">getFilter</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Filter() {
            <span class="hljs-meta">@Override</span>
            <span class="hljs-function"><span class="hljs-keyword">protected</span> FilterResults <span class="hljs-title">performFiltering</span><span class="hljs-params">(CharSequence constraint)</span> </span>{
                FilterResults filterResults = <span class="hljs-keyword">new</span> FilterResults();
                ArrayList&lt;String&gt; queryResults;
                <span class="hljs-keyword">if</span> ((constraint != <span class="hljs-keyword">null</span>) &amp;&amp; (constraint.length() != <span class="hljs-number">0</span>)) {
                    queryResults = autocomplete(constraint.toString());
                } <span class="hljs-keyword">else</span> {
                    queryResults = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();
                }
                filterResults.values = queryResults;
                filterResults.count = queryResults.size();
                <span class="hljs-keyword">return</span> filterResults;
            }

            <span class="hljs-meta">@Override</span>
            <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">publishResults</span><span class="hljs-params">(CharSequence constraint, FilterResults results)</span> </span>{
                <span class="hljs-comment">// noinspection unchecked</span>
                resultList = (ArrayList&lt;String&gt;) results.values;
                <span class="hljs-keyword">if</span> (results.count &gt; <span class="hljs-number">0</span>) {
                    notifyDataSetChanged();
                } <span class="hljs-keyword">else</span> {
                    notifyDataSetInvalidated();
                }
            }
        };
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> ArrayList&lt;String&gt; <span class="hljs-title">autocomplete</span><span class="hljs-params">(String input)</span> </span>{
        HttpURLConnection conn = <span class="hljs-keyword">null</span>;
        StringBuilder jsonResults = <span class="hljs-keyword">new</span> StringBuilder();
        <span class="hljs-keyword">try</span> {
            URL url = <span class="hljs-keyword">new</span> URL(<span class="hljs-string">"http://www.abc.com/search/?kwd="</span> + URLEncoder.encode(input, <span class="hljs-string">"utf8"</span>));
            conn = (HttpURLConnection) url.openConnection();
            InputStreamReader in = <span class="hljs-keyword">new</span> InputStreamReader(conn.getInputStream());
            <span class="hljs-keyword">int</span> read;
            <span class="hljs-keyword">char</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];
            <span class="hljs-keyword">while</span> ((read = in.read(buff)) != -<span class="hljs-number">1</span>) {
                jsonResults.append(buff, <span class="hljs-number">0</span>, read);
            }
        } <span class="hljs-keyword">catch</span> (MalformedURLException e) {
            e.printStackTrace();
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
        } <span class="hljs-keyword">catch</span> (IOException e) {
            e.printStackTrace();
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;
        } <span class="hljs-keyword">finally</span> {
            <span class="hljs-keyword">if</span> (conn != <span class="hljs-keyword">null</span>) {
                conn.disconnect();
            }
        }
        <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> Gson()).fromJson(jsonResults.toString(), <span class="hljs-keyword">new</span> TypeToken&lt;ArrayList&lt;String&gt;&gt;() {}.getType());
    }
}</pre>
<p>주요 변경 지점은 <code>getFilter()</code>이다. 기존에 <code>resultList = autocomplete(constraint.toString());</code> 부분을 통해 미리 Adapter의 데이터를 변경하던 것을 publishResults로 옮긴 것이다. 그리고 검색된 결과가 없더라도 빈 ArrayList를 만들어 넣어준 것이다.
코드 상으로는 큰 차이가 나지않고 굳이 이렇게 해야하나 싶지만 내부 동작 방식을 보면 이렇게 하지 않으면 앞서 설명한 것과 같이 예기치 못한 상황을 만날 수 있다.</p>
<p><strong>첨언 :</strong></p>
<ul>
<li>안드로이드는 조금만 잘못써도 오류가 발생하는 이런 경우를 많이 보게 되는데 아위운 점은 정확한 사용법을 제시하는 메뉴얼을 찾기 어렵다는 것이다.</li>
<li>코드 중간에 보면 <code>// noinspection unchecked</code> 부분이 있는데 크게 중요한 부분은 아니지만 이 부분을 제외하면 warning이 뜬다(안드로이드 스튜디오에서 노란 밑줄). 이 warning을 안드로이드 스튜디오에서 숨기는 역할을 하는 코드다.</li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/17/datetime-from-php-to-java-android/</id><title type="html">PHP의 DateTime을 Java (Android)로 전달하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/17/datetime-from-php-to-java-android/"/><published>2015-09-17T18:45:26+09:00</published><updated>2015-09-17T18:45:26+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><category term="php" label="php" /><summary><![CDATA[안드로이드 앱을 개발하게되면 많은 경우에 서버와의 데이터 연결이 필요하다. 대부분의 데이터 타입은 이 과정에서 큰 문제를 일으키지 않는다(데이터 타입만 명확히 한다면). 하지만 DateTime은 조금 까다로울 수 있다. 프로그램에서 시간은 TimeZone을 가지고 있기 때문에 이 부분을 명확히 하지 않으면 의도치 않은 시간으로 표시된다. 게다가 형식이 맞지 않는다면 제대로 전달되지 않을 수도 있다. 네이버 D2에 있는 Java의 날짜와 시간 API를 보면 Java에서의 Date 처리가 불편하다는 얘기가 있다. 이번 작업에서는 서버는 PHP를 사용하고 있는 상황이었고 클라이언트는 AndroidAnnotations의 Rest-API를 사용했다. 수신 데이터의 파싱은 GsonHttpMessageConverter를 사용하는 상황이다. 이 글의 주제에서 벗어나므로 AndroidAnnotations나 GsonHttpMessageConverter에 대한 부분은 설명하지 않겠다. GsonHttpMessageConverter를 사용해서 데이터를 파싱하는 경우 대상이되는 class의 멤버변수의 데이터 타입에 맞추어 데이터를 채워준다. 당연히 전송되는 데이터가 JSON 형식이어야 한다. 다른 데이터 타입의 경우 앞서 설명한 것과 같이 데이터 타입만 맞춰준다면 아주 쉽게 데이터를 받을 수 있다(그것이 이것을 사용하는 주요 목적이다). 그런데 DateTime 타입은 조금 신경을 써줘야 한다. 자 그럼 서버에서 데이터를 보낼 수 있는 방법에 어떤 것이 있을까? 가장 일반적인 방법으로는 timestamp(int), string, Date가 있다. 어떤 것을 쓰더라도 무방하지만 앞서 얘기한 것처럼 GsonHttpMessageConverter를 써서 간단히 데이터를 정확한 형식으로 받는 것이 편리하기 때문에 전송시 데이터 타입을 맞추는 것이 좋다. // string 타입으로 전송 $date = "2015-09-17 10:00:00"; // int 타입으로 전송 $date = (new \DateTime("2015-09-17 10:00:00"))->getTimestamp(); // Date 타입으로 전송 $date = (new \DateTime("2015-09-17 10:00:00"))->setTimeZone(new \DateTimeZone('UTC'))->format('Y-m-d\TH:i:s\Z'); 위의 코드를 보면 PHP에서 전송할 때 넘겨줄 데이터의 예시를 타입별로 제시했다. 앞서 강조했던대로 안드로이드 클라이언트에서 GsonHttpMessageConverter를 이용해 Date 타입으로 바로 받으려면 마지막에 있는 "Date 타입으로 전송" 방식을 사용하면 된다. 해당 부분을 보면 두가지 처리를 해주고 있다. 첫 번째로 TimeZone을 설정한 것이고, 두 번째로 Date Format을 지정한 것이다. 사실 이 부분들을 잘 몰라서 삽질을 조금 했었다. 처음엔 Date Format을 어떻게 전달해야할지 몰라 해맸다. 제대로 수신을 하지 못했던 것이다. Format을 맞추고 나니 이젠 보낸 시간과 받은 시간이 달랐다. 이 부분은 TimeZone의 문제이므로 TimeZone을 지정해서 해결했다. TimeZone에 사용한 UTC는 협정 세계시라는 뜻이다. 이것과 세트로 format에서 끝에 \Z를 붙여 데이터가 ISO 8601에 따라 UTC를 따르고 있음을 표시한 것이다. 결론적으로 위의 형식을 사용하면 GSON으로 바로 받아도 정확한 시간을 사용할 수 있다. 사실 위의 경우는 GsonHttpMessageConverter를 사용한다는 상황을 가정한 것으로 이것을 사용하지 않고 직접 데이터를 받아 GSON을 통해 파싱한다면 아래의 방법을 쓸 수도 있다. Format을 보면 알겠지만 UTC Date여야 한다(정확한 시간 처리를 위해). "yyyy-MM-dd HH:mm:ss"이 Format을 쓸 수도 있으나 TimeZone 명시되지 않으므로 시간이 다르게 보일 수 있다. Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").create(); 아래는 추가적으로 다른 타입으로 수신했을 때 안드로이드 클라이언트에서 Date 타입으로 변환하고자 할때 사용할 수 있는 참고 코드들이다. string 타입으로 수신시 try { String dateTime = "2015-09-17 10:00:00"; SimpleDateFormat dateParser = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.KOREA); Date date = dateParser.parse(dateTime); } catch (ParseException e) { e.printStackTrace(); } timestamp(int) 타입으로 수신시 PHP에서의 TimeStamp는 초단위(s)지만 Java에서는 밀리초(ms) 단위이므로 1000을 곱해서 넣어 주어야 한다. 그리고 Java에서는 Date가 Deprecated되어 Calendar를 더 권장한다고 한다. 정확하게는 완전히 Deprecated된 것은 아니고 일부 생성자가 그렇다는 것이지만 Calendar가 더 다양한 기능을 제공하므로 더 권장된다는 것이다. 자세한 이유는 검색해보면 많이 나온다. // Calendar 사용 Calendar c = Calendar.getInstance(); c.setTimeInMillis(timestamp * 1000); Date date = c.getTime(); // OR // Date 사용 Date d = new Date(timestamp * 1000);]]></summary><content type="html"><![CDATA[<p>안드로이드 앱을 개발하게되면 많은 경우에 서버와의 데이터 연결이 필요하다. 대부분의 데이터 타입은 이 과정에서 큰 문제를 일으키지 않는다(데이터 타입만 명확히 한다면). 하지만 DateTime은 조금 까다로울 수 있다. 프로그램에서 시간은 TimeZone을 가지고 있기 때문에 이 부분을 명확히 하지 않으면 의도치 않은 시간으로 표시된다. 게다가 형식이 맞지 않는다면 제대로 전달되지 않을 수도 있다.</p>
<blockquote>
<p>네이버 D2에 있는 <a href="http://d2.naver.com/helloworld/645609">Java의 날짜와 시간 API</a>를 보면 Java에서의 Date 처리가 불편하다는 얘기가 있다.</p>
</blockquote>
<p>이번 작업에서는 서버는 PHP를 사용하고 있는 상황이었고 클라이언트는 <a href="http://androidannotations.org/">AndroidAnnotations</a>의 <a href="https://github.com/excilys/androidannotations/wiki/Rest-API#rest">Rest-API</a>를 사용했다. 수신 데이터의 파싱은 <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/GsonHttpMessageConverter.html">GsonHttpMessageConverter</a>를 사용하는 상황이다. 이 글의 주제에서 벗어나므로 <a href="http://androidannotations.org/">AndroidAnnotations</a>나 <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/GsonHttpMessageConverter.html">GsonHttpMessageConverter</a>에 대한 부분은 설명하지 않겠다.</p>
<p>GsonHttpMessageConverter를 사용해서 데이터를 파싱하는 경우 대상이되는 class의 멤버변수의 데이터 타입에 맞추어 데이터를 채워준다. 당연히 전송되는 데이터가 JSON 형식이어야 한다. 다른 데이터 타입의 경우 앞서 설명한 것과 같이 데이터 타입만 맞춰준다면 아주 쉽게 데이터를 받을 수 있다(그것이 이것을 사용하는 주요 목적이다). 그런데 DateTime 타입은 조금 신경을 써줘야 한다.</p>
<p>자 그럼 서버에서 데이터를 보낼 수 있는 방법에 어떤 것이 있을까? 가장 일반적인 방법으로는 timestamp(int), string, Date가 있다. 어떤 것을 쓰더라도 무방하지만 앞서 얘기한 것처럼 GsonHttpMessageConverter를 써서 간단히 데이터를 정확한 형식으로 받는 것이 편리하기 때문에 전송시 데이터 타입을 맞추는 것이 좋다.</p>
<pre class="hljs php"><span class="hljs-comment">// string 타입으로 전송</span>
$date = <span class="hljs-string">"2015-09-17 10:00:00"</span>;
<span class="hljs-comment">// int 타입으로 전송</span>
$date = (<span class="hljs-keyword">new</span> \DateTime(<span class="hljs-string">"2015-09-17 10:00:00"</span>))-&gt;getTimestamp();
<span class="hljs-comment">// Date 타입으로 전송</span>
$date = (<span class="hljs-keyword">new</span> \DateTime(<span class="hljs-string">"2015-09-17 10:00:00"</span>))-&gt;setTimeZone(<span class="hljs-keyword">new</span> \DateTimeZone(<span class="hljs-string">'UTC'</span>))-&gt;format(<span class="hljs-string">'Y-m-d\TH:i:s\Z'</span>);</pre>
<p>위의 코드를 보면 PHP에서 전송할 때 넘겨줄 데이터의 예시를 타입별로 제시했다. 앞서 강조했던대로 안드로이드 클라이언트에서 GsonHttpMessageConverter를 이용해 Date 타입으로 바로 받으려면 마지막에 있는 &quot;Date 타입으로 전송&quot; 방식을 사용하면 된다.</p>
<p>해당 부분을 보면 두가지 처리를 해주고 있다. 첫 번째로 TimeZone을 설정한 것이고, 두 번째로 Date Format을 지정한 것이다. 사실 이 부분들을 잘 몰라서 삽질을 조금 했었다. 처음엔 Date Format을 어떻게 전달해야할지 몰라 해맸다. 제대로 수신을 하지 못했던 것이다. Format을 맞추고 나니 이젠 보낸 시간과 받은 시간이 달랐다. 이 부분은 TimeZone의 문제이므로 TimeZone을 지정해서 해결했다. TimeZone에 사용한 UTC는 <a href="https://ko.wikipedia.org/wiki/%ED%98%91%EC%A0%95_%EC%84%B8%EA%B3%84%EC%8B%9C">협정 세계시</a>라는 뜻이다. 이것과 세트로 format에서 끝에 \Z를 붙여 데이터가 <a href="https://ko.wikipedia.org/wiki/ISO_8601">ISO 8601</a>에 따라 UTC를 따르고 있음을 표시한 것이다.</p>
<p>결론적으로 위의 형식을 사용하면 GSON으로 바로 받아도 정확한 시간을 사용할 수 있다.</p>
<p>사실 위의 경우는 GsonHttpMessageConverter를 사용한다는 상황을 가정한 것으로 이것을 사용하지 않고 직접 데이터를 받아 GSON을 통해 파싱한다면 아래의 방법을 쓸 수도 있다. Format을 보면 알겠지만 UTC Date여야 한다(정확한 시간 처리를 위해). &quot;yyyy-MM-dd HH:mm:ss&quot;이 Format을 쓸 수도 있으나 TimeZone 명시되지 않으므로 시간이 다르게 보일 수 있다.</p>
<pre class="hljs java">Gson gson = <span class="hljs-keyword">new</span> GsonBuilder().setDateFormat(<span class="hljs-string">"yyyy-MM-dd'T'HH:mm:ssZ"</span>).create();</pre>
<p>아래는 추가적으로 다른 타입으로 수신했을 때 안드로이드 클라이언트에서 Date 타입으로 변환하고자 할때 사용할 수 있는 참고 코드들이다.</p>
<p><strong>string 타입으로 수신시</strong></p>
<pre class="hljs java"><span class="hljs-keyword">try</span> {
    String dateTime = <span class="hljs-string">"2015-09-17 10:00:00"</span>;
    SimpleDateFormat dateParser = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy-MM-dd HH:mm:ss"</span>, Locale.KOREA);
    Date date = dateParser.parse(dateTime);
} <span class="hljs-keyword">catch</span> (ParseException e) {
    e.printStackTrace();
}</pre>
<p><strong>timestamp(int) 타입으로 수신시</strong></p>
<p>PHP에서의 TimeStamp는 초단위(s)지만 Java에서는 밀리초(ms) 단위이므로 1000을 곱해서 넣어 주어야 한다.
그리고 Java에서는 Date가 Deprecated되어 <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Calendar.html">Calendar</a>를 더 권장한다고 한다. <a href="http://docs.oracle.com/javase/6/docs/api/java/util/Date.html">정확하게는 완전히 Deprecated된 것은 아니고 일부 생성자가 그렇다는 것</a>이지만 <a href="http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Calendar.html">Calendar</a>가 더 다양한 기능을 제공하므로 더 권장된다는 것이다. 자세한 이유는 검색해보면 많이 나온다.</p>
<pre class="hljs java"><span class="hljs-comment">// Calendar 사용</span>
Calendar c = Calendar.getInstance();
c.setTimeInMillis(timestamp * <span class="hljs-number">1000</span>);
Date date = c.getTime();

<span class="hljs-comment">// OR</span>

<span class="hljs-comment">// Date 사용</span>
Date d = <span class="hljs-keyword">new</span> Date(timestamp * <span class="hljs-number">1000</span>);</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/17/android-google-map-getvisibleregion-toscreenlocation-toscreenlocation/</id><title type="html">안드로이드에서 구글맵 사용시 맵의 보여지는 영역의 좌표를 원하는 pixel만큼 제외하고 가져오기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/17/android-google-map-getvisibleregion-toscreenlocation-toscreenlocation/"/><published>2015-09-17T14:18:50+09:00</published><updated>2015-09-17T14:18:50+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[이 글의 제목이 참 길고 어렵다. 나름대로 정하긴 했지만 어떻게 해야 내용을 설명할 수 있을지 잘 모르겠기에 그냥 필요한 상황을 차례로 적어보려 한다. 안드로이드에서 구글맵을 사용하면서 현재 맵에서 보여지는 영역의 좌표를 얻고 싶을 때가 있다. 중심 좌표와 확대 비율은 center와 zoom을 통해 쉽게 구할 수 있다. 하지만 필요한 것은 보여지는 영역을 모두 포함하는 좌표들이다. 이 좌표들은 대부분 보여지는 화면 내부에 해당하는 데이터를 query 하기 위해서 사용될 것이다. 다른 경우도 당연히 있을 수 있고... 위의 목적대로 좌표를 가져오긴 했는데 일부 영역을 제외하고 싶을 때가 있다. 예를들어 지도 상단에 버튼들이 나열되어 있다고 가정할 때 이 영역은 query에서 제외하고 싶을 때가 해당된다. 이 문제는 간단하지가 않은게 버튼들이 차지하는 공간이야 pixel로 얼마든지 계산 가능하지만 이 pixel 사이즈를 좌표에 반영해야 원하는 값을 얻을 수 있기 때문이다. 위의 상황들의 목적은 결국 하나다. 구글 지도에서 원하는 영역의 평면 좌표를 얻고 싶다는 것이다. 우선 해결 방법을 설명하기 전에 필요한 함수에 대한 설명부터 보자. 이 처리를 하기 위해 가장 중요한 요소는 Projection 이다. Google APIs for Android - Projection 위 링크를 참고하면 자세한 설명이 나와있지만 간단하게 필요한 것들에 대해서 정리하자면 다음과 같다. Projection Projection은 화면상의 위치와 위경도 좌표(LatLng) 간의 변환하는데 사용된다. 그리고 화면의 위치는 항상 맵 화면의 좌상단(top left)을 기준으로 한다. getVisibleRegion() public VisibleRegion getVisibleRegion () 화면상의 좌표와 위경도 좌표 간의 변환을 위한 Projection을 가져온다. toScreenLocation (LatLng location) public Point toScreenLocation (LatLng location) 인자로 넘겨준 위경도 좌표가 화면 상에서 어디에 위치하는지를 Point 객체로 반환해 준다. 반환되는 단위는 화면 상의 Pixel(화소가 아닌)이다. fromScreenLocation (Point point) public LatLng fromScreenLocation (Point point) 인자로 넘겨준 화면 상의 좌표에 해당하는 위경도를 LatLng 객체로 반환해 준다. 구현 위와 같이 기본적인 함수들에 대해서 알아보았고 이제는 실제 사용 사례를 살펴보자. 아래는 서두에 얘기한 기능을 수행하게 하기 위해 만들어 본 함수이다. public LatLngBounds getBoundsWithoutSpacing(int top, int right, int bottom, int left) { Projection projection = googleMap.getProjection(); LatLngBounds bounds = projection.getVisibleRegion().latLngBounds; Point northeast = projection.toScreenLocation(bounds.northeast); Point toNortheast = new Point(northeast.x - right, northeast.y + top); Point southwest = projection.toScreenLocation(bounds.southwest); Point toSouthwest = new Point(southwest.x + left, southwest.y - bottom); LatLngBounds.Builder builder = new LatLngBounds.Builder(); builder.include(projection.fromScreenLocation(toNortheast)); builder.include(projection.fromScreenLocation(toSouthwest)); return builder.build(); } 설명하자면 다음과 같다. 우선 googleMap 개체에서 Projection을 가져와서 VisibleRegion을 통해 좌표를 받아온다. 당연히 googleMap은 따로 구성되어 있어야 한다. 함수를 고쳐서 인자로 넘겨주어도 당연히 상관없다. getVisibleRegion()에서 latLngBounds를 받아오면 위경도 좌표의 bound를 알 수 있는데 사용할 수 있는 값은 두가지다. northeast(북동좌표)와 southwest(서남좌표)다. 이 두점은 bound의 최외곽 좌표이므로 전체 박스 영역을 얻은 것이다. 1차적으로는 이 값을 바로 사용해서 원하는 영역에 대한 검색을 수행할 수 있다. 하지만 정말로 원하는 것은 두 번째 문제이다. 이 좌표에서 화면의 특정 영역을 제외한 부분의 위경도 bound를 구하고 싶은 것이다. 원하는 결과를 얻기 위해 toScreenLocation() 함수를 이용해서 북동,서남 좌표를 화면 상의 좌표(Point)로 변환한다. 여기에 원하는 pixel만큼씩을 증감하여 fromScreenLocation() 함수를 통해 다시 위경도 좌표(LatLng)로 변환하면 최종적인 결과를 얻을 수 있다. 사실 결과를 보면 아주 간단한 작업이다. 하지만 이 함수들의 역할을 모를때는 어떻게 그 값을 구할 수 있을지 막막했다. 처음엔 구글의 zoom 레벨을 가져와서 pixel 비율을 계산하여 적용하려고 했으나 만만치 않았다. 결론은 위의 함수를 바탕으로 원하는 목적을 달성할 수 있으니 필요에 맞게 사용하면 된다.]]></summary><content type="html"><![CDATA[<p>이 글의 제목이 참 길고 어렵다. 나름대로 정하긴 했지만 어떻게 해야 내용을 설명할 수 있을지 잘 모르겠기에 그냥 필요한 상황을 차례로 적어보려 한다.</p>
<ol>
<li>
<p>안드로이드에서 구글맵을 사용하면서 현재 맵에서 보여지는 영역의 좌표를 얻고 싶을 때가 있다.
중심 좌표와 확대 비율은 center와 zoom을 통해 쉽게 구할 수 있다. 하지만 필요한 것은 보여지는 영역을 모두 포함하는 좌표들이다.
이 좌표들은 대부분 보여지는 화면 내부에 해당하는 데이터를 query 하기 위해서 사용될 것이다. 다른 경우도 당연히 있을 수 있고...</p>
</li>
<li>
<p>위의 목적대로 좌표를 가져오긴 했는데 일부 영역을 제외하고 싶을 때가 있다. 예를들어 지도 상단에 버튼들이 나열되어 있다고 가정할 때 이 영역은 query에서 제외하고 싶을 때가 해당된다. 이 문제는 간단하지가 않은게 버튼들이 차지하는 공간이야 pixel로 얼마든지 계산 가능하지만 이 pixel 사이즈를 좌표에 반영해야 원하는 값을 얻을 수 있기 때문이다.</p>
</li>
</ol>
<p>위의 상황들의 목적은 결국 하나다. 구글 지도에서 원하는 영역의 평면 좌표를 얻고 싶다는 것이다.</p>
<p>우선 해결 방법을 설명하기 전에 필요한 함수에 대한 설명부터 보자. 이 처리를 하기 위해 가장 중요한 요소는 Projection 이다.</p>
<h2><a href="https://developers.google.com/android/reference/com/google/android/gms/maps/Projection.html">Google APIs for Android - Projection</a></h2>
<p>위 링크를 참고하면 자세한 설명이 나와있지만 간단하게 필요한 것들에 대해서 정리하자면 다음과 같다.</p>
<h3>Projection</h3>
<blockquote>
<p>Projection은 화면상의 위치와 위경도 좌표(LatLng) 간의 변환하는데 사용된다. 그리고 화면의 위치는 항상 맵 화면의 좌상단(top left)을 기준으로 한다.</p>
</blockquote>
<h3>getVisibleRegion()</h3>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> VisibleRegion <span class="hljs-title">getVisibleRegion</span> <span class="hljs-params">()</span></span></pre>
<blockquote>
<p>화면상의 좌표와 위경도 좌표 간의 변환을 위한 Projection을 가져온다.</p>
</blockquote>
<h3>toScreenLocation (LatLng location)</h3>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Point <span class="hljs-title">toScreenLocation</span> <span class="hljs-params">(LatLng location)</span></span></pre>
<blockquote>
<p>인자로 넘겨준 위경도 좌표가 화면 상에서 어디에 위치하는지를 Point 객체로 반환해 준다. 반환되는 단위는 화면 상의 Pixel(화소가 아닌)이다.</p>
</blockquote>
<h3>fromScreenLocation (Point point)</h3>
<p>public LatLng fromScreenLocation (Point point)</p>
<blockquote>
<p>인자로 넘겨준 화면 상의 좌표에 해당하는 위경도를 LatLng 객체로 반환해 준다.</p>
</blockquote>
<h2>구현</h2>
<p>위와 같이 기본적인 함수들에 대해서 알아보았고 이제는 실제 사용 사례를 살펴보자.</p>
<p>아래는 서두에 얘기한 기능을 수행하게 하기 위해 만들어 본 함수이다.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> LatLngBounds <span class="hljs-title">getBoundsWithoutSpacing</span><span class="hljs-params">(<span class="hljs-keyword">int</span> top, <span class="hljs-keyword">int</span> right, <span class="hljs-keyword">int</span> bottom, <span class="hljs-keyword">int</span> left)</span> </span>{
    Projection projection = googleMap.getProjection();
    LatLngBounds bounds = projection.getVisibleRegion().latLngBounds;
    Point northeast = projection.toScreenLocation(bounds.northeast);
    Point toNortheast = <span class="hljs-keyword">new</span> Point(northeast.x - right, northeast.y + top);
    Point southwest = projection.toScreenLocation(bounds.southwest);
    Point toSouthwest = <span class="hljs-keyword">new</span> Point(southwest.x + left, southwest.y - bottom);

    LatLngBounds.Builder builder = <span class="hljs-keyword">new</span> LatLngBounds.Builder();
    builder.include(projection.fromScreenLocation(toNortheast));
    builder.include(projection.fromScreenLocation(toSouthwest));
    <span class="hljs-keyword">return</span> builder.build();
}</pre>
<p>설명하자면 다음과 같다.</p>
<p>우선 googleMap 개체에서 Projection을 가져와서 VisibleRegion을 통해 좌표를 받아온다. 당연히 googleMap은 따로 구성되어 있어야 한다. 함수를 고쳐서 인자로 넘겨주어도 당연히 상관없다.
getVisibleRegion()에서 latLngBounds를 받아오면 위경도 좌표의 bound를 알 수 있는데 사용할 수 있는 값은 두가지다. northeast(북동좌표)와 southwest(서남좌표)다. 이 두점은 bound의 최외곽 좌표이므로 전체 박스 영역을 얻은 것이다.</p>
<p>1차적으로는 이 값을 바로 사용해서 원하는 영역에 대한 검색을 수행할 수 있다.</p>
<p>하지만 정말로 원하는 것은 두 번째 문제이다. 이 좌표에서 화면의 특정 영역을 제외한 부분의 위경도 bound를 구하고 싶은 것이다.</p>
<p>원하는 결과를 얻기 위해 toScreenLocation() 함수를 이용해서 북동,서남 좌표를 화면 상의 좌표(Point)로 변환한다. 여기에 원하는 pixel만큼씩을 증감하여 fromScreenLocation() 함수를 통해 다시 위경도 좌표(LatLng)로 변환하면 최종적인 결과를 얻을 수 있다.</p>
<p>사실 결과를 보면 아주 간단한 작업이다. 하지만 이 함수들의 역할을 모를때는 어떻게 그 값을 구할 수 있을지 막막했다. 처음엔 구글의 zoom 레벨을 가져와서 pixel 비율을 계산하여 적용하려고 했으나 만만치 않았다.</p>
<p>결론은 위의 함수를 바탕으로 원하는 목적을 달성할 수 있으니 필요에 맞게 사용하면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/17/sort-of-strings-that-start-with-numbers-in-mysql/</id><title type="html">MySql에서 숫자로 시작하는 문자열의 정렬 문제</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/17/sort-of-strings-that-start-with-numbers-in-mysql/"/><published>2015-09-17T07:29:04+09:00</published><updated>2015-09-17T07:29:04+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="db" label="db" /><summary><![CDATA[[100A, 9B, 10C] 와 같은 문자열의 배열을 정렬한다고 가정하자. 인간이 생각할 때 바른 정렬 결과는 [9B, 10C, 100A]일 것이다.(사람에 따라 다를 수는 있지만 나는 이렇게 되길 원한다.) 그런데 이 문제를 프로그램에서 처리하려고 그냥 정렬을 수행한다면 어떤 결과가 나올까? 결과는 [100A, 10C, 9B] 이다. 간단히 결과를 확인하기 위해 php에서 돌려본 결과이다. <?php $a = ['100A', '9B', '10C']; sort($a); print_r($a); // 실행 결과 Array ( [0] => 100A [1] => 10C [2] => 9B ) 왜 이런 정렬 결과가 나올까? 어떻게보면 당연할 결과이다. 프로그램에서는 숫자든 문자든 문자열 내부에서는 숫자 코드로 처리된다. 그러므로 맨 첫자리 문자부터 비교를 시작하여 차례로 정렬하므로 1로 시작하는 문자열이 처음으로 들어온다. 100A, 10C 두 문자열을 비교하자면 셋째자리에서 0과 C가 비교되어 0을 가진 100A가 먼저 들어가게 된다. 그럼 인간이 생각하는 것처럼 정렬되게 하려면 어떻게 할까? 복잡하게 생각하자면 한도 끝도 없이 복잡할 수 있지만 간단하게 생각하자면 비교되어야 할 문자의 위치를 맞추어주면 원하는 결과를 얻을 수 있다. 다른 언어나 상황에서도 마찬가지 방법으로 적용할 수 있지만 이번엔 MySql에서 정렬시 이 부분이 필요했기 때문에 MySql에서 사용한 방법을 아래에 적는다. SELECT *, LPAD(strField, 7, 0) as strFieldOrder FROM table1 ORDER BY strFieldOrder; 여기서 주의할 것은 7이라는 부분을 데이터의 길이가 모두 포함될 수 있는 적절한 값으로 지정해야 한다는 것이다.]]></summary><content type="html"><![CDATA[<p>[100A, 9B, 10C] 와 같은 문자열의 배열을 정렬한다고 가정하자. 인간이 생각할 때 바른 정렬 결과는 [9B, 10C, 100A]일 것이다.(사람에 따라 다를 수는 있지만 나는 이렇게 되길 원한다.)
그런데 이 문제를 프로그램에서 처리하려고 그냥 정렬을 수행한다면 어떤 결과가 나올까?</p>
<p>결과는 [100A, 10C, 9B] 이다. 간단히 결과를 확인하기 위해 php에서 돌려본 결과이다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$a = [<span class="hljs-string">'100A'</span>, <span class="hljs-string">'9B'</span>, <span class="hljs-string">'10C'</span>];
sort($a);
print_r($a);

<span class="hljs-comment">// 실행 결과</span>
<span class="hljs-keyword">Array</span>
(
    [<span class="hljs-number">0</span>] =&gt; <span class="hljs-number">100</span>A
    [<span class="hljs-number">1</span>] =&gt; <span class="hljs-number">10</span>C
    [<span class="hljs-number">2</span>] =&gt; <span class="hljs-number">9</span>B
)</pre>
<p>왜 이런 정렬 결과가 나올까? 어떻게보면 당연할 결과이다. 프로그램에서는 숫자든 문자든 문자열 내부에서는 숫자 코드로 처리된다. 그러므로 맨 첫자리 문자부터 비교를 시작하여 차례로 정렬하므로 1로 시작하는 문자열이 처음으로 들어온다. 100A, 10C 두 문자열을 비교하자면 셋째자리에서 0과 C가 비교되어 0을 가진 100A가 먼저 들어가게 된다.</p>
<p>그럼 인간이 생각하는 것처럼 정렬되게 하려면 어떻게 할까? 복잡하게 생각하자면 한도 끝도 없이 복잡할 수 있지만 간단하게 생각하자면 비교되어야 할 문자의 위치를 맞추어주면 원하는 결과를 얻을 수 있다.</p>
<p>다른 언어나 상황에서도 마찬가지 방법으로 적용할 수 있지만 이번엔 MySql에서 정렬시 이 부분이 필요했기 때문에 MySql에서 사용한 방법을 아래에 적는다.</p>
<pre class="hljs sql"><span class="hljs-keyword">SELECT</span> *, <span class="hljs-keyword">LPAD</span>(strField, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> strFieldOrder <span class="hljs-keyword">FROM</span> table1 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> strFieldOrder;</pre>
<p>여기서 주의할 것은 7이라는 부분을 데이터의 길이가 모두 포함될 수 있는 적절한 값으로 지정해야 한다는 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/16/check-for-equality-on-a-mysql-float-field/</id><title type="html">MySql에서 float 필드 동일값 비교</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/16/check-for-equality-on-a-mysql-float-field/"/><published>2015-09-16T18:09:56+09:00</published><updated>2015-09-16T18:09:56+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="db" label="db" /><summary><![CDATA[이번에 작업하면서 mysql의 float 필드를 사용할 일이 있었다. 사실 오랜기간동안 mysql을 사용해 오면서 float 필드를 사용해 본 적이 많지 않았고 float 필드를 범위 검사가 아닌 동일값 검사를 할일이 없었다. 이번 작업에서는 float 필드의 동일값 검사를 하면서 당연히 아래와 같이 query를 만들면 될 줄 알았다. SELECT * FROM TABLE1 WHERE FloatField = 10.1; 그런데 분명 동일한 값이 있음에도 불구하고 검색된 결과가 없었다. 처음엔 어의가 없었다. 당연히 동일한 값이 있는데 왜 검색이 되지 않을까? 그래서 구글에서 검색을 해보니 float 필드는 "="을 이용한 동일값 검사를 할 수 없었다. 아래는 float 필드의 동일값 검사를 하는 예시다. SELECT * FROM TABLE1 WHERE ABS(FloatField - 10.1) <= 1e-6; 아.. 이런 웬 해괴망측한 방법이란 말인가? 사실 여러글에서 보면 문자열로 Casting(변환)해서 검사하는 방법 등도 있었다. 그리고 주의할 사항은 1e-6값을 정하는 부분이다. 소숫점의 길이에 따라 값을 어느 정도 조정해야 하는 듯 하다. 소숫점 2자리 기준에서 1e-6 적용시 같은 값으로 인식하지 않았다. 그래서 1e-4를 적용했었다. 어짜피 2자리까지 값이니 충분한 오차 한계긴하다. MySql 사이트에서 보면 B.5.5.8 Problems with Floating-Point Values 이라는 글이 있다. 첫줄에 설명된 것과 같이 mysql에서는 부동 소수점을 정확한 값으로 저장하지 않기 때문에 내부적으로 나타내는 값이 동일하지 않을 수 있다고 되어 있다. 한글매뉴얼 5.0 - 11.1.1. 숫자 타입 개요에는 아래와 같이 설명되어 있다. FLOAT[(M,D)] [UNSIGNED] [ZEROFILL] 작은(단일 정밀도 - single-precision) 부동 소수점 수. 사용 가능한 값은 -3.402823466E+38 에서 -1.175494351E-38, 0 이고, 그리고 1.175494351E-38 에서3.402823466E+38 까지다. 이 범위는 이론적인 한계이고, IEEE 표준에 근거를 하고 있다. 실제로는 여러분이 사용하는 H/W 또는 OS에 근거하여 약간 작게 된다. M은 전체 자릿 수이고 D는 소수점 뒷자리를 가리킨다. 만일 M 과 D가 생략되면, H/W가 허용하는 범위로 값을 저장한다. 단일 정밀도 부동 소수점 숫자는 대략 7개의 십진 자리수를 갖는다. UNSIGNED를 지정 하면, 음수 값을 허용하지 않는다. FLOAT를 사용하면 예상하지 못한 결과가 나올 수도 있는데, 그 이유는 MySQL에서의 모든 계산은 이중 정밀도(double-precision)로 실행되기 때문이다. Section A.5.7, “Solving Problems with No Matching Rows”를 참조. 원인은 설명되어 있지만 사실 왜 이래야만 하는 것인지 이해는 잘되지 않는다. 원래 부동 소수점에 대한 문제는 여러 프로그램에서 있는 문제이긴하나 mysql에서도 이 문제가 있을 줄은 생각하지 못했다. 어쨌든 보다 다양한 예시와 설명은 위에 링크한 mysql 메뉴얼을 참고하면 된다. 아니면 부동소숫점이 아닌 고정소숫점 타입을 사용해도 된다. 숫자 타입 메뉴얼에서 DECIMAL 관련된 내용을 참고하자.]]></summary><content type="html"><![CDATA[<p>이번에 작업하면서 mysql의 float 필드를 사용할 일이 있었다. 사실 오랜기간동안 mysql을 사용해 오면서 float 필드를 사용해 본 적이 많지 않았고 float 필드를 범위 검사가 아닌 동일값 검사를 할일이 없었다.</p>
<p>이번 작업에서는 float 필드의 동일값 검사를 하면서 당연히 아래와 같이 query를 만들면 될 줄 알았다.</p>
<pre class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> TABLE1 <span class="hljs-keyword">WHERE</span> FloatField = <span class="hljs-number">10.1</span>;</pre>
<p>그런데 분명 동일한 값이 있음에도 불구하고 검색된 결과가 없었다. 처음엔 어의가 없었다. 당연히 동일한 값이 있는데 왜 검색이 되지 않을까?
그래서 구글에서 검색을 해보니 float 필드는 &quot;=&quot;을 이용한 동일값 검사를 할 수 없었다. 아래는 float 필드의 동일값 검사를 하는 예시다.</p>
<pre class="hljs sql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> TABLE1 <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">ABS</span>(FloatField - <span class="hljs-number">10.1</span>) &lt;= <span class="hljs-number">1e-6</span>;</pre>
<p>아.. 이런 웬 해괴망측한 방법이란 말인가? 사실 여러글에서 보면 문자열로 Casting(변환)해서 검사하는 방법 등도 있었다. 그리고 주의할 사항은 <code>1e-6</code>값을 정하는 부분이다. 소숫점의 길이에 따라 값을 어느 정도 조정해야 하는 듯 하다. 소숫점 2자리 기준에서 <code>1e-6</code> 적용시 같은 값으로 인식하지 않았다. 그래서 <code>1e-4</code>를 적용했었다. 어짜피 2자리까지 값이니 충분한 오차 한계긴하다.</p>
<p>MySql 사이트에서 보면 <a href="https://dev.mysql.com/doc/refman/5.0/en/problems-with-float.html">B.5.5.8 Problems with Floating-Point Values</a> 이라는 글이 있다.</p>
<p>첫줄에 설명된 것과 같이 mysql에서는 부동 소수점을 정확한 값으로 저장하지 않기 때문에 내부적으로 나타내는 값이 동일하지 않을 수 있다고 되어 있다.</p>
<p><a href="http://www.mysqlkorea.com/sub.html?mcode=manual&amp;scode=01&amp;m_no=21645&amp;cat1=11&amp;cat2=331&amp;cat3=339&amp;lang=k">한글매뉴얼 5.0 - 11.1.1. 숫자 타입 개요</a>에는 아래와 같이 설명되어 있다.</p>
<blockquote>
<p>FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]
작은(단일 정밀도 - single-precision) 부동 소수점 수. 사용 가능한 값은 -3.402823466E+38 에서 -1.175494351E-38, 0 이고, 그리고 1.175494351E-38 에서3.402823466E+38 까지다. 이 범위는 이론적인 한계이고, IEEE 표준에 근거를 하고 있다. 실제로는 여러분이 사용하는 H/W 또는 OS에 근거하여 약간 작게 된다.
M은 전체 자릿 수이고 D는 소수점 뒷자리를 가리킨다. 만일 M 과 D가 생략되면, H/W가 허용하는 범위로 값을 저장한다. 단일 정밀도 부동 소수점 숫자는 대략 7개의 십진 자리수를 갖는다.
UNSIGNED를 지정 하면, 음수 값을 허용하지 않는다.
FLOAT를 사용하면 예상하지 못한 결과가 나올 수도 있는데, 그 이유는 MySQL에서의 모든 계산은 이중 정밀도(double-precision)로 실행되기 때문이다. Section A.5.7, “Solving Problems with No Matching Rows”를 참조.</p>
</blockquote>
<p>원인은 설명되어 있지만 사실 왜 이래야만 하는 것인지 이해는 잘되지 않는다. 원래 부동 소수점에 대한 문제는 여러 프로그램에서 있는 문제이긴하나 mysql에서도 이 문제가 있을 줄은 생각하지 못했다.</p>
<p>어쨌든 보다 다양한 예시와 설명은 위에 링크한 mysql 메뉴얼을 참고하면 된다. 아니면 부동소숫점이 아닌 고정소숫점 타입을 사용해도 된다. <a href="http://www.mysqlkorea.com/sub.html?mcode=manual&amp;scode=01&amp;m_no=21681&amp;cat1=11&amp;cat2=332&amp;cat3=0&amp;lang=k">숫자 타입</a> 메뉴얼에서 DECIMAL 관련된 내용을 참고하자.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/15/internationalization-i18n-for-javascript-i18next/</id><title type="html">Javascript 국제화(I18N) 라이브러리 - i18next</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/15/internationalization-i18n-for-javascript-i18next/"/><published>2015-09-15T19:02:43+09:00</published><updated>2015-09-15T19:02:43+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[국제화(internationalization : i18n)의 의미 국제화는 텀즈의 정의에 따르면 아래와 같다. 국제화는 때로 줄여서 그저 "I18N"이라고도 표기하는데, 그 의미는 이 용어의 영어 표기에서 첫 글자인 "I"자와 마지막 글자인 "N"의 사이에 18글자가 들어가 있다는 의미이다. 국제화는 제품이나 서비스를 특정지역의 언어나 문화에 맞추는, 즉 현지화라고 불리는 과정을 쉽게 할 수 있도록 계획하거나 이행하는 과정을 말한다. 국제화는 때로 번역 및 현지화 능력부여 작업이라고도 불리는데, 여기에는 다음과 같은 것들이 포함된다. 하드웨어 레이블이나, 도움말 페이지, 그리고 온라인 메뉴 등 사용자 인터페이스를 설계할 때, 더 많은 수의 글자가 들어갈 때를 대비하여 여유를 둔다. 웹에디터나 저작도구 등과 같은 제품을 개발할 때 국제 문자셋, 즉 유니코드를 지원할 수 있게 한다. 인쇄용 그래픽 이미지나, 웹사이트를 만들어서 텍스트 레이블을 번역할 때 비용이 많이 들지 않게 한다. 전세계적으로 통용될 수 있는 예시를 사용한다. 소프트웨어의 경우에는, 메시지들이 영어와 같은 단일 바이트 문자 코드에서, 한글과 같은 다중 바이트 문자 코드로 변환될 수 있도록 데이터 공간을 확보한다. 위키피디아에는 "국제화와 지역화"라는 주제로 설명되어 있기도 하다. i18next 공식 사이트 : http://i18next.com/ Github : https://github.com/i18next/i18next CDN : http://cdnjs.com/libraries/i18next i18next-node : https://github.com/i18next/i18next-node i18next는 위에 설명한 i18n을 자바스크립트 상에서 사용할 수 있도록 제작된 라이브러리다. 아주 다양한 형태로의 사용을 지원하는데 사용해본 결과 메뉴얼이 조금 부실(?)하다. 확인해보면 메뉴얼의 양이 적은 건 아니다. 하지만 워낙 다양하게 지원하다 보니 개별적인 설명이 부족한 감이 든다. 이번에 다국어용 one page 앱을 제작하면서 영어와 한국어를 지원하기 위해 사용하게되었는데 조금 해멨다. 사실 아직도 자유자재로 사용하지는 못하겠다. 하지만 아주 다양한 형태를 지원하므로 필요한 형태를 메뉴얼을 참고하여 사용한다면 유용하게 사용할 수 있을 것으로 생각한다. 사용예시 아래는 내가 작업한 일부를 간단하게 요약한 것이다. <html> <body> <div class="translation"> <a href="javascript:void(0);" onclick="changeLang('en-US');">영어</a> <a href="javascript:void(0);" onclick="changeLang('ko-KR');">한국어</a> <ul> <li data-i18n="A:apple"></li> <li data-i18n="A:banana"></li> <li data-i18n="A:orange"></li> </ul> <ul> <li data-i18n="B:car"></li> <li data-i18n="B:airplane"></li> <li data-i18n="B:bicycle"></li> </ul> </div> <script type="text/javascript" src="https://code.jquery.com/jquery-2.1.4.min.js"></script> <script src="https://cdnjs.cloudflare.com/ajax/libs/i18next/1.9.0/i18next.min.js" type="text/javascript"></script> <script type="text/javascript"> $.i18n.init({ //lng: 'en-US', lng: 'ko-KR', debug: true, useLocalStorage: false, localStorageExpirationTime: 86400000, // in ms, default 1 week ns: { namespaces: ['A', 'B'], defaultNs: 'A' }, //resGetPath: 'js/locales/translation.json' resStore: { "en-US": { "A": { "apple": "Apple", "banana": "Banana", "orange": "Orange" }, "B": { "car": "Car", "airplane": "Airplane", "bicycle": "Bicycle" } }, "ko-KR": { "A": { "apple": "사과", "banana": "바나나", "orange": "오렌지" }, "B": { "car": "자동차", "airplane": "비행기", "bicycle": "자전거" } } } }, function () { $('.translation').i18n(); }); var changeLang = function (lang) { $.i18n.setLng(lang); $('.translation').i18n(); } </script> </body> </html> 위의 예시는 jquery와 함께 사용하는 예시이지만 jquery에 대한 의존성을 가진 것은 아니다. CDN 목록에서 보여지는 것과 같이 amd, commonjs, 기본 등 여러가지 환경에서 사용 가능하다. 여러번 얘기하게되지만 사용방법이 너무 다양하다. 그래서 위의 예시를 기준으로 몇가지 옵션만 설명하겠다. 보다 다양한 사용법은 제작 사이트의 메뉴얼과 샘플을 참고하자. lng : 기본 언어를 지정한다. 위의 예시처럼 setLng 함수를 통해 언제든 변경할 수 있다. debug : true로 설정시 내부적인 처리에 관련되 log를 확인할 수 있다. useLocalStorage : true로 설정시 local storage에 내용을 저장하여 향후 재사용할 수 있도록 한다. 이 예시에서는 resStore를 사용해서 언어 설정을 했기 때문에 의미가 없지만 서버에서 언어 정보를 받아와서 사용하는 경우에는 성능에 이점을 얻을 수 있다. localStorageExpirationTime : local storage에 저장된 데이터에 유효기간을 설정한다. 단위는 ms이며 기본값은 1주일이다. ns : 사용할 Namespace를 정의한다. 필수는 아니며 필요시에만 사용하면 된다. Namespace의 구분은 ::로 한다.(예시 : "A::apple") resStore : i18n에 사용될 데이터를 설정한다. resGetPath : i18n에서 사용할 데이터를 서버에서 요청할 경우 경로를 구성하는 방법을 정의한다. 'locales/__lng__/__ns__.json' 이런 형식을 쓸 수 있는데 __lng__는 언어명으로 __ns__는 Namespace로 대체된다. 그 외에도 다양한 옵션이 있을 뿐 아니라 여러가지 상황에 대입해서 사용할 수 있다. 위의 예시는 html에 data attribute를 사용하는 것을 예를 들었지만 js에서 직접적으로 데이터를 받아서 사용할 수도 있고, sprintf 등과 같이 데이터를 데입해서 내용을 생성하는 것도 가능하다. 게다가 handlebars, angular, JQuery UI에서 template에 적용시킬 수도 있다.]]></summary><content type="html"><![CDATA[<h2>국제화(internationalization : i18n)의 의미</h2>
<p>국제화는 <a href="http://www.terms.co.kr/internationalization.htm">텀즈</a>의 정의에 따르면 아래와 같다.</p>
<p>국제화는 때로 줄여서 그저 &quot;I18N&quot;이라고도 표기하는데, 그 의미는 이 용어의 영어 표기에서 첫 글자인 &quot;I&quot;자와 마지막 글자인 &quot;N&quot;의 사이에 18글자가 들어가 있다는 의미이다. 국제화는 제품이나 서비스를 특정지역의 언어나 문화에 맞추는, 즉 현지화라고 불리는 과정을 쉽게 할 수 있도록 계획하거나 이행하는 과정을 말한다. 국제화는 때로 번역 및 현지화 능력부여 작업이라고도 불리는데, 여기에는 다음과 같은 것들이 포함된다.</p>
<ul>
<li>하드웨어 레이블이나, 도움말 페이지, 그리고 온라인 메뉴 등 사용자 인터페이스를 설계할 때, 더 많은 수의 글자가 들어갈 때를 대비하여 여유를 둔다.</li>
<li>웹에디터나 저작도구 등과 같은 제품을 개발할 때 국제 문자셋, 즉 유니코드를 지원할 수 있게 한다.</li>
<li>인쇄용 그래픽 이미지나, 웹사이트를 만들어서 텍스트 레이블을 번역할 때 비용이 많이 들지 않게 한다.</li>
<li>전세계적으로 통용될 수 있는 예시를 사용한다.</li>
<li>소프트웨어의 경우에는, 메시지들이 영어와 같은 단일 바이트 문자 코드에서, 한글과 같은 다중 바이트 문자 코드로 변환될 수 있도록 데이터 공간을 확보한다.</li>
</ul>
<p>위키피디아에는 <a href="https://ko.wikipedia.org/wiki/%EA%B5%AD%EC%A0%9C%ED%99%94%EC%99%80_%EC%A7%80%EC%97%AD%ED%99%94">&quot;국제화와 지역화&quot;</a>라는 주제로 설명되어 있기도 하다.</p>
<h2>i18next</h2>
<ul>
<li>공식 사이트 : <a href="http://i18next.com/">http://i18next.com/</a></li>
<li>Github : <a href="https://github.com/i18next/i18next">https://github.com/i18next/i18next</a></li>
<li>CDN : <a href="http://cdnjs.com/libraries/i18next">http://cdnjs.com/libraries/i18next</a></li>
<li>i18next-node : <a href="https://github.com/i18next/i18next-node">https://github.com/i18next/i18next-node</a></li>
</ul>
<p>i18next는 위에 설명한 i18n을 자바스크립트 상에서 사용할 수 있도록 제작된 라이브러리다. 아주 다양한 형태로의 사용을 지원하는데 사용해본 결과 메뉴얼이 조금 부실(?)하다. 확인해보면 메뉴얼의 양이 적은 건 아니다. 하지만 워낙 다양하게 지원하다 보니 개별적인 설명이 부족한 감이 든다.</p>
<p>이번에 다국어용 one page 앱을 제작하면서 영어와 한국어를 지원하기 위해 사용하게되었는데 조금 해멨다. 사실 아직도 자유자재로 사용하지는 못하겠다. 하지만 아주 다양한 형태를 지원하므로 필요한 형태를 메뉴얼을 참고하여 사용한다면 유용하게 사용할 수 있을 것으로 생각한다.</p>
<h3>사용예시</h3>
<p>아래는 내가 작업한 일부를 간단하게 요약한 것이다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"translation"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:void(0);"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"changeLang('en-US');"</span>&gt;</span>영어<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"javascript:void(0);"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"changeLang('ko-KR');"</span>&gt;</span>한국어<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-i18n</span>=<span class="hljs-string">"A:apple"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-i18n</span>=<span class="hljs-string">"A:banana"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-i18n</span>=<span class="hljs-string">"A:orange"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-i18n</span>=<span class="hljs-string">"B:car"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-i18n</span>=<span class="hljs-string">"B:airplane"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">data-i18n</span>=<span class="hljs-string">"B:bicycle"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>

<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://code.jquery.com/jquery-2.1.4.min.js"</span>&gt;</span><span class=""></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdnjs.cloudflare.com/ajax/libs/i18next/1.9.0/i18next.min.js"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class=""></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript">
    $.i18n.init({
        <span class="hljs-comment">//lng: 'en-US',</span>
        lng: <span class="hljs-string">'ko-KR'</span>,
        <span class="hljs-attr">debug</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-attr">useLocalStorage</span>: <span class="hljs-literal">false</span>,
        <span class="hljs-attr">localStorageExpirationTime</span>: <span class="hljs-number">86400000</span>, <span class="hljs-comment">// in ms, default 1 week</span>
        ns: {
            <span class="hljs-attr">namespaces</span>: [<span class="hljs-string">'A'</span>, <span class="hljs-string">'B'</span>],
            <span class="hljs-attr">defaultNs</span>: <span class="hljs-string">'A'</span>
        },
        <span class="hljs-comment">//resGetPath: 'js/locales/translation.json'</span>
        resStore: {
            <span class="hljs-string">"en-US"</span>: {
                <span class="hljs-string">"A"</span>: {
                    <span class="hljs-string">"apple"</span>: <span class="hljs-string">"Apple"</span>,
                    <span class="hljs-string">"banana"</span>: <span class="hljs-string">"Banana"</span>,
                    <span class="hljs-string">"orange"</span>: <span class="hljs-string">"Orange"</span>
                },
                <span class="hljs-string">"B"</span>: {
                    <span class="hljs-string">"car"</span>: <span class="hljs-string">"Car"</span>,
                    <span class="hljs-string">"airplane"</span>: <span class="hljs-string">"Airplane"</span>,
                    <span class="hljs-string">"bicycle"</span>: <span class="hljs-string">"Bicycle"</span>
                }
            },
            <span class="hljs-string">"ko-KR"</span>: {
                <span class="hljs-string">"A"</span>: {
                    <span class="hljs-string">"apple"</span>: <span class="hljs-string">"사과"</span>,
                    <span class="hljs-string">"banana"</span>: <span class="hljs-string">"바나나"</span>,
                    <span class="hljs-string">"orange"</span>: <span class="hljs-string">"오렌지"</span>
                },
                <span class="hljs-string">"B"</span>: {
                    <span class="hljs-string">"car"</span>: <span class="hljs-string">"자동차"</span>,
                    <span class="hljs-string">"airplane"</span>: <span class="hljs-string">"비행기"</span>,
                    <span class="hljs-string">"bicycle"</span>: <span class="hljs-string">"자전거"</span>
                }
            }
        }
    }, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
        $(<span class="hljs-string">'.translation'</span>).i18n();
    });

    <span class="hljs-keyword">var</span> changeLang = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">lang</span>) </span>{
        $.i18n.setLng(lang);
        $(<span class="hljs-string">'.translation'</span>).i18n();
    }
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></pre>
<p>위의 예시는 jquery와 함께 사용하는 예시이지만 jquery에 대한 의존성을 가진 것은 아니다. <a href="http://cdnjs.com/libraries/i18next">CDN</a> 목록에서 보여지는 것과 같이 amd, commonjs, 기본 등 여러가지 환경에서 사용 가능하다.</p>
<p>여러번 얘기하게되지만 사용방법이 너무 다양하다. 그래서 위의 예시를 기준으로 몇가지 옵션만 설명하겠다. 보다 다양한 사용법은 제작 사이트의 <a href="http://i18next.com/pages/doc_init.html">메뉴얼</a>과 <a href="http://i18next.com/pages/sample.html">샘플</a>을 참고하자.</p>
<ul>
<li><strong>lng</strong> : 기본 언어를 지정한다. 위의 예시처럼 setLng 함수를 통해 언제든 변경할 수 있다.</li>
<li><strong>debug</strong> : true로 설정시 내부적인 처리에 관련되 log를 확인할 수 있다.</li>
<li><strong>useLocalStorage</strong> : true로 설정시 local storage에 내용을 저장하여 향후 재사용할 수 있도록 한다. 이 예시에서는 resStore를 사용해서 언어 설정을 했기 때문에 의미가 없지만 서버에서 언어 정보를 받아와서 사용하는 경우에는 성능에 이점을 얻을 수 있다.</li>
<li><strong>localStorageExpirationTime</strong> : local storage에 저장된 데이터에 유효기간을 설정한다. 단위는 ms이며 기본값은 1주일이다.</li>
<li><strong>ns</strong> : 사용할 Namespace를 정의한다. 필수는 아니며 필요시에만 사용하면 된다. Namespace의 구분은 ::로 한다.(예시 : &quot;A::apple&quot;)</li>
<li><strong>resStore</strong> : i18n에 사용될 데이터를 설정한다.</li>
<li><strong>resGetPath</strong> : i18n에서 사용할 데이터를 서버에서 요청할 경우 경로를 구성하는 방법을 정의한다. <code>'locales/__lng__/__ns__.json'</code> 이런 형식을 쓸 수 있는데 <code>__lng__</code>는 언어명으로 <code>__ns__</code>는 Namespace로 대체된다.</li>
</ul>
<p>그 외에도 다양한 옵션이 있을 뿐 아니라 여러가지 상황에 대입해서 사용할 수 있다. 위의 예시는 html에 data attribute를 사용하는 것을 예를 들었지만 js에서 직접적으로 데이터를 받아서 사용할 수도 있고, sprintf 등과 같이 데이터를 데입해서 내용을 생성하는 것도 가능하다.
게다가 handlebars, angular, JQuery UI에서 template에 적용시킬 수도 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/14/soundex-slash-metaphone-key-in-php/</id><title type="html">PHP에서 soundex / metaphone key 구하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/14/soundex-slash-metaphone-key-in-php/"/><published>2015-09-14T21:19:33+09:00</published><updated>2015-09-14T21:19:33+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[앞선 포스팅에서 levenshtein() 함수, similar_text()에 대해 알아보았다. 이런 문자열 비교 함수는 아니지만 문자열의 soundex key를 구하여 발음이 유사한 단어들을 찾을 수 있도록 도와주는 soundex() 함수와 이보다 더 정확한 결과를 반환한다고 하는 metaphone() 함수에 대해서 알아보자. soundex란? Soundex란 발음이 유사한 서로다른 철자의 단어를 그룹화하여 철자 입력 오류를 보정하기 위한 색인시스템으로 초기에는 주로 사람이름을 검색하기 위한 용도로 사용되었으나 인터넷 검색이 활성화되면서 다양한 분야에서 응용되고 있다. 대표적인 Soundex Appliation은 “US Bureau of the Censu s”의 것이며, AT&T의 Standard soundex algorithm도 있다. (츨처 : http://www.nicklib.com/nlp/2297) soundex() 함수 php 메뉴얼의 설명에 따르면 soundex() 함수는 발음이 유사한 단어들이 같은 soundex 키를 생성하므로, 발음은 알고 있지만 스펠은 모르는 단어를 데이터베이스에서 쉽게 찾을 수 있다. soundex 함수는 문자로 시작하는 4문자 문자열을 반환한다. 이 soundex 함수는 "The Art Of Computer Programming, vol. 3: Sorting And Searching", Addison-Wesley (1973), 391-392쪽에서 Donald Knuth가 기술한 것이다. 기본 사용법 string soundex ( string $str ) 함수 인자 str 입력 문자열 반환값 soundex 키를 문자열로 반환한다. 예시 <?php soundex("Euler") == soundex("Ellery"); // E460 soundex("Gauss") == soundex("Ghosh"); // G200 soundex("Hilbert") == soundex("Heilbronn"); // H416 soundex("Knuth") == soundex("Kant"); // K530 soundex("Lloyd") == soundex("Ladd"); // L300 soundex("Lukasiewicz") == soundex("Lissajous"); // L222 metaphone() 함수 php 메뉴얼의 설명에 따르면 metaphone() 함수는 soundex()처럼 유사한 발음의 단어에 대해 동일한 키를 생성다. 이 함수는 영어 발음의 기본 법칙을 사용하는 soundex()보다 훨씬 정확하다. 메타폰 생성 키는 가변 길이를 가진다. metaphone은 Lawrence Philips 가 개발하였였고 이는 ["Practical Algorithms for Programmers", Binstock & Rex, Addison Wesley, 1995]에 수록되어 있다. 기본 사용법 string metaphone ( string $str [, int $phonemes ] ) 함수 인자 str 입력 문자열. phonemes 이 매개 변수는 음소 문자로 반환된 metaphone key의 길이를 제한한다. 0이 디폴트 값으로 제한하지 않음을 의미한다. 반환값 메타폰 키를 문자열로 반환한다. 응용 아이디어 알파벳 문자열의 유사도를 개선하는데에 응용할 수도 있을 것 같다. 문자열을 soundex나 metaphone key로 변환하여 문자열 유사도를 비교하면 조금 더 개선된 유사도를 구할 수 있을 것 같다. 정확히는 다른 의미가 되지만 발음이 유사한 문장을 유사 문장으로 인정하는 효과를 얻을 수 있을 것이다. 사실 중요한 문제는 soundex나 metaphone 뿐만 아니라 Double Metaphone, Caverphone 같은 알고리즘은 알파벳 문자에 대한 음성 특징을 추출하는 것으로 한글에는 사용할 수 없다. 하지만 한글을 초/중/종성으로 분리하고 발음 기호로 변환하는 부분을 추가 처리하면 한글에도 응용할 수 있을 것으로 보인다. 게대가 한글을 영어 발음으로 변환하는 오픈소스들도 찾아보니 있다.(https://metacpan.org/pod/Lingua::KO::Munja) 추후에 기회가 된다면 직접 구현 해봐야겠다.]]></summary><content type="html"><![CDATA[<p>앞선 포스팅에서 <a href="https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-strings-in-php-levenshtein/">levenshtein()</a> 함수, <a href="https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-strings-in-php-similar-text">similar_text()</a>에 대해 알아보았다.
이런 문자열 비교 함수는 아니지만 문자열의 soundex key를 구하여 발음이 유사한 단어들을 찾을 수 있도록 도와주는 soundex() 함수와 이보다 더 정확한 결과를 반환한다고 하는 metaphone() 함수에 대해서 알아보자.</p>
<h2>soundex란?</h2>
<blockquote>
<p>Soundex란 발음이 유사한 서로다른 철자의 단어를 그룹화하여 철자 입력 오류를 보정하기 위한 색인시스템으로 초기에는 주로 사람이름을 검색하기 위한 용도로 사용되었으나 인터넷 검색이 활성화되면서 다양한 분야에서 응용되고 있다. 대표적인 Soundex Appliation은 “US Bureau of the Censu s”의 것이며, AT&amp;T의 Standard soundex algorithm도 있다.
(츨처 : <a href="http://www.nicklib.com/nlp/2297">http://www.nicklib.com/nlp/2297</a>)</p>
</blockquote>
<h2><a href="http://php.net/manual/en/function.soundex.php">soundex()</a> 함수</h2>
<p><a href="http://php.net/manual/en/function.soundex.php">php 메뉴얼의 설명</a>에 따르면 soundex() 함수는 발음이 유사한 단어들이 같은 soundex 키를 생성하므로, 발음은 알고 있지만 스펠은 모르는 단어를 데이터베이스에서 쉽게 찾을 수 있다. soundex 함수는 문자로 시작하는 4문자 문자열을 반환한다.</p>
<p>이 soundex 함수는 &quot;The Art Of Computer Programming, vol. 3: Sorting And Searching&quot;, Addison-Wesley (1973), 391-392쪽에서 Donald Knuth가 기술한 것이다.</p>
<h3>기본 사용법</h3>
<pre class="hljs php">string soundex ( string $str )</pre>
<h3>함수 인자</h3>
<h4>str</h4>
<p>입력 문자열</p>
<h3>반환값</h3>
<p>soundex 키를 문자열로 반환한다.</p>
<h3>예시</h3>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
soundex(<span class="hljs-string">"Euler"</span>)       == soundex(<span class="hljs-string">"Ellery"</span>);    <span class="hljs-comment">// E460</span>
soundex(<span class="hljs-string">"Gauss"</span>)       == soundex(<span class="hljs-string">"Ghosh"</span>);     <span class="hljs-comment">// G200</span>
soundex(<span class="hljs-string">"Hilbert"</span>)     == soundex(<span class="hljs-string">"Heilbronn"</span>); <span class="hljs-comment">// H416</span>
soundex(<span class="hljs-string">"Knuth"</span>)       == soundex(<span class="hljs-string">"Kant"</span>);      <span class="hljs-comment">// K530</span>
soundex(<span class="hljs-string">"Lloyd"</span>)       == soundex(<span class="hljs-string">"Ladd"</span>);      <span class="hljs-comment">// L300</span>
soundex(<span class="hljs-string">"Lukasiewicz"</span>) == soundex(<span class="hljs-string">"Lissajous"</span>); <span class="hljs-comment">// L222</span></pre>
<h2><a href="http://php.net/manual/en/function.metaphone.php">metaphone()</a> 함수</h2>
<p><a href="http://php.net/manual/en/function.metaphone.php">php 메뉴얼의 설명</a>에 따르면 metaphone() 함수는 soundex()처럼 유사한 발음의 단어에 대해 동일한 키를 생성다. 이 함수는 영어 발음의 기본 법칙을 사용하는 soundex()보다 훨씬 정확하다. 메타폰 생성 키는 가변 길이를 가진다.</p>
<p>metaphone은 Lawrence Philips <lphilips at verity dot com>가 개발하였였고 이는 [&quot;Practical Algorithms for Programmers&quot;, Binstock &amp; Rex, Addison Wesley, 1995]에 수록되어 있다.</p>
<h3>기본 사용법</h3>
<pre class="hljs php">string metaphone ( string $str [, int $phonemes ] )</pre>
<h3>함수 인자</h3>
<h4>str</h4>
<p>입력 문자열.</p>
<h4>phonemes</h4>
<p>이 매개 변수는 음소 문자로 반환된 metaphone key의 길이를 제한한다. 0이 디폴트 값으로 제한하지 않음을 의미한다.</p>
<h3>반환값</h3>
<p>메타폰 키를 문자열로 반환한다.</p>
<h2>응용 아이디어</h2>
<p>알파벳 문자열의 유사도를 개선하는데에 응용할 수도 있을 것 같다. 문자열을 soundex나 metaphone key로 변환하여 문자열 유사도를 비교하면 조금 더 개선된 유사도를 구할 수 있을 것 같다. 정확히는 다른 의미가 되지만 발음이 유사한 문장을 유사 문장으로 인정하는 효과를 얻을 수 있을 것이다.</p>
<p>사실 중요한 문제는 soundex나 metaphone 뿐만 아니라 Double Metaphone, Caverphone 같은 알고리즘은 알파벳 문자에 대한 음성 특징을 추출하는 것으로 한글에는 사용할 수 없다. 하지만 한글을 초/중/종성으로 분리하고 발음 기호로 변환하는 부분을 추가 처리하면 한글에도 응용할 수 있을 것으로 보인다.</p>
<p>게대가 한글을 영어 발음으로 변환하는 오픈소스들도 찾아보니 있다.(<a href="https://metacpan.org/pod/Lingua::KO::Munja">https://metacpan.org/pod/Lingua::KO::Munja</a>)</p>
<p>추후에 기회가 된다면 직접 구현 해봐야겠다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-strings-in-php-similar-text/</id><title type="html">PHP에서 두 문자열의 거리(유사도) 구하기 - similar_text()</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-strings-in-php-similar-text/"/><published>2015-09-14T20:13:22+09:00</published><updated>2015-09-14T20:13:22+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[앞선 포스팅 PHP에서 두 문자열의 거리(유사도) 구하기 - levenshtein()에서 levenshtein() 함수에 대해 알아보았다. 이번엔 이와 유사한 함수인 similar_text()에 대해 알아보고자 한다. similar_text() 함수 php 메뉴얼의 설명에 따르면 similar_text() 함수는 두 문자열의 유사도를 계산한다고 되어 있다. 두 문자열의 유사도를 이 계산은 Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1) 에서 설명되어 있다. 이 구현은 pseudo code와 다르게 스택은 아니지만, 재귀 호출이므로 전체 프로세스의 속도에 영향을 줄 수 있다. 이 계산 알고리즘은 시간복잡도 O(N**3)를 가지며 여기서 N은 두 문자열 중 긴 문자열의 길이를 뜻한다. 문자열의 길이에 따라 성능이 극도로 떨어질 수 있으므로 가급적 짧은 문장의 비교에 사용하는 것이 좋다. 메뉴얼에서 paul은 20000자 이상에서만 성능에 문제가 있었다고는 하나 시간복잡도를 보더라도 긴 문자열은 자제하는게 좋겠다. 기본 사용법 int similar_text ( string $first , string $second [, float &$percent ] ) 함수 인자 first 첫 번째 문자열 second 두 번째 문자열 percent reference로 넘겨져야하는 세 번째 인자는 similar_text() 함수의 계산 결과인 문서 유사도를 퍼센트(%)로 제공해 준다. 반환값 두 문자열에서 매칭되는 문자수를 반환한다. 예시 이 함수는 몇가지 특성을 가지고 있으므로 메뉴얼에 안내되어 있는 아래의 예시들을 통해 차이를 알고 사용해야 한다. 인자의 입력 순서에 따라 결과가 달라진다. <?php $var_1 = 'PHP IS GREAT'; $var_2 = 'WITH MYSQL'; similar_text($var_1, $var_2, $percent); echo $percent; // 27.272727272727 similar_text($var_2, $var_1, $percent); echo $percent; // 18.181818181818 공백은 비교에서 제외된다.(그렇다고 trim이 되거나 문자열 내 공백이 제거되고 비교하는 것은 아니다.) <?php echo similar_text(" ", "", $sim); echo " -> "; echo $sim; echo "\n"; echo similar_text("ab c", "abc", $sim); echo " -> "; echo $sim; echo "\n"; echo similar_text(" abc", "abc", $sim); echo " -> "; echo $sim; echo "\n"; // 결과 // 0 -> 0 // 3 -> 85.714285714286 // 3 -> 85.714285714286 대소문자를 구분한다. <?php $var1 = 'Hello'; $var2 = 'Hello'; $var3 = 'hello'; echo similar_text($var1, $var2); // 5 echo similar_text($var1, $var3); // 4 유사함수 비슷한 역할을 하는 함수에 대해 알고 싶다면 아래의 포스팅을 참고하자. PHP에서 두 문자열의 거리(유사도) 구하기 - levenshtein()]]></summary><content type="html"><![CDATA[<p>앞선 포스팅 <a href="https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-strings-in-php-levenshtein/">PHP에서 두 문자열의 거리(유사도) 구하기 - levenshtein()</a>에서 levenshtein() 함수에 대해 알아보았다. 이번엔 이와 유사한 함수인 similar_text()에 대해 알아보고자 한다.</p>
<h2><a href="http://php.net/manual/en/function.similar-text.php">similar_text()</a> 함수</h2>
<p><a href="http://php.net/manual/en/function.similar-text.php">php 메뉴얼의 설명</a>에 따르면 similar_text() 함수는 두 문자열의 유사도를 계산한다고 되어 있다.</p>
<p>두 문자열의 유사도를 이 계산은 Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1) 에서 설명되어 있다. 이 구현은 pseudo code와 다르게 스택은 아니지만, 재귀 호출이므로 전체 프로세스의 속도에 영향을 줄 수 있다. 이 계산 알고리즘은 시간복잡도 <code>O(N**3)</code>를 가지며 여기서 N은 두 문자열 중 긴 문자열의 길이를 뜻한다.</p>
<p>문자열의 길이에 따라 성능이 극도로 떨어질 수 있으므로 가급적 짧은 문장의 비교에 사용하는 것이 좋다. 메뉴얼에서 paul은 20000자 이상에서만 성능에 문제가 있었다고는 하나 시간복잡도를 보더라도 긴 문자열은 자제하는게 좋겠다.</p>
<h3>기본 사용법</h3>
<pre class="hljs php">int similar_text ( string $first , string $second [, float &amp;$percent ] )</pre>
<h3>함수 인자</h3>
<h4>first</h4>
<p>첫 번째 문자열</p>
<h4>second</h4>
<p>두 번째 문자열</p>
<h4>percent</h4>
<p>reference로 넘겨져야하는 세 번째 인자는 similar_text() 함수의 계산 결과인 문서 유사도를 퍼센트(%)로 제공해 준다.</p>
<h3>반환값</h3>
<p>두 문자열에서 매칭되는 문자수를 반환한다.</p>
<h3>예시</h3>
<p>이 함수는 몇가지 특성을 가지고 있으므로 메뉴얼에 안내되어 있는 아래의 예시들을 통해 차이를 알고 사용해야 한다.</p>
<h4>인자의 입력 순서에 따라 결과가 달라진다.</h4>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$var_1 = <span class="hljs-string">'PHP IS GREAT'</span>;
$var_2 = <span class="hljs-string">'WITH MYSQL'</span>;

similar_text($var_1, $var_2, $percent);

<span class="hljs-keyword">echo</span> $percent;
<span class="hljs-comment">// 27.272727272727</span>

similar_text($var_2, $var_1, $percent);

<span class="hljs-keyword">echo</span> $percent;
<span class="hljs-comment">// 18.181818181818</span></pre>
<h4>공백은 비교에서 제외된다.(그렇다고 trim이 되거나 문자열 내 공백이 제거되고 비교하는 것은 아니다.)</h4>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span> similar_text(<span class="hljs-string">" "</span>, <span class="hljs-string">""</span>, $sim);
<span class="hljs-keyword">echo</span> <span class="hljs-string">" -&gt; "</span>;
<span class="hljs-keyword">echo</span> $sim;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;
<span class="hljs-keyword">echo</span> similar_text(<span class="hljs-string">"ab c"</span>, <span class="hljs-string">"abc"</span>, $sim);
<span class="hljs-keyword">echo</span> <span class="hljs-string">" -&gt; "</span>;
<span class="hljs-keyword">echo</span> $sim;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;
<span class="hljs-keyword">echo</span> similar_text(<span class="hljs-string">" abc"</span>, <span class="hljs-string">"abc"</span>, $sim);
<span class="hljs-keyword">echo</span> <span class="hljs-string">" -&gt; "</span>;
<span class="hljs-keyword">echo</span> $sim;
<span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;

<span class="hljs-comment">// 결과</span>
<span class="hljs-comment">// 0 -&gt; 0</span>
<span class="hljs-comment">// 3 -&gt; 85.714285714286</span>
<span class="hljs-comment">// 3 -&gt; 85.714285714286</span></pre>
<h4>대소문자를 구분한다.</h4>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$var1 = <span class="hljs-string">'Hello'</span>;
$var2 = <span class="hljs-string">'Hello'</span>;
$var3 = <span class="hljs-string">'hello'</span>;

<span class="hljs-keyword">echo</span> similar_text($var1, $var2);  <span class="hljs-comment">// 5</span>
<span class="hljs-keyword">echo</span> similar_text($var1, $var3);  <span class="hljs-comment">// 4</span></pre>
<h3>유사함수</h3>
<p>비슷한 역할을 하는 함수에 대해 알고 싶다면 아래의 포스팅을 참고하자.</p>
<ul>
<li><a href="https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-strings-in-php-levenshtein/">PHP에서 두 문자열의 거리(유사도) 구하기 - levenshtein()</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-strings-in-php-levenshtein/</id><title type="html">PHP에서 두 문자열의 거리(유사도) 구하기 - levenshtein()</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-strings-in-php-levenshtein/"/><published>2015-09-14T20:12:59+09:00</published><updated>2015-09-14T20:12:59+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[php 프로그램 개발중 문자열의 유사도를 계산해야 할 일이 생겼다. 그래서 찾다보니 php 내장 함수에 해당 기능이 이미 구현되어 있었다. 비슷한 함수가 몇가지 존재하고 있어서 조금 더 자세히 알아 보았다. levenshtein() 함수 위키피디아에 Levenshtein distance에 대한 상세한 설명이 나와있다. php 메뉴얼의 설명에 따르면 Levenshtein distance는 문자열1을 문자열2로 변환하는데 필요한 최소한의 치환, 추가, 삭제의 횟수를 나타낸다고 되어 있다. 이 알고리즘의 시간복잡도는 O(m*n)이며, 여기서 m과 n은 str1, str2의 각각의 길이다. 비슷한 함수인 similar_text()가 가지는 시간 복잡도 O(max(n,m)**3)에 비해서는 덜하지만 그래도 비싼 처리 비용이 든다. 함수의 기본형 사용시 위의 설명대로 변환에 필요한 최소한의 치환, 추가, 삭제의 횟수를 계산하지만 추가 인자를 사용하면 각 변환에 필요한 비용을 지정할 수 있다. 이것은 더 일반적이고 적용성이 높지만 효율적이지 못하다. 기본 사용법 int levenshtein ( string $str1 , string $str2 ) 확장 사용법 int levenshtein ( string $str1 , string $str2 , int $cost_ins , int $cost_rep , int $cost_del ) 함수 인자 str1 Levenshtein distance를 계산할 문자열1 str2 Levenshtein distance를 계산할 문자열2 cost_ins 문자 추가 비용(가중치) cost_rep 문자 치환 비용(가중치) cost_del 문자 삭제 비용(가중치) 반환값 두 문자열의 Levenshtein-Distance 반환한다. 단, 입력된 두 문자열 중 하나라도 255 글자를 넘는다면 -1을 반환한다. 예시 메뉴얼에 나와 있는 예시 중 UTF-8 인코딩에 관련된 문제와 해결방법이 나와있어서 그 예시를 제시한다. <?php echo levenshtein('notre', 'votre'); echo "\n"; echo levenshtein('notre', 'nôtre'); echo "\n"; // 결과 // 1 // 2 위의 결과를 보면 의아할 수 있다. 분명 두 예시 모두에서 글자가 하나씩 다르므로 결과가 1과 1이 나올 것이라고 예상되지만 결과는 1과 2가 나왔다. 이유는 UTF-8문자열 때문이다. 이를 개선하는 함수의 예시는 다음과 같다. <?php // Convert an UTF-8 encoded string to a single-byte string suitable for // functions such as levenshtein. // // The function simply uses (and updates) a tailored dynamic encoding // (in/out map parameter) where non-ascii characters are remapped to // the range [128-255] in order of appearance. // // Thus it supports up to 128 different multibyte code points max over // the whole set of strings sharing this encoding. // function utf8_to_extended_ascii($str, &$map) { // find all multibyte characters (cf. utf-8 encoding specs) $matches = array(); if (!preg_match_all('/[\xC0-\xF7][\x80-\xBF]+/', $str, $matches)) return $str; // plain ascii string // update the encoding map with the characters not already met foreach ($matches[0] as $mbc) if (!isset($map[$mbc])) $map[$mbc] = chr(128 + count($map)); // finally remap non-ascii characters return strtr($str, $map); } // Didactic example showing the usage of the previous conversion function but, // for better performance, in a real application with a single input string // matched against many strings from a database, you will probably want to // pre-encode the input only once. // function levenshtein_utf8($s1, $s2) { $charMap = array(); $s1 = utf8_to_extended_ascii($s1, $charMap); $s2 = utf8_to_extended_ascii($s2, $charMap); return levenshtein($s1, $s2); } ?> 위의 함수를 이용해서 처음 예시를 다시 실행해보자. <?php function utf8_to_extended_ascii($str, &$map) { $matches = array(); if (!preg_match_all('/[\xC0-\xF7][\x80-\xBF]+/', $str, $matches)) return $str; // plain ascii string foreach ($matches[0] as $mbc) if (!isset($map[$mbc])) $map[$mbc] = chr(128 + count($map)); return strtr($str, $map); } function levenshtein_utf8($s1, $s2) { $charMap = array(); $s1 = utf8_to_extended_ascii($s1, $charMap); $s2 = utf8_to_extended_ascii($s2, $charMap); return levenshtein($s1, $s2); } echo levenshtein_utf8('notre', 'votre'); echo "\n"; echo levenshtein_utf8('notre', 'nôtre'); echo "\n"; // 결과 // 1 // 1 결과는 개선되어 1과 1이 나온다. 하지만 정확한 값이 필요한 것이 아니라면 개선된 함수말고 기본 함수를 써도 무방하다. 일반적으로 사용할 때는 가장 비슷한 문자열을 찾는 등에 사용할테니 인코딩에 따른 값차이는 크게 의미를 가지지 않는다. 게다가 처리 비용도 더 많이 든다. 유사함수 비슷한 역할을 하는 함수에 대해 알고 싶다면 아래의 포스팅을 참고하자. PHP에서 두 문자열의 거리(유사도) 구하기 - similar_text()]]></summary><content type="html"><![CDATA[<p>php 프로그램 개발중 문자열의 유사도를 계산해야 할 일이 생겼다. 그래서 찾다보니 php 내장 함수에 해당 기능이 이미 구현되어 있었다. 비슷한 함수가 몇가지 존재하고 있어서 조금 더 자세히 알아 보았다.</p>
<h2><a href="http://php.net/manual/en/function.levenshtein.php">levenshtein()</a> 함수</h2>
<p>위키피디아에 <a href="https://en.wikipedia.org/wiki/Levenshtein_distance">Levenshtein distance</a>에 대한 상세한 설명이 나와있다.</p>
<p><a href="http://php.net/manual/en/function.levenshtein.php">php 메뉴얼의 설명</a>에 따르면 Levenshtein distance는 문자열1을 문자열2로 변환하는데 필요한 최소한의 치환, 추가, 삭제의 횟수를 나타낸다고 되어 있다. 이 알고리즘의 시간복잡도는 <code>O(m*n)</code>이며, 여기서 m과 n은 str1, str2의 각각의 길이다. 비슷한 함수인 <a href="http://php.net/manual/en/function.similar-text.php">similar_text()</a>가 가지는 시간 복잡도 <code>O(max(n,m)**3)</code>에 비해서는 덜하지만 그래도 비싼 처리 비용이 든다.</p>
<p>함수의 기본형 사용시 위의 설명대로 변환에 필요한 최소한의 치환, 추가, 삭제의 횟수를 계산하지만 추가 인자를 사용하면 각 변환에 필요한 비용을 지정할 수 있다. 이것은 더 일반적이고 적용성이 높지만 효율적이지 못하다.</p>
<h3>기본 사용법</h3>
<pre class="hljs php">int levenshtein ( string $str1 , string $str2 )</pre>
<h3>확장 사용법</h3>
<pre class="hljs php">int levenshtein ( string $str1 , string $str2 , int $cost_ins , int $cost_rep , int $cost_del )</pre>
<h3>함수 인자</h3>
<h4>str1</h4>
<p>Levenshtein distance를 계산할 문자열1</p>
<h4>str2</h4>
<p>Levenshtein distance를 계산할 문자열2</p>
<h4>cost_ins</h4>
<p>문자 추가 비용(가중치)</p>
<h4>cost_rep</h4>
<p>문자 치환 비용(가중치)</p>
<h4>cost_del</h4>
<p>문자 삭제 비용(가중치)</p>
<h3>반환값</h3>
<p>두 문자열의 Levenshtein-Distance 반환한다. 단, 입력된 두 문자열 중 하나라도 255 글자를 넘는다면 -1을 반환한다.</p>
<h3>예시</h3>
<p>메뉴얼에 나와 있는 예시 중 UTF-8 인코딩에 관련된 문제와 해결방법이 나와있어서 그 예시를 제시한다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">echo</span> levenshtein(<span class="hljs-string">'notre'</span>, <span class="hljs-string">'votre'</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;
<span class="hljs-keyword">echo</span> levenshtein(<span class="hljs-string">'notre'</span>, <span class="hljs-string">'nôtre'</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;

<span class="hljs-comment">// 결과</span>
<span class="hljs-comment">// 1</span>
<span class="hljs-comment">// 2</span></pre>
<p>위의 결과를 보면 의아할 수 있다. 분명 두 예시 모두에서 글자가 하나씩 다르므로 결과가 1과 1이 나올 것이라고 예상되지만 결과는 1과 2가 나왔다. 이유는 UTF-8문자열 때문이다. 이를 개선하는 함수의 예시는 다음과 같다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-comment">// Convert an UTF-8 encoded string to a single-byte string suitable for</span>
<span class="hljs-comment">// functions such as levenshtein.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// The function simply uses (and updates) a tailored dynamic encoding</span>
<span class="hljs-comment">// (in/out map parameter) where non-ascii characters are remapped to</span>
<span class="hljs-comment">// the range [128-255] in order of appearance.</span>
<span class="hljs-comment">//</span>
<span class="hljs-comment">// Thus it supports up to 128 different multibyte code points max over</span>
<span class="hljs-comment">// the whole set of strings sharing this encoding.</span>
<span class="hljs-comment">//</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">utf8_to_extended_ascii</span><span class="hljs-params">($str, &amp;$map)</span>
</span>{
    <span class="hljs-comment">// find all multibyte characters (cf. utf-8 encoding specs)</span>
    $matches = <span class="hljs-keyword">array</span>();
    <span class="hljs-keyword">if</span> (!preg_match_all(<span class="hljs-string">'/[\xC0-\xF7][\x80-\xBF]+/'</span>, $str, $matches))
        <span class="hljs-keyword">return</span> $str; <span class="hljs-comment">// plain ascii string</span>

    <span class="hljs-comment">// update the encoding map with the characters not already met</span>
    <span class="hljs-keyword">foreach</span> ($matches[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> $mbc)
        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($map[$mbc]))
            $map[$mbc] = chr(<span class="hljs-number">128</span> + count($map));

    <span class="hljs-comment">// finally remap non-ascii characters</span>
    <span class="hljs-keyword">return</span> strtr($str, $map);
}

<span class="hljs-comment">// Didactic example showing the usage of the previous conversion function but,</span>
<span class="hljs-comment">// for better performance, in a real application with a single input string</span>
<span class="hljs-comment">// matched against many strings from a database, you will probably want to</span>
<span class="hljs-comment">// pre-encode the input only once.</span>
<span class="hljs-comment">//</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">levenshtein_utf8</span><span class="hljs-params">($s1, $s2)</span>
</span>{
    $charMap = <span class="hljs-keyword">array</span>();
    $s1 = utf8_to_extended_ascii($s1, $charMap);
    $s2 = utf8_to_extended_ascii($s2, $charMap);

    <span class="hljs-keyword">return</span> levenshtein($s1, $s2);
}
<span class="hljs-meta">?&gt;</span></pre>
<p>위의 함수를 이용해서 처음 예시를 다시 실행해보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">utf8_to_extended_ascii</span><span class="hljs-params">($str, &amp;$map)</span>
</span>{
    $matches = <span class="hljs-keyword">array</span>();
    <span class="hljs-keyword">if</span> (!preg_match_all(<span class="hljs-string">'/[\xC0-\xF7][\x80-\xBF]+/'</span>, $str, $matches))
        <span class="hljs-keyword">return</span> $str; <span class="hljs-comment">// plain ascii string</span>

    <span class="hljs-keyword">foreach</span> ($matches[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> $mbc)
        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($map[$mbc]))
            $map[$mbc] = chr(<span class="hljs-number">128</span> + count($map));

    <span class="hljs-keyword">return</span> strtr($str, $map);
}

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">levenshtein_utf8</span><span class="hljs-params">($s1, $s2)</span>
</span>{
    $charMap = <span class="hljs-keyword">array</span>();
    $s1 = utf8_to_extended_ascii($s1, $charMap);
    $s2 = utf8_to_extended_ascii($s2, $charMap);

    <span class="hljs-keyword">return</span> levenshtein($s1, $s2);
}

<span class="hljs-keyword">echo</span> levenshtein_utf8(<span class="hljs-string">'notre'</span>, <span class="hljs-string">'votre'</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;
<span class="hljs-keyword">echo</span> levenshtein_utf8(<span class="hljs-string">'notre'</span>, <span class="hljs-string">'nôtre'</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">"\n"</span>;

<span class="hljs-comment">// 결과</span>
<span class="hljs-comment">// 1</span>
<span class="hljs-comment">// 1</span></pre>
<p>결과는 개선되어 1과 1이 나온다. 하지만 정확한 값이 필요한 것이 아니라면 개선된 함수말고 기본 함수를 써도 무방하다. 일반적으로 사용할 때는 가장 비슷한 문자열을 찾는 등에 사용할테니 인코딩에 따른 값차이는 크게 의미를 가지지 않는다. 게다가 처리 비용도 더 많이 든다.</p>
<h3>유사함수</h3>
<p>비슷한 역할을 하는 함수에 대해 알고 싶다면 아래의 포스팅을 참고하자.</p>
<ul>
<li><a href="https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-strings-in-php-similar-text/">PHP에서 두 문자열의 거리(유사도) 구하기 - similar_text()</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-wgs84-points/</id><title type="html">두지점(WGS84 좌표)간 km 거리 계산 함수(php, mysql, javascript)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/14/calculate-distance-between-two-wgs84-points/"/><published>2015-09-14T14:52:05+09:00</published><updated>2015-09-14T14:52:05+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="db" label="db" /><category term="js" label="js" /><summary><![CDATA[WGS84 좌표계는 위키피디아에 따르면 다음과 같다. World Geodetic System (WGS) 1984년에 제정된 범 지구적 측위 시스템으로 지도학, 측지학, 항법에 많이 사용된다. 통칭 및 약칭은 WGS 84 (aka WGS 1984, EPSG:4326, WGS84)라고 부르며, 2004년에 마지막으로 개정되었다. 이전에 쓰던 초안으로 WGS 72, WGS 66, 그리고 WGS 60이 있다. 기존에는 네이버 지도 등에서 KTM 좌표를 사용하기도 했지만 요즘엔 WGS84 좌표를 주로 사용한다. 이번에 작업을 하면서 WGS84 좌표 두개의 거리를 계산해야하는 일이 생겼다. 관련된 내용을 찾아보니 여러자료가 있긴하지만 바로 사용할만한 정보를 찾기가 어려웠다. 사실 계산방법이 조금씩 다르다(따라서 아래의 내용이 아주 정확한 값은 아닐 수 있다). 그래서 조사한김에 내용을 정리해둔다. 아래는 몇가지 언어로 구현된 함수들이다. 반환값은 모두 km 단위로 반환된다. 필요한 단위로의 변환은 당연히 산술계산을 하면된다. php function getDistance($lat1, $lng1, $lat2, $lng2) { $earth_radius = 6371; $dLat = deg2rad($lat2 - $lat1); $dLon = deg2rad($lng2 - $lng1); $a = sin($dLat/2) * sin($dLat/2) + cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * sin($dLon/2) * sin($dLon/2); $c = 2 * asin(sqrt($a)); $d = $earth_radius * $c; return $d; } MySql 함수로 구현된 예시이지만 당연히 query에서 return 부분을 직접 사용해도 된다. CREATE FUNCTION distance_between (from_lat DECIMAL(6, 3), from_lng DECIMAL(6, 3), to_lat DECIMAL(6, 3), to_lng DECIMAL(6, 3)) RETURNS DECIMAL(11, 3) RETURN 6371 * 2 * ATAN2(SQRT(POW(SIN(RADIANS(to_lat - from_lat)/2), 2) + POW(SIN(RADIANS(to_lng - from_lng)/2), 2) * COS(RADIANS(from_lat)) * COS(RADIANS(to_lat))), SQRT(1 - POW(SIN(RADIANS(to_lat - from_lat)/2), 2) + POW(SIN(RADIANS(to_lng - from_lng)/2), 2) * COS(RADIANS(from_lat)) * COS(RADIANS(to_lat)))); javascript function getDistanceFromLatLonInKm(lat1,lng1,lat2,lng2) { function deg2rad(deg) { return deg * (Math.PI/180) } var R = 6371; // Radius of the earth in km var dLat = deg2rad(lat2-lat1); // deg2rad below var dLon = deg2rad(lng2-lng1); var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon/2) * Math.sin(dLon/2); var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); var d = R * c; // Distance in km return d; } http://www.mapanet.eu/EN/Resources/Script-Distance.htm 이 사이트에서는 여러가지 언어로 사용하는 방법이 나와 있으나 위에 나열된 함수와는 계산이 조금 다르다. 특히 "Earth radius in km (WGS84)"라고 설명된 값이 6378.137를 사용하고 있다. 위키피디아에서 셜명된 Earth radius 값이 6371이기 때문이다.(지구가 둥글기 때문에 지역마다 값의 차이가 있는 것으로 보인다.)]]></summary><content type="html"><![CDATA[<p>WGS84 좌표계는 <a href="https://ko.wikipedia.org/wiki/%EC%84%B8%EA%B3%84_%EC%A7%80%EA%B5%AC_%EC%A2%8C%ED%91%9C_%EC%8B%9C%EC%8A%A4%ED%85%9C">위키피디아</a>에 따르면 다음과 같다.</p>
<blockquote>
<p>World Geodetic System (WGS) 1984년에 제정된 범 지구적 측위 시스템으로 지도학, 측지학, 항법에 많이 사용된다.</p>
<p>통칭 및 약칭은 WGS 84 (aka WGS 1984, EPSG:4326, WGS84)라고 부르며, 2004년에 마지막으로 개정되었다. 이전에 쓰던 초안으로 WGS 72, WGS 66, 그리고 WGS 60이 있다.</p>
</blockquote>
<p>기존에는 네이버 지도 등에서 KTM 좌표를 사용하기도 했지만 요즘엔 WGS84 좌표를 주로 사용한다.</p>
<p>이번에 작업을 하면서 WGS84 좌표 두개의 거리를 계산해야하는 일이 생겼다. 관련된 내용을 찾아보니 여러자료가 있긴하지만 바로 사용할만한 정보를 찾기가 어려웠다. 사실 계산방법이 조금씩 다르다(따라서 아래의 내용이 아주 정확한 값은 아닐 수 있다). 그래서 조사한김에 내용을 정리해둔다.</p>
<p>아래는 몇가지 언어로 구현된 함수들이다. 반환값은 모두 km 단위로 반환된다. 필요한 단위로의 변환은 당연히 산술계산을 하면된다.</p>
<h2>php</h2>
<pre class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDistance</span><span class="hljs-params">($lat1, $lng1, $lat2, $lng2)</span>
</span>{
    $earth_radius = <span class="hljs-number">6371</span>;
    $dLat = deg2rad($lat2 - $lat1);
    $dLon = deg2rad($lng2 - $lng1);
    $a = sin($dLat/<span class="hljs-number">2</span>) * sin($dLat/<span class="hljs-number">2</span>) + cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * sin($dLon/<span class="hljs-number">2</span>) * sin($dLon/<span class="hljs-number">2</span>);
    $c = <span class="hljs-number">2</span> * asin(sqrt($a));
    $d = $earth_radius * $c;
    <span class="hljs-keyword">return</span> $d;
}</pre>
<h2>MySql</h2>
<p>함수로 구현된 예시이지만 당연히 query에서 return 부분을 직접 사용해도 된다.</p>
<pre class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> distance_between (from_lat <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>), from_lng <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>), to_lat <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>), to_lng <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>)) <span class="hljs-keyword">RETURNS</span> <span class="hljs-built_in">DECIMAL</span>(<span class="hljs-number">11</span>, <span class="hljs-number">3</span>)
    <span class="hljs-keyword">RETURN</span> <span class="hljs-number">6371</span> * <span class="hljs-number">2</span> * ATAN2(<span class="hljs-keyword">SQRT</span>(<span class="hljs-keyword">POW</span>(<span class="hljs-keyword">SIN</span>(<span class="hljs-keyword">RADIANS</span>(to_lat - from_lat)/<span class="hljs-number">2</span>), <span class="hljs-number">2</span>) + <span class="hljs-keyword">POW</span>(<span class="hljs-keyword">SIN</span>(<span class="hljs-keyword">RADIANS</span>(to_lng - from_lng)/<span class="hljs-number">2</span>), <span class="hljs-number">2</span>) * <span class="hljs-keyword">COS</span>(<span class="hljs-keyword">RADIANS</span>(from_lat)) * <span class="hljs-keyword">COS</span>(<span class="hljs-keyword">RADIANS</span>(to_lat))), <span class="hljs-keyword">SQRT</span>(<span class="hljs-number">1</span> - <span class="hljs-keyword">POW</span>(<span class="hljs-keyword">SIN</span>(<span class="hljs-keyword">RADIANS</span>(to_lat - from_lat)/<span class="hljs-number">2</span>), <span class="hljs-number">2</span>) + <span class="hljs-keyword">POW</span>(<span class="hljs-keyword">SIN</span>(<span class="hljs-keyword">RADIANS</span>(to_lng - from_lng)/<span class="hljs-number">2</span>), <span class="hljs-number">2</span>) * <span class="hljs-keyword">COS</span>(<span class="hljs-keyword">RADIANS</span>(from_lat)) * <span class="hljs-keyword">COS</span>(<span class="hljs-keyword">RADIANS</span>(to_lat))));</pre>
<h2>javascript</h2>
<pre class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getDistanceFromLatLonInKm</span>(<span class="hljs-params">lat1,lng1,lat2,lng2</span>) </span>{
    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">deg2rad</span>(<span class="hljs-params">deg</span>) </span>{
        <span class="hljs-keyword">return</span> deg * (<span class="hljs-built_in">Math</span>.PI/<span class="hljs-number">180</span>)
    }

    <span class="hljs-keyword">var</span> R = <span class="hljs-number">6371</span>; <span class="hljs-comment">// Radius of the earth in km</span>
    <span class="hljs-keyword">var</span> dLat = deg2rad(lat2-lat1);  <span class="hljs-comment">// deg2rad below</span>
    <span class="hljs-keyword">var</span> dLon = deg2rad(lng2-lng1);
    <span class="hljs-keyword">var</span> a = <span class="hljs-built_in">Math</span>.sin(dLat/<span class="hljs-number">2</span>) * <span class="hljs-built_in">Math</span>.sin(dLat/<span class="hljs-number">2</span>) + <span class="hljs-built_in">Math</span>.cos(deg2rad(lat1)) * <span class="hljs-built_in">Math</span>.cos(deg2rad(lat2)) * <span class="hljs-built_in">Math</span>.sin(dLon/<span class="hljs-number">2</span>) * <span class="hljs-built_in">Math</span>.sin(dLon/<span class="hljs-number">2</span>);
    <span class="hljs-keyword">var</span> c = <span class="hljs-number">2</span> * <span class="hljs-built_in">Math</span>.atan2(<span class="hljs-built_in">Math</span>.sqrt(a), <span class="hljs-built_in">Math</span>.sqrt(<span class="hljs-number">1</span>-a));
    <span class="hljs-keyword">var</span> d = R * c; <span class="hljs-comment">// Distance in km</span>
    <span class="hljs-keyword">return</span> d;
}</pre>
<p><a href="http://www.mapanet.eu/EN/Resources/Script-Distance.htm">http://www.mapanet.eu/EN/Resources/Script-Distance.htm</a> 이 사이트에서는 여러가지 언어로 사용하는 방법이 나와 있으나 위에 나열된 함수와는 계산이 조금 다르다. 특히 &quot;Earth radius in km (WGS84)&quot;라고 설명된 값이 6378.137를 사용하고 있다.
<a href="https://en.wikipedia.org/wiki/Earth_radius">위키피디아</a>에서 셜명된 Earth radius 값이 6371이기 때문이다.(지구가 둥글기 때문에 지역마다 값의 차이가 있는 것으로 보인다.)</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/13/online-css-image-sprites-generator/</id><title type="html">필요해서 만들어본 CSS Image Sprites 생성기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/13/online-css-image-sprites-generator/"/><published>2015-09-13T20:15:23+09:00</published><updated>2015-09-13T20:15:23+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="css" label="css" /><summary><![CDATA[웹 기반 프로그램 개발을 주업으로 하다보니 CSS에 관련된 작업도 많이 하게 된다. 게다가 웹 서비스 성능에 대해 고민을 많이 하게되는 것도 당연하다. 그중에서도 간혹 필요하지만 마땅한 도구가 없어 고민을 하게되던 것 중 하나가 CSS Image Sprite 도구다. 얼마전에도 비슷한 작업이 필요하게되어 온라인 도구들을 찾던 중 마땅한 것이 없어 필요에 의해 도구를 하나 만들어 버렸다. 일단 이 도구에 대해 설명하기 전에 CSS Image Sprite가 무엇인지 부터 알아보자. CSS Image Sprite 기법 간단하게 설명하자면 웹 페이지에서 필요한 이미지들을 한장의 이미지로 묶어 제작/배포하여 HTTP request를 줄임으로써 웹페이지 성능을 높이는 기법이다. 이 부분을 이해하기 위해서는 왜 HTTP request를 줄이는 것이 성능에 관련이 있는지를 알아야한다. 일반적으로 복잡한 웹페이지의 경우 페이지를 읽는데 수십에서 수백개의 request(CSS, JS, Image 등)가 발생한다. 이러한 페이지를 브라우저가 로딩할때 한꺼번에 모든 request를 처리하는 것이 아니라 순차적(보통 동시에 2~4개를 동시에 처리 : 브라우저마다 설정에 따라 다름)으로 처리함에 따라 이 수가 많다면 완료 시간이 늘어날 수 밖에 없다. 이와 관련된 자세한 내용은 얘기가 길어지므로 일단 이 정도만 설명하겠다. 조금 더 자세한 내용이 필요하다면 아래의 사이트를 참고하자. https://css-tricks.com/css-sprites/ http://alistapart.com/article/sprites http://windtale.net/blog/css-image-sprite-automation-with-grunt-spritesmith/ (한글) CSS Image Sprites 생성기 https://asamaru7.github.io/SpriteImageGenerator/ 또는 http://sprite.asamaru.net 으로 접속해서 사용할 수 있다. Github : https://github.com/asamaru7/SpriteImageGenerator (만들어서 나와 같은 필요을 느끼는 사람이 있을까 싶어 페이지도 개설할 겸 Github에 등록했다.) 그리고 만든 김에 크롬 익스텐션도 만들어 올렸다. 사실 그냥 바로가기 링크랑 기능이 동일하다. https://chrome.google.com/webstore/detail/sprite-image-generator/ckdkgoopenkcogopkfpehfcjkkhhofgo?utm_source=gmail 참고로 사이트는 내용이 크게 어려울 것이 없기 때문에 영어로 만들었다.(사실 영어 잘 못한다. 그래서 오탈자가 많을 수 있다.) 혹시나 다른 나라에서도 사용할까 싶어서 하긴 했는데 아직은 방문자가 거의 없다. 사실 이미 잘만들어진 많은 도구들이 있다. 하지만 굳이 새로 만든 이유는 Export 기능 때문이다. 보통 sprite image를 생성한 후에 사용된 작은 이미지들을 따로 관리하지 않아서 수정하거나 추가할 것이 생겼을 때 골치 아플 수 있다. 그래서 export 기능을 추가 했다. sprite.json 파일을 함께 export하는데 이 파일에서 생성시에 설정한 옵션과 원본 이미지들이 모두 포함되어 있어서 수정이 필요하면 이 파일만 import해서 수정할 수 있다. 나의 경우는 프로그램 소스에 함께 포함시켜 두고 관리한다. 특징 Retina/Normal sprites 동시 생성 가능 Drag and drop 파일 첨부 이미지 이름 변경 가능(CSS 클래스명에 사용됨) 이미지 이름별/사이즈별 정렬, drag and drop으로 직접 정렬 Support DataURL Export Export: Sprites 이미지 / 설정 파일 다운로드 설정 파일 Import 기능 : *.sprite.json File (향후 수정시 기존 export를 첨부하여 재작업 가능) 스크린샷]]></summary><content type="html"><![CDATA[<p>웹 기반 프로그램 개발을 주업으로 하다보니 CSS에 관련된 작업도 많이 하게 된다. 게다가 웹 서비스 성능에 대해 고민을 많이 하게되는 것도 당연하다.
그중에서도 간혹 필요하지만 마땅한 도구가 없어 고민을 하게되던 것 중 하나가 CSS Image Sprite 도구다.
얼마전에도 비슷한 작업이 필요하게되어 온라인 도구들을 찾던 중 마땅한 것이 없어 필요에 의해 도구를 하나 만들어 버렸다.</p>
<p>일단 이 도구에 대해 설명하기 전에 CSS Image Sprite가 무엇인지 부터 알아보자.</p>
<h2>CSS Image Sprite 기법</h2>
<p>간단하게 설명하자면 웹 페이지에서 필요한 이미지들을 한장의 이미지로 묶어 제작/배포하여 HTTP request를 줄임으로써 웹페이지 성능을 높이는 기법이다.
이 부분을 이해하기 위해서는 왜 HTTP request를 줄이는 것이 성능에 관련이 있는지를 알아야한다.
일반적으로 복잡한 웹페이지의 경우 페이지를 읽는데 수십에서 수백개의 request(CSS, JS, Image 등)가 발생한다. 이러한 페이지를 브라우저가 로딩할때 한꺼번에 모든 request를 처리하는 것이 아니라 순차적(보통 동시에 2~4개를 동시에 처리 : 브라우저마다 설정에 따라 다름)으로 처리함에 따라 이 수가 많다면 완료 시간이 늘어날 수 밖에 없다. 이와 관련된 자세한 내용은 얘기가 길어지므로 일단 이 정도만 설명하겠다. 조금 더 자세한 내용이 필요하다면 아래의 사이트를 참고하자.</p>
<ul>
<li><a href="https://css-tricks.com/css-sprites/">https://css-tricks.com/css-sprites/</a></li>
<li><a href="http://alistapart.com/article/sprites">http://alistapart.com/article/sprites</a></li>
<li><a href="http://windtale.net/blog/css-image-sprite-automation-with-grunt-spritesmith/">http://windtale.net/blog/css-image-sprite-automation-with-grunt-spritesmith/</a> (한글)</li>
</ul>
<h2>CSS Image Sprites 생성기</h2>
<p><a href="https://asamaru7.github.io/SpriteImageGenerator/">https://asamaru7.github.io/SpriteImageGenerator/</a>  또는  <a href="http://sprite.asamaru.net">http://sprite.asamaru.net</a>  으로 접속해서 사용할 수 있다.</p>
<p>Github :  <a href="https://github.com/asamaru7/SpriteImageGenerator">https://github.com/asamaru7/SpriteImageGenerator</a>
(만들어서 나와 같은 필요을 느끼는 사람이 있을까 싶어 페이지도 개설할 겸 Github에 등록했다.)</p>
<p>그리고 만든 김에 크롬 익스텐션도 만들어 올렸다. 사실 그냥 바로가기 링크랑 기능이 동일하다.</p>
<p><a href="https://chrome.google.com/webstore/detail/sprite-image-generator/ckdkgoopenkcogopkfpehfcjkkhhofgo?utm_source=gmail">https://chrome.google.com/webstore/detail/sprite-image-generator/ckdkgoopenkcogopkfpehfcjkkhhofgo?utm_source=gmail</a></p>
<p>참고로 사이트는 내용이 크게 어려울 것이 없기 때문에 영어로 만들었다.(사실 영어 잘 못한다. 그래서 오탈자가 많을 수 있다.) 혹시나 다른 나라에서도 사용할까 싶어서 하긴 했는데 아직은 방문자가 거의 없다.</p>
<p>사실 이미 잘만들어진 많은 도구들이 있다. 하지만 굳이 새로 만든 이유는 Export 기능 때문이다. 보통 sprite image를 생성한 후에 사용된 작은 이미지들을 따로 관리하지 않아서 수정하거나 추가할 것이 생겼을 때 골치 아플 수 있다. 그래서 export 기능을 추가 했다. sprite.json 파일을 함께 export하는데 이 파일에서 생성시에 설정한 옵션과 원본 이미지들이 모두 포함되어 있어서 수정이 필요하면 이 파일만 import해서 수정할 수 있다. 나의 경우는 프로그램 소스에 함께 포함시켜 두고 관리한다.</p>
<h3>특징</h3>
<ul>
<li>Retina/Normal sprites 동시 생성 가능</li>
<li>Drag and drop 파일 첨부</li>
<li>이미지 이름 변경 가능(CSS 클래스명에 사용됨)</li>
<li>이미지 이름별/사이즈별 정렬, drag and drop으로 직접 정렬</li>
<li>Support DataURL Export</li>
<li>Export: Sprites 이미지 / 설정 파일 다운로드</li>
<li>설정 파일 Import 기능 : *.sprite.json File (향후 수정시 기존 export를 첨부하여 재작업 가능)</li>
</ul>
<h3>스크린샷</h3>
<p><img src="https://blog.asamaru.net/res/img/post/2015-09-13-online-css-image-sprites-generator-1.png" alt="Sprite CSS Image Generator 설정" width="1052" height="1723" />
<img src="https://blog.asamaru.net/res/img/post/2015-09-13-online-css-image-sprites-generator-2.png" alt="Sprite CSS Image Generator 확인" width="1052" height="634" />
<img src="https://blog.asamaru.net/res/img/post/2015-09-13-online-css-image-sprites-generator-3.png" alt="Sprite CSS Image Generator 생성" width="1052" height="634" />
<img src="https://blog.asamaru.net/res/img/post/2015-09-13-online-css-image-sprites-generator-4.png" alt="Sprite CSS Image Generator 추출" width="1052" height="1913" /></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/11/using-sql-calc-found-rows-and-found-rows-with-mysql/</id><title type="html">MySql의 SQL_CALC_FOUND_ROWS와 FOUND_ROWS()</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/11/using-sql-calc-found-rows-and-found-rows-with-mysql/"/><published>2015-09-11T19:05:37+09:00</published><updated>2015-09-11T19:05:37+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="db" label="db" /><summary><![CDATA[MySql에는 SQL_CALC_FOUND_ROWS과 FOUND_ROWS() 라는 기능이 있다.일반적인 쿼리를 작성하는 상황에서는 크게 사용할 일이 없는 기능들이지만 알아두면 정말 유용하게 사용할 수 있다. 어디다 활용을 할지에 대해 보기 전에 각 기능이 무슨 역할을 하지는지부터 알아보자. 기본적인 동작은 mysqlkorea에 설명되어 있으니 참고하면 된다. SQL_CALC_FOUND_ROWS SQL_CALC_FOUND_ROWS는 SELECT 쿼리에 사용할 수 있는 MySQL 힌트로 쿼리 결과의 전체 row 수를 임시로 저장하게 합니다. 여기서 중요한 점은 row 수가 반환되는 row 수가 아니라 조건에 해당하는 전체 row 수를 가진다는 것이다. 따라서 LIMIT 0, 10을 지정하여 10개의 row만 가져온다고 하더라도 LIMIT이 없을 때의 쿼리 결과와 같은 row 수를 계산한다. 이 부분이 상당히 중요한 부분이다. 나중에 다시 설명하겠지만 LIMIT에 영향을 받지 않으므로 쿼리 성능을 떨어뜨릴 수 있다. FOUND_ROWS() FOUND_ROWS는 직전 쿼리에서 검색된 결과 row 수를 반환한다. 이해를 돕기위해 간단한 쿼리의 결과를 아래에 추가했으니 참고하면 바로 이해가 되리라 생각한다. mysql> SELECT * FROM article; ... ... mysql> SELECT FOUND_ROWS(); +--------------+ | FOUND_ROWS() | +--------------+ | 120 | +--------------+ 1 row in set (0.00 sec) mysql> SELECT * FROM article limit 10; ... ... mysql> SELECT FOUND_ROWS(); +--------------+ | FOUND_ROWS() | +--------------+ | 10 | +--------------+ 1 row in set (0.00 sec) mysql> SELECT FOUND_ROWS(); +--------------+ | FOUND_ROWS() | +--------------+ | 1 | +--------------+ 1 row in set (0.00 sec) 단, 여기서 주의할 것은 맨 마지막 결과다. "왜 10이 아닐까?" 하는 생각을 할 수 있으나 맨처음 적었듯이 "직전" 쿼리의 결과 row 수를 반환하기 때문에 1이 나오는 것이다.(이전 select FOUND_ROWS();의 결과 row 수 반환) SQL_CALC_FOUND_ROWS와 FOUND_ROWS()의 결합 각각의 기능을 확인했으니 둘이 만나면 어떻게 되는지 알아보자. 일단 아래의 쿼리 결과를 보자. mysql> SELECT SQL_CALC_FOUND_ROWS * FROM article limit 10; ... ... mysql> SELECT FOUND_ROWS(); +--------------+ | FOUND_ROWS() | +--------------+ | 120 | +--------------+ 1 row in set (0.00 sec) 이해가 되는가? 앞선 예시와 결과가 다르다. SQL_CALC_FOUND_ROWS가 없었다면 FOUND_ROWS()의 결과는 10이었을 것이다. 하지만 SQL_CALC_FOUND_ROWS에서 설명했던 것과 같이 SQL_CALC_FOUND_ROWS 힌트가 추가되면 limit은 무시되고 검색 조건에 해당하는 모든 row 수를 계산하기 때문에 FOUND_ROWS()의 결과가 120이 나오는 것이다. 활용 페이징 게시판 같은 서비스를 만들다보면 필수적으로 들어가는 기능이 페이징 기능이다. 일반적으로 페이징 처리를 위해서는 total row수가 필요한데 이를 처리하기 위해 동일 조건의 쿼리를 두번 사용하여 한번은 count(1), 한번은 필요한 필드를 넣어 쿼리한다. 보통은 대게 이렇게 개발해서 사용하고 크게 문제가 없다. 하지만 데이터의 양이 많거나 쿼리가 복잡해서 성능이 떨어지는 상황을 생각해보자. 예를들어 성능이 떨어지는 쿼리가 처리되는데 0.5초가 걸린다고 가정할 때 페이징을 위해 두번의 쿼리를 해야 한다면 쿼리에 소요되는 시간은 1초가 걸린다. 이 부분을 개선하기 위해 FOUND_ROWS()를 사용할 수 있다. 다시 일반적인 처리로 돌아가서 보면 count 쿼리를 해서 total row 수를 이용해 페이징을 한 후 limit을 지정해 데이터 쿼리를 질의하여 값을 돌려 받는다. 그럼 FOUND_ROWS()를 사용할 때는 어떻게 하는가? 데이터 쿼리를 먼저하되 SQL_CALC_FOUND_ROWS 힌트를 추가하여 질의한다. 그 다음 FOUND_ROWS()를 사용하여 total row 수를 가져와서 페이징 처리를 한다. 간단히 얘기해서 두 쿼리의 순서가 바뀐다. 당연한 얘기지만 빈번히 사용되는 쿼리라면 이렇게까지 성능이 떨어지기 전에 쿼리를 튜닝하고 설계를 변경하는 것이 옳다. 하지만 다양한 쿼리를 필요로 하는 프로그램을 만들다보면 모든 쿼리에 맞는 최적화를 하기는 어려우므로 이런 방법들을 적용하는 것이 필요할 수 있다. 주의 앞선 설명에서는 원리를 설명하기 위해 간단히 설명했지만 여기에서 중요한 부분이 빠져 있다. FOUND_ROWS가 모든 상황에 최적화되는 것은 아니라는 것이다. DB의 쿼리 성능에 관련해서는 변수와 고려해야할 사항이 워낙 많기 때문에 여기서 다 설명하기는 어렵고 중요한 부분만 설명하겠다. 서두에 SQL_CALC_FOUND_ROWS를 설명하면서 limit과 무관하게 동작함에 따라 성능이 떨어질 수 있다는 점을 적었다. 여기서 하고자하는 이야기의 중요한 부분이 이 부분이다. 쿼리가 index를 탈 수 있다면 limit 범위만 탐색하여 결과를 찾게되므로 쿼리 성능이 떨어지지 않는다. 그렇다면 "index를 타지 않는다면?" 어떤가? row들을 차례로 스캔하면서 조건을 검사해 limit 범위가 채워지면 스캔을 멈춘다. limit 0, 10을 지정했을 때를 가정하고 운이 좋아서 조건에 해당하는 데이터가 상위 10개에 속해 있다면 성능은 index를 타는 것과 거의 동일할 것이다. 반대로 데이터가 맨 마지막 10개라면 전체를 스캔하게 되므로 성능은 떨어질 것이다. 최선과 최악의 경우만 있는 것은 아니니 평균을 내자면 50% 정도를 스캔하면 결과를 얻을 수 있다는 결론을 얻는다.(실제론 맞지 않을 수 있다. 그냥 이론상 그렇다는 것이다.) 자 다시 SQL_CALC_FOUND_ROWS로 돌아가보면 SQL_CALC_FOUND_ROWS가 없다면 평균 50%만 스캔하면 끝날 쿼리를 SQL_CALC_FOUND_ROWS를 넣음으로 인해서 100%를 스캔하게 된다(전체 row수를 세어야 하므로). 따라서 성능이 떨어질 수 있다는 것이다. 그렇다면 "이걸 쓰지말아야 한다는 것인가?"라고 생각될 수 있다. 하지만 다음의 경우를 생각해보자. 앞서 설명에서 데이터를 스캔하는 과정에서는 정렬에 대한 문제를 제시하지 않았다. 그럼 정렬을 포함해보자. 정렬된 결과에서 10개를 가져와야 한다면, 게대가 정렬이 index에 의해 정렬이되지 않는다면... 결국은 정렬을 위해서 전체 스캔이 일어나고 heap 테이블이 만들어지고 정렬을 해야한다. 결론 결론은 위의 경우는 어짜피 100% 스캔이 일어난다는 것이다. 따라서 어짜피 100% 스캔을 두번 해야 할 상황이라면 SQL_CALC_FOUND_ROWS를 사용하여 1번으로 줄임으로써 쿼리 질의 시간을 절반으로 줄일 수 있다. 사실 쿼리라는 것이 검색 조건, 정렬, index 등등 여러가지 변수에 의해 성능이 천차만별로 달라질 수 있기 때문에 여기서 여러가지 경우를 예를들어 설명하기는 힘들다. 이런 내용으로만 정리해도 책이 몇권이다.(유명한 책중에 대용량 데이터베이스 솔루션이란 책이 있다. 이와 관련된 내용도 포함되어 있다.) 일부 사람들은 index를 타지 목하면 SQL_CALC_FOUND_ROWS를 사용하는게 낫다라고 하기도 한다. 위에 설명을 했듯이 index를 타지 못하더라도 전체 스캔을 하는 것보다 더 나은 상황이 만들어질 수 있는 경우는 많기 때문에 index를 타지 못하는 것만으로 SQL_CALC_FOUND_ROWS를 선택하는 것은 맞지 않다. 최종 결론은 어짜피 전체 스캔을 피할 수 없다면 이왕 스캔한 김에 row수를 세어두어서 count 쿼리를 위해 다시 성능을 죽이지는 말자는 것이다. Group By 결과 row 수 앞의 페이징에서 너무 긴 이야기를 했으므로 여기는 조금 간단히 하겠다. 어짜피 비슷한 얘기가 되므로. Group By 결과 row 수를 얻으려면 어떻게 해야할까? 간단할 듯 하지만 그리 간단하지는 않다.(내가 모르는 방법이 있다면 할 수 없고...) 가장 쉽게 접근하는 방법은 서브 쿼리를 사용하는 방법일 것이다. Group By 쿼리를 서브 쿼리로 넣어 count를 사용하는 방법. 대략 아래와 같다. mysql> select count(1) from (select count(1) as cnt from article group by apartmentIdx) APT; +----------+ | count(1) | +----------+ | 4 | +----------+ 1 row in set (0.00 sec) 다음은 distinct를 사용하는 방법이다. distinct에 대해서는 주제를 벗어나니 여기서는 생략. mysql> select count(distinct apartmentIdx) as cnt from article; +-----+ | cnt | +-----+ | 4 | +-----+ 1 row in set (0.00 sec) 그외에도 오라클이나 다른 DB에서는 또 다른 방법들도 있다. 그렇다 하더라도 group by를 한다는 것은 어짜피 전체를 스캔해서 결과를 얻는 과정(다른 조건에 의해 아닌 경우도 있을 수는 있다)을 거치므로 SQL_CALC_FOUND_ROWS를 사용하여 결과 row를 세어두는 것이 성능에 많은 도움을 줄 수 있다. 정리 그 외에도 여러가지 활용 방법이 있을 수 있으나 대표적인 사례만 나열했다. 다시 한번 강조하지만 이 방법은 만능이 아니다. 전체 스캔(Full Scan)을 피할 수 없는 상황에서 이왕 전체 스캔한거 count를 위해 다시 하지 않도록 활용하는 전략이 가장 적합하다. 또한 index를 타지 않는다고 무조건 full scan이 일어나지는 않는다. 이 부분에서 가장 중요한 것은 검색조건 보다 정렬이다. order by를 사용하지 않고 원하는 정렬이 되도록 설계한다면 full scan을 충분히 배제할 수 있다.(이 부분은 주제에서도 많이 벗어나고 설명하자면 얘기가 다시 무지하게 길어지므로 일단 패스.)]]></summary><content type="html"><![CDATA[<p>MySql에는 SQL_CALC_FOUND_ROWS과 FOUND_ROWS() 라는 기능이 있다.일반적인 쿼리를 작성하는 상황에서는 크게 사용할 일이 없는 기능들이지만 알아두면 정말 유용하게 사용할 수 있다.</p>
<p>어디다 활용을 할지에 대해 보기 전에 각 기능이 무슨 역할을 하지는지부터 알아보자.</p>
<p>기본적인 동작은 <a href="http://www.mysqlkorea.com/sub.html?mcode=develop&amp;scode=01&amp;lang=k&amp;m_no=21838&amp;cat1=12&amp;cat2=359&amp;cat3=374">mysqlkorea</a>에 설명되어 있으니 참고하면 된다.</p>
<h2>SQL_CALC_FOUND_ROWS</h2>
<p>SQL_CALC_FOUND_ROWS는 SELECT 쿼리에 사용할 수 있는 MySQL 힌트로 쿼리 결과의 전체 row 수를 임시로 저장하게 합니다. 여기서 중요한 점은 row 수가 반환되는 row 수가 아니라 조건에 해당하는 전체 row 수를 가진다는 것이다. 따라서 LIMIT 0, 10을 지정하여 10개의 row만 가져온다고 하더라도 LIMIT이 없을 때의 쿼리 결과와 같은 row 수를 계산한다.
이 부분이 상당히 중요한 부분이다. 나중에 다시 설명하겠지만 LIMIT에 영향을 받지 않으므로 쿼리 성능을 떨어뜨릴 수 있다.</p>
<h2>FOUND_ROWS()</h2>
<p>FOUND_ROWS는 직전 쿼리에서 검색된 결과 row 수를 반환한다. 이해를 돕기위해 간단한 쿼리의 결과를 아래에 추가했으니 참고하면 바로 이해가 되리라 생각한다.</p>
<pre class="hljs sql">mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> article;
...
...

mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">FOUND_ROWS</span>();
+<span class="hljs-comment">--------------+</span>
| FOUND_ROWS() |
+<span class="hljs-comment">--------------+</span>
|          120 |
+<span class="hljs-comment">--------------+</span>
1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)

mysql&gt; <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> article <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>;
...
...

mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">FOUND_ROWS</span>();
+<span class="hljs-comment">--------------+</span>
| FOUND_ROWS() |
+<span class="hljs-comment">--------------+</span>
|           10 |
+<span class="hljs-comment">--------------+</span>
1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)

mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">FOUND_ROWS</span>();
+<span class="hljs-comment">--------------+</span>
| FOUND_ROWS() |
+<span class="hljs-comment">--------------+</span>
|            1 |
+<span class="hljs-comment">--------------+</span>
1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</pre>
<p>단, 여기서 주의할 것은 맨 마지막 결과다. &quot;왜 10이 아닐까?&quot; 하는 생각을 할 수 있으나 맨처음 적었듯이 &quot;직전&quot; 쿼리의 결과 row 수를 반환하기 때문에 1이 나오는 것이다.(이전 <code>select FOUND_ROWS();</code>의 결과 row 수 반환)</p>
<h2>SQL_CALC_FOUND_ROWS와 FOUND_ROWS()의 결합</h2>
<p>각각의 기능을 확인했으니 둘이 만나면 어떻게 되는지 알아보자. 일단 아래의 쿼리 결과를 보자.</p>
<pre class="hljs sql">mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">SQL_CALC_FOUND_ROWS</span> * <span class="hljs-keyword">FROM</span> article <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>;
...
...

mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">FOUND_ROWS</span>();
+<span class="hljs-comment">--------------+</span>
| FOUND_ROWS() |
+<span class="hljs-comment">--------------+</span>
|          120 |
+<span class="hljs-comment">--------------+</span>
1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</pre>
<p>이해가 되는가? 앞선 예시와 결과가 다르다. SQL_CALC_FOUND_ROWS가 없었다면 FOUND_ROWS()의 결과는 10이었을 것이다. 하지만 SQL_CALC_FOUND_ROWS에서 설명했던 것과 같이 SQL_CALC_FOUND_ROWS 힌트가 추가되면 limit은 무시되고 검색 조건에 해당하는 모든 row 수를 계산하기 때문에 FOUND_ROWS()의 결과가 120이 나오는 것이다.</p>
<h2>활용</h2>
<h3>페이징</h3>
<p>게시판 같은 서비스를 만들다보면 필수적으로 들어가는 기능이 페이징 기능이다. 일반적으로 페이징 처리를 위해서는 total row수가 필요한데 이를 처리하기 위해 동일 조건의 쿼리를 두번 사용하여 한번은 count(1), 한번은 필요한 필드를 넣어 쿼리한다. 보통은 대게 이렇게 개발해서 사용하고 크게 문제가 없다.
하지만 데이터의 양이 많거나 쿼리가 복잡해서 성능이 떨어지는 상황을 생각해보자.
예를들어 성능이 떨어지는 쿼리가 처리되는데 0.5초가 걸린다고 가정할 때 페이징을 위해 두번의 쿼리를 해야 한다면 쿼리에 소요되는 시간은 1초가 걸린다. 이 부분을 개선하기 위해 FOUND_ROWS()를 사용할 수 있다.</p>
<p>다시 일반적인 처리로 돌아가서 보면 count 쿼리를 해서 total row 수를 이용해 페이징을 한 후 limit을 지정해 데이터 쿼리를 질의하여 값을 돌려 받는다.</p>
<p>그럼 FOUND_ROWS()를 사용할 때는 어떻게 하는가? 데이터 쿼리를 먼저하되 SQL_CALC_FOUND_ROWS 힌트를 추가하여 질의한다. 그 다음 FOUND_ROWS()를 사용하여 total row 수를 가져와서 페이징 처리를 한다. 간단히 얘기해서 두 쿼리의 순서가 바뀐다.</p>
<p>당연한 얘기지만 빈번히 사용되는 쿼리라면 이렇게까지 성능이 떨어지기 전에 쿼리를 튜닝하고 설계를 변경하는 것이 옳다. 하지만 다양한 쿼리를 필요로 하는 프로그램을 만들다보면 모든 쿼리에 맞는 최적화를 하기는 어려우므로 이런 방법들을 적용하는 것이 필요할 수 있다.</p>
<h4>주의</h4>
<p>앞선 설명에서는 원리를 설명하기 위해 간단히 설명했지만 여기에서 중요한 부분이 빠져 있다. FOUND_ROWS가 모든 상황에 최적화되는 것은 아니라는 것이다. DB의 쿼리 성능에 관련해서는 변수와 고려해야할 사항이 워낙 많기 때문에 여기서 다 설명하기는 어렵고 중요한 부분만 설명하겠다.</p>
<p>서두에 SQL_CALC_FOUND_ROWS를 설명하면서 limit과 무관하게 동작함에 따라 성능이 떨어질 수 있다는 점을 적었다. 여기서 하고자하는 이야기의 중요한 부분이 이 부분이다.</p>
<p>쿼리가 index를 탈 수 있다면 limit 범위만 탐색하여 결과를 찾게되므로 쿼리 성능이 떨어지지 않는다. 그렇다면 &quot;index를 타지 않는다면?&quot; 어떤가? row들을 차례로 스캔하면서 조건을 검사해 limit 범위가 채워지면 스캔을 멈춘다. limit 0, 10을 지정했을 때를 가정하고 운이 좋아서 조건에 해당하는 데이터가 상위 10개에 속해 있다면 성능은 index를 타는 것과 거의 동일할 것이다. 반대로 데이터가 맨 마지막 10개라면 전체를 스캔하게 되므로 성능은 떨어질 것이다. 최선과 최악의 경우만 있는 것은 아니니 평균을 내자면 50% 정도를 스캔하면 결과를 얻을 수 있다는 결론을 얻는다.(실제론 맞지 않을 수 있다. 그냥 이론상 그렇다는 것이다.)</p>
<p>자 다시 SQL_CALC_FOUND_ROWS로 돌아가보면 SQL_CALC_FOUND_ROWS가 없다면 평균 50%만 스캔하면 끝날 쿼리를 SQL_CALC_FOUND_ROWS를 넣음으로 인해서 100%를 스캔하게 된다(전체 row수를 세어야 하므로). 따라서 성능이 떨어질 수 있다는 것이다.</p>
<p>그렇다면 &quot;이걸 쓰지말아야 한다는 것인가?&quot;라고 생각될 수 있다. 하지만 다음의 경우를 생각해보자.
앞서 설명에서 데이터를 스캔하는 과정에서는 정렬에 대한 문제를 제시하지 않았다. 그럼 정렬을 포함해보자.
정렬된 결과에서 10개를 가져와야 한다면, 게대가 정렬이 index에 의해 정렬이되지 않는다면... 결국은 정렬을 위해서 전체 스캔이 일어나고 heap 테이블이 만들어지고 정렬을 해야한다.</p>
<h4>결론</h4>
<p>결론은 위의 경우는 어짜피 100% 스캔이 일어난다는 것이다. 따라서 어짜피 100% 스캔을 두번 해야 할 상황이라면 SQL_CALC_FOUND_ROWS를 사용하여 1번으로 줄임으로써 쿼리 질의 시간을 절반으로 줄일 수 있다.</p>
<p>사실 쿼리라는 것이 검색 조건, 정렬, index 등등 여러가지 변수에 의해 성능이 천차만별로 달라질 수 있기 때문에 여기서 여러가지 경우를 예를들어 설명하기는 힘들다. 이런 내용으로만 정리해도 책이 몇권이다.(유명한 책중에 대용량 데이터베이스 솔루션이란 책이 있다. 이와 관련된 내용도 포함되어 있다.)</p>
<p>일부 사람들은 index를 타지 목하면 SQL_CALC_FOUND_ROWS를 사용하는게 낫다라고 하기도 한다. 위에 설명을 했듯이 index를 타지 못하더라도 전체 스캔을 하는 것보다 더 나은 상황이 만들어질 수 있는 경우는 많기 때문에 index를 타지 못하는 것만으로 SQL_CALC_FOUND_ROWS를 선택하는 것은 맞지 않다.</p>
<p>최종 결론은 어짜피 전체 스캔을 피할 수 없다면 이왕 스캔한 김에 row수를 세어두어서 count 쿼리를 위해 다시 성능을 죽이지는 말자는 것이다.</p>
<h3>Group By 결과 row 수</h3>
<p>앞의 페이징에서 너무 긴 이야기를 했으므로 여기는 조금 간단히 하겠다. 어짜피 비슷한 얘기가 되므로.
Group By 결과 row 수를 얻으려면 어떻게 해야할까? 간단할 듯 하지만 그리 간단하지는 않다.(내가 모르는 방법이 있다면 할 수 없고...)</p>
<p>가장 쉽게 접근하는 방법은 서브 쿼리를 사용하는 방법일 것이다. Group By 쿼리를 서브 쿼리로 넣어 count를 사용하는 방법. 대략 아래와 같다.</p>
<pre class="hljs sql">mysql&gt; <span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> cnt <span class="hljs-keyword">from</span> article <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> apartmentIdx) APT;
+<span class="hljs-comment">----------+</span>
| count(1) |
+<span class="hljs-comment">----------+</span>
|        4 |
+<span class="hljs-comment">----------+</span>
1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</pre>
<p>다음은 distinct를 사용하는 방법이다. distinct에 대해서는 주제를 벗어나니 여기서는 생략.</p>
<pre class="hljs sql">mysql&gt; <span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(<span class="hljs-keyword">distinct</span> apartmentIdx) <span class="hljs-keyword">as</span> cnt <span class="hljs-keyword">from</span> article;
+<span class="hljs-comment">-----+</span>
| cnt |
+<span class="hljs-comment">-----+</span>
|   4 |
+<span class="hljs-comment">-----+</span>
1 row in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)</pre>
<p>그외에도 오라클이나 다른 DB에서는 또 다른 방법들도 있다.</p>
<p>그렇다 하더라도 group by를 한다는 것은 어짜피 전체를 스캔해서 결과를 얻는 과정(다른 조건에 의해 아닌 경우도 있을 수는 있다)을 거치므로 SQL_CALC_FOUND_ROWS를 사용하여 결과 row를 세어두는 것이 성능에 많은 도움을 줄 수 있다.</p>
<h2>정리</h2>
<p>그 외에도 여러가지 활용 방법이 있을 수 있으나 대표적인 사례만 나열했다. 다시 한번 강조하지만 이 방법은 만능이 아니다. 전체 스캔(Full Scan)을 피할 수 없는 상황에서 이왕 전체 스캔한거 count를 위해 다시 하지 않도록 활용하는 전략이 가장 적합하다.</p>
<p>또한 index를 타지 않는다고 무조건 full scan이 일어나지는 않는다. 이 부분에서 가장 중요한 것은 검색조건 보다 정렬이다. order by를 사용하지 않고 원하는 정렬이 되도록 설계한다면 full scan을 충분히 배제할 수 있다.(이 부분은 주제에서도 많이 벗어나고 설명하자면 얘기가 다시 무지하게 길어지므로 일단 패스.)</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/10/htmlspecialchars-decode-html-entity-decode-spaces/</id><title type="html">htmlspecialchars_decode와 html_entity_decode의 문자열 처리의 다른 점</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/10/htmlspecialchars-decode-html-entity-decode-spaces/"/><published>2015-09-10T14:27:01+09:00</published><updated>2017-01-25T10:18:01+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[php에서 html 구문을 그대로 출력하기 위해 htmlspecialchars를 사용한다. 반대로 출력된 문장(Special HTML entities)을 되돌리기 위해서는 일반적으로 htmlspecialchars_decode를 많이 사용한다. 그런데 이 함수를 사용하는데 문제가 있다. htmlspecialchars_decode는 &nbsp;를 공백으로 다시 되돌려 주지 않는다. 다시 htmlspecialchars로 돌아가서 메뉴얼을 보면 아래와 같이 변환된다고 설명되어 있다. '&'(앰퍼샌드)는 '&amp;'가 됩니다 '"'(겹따옴표)는 ENT_NOQUOTES를 설정하지 않았을 때 '&quot;'가 됩니다. '''(홑따옴표)는 ENT_QUOTES가 설정되었을 때만 '&#039;'가 됩니다. '<'(미만)은 '&lt;'가 됩니다. '>'(이상)은 '&gt;'가 됩니다. 보다시피 엄밀히 말하자면 htmlspecialchars는 공백을 변환시키지 않는다. 따라서 대응되는 함수인 htmlspecialchars_decode는 &nbsp; 공백 문자열을 되돌리지도 않는다. 그럼 &nbsp;와 같은 것은 어떻게 처리를 해야할까? html_entity_decode를 사용하면 된다. 이 함수는 htmlentities와 대응되는 함수이다. 그럼 htmlentities 함수는 무엇인가? 메뉴얼에 따르면 다음과 같다. htmlentities()는 HTML 문자 엔티티에 존재하는 모든 문자를 엔티티로 변환하는 점을 제외하면, htmlspecialchars()와 완전히 동일합니다. 중요한 부분은 모든 문자를 변환한다는 점이다. 이 부분이 htmlspecialchars와의 차이라고 한다. 정리하자면 htmlspecialchars와 htmlentities는 유사하나 htmlentities가 더 많은 문자를 변환한다. htmlspecialchars_decode와 html_entity_decode는 유사하나 html_entity_decode가 더 많은 문자를 되돌린다. 따라서 결론은 &nbsp;와 같은 문자열까지 모두 decode 하려면 html_entity_decode를 사용하면 된다. 주의 자.. 이렇게 해피앤딩이 되면 좋겠지만 몇가지 주의 사항이 있다. html_entity_decode 메뉴얼을 보면 다음과 같은 설명이 있다. You might wonder why trim(html_entity_decode('')); doesn't reduce the string to an empty string, that's because the '' entity is not ASCII code 32 (which is stripped by trim()) but ASCII code 160 (0xa0) in the default ISO 8859-1 encoding. 그렇다. html_entity_decode를 사용해서 &nbsp;를 변환하면 공백이 일반적인 공백과는 다른 공백이다. 이게 왜 문제가 되느냐? 아래의 예시를 보자. <?php $str = trim(html_entity_decode("&nbsp;X&nbsp;")); echo (strcmp($str, 'X') == 0) ? 'ok' : 'oops'; 쉽게 생각하면 'ok'가 나올것 같지만 위에 설명했던 것과 같이 'oops'가 나온다. 그럼 어떻게 해결을 해야할까? 메뉴얼에서 ASCII code 160 (0xa0)로 변경된다고 하니 이것을 참고해서 조금 고쳐보자. <?php $str = trim(str_replace("\xa0", "", html_entity_decode("&nbsp;X&nbsp;"))); echo (strcmp($str, 'X') == 0) ? 'ok' : 'oops'; 이제 해결이 되었을까? 아니다. 결과는 oops이다.(사실 default_charset에 따라 ok가 나올 수도 있다.) 이유는 위에 메뉴얼에 있다. 'default ISO 8859-1' 인코딩일 때 0xa0로 변환된다고 되어 있다. 사실 나의 환경은 'UTF-8'이다. 대부분 그럴 것이라고 생각한다. 일단 맞는지 확인해 보자. 아래와 같이 default_charset을 ISO-8859-1에 맞추고 실행해보자. <?php $str = trim(str_replace("\xa0", "", html_entity_decode(iconv('UTF-8', 'ISO-8859-1', "&nbsp;X&nbsp;")))); echo (strcmp($str, 'X') == 0) ? 'ok' : 'oops'; 결과는 메뉴얼대로 'ok' 이다. 그럼 'UTF-8'에서는 어떻게 하나? 아래의 코드를 보자. <?php $str = trim(str_replace("\xc2\xa0", '', html_entity_decode("&nbsp;X&nbsp;"))); echo (strcmp($str, 'X') == 0) ? 'ok' : 'oops'; 정규식으로 처리한다면 아래와 같이 할 수도 있다. <?php $str = trim(preg_replace('/[\\pZ\\pC]+/u', '', html_entity_decode("&nbsp;X&nbsp;"))); echo (strcmp($str, 'X') == 0) ? 'ok' : 'oops'; 드디어 'ok'가 나온다. 중요한 차이는 "\xc2\xa0" 이다. UTF-8에서는 "\xc2\xa0"는 UTF-8 encoding table and Unicode characters에서 확인해보면 UTF-8에서의 "NO-BREAK SPACE"라고 되어 있다. 참 별것 아닌것 같은 함수가 잘모르고 사용하다보면 예상치 못한 문제들을 일으킨다. 사실 &nbsp;만 처리하면 된다면 더 간단하게 str_replace('&nbsp;', ' ', $str)로 해결해도 된다. 하지만 프로그램에선 항상 어떤 값이 들어올지 모르는 것이니 보다 명확하게 처리하는 것이 낫지 않을까?]]></summary><content type="html"><![CDATA[<p>php에서 html 구문을 그대로 출력하기 위해 <a href="http://php.net/manual/kr/function.htmlspecialchars.php">htmlspecialchars</a>를 사용한다. 반대로 출력된 문장(Special HTML entities)을 되돌리기 위해서는 일반적으로 <a href="http://php.net/manual/kr/function.htmlspecialchars-decode.php">htmlspecialchars_decode</a>를 많이 사용한다. 그런데 이 함수를 사용하는데 문제가 있다.
<a href="http://php.net/manual/kr/function.htmlspecialchars-decode.php">htmlspecialchars_decode</a>는 <code>&amp;nbsp;</code>를 공백으로 다시 되돌려 주지 않는다.</p>
<p>다시 htmlspecialchars로 돌아가서 메뉴얼을 보면 아래와 같이 변환된다고 설명되어 있다.</p>
<ul>
<li>'&amp;'(앰퍼샌드)는 '<code>&amp;amp;</code>'가 됩니다</li>
<li>'&quot;'(겹따옴표)는 ENT_NOQUOTES를 설정하지 않았을 때 '<code>&amp;quot;</code>'가 됩니다.</li>
<li>'''(홑따옴표)는 ENT_QUOTES가 설정되었을 때만 '<code>&amp;#039;</code>'가 됩니다.</li>
<li>'&lt;'(미만)은 '<code>&amp;lt;</code>'가 됩니다.</li>
<li>'&gt;'(이상)은 '<code>&amp;gt;</code>'가 됩니다.</li>
</ul>
<p>보다시피 엄밀히 말하자면 htmlspecialchars는 공백을 변환시키지 않는다. 따라서 대응되는 함수인 htmlspecialchars_decode는 <code>&amp;nbsp;</code> 공백 문자열을 되돌리지도 않는다.</p>
<p>그럼 <code>&amp;nbsp;</code>와 같은 것은 어떻게 처리를 해야할까?
<a href="http://php.net/manual/en/function.html-entity-decode.php">html_entity_decode</a>를 사용하면 된다. 이 함수는 <a href="http://php.net/manual/kr/function.htmlentities.php">htmlentities</a>와 대응되는 함수이다.</p>
<p>그럼 htmlentities 함수는 무엇인가? 메뉴얼에 따르면 다음과 같다.</p>
<blockquote>
<p>htmlentities()는 HTML 문자 엔티티에 존재하는 모든 문자를 엔티티로 변환하는 점을 제외하면, htmlspecialchars()와 완전히 동일합니다.</p>
</blockquote>
<p>중요한 부분은 모든 문자를 변환한다는 점이다. 이 부분이 htmlspecialchars와의 차이라고 한다.</p>
<p>정리하자면</p>
<blockquote>
<p>htmlspecialchars와 htmlentities는 유사하나 htmlentities가 더 많은 문자를 변환한다.
htmlspecialchars_decode와 html_entity_decode는 유사하나 html_entity_decode가 더 많은 문자를 되돌린다.</p>
</blockquote>
<p>따라서 결론은 <code>&amp;nbsp;</code>와 같은 문자열까지 모두 decode 하려면 html_entity_decode를 사용하면 된다.</p>
<h2>주의</h2>
<p>자.. 이렇게 해피앤딩이 되면 좋겠지만 몇가지 주의 사항이 있다. html_entity_decode 메뉴얼을 보면 다음과 같은 설명이 있다.</p>
<blockquote>
<p>You might wonder why trim(html_entity_decode('&nbsp;')); doesn't reduce the string to an empty string, that's because the '&nbsp;' entity is not ASCII code 32 (which is stripped by trim()) but ASCII code 160 (0xa0) in the default ISO 8859-1 encoding.</p>
</blockquote>
<p>그렇다. html_entity_decode를 사용해서 <code>&amp;nbsp;</code>를 변환하면 공백이 일반적인 공백과는 다른 공백이다. 이게 왜 문제가 되느냐? 아래의 예시를 보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = trim(html_entity_decode(<span class="hljs-string">"&amp;nbsp;X&amp;nbsp;"</span>));
<span class="hljs-keyword">echo</span> (strcmp($str, <span class="hljs-string">'X'</span>) == <span class="hljs-number">0</span>) ? <span class="hljs-string">'ok'</span> : <span class="hljs-string">'oops'</span>;</pre>
<p>쉽게 생각하면 'ok'가 나올것 같지만 위에 설명했던 것과 같이 'oops'가 나온다. 그럼 어떻게 해결을 해야할까?</p>
<p>메뉴얼에서 <a href="http://www.asciitable.com/">ASCII</a> code 160 (0xa0)로 변경된다고 하니 이것을 참고해서 조금 고쳐보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = trim(str_replace(<span class="hljs-string">"\xa0"</span>, <span class="hljs-string">""</span>, html_entity_decode(<span class="hljs-string">"&amp;nbsp;X&amp;nbsp;"</span>)));
<span class="hljs-keyword">echo</span> (strcmp($str, <span class="hljs-string">'X'</span>) == <span class="hljs-number">0</span>) ? <span class="hljs-string">'ok'</span> : <span class="hljs-string">'oops'</span>;</pre>
<p>이제 해결이 되었을까? 아니다. 결과는 oops이다.(사실 default_charset에 따라 ok가 나올 수도 있다.) 이유는 위에 메뉴얼에 있다.
'default ISO 8859-1' 인코딩일 때 0xa0로 변환된다고 되어 있다. 사실 나의 환경은 'UTF-8'이다. 대부분 그럴 것이라고 생각한다. 일단 맞는지 확인해 보자. 아래와 같이 default_charset을 ISO-8859-1에 맞추고 실행해보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = trim(str_replace(<span class="hljs-string">"\xa0"</span>, <span class="hljs-string">""</span>, html_entity_decode(iconv(<span class="hljs-string">'UTF-8'</span>, <span class="hljs-string">'ISO-8859-1'</span>, <span class="hljs-string">"&amp;nbsp;X&amp;nbsp;"</span>))));
<span class="hljs-keyword">echo</span> (strcmp($str, <span class="hljs-string">'X'</span>) == <span class="hljs-number">0</span>) ? <span class="hljs-string">'ok'</span> : <span class="hljs-string">'oops'</span>;</pre>
<p>결과는 메뉴얼대로 'ok' 이다. 그럼 'UTF-8'에서는 어떻게 하나? 아래의 코드를 보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = trim(str_replace(<span class="hljs-string">"\xc2\xa0"</span>, <span class="hljs-string">''</span>, html_entity_decode(<span class="hljs-string">"&amp;nbsp;X&amp;nbsp;"</span>)));
<span class="hljs-keyword">echo</span> (strcmp($str, <span class="hljs-string">'X'</span>) == <span class="hljs-number">0</span>) ? <span class="hljs-string">'ok'</span> : <span class="hljs-string">'oops'</span>;</pre>
<p>정규식으로 처리한다면 아래와 같이 할 수도 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$str = trim(preg_replace(<span class="hljs-string">'/[\\pZ\\pC]+/u'</span>, <span class="hljs-string">''</span>, html_entity_decode(<span class="hljs-string">"&amp;nbsp;X&amp;nbsp;"</span>)));
<span class="hljs-keyword">echo</span> (strcmp($str, <span class="hljs-string">'X'</span>) == <span class="hljs-number">0</span>) ? <span class="hljs-string">'ok'</span> : <span class="hljs-string">'oops'</span>;</pre>
<p>드디어 'ok'가 나온다. 중요한 차이는 &quot;\xc2\xa0&quot; 이다. UTF-8에서는 &quot;\xc2\xa0&quot;는 <a href="http://www.utf8-chartable.de/unicode-utf8-table.pl?start=128&amp;number=128&amp;utf8=string-literal&amp;unicodeinhtml=hex">UTF-8 encoding table and Unicode characters</a>에서 확인해보면 UTF-8에서의 &quot;NO-BREAK SPACE&quot;라고 되어 있다.</p>
<p>참 별것 아닌것 같은 함수가 잘모르고 사용하다보면 예상치 못한 문제들을 일으킨다. 사실 <code>&amp;nbsp;</code>만 처리하면 된다면 더 간단하게 <code>str_replace('&amp;nbsp;', ' ', $str)</code>로 해결해도 된다. 하지만 프로그램에선 항상 어떤 값이 들어올지 모르는 것이니 보다 명확하게 처리하는 것이 낫지 않을까?</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/09/asynctask-init-problem/</id><title type="html">AsyncTask의 생성을 UIThread에서 하지 않으면 발생하는 문제 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/09/asynctask-init-problem/"/><published>2015-09-09T21:36:59+09:00</published><updated>2015-09-09T21:36:59+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[최근에 안드로이드의 앱 성능 개선에 관련하여 여러가지 자료를 확인중이다. 대표적인 것들이 memory leak에 관련된 문제와 thread 사용에 대한 것들이 있다. 오늘 하고자 하는 얘기는 이 thread 관련된 정보를 조사하다가 알게된 부분을 공유하고자 한다. 이 내용의 출처는 여기다. AsyncTask가 UI 스레드가 아닌 곳에서 처음으로 호출된다면 아래와 같은 에러스택이 발생할 수 있다고 한다. 이건 또 무슨 말도 안되는 소린가? 정말 안드로이드는 말도 안되는 이상한 현상들이 너무나도 많다. 하지만 위에 안내한 출처에서 명확한 원인과 해결 방법을 제시하고 있다. android.view.ViewRoot$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views. at android.view.ViewRoot.checkThread(ViewRoot.java:3011) at android.view.ViewRoot.requestLayout(ViewRoot.java:634) at android.view.View.requestLayout(View.java:8284) at android.view.View.setFlags(View.java:4658) at android.view.View.setVisibility(View.java:3133) at android.app.Dialog.hide(Dialog.java:254) Handler{40797d88} sending message to a Handler on a dead thread java.lang.RuntimeException: Handler{40797d88} sending message to a Handler on a dead thread at android.os.MessageQueue.enqueueMessage(MessageQueue.java:196) at android.os.Handler.sendMessageAtTime(Handler.java:457) at android.os.Handler.sendMessageDelayed(Handler.java:430) at android.os.Handler.sendMessage(Handler.java:367) at android.os.Message.sendToTarget(Message.java:349) at android.os.AsyncTask$3.done(AsyncTask.java:214) at java.util.concurrent.FutureTask$Sync.innerSet(FutureTask.java:253) at java.util.concurrent.FutureTask.set(FutureTask.java:113) at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:311) at java.util.concurrent.FutureTask.run(FutureTask.java:138) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1088) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:581) at java.lang.Thread.run(Thread.java:1019) 원인 AsyncTask 내에는 sHandler라는 static 멤버 변수가 있다고 해서 실제로 확인해 봤다. 현재 출처에서 밝힌 소스와는 조금 다르게 변경되어 있었다. sHandler는 앱에서 AsyncTask를 최초 선언한 순간 객체가 할당되고, UI작업을 처리하는 onPostExecute()가 호출될 때 사용된다고 설명되어 있었으나 설명과 다르게 선언시에는 아래와 같이 초기화를 하지 않도록 변경되었다. 대신 내부에서 getHandler() 함수가 처음 실행될 때 초기화 된다. private static final InternalHandler sHandler; ... private static Handler getHandler() { synchronized (AsyncTask.class) { if (sHandler == null) { sHandler = new InternalHandler(); } return sHandler; } } ... private static class InternalHandler extends Handler { ... } 앱을 실행하고 최초로 AsyncTask를 선언한 부분이 메인쓰레드가 아니라면 InternalHandler는 메인쓰레드가 아닌 쓰레드의 Handler를 가지고 있고 이 Handler로는 UI 작업을 하지 못하기 때문에 "android.view.ViewRoot$CalledFromWrongThreadException" 오류를 냅니다. 이 문제는 API Level 16미만 에서만 발생합니다. API Level 16이상에서는 메인스레드를 관리하는 ActivityThread 클래스가 시작할 때 main 메소드에서 static 메소드인 AsyncTask.init()을 호출하여 AsyncTask 클래스를 로드하고 있습니다. 관련 Commit은 다음 링크에서 확인하실 수 있습니다. https://github.com/android/platform_frameworks_base/commit/5e9120d4adfb07aeeadb0e0de1de2eb9ebbd80e0 이렇게 설명되어 있으나 위에 얘기한 것 처럼 현재는 다시 조금 변경되어 있었다. 정확히는 AsyncTask.init() 이 부분이 없다. init() 함수도 선언되어 있지 않다. 그렇다면 문제가 없는 것일까? 해서 다시 조금 찾아봤다. 이 부분에 대해서는 여기에서 설명하고 있었다. 내용을 보니 5.1이 나오면서 내부적 처리가 변경된 것으로 보인다. 그리고 설명대로라면 사용상의 변경은 크지 않으므로 역시 초기화 과정은 필요없다. 덤으로 위 사이트에서 안내된 내용 중에 아래의 내용도 있다. Threading rules There are a few threading rules that must be followed for this class to work properly: The AsyncTask class must be loaded on the UI thread. This is done automatically as of JELLY_BEAN. The task instance must be created on the UI thread. execute(Params...) must be invoked on the UI thread. Do not call onPreExecute(), onPostExecute(Result), doInBackground(Params...), onProgressUpdate(Progress...) manually. The task can be executed only once (an exception will be thrown if a second execution is attempted.) 해결 주저리 주저리 얘기가 많았는데 그래서 결론은 무엇인가? 젤리빈(API 16) 이상은 UIThread 내부에서 생성해야 한다는 제약사항 없이 어디서나 사용해도 무방하다. 그럼 그 이하는 어떻게 하나? 아래의 코드를 actiity 또는 application 시작 지점에 추가 한다. 메인스레드에서 단순히 클래스 로딩을 한번만 해도 AsyncTask내의 static 멤버 변수가 정상적으로 초기화된다고 한다. 그래서 난 appication class의 onCreate 함수 내부에 아래의 코드를 추가해 두었다. if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) { try { Class.forName("android.os.AsyncTask"); } catch (ClassNotFoundException e) { e.printStackTrace(); } }]]></summary><content type="html"><![CDATA[<p>최근에 안드로이드의 앱 성능 개선에 관련하여 여러가지 자료를 확인중이다. 대표적인 것들이 memory leak에 관련된 문제와 thread 사용에 대한 것들이 있다. 오늘 하고자 하는 얘기는 이 thread 관련된 정보를 조사하다가 알게된 부분을 공유하고자 한다.</p>
<p>이 내용의 출처는 <a href="https://gist.github.com/benelog/5954649">여기</a>다.</p>
<p>AsyncTask가 UI 스레드가 아닌 곳에서 처음으로 호출된다면 아래와 같은 에러스택이 발생할 수 있다고 한다. 이건 또 무슨 말도 안되는 소린가? 정말 안드로이드는 말도 안되는 이상한 현상들이 너무나도 많다. 하지만 위에 안내한 출처에서 명확한 원인과 해결 방법을 제시하고 있다.</p>
<pre><code>android.view.ViewRoot$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.
    at android.view.ViewRoot.checkThread(ViewRoot.java:3011)
    at android.view.ViewRoot.requestLayout(ViewRoot.java:634)
    at android.view.View.requestLayout(View.java:8284)
    at android.view.View.setFlags(View.java:4658)
    at android.view.View.setVisibility(View.java:3133)
    at android.app.Dialog.hide(Dialog.java:254)</code></pre>
<pre><code> Handler{40797d88} sending message to a Handler on a dead thread
 java.lang.RuntimeException: Handler{40797d88} sending message to a Handler on a dead thread
     at android.os.MessageQueue.enqueueMessage(MessageQueue.java:196)
     at android.os.Handler.sendMessageAtTime(Handler.java:457)
     at android.os.Handler.sendMessageDelayed(Handler.java:430)
     at android.os.Handler.sendMessage(Handler.java:367)
     at android.os.Message.sendToTarget(Message.java:349)
     at android.os.AsyncTask$3.done(AsyncTask.java:214)
     at java.util.concurrent.FutureTask$Sync.innerSet(FutureTask.java:253)
     at java.util.concurrent.FutureTask.set(FutureTask.java:113)
     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:311)
     at java.util.concurrent.FutureTask.run(FutureTask.java:138)
     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1088)
     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:581)
     at java.lang.Thread.run(Thread.java:1019)</code></pre>
<h2>원인</h2>
<p>AsyncTask 내에는 sHandler라는 static 멤버 변수가 있다고 해서 실제로 확인해 봤다. 현재 출처에서 밝힌 소스와는 조금 다르게 변경되어 있었다. sHandler는 앱에서 AsyncTask를 최초 선언한 순간 객체가 할당되고, UI작업을 처리하는 onPostExecute()가 호출될 때 사용된다고 설명되어 있었으나 설명과 다르게 선언시에는 아래와 같이 초기화를 하지 않도록 변경되었다. 대신 내부에서 getHandler() 함수가 처음 실행될 때 초기화 된다.</p>
<pre class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> InternalHandler sHandler;
...
<span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Handler <span class="hljs-title">getHandler</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">synchronized</span> (AsyncTask.class) {
        <span class="hljs-keyword">if</span> (sHandler == <span class="hljs-keyword">null</span>) {
            sHandler = <span class="hljs-keyword">new</span> InternalHandler();
        }
        <span class="hljs-keyword">return</span> sHandler;
    }
}
...
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InternalHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Handler</span> </span>{
     ...
}</pre>
<blockquote>
<p>앱을 실행하고 최초로 AsyncTask를 선언한 부분이 메인쓰레드가 아니라면 InternalHandler는 메인쓰레드가 아닌 쓰레드의 Handler를 가지고 있고 이 Handler로는 UI 작업을 하지 못하기 때문에 &quot;android.view.ViewRoot$CalledFromWrongThreadException&quot; 오류를 냅니다.</p>
<p>이 문제는 API Level 16미만 에서만 발생합니다. API Level 16이상에서는 메인스레드를 관리하는 ActivityThread 클래스가 시작할 때 main 메소드에서 static 메소드인 AsyncTask.init()을 호출하여 AsyncTask 클래스를 로드하고 있습니다. 관련 Commit은 다음 링크에서 확인하실 수 있습니다.</p>
<p><a href="https://github.com/android/platform_frameworks_base/commit/5e9120d4adfb07aeeadb0e0de1de2eb9ebbd80e0">https://github.com/android/platform_frameworks_base/commit/5e9120d4adfb07aeeadb0e0de1de2eb9ebbd80e0</a></p>
</blockquote>
<p>이렇게 설명되어 있으나 위에 얘기한 것 처럼 현재는 다시 조금 변경되어 있었다. 정확히는 AsyncTask.init() 이 부분이 없다. init() 함수도 선언되어 있지 않다.</p>
<p>그렇다면 문제가 없는 것일까? 해서 다시 조금 찾아봤다. 이 부분에 대해서는 <a href="http://sjava.net/?p=1570">여기</a>에서 설명하고 있었다.
내용을 보니 5.1이 나오면서 내부적 처리가 변경된 것으로 보인다. 그리고 설명대로라면 사용상의 변경은 크지 않으므로 역시 초기화 과정은 필요없다.</p>
<p>덤으로 위 사이트에서 안내된 내용 중에 아래의 내용도 있다.</p>
<h3>Threading rules</h3>
<blockquote>
<p>There are a few threading rules that must be followed for this class to work properly:</p>
</blockquote>
<ul>
<li>The AsyncTask class must be loaded on the UI thread. This is done automatically as of JELLY_BEAN.</li>
<li>The task instance must be created on the UI thread.</li>
<li>execute(Params...) must be invoked on the UI thread.</li>
<li>Do not call onPreExecute(), onPostExecute(Result), doInBackground(Params...), onProgressUpdate(Progress...) manually.</li>
<li>The task can be executed only once (an exception will be thrown if a second execution is attempted.)</li>
</ul>
<h2>해결</h2>
<p>주저리 주저리 얘기가 많았는데 그래서 결론은 무엇인가? 젤리빈(API 16) 이상은 UIThread 내부에서 생성해야 한다는 제약사항 없이 어디서나 사용해도 무방하다. 그럼 그 이하는 어떻게 하나?
아래의 코드를 actiity 또는 application 시작 지점에 추가 한다. 메인스레드에서 단순히 클래스 로딩을 한번만 해도 AsyncTask내의 static 멤버 변수가 정상적으로 초기화된다고 한다.
그래서 난 appication class의 onCreate 함수 내부에 아래의 코드를 추가해 두었다.</p>
<pre class="hljs java"><span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN) {
    <span class="hljs-keyword">try</span> {
        Class.forName(<span class="hljs-string">"android.os.AsyncTask"</span>);
    } <span class="hljs-keyword">catch</span> (ClassNotFoundException e) {
        e.printStackTrace();
    }
}</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/08/cleaner-view-casting-with-generics/</id><title type="html">안드로이드에서 findViewById 사용시 Generics을 이용해 Type Casting 없애기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/08/cleaner-view-casting-with-generics/"/><published>2015-09-08T22:27:15+09:00</published><updated>2015-09-08T22:27:15+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 작업을 하다보면 findViewById를 아주 빈번하게 사용하게 된다. 이 작업이 생각보다 귀찮다보니 "butterknife"나 "androidannotations" 같은 라이브러리를 사용하게 된다.(당연히 그 함수를 사용이 귀찮다는 이유만은 아니지만) 아래의 방법은 저런 라이브러리를 사용할 때만큼 여러가지 일을 할 수는 없지만 findViewById를 사용함에 가장 귀찮은 작업인 View Type Casting을 하지 않아도 된다. 우린 일반적으로 아래와 같은 방식으로 함수를 사용한다. TextView textView = (TextView) findViewById(R.id.textview); 이를 개선하기 위해 아래의 함수 하나를 추가한다. 어디든 상관 없이 사용하고자 하는 클래스의 내부에 넣는다. 사실 사용시마다 이 함수를 추가하는 작업이 더 귀찮을 수 있다. 그래서 난 기본 Activity와 Fragment 안에 넣어두고 사용한다. (난 여러가지 이유로 작업시 base activity, fragment를 만들어 두고 실제 작업시 상속받아 사용한다. 이렇게하면 이번 경우와 같이 유틸성 함수를 함께 쓰기도 좋고 제어하기도 좋기 때문이다.) @SuppressWarnings("unchecked") public final <E extends View> E findView (int id) { return (E) findViewById(id); } 그리고 아래와 같이 사용할 수 있다. TextView textView = findView(R.id.textview); Button button = findView(R.id.button); ImageView image = findView(R.id.imageview); 사실 별차이 아니다. 하지만 작업 해본 사람은 안다. Type Casting을 일일이 넣는게 얼마나 귀찮은지.]]></summary><content type="html"><![CDATA[<p>안드로이드 작업을 하다보면 findViewById를 아주 빈번하게 사용하게 된다. 이 작업이 생각보다 귀찮다보니 &quot;<a href="http://jakewharton.github.io/butterknife/">butterknife</a>&quot;나 &quot;<a href="http://androidannotations.org/">androidannotations</a>&quot; 같은 라이브러리를 사용하게 된다.(당연히 그 함수를 사용이 귀찮다는 이유만은 아니지만)</p>
<p>아래의 방법은 저런 라이브러리를 사용할 때만큼 여러가지 일을 할 수는 없지만 findViewById를 사용함에 가장 귀찮은 작업인 View Type Casting을 하지 않아도 된다.</p>
<p>우린 일반적으로 아래와 같은 방식으로 함수를 사용한다.</p>
<pre class="hljs java">TextView textView = (TextView) findViewById(R.id.textview);</pre>
<p>이를 개선하기 위해 아래의 함수 하나를 추가한다. 어디든 상관 없이 사용하고자 하는 클래스의 내부에 넣는다. 사실 사용시마다 이 함수를 추가하는 작업이 더 귀찮을 수 있다. 그래서 난 기본 Activity와 Fragment 안에 넣어두고 사용한다. (난 여러가지 이유로 작업시 base activity, fragment를 만들어 두고 실제 작업시 상속받아 사용한다. 이렇게하면 이번 경우와 같이 유틸성 함수를 함께 쓰기도 좋고 제어하기도 좋기 때문이다.)</p>
<pre class="hljs java"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"unchecked"</span>)
<span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> &lt;E extends View&gt; <span class="hljs-function">E <span class="hljs-title">findView</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>{
    <span class="hljs-keyword">return</span> (E) findViewById(id);
}</pre>
<p>그리고 아래와 같이 사용할 수 있다.</p>
<pre class="hljs java">TextView textView = findView(R.id.textview);
Button button = findView(R.id.button);
ImageView image = findView(R.id.imageview);</pre>
<p>사실 별차이 아니다. 하지만 작업 해본 사람은 안다. Type Casting을 일일이 넣는게 얼마나 귀찮은지.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/07/android-run-slash-install-slash-debug-applications-over-wifi/</id><title type="html">안드로이드 스튜디오에서 WIFI로 Run/Install/Debug 하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/07/android-run-slash-install-slash-debug-applications-over-wifi/"/><published>2015-09-07T20:43:33+09:00</published><updated>2015-09-07T20:43:33+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[이제 안드로이드 개발을 시작한지 6개월 가량 된 것 같다. 나이 주 개발 영역은 웹이다. 프론드/백엔드, 서버 등등 웹에 관련된 일을 주로하며 예전엔 아이폰 개발도 일부 했었다. 하지만 회사 업무로 인해 안드로이드를 시작하게 되었고 6개월이나 했음에도 아직 초보를 벗어나지 못한 것 같다. 불필요한 사설이 길었지만 6개월간 왜 불편함을 그냥 당연하게 생각하고 작업을 했는지 안타깝다. 어제는 불현듯 책생 위에 널브러져 케이블들을 보며 이걸 없앨 수 없나? 라는 생각이 들었다. 내 책상 위에는 아이폰이 3개, 안드로이드 폰이 2개, 충전선 등이 있다. 굳이 다 필요하진 않지만... 그래서 찾아봤다. 안드로이드 빌드 후 실행을 케이블 없이 할 수 있는가? 결과는 있다. 아 왜 진작 찾아보지 않았던가? 사실은 선 정리보다 더 중요한 문제가 있었다. 안드로이드 연결 케이블이 불안정한 것이다. adb에 붙었다 떨어졌다 하는 현상이 사용하는 케이블에 따라 상태가 천차만별이었다. 정말 안드로이드는 맘에 안든다. 이제 정말 각설하고 본론을... 일단 이 방법에서의 최대 단점은 최초 연결시에는 USB 케이블이 필요하다는 것이다. 그리고 같은 망으로 연결되어야 한다는 점. 1. 일단 기존처럼 USB로 안드로이드폰을 연결한다. 2. Shell을 열어 기기가 연결된 것을 확인한다. (사실 이 단계는 확인단계로 그냥 건너뛰어도 된다.) $ adb devices -l List of devices attached 6a1d4134 device usb:4245815296X product:hltelgt model:SM_N900L device:hltelgt 3. 연결된 기기의 IP를 확인한다. adb shell 실행 후 shell이 뜨면 netcfg 입력. exit로 종료. $ adb shell shell@hltelgt:/ $ netcfg rev_rmnet1 DOWN 0.0.0.0/0 0x00001002 2e:80:5c:86:19:5f ... sit0 DOWN 0.0.0.0/0 0x00000080 00:00:00:00:00:00 p2p0 UP 0.0.0.0/0 0x00001003 ca:14:79:ea:48:5f lo UP 127.0.0.1/8 0x00000049 00:00:00:00:00:00 wlan0 UP 192.168.219.101/24 0x00001043 c8:14:79:ea:48:5f shell@hltelgt:/ $ exit 4. adb를 통해 포트 5555(원하는 포트)로 변경한다. $ adb tcpip 5555 5. 기기 IP를 통해서 연결 $ adb connect <DEVICE_IP_ADDRESS>:5555 끝이다. 이제는 USB에서 기기를 분리해도 된다. 이제부터는 안드로이드 스튜디오에서 빌드를 하고 실행하려고 하면 원격으로 연결된 기기가 뜬다. 아직 많이 써보진 않았지만 아무래도 직접 USB로 연결한 것 보다는 조금 느린 것 같긴하다. 하지만 계속 선으로 연결하지 않아도 된다는 것으로 만족. 마지막으로 리모트 연결을 다시 USB 연결로 바꾸는 방법 adb -s <DEVICE_IP_ADDRESS>:5555 usb]]></summary><content type="html"><![CDATA[<p>이제 안드로이드 개발을 시작한지 6개월 가량 된 것 같다. 나이 주 개발 영역은 웹이다. 프론드/백엔드, 서버 등등 웹에 관련된 일을 주로하며 예전엔 아이폰 개발도 일부 했었다. 하지만 회사 업무로 인해 안드로이드를 시작하게 되었고 6개월이나 했음에도 아직 초보를 벗어나지 못한 것 같다. 불필요한 사설이 길었지만 6개월간 왜 불편함을 그냥 당연하게 생각하고 작업을 했는지 안타깝다.</p>
<p>어제는 불현듯 책생 위에 널브러져 케이블들을 보며 이걸 없앨 수 없나? 라는 생각이 들었다. 내 책상 위에는 아이폰이 3개, 안드로이드 폰이 2개, 충전선 등이 있다. 굳이 다 필요하진 않지만...
그래서 찾아봤다. 안드로이드 빌드 후 실행을 케이블 없이 할 수 있는가? 결과는 있다. 아 왜 진작 찾아보지 않았던가? 사실은 선 정리보다 더 중요한 문제가 있었다. 안드로이드 연결 케이블이 불안정한 것이다. adb에 붙었다 떨어졌다 하는 현상이 사용하는 케이블에 따라 상태가 천차만별이었다. 정말 안드로이드는 맘에 안든다.</p>
<p>이제 정말 각설하고 본론을...</p>
<p>일단 이 방법에서의 최대 단점은 최초 연결시에는 USB 케이블이 필요하다는 것이다. 그리고 같은 망으로 연결되어야 한다는 점.</p>
<h3>1. 일단 기존처럼 USB로 안드로이드폰을 연결한다.</h3>
<h3>2. Shell을 열어 기기가 연결된 것을 확인한다. (사실 이 단계는 확인단계로 그냥 건너뛰어도 된다.)</h3>
<pre class="hljs bash">$ adb devices -l

List of devices attached
6a1d4134               device usb:4245815296X product:hltelgt model:SM_N900L device:hltelgt</pre>
<h3>3. 연결된 기기의 IP를 확인한다. adb shell 실행 후 shell이 뜨면 netcfg 입력. exit로 종료.</h3>
<pre class="hljs bash">$ adb shell

shell@hltelgt:/ $ netcfg

rev_rmnet1 DOWN                                   0.0.0.0/0   0x00001002 2e:80:5c:86:19:5f
...
sit0     DOWN                                   0.0.0.0/0   0x00000080 00:00:00:00:00:00
p2p0     UP                                     0.0.0.0/0   0x00001003 ca:14:79:ea:48:5f
lo       UP                                   127.0.0.1/8   0x00000049 00:00:00:00:00:00
wlan0    UP                             192.168.219.101/24  0x00001043 c8:14:79:ea:48:5f

shell@hltelgt:/ $ <span class="hljs-built_in">exit</span></pre>
<h3>4. adb를 통해 포트 5555(원하는 포트)로 변경한다.</h3>
<pre class="hljs bash">$ adb tcpip 5555</pre>
<h3>5. 기기 IP를 통해서 연결</h3>
<pre class="hljs bash">$ adb connect &lt;DEVICE_IP_ADDRESS&gt;:5555</pre>
<p>끝이다. 이제는 USB에서 기기를 분리해도 된다.
이제부터는 안드로이드 스튜디오에서 빌드를 하고 실행하려고 하면 원격으로 연결된 기기가 뜬다.</p>
<p>아직 많이 써보진 않았지만 아무래도 직접 USB로 연결한 것 보다는 조금 느린 것 같긴하다. 하지만 계속 선으로 연결하지 않아도 된다는 것으로 만족.</p>
<p>마지막으로 리모트 연결을 다시 USB 연결로 바꾸는 방법</p>
<pre class="hljs bash">adb -s &lt;DEVICE_IP_ADDRESS&gt;:5555 usb</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/05/octopress-google-translate/</id><title type="html">옥토프레스에 구글 번역기 달기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/05/octopress-google-translate/"/><published>2015-09-05T06:47:14+09:00</published><updated>2015-09-05T06:47:14+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="octopress" label="octopress" /><summary><![CDATA[구글에서는 웹사이트에 여러가지 언어로 번역해서 보여줄 수 있는 기능을 제공해 준다. 이 블로그에 한국어가 아닌 다른 언어를 사용하는 사람이 누가 오겠냐만은 이 블로그는 여러가지 실험을 하기 위한 블로그이므로 구글 번역기도 달아봤다. 생각보다 간단하다. 구글 번역 스크립트 생성 http://translate.google.com/manager/website/ "웹사이트에 지금 추가"를 눌러 다음으로. 번역기를 넣을 웹사이트 주소를 입력하고 언어 선택 후 다음. 원하는 옵션을 선택하고 다음. 번역 스크립트 완성. 이제 이 스크립트를 복사해서 원하는 곳에 넣으면 끝이다. 옥토프레스에 추가 옥토프레스에 추가하는 방법은 템플릿 html 어딘가에(노출을 원하는 위치) 넣으면 끝이다. 맨 상단 메뉴에 넣고 싶다면 source/_includes/navigation.html 파일 내부에 원하는 곳에 넣으면 된다. 당연히 하단, 본문 등 원하는 곳에 그냥 넣으면 끝이다. 하지만. 난 우측 aside 영역에 넣기로 했다. 그리고 그냥 넣지않고 파일을 분리하기로 했다. 플러그인 처럼. vi source/_includes/custom/asides/google_translate.html 우선 google_translate.html을 열어 구글에서 제공해준 스크립트를 넣는다. vi _config.yml _config.yml 파일을 열어 아래처럼 default_asides 항목에 생성한 파일을 넣어준다.(원하는 순서에) default_asides: [custom/asides/google_translate.html, ...] 이것으로 끝. 확인을 위해 rake generate rake deploy]]></summary><content type="html"><![CDATA[<p>구글에서는 웹사이트에 여러가지 언어로 번역해서 보여줄 수 있는 기능을 제공해 준다.
이 블로그에 한국어가 아닌 다른 언어를 사용하는 사람이 누가 오겠냐만은 이 블로그는 여러가지 실험을 하기 위한 블로그이므로 구글 번역기도 달아봤다. 생각보다 간단하다.</p>
<h2>구글 번역 스크립트 생성</h2>
<p><a href="http://translate.google.com/manager/website/">http://translate.google.com/manager/website/</a></p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-09-05-octopress-google-translate-1.png" alt="웹사이트에 지금 추가" title="웹사이트에 지금 추가" width="794" height="440" /></p>
<p>&quot;웹사이트에 지금 추가&quot;를 눌러 다음으로.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-09-05-octopress-google-translate-2.png" alt="웹사이트 정보" width="494" height="511" /></p>
<p>번역기를 넣을 웹사이트 주소를 입력하고 언어 선택 후 다음.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-09-05-octopress-google-translate-3.png" alt="플러그인 설정" width="513" height="634" /></p>
<p>원하는 옵션을 선택하고 다음.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2015-09-05-octopress-google-translate-4.png" alt="플러그인 추가" width="607" height="625" /></p>
<p>번역 스크립트 완성. 이제 이 스크립트를 복사해서 원하는 곳에 넣으면 끝이다.</p>
<h2>옥토프레스에 추가</h2>
<p>옥토프레스에 추가하는 방법은 템플릿 html 어딘가에(노출을 원하는 위치) 넣으면 끝이다.
맨 상단 메뉴에 넣고 싶다면 source/_includes/navigation.html 파일 내부에 원하는 곳에 넣으면 된다. 당연히 하단, 본문 등 원하는 곳에 그냥 넣으면 끝이다.</p>
<p>하지만. 난 우측 aside 영역에 넣기로 했다. 그리고 그냥 넣지않고 파일을 분리하기로 했다. 플러그인 처럼.</p>
<pre class="hljs bash">vi <span class="hljs-built_in">source</span>/_includes/custom/asides/google_translate.html</pre>
<p>우선 google_translate.html을 열어 구글에서 제공해준 스크립트를 넣는다.</p>
<pre class="hljs bash">vi _config.yml</pre>
<p>_config.yml 파일을 열어 아래처럼 default_asides 항목에 생성한 파일을 넣어준다.(원하는 순서에)</p>
<pre class="hljs ruby"><span class="hljs-symbol">default_asides:</span> [custom/asides/google_translate.html, ...]</pre>
<p>이것으로 끝.</p>
<p>확인을 위해</p>
<pre class="hljs bash">rake generate
rake deploy</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/04/android-dialog-windowmanager-badtokenexception/</id><title type="html">안드로이드에서 Dialog 사용시 WindowManager$BadTokenException 발생</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/04/android-dialog-windowmanager-badtokenexception/"/><published>2015-09-04T20:49:21+09:00</published><updated>2015-09-04T20:49:21+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서는 거의 모든 작업에 context를 사용한다. 그런데 이 context는 크게 application contet와 activity context가 있다. 문제는 사용시에 구분해서 사용하지 않는다는 것이다. 명시적으로 특정 context를 요구하지 않는다. 이로 인해 많은 혼란이 있고 crash도 많이 발생한다. 사실 오류를 줄이려면 가능한한 activity context를 사용하는 것이 좋다.(경험상...) 하지만 안드로이드에서는 가급적 application context를 사용하기를 권장한다. 가장 대표적인 이유는 메모리릭 때문이다. 메모리릭에 대한 문제는 context의 종류에 직접적인 관련이 있는 것은 아니나 activity 내부에서 객체를 생성하면서 자신을 context로 넘겨줄 경우 순환참조 등의 이유로 객체가 소멸하지 못할 수 있다. 메모리릭 문제는 상상보다 더 다양한 경우에 발생하는데 여기서 논하고자하는 범위를 벋어나니 일단 넘어가자. 사실 검색해 보면 많은 자료가 있다. 어쨌든 생성된 객체가 죽지 못한다면 activity도 소멸하지 못하므로 대량의 메모리 점유를 경험하게 될 수 있다. 당연히 앱이 크지 않다면 OOM(Out Of Memory)을 쉽게 만나지는 않을 것이다. 사설이 길었는데 어쨌든 이러한 이유로 나는 가급적 application context를 사용하려고 한다. 문제는 여기서 시작되었다. 기존에 WebView를 생성할 때는 activity를 넘겨주었었다. 이 코드를 얼마전 확인하고 application context로 변경했다. 그리고 빌드, 실행. 문제가 없었다. 잘 나왔다. 안심했다. 그런데 오늘 동료 직원이 이상한 부분이 있다고 확인을 요청했다. WebView 내부에 있는 select box를 터치하면 앱이 죽는다. 처음엔 뭔가 했다. 그런데 오류를 확인하니 다음과 같았다. W/System.err﹕ android.view.WindowManager$BadTokenException: Unable to add window -- token null is not for an application W/System.err﹕ at android.view.ViewRootImpl.setView(ViewRootImpl.java:691) W/System.err﹕ at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:288) W/System.err﹕ at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:69) W/System.err﹕ at android.app.Dialog.show(Dialog.java:312) W/System.err﹕ at org.chromium.content.browser.input.SelectPopupDialog.show(SelectPopupDialog.java:133) W/System.err﹕ at org.chromium.content.browser.ContentViewCore.showSelectPopup(ContentViewCore.java:2437) W/System.err﹕ at org.chromium.base.SystemMessageHandler.nativeDoRunLoopOnce(Native Method) W/System.err﹕ at org.chromium.base.SystemMessageHandler.handleMessage(SystemMessageHandler.java:53) W/System.err﹕ at android.os.Handler.dispatchMessage(Handler.java:102) W/System.err﹕ at android.os.Looper.loop(Looper.java:145) W/System.err﹕ at android.app.ActivityThread.main(ActivityThread.java:5942) W/System.err﹕ at java.lang.reflect.Method.invoke(Native Method) W/System.err﹕ at java.lang.reflect.Method.invoke(Method.java:372) W/System.err﹕ at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1399) 이런 Dialog를 생성하려는 시점에서 context가 적절하지 못하다. 그렇다. WebView에서 select box를 선택하면 앱의 경우는 선택 dialog가 자동으로 뜬다. 이때 이 dialog를 생성할 때 WebView 생성시 넣어 줬던 context를 사용하는 것이다. 아... 그럼 처음부터 application context를 넣지 못하도록 하던지... 정말 안드로이드는 누가 설계 했는지 너무 엉망이다. UIThread 문제, Network Main Thread 문제.. 등등 상식적으로 해결 방법이 있을 법한데 모두 개발자가 알아서 하란다. 이런... 어쨌든 Dialog 생성시에는 activity context를 사용해야 한다. 일반 dialog는 테스트시에 바로 표시가 나니 금방 고칠 수 있지만 이런 경우는 참 난해하다. 결론은 WebView 생성시에는 activity context를 넣자.]]></summary><content type="html"><![CDATA[<p>안드로이드에서는 거의 모든 작업에 context를 사용한다. 그런데 이 context는 크게 application contet와 activity context가 있다. 문제는 사용시에 구분해서 사용하지 않는다는 것이다. 명시적으로 특정 context를 요구하지 않는다. 이로 인해 많은 혼란이 있고 crash도 많이 발생한다.</p>
<p>사실 오류를 줄이려면 가능한한 activity context를 사용하는 것이 좋다.(경험상...) 하지만 안드로이드에서는 가급적 application context를 사용하기를 권장한다.</p>
<p>가장 대표적인 이유는 메모리릭 때문이다. 메모리릭에 대한 문제는 context의 종류에 직접적인 관련이 있는 것은 아니나 activity 내부에서 객체를 생성하면서 자신을 context로 넘겨줄 경우 순환참조 등의 이유로 객체가 소멸하지 못할 수 있다. 메모리릭 문제는 상상보다 더 다양한 경우에 발생하는데 여기서 논하고자하는 범위를 벋어나니 일단 넘어가자. 사실 검색해 보면 많은 자료가 있다.
어쨌든 생성된 객체가 죽지 못한다면 activity도 소멸하지 못하므로 대량의 메모리 점유를 경험하게 될 수 있다. 당연히 앱이 크지 않다면 OOM(Out Of Memory)을 쉽게 만나지는 않을 것이다.
사설이 길었는데 어쨌든 이러한 이유로 나는 가급적 application context를 사용하려고 한다.
문제는 여기서 시작되었다.</p>
<p>기존에 WebView를 생성할 때는 activity를 넘겨주었었다. 이 코드를 얼마전 확인하고 application context로 변경했다. 그리고 빌드, 실행. 문제가 없었다. 잘 나왔다. 안심했다.</p>
<p>그런데 오늘 동료 직원이 이상한 부분이 있다고 확인을 요청했다.</p>
<blockquote>
<p>WebView 내부에 있는 select box를 터치하면 앱이 죽는다.</p>
</blockquote>
<p>처음엔 뭔가 했다. 그런데 오류를 확인하니 다음과 같았다.</p>
<pre><code>W/System.err﹕ android.view.WindowManager$BadTokenException: Unable to add window -- token null is not for an application
W/System.err﹕ at android.view.ViewRootImpl.setView(ViewRootImpl.java:691)
W/System.err﹕ at android.view.WindowManagerGlobal.addView(WindowManagerGlobal.java:288)
W/System.err﹕ at android.view.WindowManagerImpl.addView(WindowManagerImpl.java:69)
W/System.err﹕ at android.app.Dialog.show(Dialog.java:312)
W/System.err﹕ at org.chromium.content.browser.input.SelectPopupDialog.show(SelectPopupDialog.java:133)
W/System.err﹕ at org.chromium.content.browser.ContentViewCore.showSelectPopup(ContentViewCore.java:2437)
W/System.err﹕ at org.chromium.base.SystemMessageHandler.nativeDoRunLoopOnce(Native Method)
W/System.err﹕ at org.chromium.base.SystemMessageHandler.handleMessage(SystemMessageHandler.java:53)
W/System.err﹕ at android.os.Handler.dispatchMessage(Handler.java:102)
W/System.err﹕ at android.os.Looper.loop(Looper.java:145)
W/System.err﹕ at android.app.ActivityThread.main(ActivityThread.java:5942)
W/System.err﹕ at java.lang.reflect.Method.invoke(Native Method)
W/System.err﹕ at java.lang.reflect.Method.invoke(Method.java:372)
W/System.err﹕ at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1399)</code></pre>
<p>이런 Dialog를 생성하려는 시점에서 context가 적절하지 못하다. 그렇다. WebView에서 select box를 선택하면 앱의 경우는 선택 dialog가 자동으로 뜬다. 이때 이 dialog를 생성할 때 WebView 생성시 넣어 줬던 context를 사용하는 것이다.</p>
<p>아... 그럼 처음부터 application context를 넣지 못하도록 하던지... 정말 안드로이드는 누가 설계 했는지 너무 엉망이다. UIThread 문제, Network Main Thread 문제.. 등등 상식적으로 해결 방법이 있을 법한데 모두 개발자가 알아서 하란다. 이런...</p>
<p>어쨌든 Dialog 생성시에는 activity context를 사용해야 한다. 일반 dialog는 테스트시에 바로 표시가 나니 금방 고칠 수 있지만 이런 경우는 참 난해하다.</p>
<p>결론은 WebView 생성시에는 activity context를 넣자.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/04/android-view-dot-islaidout-and-view-dot-post/</id><title type="html">안드로이드 View.isLaidOut / View.post</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/04/android-view-dot-islaidout-and-view-dot-post/"/><published>2015-09-04T10:12:29+09:00</published><updated>2015-09-04T10:12:29+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드 View는 isLaidOut이라는 함수를 가지고 있다. 단, API 19(KITKAT)부터 사용가능하다. 사실 그 이하의 기기에서도 다른 방법을 통해서 사용가능하다. 아주 간단히. 이 부분은 나중에 다시 설명하겠다. 우선 isLaidOut 함수에 대해 안드로이드 메뉴얼에는 다음과 같이 나와있다. public boolean isLaidOut () Added in API level 19 Returns true if this view has been through at least one layout since it was last attached to or detached from a window. 쉽게 말해서 "해당 View가 layout이 그려졌는가?"를 반환하는 함수다. 다음은 post 함수에 대한 안드로이드 메뉴얼이다. public boolean post (Runnable action) Added in API level 1 Causes the Runnable to be added to the message queue. The runnable will be run on the user interface thread. Runnalbe을 넘겨 받아 UIThread에서 실행시켜준다고 한다. 그래서 어디에 써먹을 수 있나? 한가지 예를들어 보자면 TextView의 getLineCount()의 반환값 문제를 해결할 수 있다. 구글에서 "textview getlinecount"로 검색하면 많이 나오는 것 중 하나가 "textview.getLineCount always 0 in android"라는 질문이다. textview의 getLineCount()를 요청하면 항상 0이 나오는 문제가 있다는 얘기인데, 이런 문제의 원인은 getLineCount() 함수가 TextView가 그려진 후 그 상황에 맞는 라인수를 반환한다는 것이다. 따라서 그려지기 전에는 항상 0을 반환한다. 그럼 이 문제를 isLaidOut을 써서 해결해보자. TextView textView = new TextView(context); ... textView.setText("test message"); if (textView.isLaidOut()) { Log.d("TEXTVIEW", "line count : " + textView.getLineCount()); } else { final TextView postTextView = textView; textView.post(new Runnable() { @Override public void run() { Log.d("TEXTVIEW", "line count : " + postTextView.getLineCount()); } }); } 여러가지 상황이 있을 수 있다. 위의 예시와 다르게 layout xml에서 TextView가 정의될 수도 있고. 중요한 것은 TextView가 그려지기 전에 getLineCount() 함수를 사용하려는 것이다. 그런데 여기서도 한계는 있다. 값을 가져오는 부분이 비동기 방식이 된다는 것이다. 이를 해결하기 위해서는 다른 방법이 필요하다. 하지만 여기서는 isLaidOut에 대한 설명을 하고자 하는 것이므로 다음으로 넘긴다. 사실 찾아보면 여러가지 방법들이 제시되어 있는데 아주 깔끔한 방법은 현재로써는 찾기 힘들다. 위의 TextView 사례는 말그대로 예시일뿐 isLaidOut에 대한 활용 범위는 아주 다양할 수 있다. 마지막으로 isLaidOut을 API 19 이하에서 사용할 수 있는 방법은 다음의 예시를 참고하자. TextView textView = new TextView(context); ... textView.setText("test message"); if (ViewCompat.isLaidOut(textView)) { Log.d("TEXTVIEW", "line count : " + textView.getLineCount()); } else { final TextView postTextView = textView; textView.post(new Runnable() { @Override public void run() { Log.d("TEXTVIEW", "line count : " + postTextView.getLineCount()); } }); } 중요한 부분은 ViewCompat을 사용한다는 부분이다. 아주 간단한 방법으로 사용할 수 있으므로 하위 버전을 지원해야 한다하더라도 사용할 수 있다. ViewCompat.isLaidOut(textView)]]></summary><content type="html"><![CDATA[<p>안드로이드 View는 isLaidOut이라는 함수를 가지고 있다. 단, API 19(KITKAT)부터 사용가능하다. 사실 그 이하의 기기에서도 다른 방법을 통해서 사용가능하다. 아주 간단히. 이 부분은 나중에 다시 설명하겠다.</p>
<p>우선 isLaidOut 함수에 대해 안드로이드 메뉴얼에는 다음과 같이 나와있다.</p>
<blockquote>
<p>public boolean isLaidOut ()</p>
<p>Added in API level 19</p>
<p>Returns true if this view has been through at least one layout since it was last attached to or detached from a window.</p>
</blockquote>
<p>쉽게 말해서 &quot;해당 View가 layout이 그려졌는가?&quot;를 반환하는 함수다.</p>
<p>다음은 post 함수에 대한 안드로이드 메뉴얼이다.</p>
<blockquote>
<p>public boolean post (Runnable action)</p>
<p>Added in API level 1</p>
<p>Causes the Runnable to be added to the message queue. The runnable will be run on the user interface thread.</p>
</blockquote>
<p>Runnalbe을 넘겨 받아 UIThread에서 실행시켜준다고 한다.</p>
<p>그래서 어디에 써먹을 수 있나?
한가지 예를들어 보자면 TextView의 getLineCount()의 반환값 문제를 해결할 수 있다.</p>
<p>구글에서 &quot;<a href="https://www.google.co.kr/search?q=isLaidOut&amp;gws_rd=ssl#newwindow=1&amp;safe=off&amp;q=textview+getlinecount">textview getlinecount</a>&quot;로 검색하면 많이 나오는 것 중 하나가 &quot;textview.getLineCount always 0 in android&quot;라는 질문이다.</p>
<p>textview의 getLineCount()를 요청하면 항상 0이 나오는 문제가 있다는 얘기인데, 이런 문제의 원인은 getLineCount() 함수가 TextView가 그려진 후 그 상황에 맞는 라인수를 반환한다는 것이다. 따라서 그려지기 전에는 항상 0을 반환한다.</p>
<p>그럼 이 문제를 isLaidOut을 써서 해결해보자.</p>
<pre class="hljs java">TextView textView = <span class="hljs-keyword">new</span> TextView(context);

...

textView.setText(<span class="hljs-string">"test message"</span>);
<span class="hljs-keyword">if</span> (textView.isLaidOut()) {
    Log.d(<span class="hljs-string">"TEXTVIEW"</span>, <span class="hljs-string">"line count : "</span> + textView.getLineCount());
} <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">final</span> TextView postTextView = textView;
    textView.post(<span class="hljs-keyword">new</span> Runnable() {
        <span class="hljs-meta">@Override</span>
        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{
            Log.d(<span class="hljs-string">"TEXTVIEW"</span>, <span class="hljs-string">"line count : "</span> + postTextView.getLineCount());
        }
    });
}</pre>
<p>여러가지 상황이 있을 수 있다. 위의 예시와 다르게 layout xml에서 TextView가 정의될 수도 있고.
중요한 것은 TextView가 그려지기 전에 getLineCount() 함수를 사용하려는 것이다.</p>
<p>그런데 여기서도 한계는 있다. 값을 가져오는 부분이 비동기 방식이 된다는 것이다. 이를 해결하기 위해서는 다른 방법이 필요하다. 하지만 여기서는 isLaidOut에 대한 설명을 하고자 하는 것이므로 다음으로 넘긴다. 사실 찾아보면 여러가지 방법들이 제시되어 있는데 아주 깔끔한 방법은 현재로써는 찾기 힘들다.</p>
<p>위의 TextView 사례는 말그대로 예시일뿐 isLaidOut에 대한 활용 범위는 아주 다양할 수 있다.</p>
<p>마지막으로 isLaidOut을 API 19 이하에서 사용할 수 있는 방법은 다음의 예시를 참고하자.</p>
<pre class="hljs java">TextView textView = <span class="hljs-keyword">new</span> TextView(context);

...

textView.setText(<span class="hljs-string">"test message"</span>);
<span class="hljs-keyword">if</span> (ViewCompat.isLaidOut(textView)) {
    Log.d(<span class="hljs-string">"TEXTVIEW"</span>, <span class="hljs-string">"line count : "</span> + textView.getLineCount());
} <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">final</span> TextView postTextView = textView;
    textView.post(<span class="hljs-keyword">new</span> Runnable() {
        <span class="hljs-meta">@Override</span>
        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>{
            Log.d(<span class="hljs-string">"TEXTVIEW"</span>, <span class="hljs-string">"line count : "</span> + postTextView.getLineCount());
        }
    });
}</pre>
<p>중요한 부분은 ViewCompat을 사용한다는 부분이다. 아주 간단한 방법으로 사용할 수 있으므로 하위 버전을 지원해야 한다하더라도 사용할 수 있다.</p>
<pre class="hljs java">ViewCompat.isLaidOut(textView)</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/03/android-http-ping/</id><title type="html">안드로이드에서 android.os.NetworkOnMainThreadException을 발생시키지 않고 HTTP Ping 보내기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/03/android-http-ping/"/><published>2015-09-03T18:48:08+09:00</published><updated>2015-09-03T18:48:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[오늘은 작업을 하던 중간에 서버로 ping을 보내야 하는 작업이 생겼다. 정확하게는 서버에 간단한 값을 전송해서 로그로 쌓기 위한 작업이다. 우선 안드로이드는 main thread에서 network 작업을 할 수 없도록 되어있다. 억지로 하려고하면 android.os.NetworkOnMainThreadException이 발생한다. 간단히 생각해서 handler를 사용하는 방법도 있으나 메인 handler를 사용하면 마찬가지다. 그래서 가장 간단한 방법은 AsyncTask를 사용하는 것이다. 아래는 url을 인자로 받아 http로 접속한 후 response가 200이 나왔는지를 반환한다. static class HttpPingAsyncTask extends AsyncTask<String, Void, Boolean> { @Override protected Boolean doInBackground(String... urls) { try { // HttpURLConnection.setFollowRedirects(false); HttpURLConnection con = (HttpURLConnection) new URL(urls[0]).openConnection(); con.setInstanceFollowRedirects(false); con.setRequestMethod("HEAD"); return (con.getResponseCode() == HttpURLConnection.HTTP_OK); } catch (Exception e) { return false; } } } 사용법은 다음과 같다. (new HttpPingAsyncTask()).execute(url); 이는 가장 간단한 형태로 구현된 코드로 할 수 있는 일이 url을 호출하고 응답을 확인하는 것 밖에 없다. 하지만 조금만 응용하면 여러가지로 활용할 수 있다. url에 GET 인자로 전달하고자 하는 값을 넘기고 서버에서는 해당 값을 로그로 남기거나 필요한 처리를 한다. 그리고 정상처리가 되었다면 200을 반환하고 실패하면 500을 반환함으로써 처리 결과를 알 수 있다. 이러한 형태를 이용하면 간단한 구현으로 여러가지 일을 할 수 있다. 또한 위의 코드에 필요한 기능을 조금씩 덧붙이면 보다 다양한 일을 할 수 있는 코드를 만들수도 있을 것이다.]]></summary><content type="html"><![CDATA[<p>오늘은 작업을 하던 중간에 서버로 ping을 보내야 하는 작업이 생겼다. 정확하게는 서버에 간단한 값을 전송해서 로그로 쌓기 위한 작업이다.
우선 안드로이드는 main thread에서 network 작업을 할 수 없도록 되어있다. 억지로 하려고하면 android.os.NetworkOnMainThreadException이 발생한다.</p>
<p>간단히 생각해서 handler를 사용하는 방법도 있으나 메인 handler를 사용하면 마찬가지다.
그래서 가장 간단한 방법은 AsyncTask를 사용하는 것이다.</p>
<p>아래는 url을 인자로 받아 http로 접속한 후 response가 200이 나왔는지를 반환한다.</p>
<pre class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpPingAsyncTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AsyncTask</span>&lt;<span class="hljs-title">String</span>, <span class="hljs-title">Void</span>, <span class="hljs-title">Boolean</span>&gt; </span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> Boolean <span class="hljs-title">doInBackground</span><span class="hljs-params">(String... urls)</span> </span>{
        <span class="hljs-keyword">try</span> {
            <span class="hljs-comment">// HttpURLConnection.setFollowRedirects(false);</span>
            HttpURLConnection con = (HttpURLConnection) <span class="hljs-keyword">new</span> URL(urls[<span class="hljs-number">0</span>]).openConnection();
            con.setInstanceFollowRedirects(<span class="hljs-keyword">false</span>);
            con.setRequestMethod(<span class="hljs-string">"HEAD"</span>);
            <span class="hljs-keyword">return</span> (con.getResponseCode() == HttpURLConnection.HTTP_OK);
        } <span class="hljs-keyword">catch</span> (Exception e) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
        }
    }
}</pre>
<p>사용법은 다음과 같다.</p>
<pre class="hljs java">(<span class="hljs-keyword">new</span> HttpPingAsyncTask()).execute(url);</pre>
<p>이는 가장 간단한 형태로 구현된 코드로 할 수 있는 일이 url을 호출하고 응답을 확인하는 것 밖에 없다. 하지만 조금만 응용하면 여러가지로 활용할 수 있다.
url에 GET 인자로 전달하고자 하는 값을 넘기고 서버에서는 해당 값을 로그로 남기거나 필요한 처리를 한다. 그리고 정상처리가 되었다면 200을 반환하고 실패하면 500을 반환함으로써 처리 결과를 알 수 있다. 이러한 형태를 이용하면 간단한 구현으로 여러가지 일을 할 수 있다.</p>
<p>또한 위의 코드에 필요한 기능을 조금씩 덧붙이면 보다 다양한 일을 할 수 있는 코드를 만들수도 있을 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/02/decoding-byte-escaped-strings-in-php/</id><title type="html">PHP에서 Byte-escaped(\xFF)된 문자열 decode하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/02/decoding-byte-escaped-strings-in-php/"/><published>2015-09-02T21:49:21+09:00</published><updated>2015-09-02T21:49:21+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[어제 회사 직원 한명이 협력사에서 데이터 전달을 위해 생성해서 알려준 URL에서 데이터를 받지 못해 고생을 하고 있었다. 협력사는 PC용 어플리케이션을 만드는 회사(Delphi 사용)로 웹에 대해서 잘 모른다. 처리하고자 하는 일은 다음과 같았다. PC용 어플리케이션에서 버튼을 누르면 해당 어플리케이션에서 가지고 있던 데이터를 특정 URL로 호출(전달)해주는 것이었다. 처음엔 데이터를 "뭐뭐 주세요" 했더니 그냥 넘겨주는 바람에 특수문자가 들어가 내용이 정상적으로 전달되지 않았다. 당연히 POST 방식으로 값을 전달해주면 문제가 없겠지만 그렇게는 더 어렵다고하니... 그냥 GET으로 달라고 했다. 그 바람에 이런 일들이 벌어진 것이다. 그리하여 우여곡절 끝에 문자열을 인코딩해서 보내달라는 요청을하고 받은 결과가 다시 문제가 되었다. 분명 인코딩은 되어 있는데 일반적으로 웹에서 쓰는 인코딩이 아니었다. \xb4\xd9\xbf\xf8\xc5\xd7\xc5\xa9 뭐 이런식이다. 어딘가 낯익은 모양이면서도 흔히 보지못한 형태였다. 검색을 해보니 javascript escape sequences라고 부르는 사람도 있고 Byte-escaped string이라고 하기도 하고.. 어쨌든 byte 단위로 변환된 문자열이다. 이 문장을 decode 하려면 다음의 코드를 참조하면 된다. (인터넷에서 다른 소스를 참조해서 조금 개선했다.) $string = "\xb4\xd9\xbf\xf8\xc5\xd7\xc5\xa9"; echo preg_replace_callback( '/\\\x([0-9a-f]{2})/i', function($matches) { return chr(hexdec($matches[1])); }, $string ); 어땠든 이렇게 decode를 했는데도 글자가 깨졌다. 이런... 문자열이 UTF-8이 아니라 EUC-KR이다. 그래서 조금더 추가. 여기서 UHC는 euc-kr과 거의 유사하다. 조금 더 확장되었다고 알고있는데 오래전 기억이라 확실치 않다. $string = "\xb4\xd9\xbf\xf8\xc5\xd7\xc5\xa9"; echo iconv("UHC", "UTF-8", preg_replace_callback( '/\\\x([0-9a-f]{2})/i', function($matches) { return chr(hexdec($matches[1])); }, $string )); 이렇게 해피앤딩이 되면 좋겠지만 현실을 그렇지 않다. 문제는 이 인코딩이 특수문자는 인코딩하지 않는다는 것.(비 ascii 코드만 인코딩) 따라서 웹에서 데이터로 URL에 사용해서는 안되는 &, # 등이 그대로 남아있어 데이터가 잘려서 넘어오는 문제는 해결되지 않는다. 가장 좋은 해결책은 urlencode를 해서 넘겨 벋는 것이지만 협력사를 내맘대로 할 수는 없고... 자체적인 해결을 위한 해결법(꼼수)은 다음과 같다. 특히 #이 가장 큰 문제를 일으키므로 초출된 URL에서 데이터를 즉시 처리하지 않고 javascript로 현재 브라우저의 URL을 받아 다른 처리 페이지로 직접 넘겨서 파싱한다. 이렇게하면 일이 많이 번거로워지지만 협력사의 변경없이 여기서 모두 해결된다. 다만.. urlencode만 제대로 해줘도 되는걸 이런 꼼수를 써가며 억지로 해야하는가? 하는... 이왕 이 일로 글을 적는 김에 몇가지 함수도 덤으로... php에서 url 인코딩에 사용하는 함수다. 당연히 urlencode 함수등을 사용하면되나 javascript에서 인코딩된 문자열을 그대로 전달받는 경우 등에 사용할 수 있다. 쉽게 말해서 javascript 문자열 인코딩 함수 php 대응 함수다. /** * @desc javascript의 encodeURIComponent함수와 같은기능으로 문자열을 변환한다. * @param mixed $str 처리할 배열변수나 단일변수 * @param String $fromEncofing 입력 인코딩 * @return mixed 변환된 변수 그대로 반환 * @exam $arr = String::encodeURI($arr); * String::encodeURI($arr); */ static public function encodeURI(&$str, $fromEncofing = null) { if (is_array($str)) { String::arrayProc($str, 'String::encodeURI'); return $str; } if (!is_null($fromEncofing)) { $trans = iconv($fromEncofing, "UTF-8", $str); // UHC 확장 완성형 한글 } $trans = rawurlencode($trans); $str = $trans; return $str; } /** * @desc javascript의 decodeURIComponent함수와 같은기능으로 문자열을 변환한다. * @param mixed $str 처리할 배열변수나 단일변수 * @param String $toEncofing 반환 인코딩 * @return mixed 변환된 변수 그대로 반환 * @exam $arr = String::decodeURI($arr); * String::decodeURI($arr); //리턴받지 않아도 입력변수에 저장되어 나옴. */ static public function decodeURI(&$str, $toEncofing = null) { if (is_array($str)) { String::arrayProc($str, 'String::decodeURI'); return $str; } // euc-kr의 경우 확장완성형 한글에 대한 처리가 불가능함(예 : ㅂ ㅞ ㄺ) // return iconv("UTF-8", "EUC-KR", rawurldecode($text)); $str = rawurldecode($str); if (!is_null($toEncofing)) { $str = iconv("UTF-8", $toEncofing, $str); } return $str; } /** * @desc javascript의 escape함수로 인코딩된 문자를 디코딩한다.(encodeURIComponent추천) * @param String $str 처리할 배열변수나 단일변수 * @param String $toEncofing 반환 인코딩 * @return mixed 변환된 변수 그대로 반환 * @exam $decStr = String::unescape($str); */ static public function unescape($text, $toEncofing = 'UTF-8') { //return urldecode(preg_replace_callback('/%u([[:alnum:]]{4})/', array('self', 'tostring'), $text)); return urldecode( preg_replace_callback( '/%u([[:alnum:]]{4})/', create_function( '$text', "echo '123'; return iconv('UTF-16LE', '" . $toEncofing . "', chr(hexdec(substr(\$text[1], 2, 2))).chr(hexdec(substr(\$text[1], 0, 2))));" ), $text ) ); }]]></summary><content type="html"><![CDATA[<p>어제 회사 직원 한명이 협력사에서 데이터 전달을 위해 생성해서 알려준 URL에서 데이터를 받지 못해 고생을 하고 있었다. 협력사는 PC용 어플리케이션을 만드는 회사(Delphi 사용)로 웹에 대해서 잘 모른다.</p>
<p>처리하고자 하는 일은 다음과 같았다. PC용 어플리케이션에서 버튼을 누르면 해당 어플리케이션에서 가지고 있던 데이터를 특정 URL로 호출(전달)해주는 것이었다.</p>
<p>처음엔 데이터를 &quot;뭐뭐 주세요&quot; 했더니 그냥 넘겨주는 바람에 특수문자가 들어가 내용이 정상적으로 전달되지 않았다. 당연히 POST 방식으로 값을 전달해주면 문제가 없겠지만 그렇게는 더 어렵다고하니... 그냥 GET으로 달라고 했다. 그 바람에 이런 일들이 벌어진 것이다.</p>
<p>그리하여 우여곡절 끝에 문자열을 인코딩해서 보내달라는 요청을하고 받은 결과가 다시 문제가 되었다. 분명 인코딩은 되어 있는데 일반적으로 웹에서 쓰는 인코딩이 아니었다.</p>
<blockquote>
<p>\xb4\xd9\xbf\xf8\xc5\xd7\xc5\xa9</p>
</blockquote>
<p>뭐 이런식이다. 어딘가 낯익은 모양이면서도 흔히 보지못한 형태였다.</p>
<p>검색을 해보니 javascript escape sequences라고 부르는 사람도 있고 Byte-escaped string이라고 하기도 하고.. 어쨌든 byte 단위로 변환된 문자열이다.</p>
<p>이 문장을 decode 하려면 다음의 코드를 참조하면 된다. (인터넷에서 다른 소스를 참조해서 조금 개선했다.)</p>
<pre class="hljs php">$string = <span class="hljs-string">"\xb4\xd9\xbf\xf8\xc5\xd7\xc5\xa9"</span>;
<span class="hljs-keyword">echo</span> preg_replace_callback(
    <span class="hljs-string">'/\\\x([0-9a-f]{2})/i'</span>,
    <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($matches)</span> </span>{
        <span class="hljs-keyword">return</span> chr(hexdec($matches[<span class="hljs-number">1</span>]));
    },
    $string
);</pre>
<p>어땠든 이렇게 decode를 했는데도 글자가 깨졌다. 이런... 문자열이 UTF-8이 아니라 EUC-KR이다.
그래서 조금더 추가. 여기서 UHC는 euc-kr과 거의 유사하다. 조금 더 확장되었다고 알고있는데 오래전 기억이라 확실치 않다.</p>
<pre class="hljs php">$string = <span class="hljs-string">"\xb4\xd9\xbf\xf8\xc5\xd7\xc5\xa9"</span>;
<span class="hljs-keyword">echo</span> iconv(<span class="hljs-string">"UHC"</span>, <span class="hljs-string">"UTF-8"</span>, preg_replace_callback(
    <span class="hljs-string">'/\\\x([0-9a-f]{2})/i'</span>,
    <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">($matches)</span> </span>{
        <span class="hljs-keyword">return</span> chr(hexdec($matches[<span class="hljs-number">1</span>]));
    },
    $string
));</pre>
<p>이렇게 해피앤딩이 되면 좋겠지만 현실을 그렇지 않다. 문제는 이 인코딩이 특수문자는 인코딩하지 않는다는 것.(비 ascii 코드만 인코딩)
따라서 웹에서 데이터로 URL에 사용해서는 안되는 &amp;, # 등이 그대로 남아있어 데이터가 잘려서 넘어오는 문제는 해결되지 않는다. 가장 좋은 해결책은 urlencode를 해서 넘겨 벋는 것이지만 협력사를 내맘대로 할 수는 없고...</p>
<p>자체적인 해결을 위한 해결법(꼼수)은 다음과 같다.
특히 #이 가장 큰 문제를 일으키므로 초출된 URL에서 데이터를 즉시 처리하지 않고 javascript로 현재 브라우저의 URL을 받아 다른 처리 페이지로 직접 넘겨서 파싱한다. 이렇게하면 일이 많이 번거로워지지만 협력사의 변경없이 여기서 모두 해결된다.
다만.. urlencode만 제대로 해줘도 되는걸 이런 꼼수를 써가며 억지로 해야하는가? 하는...</p>
<p>이왕 이 일로 글을 적는 김에 몇가지 함수도 덤으로...
php에서 url 인코딩에 사용하는 함수다. 당연히 urlencode 함수등을 사용하면되나 javascript에서 인코딩된 문자열을 그대로 전달받는 경우 등에 사용할 수 있다. 쉽게 말해서 javascript 문자열 인코딩 함수 php 대응 함수다.</p>
<pre class="hljs php"><span class="hljs-comment">/**
 * <span class="hljs-doctag">@desc</span> javascript의 encodeURIComponent함수와 같은기능으로 문자열을 변환한다.
 * <span class="hljs-doctag">@param</span> mixed $str 처리할 배열변수나 단일변수
 * <span class="hljs-doctag">@param</span> String $fromEncofing 입력 인코딩
 * <span class="hljs-doctag">@return</span> mixed 변환된 변수 그대로 반환
 * <span class="hljs-doctag">@exam</span> $arr = String::encodeURI($arr);
 *       String::encodeURI($arr);
 */</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encodeURI</span><span class="hljs-params">(&amp;$str, $fromEncofing = null)</span>
</span>{
    <span class="hljs-keyword">if</span> (is_array($str)) {
        String::arrayProc($str, <span class="hljs-string">'String::encodeURI'</span>);
        <span class="hljs-keyword">return</span> $str;
    }

    <span class="hljs-keyword">if</span> (!is_null($fromEncofing)) {
        $trans = iconv($fromEncofing, <span class="hljs-string">"UTF-8"</span>, $str); <span class="hljs-comment">// UHC 확장 완성형 한글</span>
    }
    $trans = rawurlencode($trans);

    $str = $trans;
    <span class="hljs-keyword">return</span> $str;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@desc</span> javascript의 decodeURIComponent함수와 같은기능으로 문자열을 변환한다.
 * <span class="hljs-doctag">@param</span> mixed $str 처리할 배열변수나 단일변수
 * <span class="hljs-doctag">@param</span> String $toEncofing 반환 인코딩
 * <span class="hljs-doctag">@return</span> mixed 변환된 변수 그대로 반환
 * <span class="hljs-doctag">@exam</span> $arr = String::decodeURI($arr);
 *       String::decodeURI($arr); //리턴받지 않아도 입력변수에 저장되어 나옴.
 */</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decodeURI</span><span class="hljs-params">(&amp;$str, $toEncofing = null)</span>
</span>{
    <span class="hljs-keyword">if</span> (is_array($str)) {
        String::arrayProc($str, <span class="hljs-string">'String::decodeURI'</span>);
        <span class="hljs-keyword">return</span> $str;
    }

    <span class="hljs-comment">//  euc-kr의 경우 확장완성형 한글에 대한 처리가 불가능함(예 : ㅂ ㅞ ㄺ)</span>
    <span class="hljs-comment">//  return iconv("UTF-8", "EUC-KR", rawurldecode($text));</span>
    $str = rawurldecode($str);
    <span class="hljs-keyword">if</span> (!is_null($toEncofing)) {
        $str = iconv(<span class="hljs-string">"UTF-8"</span>, $toEncofing, $str);
    }
    <span class="hljs-keyword">return</span> $str;
}

<span class="hljs-comment">/**
 * <span class="hljs-doctag">@desc</span> javascript의 escape함수로 인코딩된 문자를 디코딩한다.(encodeURIComponent추천)
 * <span class="hljs-doctag">@param</span> String $str 처리할 배열변수나 단일변수
 * <span class="hljs-doctag">@param</span> String $toEncofing 반환 인코딩
 * <span class="hljs-doctag">@return</span> mixed 변환된 변수 그대로 반환
 * <span class="hljs-doctag">@exam</span> $decStr = String::unescape($str);
 */</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unescape</span><span class="hljs-params">($text, $toEncofing = <span class="hljs-string">'UTF-8'</span>)</span>
</span>{
    <span class="hljs-comment">//return urldecode(preg_replace_callback('/%u([[:alnum:]]{4})/', array('self', 'tostring'), $text));</span>
    <span class="hljs-keyword">return</span> urldecode(
        preg_replace_callback(
            <span class="hljs-string">'/%u([[:alnum:]]{4})/'</span>,
            create_function(
                <span class="hljs-string">'$text'</span>,
                <span class="hljs-string">"echo '123'; return iconv('UTF-16LE', '"</span> . $toEncofing . <span class="hljs-string">"', chr(hexdec(substr(\$text[1], 2, 2))).chr(hexdec(substr(\$text[1], 0, 2))));"</span>
            ),
            $text
        )
    );
}</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/09/01/change-private-static-final-field-using-java-reflection/</id><title type="html">java reflection을 사용해서 private static final field 변경하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/09/01/change-private-static-final-field-using-java-reflection/"/><published>2015-09-01T22:29:00+09:00</published><updated>2015-09-01T22:29:00+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="java" label="java" /><summary><![CDATA[java에서 final로 지정한 것은 당연히 변경을 하지 말라는 뜻이다. 하지만 간혹 작업을 하다보면 그 값을 수정하고 싶을 때가 있다. 이번에도 안드로이드 작업을 하던 중 중요한 값도 아닐뿐아니라 유연성을 위해 값 변경이 필요한 값을 상수라는 이유만으로 final을 붙여 놓은 필드가 있었다.(아마도 자바 개발자들의 습관인 것 같다.) 그래서 관련된 내용을 검색하던 중 해답을 알려주는 내용을 찾았다. http://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection static void setFinalStatic(Field field, Object newValue) throws Exception { field.setAccessible(true); Field modifiersField = Field.class.getDeclaredField("modifiers"); modifiersField.setAccessible(true); modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL); field.set(null, newValue); } 상세한 내용은 원본 주소에 가서 보면 친절히 설명되어 있다. 사실 코드를 굳이 해석할 이유도 없고 그냥 저 함수를 써서 원하는 처리를 하면 그만이다. 이번 작업과 상관은 없지만 개인적으로 java는 정말 맘에 들지 않는다. 개인적으로 느끼기에 너무 고지식한 언어 같다. 이렇게 얘기하면 java 추종자들이 난리나겠지만 길게 얘기할 맘은 없다. 난 Objective-C가 좋아.]]></summary><content type="html"><![CDATA[<p>java에서 final로 지정한 것은 당연히 변경을 하지 말라는 뜻이다.
하지만 간혹 작업을 하다보면 그 값을 수정하고 싶을 때가 있다. 이번에도 안드로이드 작업을 하던 중 중요한 값도 아닐뿐아니라 유연성을 위해 값 변경이 필요한 값을 상수라는 이유만으로 final을 붙여 놓은 필드가 있었다.(아마도 자바 개발자들의 습관인 것 같다.)</p>
<p>그래서 관련된 내용을 검색하던 중 해답을 알려주는 내용을 찾았다.</p>
<p><a href="http://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection">http://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection</a></p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFinalStatic</span><span class="hljs-params">(Field field, Object newValue)</span> <span class="hljs-keyword">throws</span> Exception </span>{
  field.setAccessible(<span class="hljs-keyword">true</span>);

  Field modifiersField = Field.class.getDeclaredField(<span class="hljs-string">"modifiers"</span>);
  modifiersField.setAccessible(<span class="hljs-keyword">true</span>);
  modifiersField.setInt(field, field.getModifiers() &amp; ~Modifier.FINAL);

  field.set(<span class="hljs-keyword">null</span>, newValue);
}</pre>
<p>상세한 내용은 원본 주소에 가서 보면 친절히 설명되어 있다. 사실 코드를 굳이 해석할 이유도 없고 그냥 저 함수를 써서 원하는 처리를 하면 그만이다.</p>
<p>이번 작업과 상관은 없지만 개인적으로 java는 정말 맘에 들지 않는다. 개인적으로 느끼기에 너무 고지식한 언어 같다. 이렇게 얘기하면 java 추종자들이 난리나겠지만 길게 얘기할 맘은 없다. 난 Objective-C가 좋아.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/08/30/realty-tax/</id><title type="html">증여받은 부동산의 양도소득세</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/08/30/realty-tax/"/><published>2015-08-30T07:11:54+09:00</published><updated>2015-08-30T07:11:54+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><summary><![CDATA[2015년 현재. 1가구 1주택의 경우 주택매매시 양도 소득세가 비과세된다. 하지만 1가구 1주택에 해당하는 상황에서도 비과세가 되지 않는 경우들이 있는데 그중 하나가 증여받은 부동산이다. 증여받은 부동산의 경우 증여 후 5년 이내에 매매가 일어날 경우 부당행위계산에 해당될 수 있다. 법이라는 것이 워낙에 복잡하고 다양하며 해석이 상황에 따라 달라질 수 있어 참 많이 알아둬야 한다는 생각이 든다. 몇달전 내가 이 경우에 해당하여 골치가 아팠던 적이 있다. 증여 후 5년이 되지 않은 상황에 이런 사실을 모르고 매매를 해버렸고 이후에 이 사실을 알게되었을 때는 난감하기 그지 없었다. 법무사, 지인 등을 통해서 알아봐도 명쾌한 답을 받을 수 없었다. "대부분 세금을 내는 수 밖에 없다."라는 결론 이었다. 하지만 상황이 조금 복잡하게 얽혀있어 세금이 감당할 수 없는 수준이다보니 그냥 쉽게 생각할 수 없었다. 하지만... 몇일을 조사해본 결과. 세금은 낼 필요가 없다는 것을 발견했다. ▣ 소득세법 제101조 [ 양도소득의 부당행위계산 ] 제2항 각 호 ② 거주자가 제1항에서 규정하는 특수관계인(제97조의2 제1항을 적용받는 배우자 및 직계존비속의 경우는 제외한다)에게 자산을 증여한 후 그 자산을 증여받은 자가 그 증여일부터 5년 이내에 다시 타인에게 양도한 경우로서 제1호에 따른 세액이 제2호에 따른 세액보다 적은 경우에는 증여자가 그 자산을 직접 양도한 것으로 본다. 다만, 양도소득이 해당 수증자에게 실질적으로 귀속된 경우에는 그러하지 아니하다.(2014.01.01 개정) 여기서 중요한 부분. 양도소득이 해당 수증자에게 실질적으로 귀속된 경우에는 그러하지 아니하다. 이 부분의 예외조항으로 인해 나의 경우는 비과세에 해당되었다. 정리하자면 부당행위계산의 경우 탈세를 위한 증여를 막기위한 법이니 탈세 목적을 위한 증여가 아니면 해당되지 않는다는 것. 아래에는 내가 찾았던 자료 중 참고가 되었던 사이트 목록이다. 직계존비속으로부터 증여받은 주택의 비과세. 증여받은집, 3년후에 매매가능한가요? 증여받은 아파트 비과세요건 증여주택은 몇년후 매매하면 비과세가 됩니까 ? 부모님으로 부터 증여받은 부동산(주택) 매도 직계존비속간 이월과세 및 비과세 우회양도에 대한 부당행위계산의 부인 양도소득세부과처분취소 : 판례 - 양도소득이 증여자 귀속 양도소득이 수증자에게 실질적으로 귀속된 경우는? - 수증자에게 실질적으로 귀속될 경우 제외, 자산의 취득가액은 증여일 기준으로 책정이 맞다 양도소득이 수증자에게 실질적으로 귀속되는 경우 부당행위계산 부인 외]]></summary><content type="html"><![CDATA[<p>2015년 현재. 1가구 1주택의 경우 주택매매시 양도 소득세가 비과세된다. 하지만 1가구 1주택에 해당하는 상황에서도 비과세가 되지 않는 경우들이 있는데 그중 하나가 증여받은 부동산이다.</p>
<p>증여받은 부동산의 경우 증여 후 5년 이내에 매매가 일어날 경우 부당행위계산에 해당될 수 있다.
법이라는 것이 워낙에 복잡하고 다양하며 해석이 상황에 따라 달라질 수 있어 참 많이 알아둬야 한다는 생각이 든다.</p>
<p>몇달전 내가 이 경우에 해당하여 골치가 아팠던 적이 있다. 증여 후 5년이 되지 않은 상황에 이런 사실을 모르고 매매를 해버렸고 이후에 이 사실을 알게되었을 때는 난감하기 그지 없었다. 법무사, 지인 등을 통해서 알아봐도 명쾌한 답을 받을 수 없었다. &quot;대부분 세금을 내는 수 밖에 없다.&quot;라는 결론 이었다. 하지만 상황이 조금 복잡하게 얽혀있어 세금이 감당할 수 없는 수준이다보니 그냥 쉽게 생각할 수 없었다.</p>
<p>하지만... 몇일을 조사해본 결과. 세금은 낼 필요가 없다는 것을 발견했다.</p>
<blockquote>
<p>▣ 소득세법 제101조 [ 양도소득의 부당행위계산 ] 제2항 각 호</p>
<p>② 거주자가 제1항에서 규정하는 특수관계인(제97조의2 제1항을 적용받는 배우자 및 직계존비속의 경우는 제외한다)에게 자산을 증여한 후 그 자산을 증여받은 자가 그 증여일부터 5년 이내에 다시 타인에게 양도한 경우로서 제1호에 따른 세액이 제2호에 따른 세액보다 적은 경우에는 증여자가 그 자산을 직접 양도한 것으로 본다. 다만, 양도소득이 해당 수증자에게 실질적으로 귀속된 경우에는 그러하지 아니하다.(2014.01.01 개정)</p>
</blockquote>
<p>여기서 중요한 부분. 양도소득이 해당 수증자에게 실질적으로 귀속된 경우에는 그러하지 아니하다.
이 부분의 예외조항으로 인해 나의 경우는 비과세에 해당되었다.
정리하자면 부당행위계산의 경우 탈세를 위한 증여를 막기위한 법이니 탈세 목적을 위한 증여가 아니면 해당되지 않는다는 것.</p>
<p>아래에는 내가 찾았던 자료 중 참고가 되었던 사이트 목록이다.</p>
<ul>
<li><a href="http://www.taxboy.co.kr/gnuboard4/bbs/board.php?bo_table=QNA1&amp;wr_id=8142">직계존비속으로부터 증여받은 주택의 비과세.</a></li>
<li><a href="http://startline.tistory.com/179">증여받은집, 3년후에 매매가능한가요?</a></li>
<li><a href="http://www.etaxkorea.net/sub/sub_page.php?sp=s0107&amp;md=view&amp;minno=999995&amp;code1=&amp;nts_year=2014&amp;CURRENT_PAGE=5775">증여받은 아파트 비과세요건</a></li>
<li><a href="http://tj4.joinsland.com/consult/read.asp?qno=30389&amp;ReplyUserID=7300">증여주택은 몇년후 매매하면 비과세가 됩니까 ?</a></li>
<li><a href="http://blog.daum.net/_blog/BlogTypeView.do?blogid=08Ku8&amp;articleno=16153767&amp;categoryId=540732&amp;regdt=20130522170301">부모님으로 부터 증여받은 부동산(주택) 매도</a></li>
<li><a href="http://www.cnprea.com/information/tax.cnp?cid=3643">직계존비속간 이월과세 및 비과세</a></li>
<li><a href="https://books.google.co.kr/books?id=kNtpBQAAQBAJ&amp;pg=PA696&amp;lpg=PA696&amp;dq=%EB%B6%80%EB%8B%B9%ED%96%89%EC%9C%84%EA%B3%84%EC%82%B0%EB%B6%80%EC%9D%B8+%EC%A6%9D%EC%97%AC&amp;source=bl&amp;ots=xWtH0GZjWi&amp;sig=X2k_gEaXq4RkOSsTc8iteqTIaK4&amp;hl=ko&amp;sa=X&amp;ei=SfpJVZfbHoK5mAWY64DoAw&amp;ved=0CEIQ6AEwBg#v=onepage&amp;q=%EB%B6%80%EB%8B%B9%ED%96%89%EC%9C%84%EA%B3%84%EC%82%B0%EB%B6%80%EC%9D%B8%20%EC%A6%9D%EC%97%AC&amp;f=false">우회양도에 대한 부당행위계산의 부인</a></li>
<li><a href="http://www.law.go.kr/LSW/precInfoP.do?precSeq=172450">양도소득세부과처분취소 : 판례 - 양도소득이 증여자 귀속</a></li>
<li><a href="http://www.intn.co.kr/news/articleView.html?idxno=327710">양도소득이 수증자에게 실질적으로 귀속된 경우는? - 수증자에게 실질적으로 귀속될 경우 제외, 자산의 취득가액은 증여일 기준으로 책정이 맞다</a></li>
<li><a href="http://www.cnprea.com/information/tax.cnp?cid=3600">양도소득이 수증자에게 실질적으로 귀속되는 경우 부당행위계산 부인 외</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/08/30/phpstorm8-phpunit-install/</id><title type="html">phpstorm8 phpunit 설치</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/08/30/phpstorm8-phpunit-install/"/><published>2015-08-30T07:07:32+09:00</published><updated>2015-08-30T07:07:32+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[phpstorm8 phpunit 세팅법 PHPStorm preferences > php > phpunit > + > By remote interpreter remote server 추가 : ssh로 접속 설정 path to phpunit.phar 선택 > path to phpunit.phar : /czdev/vagrant/work/phpunit.phar Default configuration file : /home/web/makeus/CZFramework/tests/phpunit.xml Default bootstrap file : /home/web/makeus/CZFramework/tests/bootstrap.php 해당 서버에서 작업 : 로컬 경로와 서버의 경로가 같아야 실행에 문제가 없음 su - cd / mkdir /czdev/vagrant/work/ : 로컬과 같은 경로 생성 wget https://phar.phpunit.de/phpunit.phar ln -s /home/web ./ : 로컬 소스 경로 맞춤]]></summary><content type="html"><![CDATA[<p>phpstorm8 phpunit 세팅법</p>
<ul>
<li>
<p>PHPStorm</p>
</li>
<li>
<p>preferences &gt; php &gt; phpunit &gt; + &gt; By remote interpreter</p>
</li>
<li>
<p>remote server 추가 : ssh로 접속 설정</p>
</li>
<li>
<p>path to phpunit.phar 선택 &gt; path to phpunit.phar : /czdev/vagrant/work/phpunit.phar</p>
</li>
<li>
<p>Default configuration file : /home/web/makeus/CZFramework/tests/phpunit.xml</p>
</li>
<li>
<p>Default bootstrap file : /home/web/makeus/CZFramework/tests/bootstrap.php</p>
</li>
<li>
<p>해당 서버에서 작업 : 로컬 경로와 서버의 경로가 같아야 실행에 문제가 없음</p>
</li>
</ul>
<pre class="hljs bash">su -
<span class="hljs-built_in">cd</span> /
mkdir /czdev/vagrant/work/ : 로컬과 같은 경로 생성
wget https://phar.phpunit.de/phpunit.phar
ln -s /home/web ./ : 로컬 소스 경로 맞춤</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/08/28/octopress-category-list-plugin-install/</id><title type="html">옥토프레스 category list 플러그인 설치</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/08/28/octopress-category-list-plugin-install/"/><published>2015-08-28T20:45:21+09:00</published><updated>2015-08-28T20:45:21+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="octopress" label="octopress" /><summary><![CDATA[이번엔 옥토프레스에 category list 플러그인을 추가해 보았다. 사실 현재 시점에서 쓰고 있는 테마를 선택한 이유가 우측에 나오는 카테고리 목록이었다. 그런데 막상 테마를 설치한 후에도 카테고리 목록이 보이지 않았다. 처음엔 설정이 누락되어서 그렇다고 생각했고 시간이 없어서 그냥 두다가 오늘에서야 추가를 하고자 확인해 봤다. 현재 시점에 사용하고 있는 테마는 "octostrap3"다. 해당 소스를 뒤져서 aside에 추가하는 부분은 찾았으나 테마엔 그 파일이 없었다. 그럼 이사람은 없는 파일을 어떻게 불러서 쓴단 말인가? 알아보니 별도 플러그인을 추가해야만 했다. https://github.com/ctdk/octopress-category-list 현재 내가 적용한 플러그인이다. 최근 업데이트가 시점이 오래되어 조금 미심쩍지만 대안이 없다. 일단 설명이 된대로 소스를 받아서 안내하는 경로에 집어 넣었다. 그리고 octostrap3에서 사용하던것 처럼 _config.xml 파일에 추가 했다.일단 사이드 영역에 "custom/asides/category_list.html"를 추가. default_asides: [asides/recent_posts.html, custom/asides/category_list.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html] 그리고는 정상적으로 적용이 되는지 확인. $ rake generate ## Generating Site with Jekyll Configuration file: /Volumes/Data/DropBox/blog/_config.yml Source: source Destination: public/blog Generating... Liquid Exception: undefined method `+' for nil:NilClass in _layouts/page.html jekyll 2.5.3 | Error: undefined method `+' for nil:NilClass 하지만 오류.. 이런.. 불친절하게 어디가 문제인지 명확히 알려주지 않는다. 무작정 소스를 봤다. ruby를 아예 모르는 관계로 봐도 모르겠다. 하지만 nil 오류라고 하니 값이 없는 것이 문제라는 생각에 의심되는 부분들을 보다가 발견한 부분.. def render(context) lists = {} max, min = 1, 1 config = context.registers[:site].config category_dir = config['root'] + config['category_dir'] + '/' categories = context.registers[:site].categories categories.keys.sort_by{ |str| str.downcase }.each do |category| count = categories[category].count lists[category] = count max = count if count > max end 여기서 config['root'] 이 부분이 문제 였다. 내 _config.xml 파일에서는 "root:" 부분을 비워두었다. 하위 폴더를 사용하지 않기 때문에. 여기에 값이 없어서 오류. 그래서 "root: /"로 수정. 다시 시도. $ rake generate 이젠 된다. 카테고리 목록도 잘 나온다.]]></summary><content type="html"><![CDATA[<p>이번엔 옥토프레스에 category list 플러그인을 추가해 보았다.</p>
<p>사실 현재 시점에서 쓰고 있는 테마를 선택한 이유가 우측에 나오는 카테고리 목록이었다. 그런데 막상 테마를 설치한 후에도 카테고리 목록이 보이지 않았다. 처음엔 설정이 누락되어서 그렇다고 생각했고 시간이 없어서 그냥 두다가 오늘에서야 추가를 하고자 확인해 봤다.</p>
<p>현재 시점에 사용하고 있는 테마는 &quot;<a href="https://github.com/kAworu/octostrap3">octostrap3</a>&quot;다. 해당 소스를 뒤져서 aside에 추가하는 부분은 찾았으나 테마엔 그 파일이 없었다. 그럼 이사람은 없는 파일을 어떻게 불러서 쓴단 말인가?</p>
<p>알아보니 별도 플러그인을 추가해야만 했다.
<a href="https://github.com/ctdk/octopress-category-list">https://github.com/ctdk/octopress-category-list</a>
현재 내가 적용한 플러그인이다. 최근 업데이트가 시점이 오래되어 조금 미심쩍지만 대안이 없다.</p>
<p>일단 설명이 된대로 소스를 받아서 안내하는 경로에 집어 넣었다.
그리고 octostrap3에서 사용하던것 처럼 _config.xml 파일에 추가 했다.일단 사이드 영역에 &quot;custom/asides/category_list.html&quot;를 추가.</p>
<blockquote>
<p>default_asides: [asides/recent_posts.html, custom/asides/category_list.html, asides/github.html, asides/delicious.html, asides/pinboard.html, asides/googleplus.html]</p>
</blockquote>
<p>그리고는 정상적으로 적용이 되는지 확인.</p>
<pre class="hljs bash">$ rake generate
<span class="hljs-comment">## Generating Site with Jekyll</span>
Configuration file: /Volumes/Data/DropBox/blog/_config.yml
            Source: <span class="hljs-built_in">source</span>
       Destination: public/blog
      Generating...
  Liquid Exception: undefined method `+<span class="hljs-string">' for nil:NilClass in _layouts/page.html
jekyll 2.5.3 | Error:  undefined method `+'</span> <span class="hljs-keyword">for</span> nil:NilClass</pre>
<p>하지만 오류.. 이런.. 불친절하게 어디가 문제인지 명확히 알려주지 않는다. 무작정 소스를 봤다. ruby를 아예 모르는 관계로 봐도 모르겠다. 하지만 nil 오류라고 하니 값이 없는 것이 문제라는 생각에 의심되는 부분들을 보다가 발견한 부분..</p>
<pre class="hljs ruby"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">render</span><span class="hljs-params">(context)</span></span>
  lists = {}
  max, min = <span class="hljs-number">1</span>, <span class="hljs-number">1</span>
  config = context.registers[<span class="hljs-symbol">:site</span>].config
  category_dir = config[<span class="hljs-string">'root'</span>] + config[<span class="hljs-string">'category_dir'</span>] + <span class="hljs-string">'/'</span>
  categories = context.registers[<span class="hljs-symbol">:site</span>].categories
  categories.keys.sort_by{ <span class="hljs-params">|str|</span> str.downcase }.each <span class="hljs-keyword">do</span> <span class="hljs-params">|category|</span>
    count = categories[category].count
    lists[category] = count
    max = count <span class="hljs-keyword">if</span> count &gt; max
  <span class="hljs-keyword">end</span></pre>
<p>여기서 config['root'] 이 부분이 문제 였다. 내 _config.xml 파일에서는 &quot;root:&quot; 부분을 비워두었다. 하위 폴더를 사용하지 않기 때문에. 여기에 값이 없어서 오류. 그래서 &quot;root: /&quot;로 수정.</p>
<p>다시 시도.</p>
<pre class="hljs bash">$ rake generate</pre>
<p>이젠 된다. 카테고리 목록도 잘 나온다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/08/28/cocoapods-usage/</id><title type="html">CocoaPods 사용법</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/08/28/cocoapods-usage/"/><published>2015-08-28T06:34:30+09:00</published><updated>2015-08-28T06:34:30+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[설치 [sudo] gem install cocoapods pod setup 사용법 패키지 검색 http://cocoapods.org/ Podfile 설정 cd 프로젝트 폴더 vi Podfile 아래의 내용처럼 필요한 pod을 설정. platform :ios, '7.0' pod 'HZWebViewController', '~> 0.0.2' Pod 설치 pod install Pod 업데이트 pod update 실행 프로젝트명.xcworkspace 프로젝트명.xcodeproj가 아닌 프로젝트명.xcworkspace로 프로젝트를 열어야 정상적으로 빌드 및 실행이 된다. 참고 : http://www.shako.net/blog/archives/224]]></summary><content type="html"><![CDATA[<h2>설치</h2>
<pre class="hljs bash">[sudo] gem install cocoapods
pod setup</pre>
<h2>사용법</h2>
<h3>패키지 검색</h3>
<blockquote>
<p><a href="http://cocoapods.org/">http://cocoapods.org/</a></p>
</blockquote>
<h3>Podfile 설정</h3>
<pre class="hljs bash"><span class="hljs-built_in">cd</span> 프로젝트 폴더
vi Podfile</pre>
<p>아래의 내용처럼 필요한 pod을 설정.</p>
<pre><code>platform :ios, '7.0'
pod 'HZWebViewController', '~&gt; 0.0.2'</code></pre>
<h3>Pod 설치</h3>
<pre class="hljs bash">pod install</pre>
<h3>Pod 업데이트</h3>
<pre class="hljs bash">pod update</pre>
<h2>실행</h2>
<pre><code>프로젝트명.xcworkspace</code></pre>
<p>프로젝트명.xcodeproj가 아닌 프로젝트명.xcworkspace로 프로젝트를 열어야 정상적으로 빌드 및 실행이 된다.</p>
<blockquote>
<p>참고 : <a href="http://www.shako.net/blog/archives/224">http://www.shako.net/blog/archives/224</a></p>
</blockquote>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/08/28/android-getcolor-getdrawable-deprecated/</id><title type="html">Android 6(API 23)의 getColor() deprecated 대응 + getDrawable() deprecated</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/08/28/android-getcolor-getdrawable-deprecated/"/><published>2015-08-28T06:27:49+09:00</published><updated>2015-08-28T06:27:49+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[얼마전 Android API 23 버전이 공개되었다. 이와함께 support library, design support library도 함께 23 버전으로 버전업 되었다. 이에따라 여러가지 UI들이 추가되어 필요한 부분을 적용해 보고자 gradle을 수정하고 build 하니 getColor 함수가 deprecated 되었다는 warning을 보게되었다. 아... 최근에 안드로이드는 기본 함수들을 너무 많이 바꾼다. 사실 이번 버전업으로 이것뿐아니라 http 관련된 api가 제거 되었다. 이미 이전부터 deprecated 되었었긴하지만 너무 갑작스럽기도 하다. 현재시점에서 ACRA, android-async-http 등의 오픈소스들도 대응이 되지 않았다. 이에 따른 대응방법도 구글에 안내되어 있긴하다. Apache HTTP 클라이언트 제거 하지만 임시방편일 뿐 계속 사용하기엔 석연치 않다. 조금더 자세한 내용은 다음에 다시 글을 쓰도록 하겠다. (추가 포스팅 : Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거) 다시 본론으로 돌아와서 이 부분을 해결하기 위해서는 ContextCompat(android.support.v4.content.ContextCompat)을 사용하면 된다. 단, support library 23 이상이 필요할 수 있다. 이하에서는 확인을 못했다. 함수는 아래와 같이 구성되어 있다. public static final int getColor(Context context, int id) { final int version = Build.VERSION.SDK_INT; if (version >= 23) { return ContextCompatApi23.getColor(context, id); } else { return context.getResources().getColor(id); } } 실제사용은 ContextCompat.getColor(context, resourceId); 이렇게 하면된다. 어떻게보면 기존보다 더 편하다. 하지만 기존에 getColor를 사용하던 부분을 고치는 것은 우리가 해야한다. 추가로 보다 더 이전에 deprecated된 함수 getDrawable()가 있다. 이건 정확하지 않지만 API 21부터 deprecated 된 것 같다. 이 문제도 동일한 class를 통해 해결 가능하다. public static final Drawable getDrawable(Context context, int id) { final int version = Build.VERSION.SDK_INT; if (version >= 21) { return ContextCompatApi21.getDrawable(context, id); } else { return context.getResources().getDrawable(id); } } 요즘 분위기를 보면 이런식으로 deprecated 되는 함수가 많다. 사실 개인적으로 많은 것은 기존 안드로이드가 워낙 엉망이라고 보기 때문에 문제가 되지 않는다고 생각하지만 처리하는 과정은 맘에 들이 않는다. 한번에 싹 정리하지 않고 눈에 띄면 추가하듯 띄엄띄엄 deprecated 함수를 늘리고 실제 제거까지 오래 기다리지 않는다. 이건 꼭 새로운 버전을 사용하지 말라고 권장하는 것도 아니고 쓰라는 것도 아니고... 마지막으로 PhoneNumberUtils.formatNumber 함수 예기만 하나더 하자면 public static String formatNumber(String source); 이 함수도 deprecated 되었다. 이제는 두 번째 인자로 포멧팅할 국가 코드를 넣어야 한다. PhoneNumberUtils.formatNumber(number, "KR"); 그게 대응이 어려운 문제는 아니다. 하지만 위의 문제들과 더불어 굳이 deprecated 했어야 하는가? 하는 부분이다. 개인적인 생각으로 두 번째 인자를 생략하면 기존처럼 국가코드를 자동으로 넣으면 되지 않는가? 일부 다국어 지원 앱에서 조금더 명확한 사용을 하기 위해 대다수의 단일국가 지원 앱들이 불편을 감수해야하는가? 다음이 기존함수이다. @Deprecated public static String formatNumber(String source) { SpannableStringBuilder text = new SpannableStringBuilder(source); formatNumber(text, getFormatTypeForLocale(Locale.getDefault())); return text.toString(); } 보다시피 Locale.getDefault() 부분을 넣어주고 있었다. 어쨌든 나는 아래와 같은 호환 함수를 만들어서 사용하고 있다. static public String getFormattedPhoneNumber(String number) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { return PhoneNumberUtils.formatNumber(number, "KR"); } else { // noinspection deprecation return PhoneNumberUtils.formatNumber(number); } }]]></summary><content type="html"><![CDATA[<p>얼마전 Android API 23 버전이 공개되었다. 이와함께 support library, design support library도 함께 23 버전으로 버전업 되었다.</p>
<p>이에따라 여러가지 UI들이 추가되어 필요한 부분을 적용해 보고자 gradle을 수정하고 build 하니 getColor 함수가 deprecated 되었다는 warning을 보게되었다.</p>
<p>아... 최근에 안드로이드는 기본 함수들을 너무 많이 바꾼다. 사실 이번 버전업으로 이것뿐아니라 http 관련된  api가 제거 되었다. 이미 이전부터 deprecated 되었었긴하지만 너무 갑작스럽기도 하다.
현재시점에서 ACRA, android-async-http 등의 오픈소스들도 대응이 되지 않았다. 이에 따른 대응방법도 구글에 안내되어 있긴하다.</p>
<p><a href="https://developer.android.com/intl/ko/preview/behavior-changes.html#behavior-apache-http-client">Apache HTTP 클라이언트 제거</a></p>
<p>하지만 임시방편일 뿐 계속 사용하기엔 석연치 않다. 조금더 자세한 내용은 다음에 다시 글을 쓰도록 하겠다.
(추가 포스팅 : <a href="https://blog.asamaru.net/2015/09/25/android-6-apache-http-client-removal/">Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거</a>)</p>
<p>다시 본론으로 돌아와서 이 부분을 해결하기 위해서는 ContextCompat(android.support.v4.content.ContextCompat)을 사용하면 된다.
단, support library 23 이상이 필요할 수 있다. 이하에서는 확인을 못했다.</p>
<p>함수는 아래와 같이 구성되어 있다.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getColor</span><span class="hljs-params">(Context context, <span class="hljs-keyword">int</span> id)</span> </span>{
    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> version = Build.VERSION.SDK_INT;
    <span class="hljs-keyword">if</span> (version &gt;= <span class="hljs-number">23</span>) {
        <span class="hljs-keyword">return</span> ContextCompatApi23.getColor(context, id);
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">return</span> context.getResources().getColor(id);
    }
}</pre>
<p>실제사용은</p>
<pre class="hljs java">ContextCompat.getColor(context, resourceId);</pre>
<p>이렇게 하면된다. 어떻게보면 기존보다 더 편하다. 하지만 기존에 getColor를 사용하던 부분을 고치는 것은 우리가 해야한다.</p>
<p>추가로 보다 더 이전에 deprecated된 함수 getDrawable()가 있다. 이건 정확하지 않지만 API 21부터 deprecated 된 것 같다.
이 문제도 동일한 class를 통해 해결 가능하다.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Drawable <span class="hljs-title">getDrawable</span><span class="hljs-params">(Context context, <span class="hljs-keyword">int</span> id)</span> </span>{
    <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> version = Build.VERSION.SDK_INT;
    <span class="hljs-keyword">if</span> (version &gt;= <span class="hljs-number">21</span>) {
        <span class="hljs-keyword">return</span> ContextCompatApi21.getDrawable(context, id);
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">return</span> context.getResources().getDrawable(id);
    }
}</pre>
<p>요즘 분위기를 보면 이런식으로 deprecated 되는 함수가 많다. 사실 개인적으로 많은 것은 기존 안드로이드가 워낙 엉망이라고 보기 때문에 문제가 되지 않는다고 생각하지만 처리하는 과정은 맘에 들이 않는다.
한번에 싹 정리하지 않고 눈에 띄면 추가하듯 띄엄띄엄 deprecated 함수를 늘리고 실제 제거까지 오래 기다리지 않는다. 이건 꼭 새로운 버전을 사용하지 말라고 권장하는 것도 아니고 쓰라는 것도 아니고...</p>
<p>마지막으로 PhoneNumberUtils.formatNumber 함수 예기만 하나더 하자면</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">formatNumber</span><span class="hljs-params">(String source)</span></span>;</pre>
<p>이 함수도 deprecated 되었다. 이제는 두 번째 인자로 포멧팅할 국가 코드를 넣어야 한다.</p>
<pre class="hljs java">PhoneNumberUtils.formatNumber(number, <span class="hljs-string">"KR"</span>);</pre>
<p>그게 대응이 어려운 문제는 아니다. 하지만 위의 문제들과 더불어 굳이 deprecated 했어야 하는가? 하는 부분이다.
개인적인 생각으로 두 번째 인자를 생략하면 기존처럼 국가코드를 자동으로 넣으면 되지 않는가? 일부 다국어 지원 앱에서 조금더 명확한 사용을 하기 위해 대다수의 단일국가 지원 앱들이 불편을 감수해야하는가?
다음이 기존함수이다.</p>
<pre class="hljs java"><span class="hljs-meta">@Deprecated</span>
<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">formatNumber</span><span class="hljs-params">(String source)</span> </span>{
    SpannableStringBuilder text = <span class="hljs-keyword">new</span> SpannableStringBuilder(source);
    formatNumber(text, getFormatTypeForLocale(Locale.getDefault()));
    <span class="hljs-keyword">return</span> text.toString();
}</pre>
<p>보다시피 <code>Locale.getDefault()</code> 부분을 넣어주고 있었다. 어쨌든 나는 아래와 같은 호환 함수를 만들어서 사용하고 있다.</p>
<pre class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> String <span class="hljs-title">getFormattedPhoneNumber</span><span class="hljs-params">(String number)</span> </span>{
    <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {
        <span class="hljs-keyword">return</span> PhoneNumberUtils.formatNumber(number, <span class="hljs-string">"KR"</span>);
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-comment">// noinspection deprecation</span>
        <span class="hljs-keyword">return</span> PhoneNumberUtils.formatNumber(number);
    }
}</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/08/27/android-viewpager-setid/</id><title type="html">Android ViewPager를 직접 생성시 android.content.res.Resources$NotFoundException: Unable to find resource ID #0xffffffff 오류 발생</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/08/27/android-viewpager-setid/"/><published>2015-08-27T10:56:56+09:00</published><updated>2015-08-27T10:56:56+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[일반적으로 ViewPager 사용시 layout xml에서 정의해서 사용한다. 하지만 간혹 필요에 따라 ViewPager을 프로그램으로 생성해서 사용하는 경우 있다. ViewPager viewPager = new ViewPager(this); 그런데 이렇게 사용할 경우 아래와 같은 오류를 만나게 된다. android.content.res.Resources$NotFoundException: Unable to find resource ID #0xffffffff at android.content.res.Resources.getResourceName(Resources.java:3216) at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1008) at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1197) at android.support.v4.app.BackStackRecord.run(BackStackRecord.java:738) at android.support.v4.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:1562) at android.support.v4.app.FragmentManagerImpl.executePendingTransactions(FragmentManager.java:535) at android.support.v4.app.FragmentPagerAdapter.finishUpdate(FragmentPagerAdapter.java:141) at android.support.v4.view.ViewPager.populate(ViewPager.java:1106) at android.support.v4.view.ViewPager.populate(ViewPager.java:952) at android.support.v4.view.ViewPager.onMeasure(ViewPager.java:1474) at android.view.View.measure(View.java:18573) ... 처음엔 웬 리소스를 못 찾는다는 에러가 나오는지 한참을 헤맸다. 결국 알아낸 문제는 사실 개인적으로 조금 어이가 없었다. xml에서 정의된 ViewPager는 인스턴스화되면서 임시 id가 알아서 지정되는 것으로 보이나 프로그램에서 생성한 ViewPager는 그 과정이 누락되는 것이다. 어이없는 상황. 그러나 해결법은 간단하다. id를 지정해 주면 된다. 그래서 아래처럼 해봤다. ViewPager viewPager = new ViewPager(this); viewPager.setId(1); 하지만 그렇게 간단히 해결되면 안드로이드가 아니지... 그래서 다음과 같은 방법으로 id를 생성해 주어야 한다. public class IdGen { final static private AtomicInteger sNextGeneratedId = new AtomicInteger(1); static private int _generateViewId() { for (; ; ) { final int result = sNextGeneratedId.get(); // aapt-generated IDs have the high byte nonzero; clamp to the range under that. int newValue = result + 1; if (newValue > 0x00FFFFFF) newValue = 1; // Roll over to 1, not 0. if (sNextGeneratedId.compareAndSet(result, newValue)) { return result; } } } static public int generateViewId() { if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) { return _generateViewId(); } else { return View.generateViewId(); } } } ViewPager viewPager = new ViewPager(this); viewPager.setId(IdGen.generateViewId()); 드디어 이상없이 동작한다.]]></summary><content type="html"><![CDATA[<p>일반적으로 ViewPager 사용시 layout xml에서 정의해서 사용한다.
하지만 간혹 필요에 따라 ViewPager을 프로그램으로 생성해서 사용하는 경우 있다.</p>
<pre class="hljs java">ViewPager viewPager = <span class="hljs-keyword">new</span> ViewPager(<span class="hljs-keyword">this</span>);</pre>
<p>그런데 이렇게 사용할 경우 아래와 같은 오류를 만나게 된다.</p>
<pre class="hljs java">android.content.res.Resources$NotFoundException: Unable to find resource ID #<span class="hljs-number">0xffffffff</span>
            at android.content.res.Resources.getResourceName(Resources.java:<span class="hljs-number">3216</span>)
            at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:<span class="hljs-number">1008</span>)
            at android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:<span class="hljs-number">1197</span>)
            at android.support.v4.app.BackStackRecord.run(BackStackRecord.java:<span class="hljs-number">738</span>)
            at android.support.v4.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:<span class="hljs-number">1562</span>)
            at android.support.v4.app.FragmentManagerImpl.executePendingTransactions(FragmentManager.java:<span class="hljs-number">535</span>)
            at android.support.v4.app.FragmentPagerAdapter.finishUpdate(FragmentPagerAdapter.java:<span class="hljs-number">141</span>)
            at android.support.v4.view.ViewPager.populate(ViewPager.java:<span class="hljs-number">1106</span>)
            at android.support.v4.view.ViewPager.populate(ViewPager.java:<span class="hljs-number">952</span>)
            at android.support.v4.view.ViewPager.onMeasure(ViewPager.java:<span class="hljs-number">1474</span>)
            at android.view.View.measure(View.java:<span class="hljs-number">18573</span>)
...</pre>
<p>처음엔 웬 리소스를 못 찾는다는 에러가 나오는지 한참을 헤맸다.
결국 알아낸 문제는 사실 개인적으로 조금 어이가 없었다. xml에서 정의된 ViewPager는 인스턴스화되면서 임시 id가 알아서 지정되는 것으로 보이나 프로그램에서 생성한 ViewPager는 그 과정이 누락되는 것이다.
어이없는 상황. 그러나 해결법은 간단하다. id를 지정해 주면 된다.</p>
<p>그래서 아래처럼 해봤다.</p>
<pre class="hljs java">ViewPager viewPager = <span class="hljs-keyword">new</span> ViewPager(<span class="hljs-keyword">this</span>);
viewPager.setId(<span class="hljs-number">1</span>);</pre>
<p>하지만 그렇게 간단히 해결되면 안드로이드가 아니지...
그래서 다음과 같은 방법으로 id를 생성해 주어야 한다.</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IdGen</span> </span>{
    <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> AtomicInteger sNextGeneratedId = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">1</span>);

    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">_generateViewId</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">for</span> (; ; ) {
            <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> result = sNextGeneratedId.get();
            <span class="hljs-comment">// aapt-generated IDs have the high byte nonzero; clamp to the range under that.</span>
            <span class="hljs-keyword">int</span> newValue = result + <span class="hljs-number">1</span>;
            <span class="hljs-keyword">if</span> (newValue &gt; <span class="hljs-number">0x00FFFFFF</span>) newValue = <span class="hljs-number">1</span>; <span class="hljs-comment">// Roll over to 1, not 0.</span>
            <span class="hljs-keyword">if</span> (sNextGeneratedId.compareAndSet(result, newValue)) {
                <span class="hljs-keyword">return</span> result;
            }
        }
    }

    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">generateViewId</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.JELLY_BEAN_MR1) {
            <span class="hljs-keyword">return</span> _generateViewId();
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> View.generateViewId();
        }
    }
}</pre>
<pre class="hljs java">ViewPager viewPager = <span class="hljs-keyword">new</span> ViewPager(<span class="hljs-keyword">this</span>);
viewPager.setId(IdGen.generateViewId());</pre>
<p>드디어 이상없이 동작한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/08/20/octopress-rake-deploy-error/</id><title type="html">옥토프레스 rake deploy에서 오류가 날 경우</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/08/20/octopress-rake-deploy-error/"/><published>2015-08-20T22:56:20+09:00</published><updated>2015-08-20T22:56:20+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="octopress" label="octopress" /><summary><![CDATA[옥토프레스를 설치하고 테스트 포스팅을 한 후 본격적으로 세팅을 하려고 시작했다. 도메인도 세팅하고 구글 어날리틱스, disqus 등도 연결을 하고자 _config.xml 파일을 수정하고 몇가지 글도 포스팅하려고 저장 후 generate 했다. 이제 배포를 하려고 rake deploy를 하니 아래와 같은 오류가 나타났다. To https://github.com/asamaru7/blog.git ! [rejected] gh-pages -> gh-pages (non-fast-forward) error: failed to push some refs to 'https://github.com/asamaru7/blog.git' hint: Updates were rejected because the tip of your current branch is behind hint: its remote counterpart. Integrate the remote changes (e.g. hint: 'git pull ...') before pushing again. hint: See the 'Note about fast-forwards' in 'git push --help' for details. 구글에서 검색해서 여러가지 방법들을 따라 시도해도 진행이 되지 않다가 발견한 stackoverflow에서 강제 업데이트하는 방법을 안내하고 있었다. vi Rakefile Rakefile을 열어 deploy_branch로 검색하다 보면 아래와 같은 부분을 볼 수 있다. desc "deploy public directory to github pages" multitask :push do puts "## Deploying branch to Github Pages " puts "## Pulling any updates from Github Pages " cd "#{deploy_dir}" do Bundler.with_clean_env { system "git pull" } end (Dir["#{deploy_dir}/*"]).each { |f| rm_rf(f) } Rake::Task[:copydot].invoke(public_dir, deploy_dir) puts "\n## Copying #{public_dir} to #{deploy_dir}" cp_r "#{public_dir}/.", deploy_dir cd "#{deploy_dir}" do system "git add -A" message = "Site updated at #{Time.now.utc}" puts "\n## Committing: #{message}" system "git commit -m \"#{message}\"" puts "\n## Pushing generated #{deploy_dir} website" Bundler.with_clean_env { system "git push origin #{deploy_branch}" } puts "\n## Github Pages deploy complete" end end 여기서 고칠 부분은 Bundler.with_clean_env { system "git push origin #{deploy_branch}" } 이 부분이다. #{deploy_branch}" 앞에 +를 붙여준다. Bundler.with_clean_env { system "git push origin #{deploy_branch}" } 이제 저장후 나와서 다시 deploy... ## Pushing generated _deploy website Counting objects: 36, done. Delta compression using up to 4 threads. Compressing objects: 100% (27/27), done. Writing objects: 100% (36/36), 12.90 KiB | 0 bytes/s, done. Total 36 (delta 14), reused 0 (delta 0) To https://github.com/asamaru7/blog.git + 9295247...d6c0b14 gh-pages -> gh-pages (forced update) 이번엔 gh-pages (forced update) 안내를 보여주며 push 성공.]]></summary><content type="html"><![CDATA[<p>옥토프레스를 설치하고 테스트 포스팅을 한 후 본격적으로 세팅을 하려고 시작했다.
도메인도 세팅하고 구글 어날리틱스, disqus 등도 연결을 하고자 _config.xml 파일을 수정하고 몇가지 글도 포스팅하려고 저장 후 generate 했다.</p>
<p>이제 배포를 하려고 rake deploy를 하니 아래와 같은 오류가 나타났다.</p>
<pre class="hljs bash">To https://github.com/asamaru7/blog.git
 ! [rejected]        gh-pages -&gt; gh-pages (non-fast-forward)
error: failed to push some refs to <span class="hljs-string">'https://github.com/asamaru7/blog.git'</span>
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: <span class="hljs-string">'git pull ...'</span>) before pushing again.
hint: See the <span class="hljs-string">'Note about fast-forwards'</span> <span class="hljs-keyword">in</span> <span class="hljs-string">'git push --help'</span> <span class="hljs-keyword">for</span> details.</pre>
<p>구글에서 검색해서 여러가지 방법들을 따라 시도해도 진행이 되지 않다가 발견한 stackoverflow에서 강제 업데이트하는 방법을 안내하고 있었다.</p>
<pre class="hljs bash">vi Rakefile</pre>
<p>Rakefile을 열어 deploy_branch로 검색하다 보면 아래와 같은 부분을 볼 수 있다.</p>
<pre class="hljs ruby">desc <span class="hljs-string">"deploy public directory to github pages"</span>
multitask <span class="hljs-symbol">:push</span> <span class="hljs-keyword">do</span>
  puts <span class="hljs-string">"## Deploying branch to Github Pages "</span>
  puts <span class="hljs-string">"## Pulling any updates from Github Pages "</span>
  cd <span class="hljs-string">"<span class="hljs-subst">#{deploy_dir}</span>"</span> <span class="hljs-keyword">do</span>
    Bundler.with_clean_env { system <span class="hljs-string">"git pull"</span> }
  <span class="hljs-keyword">end</span>
  (Dir[<span class="hljs-string">"<span class="hljs-subst">#{deploy_dir}</span>/*"</span>]).each { <span class="hljs-params">|f|</span> rm_rf(f) }
  Rake::Task[<span class="hljs-symbol">:copydot</span>].invoke(public_dir, deploy_dir)
  puts <span class="hljs-string">"\n## Copying <span class="hljs-subst">#{public_dir}</span> to <span class="hljs-subst">#{deploy_dir}</span>"</span>
  cp_r <span class="hljs-string">"<span class="hljs-subst">#{public_dir}</span>/."</span>, deploy_dir
  cd <span class="hljs-string">"<span class="hljs-subst">#{deploy_dir}</span>"</span> <span class="hljs-keyword">do</span>
    system <span class="hljs-string">"git add -A"</span>
    message = <span class="hljs-string">"Site updated at <span class="hljs-subst">#{Time.now.utc}</span>"</span>
    puts <span class="hljs-string">"\n## Committing: <span class="hljs-subst">#{message}</span>"</span>
    system <span class="hljs-string">"git commit -m \"<span class="hljs-subst">#{message}</span>\""</span>
    puts <span class="hljs-string">"\n## Pushing generated <span class="hljs-subst">#{deploy_dir}</span> website"</span>
    Bundler.with_clean_env { system <span class="hljs-string">"git push origin <span class="hljs-subst">#{deploy_branch}</span>"</span> }
    puts <span class="hljs-string">"\n## Github Pages deploy complete"</span>
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span></pre>
<p>여기서 고칠 부분은 <code>Bundler.with_clean_env { system "git push origin #{deploy_branch}" }</code> 이 부분이다.
<code>#{deploy_branch}"</code> 앞에 +를 붙여준다.</p>
<pre class="hljs ruby">Bundler.with_clean_env { system <span class="hljs-string">"git push origin <span class="hljs-subst">#{deploy_branch}</span>"</span> }</pre>
<p>이제 저장후 나와서 다시 deploy...</p>
<pre class="hljs bash"><span class="hljs-comment">## Pushing generated _deploy website</span>
Counting objects: 36, <span class="hljs-keyword">done</span>.
Delta compression using up to 4 threads.
Compressing objects: 100% (27/27), <span class="hljs-keyword">done</span>.
Writing objects: 100% (36/36), 12.90 KiB | 0 bytes/s, <span class="hljs-keyword">done</span>.
Total 36 (delta 14), reused 0 (delta 0)
To https://github.com/asamaru7/blog.git
 + 9295247...d6c0b14 gh-pages -&gt; gh-pages (forced update)</pre>
<p>이번엔 gh-pages (forced update) 안내를 보여주며 push 성공.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2015/08/19/octopress-install/</id><title type="html">Octopress 설치</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2015/08/19/octopress-install/"/><published>2015-08-19T23:29:26+09:00</published><updated>2015-08-19T23:29:26+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="octopress" label="octopress" /><summary><![CDATA[Octopress 설치 Octopress는 Jekyll을 위해 디자인된 프레임워크다. Jekyll은 Github pages를 이용한 정적 블로깅 엔진으로 무료로 블로그 사이트를 생성할 수 있다. 하지만 해커들을 위한 블로깅 프레임워크이라고도 불리는 Jekyll은 사용이 그리 간단하지만은 않다. 자세한 내용은 검색하면 많이 찾을 수 있으니 그만 넘어가자. 기본 설치 Octopress에 안내된 설치방법은 아래의 사이트를 참고하자. http://octopress.org/docs/setup/ 하지만 위의 설명대로 잘 되지 않는다면 아래의 내용을 참고해 볼수도 있다. 나의 경우엔 설치가 그리 쉽지만은 않았다. 우선 설치 환경은 osx 10.10 기준이다. 이미 git, brew 등은 설치가 되어있었기 때문에 rvm으로 ruby 1.9.3을 설치하려고 했으나 아래와 같은 오류를 만났다. 오류 : requirements_osx_brew_libs_install gcc49 openssl $ sudo rvm install 1.9.3 Searching for binary rubies, this might take some time. No binary rubies available for: osx/10.10/x86_64/ruby-1.9.3-p551. Continuing with compilation. Please read 'rvm help mount' to get more information on binary rubies. Checking requirements for osx. Installing requirements for osx. Updating system..... Installing required packages: gcc49, openssl.... Error running 'requirements_osx_brew_libs_install gcc49 openssl', showing last 15 lines of /Users/yyj/.rvm/log/1439982916_ruby-1.9.3-p551/package_install_gcc49_openssl.log ++ case "$1" in ++ [[ -t 1 ]] ++ return 1 ++ printf %b 'There were package installation errors, make sure to read the log. Try `brew tap --repair` and make sure `brew doctor` looks reasonable. Check Homebrew requirements https://github.com/Homebrew/homebrew/wiki/Installation\n' There were package installation errors, make sure to read the log. Try `brew tap --repair` and make sure `brew doctor` looks reasonable. Check Homebrew requirements https://github.com/Homebrew/homebrew/wiki/Installation ++ case "$_system_version" in ++ return 1 Requirements installation failed with status: 1. 우선 안내에 나온대로 brew tap --repair와 brew doctor를 실행해서 안내하는대로 처리를 완료했음에도 문제는 해결이 되지 않았다. 그래서 다음과 같이 rvm에서 필요로하는 lib을 먼저 설치했다. $ rvm get head --autolibs=3 $ rvm requirements 재시도 ... $ sudo rvm install 1.9.3 이번엔 오류가 나지않고 ruby를 다운로드 시작... 그러나 엄청나게 느림... 중간에 끊어짐... 이런... 오랜 기다림 끝에 이제 ruby 1.9.3 설치 완료. 이제 ruby 1.9.3을 사용하도록 하고... $ rvm use 1.9.3 $ rvm rubygems latest 그다음은 공식 사이트 설명대로... 단, Octopress를 clone 받은 경로로 가서... $ gem install bundler 이번엔 그냥 넘아가나 했더니 아래와 같은 오류... ERROR: Could not find a valid gem 'bundler' (>= 0), here is why: Unable to download data from https://rubygems.org/ - server did not return a valid file (https://rubygems.org/latest_specs.4.8.gz) 이번에도 아래와 같이 하고... $ rvm use 1.9.3 Using /Users/yyj/.rvm/gems/ruby-1.9.3-p551 $ rvm rubygems latest 재시도... $ gem install bundler 이번엔 퍼미션 에러... $ sudo gem install bundler 드디어 설치. $ rbenv rehash # 이건 필요시에만 한다고하니 명령이 없다는 오류가 나면 무시 $ bundle install 이번에도 bundle install에서 퍼미션 에러... $ sudo bundle install 아.. 드디어 기본 설치 완료 테마설치 기본 테마 설치 $ rake install 다른 테마를 원한다면 https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes 에 가서 고르면 된다. 설치는 다음과 같이 $ git clone https://github.com/~~~.git .themes/테마이름 $ rake install['테마이름'] octostrap3 테마 적용 예시. $ git clone https://github.com/kAworu/octostrap3.git .themes/octostrap3 $ rake install["octostrap3"] 설정 아래와 같이 명령을 실행하고 생성해둔 github 프로젝트 주소를 넣으면 설치는 완료된다. $ rake setup_github_pages Enter the read/write url for your repository (For example, 'git@github.com:your_username/your_username.github.io.git) or 'https://github.com/your_username/your_username.github.io') Repository url: https://github.com/~~~/~~~.git 배포 아직 작성한 글이 아무것도 없지만 일단 deploy 해본다. $ rake generate $ rake deploy deploy를 하고나면 기본적으로 생성해 주는 아주 간단한 index.html 파일이 push되어 있는 것을 볼 수 있다. 이제 페이지가 정상적으로 뜨는지만 확인하면 기본 설치는 모두 완료. repository 연결 블로그는 gh-pages branch로 연결되어 있으니 원소스를 master로 연결하여 백업의 역할을 할 수 있도록 설정해보자. $ git remote add origin https://github.com/~~~/~~~.git $ git config branch.master.remote origin $ git push 독립 도메인 연결 이왕이면 내 도메인도 연결해보자. 아래의 명령은 CNAME 파일을 통해 도메인 연결을 github에 알려주는 것으로 이후 deploy가 될 때 이 파일이 함께 배포되면 적용된다. 단, 도메인을 변경했으므로 이에 맞춰 _config.yml 파일도 함께 수정해야 한다. $ echo 'blog.asamaru.net' >> source/CNAME]]></summary><content type="html"><![CDATA[<h1>Octopress 설치</h1>
<p><a href="http://octopress.org/">Octopress</a>는 <a href="http://jekyllrb.com/">Jekyll</a>을 위해 디자인된 프레임워크다.
Jekyll은 Github pages를 이용한 정적 블로깅 엔진으로 무료로 블로그 사이트를 생성할 수 있다.
하지만 해커들을 위한 블로깅 프레임워크이라고도 불리는 Jekyll은 사용이 그리 간단하지만은 않다.
자세한 내용은 검색하면 많이 찾을 수 있으니 그만 넘어가자.</p>
<h2>기본 설치</h2>
<p>Octopress에 안내된 설치방법은 아래의 사이트를 참고하자.
<a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></p>
<p>하지만 위의 설명대로 잘 되지 않는다면 아래의 내용을 참고해 볼수도 있다. 나의 경우엔 설치가 그리 쉽지만은 않았다.</p>
<p>우선 설치 환경은 osx 10.10 기준이다.</p>
<p>이미 git, brew 등은 설치가 되어있었기 때문에 rvm으로 ruby 1.9.3을 설치하려고 했으나 아래와 같은 오류를 만났다.</p>
<h3>오류 : requirements_osx_brew_libs_install gcc49 openssl</h3>
<pre class="hljs bash">$ sudo rvm install 1.9.3
Searching <span class="hljs-keyword">for</span> binary rubies, this might take some time.
No binary rubies available <span class="hljs-keyword">for</span>: osx/10.10/x86_64/ruby-1.9.3-p551.
Continuing with compilation. Please <span class="hljs-built_in">read</span> <span class="hljs-string">'rvm help mount'</span> to get more information on binary rubies.
Checking requirements <span class="hljs-keyword">for</span> osx.
Installing requirements <span class="hljs-keyword">for</span> osx.
Updating system.....
Installing required packages: gcc49, openssl....
Error running <span class="hljs-string">'requirements_osx_brew_libs_install gcc49 openssl'</span>,
showing last 15 lines of /Users/yyj/.rvm/<span class="hljs-built_in">log</span>/1439982916_ruby-1.9.3-p551/package_install_gcc49_openssl.log
++ <span class="hljs-keyword">case</span> <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> <span class="hljs-keyword">in</span>
++ [[ -t 1 ]]
++ <span class="hljs-built_in">return</span> 1
++ <span class="hljs-built_in">printf</span> %b <span class="hljs-string">'There were package installation errors, make sure to read the log.

Try `brew tap --repair` and make sure `brew doctor` looks reasonable.

Check Homebrew requirements https://github.com/Homebrew/homebrew/wiki/Installation\n'</span>
There were package installation errors, make sure to <span class="hljs-built_in">read</span> the <span class="hljs-built_in">log</span>.

Try `brew tap --repair` and make sure `brew doctor` looks reasonable.

Check Homebrew requirements https://github.com/Homebrew/homebrew/wiki/Installation
++ <span class="hljs-keyword">case</span> <span class="hljs-string">"<span class="hljs-variable">$_system_version</span>"</span> <span class="hljs-keyword">in</span>
++ <span class="hljs-built_in">return</span> 1
Requirements installation failed with status: 1.
</pre>
<p>우선 안내에 나온대로 <code>brew tap --repair</code>와 <code>brew doctor</code>를 실행해서 안내하는대로 처리를 완료했음에도 문제는 해결이 되지 않았다.
그래서 다음과 같이 rvm에서 필요로하는 lib을 먼저 설치했다.</p>
<pre class="hljs bash">$ rvm get head --autolibs=3
$ rvm requirements</pre>
<p>재시도 ...</p>
<pre class="hljs bash">$ sudo rvm install 1.9.3</pre>
<p>이번엔 오류가 나지않고 ruby를 다운로드 시작... 그러나 엄청나게 느림... 중간에 끊어짐... 이런...
오랜 기다림 끝에 이제 ruby 1.9.3 설치 완료.
이제 ruby 1.9.3을 사용하도록 하고...</p>
<pre class="hljs bash">$ rvm use 1.9.3
$ rvm rubygems latest</pre>
<p>그다음은 공식 사이트 설명대로... 단, Octopress를 clone 받은 경로로 가서...</p>
<pre class="hljs bash">$ gem install bundler</pre>
<p>이번엔 그냥 넘아가나 했더니 아래와 같은 오류...</p>
<pre class="hljs bash">ERROR:  Could not find a valid gem <span class="hljs-string">'bundler'</span> (&gt;= 0), here is why:
          Unable to download data from https://rubygems.org/ - server did not <span class="hljs-built_in">return</span> a valid file (https://rubygems.org/latest_specs.4.8.gz)</pre>
<p>이번에도 아래와 같이 하고...</p>
<pre class="hljs bash">$ rvm use 1.9.3
Using /Users/yyj/.rvm/gems/ruby-1.9.3-p551
$ rvm rubygems latest</pre>
<p>재시도...</p>
<pre class="hljs bash">$ gem install bundler</pre>
<p>이번엔 퍼미션 에러...</p>
<pre class="hljs bash">$ sudo gem install bundler</pre>
<p>드디어 설치.</p>
<pre class="hljs bash">$ rbenv <span class="hljs-built_in">rehash</span> <span class="hljs-comment"># 이건 필요시에만 한다고하니 명령이 없다는 오류가 나면 무시</span>
$ bundle install</pre>
<p>이번에도 <code>bundle install</code>에서 퍼미션 에러...</p>
<pre class="hljs bash">$ sudo bundle install</pre>
<p>아.. 드디어 기본 설치 완료</p>
<h2>테마설치</h2>
<p>기본 테마 설치</p>
<pre class="hljs bash">$ rake install</pre>
<p>다른 테마를 원한다면 <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a> 에 가서 고르면 된다.</p>
<p>설치는 다음과 같이</p>
<pre class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/~~~.git .themes/테마이름
$ rake install[<span class="hljs-string">'테마이름'</span>]</pre>
<p>octostrap3 테마 적용 예시.</p>
<pre class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/kAworu/octostrap3.git .themes/octostrap3
$ rake install[<span class="hljs-string">"octostrap3"</span>]</pre>
<h2>설정</h2>
<p>아래와 같이 명령을 실행하고 생성해둔 github 프로젝트 주소를 넣으면 설치는 완료된다.</p>
<pre class="hljs bash">$ rake setup_github_pages
Enter the <span class="hljs-built_in">read</span>/write url <span class="hljs-keyword">for</span> your repository
(For example, <span class="hljs-string">'git@github.com:your_username/your_username.github.io.git)
           or '</span>https://github.com/your_username/your_username.github.io<span class="hljs-string">')
Repository url: https://github.com/~~~/~~~.git</span></pre>
<h2>배포</h2>
<p>아직 작성한 글이 아무것도 없지만 일단 deploy 해본다.</p>
<pre class="hljs bash">$ rake generate
$ rake deploy</pre>
<p>deploy를 하고나면 기본적으로 생성해 주는 아주 간단한 index.html 파일이 push되어 있는 것을 볼 수 있다.</p>
<p>이제 페이지가 정상적으로 뜨는지만 확인하면 기본 설치는 모두 완료.</p>
<h2>repository 연결</h2>
<p>블로그는 gh-pages branch로 연결되어 있으니 원소스를 master로 연결하여 백업의 역할을 할 수 있도록 설정해보자.</p>
<pre class="hljs bash">$ git remote add origin https://github.com/~~~/~~~.git
$ git config branch.master.remote origin

$ git push</pre>
<h2>독립 도메인 연결</h2>
<p>이왕이면 내 도메인도 연결해보자. 아래의 명령은 CNAME 파일을 통해 도메인 연결을 github에 알려주는 것으로 이후 deploy가 될 때 이 파일이 함께 배포되면 적용된다. 단, 도메인을 변경했으므로 이에 맞춰 _config.yml 파일도 함께 수정해야 한다.</p>
<pre class="hljs bash">$ <span class="hljs-built_in">echo</span> <span class="hljs-string">'blog.asamaru.net'</span> &gt;&gt; <span class="hljs-built_in">source</span>/CNAME</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2012/10/03/android-tap-highlight-layer/</id><title type="html">안드로이드 tap highlight 레이어로 대체하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2012/10/03/android-tap-highlight-layer/"/><published>2012-10-03T06:22:02+09:00</published><updated>2012-10-03T06:22:02+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[오늘은 지난번 -webkit-tap-highlight-color 사용하기 에서 얘기했던 안드로이드 tap highlight 버그를 회피할 수 있는 방법에 대해 포스팅하고자 한다. 일단 기본적인 아이디어는 이렇다. webkit 브라우저는 기본적으로 tap highlight를 숨길 수 있으므로 tap highlight를 투명하게 변경하고 해당 링크의 위치에 원하는 모양의 레이어를 띄우는 것이다. 여기서 또 다른 문제를 함께 해결해야 하는데, 삼성 갤럭시 계열의 스마트폰에서는 숨기는 것 조차 안된다는 것. 그래서 조금 더 꼼수를 부려야 한다. tap highlight가 된다는 것은 결국 이벤트가 전달되기 때문이므로 브라우저에 전달될 이벤트를 가로채서 필요한 처리를 하고 브라우저에게는 이벤트를 전달하지 않는 것이다. (왜 이런 짓을 해야하는지는 위에 링크한 포스팅을 참고바람) 그럼 하나씩 처리 방법을 정리 해보자. 터치를 지원하는 기기는 mousedown, mouseup에 대응되는 touchstart, touchend라는 이벤트가 있다. (사실 대응된다고 하기엔 차이가 있긴하다. 하지만 이해를 쉽게하기 위해 그냥 그렇게 생각하자.) 이 touchstart 이벤트를 사용해서 click 이벤트가 발생하는 것을 막을 수 있다. (touchstart가 발생하지 않으면 click 이벤트도 발생하지 않는다.) 그래서 먼저 안드로이드 기기에서 테스트 다음과 같이 테스트를 해봤다. 링크 객체에서 touchstart 이벤트를 받아 이벤트 버블링과 캡쳐링을 제거하여 이벤트를 전달하지 않고 상위 부모에게 이벤트를 trigger로 강제 생성했다. 결과는.. tap highlight 가 숨겨지지 않았다. 이런 삼성... 사실 특별한 경우가 아니라면 이벤트를 부모에게 전달하지 않아도 된다. click과 같은 효과만 내면 되므로. 하지만 경우에 따라 부모가 touchstart를 받아야 하는 상황이 자주 발생할 수 있다. 부모를 한단계씩 건너뛰며 테스트 해볼 수 있지만 시간 관계상 나는 바로 touchstart를 받아야하는 객체에게 바로 trigger 했다. 결과는 일단 성공. touchstart는 정상적으로 동작하고 tap highlight는 보여지지 않았다. 이제 남은 작업은 링크 객체에 tap highlight를 대신할 레이어를 띄우는 것과 click 이벤트를 대체하는 것이다. 우선 click 이벤트를 대체하는 것에 대해서 생각해보자. 간단하게 생각해서 touchstart에서 바로 click 시 동작할 일을 수행해도 된다. 하지만 이것은 실제 click과 다르다. 테스트 해보면 알겠지만 click은 손가락이 화면에서 떨어질 때 발생한다. 따라서 touchend에서 click 이벤트를 대체해야 한다는 것이다. 문제는 여기서 끝나지 않는다. 터치를 시작하고 swife한 다음 터치를 종료하면 click 이벤트는 발생되지 않아야 한다. 이 문제를 해결하기 위해 touchstart에서 좌표를 기억하고 touchend에서 좌표를 검사하여 swife 되었는지를 확인하고 click 이벤트를 대체해야 한다. 그런데 문제는 끝이 없다. touchstart에서는 좌표를 받을 수 있으나 touchend에서는 좌표를 받을 수 없다. 따라서 touchmove 이벤트에서 좌표의 변경을 추적해야 한다. 다음으로 링크 객체의 위에 tap highlight 대신 레이어를 올리는 방법이다. 이 부분은 간단할 것 같지만 한가지 문제가 있다. 정확하게 링크 객체의 위에 레이어를 올리려면 객체의 위치를 알아야 한다는 것. 이 부분도 여러가지 방법을 통해 알아낼 수 있지만 부모 중에 position:relative 속성을 가진 경우 등 신경써야 할 것이 많다. 하지만 아주 간단한 방법이 있다. 링크 객체의 앞에 레이어 객체를 넣고 position:absolute를 주면 레이어는 공간을 차지하지 않으므로 링크 객체의 위치는 유지되면서도 동일한 좌표에 위치 시킬 수 있다. 단, 당연히 top, left를 따로 지정하지 않아야 한다. 그리고 객체 사이즈는 간단히 구할 수 있으므로 사이즈만 지정해 주면 완료. top, left css 속성을 줄 수 없으므로 상대적인 위치 등의 조정은 margin으로 하면 된다. (예를들어 margin:-2px 0 0 -2px, width:+2px, height:+2px 이런 방법으로 링크객체보다 사방으로 2px 큰 레이어를 정확하게 위치 시킬 수 있다.) 아주 상세히 설명하자면 더 해야 겠지만 이 정도면 원리 정도는 설명했다고 생각된다. 혹 이해가 안되는 부분은 블로그로 문의 바란다. 자 그럼 소스를 첨부한다. 정리를 해야 겠지만 시간 관계상... (그리고 jquery는 기본적으로 사용한다는 가정하에서 제작된 소스다. jquery를 사용하지 않는다면 사용 부분은 수정이 필요하다. 사실 jquery 문제가 아니더라도 범용으로 사용하기 위해 제작되 것이 아니므로 그냥 그대로 가져다 쓸 수는 없으니 참고로만 보면 된다.) css 소스 .p_tap_highlight { position:absolute; background-color:#333; -moz-opacity:.30; filter:alpha(opacity=30); opacity:.30; } js 소스 (function() { var isAndroid = (navigator.userAgent.toLowerCase().indexOf("android") > -1); //&& ua.indexOf("mobile"); if(isAndroid) { // 안드로이드 계열에서 탭 하이라이트 위치가 맞지 않아 프로그램으로 대체 // 탭 하이라이트 숨김 : 삼성 계열은 소용없음 $("<style type='text/css'> html, body, body * { -webkit-tap-highlight-color:rgba(0,0,0,0); } </style>").appendTo("head"); var fcSx=0,fcSy=0; var fcEx=0,fcEy=0; $(document).on('touchmove',function(event){ // touchmove로 터치 마지막 좌표 추적 var t=event.originalEvent.targetTouches[0]; fcSx=t.pageX; fcSy=t.pageY; }); $(document).on('touchstart','a',function(event){ var t=event.originalEvent.targetTouches[0]; fcSx=fcEx=t.pageX; fcSy=fcEy=t.pageY; event.preventDefault(); // touchstart를 사용해야 하는 부모 객체에 이벤트 trigger $(event.target).parents('.ui-scrollview-view').triggerHandler('touchstart'); event.stopPropagation(); return false; }).on('touchend','a',function(event){ // 가로/세로 이동 거리의 합이 10 이하인 경우만 click으로 인정(swife 제외를 위함) if((Math.abs(fcSx-fcEx)+Math.abs(fcSy-fcEy))<10) { var target=$(event.currentTarget); // 탭 하이라이트 표시 $('<div class="p_tap_highlight" style="width:'+(target.width())+'px; height:'+(target.height())+'px;"></div>').insertBefore(target).delay(200).queue(function(){$(this).remove();}); setTimeout(function(t){ return function(){ var href = t.attr('href'); if((typeof(href) == 'undefined') || (href == '') || (href == '#')) { // 이동할 주소가 없을 경우 이벤트 트리거 t.trigger('click'); return true; } //event.preventDefault(); //event.stopPropagation(); // 링크 객체의 주소 형태에 맞게 처리 if(href.substring(0,1)=='#'){ // TODO hash 변경에 따른 처리 } else if(href.substring(0,11).toLowerCase()=='javascript:') { eval(href.substring(11,href.length)); } window.location.href=href; };}(target),10); target=null; } return true; }); } })();]]></summary><content type="html"><![CDATA[<p>오늘은 지난번 <a href="https://blog.asamaru.net/2012/09/26/webkit-tap-highlight-color/">-webkit-tap-highlight-color 사용하기</a> 에서 얘기했던 안드로이드 tap highlight 버그를 회피할 수 있는 방법에 대해 포스팅하고자 한다.</p>
<p>일단 기본적인 아이디어는 이렇다. webkit 브라우저는 기본적으로 tap highlight를 숨길 수 있으므로 tap highlight를 투명하게 변경하고 해당 링크의 위치에 원하는 모양의 레이어를 띄우는 것이다. 여기서 또 다른 문제를 함께 해결해야 하는데, 삼성 갤럭시 계열의 스마트폰에서는 숨기는 것 조차 안된다는 것.</p>
<p>그래서 조금 더 꼼수를 부려야 한다. tap highlight가 된다는 것은 결국 이벤트가 전달되기 때문이므로 브라우저에 전달될 이벤트를 가로채서 필요한 처리를 하고 브라우저에게는 이벤트를 전달하지 않는 것이다. (왜 이런 짓을 해야하는지는 위에 링크한 포스팅을 참고바람)</p>
<p>그럼 하나씩 처리 방법을 정리 해보자.</p>
<p>터치를 지원하는 기기는 mousedown, mouseup에 대응되는 touchstart, touchend라는 이벤트가 있다. (사실 대응된다고 하기엔 차이가 있긴하다. 하지만 이해를 쉽게하기 위해 그냥 그렇게 생각하자.)</p>
<p>이 touchstart 이벤트를 사용해서 click 이벤트가 발생하는 것을 막을 수 있다. (touchstart가 발생하지 않으면 click 이벤트도 발생하지 않는다.)</p>
<p>그래서 먼저 안드로이드 기기에서 테스트 다음과 같이 테스트를 해봤다.</p>
<p>링크 객체에서 touchstart 이벤트를 받아 이벤트 버블링과 캡쳐링을 제거하여 이벤트를 전달하지 않고 상위 부모에게 이벤트를 trigger로 강제 생성했다. 결과는.. tap highlight 가 숨겨지지 않았다. 이런 삼성... 사실 특별한 경우가 아니라면 이벤트를 부모에게 전달하지 않아도 된다. click과 같은 효과만 내면 되므로. 하지만 경우에 따라 부모가 touchstart를 받아야 하는 상황이 자주 발생할 수 있다.</p>
<p>부모를 한단계씩 건너뛰며 테스트 해볼 수 있지만 시간 관계상 나는 바로 touchstart를 받아야하는 객체에게 바로 trigger 했다. 결과는 일단 성공. touchstart는 정상적으로 동작하고 tap highlight는 보여지지 않았다.</p>
<p>이제 남은 작업은 링크 객체에 tap highlight를 대신할 레이어를 띄우는 것과 click 이벤트를 대체하는 것이다.</p>
<p>우선 click 이벤트를 대체하는 것에 대해서 생각해보자. 간단하게 생각해서 touchstart에서 바로 click 시 동작할 일을 수행해도 된다. 하지만 이것은 실제 click과 다르다. 테스트 해보면 알겠지만 click은 손가락이 화면에서 떨어질 때 발생한다. 따라서 touchend에서 click 이벤트를 대체해야 한다는 것이다. 문제는 여기서 끝나지 않는다. 터치를 시작하고 swife한 다음 터치를 종료하면 click 이벤트는 발생되지 않아야 한다. 이 문제를 해결하기 위해 touchstart에서 좌표를 기억하고 touchend에서 좌표를 검사하여 swife 되었는지를 확인하고 click 이벤트를 대체해야 한다. 그런데 문제는 끝이 없다. touchstart에서는 좌표를 받을 수 있으나 touchend에서는 좌표를 받을 수 없다. 따라서 touchmove 이벤트에서 좌표의 변경을 추적해야 한다.</p>
<p>다음으로 링크 객체의 위에 tap highlight 대신 레이어를 올리는 방법이다. 이 부분은 간단할 것 같지만 한가지 문제가 있다. 정확하게 링크 객체의 위에 레이어를 올리려면 객체의 위치를 알아야 한다는 것. 이 부분도 여러가지 방법을 통해 알아낼 수 있지만 부모 중에 position:relative 속성을 가진 경우 등 신경써야 할 것이 많다. 하지만 아주 간단한 방법이 있다. 링크 객체의 앞에 레이어 객체를 넣고 position:absolute를 주면 레이어는 공간을 차지하지 않으므로 링크 객체의 위치는 유지되면서도 동일한 좌표에 위치 시킬 수 있다. 단, 당연히 top, left를 따로 지정하지 않아야 한다. 그리고 객체 사이즈는 간단히 구할 수 있으므로 사이즈만 지정해 주면 완료. top, left css 속성을 줄 수 없으므로 상대적인 위치 등의 조정은 margin으로 하면 된다. (예를들어 margin:-2px 0 0 -2px, width:+2px, height:+2px 이런 방법으로 링크객체보다 사방으로 2px 큰 레이어를 정확하게 위치 시킬 수 있다.)</p>
<p>아주 상세히 설명하자면 더 해야 겠지만 이 정도면 원리 정도는 설명했다고 생각된다. 혹 이해가 안되는 부분은 블로그로 문의 바란다.</p>
<p>자 그럼 소스를 첨부한다. 정리를 해야 겠지만 시간 관계상... (그리고 jquery는 기본적으로 사용한다는 가정하에서 제작된 소스다. jquery를 사용하지 않는다면 사용 부분은 수정이 필요하다. 사실 jquery 문제가 아니더라도 범용으로 사용하기 위해 제작되 것이 아니므로 그냥 그대로 가져다 쓸 수는 없으니 참고로만 보면 된다.)</p>
<h3>css 소스</h3>
<pre class="hljs css"><span class="hljs-selector-class">.p_tap_highlight</span> { <span class="hljs-attribute">position</span>:absolute; <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#333</span>; <span class="hljs-attribute">-moz-opacity</span>:.<span class="hljs-number">30</span>; <span class="hljs-attribute">filter</span>:<span class="hljs-built_in">alpha</span>(opacity=30); <span class="hljs-attribute">opacity</span>:.<span class="hljs-number">30</span>; }</pre>
<h3>js 소스</h3>
<pre class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">var</span> isAndroid = (navigator.userAgent.toLowerCase().indexOf(<span class="hljs-string">"android"</span>) &gt; <span class="hljs-number">-1</span>); <span class="hljs-comment">//&amp;&amp; ua.indexOf("mobile");</span>
    <span class="hljs-keyword">if</span>(isAndroid) { <span class="hljs-comment">// 안드로이드 계열에서 탭 하이라이트 위치가 맞지 않아 프로그램으로 대체</span>
        <span class="hljs-comment">// 탭 하이라이트 숨김 : 삼성 계열은 소용없음</span>
        $(<span class="hljs-string">"&lt;style type='text/css'&gt; html, body, body * { -webkit-tap-highlight-color:rgba(0,0,0,0); } &lt;/style&gt;"</span>).appendTo(<span class="hljs-string">"head"</span>);

        <span class="hljs-keyword">var</span> fcSx=<span class="hljs-number">0</span>,fcSy=<span class="hljs-number">0</span>;
        <span class="hljs-keyword">var</span> fcEx=<span class="hljs-number">0</span>,fcEy=<span class="hljs-number">0</span>;
        $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">'touchmove'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{ <span class="hljs-comment">// touchmove로 터치 마지막 좌표 추적</span>
            <span class="hljs-keyword">var</span> t=event.originalEvent.targetTouches[<span class="hljs-number">0</span>];
            fcSx=t.pageX;
            fcSy=t.pageY;
        });
        $(<span class="hljs-built_in">document</span>).on(<span class="hljs-string">'touchstart'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{
            <span class="hljs-keyword">var</span> t=event.originalEvent.targetTouches[<span class="hljs-number">0</span>];
            fcSx=fcEx=t.pageX;
            fcSy=fcEy=t.pageY;

            event.preventDefault();
            <span class="hljs-comment">// touchstart를 사용해야 하는 부모 객체에 이벤트 trigger</span>
            $(event.target).parents(<span class="hljs-string">'.ui-scrollview-view'</span>).triggerHandler(<span class="hljs-string">'touchstart'</span>);
            event.stopPropagation();
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }).on(<span class="hljs-string">'touchend'</span>,<span class="hljs-string">'a'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{
            <span class="hljs-comment">// 가로/세로 이동 거리의 합이 10 이하인 경우만 click으로 인정(swife 제외를 위함)</span>
            <span class="hljs-keyword">if</span>((<span class="hljs-built_in">Math</span>.abs(fcSx-fcEx)+<span class="hljs-built_in">Math</span>.abs(fcSy-fcEy))&lt;<span class="hljs-number">10</span>) {
                <span class="hljs-keyword">var</span> target=$(event.currentTarget);
                <span class="hljs-comment">// 탭 하이라이트 표시</span>
                $(<span class="hljs-string">'&lt;div class="p_tap_highlight" style="width:'</span>+(target.width())+<span class="hljs-string">'px; height:'</span>+(target.height())+<span class="hljs-string">'px;"&gt;&lt;/div&gt;'</span>).insertBefore(target).delay(<span class="hljs-number">200</span>).queue(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{$(<span class="hljs-keyword">this</span>).remove();});
                setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">t</span>)</span>{ <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
                    <span class="hljs-keyword">var</span> href = t.attr(<span class="hljs-string">'href'</span>);
                    <span class="hljs-keyword">if</span>((<span class="hljs-keyword">typeof</span>(href) == <span class="hljs-string">'undefined'</span>) || (href == <span class="hljs-string">''</span>) || (href == <span class="hljs-string">'#'</span>)) {    <span class="hljs-comment">// 이동할 주소가 없을 경우 이벤트 트리거</span>
                        t.trigger(<span class="hljs-string">'click'</span>);
                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
                    }
                    <span class="hljs-comment">//event.preventDefault();</span>
                    <span class="hljs-comment">//event.stopPropagation();</span>
                    <span class="hljs-comment">// 링크 객체의 주소 형태에 맞게 처리</span>
                    <span class="hljs-keyword">if</span>(href.substring(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)==<span class="hljs-string">'#'</span>){
                        <span class="hljs-comment">// TODO hash 변경에 따른 처리</span>
                    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(href.substring(<span class="hljs-number">0</span>,<span class="hljs-number">11</span>).toLowerCase()==<span class="hljs-string">'javascript:'</span>) {
                        <span class="hljs-built_in">eval</span>(href.substring(<span class="hljs-number">11</span>,href.length));
                    }
                    <span class="hljs-built_in">window</span>.location.href=href;
                };}(target),<span class="hljs-number">10</span>);
                target=<span class="hljs-literal">null</span>;
            }
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        });
    }
})();</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2012/09/27/chicken-game/</id><title type="html">chicken game</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2012/09/27/chicken-game/"/><published>2012-09-27T22:32:14+09:00</published><updated>2012-09-27T22:32:14+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="thinking" label="thinking" /><summary><![CDATA[팟케스트에서 애플과 삼성의 특허 전쟁을 빗대어 치킨게임이라고 표현하는 것을 들었는데 치킨게임이 무엇인지 몰라 궁금해졌다. 위키백과에 따르면 게임 이론의 모델 중 하나로, 어떤 사안에 대해 대립하는 두 집단이 있을 때 그 사안을 포기하면 상대방에 비해 손해를 보게 되지만, 양쪽 모두 포기하지 않는 경우 가장 나쁜 결과가 벌어지는 상황이다. 치킨게임이라는 것에 대해 글을 읽으면서 직접적인 관련은 없지만 양보라는 것에 대한 생각이 든다. 치킨게임에서 게임을 포기하는 것과 양보를 무조건 같다고 볼 수는 없는 것이지만 공멸을 피하기 위해 내가 일부 손해를 보더라도 게임을 포기하는 것을 양보 아닌 양보라고 생각하고 글을 쓰고자 한다. 우리는 치킨게임에서 처럼 겁쟁이로 놀림받지 않기 위해 또는 자신은 손해를 보기 싫다는 이유로 치킨게임과 비슷한 상황들을 자주 만들어낸다. 우리는 학교에서 양보의 미덕에 대해, 다른 사람의 행복이 아닌 자신의 행복을 위해 실천하는 것이라고 배웠다. 하지만 우리는 자신의 손해를 감수 하고서라도 양보를 하는 것에 대해서는 쉽게 결정하지 못한다. 누군가가 대가를 바라지 않고 자발적으로, 기쁜 마음으로 양보를 했다하더라도 "내가 한번 양보하면 다음에 누군가는 내가 필요할 때 나에게 양보 해 주겠지?"라는 보상 심리가 무의식 중에 자리한다고 생각한다. 하지만 사회에서 이러한 양보 정신을 가진 사람이 부족하다보니 자신이 양보를 받았으면 하는 상황에서 양보를 받지 못하면 손해를 보는 듯한 느낌을 받게되고 이러한 감정이 쌓이다보면 자신도 더 이상은 양보를 하지않게 되는 것 같다. 사실 이것은 누구나 알 수 있듯이 악순환의 연속이다. 우리는 이론적으로 모두가 동시에 무엇인가를 위해 변화한다는 것이 불가능하다라는 것도 알고 있으며 누군가가 먼저 시작하고 다음에 또 누가.. 또 누가.. 참여하여 서서히 변해야 한다는 것을 안다. 하지만 그 누군가가 내가 아닌 다른 사람이 대신 해주길 바라는 것이 문제다. 서로가 이렇게 생각한다면 영원히 사회는 변하지 않을 것이다. 누군가의 변화를, 누군가의 희생을 바라기 전에 나 자신이 먼저 변한다면 분명 거기서 부터 세상의 변화는 시작될 것이다. 문제는 이렇게 생각하는 나조차도 그 누군가가 되지 않으려는 삶을 살고 있다는 것. 나부터 반성하자. 치킨게임이 궁금해서 알아보다가 생각이 완전 다른 방향으로 가지를 펼쳤지만 이것도 나쁘지는 않은 듯. 이런 생각이 나를 정의하는 것이니까.]]></summary><content type="html"><![CDATA[<p>팟케스트에서 애플과 삼성의 특허 전쟁을 빗대어 치킨게임이라고 표현하는 것을 들었는데 치킨게임이 무엇인지 몰라 궁금해졌다.</p>
<p><a href="http://ko.wikipedia.org/wiki/%EC%B9%98%ED%82%A8_%EA%B2%8C%EC%9E%84">위키백과</a>에 따르면 게임 이론의 모델 중 하나로, 어떤 사안에 대해 대립하는 두 집단이 있을 때 그 사안을 포기하면 상대방에 비해 손해를 보게 되지만, 양쪽 모두 포기하지 않는 경우 가장 나쁜 결과가 벌어지는 상황이다.</p>
<p>치킨게임이라는 것에 대해 글을 읽으면서 직접적인 관련은 없지만 양보라는 것에 대한 생각이 든다. 치킨게임에서 게임을 포기하는 것과 양보를 무조건 같다고 볼 수는 없는 것이지만 공멸을 피하기 위해 내가 일부 손해를 보더라도 게임을 포기하는 것을 양보 아닌 양보라고 생각하고 글을 쓰고자 한다.</p>
<p>우리는 치킨게임에서 처럼 겁쟁이로 놀림받지 않기 위해 또는 자신은 손해를 보기 싫다는 이유로 치킨게임과 비슷한 상황들을 자주 만들어낸다.</p>
<p>우리는 학교에서 양보의 미덕에 대해, 다른 사람의 행복이 아닌 자신의 행복을 위해 실천하는 것이라고 배웠다. 하지만 우리는 자신의 손해를 감수 하고서라도 양보를 하는 것에 대해서는 쉽게 결정하지 못한다.</p>
<p>누군가가 대가를 바라지 않고 자발적으로, 기쁜 마음으로 양보를 했다하더라도 &quot;내가 한번 양보하면 다음에 누군가는 내가 필요할 때 나에게 양보 해 주겠지?&quot;라는 보상 심리가 무의식 중에 자리한다고 생각한다.</p>
<p>하지만 사회에서 이러한 양보 정신을 가진 사람이 부족하다보니 자신이 양보를 받았으면 하는 상황에서 양보를 받지 못하면 손해를 보는 듯한 느낌을 받게되고 이러한 감정이 쌓이다보면 자신도 더 이상은 양보를 하지않게 되는 것 같다.</p>
<p>사실 이것은 누구나 알 수 있듯이 악순환의 연속이다. 우리는 이론적으로 모두가 동시에 무엇인가를 위해 변화한다는 것이 불가능하다라는 것도 알고 있으며 누군가가 먼저 시작하고 다음에 또 누가.. 또 누가.. 참여하여 서서히 변해야 한다는 것을 안다.</p>
<p>하지만 그 누군가가 내가 아닌 다른 사람이 대신 해주길 바라는 것이 문제다. 서로가 이렇게 생각한다면 영원히 사회는 변하지 않을 것이다.</p>
<p>누군가의 변화를, 누군가의 희생을 바라기 전에 나 자신이 먼저 변한다면 분명 거기서 부터 세상의 변화는 시작될 것이다.</p>
<p>문제는 이렇게 생각하는 나조차도 그 누군가가 되지 않으려는 삶을 살고 있다는 것. 나부터 반성하자.</p>
<p>치킨게임이 궁금해서 알아보다가 생각이 완전 다른 방향으로 가지를 펼쳤지만 이것도 나쁘지는 않은 듯. 이런 생각이 나를 정의하는 것이니까.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2012/09/27/html5-localstorage-store-dot-js/</id><title type="html">크로스 브라우저를 지원하는 localStorage 라이브러리 store.js</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2012/09/27/html5-localstorage-store-dot-js/"/><published>2012-09-27T21:59:06+09:00</published><updated>2012-09-27T21:59:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[store.js HTML5에 포함된 Web Storage 중 localStorage를 다양한 브라우저에서 사용할 수 있게 지원하는 자바스크립트 라이브러리다. 사실 이러한 기능을 제공하는 라이브러리는 이미 다양하게 개발되어 있다. 특히 이름이 store.js로 동일한 라이브러리도 있다. 그럼 기존의 쿠키 등의 방법을 두고 왜 클라이언트에 보관하는 web storage를 사용하는가? 당연히 서버에서 제어가 필요없는 정보를 저장하거나 큰 용량을 저장하고 싶을 떄 사용할 수 있다. 사실 쿠키는 저장 공간/개수의 한계도 있을 뿐아니라 모든 http 요청(도메인이 같은)에 붙어가므로 트래픽이나 네트웍 성능면에서도 좋지 않다. 당연히 셰션키를 제외한 정보를 서버에 보관하는 셰션을 쓰는 것도 가능하겠지만 이건 서버 자원을 잡아먹으니 꼭 필요한 것이 아니라면 그다지 보안도 필요없고 훼손되어도 상관없는 데이터를 보관하는데 사용하기엔 자원이 아깝다. 간단히 정리하자면 크게 중요한 정보가 아니고 보안상 문제될 것이 없고 서버에서 값을 참조할 필요가 없는 정보를 보관하는데 사용하면 된다. 이런 경우가 별로 없다고 생각할 수 있으나 잘 생각해보면 쿠키를 남발해서 여러가지 문제를 일으키는 것보다 이것이 훨씬 유용한 경우들이 있다. store.js에 대한 소개를 하고자하는 것이니 web storage에 대한 자세한 정보는 여기를 참고하길 바란다. 자세한 사용법은 https://github.com/marcuswestin/store.js에 방문하면 상세히 나와있다. 게다가 별로 복잡한 것도 없다. 내가 여러가지 라이브러리 중 이 라이브러리를 선택한 이유는 정말 다양한 브라우저를 지원하기 때문이다. Tested in Firefox 2.0, Tested in Firefox 3.0, Tested in Firefox 3.5, Tested in Firefox 3.6, Tested in Firefox 4.0, Tested in Chrome 5, Tested in Chrome 6, Tested in Chrome 7, Tested in Chrome 8, Tested in Chrome 10, Tested in Chrome 11, Tested in Safari 4, Tested in Safari 5, Tested in IE6, Tested in IE7, Tested in IE8, Tested in Opera 10 (Opera 10.54) 게다가 사용법도 무지하게 간단하다. // Store 'marcus' at 'username' store.set('username', 'marcus') // Get 'username' store.get('username') // Remove 'username' store.remove('username') // Clear all keys store.clear() // Store an object literal - store.js uses JSON.stringify under the hood store.set('user', { name: 'marcus', likes: 'javascript' }) // Get the stored object - store.js uses JSON.parse under the hood var user = store.get('user') alert(user.name + ' likes ' + user.likes) 아직 일부 브라우저에서 약간의 문제를 가지고 있는 것으로 표기되어 있으나 이 정도면 충분히 만족할만한 수준이라고 생각한다.]]></summary><content type="html"><![CDATA[<p><a href="https://github.com/marcuswestin/store.js">store.js</a> HTML5에 포함된 Web Storage 중 localStorage를 다양한 브라우저에서 사용할 수 있게 지원하는 자바스크립트 라이브러리다.</p>
<p>사실 이러한 기능을 제공하는 라이브러리는 이미 다양하게 개발되어 있다. 특히 이름이 <a href="https://github.com/frankkohlhepp/store-js">store.js</a>로 동일한 라이브러리도 있다.</p>
<p>그럼 기존의 쿠키 등의 방법을 두고 왜 클라이언트에 보관하는 web storage를 사용하는가? 당연히 서버에서 제어가 필요없는 정보를 저장하거나 큰 용량을 저장하고 싶을 떄 사용할 수 있다.</p>
<p>사실 쿠키는 <a href="http://okjungsoo.tistory.com/entry/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%B8-%EC%BF%A0%ED%82%A4-%EC%A0%9C%ED%95%9CBrowser-cookie-restrictions">저장 공간/개수의 한계</a>도 있을 뿐아니라 모든 http 요청(도메인이 같은)에 붙어가므로 트래픽이나 네트웍 성능면에서도 좋지 않다. 당연히 셰션키를 제외한 정보를 서버에 보관하는 셰션을 쓰는 것도 가능하겠지만 이건 서버 자원을 잡아먹으니 꼭 필요한 것이 아니라면 그다지 보안도 필요없고 훼손되어도 상관없는 데이터를 보관하는데 사용하기엔 자원이 아깝다.</p>
<p>간단히 정리하자면 크게 중요한 정보가 아니고 보안상 문제될 것이 없고 서버에서 값을 참조할 필요가 없는 정보를 보관하는데 사용하면 된다.</p>
<p>이런 경우가 별로 없다고 생각할 수 있으나 잘 생각해보면 쿠키를 남발해서 여러가지 문제를 일으키는 것보다 이것이 훨씬 유용한 경우들이 있다.</p>
<p>store.js에 대한 소개를 하고자하는 것이니 web storage에 대한 자세한 정보는 여기를 <a href="http://m.mkexdev.net/59">참고</a>하길 바란다.</p>
<p>자세한 사용법은 <a href="https://github.com/marcuswestin/store.js">https://github.com/marcuswestin/store.js</a>에 방문하면 상세히 나와있다. 게다가 별로 복잡한 것도 없다.</p>
<p>내가 여러가지 라이브러리 중 이 라이브러리를 선택한 이유는 정말 다양한 브라우저를 지원하기 때문이다.</p>
<blockquote>
<p>Tested in Firefox 2.0, Tested in Firefox 3.0, Tested in Firefox 3.5, Tested in Firefox 3.6, Tested in Firefox 4.0, Tested in Chrome 5, Tested in Chrome 6, Tested in Chrome 7, Tested in Chrome 8, Tested in Chrome 10, Tested in Chrome 11, Tested in Safari 4, Tested in Safari 5, Tested in IE6, Tested in IE7, Tested in IE8, Tested in Opera 10 (Opera 10.54)</p>
</blockquote>
<p>게다가 사용법도 무지하게 간단하다.</p>
<pre class="hljs javascript"><span class="hljs-comment">// Store 'marcus' at 'username'</span>
store.set(<span class="hljs-string">'username'</span>, <span class="hljs-string">'marcus'</span>)

<span class="hljs-comment">// Get 'username'</span>
store.get(<span class="hljs-string">'username'</span>)

<span class="hljs-comment">// Remove 'username'</span>
store.remove(<span class="hljs-string">'username'</span>)

<span class="hljs-comment">// Clear all keys</span>
store.clear()

<span class="hljs-comment">// Store an object literal - store.js uses JSON.stringify under the hood</span>
store.set(<span class="hljs-string">'user'</span>, { <span class="hljs-attr">name</span>: <span class="hljs-string">'marcus'</span>, <span class="hljs-attr">likes</span>: <span class="hljs-string">'javascript'</span> })

<span class="hljs-comment">// Get the stored object - store.js uses JSON.parse under the hood</span>
<span class="hljs-keyword">var</span> user = store.get(<span class="hljs-string">'user'</span>)
alert(user.name + <span class="hljs-string">' likes '</span> + user.likes)</pre>
<p>아직 일부 브라우저에서 약간의 문제를 가지고 있는 것으로 표기되어 있으나 이 정도면 충분히 만족할만한 수준이라고 생각한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2012/09/26/webkit-tap-highlight-color/</id><title type="html">-webkit-tap-highlight-color 사용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2012/09/26/webkit-tap-highlight-color/"/><published>2012-09-26T22:45:58+09:00</published><updated>2012-09-26T22:45:58+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="css" label="css" /><summary><![CDATA[iOS와 안드로이드의 웹킷 기반 브라우저(사파리, 크롬 등)에서 링크를 터치하면 해당 위치를 표시하는 하이라이트가 나타난다. 이 하이라이트의 색상을 바꾸고 싶을 때 사용할 수 있는 것이 -webkit-tap-highlight-color 이다. 사용법은 아주 간단하다. -webkit-tap-highlight-color: <color>; 예를들어 검은색 계열에 불투명도 30%를 지정하고 싶다면 * { -webkit-tap-highlight-color:rgba(0,0,0,0.3); } 으로 지정하면 된다. *는 모든 개체를 뜻하므로 특정 객체만 해제하려면 CSS selector를 변경하면 된다. 그런데 여기서 문제가 있다. 바로 안드로이드... 안드로이드는 현재 아이스크림 샌드위치(4.0.4) 기준으로 색상 지정을 지원하지 않는다. (젤리빈에서는 아직 테스트하지 못했다. 향후 OS 업데이트가 되면 확인 후 내용을 수정하겠다.) 다만 아예 숨기는 것은 가능하다. (다시말해 주황색의 하이라이트를 쓰거나 아예 숨기는 것만 가능하다.) 그렇다면 아예 숨기는 방법은 * { -webkit-tap-highlight-color: rgba(255,255,255,0); } 으로 하면 된다. 앞에 255,255,255는 의미가 없다. 마지막의 alpha값이 0으로 지정되면 된다. 다른 방법으로 rgba 대신 transparent를 지정하는 방법도 있으나 이건 iOS만 지원한다. 애플에서는 iOS는 1.1.1 버전부터 지원하던 것을 안드로이드는 아직도 제대로 지원하지 않고 있는 것이다. 지난번에 포스팅 했던 나는 애플빠다에서도 언급했던 개발 부분에서 다양한 안드로이드의 버그/부실함(?) 중에 하나다. (아래의 내용도 이어서...) 더 큰 문제는 여기서 끝나지 않는다는 것이다. 안드로이드 중 삼성 계열(현재 갤럭시 노트, 갤럭시 S2 등에서 문제가 있음)에서는 색상 변경이 안될 뿐 아니라 아예 숨겨지지도 않는다. 정말 개발자 입장에서 환장할 노릇이다. 이 부분이 그냥 단순히 예쁘지 않아서 숨기려는 것이 아니라 이 하이라이트에 다른 버그(하이라이트의 위치가 잘못 표기되는 결함)가 존재함에 따라 부득이하게 아예 숨겨버려야 하는 상황임에도 숨기지도 못하는 것이다. 난 정말 이래서 안드로이드가 싫다. 버그에 버그가 꼬리를 물고 나를 괴롭히기 때문이다. 게다가 많기까지 하다. 하지만 이대로 물러설 수 없는, 문제를 해결해야하는 개발자로써 다른 방법을 찾아서 하이라이트를 숨기는 것까지는 성공했다. 아.. 정말 미쳐 버릴 것 같은 상황은 링크 터치 하이라이트는 숨겼는데 인풋폼들의 하이라이트를 숨길 방법이 없다는 것... 이 부분은 결국 숨기지는 못하고 위치가 잘못 표기되는 버그를 다른 방법으로 해결했다. 마지막으로 버그를 개선하는 과정에서 또 다른 버그들을 발견했다는 것이 더욱 나를 슬프게 한다. 도대체 안드로이드 웹뷰의 버그는 어디까지 인가? 사실 얼마전까지만 해도 익스플로러의 버그들이 나를 괴롭혔는데.. 이때까지만 해도 익스플로러가 최악이라 생각했다. 하지만 세상에는 항상 더 강한 자가 있는법. 안드로이드 버그들이 최강이다. (문제는 개발자가 아니면, 겪어보지 않은 사람은 아무도 공감하지 못한다는 것이 나를 슬프게 한다.) 어쨌든 하이라이트 버그 회피에 대한 자세한 해결 과정은 복잡하므로 소스와 함께 따로 포스팅할 예정이다. "안드로이드 tap highlight 레이어로 대체하기"로 별도 포스팅 한다.]]></summary><content type="html"><![CDATA[<p>iOS와 안드로이드의 웹킷 기반 브라우저(사파리, 크롬 등)에서 링크를 터치하면 해당 위치를 표시하는 하이라이트가 나타난다.</p>
<p>이 하이라이트의 색상을 바꾸고 싶을 때 사용할 수 있는 것이 -webkit-tap-highlight-color 이다.</p>
<p>사용법은 아주 간단하다.</p>
<pre class="hljs css"><span class="hljs-selector-tag">-webkit-tap-highlight-color</span>: &lt;<span class="hljs-selector-tag">color</span>&gt;;</pre>
<p>예를들어 검은색 계열에 불투명도 30%를 지정하고 싶다면</p>
<pre class="hljs css">* { <span class="hljs-attribute">-webkit-tap-highlight-color</span>:<span class="hljs-built_in">rgba</span>(0,0,0,0.3); }</pre>
<p>으로 지정하면 된다. *는 모든 개체를 뜻하므로 특정 객체만 해제하려면 CSS selector를 변경하면 된다.</p>
<p>그런데 여기서 문제가 있다.</p>
<p>바로 안드로이드... 안드로이드는 현재 아이스크림 샌드위치(4.0.4) 기준으로 색상 지정을 지원하지 않는다. (젤리빈에서는 아직 테스트하지 못했다. 향후 OS 업데이트가 되면 확인 후 내용을 수정하겠다.)</p>
<p>다만 아예 숨기는 것은 가능하다. (다시말해 주황색의 하이라이트를 쓰거나 아예 숨기는 것만 가능하다.)</p>
<p>그렇다면 아예 숨기는 방법은</p>
<pre class="hljs css">* { <span class="hljs-attribute">-webkit-tap-highlight-color</span>: <span class="hljs-built_in">rgba</span>(255,255,255,0); }</pre>
<p>으로 하면 된다. 앞에 255,255,255는 의미가 없다. 마지막의 alpha값이 0으로 지정되면 된다. 다른 방법으로 rgba 대신 transparent를 지정하는 방법도 있으나 이건 iOS만 지원한다.</p>
<p>애플에서는 <a href="http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safaricssref/articles/standardcssproperties.html">iOS는 1.1.1 버전</a>부터 지원하던 것을 안드로이드는 아직도 제대로 지원하지 않고 있는 것이다.</p>
<p>지난번에 포스팅 했던 <a href="https://blog.asamaru.net/2012/09/22/i-like-apple/">나는 애플빠다</a>에서도 언급했던 개발 부분에서 다양한 안드로이드의 버그/부실함(?) 중에 하나다. (아래의 내용도 이어서...)</p>
<p><strong>더 큰 문제는 여기서 끝나지 않는다는 것이다.</strong></p>
<p>안드로이드 중 삼성 계열(현재 갤럭시 노트, 갤럭시 S2 등에서 문제가 있음)에서는 색상 변경이 안될 뿐 아니라 아예 숨겨지지도 않는다. 정말 개발자 입장에서 환장할 노릇이다.</p>
<p>이 부분이 그냥 단순히 예쁘지 않아서 숨기려는 것이 아니라 이 하이라이트에 다른 버그(하이라이트의 위치가 잘못 표기되는 결함)가 존재함에 따라 부득이하게 아예 숨겨버려야 하는 상황임에도 숨기지도 못하는 것이다.</p>
<p>난 정말 이래서 안드로이드가 싫다. 버그에 버그가 꼬리를 물고 나를 괴롭히기 때문이다. 게다가 많기까지 하다.</p>
<p>하지만 이대로 물러설 수 없는, 문제를 해결해야하는 개발자로써 다른 방법을 찾아서 하이라이트를 숨기는 것까지는 성공했다.</p>
<p>아.. 정말 미쳐 버릴 것 같은 상황은 링크 터치 하이라이트는 숨겼는데 인풋폼들의 하이라이트를 숨길 방법이 없다는 것... 이 부분은 결국 숨기지는 못하고 위치가 잘못 표기되는 버그를 다른 방법으로 해결했다. 마지막으로 버그를 개선하는 과정에서 또 다른 버그들을 발견했다는 것이 더욱 나를 슬프게 한다. 도대체 안드로이드 웹뷰의 버그는 어디까지 인가?</p>
<p>사실 얼마전까지만 해도 익스플로러의 버그들이 나를 괴롭혔는데.. 이때까지만 해도 익스플로러가 최악이라 생각했다. 하지만 세상에는 항상 더 강한 자가 있는법. 안드로이드 버그들이 최강이다. (문제는 개발자가 아니면, 겪어보지 않은 사람은 아무도 공감하지 못한다는 것이 나를 슬프게 한다.)</p>
<p>어쨌든 하이라이트 버그 회피에 대한 자세한 해결 과정은 복잡하므로 소스와 함께 <strike>따로 포스팅할 예정이다.</strike></p>
<p><a href="https://blog.asamaru.net/2012/10/03/android-tap-highlight-layer/">&quot;안드로이드 tap highlight 레이어로 대체하기&quot;</a>로 별도 포스팅 한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2012/09/24/dont-afraid-code-refactoring/</id><title type="html">Code Refactoring 두려워하지 말자</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2012/09/24/dont-afraid-code-refactoring/"/><published>2012-09-24T21:57:41+09:00</published><updated>2012-09-24T21:57:41+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="programming" label="programming" /><summary><![CDATA[리펙토링이란 무엇일까? wikipedia에 따르면 다음을 뜻한다. "리팩토링(refactoring)은 주로 '결과의 변경 없이 코드의 구조를 재조정함'을 뜻한다." 참고 : 영문 위키피디아 (한국 위키엔 아직 내용이 많이 부족하다.) 프로그래밍에 대해 공부를 해본 사람이라면 이 리펙토링을 해야하는 이유에 대해 귀가 따갑도록 이야기를 들었을 것이다. 하지만 리펙토링이라는 것 자체가 "결과의 변경없이 구조를 재조정하는 것"이라는 정의에서와 같이 리펙토링만으론 더 나은 실행 결과를 얻을 수 없다. 또한 잘못된 리펙토링 방법 또는 프로그래머의 실수로 인해 문제없이 잘 운영되던 시스템을 오류 덩어리로 만들수 있기 때문에 조심스럽게 다뤄져야할 기술이다. 그럼에도 불구하고 리펙토링을 하는 이유는 소프트웨어의 디자인을 개선시켜주기 때문이다. 그렇다면 소프트웨어 디자인이 개선됨으로써 무엇을 얻을 수 있을까? 소프트웨어를 더 이해하기 쉽게 만든다. (향후 유지보수에 도움이 된다.) 버그를 더 잘 찾을 수 있도록 도와준다. 소프트웨어 개발 속도를 높여준다. 잘된 리펙토링은 이 외에도 많은 것을 얻을 수 있다. 이렇게 리팩토링은 필수적으로 해야할 프로그래밍 기법이지만 현실에서 리펙토링을 잘 사용하는 사람을 보기는 힘들다. 이유는 앞서 얘기한 것과 같이 외부적으로 얻을 수 있는 향상된 결과는 없고 많은 위험 요소를 안고 있기 때문이다. 또한 실무 프로그래머라면 공감하겠지만 리펙토링을 하기 위한 시간은 프로젝트에 배정되는 경우는 드물다. 이런 이유로 리펙토링의 중요성은 알면서도 할 수 없다는 사람들이 많다. 결국 리펙토링을 잘못했을 때 돌아올 결과를 두려워하는 것이라고 볼 수 있다. 그렇기 때문에 더더욱 리펙토링은 수시로 해야한다고들 말한다. "한번도 하기 힘든 리펙토링을 자주, 수시로 하라고?" 이런 물음을 가진다면 다시 돌아가서 리펙토링을 두려워하는 이유를 생각해보자. 리펙토링할 시간을 별도로 제공하는 프로젝트는 드물다. 리펙토링을 잘못하면 새로운 오류를 만들어낸다. 레펙토링이란 것에 대해서 잘 모른다. 또는 경험이 없어 익숙치 않다. 우선 첫 번째 이유를 생각해 보자. 일반적으로 실무에서 프로젝트와 프로젝트 사이에 여유란 없다. 겹치지만 않아도 다행인 것을... 그렇다면 모든 개발이 끝나고 리펙토링하는 것은 작업 분량 때문에 사실상 불가능하다. 그러므로 리펙토링의 분량이 적을 때 틈틈이 코드를 개선하는 것이 필요하다. 사실 첫 번째 이유보다 두 번째 이유가 더 중요하다. 프로젝트가 완료되고 한꺼번에 리펙토링을 한다고 가정해 보자. 리펙토링하고자 하는 코드와 관련된 코드의 범위가 방대할 가능성이 높다. 다시말해 수정해야할 코드의 분량이 많기 때문에 오류가 끼어들 여지가 많다. 따라서 관련된 소스 코드가 적을 때 자주 리펙토링을 함으로써 오류의 가능성을 줄일 수 있다. 마지막 이유. "잘 모른다." 사실 다른 이유보다 이것 때문에 리펙토링을 꺼려하는 경우가 많다. 서점에 나와 있는 리펙토링 책을 보니 알아야할 것이 너무 많아 보인다. 무슨 말인지도 잘 모르겠고... 결국 시도할 엄두를 내지 못한다. 하지만 실제 리펙토링을 제대로 하려면 알아야 할 것들이 많겠지만 시작을 위해 알아야할 것은 그렇게 많지 않다. 게다가 요즘은 좋은 개발 도구들이 많아서 작업이 용이하고 오타 등으로 인한 오류의 가능성도 많이 낮출 수 있다. 그럼 조금 더 세부적으로 얼마나 자주 하는게 좋을까? 리펙토링 관련 도서나 여러 곳에서 아래와 같이 조언한다. 비슷한 기능을 수행하는 함수를 반복적으로 필요로하게 될 때(재사용성을 개선), 이미 만든 함수와 동일한 기능을 다시 필요로 할 때 바로할 수도 있으나 너무 자주 리펙토링에 시간을 쏟는 것을 막기 위해 평균적으로 세번쩨 필요시에 리펙토링하라고 하기도 한다. 새로운 기능을 추가할 때 버그 수정이 필요할 때 코드 검토(code review)를 할 때 중복된 로직을 가지고 있는 프로그램 수정하기 어렵다. 실행중인 코드를 변경해야 하는 특별한 동작을 요구하는 프로그램은 수정하기 어렵다. 복잡한 조건문이 포함된 프로그램은 수정하기 어렵다. 읽기 어려운 코드 수정해야 할 때(읽기 어려운 코드는 수정하기 어렵다.) 반대로 하지 말아야할 시점은 언제일까? 개인적으로는 하지 말아야할 시기는 없다고 생각하지만 일반적으로 아래의 경우엔 피하는게 좋다라는 한다. 코드를 처음부터 다시 작성해야 할때 마감일에 가까울 때 간단하게 얘기해서 리펙토링할 시간적 여유가 없을 때. 문제는 시간적 여유는 항상 없다는 것이다. 따라서 꾸준히 적절한 시점에 적당한 범위를 정해 리펙토링을 해야만 한다. 그렇다면 적은 시간과 노력으로 보다 효과적인 리펙토링을 위해 필요한 것은 무엇일까? 간단히 얘기하자면 당연하게도 코딩을 잘하는 방법을 아는 것이다. 그리고 적절한 도구를 활용하는 것이다. 코딩을 잘하는 방법을 알고 싶다면 디자인 패턴에 대해 공부하면 큰 도움이 된다. 당연히 디자인 패턴을 잘 안다면 리펙토링이 필요한 코드 자체를 많이 만들지 않게 될 것이다. 리펙토링을 도와줄 도구를 잘 활용하는 것도 중요하다. 이미 많은 사람들이 사용하는 이클립스는 아주 강력한 리펙토링 도구를 제공한다. 그리고 리펙토링을 하다보면 잘못된 길로 접어들어 차라리 원래의 소스로 되돌아 오는게 필요할 수 있다. 이때에 대비해 형상관리도구도 사용하는게 좋다. 사실 형상관리 도구의 필요성은 이것 말고도 많이 있으나 주제에서 벗어나므로 다음 기회로... 또 한가지 중요한 것이 있다. 그것은 바로 TDD(테스트 주도 개발)다. 이것 또한 방대한 주제이므로 다음 기회로... 단, TDD와 리펙토링의 관련성은 짚고 넢어가자. 정확하게 얘기하자면 TDD 자체가 리펙토링과 관련이 되어있기도 하지만 내가 얘기하려는 것은 TDD의 결과 중에 하나인 잘 만들어진 테스트 코드다. 잘 만들어진 테스트 코드가 있다면 리펙토링을 두려워할 필요가 없다. "리펙토링 과정에서 변형된 코드로 인해 새로운 결함이 발생하지 않을까?"라는 걱정을 테스트 코드가 검증해 줄 것이다. 이러한 도구들을 잘 활용한다면 리펙토링을 잘 몰라도 일단 무작정 시작해 볼 수 있고 새로운 기쁨을 찾게될 것이다. 당연히 제대로된 리펙토링을 위해서는 차차 공부를 해야한다. "시작이 반이다"라는 것을 알면서도 레펙토링을 두려워하고만 있다면 일단 도구들을 준비해서 시작해보자. 한가지 고민은 앞서 말한 도구들이 하나하나가 공부꺼리라는 것. 배보다 배꼽이 더 큰 상황이 될지도... 하지만 프로그래머라면 필수인 것들... 마틴파울러(Martin Fowler)는 이렇게 말했다. "컴퓨터가 이해할 수 있는 코드는 어느 바보나 다 짤 수 있다. 좋은 프로그래머는 사람이 이해할 수 있는 코드를 짠다." 그래서 나는 이렇게 말하고 싶다. "리펙토링을 두려워하지 말자" 처음부터 모든 것을 잘하는 사람은 없다. 많이 부딪치고 실수하고 깨지면서 경험을 쌓고 발전하는 것이다.]]></summary><content type="html"><![CDATA[<p>리펙토링이란 무엇일까? wikipedia에 따르면 다음을 뜻한다.</p>
<blockquote>
<p>&quot;<a href="http://ko.wikipedia.org/wiki/%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81">리팩토링(refactoring)</a>은 주로 '결과의 변경 없이 코드의 구조를 재조정함'을 뜻한다.&quot;</p>
<p>참고 : <a href="http://en.wikipedia.org/wiki/Code_refactoring">영문 위키피디아</a> (한국 위키엔 아직 내용이 많이 부족하다.)</p>
</blockquote>
<p>프로그래밍에 대해 공부를 해본 사람이라면 이 리펙토링을 해야하는 이유에 대해 귀가 따갑도록 이야기를 들었을 것이다.</p>
<p>하지만 리펙토링이라는 것 자체가 &quot;<strong>결과의 변경없이 구조를 재조정하는 것</strong>&quot;이라는 정의에서와 같이 리펙토링만으론 더 나은 실행 결과를 얻을 수 없다. 또한 잘못된 리펙토링 방법 또는 프로그래머의 실수로 인해 문제없이 잘 운영되던 시스템을 오류 덩어리로 만들수 있기 때문에 조심스럽게 다뤄져야할 기술이다.</p>
<p>그럼에도 불구하고 리펙토링을 하는 이유는 소프트웨어의 디자인을 개선시켜주기 때문이다. 그렇다면 소프트웨어 디자인이 개선됨으로써 무엇을 얻을 수 있을까?</p>
<ol>
<li>소프트웨어를 더 이해하기 쉽게 만든다. (향후 유지보수에 도움이 된다.)</li>
<li>버그를 더 잘 찾을 수 있도록 도와준다.</li>
<li>소프트웨어 개발 속도를 높여준다.</li>
</ol>
<p>잘된 리펙토링은 이 외에도 많은 것을 얻을 수 있다.</p>
<p>이렇게 리팩토링은 필수적으로 해야할 프로그래밍 기법이지만 현실에서 리펙토링을 잘 사용하는 사람을 보기는 힘들다. 이유는 앞서 얘기한 것과 같이 외부적으로 얻을 수 있는 향상된 결과는 없고 많은 위험 요소를 안고 있기 때문이다. 또한 실무 프로그래머라면 공감하겠지만 리펙토링을 하기 위한 시간은 프로젝트에 배정되는 경우는 드물다. 이런 이유로 리펙토링의 중요성은 알면서도 할 수 없다는 사람들이 많다. 결국 리펙토링을 잘못했을 때 돌아올 결과를 두려워하는 것이라고 볼 수 있다.</p>
<p>그렇기 때문에 더더욱 리펙토링은 수시로 해야한다고들 말한다.</p>
<blockquote>
<p>&quot;한번도 하기 힘든 리펙토링을 자주, 수시로 하라고?&quot;</p>
</blockquote>
<p>이런 물음을 가진다면 다시 돌아가서 리펙토링을 두려워하는 이유를 생각해보자.</p>
<ol>
<li>리펙토링할 시간을 별도로 제공하는 프로젝트는 드물다.</li>
<li>리펙토링을 잘못하면 새로운 오류를 만들어낸다.</li>
<li>레펙토링이란 것에 대해서 잘 모른다. 또는 경험이 없어 익숙치 않다.</li>
</ol>
<p>우선 첫 번째 이유를 생각해 보자. 일반적으로 실무에서 프로젝트와 프로젝트 사이에 여유란 없다. 겹치지만 않아도 다행인 것을... 그렇다면 모든 개발이 끝나고 리펙토링하는 것은 작업 분량 때문에 사실상 불가능하다. 그러므로 리펙토링의 분량이 적을 때 틈틈이 코드를 개선하는 것이 필요하다.</p>
<p>사실 첫 번째 이유보다 두 번째 이유가 더 중요하다. 프로젝트가 완료되고 한꺼번에 리펙토링을 한다고 가정해 보자. 리펙토링하고자 하는 코드와 관련된 코드의 범위가 방대할 가능성이 높다. 다시말해 수정해야할 코드의 분량이 많기 때문에 오류가 끼어들 여지가 많다. 따라서 관련된 소스 코드가 적을 때 자주 리펙토링을 함으로써 오류의 가능성을 줄일 수 있다.</p>
<p>마지막 이유. &quot;잘 모른다.&quot; 사실 다른 이유보다 이것 때문에 리펙토링을 꺼려하는 경우가 많다. 서점에 나와 있는 리펙토링 책을 보니 알아야할 것이 너무 많아 보인다. 무슨 말인지도 잘 모르겠고... 결국 시도할 엄두를 내지 못한다.</p>
<p>하지만 실제 리펙토링을 제대로 하려면 알아야 할 것들이 많겠지만 시작을 위해 알아야할 것은 그렇게 많지 않다. 게다가 <a href="http://www.ibm.com/developerworks/kr/library/os-ecref/#N100C3">요즘은 좋은 개발 도구들이 많아서 작업이 용이하고 오타 등으로 인한 오류의 가능성도 많이 낮출 수 있다.</a></p>
<p>그럼 조금 더 세부적으로 얼마나 자주 하는게 좋을까? 리펙토링 관련 도서나 여러 곳에서 아래와 같이 조언한다.</p>
<ol>
<li>비슷한 기능을 수행하는 함수를 반복적으로 필요로하게 될 때(재사용성을 개선), 이미 만든 함수와 동일한 기능을 다시 필요로 할 때 바로할 수도 있으나 너무 자주 리펙토링에 시간을 쏟는 것을 막기 위해 평균적으로 세번쩨 필요시에 리펙토링하라고 하기도 한다.</li>
<li>새로운 기능을 추가할 때</li>
<li>버그 수정이 필요할 때</li>
<li>코드 검토(code review)를 할 때</li>
</ol>
<ul>
<li>중복된 로직을 가지고 있는 프로그램 수정하기 어렵다.</li>
<li>실행중인 코드를 변경해야 하는 특별한 동작을 요구하는 프로그램은 수정하기 어렵다.</li>
<li>복잡한 조건문이 포함된 프로그램은 수정하기 어렵다.</li>
<li>읽기 어려운 코드 수정해야 할 때(읽기 어려운 코드는 수정하기 어렵다.)</li>
</ul>
<p>반대로 하지 말아야할 시점은 언제일까? 개인적으로는 하지 말아야할 시기는 없다고 생각하지만 일반적으로 아래의 경우엔 피하는게 좋다라는 한다.</p>
<ol>
<li>코드를 처음부터 다시 작성해야 할때</li>
<li>마감일에 가까울 때</li>
</ol>
<p>간단하게 얘기해서 리펙토링할 시간적 여유가 없을 때. 문제는 시간적 여유는 항상 없다는 것이다. 따라서 꾸준히 적절한 시점에 적당한 범위를 정해 리펙토링을 해야만 한다.</p>
<p>그렇다면 적은 시간과 노력으로 보다 효과적인 리펙토링을 위해 필요한 것은 무엇일까?</p>
<p>간단히 얘기하자면 당연하게도 코딩을 잘하는 방법을 아는 것이다. 그리고 적절한 도구를 활용하는 것이다.</p>
<p>코딩을 잘하는 방법을 알고 싶다면 <a href="http://ko.wikipedia.org/wiki/%EB%94%94%EC%9E%90%EC%9D%B8_%ED%8C%A8%ED%84%B4">디자인 패턴</a>에 대해 공부하면 큰 도움이 된다. 당연히 디자인 패턴을 잘 안다면 리펙토링이 필요한 코드 자체를 많이 만들지 않게 될 것이다.</p>
<p>리펙토링을 도와줄 도구를 잘 활용하는 것도 중요하다. 이미 많은 사람들이 사용하는 <a href="http://ko.wikipedia.org/wiki/%EC%9D%B4%ED%81%B4%EB%A6%BD%EC%8A%A4">이클립스</a>는 아주 강력한 리펙토링 도구를 제공한다.</p>
<p>그리고 리펙토링을 하다보면 잘못된 길로 접어들어 차라리 원래의 소스로 되돌아 오는게 필요할 수 있다. 이때에 대비해 <a href="http://ko.wikipedia.org/wiki/%ED%98%95%EC%83%81_%EA%B4%80%EB%A6%AC">형상관리</a>도구도 사용하는게 좋다. 사실 형상관리 도구의 필요성은 이것 말고도 많이 있으나 주제에서 벗어나므로 다음 기회로...</p>
<p>또 한가지 중요한 것이 있다. 그것은 바로 TDD(테스트 주도 개발)다. 이것 또한 방대한 주제이므로 다음 기회로...</p>
<p>단, TDD와 리펙토링의 관련성은 짚고 넢어가자. 정확하게 얘기하자면 TDD 자체가 리펙토링과 관련이 되어있기도 하지만 내가 얘기하려는 것은 TDD의 결과 중에 하나인 잘 만들어진 테스트 코드다. 잘 만들어진 테스트 코드가 있다면 리펙토링을 두려워할 필요가 없다.</p>
<p>&quot;리펙토링 과정에서 변형된 코드로 인해 새로운 결함이 발생하지 않을까?&quot;라는 걱정을 테스트 코드가 검증해 줄 것이다.</p>
<p>이러한 도구들을 잘 활용한다면 리펙토링을 잘 몰라도 일단 무작정 시작해 볼 수 있고 새로운 기쁨을 찾게될 것이다. 당연히 제대로된 리펙토링을 위해서는 차차 공부를 해야한다.</p>
<p>&quot;시작이 반이다&quot;라는 것을 알면서도 레펙토링을 두려워하고만 있다면 일단 도구들을 준비해서 시작해보자.</p>
<p>한가지 고민은 앞서 말한 도구들이 하나하나가 공부꺼리라는 것. 배보다 배꼽이 더 큰 상황이 될지도... 하지만 프로그래머라면 필수인 것들...</p>
<p>마틴파울러(Martin Fowler)는 이렇게 말했다.</p>
<blockquote>
<p>&quot;컴퓨터가 이해할 수 있는 코드는 어느 바보나 다 짤 수 있다. 좋은 프로그래머는 사람이 이해할 수 있는 코드를 짠다.&quot;</p>
</blockquote>
<p>그래서 나는 이렇게 말하고 싶다.</p>
<blockquote>
<p>&quot;리펙토링을 두려워하지 말자&quot;</p>
</blockquote>
<p>처음부터 모든 것을 잘하는 사람은 없다. 많이 부딪치고 실수하고 깨지면서 경험을 쌓고 발전하는 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2012/09/23/stop-creating-ds-store-on-mac/</id><title type="html">네트워크 연결을 통해 .DS_Store 파일 생성을 방지하는 방법</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2012/09/23/stop-creating-ds-store-on-mac/"/><published>2012-09-23T08:29:57+09:00</published><updated>2012-09-23T08:29:57+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><summary><![CDATA[애플 공식 고객지원 사이트에 따르면 다음의 명령을 터미널에 입력하면 된다. defaults write com.apple.desktopservices DSDontWriteNetworkStores true 잘 적용되었는지 확인하려면 defaults read com.apple.desktopservices DSDontWriteNetworkStores 를 입력했을 때 "true"라는 글자가 나오면 된다. 보다 상세한 정보를 얻길 원한다면 애플 공식 고객지원 사이트를 방문하기 바란다. 고객지원 사이트의 안내에는 "이 문서는 Apple에서 보관하던 문서로 더 이상 업데이트되지 않습니다."라고 나와있고 지원되는 버전에도 10.6(스노우 레오파드)까지만 나와있지만 현재 최신 버전인 마운틴 라이언에서도 이상없이 동작한다. 당연히 라이언에도... 위처럼 defaults로 설정할 수 있는 것들은 .DS_Store를 지우는 것 외에도 다양한데 아래의 링크에서 구경하시길... 링크1 링크2 기존에 이미 생성된 파일을 지우는 방법 find . -name \.DS_Store -exec rm {} \; find . -name \.AppleDouble -exec rm -rf {} \;]]></summary><content type="html"><![CDATA[<p><strong>애플 공식 <a href="http://support.apple.com/kb/HT1629?viewlocale=ko_KR">고객지원</a> 사이트에 따르면 다음의 명령을 터미널에 입력하면 된다.</strong></p>
<pre class="hljs bash">defaults write com.apple.desktopservices DSDontWriteNetworkStores <span class="hljs-literal">true</span></pre>
<p>잘 적용되었는지 확인하려면</p>
<pre class="hljs bash">defaults <span class="hljs-built_in">read</span> com.apple.desktopservices DSDontWriteNetworkStores</pre>
<p>를 입력했을 때 &quot;true&quot;라는 글자가 나오면 된다.</p>
<p>보다 상세한 정보를 얻길 원한다면 애플 공식 <a href="http://support.apple.com/kb/HT1629?viewlocale=ko_KR">고객지원</a> 사이트를 방문하기 바란다.</p>
<p>고객지원 사이트의 안내에는 &quot;이 문서는 Apple에서 보관하던 문서로 더 이상 업데이트되지 않습니다.&quot;라고 나와있고 지원되는 버전에도 10.6(스노우 레오파드)까지만 나와있지만 현재 최신 버전인 마운틴 라이언에서도 이상없이 동작한다. 당연히 라이언에도...</p>
<p>위처럼 defaults로 설정할 수 있는 것들은 .DS_Store를 지우는 것 외에도 다양한데 아래의 링크에서 구경하시길...</p>
<p><a href="http://nerdlogger.com/2012/07/30/get-control-of-mountain-lion-with-a-huge-list-of-command-line-tweaks/">링크1</a></p>
<p><a href="https://github.com/mathiasbynens/dotfiles/blob/master/.osx">링크2</a></p>
<hr />
<p><strong>기존에 이미 생성된 파일을 지우는 방법</strong></p>
<pre class="hljs bash">find . -name \.DS_Store -<span class="hljs-built_in">exec</span> rm {} \;
find . -name \.AppleDouble -<span class="hljs-built_in">exec</span> rm -rf {} \;</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2012/09/22/i-like-apple/</id><title type="html">나는 애플빠다</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2012/09/22/i-like-apple/"/><published>2012-09-22T09:24:15+09:00</published><updated>2012-09-22T09:24:15+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="thinking" label="thinking" /><summary><![CDATA[나는 나를 흔히들 말하는 애플빠라고 생각한다. 하지만 맹목적인 추종이 아니라 애플 제품의 완성도를 사랑한다. 타인이 바라보는 시각에서는 그게 그거라고 생각될 수도 있고 실제 내가 내자신을 합리화하고 있는 것일지 모른다. 글을 적다가 불현듯 "애플빠"라는 것이 뭘까?라는 의문이 들어 구글에 물어봤다. 간단히 말하자면 애플 매니아다. 약간은 비아냥거리는 표현으로 들리기도 한다. 요즘엔 더 나쁘게 표현해서 "앱등이"라고 표현하기도... 그런데 검색을 하면서 의아했던 것은 그다지 좋은 표현이 아님에도 불구하고 나처럼 자신을 애플빠로 인정하는 글들이 많이 검색되는 것을 보았다. 하긴 그래서 애플빠. 애플빠. 하는 것인지도. 사실 나는 애플 제픔을 사용하기 전엔 구글을 찬양하는 사람 중에 하나였다. 실제로 구글이 없었다면 내 직업도 바뀌어 있었을지도 모른다. 프로그래머라는 내 직업상 새로운 트랜드 뿐아니라 기술적 문제를 해결해야하는 상황들이 비일비재한데 이럴 때는 한권의 책보다, 직장 사수보다 나에게 큰 도움을 준 것이 구글 검색이었다. 그리고 사실 구글이 IT 기술면에서는 따라갈 업체가 없다는 생각에는 변함이 없다. 하지만 구글이 만든 안드로이드를 볼 때면 이게 구글에서 만든 것이 맞나 싶을 정도로 부실(?)함을 느낀다. 이러한 생각은 일반인들과는 분명 차이가 있는 생각일 것이다. 당연히, 지극히 개인적인 견해일 뿐이지만 내가 프로그래머로써, 웹과 관련된 일을 하면서, 스마트폰 앱 개발과 관련된 일들을 하면서 이러한 생각들은 더 굳어졌다. 나도 개발자의 한사람으로써 완전한 프로그램은 있을 수 없다는 것을 인정한다. 실제로 개발을 하다보면 애플의 iOS도 안드로이드도 버그가 상당히 많다. 하지만 내가 애플을 더 옹오하는 입장인 이유는 버그의 유형들 때문이다. 애플에서 내가 발견한 버그들은 말그대로 버그이며 대부분 약간의 트릭으로 회피할 수 있었다. 하지만 안드로이드의 버그들은 그렇지 못했다. 앱 개발에서의 영역은 내가 iOS 개발에 더 익숙해서 일지도 모른다. 하지만 웹 개발 영역(브라우저 버그)에서는 크롬이 너무하다 싶을 정도로 난감한 버그들을 보인다. 크롬이 좋은 브라우저임은 인정한다. 빠르고 안정적이며 최신의 트랜드를 잘 반영하고 발빠른 업데이트틀 하고 있다. 하지만 아직 미완의 느낌을 많이 받게 되는 것이 사실이다. (당연히 이 부분도 일반 웹브라우징이 아니라 웹 개발의 관점에서 본 시각이다.) 한번은 너무나도 이상한 버그가 있어 크롬의 해당 영역 소스를 확인한 적이 있다. 힘들게 찾아간 곳의 소스 내용. // TODO ~~~ 결론은 아직 구현되지 않은 기능이라는 것... 사실 첫 버전부터 모든 기능을 개발해서 완성하기는 힘들다는 것은 인정한다. 하지만 최소한 개발이 되지 않은 부분은 구분은 되어야 하는 것 아닌가? 내가 이 부분을 문제삼는 것은 실제로 내가 버그로 생각했던 이유가 동작에서는 오류나 어떠한 피드백도 없다는 것이었기 때문이다. 간단히 얘기하자면 해당 기능을 구현하지 않고 겉에는 구현된 것처럼 되어 있어 회피 코드도 작성하기 어렵다는 것. 애플 얘기를 하려다 갑자기 너무 구글쪽으로 얘기가 흘렀다. 사실 사람들은 애플과 삼성을 비교하지만 나는 프로그래머로써 애플과 구글을 항상 비교하게된다. 애플은 기계만 만들었을 뿐이니... 다시 애플을 얘기를 하자면... 내가 프로그래머로써 애플을 인정하는 것은 단 한가지다. 제품의 완성도가 뛰어나다 기술면에서는 구글이 우위에 있다라는 생각에는 변함이 없다(모든 부분이 우위일 순 없지만 상당부분에서). 하지만 제품의 완성도는 단연 애플이 우위라고 생각한다. 이 부분은 애플빠임을 자청하는 대부분의 사람들이 하는 얘기와 동일하다. 나는 애플 제품 사용자일뿐 아니라 프로그래머로써도 이 부분에 대해 애플을 존경한다. 소프트웨어의 완성도를 이렇게 끌어올리는 것이 얼마나 힘든 일인지 알기 때문이다. 내가 애플을 인정하는 이유를 완성도라는 한마디로 모든 것을 함축했지만 이 안에 너무나도 많은 것들이 있다. 나는 아직도 아이폰을 처음으로 가졌을 때의 감동을 기억한다. 아이폰 3GS. 아이폰 앱을 개발하기 위해 구매한 첫 스마트폰. 아이폰의 사파리에서 열어본 웹사이트를 스크롤하고 줌하면서 그 부드러움과 자연스러움에 감동 받았던 기억이 안다. (사실 이 시기에 구매하면서 겪은 일들로 인해 나는 안티 KT다. 그러나 또 다른 이유로 인해 아직 KT를 쓰고 있다. 젠장...) 현재 내가 사용하는 애플 제품은 아이폰, 아이패드, 맥북이다. 이것들 하나 하나가 모두 만족스러운 품질을 보여주고 있다. 게다가 최근에는 iCloud가 더욱더 나를 애플에게서 멀어지지 못하게 하고 있다. 모든 서비스가 연결되는 그 일체감이란... 이런 얘기들을 하면 안드로이드도 다 된다고... 충분히 사용성이 좋다는 얘기들을 주변에서 많이 한다. 하지만.. 이건 개인적 성향일수도 있지만... 안드로이드와 아이폰을 모두 써본 내 입장에서 보자면... 그건 안드로이드의 희망사항일 뿐이다. 아직은 제품의 완성도나 연동성면에서 애플을 따라가기엔 멀었다는 것이 내 생각이다. 하지만 세상에 영원한 일인지는 없다. 구글이 빠르게 격차를 줄이고 있고 머지않아 호각을 이룰 것이다. 그 때가 되면 나의 선택이 어떻게 바뀔지 모르나 지금의 내 선택은 "애플빠" 이 한마디로 정의된다. 추신. 난 애플빠이기도 하지만 구글 찬양론자. 구글이여 힘내라. 난 프로그래머로써 기술은 구글이 최강임을 인정한다.]]></summary><content type="html"><![CDATA[<p>나는 나를 흔히들 말하는 애플빠라고 생각한다.</p>
<p>하지만 맹목적인 추종이 아니라 애플 제품의 완성도를 사랑한다. 타인이 바라보는 시각에서는 그게 그거라고 생각될 수도 있고 실제 내가 내자신을 합리화하고 있는 것일지 모른다.</p>
<blockquote>
<p>글을 적다가 불현듯 &quot;애플빠&quot;라는 것이 뭘까?라는 의문이 들어 구글에 물어봤다. 간단히 말하자면 애플 매니아다. 약간은 비아냥거리는 표현으로 들리기도 한다. 요즘엔 더 나쁘게 표현해서 &quot;앱등이&quot;라고 표현하기도...</p>
</blockquote>
<p>그런데 검색을 하면서 의아했던 것은 그다지 좋은 표현이 아님에도 불구하고 나처럼 자신을 애플빠로 인정하는 글들이 많이 검색되는 것을 보았다.</p>
<p>하긴 그래서 애플빠. 애플빠. 하는 것인지도.</p>
<p>사실 나는 애플 제픔을 사용하기 전엔 구글을 찬양하는 사람 중에 하나였다. 실제로 구글이 없었다면 내 직업도 바뀌어 있었을지도 모른다.</p>
<blockquote>
<p>프로그래머라는 내 직업상 새로운 트랜드 뿐아니라 기술적 문제를 해결해야하는 상황들이 비일비재한데 이럴 때는 한권의 책보다, 직장 사수보다 나에게 큰 도움을 준 것이 구글 검색이었다. 그리고 사실 구글이 IT 기술면에서는 따라갈 업체가 없다는 생각에는 변함이 없다.</p>
</blockquote>
<p>하지만 구글이 만든 안드로이드를 볼 때면 이게 구글에서 만든 것이 맞나 싶을 정도로 부실(?)함을 느낀다.</p>
<p>이러한 생각은 일반인들과는 분명 차이가 있는 생각일 것이다.</p>
<p>당연히, 지극히 개인적인 견해일 뿐이지만 내가 프로그래머로써, 웹과 관련된 일을 하면서, 스마트폰 앱 개발과 관련된 일들을 하면서 이러한 생각들은 더 굳어졌다.</p>
<p>나도 개발자의 한사람으로써 완전한 프로그램은 있을 수 없다는 것을 인정한다. 실제로 개발을 하다보면 애플의 iOS도 안드로이드도 버그가 상당히 많다.</p>
<p>하지만 내가 애플을 더 옹오하는 입장인 이유는 버그의 유형들 때문이다. 애플에서 내가 발견한 버그들은 말그대로 버그이며 대부분 약간의 트릭으로 회피할 수 있었다. 하지만 안드로이드의 버그들은 그렇지 못했다.</p>
<p>앱 개발에서의 영역은 내가 iOS 개발에 더 익숙해서 일지도 모른다. 하지만 웹 개발 영역(브라우저 버그)에서는 크롬이 너무하다 싶을 정도로 난감한 버그들을 보인다.</p>
<blockquote>
<p>크롬이 좋은 브라우저임은 인정한다. 빠르고 안정적이며 최신의 트랜드를 잘 반영하고 발빠른 업데이트틀 하고 있다. 하지만 아직 미완의 느낌을 많이 받게 되는 것이 사실이다. (당연히 이 부분도 일반 웹브라우징이 아니라 웹 개발의 관점에서 본 시각이다.)</p>
</blockquote>
<p>한번은 너무나도 이상한 버그가 있어 크롬의 해당 영역 소스를 확인한 적이 있다.</p>
<p>힘들게 찾아간 곳의 소스 내용.</p>
<pre><code>// TODO ~~~</code></pre>
<p>결론은 아직 구현되지 않은 기능이라는 것... 사실 첫 버전부터 모든 기능을 개발해서 완성하기는 힘들다는 것은 인정한다. 하지만 최소한 개발이 되지 않은 부분은 구분은 되어야 하는 것 아닌가?</p>
<p>내가 이 부분을 문제삼는 것은 실제로 내가 버그로 생각했던 이유가 동작에서는 오류나 어떠한 피드백도 없다는 것이었기 때문이다. 간단히 얘기하자면 해당 기능을 구현하지 않고 겉에는 구현된 것처럼 되어 있어 회피 코드도 작성하기 어렵다는 것.</p>
<p>애플 얘기를 하려다 갑자기 너무 구글쪽으로 얘기가 흘렀다. 사실 사람들은 애플과 삼성을 비교하지만 나는 프로그래머로써 애플과 구글을 항상 비교하게된다. 애플은 기계만 만들었을 뿐이니...</p>
<p>다시 애플을 얘기를 하자면...</p>
<p>내가 프로그래머로써 애플을 인정하는 것은 단 한가지다.</p>
<p><strong>제품의 완성도가 뛰어나다</strong></p>
<p>기술면에서는 구글이 우위에 있다라는 생각에는 변함이 없다(모든 부분이 우위일 순 없지만 상당부분에서). 하지만 제품의 완성도는 단연 애플이 우위라고 생각한다.</p>
<p>이 부분은 애플빠임을 자청하는 대부분의 사람들이 하는 얘기와 동일하다.</p>
<p>나는 애플 제품 사용자일뿐 아니라 프로그래머로써도 이 부분에 대해 애플을 존경한다. 소프트웨어의 완성도를 이렇게 끌어올리는 것이 얼마나 힘든 일인지 알기 때문이다.</p>
<p>내가 애플을 인정하는 이유를 완성도라는 한마디로 모든 것을 함축했지만 이 안에 너무나도 많은 것들이 있다.</p>
<blockquote>
<p>나는 아직도 아이폰을 처음으로 가졌을 때의 감동을 기억한다. 아이폰 3GS. 아이폰 앱을 개발하기 위해 구매한 첫 스마트폰. 아이폰의 사파리에서 열어본 웹사이트를 스크롤하고 줌하면서 그 부드러움과 자연스러움에 감동 받았던 기억이 안다. (사실 이 시기에 구매하면서 겪은 일들로 인해 나는 안티 KT다. 그러나 또 다른 이유로 인해 아직 KT를 쓰고 있다. 젠장...)</p>
</blockquote>
<p>현재 내가 사용하는 애플 제품은 아이폰, 아이패드, 맥북이다. 이것들 하나 하나가 모두 만족스러운 품질을 보여주고 있다.</p>
<p>게다가 최근에는 iCloud가 더욱더 나를 애플에게서 멀어지지 못하게 하고 있다. 모든 서비스가 연결되는 그 일체감이란...</p>
<p>이런 얘기들을 하면 안드로이드도 다 된다고... 충분히 사용성이 좋다는 얘기들을 주변에서 많이 한다.</p>
<p>하지만.. 이건 개인적 성향일수도 있지만... 안드로이드와 아이폰을 모두 써본 내 입장에서 보자면... 그건 안드로이드의 희망사항일 뿐이다.</p>
<p>아직은 제품의 완성도나 연동성면에서 애플을 따라가기엔 멀었다는 것이 내 생각이다.</p>
<p>하지만 세상에 영원한 일인지는 없다. 구글이 빠르게 격차를 줄이고 있고 머지않아 호각을 이룰 것이다.</p>
<p>그 때가 되면 나의 선택이 어떻게 바뀔지 모르나 지금의 내 선택은 &quot;애플빠&quot; 이 한마디로 정의된다.</p>
<p>추신. 난 애플빠이기도 하지만 구글 찬양론자. 구글이여 힘내라. 난 프로그래머로써 기술은 구글이 최강임을 인정한다.</p>]]></content></entry>


</feed>