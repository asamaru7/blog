<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://blog.asamaru.net/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://blog.asamaru.net/atom.xml" rel="self" type="application/atom+xml" /><link href="https://blog.asamaru.net/" rel="alternate" type="text/html" /><updated>2016-11-07T08:38:03+09:00</updated><id>https://blog.asamaru.net/</id><title type="html">이 세상에 하나는 남기고 가자</title><subtitle>세상에 필요한 소스코드 한줄 남기고 가자.
</subtitle><author><name>유영재</name></author><entry><title type="html">PHP 삼항 연산자 : Ternary Operator 와 Null Coalesce Operator</title><link href="https://blog.asamaru.net/2016/11/07/php-ternary-operator-vs-null-coalescing-operator/" rel="alternate" type="text/html" title="PHP 삼항 연산자 : Ternary Operator 와 Null Coalesce Operator" /><published>2016-11-07T08:02:12+09:00</published><updated>2016-11-07T08:02:12+09:00</updated><id>https://blog.asamaru.net/2016/11/07/php-ternary-operator-vs-null-coalescing-operator</id><content type="html" xml:base="https://blog.asamaru.net/2016/11/07/php-ternary-operator-vs-null-coalescing-operator/">&lt;p&gt;&lt;a href=&quot;http://php.net/&quot;&gt;PHP&lt;/a&gt;에도 &lt;a href=&quot;http://php.net/manual/kr/language.operators.comparison.php#language.operators.comparison.ternary&quot;&gt;삼항 연산자:Ternary operator&lt;/a&gt;
가 있다. &lt;a href=&quot;http://php.net/manual/kr/language.operators.comparison.php#language.operators.comparison.ternary&quot;&gt;메뉴얼&lt;/a&gt;에는 아래와 같이 설명되어 있다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 사용 예제: 삼항 연산자
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 위 예제는 다음의 if/else 구문과 동일합니다
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_POST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;(expr1) ? (expr2) : (expr3) 표현은 expr1이 TRUE이면 expr2로 평가되고, expr1이 FALSE이면 expr3로 평가됩니다.
PHP 5.3부터, 삼항 연산자의 중간 부분을 비울 수 있습니다. 표현식 expr1 ?: expr3은 expr1이 TRUE이면 expr1, 아니면 expr3를 반환합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;PHP 5.3부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;expr2&lt;/code&gt;를 비울 수 있다고 되어 있다. 다시 말해 &lt;code class=&quot;highlighter-rouge&quot;&gt;(expr1) ?: (expr3)&lt;/code&gt;라는 표현을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;그리고 한가지. 아래와 같이 삼항식을 중첩할 경우는 괄호를 사용해서 묶어줄 것을 권장한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;삼항 연사자를 “쌓는” 일을 피하길 권합니다. 하나의 구문에서 하나를 초과하는 삼항 연산자를 사용할 때, PHP 작동은 명확하지 않습니다:
Example #3 명확하지 않은 삼항 작동&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 얼핏 보기에, 'true'를 출력할 것 같습니다
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'t'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 그러나 위의 실제 출력은 't'입니다
// 이는 삼항 표현이 왼쪽에서 오른쪽으로 평가되기 때문입니다
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 다음이 위 코드와 동일한 더 명확한 버전입니다
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'false'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'t'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'f'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 여기서, 첫 표현이 'true'로 평가되고, 이것이
// (bool)true로 전환되어 평가된 후, 두번째
// 삼항 표현의 true쪽을 반환합니다.
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
add a note add a note
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이와 유사하지만 다른 삼항 연산자인 &lt;a href=&quot;https://wiki.php.net/rfc/isset_ternary&quot;&gt;Null 병법 연산자:Null Coalesce Operator&lt;/a&gt;가 PHP 7부터 지원된다. 한글 이름을 딱히 뭐라 부를지가 애매한데 &lt;a href=&quot;https://ko.wikipedia.org/wiki/PHP&quot;&gt;위키피디아&lt;/a&gt;에서 “Null 병법 연산자”라는 이름을 사용하고 있다.&lt;/p&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;isset($_GET['mykey']) ? $_GET['mykey'] : &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위 두가지 삼항식은 동일한 것 같지만 자세히보면 다르다. 한가지는 &lt;a href=&quot;http://php.net/manual/kr/function.empty.php&quot;&gt;empty&lt;/a&gt;를 다른 한가지는 &lt;a href=&quot;http://php.net/manual/kr/function.isset.php&quot;&gt;isset&lt;/a&gt;을 대체한다.&lt;/p&gt;

&lt;p&gt;그리고 한가지 알아야할 중요한 사항이 있다. &lt;a href=&quot;http://stackoverflow.com/a/34571460/6736772&quot;&gt;PHP ternary operator vs null coalescing operator&lt;/a&gt;에 예시가 나와 있듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;?:&lt;/code&gt;는 선언되지 않은 변수를 사용할 경우 E_NOTICE가 발생한다. 다시말해 완전히 &lt;a href=&quot;http://php.net/manual/kr/function.empty.php&quot;&gt;empty&lt;/a&gt; 처럼 동작하는 것은 아니다.&lt;/p&gt;</content><author><name>유영재</name></author><summary type="html">PHP에도 삼항 연산자:Ternary operator
가 있다. 메뉴얼에는 아래와 같이 설명되어 있다.

&amp;lt;?php
// 사용 예제: 삼항 연산자
$action = (empty($_POST['action'])) ? 'default' : $_POST['action'];

// 위 예제는 다음의 if/else 구문과 동일합니다
if (empty($_POST['action'])) {
    $action = 'default';
} else {
    $action = $_POST['action'];
}




  (expr1) ? (expr2) : (expr3) 표현은 expr1이 TRUE이면 expr2로 평가되고, expr1이 FALSE이면 expr3로 평가됩니다.
PHP 5.3부터, 삼항 연산자의 중간 부분을 비울 수 있습니다. 표현식 expr1 ?: expr3은 expr1이 TRUE이면 expr1, 아니면 expr3를 반환합니다.


PHP 5.3부터 expr2를 비울 수 있다고 되어 있다. 다시 말해 (expr1) ?: (expr3)라는 표현을 사용할 수 있다.

그리고 한가지. 아래와 같이 삼항식을 중첩할 경우는 괄호를 사용해서 묶어줄 것을 권장한다.


  삼항 연사자를 “쌓는” 일을 피하길 권합니다. 하나의 구문에서 하나를 초과하는 삼항 연산자를 사용할 때, PHP 작동은 명확하지 않습니다:
Example #3 명확하지 않은 삼항 작동


&amp;lt;?php
// 얼핏 보기에, 'true'를 출력할 것 같습니다
echo (true?'true':false?'t':'f');

// 그러나 위의 실제 출력은 't'입니다
// 이는 삼항 표현이 왼쪽에서 오른쪽으로 평가되기 때문입니다

// 다음이 위 코드와 동일한 더 명확한 버전입니다
echo ((true ? 'true' : 'false') ? 't' : 'f');

// 여기서, 첫 표현이 'true'로 평가되고, 이것이
// (bool)true로 전환되어 평가된 후, 두번째
// 삼항 표현의 true쪽을 반환합니다.
?&amp;gt;
add a note add a note



이와 유사하지만 다른 삼항 연산자인 Null 병법 연산자:Null Coalesce Operator가 PHP 7부터 지원된다. 한글 이름을 딱히 뭐라 부를지가 애매한데 위키피디아에서 “Null 병법 연산자”라는 이름을 사용하고 있다.

isset($_GET['mykey']) ? $_GET['mykey'] : &quot;&quot;



위 두가지 삼항식은 동일한 것 같지만 자세히보면 다르다. 한가지는 empty를 다른 한가지는 isset을 대체한다.

그리고 한가지 알아야할 중요한 사항이 있다. PHP ternary operator vs null coalescing operator에 예시가 나와 있듯이 ?:는 선언되지 않은 변수를 사용할 경우 E_NOTICE가 발생한다. 다시말해 완전히 empty 처럼 동작하는 것은 아니다.</summary></entry><entry><title type="html">contenteditable이 설정된 개체의 시작 또는 끝에 커서(Caret) 넣기</title><link href="https://blog.asamaru.net/2016/11/04/contenteditable-set-caret-at-the-end-of-the-text-cross-browser/" rel="alternate" type="text/html" title="contenteditable이 설정된 개체의 시작 또는 끝에 커서(Caret) 넣기" /><published>2016-11-04T12:21:39+09:00</published><updated>2016-11-04T12:21:39+09:00</updated><id>https://blog.asamaru.net/2016/11/04/contenteditable-set-caret-at-the-end-of-the-text-cross-browser</id><content type="html" xml:base="https://blog.asamaru.net/2016/11/04/contenteditable-set-caret-at-the-end-of-the-text-cross-browser/">&lt;p&gt;이번에 &lt;a href=&quot;https://github.com/yabwe/medium-editor&quot;&gt;MediumEditor&lt;/a&gt;를 사용하면서 추가 기능을 개발하던 중 편집 개체에 내용을 추가하는 처리가 필요했다. 커서가 편집 개체 내부에 있다면 &lt;a href=&quot;https://github.com/yabwe/medium-editor/blob/master/API.md#pastehtmlhtml-options&quot;&gt;pasteHTML()&lt;/a&gt; 함수를 간단하게 처리가 된다. 그런데 커서가 편집 개체 밖에 있을 경우엔 넣을 수 없다. 그래서 프로그램에서 커서를 넣어줘야 하는데 fucus를 이용하면 맨 앞으로 들어가서 원하는 결과를 얻을 수 없었다. 그레서 방법을 찾던 중 &lt;a href=&quot;http://stackoverflow.com/a/4238971/6736772&quot;&gt;contenteditable, set caret at the end of the text (cross-browser)&lt;/a&gt;라는 글에서 방법을 찾았다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;contenteditable=&quot;true&quot;&lt;/code&gt;가 설정된 개체의 시작 또는 끝에 커서(Caret) 넣는 방법은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createCaretPlacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;atStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSelection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createRange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectNodeContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collapse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;atStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getSelection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeAllRanges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;sel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextRange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textRange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;textRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moveToElementText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;textRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collapse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;atStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;textRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;placeCaretAtStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createCaretPlacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;placeCaretAtEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createCaretPlacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이를 활용해 &lt;a href=&quot;https://github.com/yabwe/medium-editor&quot;&gt;MediumEditor&lt;/a&gt;에 적용하는 코드는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exportSelection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;placeCaretAtEnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createCaretPlacer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;placeCaretAtEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pasteHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yabwe/medium-editor/blob/master/API.md#exportselection&quot;&gt;exportSelection&lt;/a&gt;를 사용해서 커서가 편집 개체 안에 있는지를 검사해서 커서가 없다면 맨 마지막에 필요한 html 코드를 추가한다.&lt;/p&gt;</content><author><name>유영재</name></author><summary type="html">이번에 MediumEditor를 사용하면서 추가 기능을 개발하던 중 편집 개체에 내용을 추가하는 처리가 필요했다. 커서가 편집 개체 내부에 있다면 pasteHTML() 함수를 간단하게 처리가 된다. 그런데 커서가 편집 개체 밖에 있을 경우엔 넣을 수 없다. 그래서 프로그램에서 커서를 넣어줘야 하는데 fucus를 이용하면 맨 앞으로 들어가서 원하는 결과를 얻을 수 없었다. 그레서 방법을 찾던 중 contenteditable, set caret at the end of the text (cross-browser)라는 글에서 방법을 찾았다.

contenteditable=&quot;true&quot;가 설정된 개체의 시작 또는 끝에 커서(Caret) 넣는 방법은 아래와 같다.

function createCaretPlacer(atStart) {
    return function(el) {
        el.focus();
        if (typeof window.getSelection != &quot;undefined&quot;
                &amp;amp;&amp;amp; typeof document.createRange != &quot;undefined&quot;) {
            var range = document.createRange();
            range.selectNodeContents(el);
            range.collapse(atStart);
            var sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
        } else if (typeof document.body.createTextRange != &quot;undefined&quot;) {
            var textRange = document.body.createTextRange();
            textRange.moveToElementText(el);
            textRange.collapse(atStart);
            textRange.select();
        }
    };
}

var placeCaretAtStart = createCaretPlacer(true);
var placeCaretAtEnd = createCaretPlacer(false);



이를 활용해 MediumEditor에 적용하는 코드는 아래와 같다.

if (editor.exportSelection() == null) {
	var placeCaretAtEnd = createCaretPlacer(false);
	placeCaretAtEnd(document.getElementById(id));
}
editor.pasteHTML(html);



exportSelection를 사용해서 커서가 편집 개체 안에 있는지를 검사해서 커서가 없다면 맨 마지막에 필요한 html 코드를 추가한다.</summary></entry><entry><title type="html">HTTP referrer(referer) 숨기기</title><link href="https://blog.asamaru.net/2016/11/04/remove-http-referer/" rel="alternate" type="text/html" title="HTTP referrer(referer) 숨기기" /><published>2016-11-04T11:50:26+09:00</published><updated>2016-11-04T11:50:26+09:00</updated><id>https://blog.asamaru.net/2016/11/04/remove-http-referer</id><content type="html" xml:base="https://blog.asamaru.net/2016/11/04/remove-http-referer/">&lt;p&gt;브라우저에서 http 요청을 하는 경우 대부분 referrer 정보가 넘어간다.(HTTP 리퍼러를 정의한 RFC에서 ‘referrer’를 ‘referer’라고 잘못 친 것에서 기인하여 HTTP 리퍼러는 ‘HTTP referer’라고 불린다 : &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%A6%AC%ED%8D%BC%EB%9F%AC&quot;&gt;위키백과&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;그런데 간혹 이 referrer를 숨기고 싶을 때가 있다. 현 페이지에서 resouces(js, css, image, ajax 등)를 요청할 때나 페이지를 이동할 때 referrer가 전송되는데 여기서는 resouces를 호출할 때 referrer를 숨기는 방법에 대해 설명하려고 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; Tag를 이용한 referrer 제거&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/32014225/6736772&quot;&gt;Remove http referrer&lt;/a&gt;에 보면 아래와 같이 referrer를 제거하는 방법을 소개하고 있다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;referrer&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no-referrer&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'meta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;referrer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;no-referrer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'head'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;html, javascript로 처리하는 두가지 방식이 있는데 html의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 내부에 넣어주면 된다. 그리고 javascript의 경우는 필요한 시점에 실행해주면 된다. 예를들어 특정 ajax 호출시에만 referrer를 숨기고자 하는 경우 등이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;no-referrer&lt;/code&gt; 외에 사용할 수 있는 값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsafe-url&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;origin-when-cross-origin&lt;/code&gt; 등이 있는데 자세한 내용은 &lt;a href=&quot;https://www.w3.org/TR/referrer-policy/&quot;&gt;W3C Referrer Policy&lt;/a&gt;를 참고하면 된다. 여기보면 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;a href=&quot;http://example.com&quot; referrerpolicy=&quot;origin&quot;&amp;gt;&lt;/code&gt; 와 같이 개별 링크에 Referrer 정책을 지정하는 방법들도 안내되어 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;IFrame&amp;gt;&lt;/code&gt; Tag를 이용한 referrer 제거&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다른 방법으로는 iframe을 이용해서 referrer를 제거할 수 있다. 일단 아래의 코드를 보자.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;textarea&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 실제 들어갈 HTML --&amp;gt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'iframe'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 가장 간단하지만 crass domain 문제가 있을 수 있다.&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// iframe.src = 'data:text/html;charset=utf-8,' + encodeURI(html);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// cross domain issue 해결&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;iframe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;srcdoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// (iframe.contentDefault || iframe.contentWindow.document).domain = document.domain;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;srcdoc&lt;/code&gt;이 생소하다면 &lt;a href=&quot;http://stackoverflow.com/questions/19739001/which-is-the-difference-between-srcdoc-and-src-datatext-html-in-an&quot;&gt;Which is the difference between srcdoc=“…” and src=“data:text/html,…” in an &amp;lt;iframe&amp;gt;?&lt;/a&gt;를 참고하길 바란다.&lt;/p&gt;

&lt;p&gt;아주 간단한 코드니 굳이 설명하지 않아도 내용은 이해할 수 있으리라 본다. 원리만 간단히 설명하자면 iframe은 하나의 독립 문서이므로 새로운 iframe을 만들고 동적으로 html을 출력하면 넘겨주고 싶어도 넘겨줄 referrer가 없으므로 referrer를 제거하는 것과 같은 효과가 난다. 사실 이 방법은 referrer를 숨기는 것 외에도 여러가지로 활용될 수 있다(활용은 개인의 몫).&lt;/p&gt;</content><author><name>유영재</name></author><summary type="html">브라우저에서 http 요청을 하는 경우 대부분 referrer 정보가 넘어간다.(HTTP 리퍼러를 정의한 RFC에서 ‘referrer’를 ‘referer’라고 잘못 친 것에서 기인하여 HTTP 리퍼러는 ‘HTTP referer’라고 불린다 : 위키백과)

그런데 간혹 이 referrer를 숨기고 싶을 때가 있다. 현 페이지에서 resouces(js, css, image, ajax 등)를 요청할 때나 페이지를 이동할 때 referrer가 전송되는데 여기서는 resouces를 호출할 때 referrer를 숨기는 방법에 대해 설명하려고 한다.




  &amp;lt;meta&amp;gt; Tag를 이용한 referrer 제거


Remove http referrer에 보면 아래와 같이 referrer를 제거하는 방법을 소개하고 있다.

&amp;lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&amp;gt;



var meta = document.createElement('meta');
meta.name = &quot;referrer&quot;;
meta.content = &quot;no-referrer&quot;;
document.getElementsByTagName('head')[0].appendChild(meta);



html, javascript로 처리하는 두가지 방식이 있는데 html의 경우 &amp;lt;head&amp;gt; 내부에 넣어주면 된다. 그리고 javascript의 경우는 필요한 시점에 실행해주면 된다. 예를들어 특정 ajax 호출시에만 referrer를 숨기고자 하는 경우 등이다.

no-referrer 외에 사용할 수 있는 값은 unsafe-url, origin-when-cross-origin 등이 있는데 자세한 내용은 W3C Referrer Policy를 참고하면 된다. 여기보면 &amp;lt;a href=&quot;http://example.com&quot; referrerpolicy=&quot;origin&quot;&amp;gt; 와 같이 개별 링크에 Referrer 정책을 지정하는 방법들도 안내되어 있다.




  &amp;lt;IFrame&amp;gt; Tag를 이용한 referrer 제거


다른 방법으로는 iframe을 이용해서 referrer를 제거할 수 있다. 일단 아래의 코드를 보자.

&amp;lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
	&amp;lt;style type=&quot;text/css&quot;&amp;gt;
		html, body { width:100%; height:100%; margin:0; padding:0; }
		textarea { display:none; }
		iframe { width:100%; height:100%; }
	&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;textarea id=&quot;html&quot;&amp;gt;&amp;lt;!-- 실제 들어갈 HTML --&amp;gt;&amp;lt;/textarea&amp;gt;
&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
	var iframe = document.createElement('iframe');
	document.body.appendChild(iframe);

	var html = document.getElementById('html').value;

	// 가장 간단하지만 crass domain 문제가 있을 수 있다.
	// iframe.src = 'data:text/html;charset=utf-8,' + encodeURI(html);

	// cross domain issue 해결
	iframe.srcdoc = html;

	// (iframe.contentDefault || iframe.contentWindow.document).domain = document.domain;
&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;



srcdoc이 생소하다면 Which is the difference between srcdoc=“…” and src=“data:text/html,…” in an &amp;lt;iframe&amp;gt;?를 참고하길 바란다.

아주 간단한 코드니 굳이 설명하지 않아도 내용은 이해할 수 있으리라 본다. 원리만 간단히 설명하자면 iframe은 하나의 독립 문서이므로 새로운 iframe을 만들고 동적으로 html을 출력하면 넘겨주고 싶어도 넘겨줄 referrer가 없으므로 referrer를 제거하는 것과 같은 효과가 난다. 사실 이 방법은 referrer를 숨기는 것 외에도 여러가지로 활용될 수 있다(활용은 개인의 몫).</summary></entry><entry><title type="html">Flash swf 파일에서 ActionScript 추출하기(Show My Code)</title><link href="https://blog.asamaru.net/2016/11/04/decompile-actionscript-from-swf-by-show-my-code/" rel="alternate" type="text/html" title="Flash swf 파일에서 ActionScript 추출하기(Show My Code)" /><published>2016-11-04T11:34:35+09:00</published><updated>2016-11-04T11:34:35+09:00</updated><id>https://blog.asamaru.net/2016/11/04/decompile-actionscript-from-swf-by-show-my-code</id><content type="html" xml:base="https://blog.asamaru.net/2016/11/04/decompile-actionscript-from-swf-by-show-my-code/">&lt;p&gt;예전에는 Flash를 가끔씩 사용했던 적이 있었지만 최근 몇년 동안에는 관련된 처리를 할 일이 없었다(요즘엔 거의 사용을 하지 않으니 개발할 이유도 없었다). 그런데 이번에 작업을 하던 중 직접 Flash를 제작하는 것이 아니라 이미 만들어진 swf 파일의 ActionScript 소스 코드를 확인해야 하는 일이 생겼다. swf Decompiler는 검색하면 많이 나오기 때문에 크게 어려운 일은 아니지만 대부분 데모 버전으로 ActionScript를 확인하는데 불편함이 있어서 찾아보던 중 &lt;a href=&quot;http://www.showmycode.com/&quot;&gt;ShowMyCode.com&lt;/a&gt;이란 사이트를 발견했다. 여기선 swf 파일을 올리면 바로 ActionScript를 확인 할 수 있고 다운 받을 수도 있다.&lt;/p&gt;

&lt;p&gt;그런데 이 사이트는 swf decompile 만 제공하는 것이 아니라 아래의 프로그램들도 decompile 가능하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PHP file encoded with Zend Guard
    &lt;blockquote&gt;
      &lt;p&gt;Decode and get source of php files encoded with Zend Guard. This process also called dezending and the program called dezender (de-zender). So, dezend php files and get the source code!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Java class
    &lt;blockquote&gt;
      &lt;p&gt;Decompile java CLASS files and save source code in text. Reconstruct the original source code from the compiled binary.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Adobe flash swf
    &lt;blockquote&gt;
      &lt;p&gt;Decompile flash ActionScript from the swf flash file. Use this online flash swf decompiler to get the source code of the swf file.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;.NET application
    &lt;blockquote&gt;
      &lt;p&gt;Decompile .NET application and get it source code. Now you can get close to original source code of C# (c sharp), Visual Basic .NET (VB.NET.), Visual C++ .NET (VC++.NET) and J# (jay-sharp).&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;QR Code Image
    &lt;blockquote&gt;
      &lt;p&gt;QR-code Reader. Decode a QR Code and get text! It’s a two-dimensional bar code. The “QR” is derived from “Quick Response”. Most current mobile phones can read this code with their camera. UTF-8 is supported.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;대부분 전문적인 decompiler 들이 있겠지만 간단히 확인이 필요할 때는 유용하게 사용할 수 있을 것 같아 남겨둔다.&lt;/p&gt;</content><author><name>유영재</name></author><summary type="html">예전에는 Flash를 가끔씩 사용했던 적이 있었지만 최근 몇년 동안에는 관련된 처리를 할 일이 없었다(요즘엔 거의 사용을 하지 않으니 개발할 이유도 없었다). 그런데 이번에 작업을 하던 중 직접 Flash를 제작하는 것이 아니라 이미 만들어진 swf 파일의 ActionScript 소스 코드를 확인해야 하는 일이 생겼다. swf Decompiler는 검색하면 많이 나오기 때문에 크게 어려운 일은 아니지만 대부분 데모 버전으로 ActionScript를 확인하는데 불편함이 있어서 찾아보던 중 ShowMyCode.com이란 사이트를 발견했다. 여기선 swf 파일을 올리면 바로 ActionScript를 확인 할 수 있고 다운 받을 수도 있다.

그런데 이 사이트는 swf decompile 만 제공하는 것이 아니라 아래의 프로그램들도 decompile 가능하다.


  PHP file encoded with Zend Guard
    
      Decode and get source of php files encoded with Zend Guard. This process also called dezending and the program called dezender (de-zender). So, dezend php files and get the source code!
    
  
  Java class
    
      Decompile java CLASS files and save source code in text. Reconstruct the original source code from the compiled binary.
    
  
  Adobe flash swf
    
      Decompile flash ActionScript from the swf flash file. Use this online flash swf decompiler to get the source code of the swf file.
    
  
  .NET application
    
      Decompile .NET application and get it source code. Now you can get close to original source code of C# (c sharp), Visual Basic .NET (VB.NET.), Visual C++ .NET (VC++.NET) and J# (jay-sharp).
    
  
  QR Code Image
    
      QR-code Reader. Decode a QR Code and get text! It’s a two-dimensional bar code. The “QR” is derived from “Quick Response”. Most current mobile phones can read this code with their camera. UTF-8 is supported.
    
  


대부분 전문적인 decompiler 들이 있겠지만 간단히 확인이 필요할 때는 유용하게 사용할 수 있을 것 같아 남겨둔다.</summary></entry><entry><title type="html">OSX에서 Nokogiri 설치시 ‘Libxml2 missing.’ 오류 해결</title><link href="https://blog.asamaru.net/2016/11/01/nokogiri-libxml2-missing-mac-os-x-10-12/" rel="alternate" type="text/html" title="OSX에서 Nokogiri 설치시 'Libxml2 missing.' 오류 해결" /><published>2016-11-01T13:34:54+09:00</published><updated>2016-11-01T13:34:54+09:00</updated><id>https://blog.asamaru.net/2016/11/01/nokogiri-libxml2-missing-mac-os-x-10-12</id><content type="html" xml:base="https://blog.asamaru.net/2016/11/01/nokogiri-libxml2-missing-mac-os-x-10-12/">&lt;p&gt;OSX (sierra)에서 jekyll을 설치하던 중 &lt;a href=&quot;http://www.nokogiri.org/&quot;&gt;Nokogiri&lt;/a&gt;가 설치되는 과정에서 아래의 오류가 발생하고 더 이상이 진행되지 않는 문제가 발생했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;libxml2 is missing.  Please locate mkmf.log to investigate how it is failing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 문제는 libxml2가 설치되지 않아서 발생하는 문제로 libxml2부터 설치해야 한다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;brew install libxml2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;그런데 설치 후에도 동일한 문제가 발생한다면 &lt;a href=&quot;http://www.nokogiri.org/&quot;&gt;Nokogiri&lt;/a&gt;를 직접 설치하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/26878263/libxml2-missing-mac-os-x-10-10&quot;&gt;Libxml2 missing mac os x 10.10&lt;/a&gt; 글에 보면 아래와 같은 방법을 제시하고 있으나 정상적으로 동작하지 않았다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo env &lt;span class=&quot;nv&quot;&gt;ARCHFLAGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-arch x86_64&quot;&lt;/span&gt; gem install nokogiri:1.6.4.1 -- --use-system-libraries --with-xml&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/Cellar/libxml2/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;나의 경우는 아래와 같이 실행하면 정상적으로 Nokogiri를 설치할 수 있었다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install pkg-config -v &lt;span class=&quot;s2&quot;&gt;&quot;~&amp;gt; 1.1.7&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo gem install -n /usr/local/bin nokogiri -- --use-system-libraries&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; --with-xml2-include&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/include/libxml2/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>유영재</name></author><summary type="html">OSX (sierra)에서 jekyll을 설치하던 중 Nokogiri가 설치되는 과정에서 아래의 오류가 발생하고 더 이상이 진행되지 않는 문제가 발생했다.


  libxml2 is missing.  Please locate mkmf.log to investigate how it is failing.


이 문제는 libxml2가 설치되지 않아서 발생하는 문제로 libxml2부터 설치해야 한다.

$ brew install libxml2



그런데 설치 후에도 동일한 문제가 발생한다면 Nokogiri를 직접 설치하면 된다.

Libxml2 missing mac os x 10.10 글에 보면 아래와 같은 방법을 제시하고 있으나 정상적으로 동작하지 않았다.

$ sudo env ARCHFLAGS=&quot;-arch x86_64&quot; gem install nokogiri:1.6.4.1 -- --use-system-libraries --with-xml=/usr/local/Cellar/libxml2/



나의 경우는 아래와 같이 실행하면 정상적으로 Nokogiri를 설치할 수 있었다.

$ gem install pkg-config -v &quot;~&amp;gt; 1.1.7&quot;
$ sudo gem install -n /usr/local/bin nokogiri -- --use-system-libraries=true --with-xml2-include=/usr/include/libxml2/</summary></entry><entry><title type="html">nginx 504 Gateway Time-out 오류</title><link href="https://blog.asamaru.net/2016/10/26/nginx-504-error/" rel="alternate" type="text/html" title="nginx 504 Gateway Time-out 오류" /><published>2016-10-26T20:54:05+09:00</published><updated>2016-10-26T20:54:05+09:00</updated><id>https://blog.asamaru.net/2016/10/26/nginx-504-error</id><content type="html" xml:base="https://blog.asamaru.net/2016/10/26/nginx-504-error/">&lt;p&gt;nginx에서 &lt;em&gt;504 Gateway Time-out&lt;/em&gt; 오류가 발생할 경우는 리버스 프록시에서의 응답이 지정 시간보다 늦어질 경우다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/10/504.png&quot; alt=&quot;nginx 504 Gateway Time-out&quot; /&gt;&lt;/p&gt;

&lt;p&gt;접속이 지연되는 경우는 서버의 부하 문제나 WAS의 오류로 인한 것이니 nginx가 아닌 WAS 쪽에서 해결해야하는 것이 맞을 것이다.&lt;/p&gt;

&lt;p&gt;간혹 특수한 경우에 WAS 쪽의 처리가 오랜 시간을 필요로 하는 경우 어쩔 수 없이 timeout을 늘려야 하는 경우가 있을 수 있다. 이런 경우라면 &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_connect_timeout&quot;&gt;proxy_connect_timeout&lt;/a&gt;, &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_send_timeout&quot;&gt;proxy_send_timeout&lt;/a&gt;, &lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_read_timeout&quot;&gt;proxy_read_timeout&lt;/a&gt; 등을 사용해서 시간을 늘려줄 수 있다(기본은 60초다).&lt;/p&gt;

&lt;div class=&quot;language-nginx highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kn&quot;&gt;...&lt;/span&gt;

	&lt;span class=&quot;s&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kn&quot;&gt;proxy_connect_timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kn&quot;&gt;proxy_send_timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kn&quot;&gt;proxy_read_timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;kn&quot;&gt;send_timeout&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;사실 이런 경우는 서비스 중에는 발생해서는 안된다. 사용자가 이렇게 오랜 시간을 기다려줄 리가 없기 때문이다. 이런 기능이 필요하다면 Job Queue를 이용하거나 사용자에게 안내 메시지를 보내고 백그라운드에서 계속 실행되도록 하는 것이 맞을 것이다.&lt;/p&gt;

&lt;p&gt;php 에서는 이런 경우에 대비해서 &lt;a href=&quot;http://php.net/manual/kr/function.fastcgi-finish-request.php&quot;&gt;fastcgi_finish_request&lt;/a&gt;를 제공한다. 이 함수를 실행하면 사용자에게는 프로세스가 종료된 것처럼 response를 보내고 남은 작업을 계속 실행한다.&lt;/p&gt;

&lt;p&gt;다른 방법은 &lt;a href=&quot;http://php.net/manual/kr/function.ob-flush.php&quot;&gt;ob_flush&lt;/a&gt;와 &lt;a href=&quot;http://php.net/manual/kr/function.flush.php&quot;&gt;flush&lt;/a&gt;를 이용해서 response를 지속적으로 보내서 timeout이 발생하지 않도록 하는 것이다.&lt;/p&gt;</content><author><name>유영재</name></author><summary type="html">nginx에서 504 Gateway Time-out 오류가 발생할 경우는 리버스 프록시에서의 응답이 지정 시간보다 늦어질 경우다.



접속이 지연되는 경우는 서버의 부하 문제나 WAS의 오류로 인한 것이니 nginx가 아닌 WAS 쪽에서 해결해야하는 것이 맞을 것이다.

간혹 특수한 경우에 WAS 쪽의 처리가 오랜 시간을 필요로 하는 경우 어쩔 수 없이 timeout을 늘려야 하는 경우가 있을 수 있다. 이런 경우라면 proxy_connect_timeout, proxy_send_timeout, proxy_read_timeout 등을 사용해서 시간을 늘려줄 수 있다(기본은 60초다).

server {
	...

	location / {
		proxy_connect_timeout 300;
		proxy_send_timeout 300;
		proxy_read_timeout 300;
		send_timeout 300;
	}
}



사실 이런 경우는 서비스 중에는 발생해서는 안된다. 사용자가 이렇게 오랜 시간을 기다려줄 리가 없기 때문이다. 이런 기능이 필요하다면 Job Queue를 이용하거나 사용자에게 안내 메시지를 보내고 백그라운드에서 계속 실행되도록 하는 것이 맞을 것이다.

php 에서는 이런 경우에 대비해서 fastcgi_finish_request를 제공한다. 이 함수를 실행하면 사용자에게는 프로세스가 종료된 것처럼 response를 보내고 남은 작업을 계속 실행한다.

다른 방법은 ob_flush와 flush를 이용해서 response를 지속적으로 보내서 timeout이 발생하지 않도록 하는 것이다.</summary></entry><entry><title type="html">Mac 에서 git 사용시 한글 파일명 문제</title><link href="https://blog.asamaru.net/2016/10/19/mac-os-git-korean-file-name-error/" rel="alternate" type="text/html" title="Mac 에서 git 사용시 한글 파일명 문제" /><published>2016-10-19T17:51:22+09:00</published><updated>2016-10-19T17:51:22+09:00</updated><id>https://blog.asamaru.net/2016/10/19/mac-os-git-korean-file-name-error</id><content type="html" xml:base="https://blog.asamaru.net/2016/10/19/mac-os-git-korean-file-name-error/">&lt;p&gt;맥에서 git 사용시 파일이 한글로되어 있을 경우 해당 파일을 제대로 인식하지 못하는 문제가 있다. 맥에서의 한글 문제야 어제 오늘의 문제도 아니긴 하지만 한글 파일명을 사용해야 할 경우는 상당히 불편하다. 방법을 예전부터 찾고 있었는데 얼마전 우연히 관련 자료를 찾았다. 그래서 간단히 해결 방법만 남긴다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global core.precomposeunicode &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;git config --local core.precomposeunicode &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://git-scm.com/docs/git-config&quot;&gt;Git Documentation&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;core.precomposeUnicode&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;This option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>유영재</name></author><summary type="html">맥에서 git 사용시 파일이 한글로되어 있을 경우 해당 파일을 제대로 인식하지 못하는 문제가 있다. 맥에서의 한글 문제야 어제 오늘의 문제도 아니긴 하지만 한글 파일명을 사용해야 할 경우는 상당히 불편하다. 방법을 예전부터 찾고 있었는데 얼마전 우연히 관련 자료를 찾았다. 그래서 간단히 해결 방법만 남긴다.

git config --global core.precomposeunicode true
git config --local core.precomposeunicode true




  Git Documentation

  core.precomposeUnicode

  This option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git.</summary></entry><entry><title type="html">안드로이드 스튜디오에서 디바이스 연결이 끊어질 경우 다시 연결하는 방법</title><link href="https://blog.asamaru.net/2016/09/27/android-adb-device-reconnect/" rel="alternate" type="text/html" title="안드로이드 스튜디오에서 디바이스 연결이 끊어질 경우 다시 연결하는 방법" /><published>2016-09-27T10:59:50+09:00</published><updated>2016-09-27T10:59:50+09:00</updated><id>https://blog.asamaru.net/2016/09/27/android-adb-device-reconnect</id><content type="html" xml:base="https://blog.asamaru.net/2016/09/27/android-adb-device-reconnect/">&lt;p&gt;안드로이드 앱을 개발시 에뮬레이터를 사용하는 경우도 있으나 대부분의 경우는 실제 기기를 연결해서 작업하는 경우가 많다. 기존 에뮬레이터의 경우 너무 느린 속도와 호환 문제로 잘 사용하지 않는다. 최근 성능과 안정성이 많이 개선 되었다고는 하나 아직 여러가지 문제가 있다(예를들어 vagrant와 동시에 사용할 수 없다).&lt;/p&gt;

&lt;p&gt;기기를 사용해서 작업하는 경우 거추장스러운 선을 제거하기 위해 WIFI를 연결해서 디버깅하는 경우(&lt;a href=&quot;/2015/09/07/android-run-slash-install-slash-debug-applications-over-wifi/&quot;&gt;안드로이드 스튜디오에서 WIFI로 Run/Install/Debug 하기&lt;/a&gt;)도 있으나 연결의 귀찮음과 안정성 문제로 직접 선을 꽂아서 사용하는 경우가 많다.&lt;/p&gt;

&lt;p&gt;그런데 선을 직접 연결해도 수시로 adb와 디바이스의 연결이 끊어지는 문제가 발생하는 경우가 있다. 나의 경우 맥을 sierra로 업데이트 후 너무 심해졌다. 수시로 끊어지고 있다. 예전의 경우엔 USB 선의 문제로 이런 경우가 많았는데 이번엔 선을 바꿔봐도 소용이 없었다. 그래서 선을 매번 뺐다 꽂아서 다시 작업을 하고 있었는데 안 그래도 아이폰에 비해 단자가 헐거워지거나 고장 나는 경우가 많은데 계속 뺐다 꽂았다하기에는 무리가 있다.&lt;/p&gt;

&lt;p&gt;그래서 관련 자료를 찾아보니 PC에서 내보내는 전력이 안드로이드 기기에 충분하지 않지 않을 경우 이런 현상이 발생할 수 있고 최신 맥북에서 발생하는 경우가 많다는 사람이 있었다. 다른 사람은 USB 3.0을 사용하면서 그랬다는 사람도 있고…&lt;/p&gt;

&lt;p&gt;이런 경우 아래와 같이 USB 설정을 변경해서 해결했다는 사람들도 있었으나 맥에서는 관련 설정을 찾을 수 없었다(내가 못찾는 것일지도).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Scroll to the right and type ‘Power Options’ in the search field and click on it.&lt;/li&gt;
  &lt;li&gt;Click ‘Change plan setting’ on your chosen plan.&lt;/li&gt;
  &lt;li&gt;Click ‘Change advanced power setting’ on your chosen plan.&lt;/li&gt;
  &lt;li&gt;Find ‘USB settings’ and open.&lt;/li&gt;
  &lt;li&gt;Find ‘USB selective suspend setting’ and change it to disabled.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그래서 일단은 연결이 끊어지면 아래의 방법을 해결하고 있다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;adb &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt;-server &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; adb start-server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;귀찮기는하나 선을 매번 꽂았다 뺐다 하지 않아도 되는 것으로 일단 참고 있다.&lt;/p&gt;</content><author><name>유영재</name></author><summary type="html">안드로이드 앱을 개발시 에뮬레이터를 사용하는 경우도 있으나 대부분의 경우는 실제 기기를 연결해서 작업하는 경우가 많다. 기존 에뮬레이터의 경우 너무 느린 속도와 호환 문제로 잘 사용하지 않는다. 최근 성능과 안정성이 많이 개선 되었다고는 하나 아직 여러가지 문제가 있다(예를들어 vagrant와 동시에 사용할 수 없다).

기기를 사용해서 작업하는 경우 거추장스러운 선을 제거하기 위해 WIFI를 연결해서 디버깅하는 경우(안드로이드 스튜디오에서 WIFI로 Run/Install/Debug 하기)도 있으나 연결의 귀찮음과 안정성 문제로 직접 선을 꽂아서 사용하는 경우가 많다.

그런데 선을 직접 연결해도 수시로 adb와 디바이스의 연결이 끊어지는 문제가 발생하는 경우가 있다. 나의 경우 맥을 sierra로 업데이트 후 너무 심해졌다. 수시로 끊어지고 있다. 예전의 경우엔 USB 선의 문제로 이런 경우가 많았는데 이번엔 선을 바꿔봐도 소용이 없었다. 그래서 선을 매번 뺐다 꽂아서 다시 작업을 하고 있었는데 안 그래도 아이폰에 비해 단자가 헐거워지거나 고장 나는 경우가 많은데 계속 뺐다 꽂았다하기에는 무리가 있다.

그래서 관련 자료를 찾아보니 PC에서 내보내는 전력이 안드로이드 기기에 충분하지 않지 않을 경우 이런 현상이 발생할 수 있고 최신 맥북에서 발생하는 경우가 많다는 사람이 있었다. 다른 사람은 USB 3.0을 사용하면서 그랬다는 사람도 있고…

이런 경우 아래와 같이 USB 설정을 변경해서 해결했다는 사람들도 있었으나 맥에서는 관련 설정을 찾을 수 없었다(내가 못찾는 것일지도).


  Scroll to the right and type ‘Power Options’ in the search field and click on it.
  Click ‘Change plan setting’ on your chosen plan.
  Click ‘Change advanced power setting’ on your chosen plan.
  Find ‘USB settings’ and open.
  Find ‘USB selective suspend setting’ and change it to disabled.


그래서 일단은 연결이 끊어지면 아래의 방법을 해결하고 있다.

$ adb kill-server &amp;amp;&amp;amp; adb start-server



귀찮기는하나 선을 매번 꽂았다 뺐다 하지 않아도 되는 것으로 일단 참고 있다.</summary></entry><entry><title type="html">Google Service Library 9.6.0 사용시 READ_PHONE_STATE 권한이 추가되는 문제</title><link href="https://blog.asamaru.net/2016/09/23/google-service-library-9-6-0-used-read-phone-state-permission/" rel="alternate" type="text/html" title="Google Service Library 9.6.0 사용시 READ_PHONE_STATE 권한이 추가되는 문제" /><published>2016-09-23T07:41:21+09:00</published><updated>2016-09-23T07:41:21+09:00</updated><id>https://blog.asamaru.net/2016/09/23/google-service-library-9-6-0-used-read-phone-state-permission</id><content type="html" xml:base="https://blog.asamaru.net/2016/09/23/google-service-library-9-6-0-used-read-phone-state-permission/">&lt;p&gt;최근 서비스 중인 앱에서 사용중이던 &lt;a href=&quot;https://developers.google.com/android/guides/releases?hl=ko&quot;&gt;Google Service Library&lt;/a&gt;의 버전을 최신 버전으로 변경했다.
기존에 사용중이던 버전은 9.2.1 이었다. 얼마전 9.4.0으로 변경된 것을 확인하고 9.4.0을 적용했다. debug 모드와 release 모드에서의 동작을 확인한 후 “베타 테스트”에 올려 보니 이상하게도 모든 테스트 기기에서 앱이 응답하지 않는 문제가 확인되었다. 오류 보고나 기록이 나타나는 것도 아니어서 문제 확인이 어려웠고 처음엔 다른 작업 중에 변경한 코드들에서 원인이 있을 것이라고 추측 했었다. 하지만 많은 부분의 작업을 했던 터라 정확한 원인을 찾기가 어려웠다.&lt;/p&gt;

&lt;p&gt;기존에 firebase를 사용하지만 FCM이 아닌 GCM을 그대로 사용하고 있었는데 이것이 원인일 수 있겠다는 생각으로 FCM으로 변경했으나 문제가 해결되지 않았다.&lt;/p&gt;

&lt;p&gt;계속 테스트를 하던 중 &lt;a href=&quot;https://developers.google.com/android/guides/releases?hl=ko&quot;&gt;Google Service Library&lt;/a&gt;를 다시 확인하니 21일자로 9.6.0이 새로 나온 것을 확인하고 혹시나하고 한번 더 버전업하고 사전 출시 테스트를 하니 앱이 응답하지 않는 문제가 해결 되었다. 아마도 9.4.0과 해당 앱의 코드가 충돌하는 문제가 있었거나 9.4.0 버전 자체에 버그가 있었던 것으로 생각된다.&lt;/p&gt;

&lt;p&gt;하지만 문제는 여기서 다시 시작된다. 9.6.0을 사용하니 앱을 업데이트 하려고 할 때 추가 권한을 요구하고 있었다. 요구하는 권한은 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;android.permission.READ_PHONE_STATE
android.permission.READ_EXTERNAL_STORAGE
android.permission.WRITE_EXTERNAL_STORAGE
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;문제는 다른 것은 두더라도 &lt;code class=&quot;highlighter-rouge&quot;&gt;READ_PHONE_STATE&lt;/code&gt; 권한을 요구한다는 것이다. 이 부분은 사용자에게 불필요한 권한을 요구하는 부정적인 이미지를 줄 수 있어 문제가 있다고 생각하고 관련 정보를 찾아봤다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/38307751/firebase-permissions&quot;&gt;Firebase + Permissions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/p/android/issues/detail?id=223459&quot;&gt;Issue 223459:	Play Services library adding unnecessary READ_PHONE_STATE permission&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;확인해보니 나 말고도 이런 현상을 겪는 사람들이 있었던 것이다.&lt;/p&gt;

&lt;p&gt;9.4.0을 사용하면 앱이 응답하지 않는 문제가 발생할 확률이 있고(모두에게 발생하는 문제로는 보이지 않는다) 9.6.0은 불필요한 권한들이 추가되는 문제가 있다.&lt;/p&gt;

&lt;p&gt;그래서 현재로써는 9.2.1로 다시 되돌린 상태다. 당분간 &lt;a href=&quot;https://code.google.com/p/android/&quot;&gt;AOSP&lt;/a&gt;에서 해당 이슈를 지켜봐야 할 것 같다.&lt;/p&gt;

&lt;p&gt;현재 나의 경우는 AdMob을 사용하는 경우에 이 문제가 발생하는 것으로 보인다.
우선은 해당 권한이 실제로 필요 없다면 아래와 같이 부모 프로젝트에서 제거 할 수는 있다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.READ_PHONE_STATE&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;tools:node=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.READ_EXTERNAL_STORAGE&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;tools:node=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;uses-permission&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;android:name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;tools:node=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;remove&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;update : 2016.09.27.&lt;/p&gt;

&lt;p&gt;오늘 확인해보니 역시나 9.6.1이 새로 올라왔으며 해당 권한에 대한 patch가 포함되어 있다.&lt;/p&gt;</content><author><name>유영재</name></author><summary type="html">최근 서비스 중인 앱에서 사용중이던 Google Service Library의 버전을 최신 버전으로 변경했다.
기존에 사용중이던 버전은 9.2.1 이었다. 얼마전 9.4.0으로 변경된 것을 확인하고 9.4.0을 적용했다. debug 모드와 release 모드에서의 동작을 확인한 후 “베타 테스트”에 올려 보니 이상하게도 모든 테스트 기기에서 앱이 응답하지 않는 문제가 확인되었다. 오류 보고나 기록이 나타나는 것도 아니어서 문제 확인이 어려웠고 처음엔 다른 작업 중에 변경한 코드들에서 원인이 있을 것이라고 추측 했었다. 하지만 많은 부분의 작업을 했던 터라 정확한 원인을 찾기가 어려웠다.

기존에 firebase를 사용하지만 FCM이 아닌 GCM을 그대로 사용하고 있었는데 이것이 원인일 수 있겠다는 생각으로 FCM으로 변경했으나 문제가 해결되지 않았다.

계속 테스트를 하던 중 Google Service Library를 다시 확인하니 21일자로 9.6.0이 새로 나온 것을 확인하고 혹시나하고 한번 더 버전업하고 사전 출시 테스트를 하니 앱이 응답하지 않는 문제가 해결 되었다. 아마도 9.4.0과 해당 앱의 코드가 충돌하는 문제가 있었거나 9.4.0 버전 자체에 버그가 있었던 것으로 생각된다.

하지만 문제는 여기서 다시 시작된다. 9.6.0을 사용하니 앱을 업데이트 하려고 할 때 추가 권한을 요구하고 있었다. 요구하는 권한은 아래와 같다.

android.permission.READ_PHONE_STATE
android.permission.READ_EXTERNAL_STORAGE
android.permission.WRITE_EXTERNAL_STORAGE



문제는 다른 것은 두더라도 READ_PHONE_STATE 권한을 요구한다는 것이다. 이 부분은 사용자에게 불필요한 권한을 요구하는 부정적인 이미지를 줄 수 있어 문제가 있다고 생각하고 관련 정보를 찾아봤다.


  Firebase + Permissions
  Issue 223459:	Play Services library adding unnecessary READ_PHONE_STATE permission


확인해보니 나 말고도 이런 현상을 겪는 사람들이 있었던 것이다.

9.4.0을 사용하면 앱이 응답하지 않는 문제가 발생할 확률이 있고(모두에게 발생하는 문제로는 보이지 않는다) 9.6.0은 불필요한 권한들이 추가되는 문제가 있다.

그래서 현재로써는 9.2.1로 다시 되돌린 상태다. 당분간 AOSP에서 해당 이슈를 지켜봐야 할 것 같다.

현재 나의 경우는 AdMob을 사용하는 경우에 이 문제가 발생하는 것으로 보인다.
우선은 해당 권한이 실제로 필요 없다면 아래와 같이 부모 프로젝트에서 제거 할 수는 있다.

&amp;lt;uses-permission
	android:name=&quot;android.permission.READ_PHONE_STATE&quot;
	tools:node=&quot;remove&quot; /&amp;gt;
&amp;lt;uses-permission
	android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;
	tools:node=&quot;remove&quot; /&amp;gt;
&amp;lt;uses-permission
	android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;
	tools:node=&quot;remove&quot; /&amp;gt;





update : 2016.09.27.

오늘 확인해보니 역시나 9.6.1이 새로 올라왔으며 해당 권한에 대한 patch가 포함되어 있다.</summary></entry><entry><title type="html">안드로이드 WebView에서 HTML5 Video Full Screen 지원</title><link href="https://blog.asamaru.net/2016/08/12/playing-html5-video-on-fullscreen-in-android-webview/" rel="alternate" type="text/html" title="안드로이드 WebView에서 HTML5 Video Full Screen 지원" /><published>2016-08-12T20:15:23+09:00</published><updated>2016-08-12T20:15:23+09:00</updated><id>https://blog.asamaru.net/2016/08/12/playing-html5-video-on-fullscreen-in-android-webview</id><content type="html" xml:base="https://blog.asamaru.net/2016/08/12/playing-html5-video-on-fullscreen-in-android-webview/">&lt;p&gt;안드로이드 WebView에서 HTML5 Video를 재생할 경우 “전체창으로 보기”를 사용할 수 있다. 그런데 자동적으로 사용할 수 있는 것이 아니라 관련된 처리를 직접 해주어야 한다.&lt;/p&gt;

&lt;p&gt;필요한 처리는 아래와 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WebView에 WebChromeClient를 설정해 주어야 한다. 그렇지 않으면 4.0 이후에서 NullPointerException이 발생한다.&lt;/li&gt;
  &lt;li&gt;WebChromeClient를 설정하더라도  &lt;a href=&quot;https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowCustomView%28android.view.View, android.webkit.WebChromeClient.CustomViewCallback%29&quot;&gt;onShowCustomView()&lt;/a&gt;를 구현해주지 않으면 전체창 보기 상태에서 영상은 나오지 않고 소리만 재생되는 현상이 발생한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;android:hardwareAccelerated=&quot;true&quot;&lt;/code&gt; 등을 사용해서 Application 또는 해당 Activity에 하드웨어 가속을 켜줘야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/webkit/WebChromeClient.html#onShowCustomView%28android.view.View, android.webkit.WebChromeClient.CustomViewCallback%29&quot;&gt;onShowCustomView()&lt;/a&gt;를 구현한 소스는 아래와 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;import android.app.Activity;
import android.content.Context;
import android.os.Build;
import android.support.v4.content.ContextCompat;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.WebChromeClient;
import android.widget.FrameLayout;

public class FullscreenableChromeClient extends WebChromeClient {
	private Activity mActivity = null;

	private View mCustomView;
	private WebChromeClient.CustomViewCallback mCustomViewCallback;
	private int mOriginalOrientation;

	private FrameLayout mFullscreenContainer;

	private static final FrameLayout.LayoutParams COVER_SCREEN_PARAMS = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);

	public FullscreenableChromeClient(Activity activity) {
		this.mActivity = activity;
	}

	@Override
	public void onShowCustomView(View view, CustomViewCallback callback) {
		if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
			if (mCustomView != null) {
				callback.onCustomViewHidden();
				return;
			}

			mOriginalOrientation = mActivity.getRequestedOrientation();
			FrameLayout decor = (FrameLayout) mActivity.getWindow().getDecorView();
			mFullscreenContainer = new FullscreenHolder(mActivity);
			mFullscreenContainer.addView(view, COVER_SCREEN_PARAMS);
			decor.addView(mFullscreenContainer, COVER_SCREEN_PARAMS);
			mCustomView = view;
			setFullscreen(true);
			mCustomViewCallback = callback;
//			mActivity.setRequestedOrientation(requestedOrientation);
		}

		super.onShowCustomView(view, callback);
	}

	@SuppressWarnings(&quot;deprecation&quot;)
	@Override
	public void onShowCustomView(View view, int requestedOrientation, WebChromeClient.CustomViewCallback callback) {
		this.onShowCustomView(view, callback);
	}

	@Override
	public void onHideCustomView() {
		if (mCustomView == null) {
			return;
		}

		setFullscreen(false);
		FrameLayout decor = (FrameLayout) mActivity.getWindow().getDecorView();
		decor.removeView(mFullscreenContainer);
		mFullscreenContainer = null;
		mCustomView = null;
		mCustomViewCallback.onCustomViewHidden();
		mActivity.setRequestedOrientation(mOriginalOrientation);
	}

	private void setFullscreen(boolean enabled) {
		Window win = mActivity.getWindow();
		WindowManager.LayoutParams winParams = win.getAttributes();
		final int bits = WindowManager.LayoutParams.FLAG_FULLSCREEN;
		if (enabled) {
			winParams.flags |= bits;
		} else {
			winParams.flags &amp;amp;= ~bits;
			if (mCustomView != null) {
				mCustomView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
			}
		}
		win.setAttributes(winParams);
	}

	private static class FullscreenHolder extends FrameLayout {
		public FullscreenHolder(Context ctx) {
			super(ctx);
			setBackgroundColor(ContextCompat.getColor(ctx, android.R.color.black));
		}

		@Override
		public boolean onTouchEvent(MotionEvent evt) {
			return true;
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;사용법은 아래와 같다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;webView.setWebChromeClient(new FullscreenableChromeClient(activity));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;비슷한 방법으로 &lt;a href=&quot;http://stackoverflow.com/a/16179544&quot;&gt;Playing HTML5 video on fullscreen in android webview&lt;/a&gt;에서 안내하는 방법도 있다.&lt;/p&gt;

&lt;p&gt;어쨌든 결론은 Full Screen을 위한 별도의 View를 구성해줘야 한다는 것이다. 항상 느끼는 것이지만 이런 것들은 OS 또는 SDK 차원에서 기본적으로 제공하고 Custom이 필요할 경우만 처리하도록 하면 될 텐데 안드로이드는 이런 부분들이 너무 부족하다.&lt;/p&gt;</content><author><name>유영재</name></author><summary type="html">안드로이드 WebView에서 HTML5 Video를 재생할 경우 “전체창으로 보기”를 사용할 수 있다. 그런데 자동적으로 사용할 수 있는 것이 아니라 관련된 처리를 직접 해주어야 한다.

필요한 처리는 아래와 같다.


  WebView에 WebChromeClient를 설정해 주어야 한다. 그렇지 않으면 4.0 이후에서 NullPointerException이 발생한다.
  WebChromeClient를 설정하더라도  onShowCustomView()를 구현해주지 않으면 전체창 보기 상태에서 영상은 나오지 않고 소리만 재생되는 현상이 발생한다.
  android:hardwareAccelerated=&quot;true&quot; 등을 사용해서 Application 또는 해당 Activity에 하드웨어 가속을 켜줘야 한다.


onShowCustomView()를 구현한 소스는 아래와 같다.

import android.app.Activity;
import android.content.Context;
import android.os.Build;
import android.support.v4.content.ContextCompat;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.WebChromeClient;
import android.widget.FrameLayout;

public class FullscreenableChromeClient extends WebChromeClient {
	private Activity mActivity = null;

	private View mCustomView;
	private WebChromeClient.CustomViewCallback mCustomViewCallback;
	private int mOriginalOrientation;

	private FrameLayout mFullscreenContainer;

	private static final FrameLayout.LayoutParams COVER_SCREEN_PARAMS = new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);

	public FullscreenableChromeClient(Activity activity) {
		this.mActivity = activity;
	}

	@Override
	public void onShowCustomView(View view, CustomViewCallback callback) {
		if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
			if (mCustomView != null) {
				callback.onCustomViewHidden();
				return;
			}

			mOriginalOrientation = mActivity.getRequestedOrientation();
			FrameLayout decor = (FrameLayout) mActivity.getWindow().getDecorView();
			mFullscreenContainer = new FullscreenHolder(mActivity);
			mFullscreenContainer.addView(view, COVER_SCREEN_PARAMS);
			decor.addView(mFullscreenContainer, COVER_SCREEN_PARAMS);
			mCustomView = view;
			setFullscreen(true);
			mCustomViewCallback = callback;
//			mActivity.setRequestedOrientation(requestedOrientation);
		}

		super.onShowCustomView(view, callback);
	}

	@SuppressWarnings(&quot;deprecation&quot;)
	@Override
	public void onShowCustomView(View view, int requestedOrientation, WebChromeClient.CustomViewCallback callback) {
		this.onShowCustomView(view, callback);
	}

	@Override
	public void onHideCustomView() {
		if (mCustomView == null) {
			return;
		}

		setFullscreen(false);
		FrameLayout decor = (FrameLayout) mActivity.getWindow().getDecorView();
		decor.removeView(mFullscreenContainer);
		mFullscreenContainer = null;
		mCustomView = null;
		mCustomViewCallback.onCustomViewHidden();
		mActivity.setRequestedOrientation(mOriginalOrientation);
	}

	private void setFullscreen(boolean enabled) {
		Window win = mActivity.getWindow();
		WindowManager.LayoutParams winParams = win.getAttributes();
		final int bits = WindowManager.LayoutParams.FLAG_FULLSCREEN;
		if (enabled) {
			winParams.flags |= bits;
		} else {
			winParams.flags &amp;amp;= ~bits;
			if (mCustomView != null) {
				mCustomView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);
			}
		}
		win.setAttributes(winParams);
	}

	private static class FullscreenHolder extends FrameLayout {
		public FullscreenHolder(Context ctx) {
			super(ctx);
			setBackgroundColor(ContextCompat.getColor(ctx, android.R.color.black));
		}

		@Override
		public boolean onTouchEvent(MotionEvent evt) {
			return true;
		}
	}
}


사용법은 아래와 같다.

webView.setWebChromeClient(new FullscreenableChromeClient(activity));


비슷한 방법으로 Playing HTML5 video on fullscreen in android webview에서 안내하는 방법도 있다.

어쨌든 결론은 Full Screen을 위한 별도의 View를 구성해줘야 한다는 것이다. 항상 느끼는 것이지만 이런 것들은 OS 또는 SDK 차원에서 기본적으로 제공하고 Custom이 필요할 경우만 처리하도록 하면 될 텐데 안드로이드는 이런 부분들이 너무 부족하다.</summary></entry></feed>
