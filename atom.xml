<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

<title>이 세상에 하나는 남기고 가자</title><id>https://blog.asamaru.net/</id><updated>2017-04-25T22:00:04+09:00</updated><subtitle>세상에 필요한 소스코드 한줄 남기고 가자</subtitle><link href="https://blog.asamaru.net/" rel="alternate" type="text/html" /><link href="https://blog.asamaru.net/atom.xml" rel="self" type="application/atom+xml" /><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author>
<entry><id>https://blog.asamaru.net/2017/04/25/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8/</id><title type="html">PHP 에서 한글 파일명 사용시 pathinfo(), basename() 결과가 맞지 않는 문제 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/25/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8/"/><published>2017-04-25T20:27:54+09:00</published><updated>2017-04-25T21:59:55+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP에서 path에 대한 정보를 얻기 위해 pathinfo()와 basename()을 많이 사용한다. 그런데 path 내에 한글과 같이 UTF-8 문자열이 포함될 경우 결과가 이상하게 나올 수 있다. 일단 아래의 소스 코드와 실행 결과를 보자. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; echo '<br />'; $locales = explode("\n", trim(shell_exec('locale -a'))); foreach ($locales as $locale) { setlocale(LC_ALL, $locale); $info = pathinfo($filepath); if (strcmp($info['basename'], '가 나 다.txt') != 0) { echo $locale . ' -> ' . $info['basename'] . '<br />'; } } /* 실행 결과 Current Location : C C -> 나 다.txt C -> 나 다.txt POSIX -> 나 다.txt */ 위 코드는 현재 system 내에서 사용 가능한 모든 locale에 대해 실행 결과를 테스트한 결과다. 결과를 보면 정상적으로 처리되지 않고 첫글자가 잘려나간 잘못된 결과를 반환하는 경우가 있다. 바로 locale이 C 또는 POSIX인 경우다. 서버 환경 구성에 따른 차이가 있겠지만 나의 경우는 nobody 권한으로 실행되는 웹서버 상에서 현재 locale이 C로 나왔다. 따라서 한글 파일명이 포함된 path에 대해서는 pathinfo()를 사용할 수 없다. 이 문제에 대해 검색하다 Make PHP pathinfo() return the correct filename if the filename is UTF-8 라는 글을 찾았다. 여기서 질문을 한 aä.pdf path에 대해서는 현재 시점(PHP 7)에서 locale C와 POSIX에서도 문제가 없었다. 이 버그와 관련하여 패치가 되었지만 아직 한글에 대한 버그는 남아 있는 것으로 보인다. 혹시나 해서 아래와 같이 일본어로도 동일한 테스트를 해보니 역시나 문제가 발생한다. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/うながす.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; echo '<br />'; $locales = explode("\n", trim(shell_exec('locale -a'))); foreach ($locales as $locale) { setlocale(LC_ALL, $locale); $info = pathinfo($filepath); if (strcmp($info['basename'], 'うながす.txt') != 0) { echo $locale . ' -> ' . $info['basename'] . '<br />'; } } /* 실행 결과 Current Location : C C -> .txt C -> .txt POSIX -> .txt ja_JP -> ��ながす.txt ja_JP.eucjp -> ��ながす.txt ja_JP.ujis -> ��ながす.txt japanese -> ��ながす.txt japanese.euc -> ��ながす.txt ko_KR -> ��ながす.txt ko_KR.euckr -> ��ながす.txt korean -> ��ながす.txt korean.euc -> ��ながす.txt mt_MT -> ��ながす.txt mt_MT.iso88593 -> ��ながす.txt yi_US -> �ながす.txt yi_US.cp1255 -> �ながす.txt zh_CN -> .txt zh_CN.gb2312 -> .txt zh_HK -> �がす.txt zh_HK.big5hkscs -> �がす.txt zh_SG -> .txt zh_SG.gb2312 -> .txt zh_TW -> �がす.txt zh_TW.big5 -> �がす.txt zh_TW.euctw -> .txt */ 결론적으로 이 문제를 해결하기 위해서는 아래와 같이 간단히 해결 가능하다. <?php setlocale(LC_ALL,'ko_KR.UTF-8'); $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; /* 실행 결과 Current Location : ko_KR.UTF-8 ko_KR.UTF-8 -> 가 나 다.txt */ setlocale(LC_ALL,'ko_KR.UTF-8')와 같이 UTF-8을 사용하는 locale로 변경하면 한글 파일명을 가진 path에 대해서도 pathinfo는 정상적으로 동작한다(ko_KR임에도 불구하고 일본어도 정상 동작한다). 이 문제에서의 특징은 한가지가 더 있다. 파일명 앞에 영문자와 같이 한글이 아닌 글자가 있다면 이 문제가 발생하지 않는다는 것이다. 아래의 예시를 보자. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/a가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; /* 실행 결과 Current Location : C C -> a가 나 다.txt */ 이러한 원리를 이용한 방법으로 Make PHP pathinfo() return the correct filename if the filename is UTF-8에서는 아래와 같이 처리하는 방법을 제시하고 있다. <?php function getFilename($path) { // if there's no '/', we're probably dealing with just a filename // so just put an 'a' in front of it if (strpos($path, '/') === false) { $path_parts = pathinfo('a'.$path); } else { $path= str_replace('/', '/a', $path); $path_parts = pathinfo($path); } return substr($path_parts["filename"],1); } 하지만 이 방법 보다는 아래의 방법이 조금 더 나아 보인다(urlencode()를 이용하는 방법이다). <php function _pathinfo($path, $options = null) { $path = urlencode($path); $parts = null === $options ? pathinfo($path) : pathinfo($path, $options); foreach ($parts as $field => $value) { $parts[$field] = urldecode($value); } return $parts; } 결론적으로는 위 두가지 방법 보다는 setlocale(LC_ALL,'ko_KR.UTF-8') 을 이용해서 locale을 변경하는 것을 권장한다. 사용하는 라이브러리 내부 등에서도 pathinfo를 사용하는 경우가 있을 수 있으므로 프로그램이 시작시 locale을 변경하는 것이 좋을 것이다(단, locale이 다른 프로그램 영역에 영향을 줄 수 있는지에 대해서는 검토를 해보는 것이 좋다).]]></summary><content type="html"><![CDATA[<p>PHP에서 path에 대한 정보를 얻기 위해 <a href="http://php.net/manual/kr/function.pathinfo.php">pathinfo()</a>와 <a href="http://php.net/manual/kr/function.basename.php">basename()</a>을 많이 사용한다. 그런데 path 내에 한글과 같이 UTF-8 문자열이 포함될 경우 결과가 이상하게 나올 수 있다. 일단 아래의 소스 코드와 실행 결과를 보자.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$currentLocal</span> = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">"&lt;br/&gt;"</span>;

<span class="hljs-variable">$filepath</span> = <span class="hljs-string">'/home/가 나 다.txt'</span>;
<span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-variable">$locales</span> = explode(<span class="hljs-string">"\n"</span>, trim(shell_exec(<span class="hljs-string">'locale -a'</span>)));
<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$locales</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$locale</span>) {
    setlocale(LC_ALL, <span class="hljs-variable">$locale</span>);
    <span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
    <span class="hljs-keyword">if</span> (strcmp(<span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>], <span class="hljs-string">'가 나 다.txt'</span>) != <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$locale</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;
    }
}

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; 나 다.txt

C -&gt; 나 다.txt
POSIX -&gt; 나 다.txt
*/</span></pre>
<p>위 코드는 현재 system 내에서 사용 가능한 모든 locale에 대해 실행 결과를 테스트한 결과다. 결과를 보면 정상적으로 처리되지 않고 첫글자가 잘려나간 잘못된 결과를 반환하는 경우가 있다. 바로 locale이 <code>C</code> 또는 <code>POSIX</code>인 경우다.</p>
<p>서버 환경 구성에 따른 차이가 있겠지만 나의 경우는 nobody 권한으로 실행되는 웹서버 상에서 현재 locale이 <code>C</code>로 나왔다. 따라서 한글 파일명이 포함된 path에 대해서는 pathinfo()를 사용할 수 없다.</p>
<p>이 문제에 대해 검색하다 <a href="http://stackoverflow.com/questions/4451664/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8">Make PHP pathinfo() return the correct filename if the filename is UTF-8</a> 라는 글을 찾았다. 여기서 질문을 한 <code>aä.pdf</code> path에 대해서는 현재 시점(PHP 7)에서 locale <code>C</code>와 <code>POSIX</code>에서도 문제가 없었다. 이 버그와 관련하여 패치가 되었지만 아직 한글에 대한 버그는 남아 있는 것으로 보인다. 혹시나 해서 아래와 같이 일본어로도 동일한 테스트를 해보니 역시나 문제가 발생한다.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$currentLocal</span> = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">"&lt;br/&gt;"</span>;

<span class="hljs-variable">$filepath</span> = <span class="hljs-string">'/home/うながす.txt'</span>;
<span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-variable">$locales</span> = explode(<span class="hljs-string">"\n"</span>, trim(shell_exec(<span class="hljs-string">'locale -a'</span>)));
<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$locales</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$locale</span>) {
    setlocale(LC_ALL, <span class="hljs-variable">$locale</span>);
    <span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
    <span class="hljs-keyword">if</span> (strcmp(<span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>], <span class="hljs-string">'うながす.txt'</span>) != <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$locale</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;
    }
}

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; .txt

C -&gt; .txt
POSIX -&gt; .txt
ja_JP -&gt; ��ながす.txt
ja_JP.eucjp -&gt; ��ながす.txt
ja_JP.ujis -&gt; ��ながす.txt
japanese -&gt; ��ながす.txt
japanese.euc -&gt; ��ながす.txt
ko_KR -&gt; ��ながす.txt
ko_KR.euckr -&gt; ��ながす.txt
korean -&gt; ��ながす.txt
korean.euc -&gt; ��ながす.txt
mt_MT -&gt; ��ながす.txt
mt_MT.iso88593 -&gt; ��ながす.txt
yi_US -&gt; �ながす.txt
yi_US.cp1255 -&gt; �ながす.txt
zh_CN -&gt; .txt
zh_CN.gb2312 -&gt; .txt
zh_HK -&gt; �がす.txt
zh_HK.big5hkscs -&gt; �がす.txt
zh_SG -&gt; .txt
zh_SG.gb2312 -&gt; .txt
zh_TW -&gt; �がす.txt
zh_TW.big5 -&gt; �がす.txt
zh_TW.euctw -&gt; .txt
*/</span></pre>
<p>결론적으로 이 문제를 해결하기 위해서는 아래와 같이 간단히 해결 가능하다.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
setlocale(LC_ALL,<span class="hljs-string">'ko_KR.UTF-8'</span>);

<span class="hljs-variable">$currentLocal</span> = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">"&lt;br/&gt;"</span>;

<span class="hljs-variable">$filepath</span> = <span class="hljs-string">'/home/가 나 다.txt'</span>;
<span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-comment">/*
실행 결과

Current Location : ko_KR.UTF-8
ko_KR.UTF-8 -&gt; 가 나 다.txt
*/</span></pre>
<p><code>setlocale(LC_ALL,'ko_KR.UTF-8')</code>와 같이 <code>UTF-8</code>을 사용하는 locale로 변경하면 한글 파일명을 가진 path에 대해서도 pathinfo는 정상적으로 동작한다(<code>ko_KR</code>임에도 불구하고 일본어도 정상 동작한다).</p>
<p>이 문제에서의 특징은 한가지가 더 있다. 파일명 앞에 영문자와 같이 한글이 아닌 글자가 있다면 이 문제가 발생하지 않는다는 것이다. 아래의 예시를 보자.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$currentLocal</span> = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">"&lt;br/&gt;"</span>;

<span class="hljs-variable">$filepath</span> = <span class="hljs-string">'/home/a가 나 다.txt'</span>;
<span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; a가 나 다.txt
*/</span></pre>
<p>이러한 원리를 이용한 방법으로 <a href="http://stackoverflow.com/questions/4451664/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8">Make PHP pathinfo() return the correct filename if the filename is UTF-8</a>에서는 아래와 같이 처리하는 방법을 제시하고 있다.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFilename</span><span class="hljs-params">(<span class="hljs-variable">$path</span>)</span>
</span>{
    <span class="hljs-comment">// if there's no '/', we're probably dealing with just a filename</span>
    <span class="hljs-comment">// so just put an 'a' in front of it</span>
    <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$path</span>, <span class="hljs-string">'/'</span>) === <span class="hljs-keyword">false</span>)
    {
        <span class="hljs-variable">$path_parts</span> = pathinfo(<span class="hljs-string">'a'</span>.<span class="hljs-variable">$path</span>);
    }
    <span class="hljs-keyword">else</span>
    {
        <span class="hljs-variable">$path</span>= str_replace(<span class="hljs-string">'/'</span>, <span class="hljs-string">'/a'</span>, <span class="hljs-variable">$path</span>);
        <span class="hljs-variable">$path_parts</span> = pathinfo(<span class="hljs-variable">$path</span>);
    }
    <span class="hljs-keyword">return</span> substr(<span class="hljs-variable">$path_parts</span>[<span class="hljs-string">"filename"</span>],<span class="hljs-number">1</span>);
}</pre>
<p>하지만 이 방법 보다는 아래의 방법이 조금 더 나아 보인다(<a href="http://php.net/manual/kr/function.urldecode.php">urlencode()</a>를 이용하는 방법이다).</p>
<pre class="hljs php">&lt;php
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_pathinfo</span><span class="hljs-params">(<span class="hljs-variable">$path</span>, <span class="hljs-variable">$options</span> = null)</span>
</span>{
    <span class="hljs-variable">$path</span> = urlencode(<span class="hljs-variable">$path</span>);
    <span class="hljs-variable">$parts</span> = <span class="hljs-keyword">null</span> === <span class="hljs-variable">$options</span> ? pathinfo(<span class="hljs-variable">$path</span>) : pathinfo(<span class="hljs-variable">$path</span>, <span class="hljs-variable">$options</span>);
    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$parts</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$field</span> =&gt; <span class="hljs-variable">$value</span>) {
        <span class="hljs-variable">$parts</span>[<span class="hljs-variable">$field</span>] = urldecode(<span class="hljs-variable">$value</span>);
    }
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$parts</span>;
}</pre>
<p>결론적으로는 위 두가지 방법 보다는 <code>setlocale(LC_ALL,'ko_KR.UTF-8')</code> 을 이용해서 locale을 변경하는 것을 권장한다. 사용하는 라이브러리 내부 등에서도 pathinfo를 사용하는 경우가 있을 수 있으므로 프로그램이 시작시 locale을 변경하는 것이 좋을 것이다(단, locale이 다른 프로그램 영역에 영향을 줄 수 있는지에 대해서는 검토를 해보는 것이 좋다). </p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/12/could-not-find-comandroidsupportconstraintconstraint-layout/</id><title type="html">Could not find com.android.support.constraint:constraint-layout 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/12/could-not-find-comandroidsupportconstraintconstraint-layout/"/><published>2017-04-12T17:02:44+09:00</published><updated>2017-04-12T17:02:44+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 ConstraintLayout를 사용하기 위해 아래와 같이 gradle에 설정했었다. dependencies { compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha9' } 업데이트가 있는지 확인해 보니 1.0.1이 있기에 아래와 같이 변경했다. dependencies { compile 'com.android.support.constraint:constraint-layout:1.0.1' } 그리고 빌드를 해려고 했더니 아래와 같은 오류가 났다. Error:Could not find com.android.support.constraint:constraint-layout:1.0.1. Required by:myapp:app:unspecified 관련 정보를 검색해 보니 아래와 같이 설정이 필요하다. "Settings -> Appearance & Behavior -> System Settings -> Android SDK -> SDK Tools" 에서 "ConstraintLayout for Android" 를 체크해서 사용 가능하도록 해줘야 한다. 나의 경우는 기존에 사용했었기 때문에 체크는 되어 있었으나 업데이트가 되지 않아서 발생한 문제였다. 다시 체크하여 업데이트를 받고 나니 정상적으로 빌드가 완료되었다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 <a href="https://developer.android.com/training/constraint-layout/index.html">ConstraintLayout</a>를 사용하기 위해 아래와 같이 gradle에 설정했었다.</p>
<pre class="hljs gradle"><span class="hljs-keyword">dependencies</span> {
    <span class="hljs-keyword">compile</span> <span class="hljs-string">'com.android.support.constraint:constraint-layout:1.0.0-alpha9'</span>
}</pre>
<p>업데이트가 있는지 확인해 보니 1.0.1이 있기에 아래와 같이 변경했다.</p>
<pre class="hljs gradle"><span class="hljs-keyword">dependencies</span> {
    <span class="hljs-keyword">compile</span> <span class="hljs-string">'com.android.support.constraint:constraint-layout:1.0.1'</span>
}</pre>
<p>그리고 빌드를 해려고 했더니 아래와 같은 오류가 났다.</p>
<pre><code>Error:Could not find com.android.support.constraint:constraint-layout:1.0.1.
Required by:myapp:app:unspecified</code></pre>
<p>관련 정보를 검색해 보니 아래와 같이 설정이 필요하다.</p>
<p><img src="/res/img/post/2017/04/could-not-find-comandroidsupportconstraintconstraint-layout-1.png" alt="could-not-find-comandroidsupportconstraintconstraint-layout-1" width="988" height="699" /></p>
<p>&quot;Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK -&gt; SDK Tools&quot; 에서 &quot;ConstraintLayout for Android&quot; 를 체크해서 사용 가능하도록 해줘야 한다.</p>
<p>나의 경우는 기존에 사용했었기 때문에 체크는 되어 있었으나 업데이트가 되지 않아서 발생한 문제였다. 다시 체크하여 업데이트를 받고 나니 정상적으로 빌드가 완료되었다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/11/target-overrides-the-always-embed-swift-standard-libraries-build-setting/</id><title type="html">target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/11/target-overrides-the-always-embed-swift-standard-libraries-build-setting/"/><published>2017-04-11T21:40:03+09:00</published><updated>2017-04-11T21:40:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="swift" label="swift" /><summary><![CDATA[Xcode 8에서 cocoapods 사용시 아래와 같은 오류가 발생하는 경우가 있다. [!] The `xproject [Debug]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.debug.xcconfig'. This can lead to problems with the CocoaPods installation - Use the `$(inherited)` flag, or - Remove the build settings from the target. [!] The `xproject [Release]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.release.xcconfig'. This can lead to problems with the CocoaPods installation - Use the `$(inherited)` flag, or - Remove the build settings from the target. 최근 Xcode와 cocoapods를 업데이트하고 위와 같은 오류가 발생해서 찾아보니 Errors after updating to Xcode 8: "No such module" and "target overrides the EMBEDDED_CONTENT_CONTAINS_SWIFTbuild setting" 에서 해결 방법을 설명하고 있었다. Project/Targets -> [Project Name] -> Build Settings -> "ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES" 를 "$(inherited)"로 변경하는 것으로 위 문제는 간단히 해결된다. Xcode 8 Release Notes 주요 내용 정리를 보면 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES에 대해 다음과 같이 설명하고 있다. EMBEDDED_CONTENT_CONTAINS_SWIFT는 없어지고 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES가 추가되었다. 이 새로운 설정은 Xcode에서 항상 Swift Standard Libearies를 채워넣도록 지정하는 것이다. 대상에 직접 사용하거나 덧붙여 다른 제품이 Swift를 사용하는 경우에만 이 설정을 사용할 수 있다.]]></summary><content type="html"><![CDATA[<p>Xcode 8에서 <a href="https://cocoapods.org/">cocoapods</a> 사용시  아래와 같은 오류가 발생하는 경우가 있다.</p>
<pre class="hljs bash">[!] The `xproject [Debug]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined <span class="hljs-keyword">in</span> `Pods/Target Support Files/Pods-xproject/Pods-xproject.debug.xcconfig<span class="hljs-string">'. This can lead to problems with the CocoaPods installation
    - Use the `$(inherited)` flag, or
    - Remove the build settings from the target.

[!] The `xproject [Release]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.release.xcconfig'</span>. This can lead to problems with the CocoaPods installation
    - Use the `$(inherited)` flag, or
    - Remove the build settings from the target.</pre>
<p>최근 Xcode와 cocoapods를 업데이트하고 위와 같은 오류가 발생해서 찾아보니 <a href="http://stackoverflow.com/a/39686652">Errors after updating to Xcode 8: &quot;No such module&quot; and &quot;target overrides the <code>EMBEDDED_CONTENT_CONTAINS_SWIFT</code>build setting&quot;</a> 에서 해결 방법을 설명하고 있었다.</p>
<p>Project/Targets -&gt; [Project Name] -&gt; Build Settings -&gt;  &quot;ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES&quot; 를 &quot;$(inherited)&quot;로 변경하는 것으로 위 문제는 간단히 해결된다.</p>
<p><img src="/res/img/post/2017/04/target-overrides-the-always-embed-swift-standard-libraries-build-setting-1.png" alt="target-overrides-the-always-embed-swift-standard-libraries-build-setting-1" width="1123" height="247" /></p>
<p><a href="https://swifter.kr/2016/09/26/xcode-8-release-notes-%EC%A3%BC%EC%9A%94-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC/">Xcode 8 Release Notes 주요 내용 정리</a>를 보면 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES에 대해 다음과 같이 설명하고 있다.</p>
<blockquote>
<p>EMBEDDED_CONTENT_CONTAINS_SWIFT는 없어지고 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES가 추가되었다. 이 새로운 설정은 Xcode에서 항상 Swift Standard Libearies를 채워넣도록 지정하는 것이다. 대상에 직접 사용하거나 덧붙여 다른 제품이 Swift를 사용하는 경우에만 이 설정을 사용할 수 있다.</p>
</blockquote>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/04/css-image-vertical-center/</id><title type="html">CSS로 이미지 세로 중앙 정렬(Vertical align)하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/04/css-image-vertical-center/"/><published>2017-04-04T17:14:41+09:00</published><updated>2017-04-04T17:14:41+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="css" label="css" /><summary><![CDATA[HTML에서 <img>를 CSS만으로 비율을 유지한 채로 특정 영역의 중앙에 출력하는 방법은 다음과 같다. <!DOCTYPE html> <html> <head> <meta charset="utf-8"/> <style type="text/css"> /* 예시를 위한 css */ dl { float:left; margin-right:20px; } dt { clear:both; } dd { margin:0 0 20px 0; padding:10px; float:left; } dd > img, dd > div { border:#ccc solid 1px; float:left; margin-right:10px; } /* position 을 이용한 방법 */ div.box1 { position:relative; width:150px; height:200px; } div.box1 > img { position:absolute; max-width:100%; max-height:100%; width:auto; height:auto; margin:auto; top:0; bottom:0; left:0; right:0; } /* line-height 를 이용한 방법 */ div.box2 { width:150px; height:200px; line-height:200px; text-align:center; } div.box2 > img { max-width:100%; max-height:100%; vertical-align:middle; } /* :before / content 를 이용한 방법 */ div.box3 { width:150px; height:200px; text-align:center; white-space:nowrap; font:0/0 a; } div.box3:before { content:""; display:inline-block; vertical-align:middle; height:100%; } div.box3 > img { max-width:100%; max-height:100%; display:inline-block; vertical-align:middle; } /* flex 를 이용한 방법 */ div.box4 { width:150px; height:200px; display:flex; justify-content:center; align-items:center; } div.box4 > img { max-width:100%; max-height:100%; } </style> </head> <body> <dl> <dt>position 을 이용한 방법</dt> <dd> <div class="box1"> <img src="test_100px.png" alt="test image"/> </div> <div class="box1"> <img src="test_550px.png" alt="test image"/> </div> </dd> <dt>line-height 를 이용한 방법</dt> <dd> <div class="box2"> <img src="test_100px.png" alt="test image"/> </div> <div class="box2"> <img src="test_550px.png" alt="test image"/> </div> </dd> </dl> <dl> <dt>:before / content 를 이용한 방법</dt> <dd> <div class="box3"> <img src="test_100px.png" alt="test image"/> </div> <div class="box3"> <img src="test_550px.png" alt="test image"/> </div> </dd> <dt>flex 를 이용한 방법</dt> <dd> <div class="box4"> <img src="test_100px.png" alt="test image"/> </div> <div class="box4"> <img src="test_550px.png" alt="test image"/> </div> </dd> </dl> </body> </html> 총 4가지 방법을 예시로 나열했지만 나의 경우는 크로스 브라우징을 위해 "position 을 이용한 방법"이나 "line-height 를 이용한 방법"을 주로 사용한다. 하지만 상황에 따라서는 다른 방법이 유용할 수도 있기에 함께 남겨둔다. 그리고 여기서 사용된 원리를 잘 이용하면 다른 레이아웃을 구성하는데도 도움이 되니 한번쯤은 원리를 참고해보면 좋을 듯하다.]]></summary><content type="html"><![CDATA[<p>HTML에서 <code>&lt;img&gt;</code>를 CSS만으로 비율을 유지한 채로 특정 영역의 중앙에 출력하는 방법은 다음과 같다.</p>
<p><img src="/res/img/post/2017/04/image_align_center.png" alt="phpstorm formatter markers" width="706" height="509" /></p>
<pre class="hljs xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span>&gt;</span><span class="css">
        <span class="hljs-comment">/* 예시를 위한 css */</span>
        <span class="hljs-tag">dl</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">float</span>:<span class="hljs-value">left</span></span>; <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"><span class="hljs-number">20px</span></span></span>; }</span>
        <span class="hljs-tag">dt</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">clear</span>:<span class="hljs-value">both</span></span>; }</span>
        <span class="hljs-tag">dd</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">margin</span>:<span class="hljs-value"><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">padding</span>:<span class="hljs-value"><span class="hljs-number">10px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">float</span>:<span class="hljs-value">left</span></span>; }</span>
        <span class="hljs-tag">dd</span> &gt; <span class="hljs-tag">img</span>,
        <span class="hljs-tag">dd</span> &gt; <span class="hljs-tag">div</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">border</span>:<span class="hljs-value"><span class="hljs-hexcolor">#ccc</span> solid <span class="hljs-number">1px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">float</span>:<span class="hljs-value">left</span></span>; <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"><span class="hljs-number">10px</span></span></span>; }</span>
        <span class="hljs-comment">/* position 을 이용한 방법 */</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box1</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value">relative</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"><span class="hljs-number">150px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"><span class="hljs-number">200px</span></span></span>;
        }</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box1</span> &gt; <span class="hljs-tag">img</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value">absolute</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">max-width</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">max-height</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value">auto</span></span>; <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value">auto</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">margin</span>:<span class="hljs-value">auto</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">top</span>:<span class="hljs-value"><span class="hljs-number">0</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">bottom</span>:<span class="hljs-value"><span class="hljs-number">0</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">left</span>:<span class="hljs-value"><span class="hljs-number">0</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">right</span>:<span class="hljs-value"><span class="hljs-number">0</span></span></span>;
        }</span>
        <span class="hljs-comment">/* line-height 를 이용한 방법 */</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box2</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"><span class="hljs-number">150px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"><span class="hljs-number">200px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">line-height</span>:<span class="hljs-value"><span class="hljs-number">200px</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value">center</span></span>;
        }</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box2</span> &gt; <span class="hljs-tag">img</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">max-width</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">max-height</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value">middle</span></span>;
        }</span>
        <span class="hljs-comment">/* :before / content 를 이용한 방법 */</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box3</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"><span class="hljs-number">150px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"><span class="hljs-number">200px</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value">center</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">white-space</span>:<span class="hljs-value">nowrap</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">font</span>:<span class="hljs-value"><span class="hljs-number">0</span>/<span class="hljs-number">0</span> a</span></span>;
        }</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box3</span><span class="hljs-pseudo">:before</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">content</span>:<span class="hljs-value"><span class="hljs-string">""</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value">inline-block</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value">middle</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>;
        }</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box3</span> &gt; <span class="hljs-tag">img</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">max-width</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">max-height</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value">inline-block</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value">middle</span></span>;
        }</span>
        <span class="hljs-comment">/* flex 를 이용한 방법 */</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box4</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"><span class="hljs-number">150px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"><span class="hljs-number">200px</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value">flex</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">justify-content</span>:<span class="hljs-value">center</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">align-items</span>:<span class="hljs-value">center</span></span>;
        }</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box4</span> &gt; <span class="hljs-tag">img</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">max-width</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">max-height</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>;
        }</span>
    </span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>position 을 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box1"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_100px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box1"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_550px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>line-height 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box2"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_100px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box2"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_550px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">dl</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>:before / content 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box3"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_100px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box3"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_550px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>flex 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box4"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_100px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box4"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_550px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">dl</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></pre>
<p>총 4가지 방법을 예시로 나열했지만 나의 경우는 크로스 브라우징을 위해 &quot;position 을 이용한 방법&quot;이나 &quot;line-height 를 이용한 방법&quot;을 주로 사용한다. 하지만 상황에 따라서는 다른 방법이 유용할 수도 있기에 함께 남겨둔다. 그리고 여기서 사용된 원리를 잘 이용하면 다른 레이아웃을 구성하는데도 도움이 되니 한번쯤은 원리를 참고해보면 좋을 듯하다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/02/php-lock-file-using-symlink/</id><title type="html">PHP에서 symlink()를 이용해 lock 구현하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/02/php-lock-file-using-symlink/"/><published>2017-04-02T17:26:08+09:00</published><updated>2017-04-02T17:26:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP에서 외부 Extensions 없이 간단히 lock을 구현하고자 할 때 file을 이용하는 경우가 많다(file에 대한 읽기/쓰기 lock을 말하는 것이 아니다). 예를들어 어떤 프로세스가 중첩되어 실행되는 것을 막기 위한 lock이 필요할 수 있다. 나의 경우는 Laravel의 Queue를 사용하면서 Daemon을 동시에 여러개를 띄운 상황에서 특정 작업의 중첩을 막기 위해 필요했다. Job에 대한 중복 실행은 Laravel의 Queue가 DB lock을 이용해 자체적으로 처리한다. 하지만 나는 Job의 중복 실행을 막는 것이 아닌 프로세스의 중첩을 막는 것이 필요했다. 가장 간단한 구현을 생각하면 아래와 같이 할 수 있다. #!/usr/bin/php <?php define('LOCK_FILE', "/var/run/" . basename($argv[0], ".php") . ".lock"); if (isLocked()) { die("Already running.\n"); } # The rest of your script goes here.... echo "Hello world!\n"; sleep(30); unlink(LOCK_FILE); exit(0); function isLocked() { # If lock file exists, check if stale. If exists and is not stale, return TRUE # Else, create lock file and return FALSE. if (file_exists(LOCK_FILE)) { # check if it's stale $lockingPID = trim(file_get_contents(LOCK_FILE)); # Get all active PIDs. $pids = explode("\n", trim(`ps -e | awk '{print $1}'`)); # If PID is still active, return true if (in_array($lockingPID, $pids)) { return true; } # Lock-file is stale, so kill it. Then move on to re-creating it. echo "Removing stale lock file.\n"; unlink(LOCK_FILE); } file_put_contents(LOCK_FILE, getmypid() . "\n"); return false; } 위 코드는 Kevin Traas가 제시한 코드다. 내가 laravel에서 구현 했던 코드는 예시로 사용하기엔 여러 가지 다른 코드가 섞여있어 이해하기 쉬운 코드로 예를 들었다. 어차피 원리는 거의 유사하다. 위 코드는 잘 동작할 것처럼 보이지만 그렇지 않다(일반적인 상황에서는 잘 동작한다). 이유는 lock을 검사하는 코드와 lock을 생성하는 코드 사이에 다른 프로세스가 끼어들 수 있기 때문이다. 위에서 이야기한 것처럼 Daemon이 동시에 여러개 떠 있는 상황에서 동시에 lock을 사용하다보면 생각보다 빈번하게 오작동 한다(프로세스가 중첩된다). 이 문제를 해결하기 위해서는 symlink()를 이용하는 방법이 있다. 아래는 Kevin Traas가 제시한 코드의 문제와 해결 방법을 제시한 Radu Cristescu의 코드다. #!/usr/bin/php <?php define('LOCK_FILE', "/var/run/" . basename($argv[0], ".php") . ".lock"); if (!tryLock()) { die("Already running.\n"); } # remove the lock on exit (Control+C doesn't count as 'exit'?) register_shutdown_function('unlink', LOCK_FILE); # The rest of your script goes here.... echo "Hello world!\n"; sleep(30); exit(0); function tryLock() { # If lock file exists, check if stale. If exists and is not stale, return TRUE # Else, create lock file and return FALSE. if (@symlink("/proc/" . getmypid(), LOCK_FILE) !== false) # the @ in front of 'symlink' is to suppress the NOTICE you get if the LOCK_FILE exists { return true; } # link already exists # check if it's stale if (is_link(LOCK_FILE) && !is_dir(LOCK_FILE)) { unlink(LOCK_FILE); # try to lock again return tryLock(); } return false; } 간단히 설명하자면 symlink()를 이용해서 lock이 걸려 있는지를 검사하는 과정과 lock을 생성하는 과정을 한번에 처리하는 것이다. 이 방법을 사용하면 보다 안전하게 lock-file 매커니즘을 사용할 수 있다.]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/">PHP</a>에서 외부 Extensions 없이 간단히 lock을 구현하고자 할 때 file을 이용하는 경우가 많다(file에 대한 읽기/쓰기 lock을 말하는 것이 아니다).</p>
<p>예를들어 어떤 프로세스가 중첩되어 실행되는 것을 막기 위한 lock이 필요할 수 있다. 나의 경우는 <a href="https://laravel.com/">Laravel</a>의 <a href="https://laravel.com/docs/master/queues">Queue</a>를 사용하면서 Daemon을 동시에 여러개를 띄운 상황에서 특정 작업의 중첩을 막기 위해 필요했다. Job에 대한 중복 실행은 Laravel의 Queue가 DB lock을 이용해 자체적으로 처리한다. 하지만 나는 Job의 중복 실행을 막는 것이 아닌 프로세스의 중첩을 막는 것이 필요했다.</p>
<p>가장 간단한 구현을 생각하면 아래와 같이 할 수 있다.</p>
<pre class="hljs php"><span class="hljs-comment">#!/usr/bin/php</span>
<span class="hljs-preprocessor">&lt;?php</span>
define(<span class="hljs-string">'LOCK_FILE'</span>, <span class="hljs-string">"/var/run/"</span> . basename(<span class="hljs-variable">$argv</span>[<span class="hljs-number">0</span>], <span class="hljs-string">".php"</span>) . <span class="hljs-string">".lock"</span>);
<span class="hljs-keyword">if</span> (isLocked()) {
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"Already running.\n"</span>);
}

<span class="hljs-comment"># The rest of your script goes here....</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">"Hello world!\n"</span>;
sleep(<span class="hljs-number">30</span>);

unlink(LOCK_FILE);
<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isLocked</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment"># If lock file exists, check if stale.  If exists and is not stale, return TRUE</span>
    <span class="hljs-comment"># Else, create lock file and return FALSE.</span>

    <span class="hljs-keyword">if</span> (file_exists(LOCK_FILE)) {
        <span class="hljs-comment"># check if it's stale</span>
        <span class="hljs-variable">$lockingPID</span> = trim(file_get_contents(LOCK_FILE));

        <span class="hljs-comment"># Get all active PIDs.</span>
        <span class="hljs-variable">$pids</span> = explode(<span class="hljs-string">"\n"</span>, trim(`ps -e | awk <span class="hljs-string">'{print $1}'</span>`));

        <span class="hljs-comment"># If PID is still active, return true</span>
        <span class="hljs-keyword">if</span> (in_array(<span class="hljs-variable">$lockingPID</span>, <span class="hljs-variable">$pids</span>)) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
        }

        <span class="hljs-comment"># Lock-file is stale, so kill it.  Then move on to re-creating it.</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"Removing stale lock file.\n"</span>;
        unlink(LOCK_FILE);
    }

    file_put_contents(LOCK_FILE, getmypid() . <span class="hljs-string">"\n"</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;

}</pre>
<p>위 코드는 <a href="http://php.net/manual/en/function.getmypid.php#93753">Kevin Traas가 제시한 코드</a>다. 내가 laravel에서 구현 했던 코드는 예시로 사용하기엔 여러 가지 다른 코드가 섞여있어 이해하기 쉬운 코드로 예를 들었다. 어차피 원리는 거의 유사하다.</p>
<p>위 코드는 잘 동작할 것처럼 보이지만 그렇지 않다(일반적인 상황에서는 잘 동작한다). 이유는 lock을 검사하는 코드와 lock을 생성하는 코드 사이에 다른 프로세스가 끼어들 수 있기 때문이다.</p>
<p>위에서 이야기한 것처럼 Daemon이 동시에 여러개 떠 있는 상황에서 동시에 lock을 사용하다보면 생각보다 빈번하게 오작동 한다(프로세스가 중첩된다).</p>
<p>이 문제를 해결하기 위해서는 <a href="http://php.net/manual/en/function.symlink.php">symlink()</a>를 이용하는 방법이 있다.</p>
<p>아래는 Kevin Traas가 제시한 코드의 문제와 해결 방법을 제시한 <a href="http://php.net/manual/en/function.getmypid.php#112782">Radu Cristescu의 코드</a>다.</p>
<pre class="hljs php"><span class="hljs-comment">#!/usr/bin/php</span>
<span class="hljs-preprocessor">&lt;?php</span>

define(<span class="hljs-string">'LOCK_FILE'</span>, <span class="hljs-string">"/var/run/"</span> . basename(<span class="hljs-variable">$argv</span>[<span class="hljs-number">0</span>], <span class="hljs-string">".php"</span>) . <span class="hljs-string">".lock"</span>);

<span class="hljs-keyword">if</span> (!tryLock()) {
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"Already running.\n"</span>);
}

<span class="hljs-comment"># remove the lock on exit (Control+C doesn't count as 'exit'?)</span>
register_shutdown_function(<span class="hljs-string">'unlink'</span>, LOCK_FILE);

<span class="hljs-comment"># The rest of your script goes here....</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">"Hello world!\n"</span>;
sleep(<span class="hljs-number">30</span>);

<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment"># If lock file exists, check if stale.  If exists and is not stale, return TRUE</span>
    <span class="hljs-comment"># Else, create lock file and return FALSE.</span>

    <span class="hljs-keyword">if</span> (@symlink(<span class="hljs-string">"/proc/"</span> . getmypid(), LOCK_FILE) !== <span class="hljs-keyword">false</span>) <span class="hljs-comment"># the @ in front of 'symlink' is to suppress the NOTICE you get if the LOCK_FILE exists</span>
    {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
    }

    <span class="hljs-comment"># link already exists</span>
    <span class="hljs-comment"># check if it's stale</span>
    <span class="hljs-keyword">if</span> (is_link(LOCK_FILE) &amp;&amp; !is_dir(LOCK_FILE)) {
        unlink(LOCK_FILE);
        <span class="hljs-comment"># try to lock again</span>
        <span class="hljs-keyword">return</span> tryLock();
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
}</pre>
<p>간단히 설명하자면 <a href="http://php.net/manual/en/function.symlink.php">symlink()</a>를 이용해서 lock이 걸려 있는지를 검사하는 과정과 lock을 생성하는 과정을 한번에 처리하는 것이다. 이 방법을 사용하면 보다 안전하게 lock-file 매커니즘을 사용할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/01/phpstorm-disable-code-formatting-for-part-of-code/</id><title type="html">PhpStorm에서 부분적으로 코드 포멧팅(code formatting) disable 하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/01/phpstorm-disable-code-formatting-for-part-of-code/"/><published>2017-04-01T17:27:25+09:00</published><updated>2017-04-01T17:27:25+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="tip" label="tip" /><summary><![CDATA[PhpStorm을 사용하면서 자주 이용하는 기능 중 하나가 code formatting 기능이다. 코드의 가독성을 높이고 code style을 유지하는데 도움이 되기 때문이다. 이 기능을 사용하면서 항상 불편했던 것 중 하나가 부분적으로 code formatting을 제외할 수 없다는 것이었다. 그런데 알고 보니 이미 부분적으로 code formatting을 제외하는 기능이 존재했다. PhpStorm 중 2016.x 와 2017.x 기준으로 Preferences > Editor > Code Style > Formatter Control에서 'Enable formatter markers in comments'를 체크 해주고 code formatting 을 제외하고 싶은 곳을 @formatter:off와 @formatter:on으로 둘러싸주면 된다(설정을 보면 알겠지만 문구는 변경이 가능하다). PhpStorm 중 version 14의 경우는 Preferences > Editor > Code Style > Formatter Control에서 설정 가능하다고 한다. PHP를 기준으로 아래와 같이 사용 할 수 있다. <?php // @formatter:off $a = 1; $b = 2; // @formatter:on 또한, blade 템플릿을 기준으로 아래와 같이 사용 할 수 있다. {{--@formatter:off--}} @if(!empty($conf['site']['googleAnalytics'])) <script> if (typeof window.GoogleAnalyticsObject == 'undefined') { (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https://www.google-analytics.com/analytics.js','ga'); ga('create', '{{$conf['site']['googleAnalytics']}}', 'auto'); ga('send', 'pageview'); } </script> @endif {{--@formatter:on--}} 위의 예시를 보면 알겠지만 @formatter 문구는 주석으로 처리하면 된다(다른 언어의 경우도 해당 언어에서의 주석으로 처리하면 된다). 참고 : How to disable code formatting for some part of the code using comments?]]></summary><content type="html"><![CDATA[<p><a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a>을 사용하면서 자주 이용하는 기능 중 하나가 code formatting 기능이다. 코드의 가독성을 높이고 code style을 유지하는데 도움이 되기 때문이다.</p>
<p>이 기능을 사용하면서 항상 불편했던 것 중 하나가 부분적으로 code formatting을 제외할 수 없다는 것이었다. 그런데 알고 보니 이미 부분적으로 code formatting을 제외하는 기능이 존재했다.</p>
<p>PhpStorm 중 2016.x 와 2017.x 기준으로 <code>Preferences &gt; Editor &gt; Code Style &gt; Formatter Control</code>에서 'Enable formatter markers in comments'를 체크 해주고 code formatting 을 제외하고 싶은 곳을 <code>@formatter:off</code>와 <code>@formatter:on</code>으로 둘러싸주면 된다(설정을 보면 알겠지만 문구는 변경이 가능하다).</p>
<p><img src="/res/img/post/2017/04/phpstorm_formatter_markers.png" alt="phpstorm formatter markers" width="1035" height="734" /></p>
<p>PhpStorm 중 version 14의 경우는 <code>Preferences &gt; Editor &gt; Code Style &gt; Formatter Control</code>에서 설정 가능하다고 한다.</p>
<p>PHP를 기준으로 아래와 같이 사용 할 수 있다.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>

<span class="hljs-comment">// @formatter:off</span>
<span class="hljs-variable">$a</span> = <span class="hljs-number">1</span>;
<span class="hljs-variable">$b</span> = <span class="hljs-number">2</span>;
<span class="hljs-comment">// @formatter:on</span></pre>
<p>또한, blade 템플릿을 기준으로 아래와 같이 사용 할 수 있다.</p>
<pre class="hljs xml">{{--@formatter:off--}}
@if(!empty($conf['site']['googleAnalytics']))
  <span class="hljs-tag">&lt;<span class="hljs-title">script</span>&gt;</span><span class="javascript">
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span>.GoogleAnalyticsObject == <span class="hljs-string">'undefined'</span>) {
      (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i,s,o,g,r,a,m</span>)</span>{i[<span class="hljs-string">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
          (i[r].q=i[r].q||[]).push(<span class="hljs-built_in">arguments</span>)},i[r].l=<span class="hljs-number">1</span>*<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();a=s.createElement(o),
        m=s.getElementsByTagName(o)[<span class="hljs-number">0</span>];a.async=<span class="hljs-number">1</span>;a.src=g;m.parentNode.insertBefore(a,m)
      })(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'https://www.google-analytics.com/analytics.js'</span>,<span class="hljs-string">'ga'</span>);

      ga(<span class="hljs-string">'create'</span>, <span class="hljs-string">'{{$conf['</span>site<span class="hljs-string">']['</span>googleAnalytics<span class="hljs-string">']}}'</span>, <span class="hljs-string">'auto'</span>);
      ga(<span class="hljs-string">'send'</span>, <span class="hljs-string">'pageview'</span>);
    }
  </span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
@endif
{{--@formatter:on--}}</pre>
<p>위의 예시를 보면 알겠지만 <code>@formatter</code> 문구는 주석으로 처리하면 된다(다른 언어의 경우도 해당 언어에서의 주석으로 처리하면 된다).</p>
<hr />
<p>참고 : <a href="http://stackoverflow.com/a/19492318">How to disable code formatting for some part of the code using comments?</a></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/03/17/laravel-schedule-artisan-commands-in-a-package/</id><title type="html">laravel(또는 lumen) package 에서 schedule 추가</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/03/17/laravel-schedule-artisan-commands-in-a-package/"/><published>2017-03-17T11:25:36+09:00</published><updated>2017-03-17T11:25:36+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="laravel" label="laravel" /><summary><![CDATA[laravel을 사용하는 프로젝트에서 schedule 처리는 Task Scheduling에 안내되어 있는 것처럼 \App\Console\Kernel의 schedule(Schedule $schedule) 메서드 내에서 정의해서 사용한다. laravel 기반 프로젝트에 추가한 package(module)에서 직접 schedule을 추가하고 싶다면 어떻게 해야 할까? 이 부분에 대해서는 메뉴얼 상에 안내된 내용이 없다. 하지만 "How to schedule Artisan commands in a package?" 글을 참고하면 아래와 같이 처리할 수 있다. use Illuminate\Support\ServiceProvider; use Illuminate\Console\Scheduling\Schedule; class ScheduleServiceProvider extends ServiceProvider { public function boot() { $this->app->booted(function () { $schedule = $this->app->make(Schedule::class); $schedule->command('some:command')->everyMinute(); }); } public function register() { } } Application Class의 booted($callback) 함수를 사용해서 schedule을 추가하는 것이다. 그런데 이 booted 함수가 lumen에서는 존재하지 않는다. booted 함수가 없는 것이 문제가 되는 이유는 schedule 개체를 만드는 Kernel Class의 defineConsoleSchedule() 메서드가 아래와 같이 구현되어 있으며 이 메서드는 Provider가 구성된 이후에 실행 되므로 $schedule 개체에 추가적인 schedule을 추가할 수 있는 진입 지점이 없다. protected function defineConsoleSchedule() { $this->app->instance( 'Illuminate\Console\Scheduling\Schedule', $schedule = new Schedule($this->app[Cache::class]) ); $this->schedule($schedule); } 따라서 lumen 프로젝트에서는 package 내부에서 직접적으로 schedule을 추가하는 것은 불가능해 보인다. 굳이 해야 한다면 Kernel 클래스의 defineConsoleSchedule() 메서드를 override 하여 아래와 같이 구현해야 한다. protected function defineConsoleSchedule() { $this->app->instance( 'Illuminate\Console\Scheduling\Schedule', $schedule = ScheduleHelper::get() ); $this->schedule($schedule); } new Schedule($this->app[Cache::class]) 대신에 ScheduleHelper::get()에서 인스턴스를 받아서 사용한다. use Illuminate\Console\Scheduling\Schedule; use Illuminate\Contracts\Cache\Repository as Cache; class ScheduleHelper { /** @var Schedule */ private static $scheduleInstance = null; /** * @return Schedule */ static public function &get() { if (empty(static::$scheduleInstance)) { static::$scheduleInstance = new Schedule(app(Cache::class)); } return static::$scheduleInstance; } } ScheduleHelper에서는 schedule 인스턴스를 싱글톤으로 반환한다. use Illuminate\Support\ServiceProvider; use Illuminate\Console\Scheduling\Schedule; class ScheduleServiceProvider extends ServiceProvider { public function boot() { $schedule = ScheduleHelper::get(); $schedule->command('some:command')->everyMinute(); } public function register() { } } Provider 에서는 ScheduleHelper::get()를 이용해서 schedule 인스턴스를 받아 schedule을 추가 한다. 위 방법은 lumen 프로젝트와 package 간의 종속 관계가 생기므로 권장할만한 방법은 아니다. 다만, 나의 경우는 lumen 프로젝트 개설시 기본적으로 직접 개발한 package를 사용하고 해당 package에서 기본 제어를 하도록 되어 있기 때문에 위 방법이 유용하게 사용될 수 있다(사실 대부분의 개발자들의 의견은 lumen은 간단한 프로젝트에서만 사용하고 다소 복잡해질 수 있는 프로젝트는 그냥 laravel을 쓰라는 것이다).]]></summary><content type="html"><![CDATA[<p><a href="https://laravel.com">laravel</a>을 사용하는 프로젝트에서 schedule 처리는 <a href="https://laravel.com/docs/5.4/scheduling">Task Scheduling</a>에 안내되어 있는 것처럼 <code>\App\Console\Kernel</code>의 <code>schedule(Schedule $schedule)</code> 메서드 내에서 정의해서 사용한다.</p>
<p>laravel 기반 프로젝트에 추가한 package(module)에서 직접 schedule을 추가하고 싶다면 어떻게 해야 할까? 이 부분에 대해서는 메뉴얼 상에 안내된 내용이 없다. 하지만 &quot;<a href="http://stackoverflow.com/a/36630136">How to schedule Artisan commands in a package?</a>&quot; 글을 참고하면 아래와 같이 처리할 수 있다.</p>
<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Scheduling</span>\<span class="hljs-title">Schedule</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduleServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-variable">$this</span>-&gt;app-&gt;booted(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
            <span class="hljs-variable">$schedule</span> = <span class="hljs-variable">$this</span>-&gt;app-&gt;make(Schedule::class);
            <span class="hljs-variable">$schedule</span>-&gt;command(<span class="hljs-string">'some:command'</span>)-&gt;everyMinute();
        });
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>
    </span>{
    }
}</pre>
<p>Application Class의 <code>booted($callback)</code> 함수를 사용해서 schedule을 추가하는 것이다.</p>
<hr />
<p>그런데 이 <code>booted</code> 함수가 <a href="https://lumen.laravel.com/">lumen</a>에서는 존재하지 않는다. <code>booted</code> 함수가 없는 것이 문제가 되는 이유는 schedule 개체를 만드는 Kernel Class의 <code>defineConsoleSchedule()</code> 메서드가 아래와 같이 구현되어 있으며 이 메서드는 Provider가 구성된 이후에 실행 되므로 <code>$schedule</code> 개체에 추가적인 schedule을 추가할 수 있는 진입 지점이 없다.</p>
<pre class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineConsoleSchedule</span><span class="hljs-params">()</span>
</span>{
  <span class="hljs-variable">$this</span>-&gt;app-&gt;instance(
      <span class="hljs-string">'Illuminate\Console\Scheduling\Schedule'</span>, <span class="hljs-variable">$schedule</span> = <span class="hljs-keyword">new</span> Schedule(<span class="hljs-variable">$this</span>-&gt;app[Cache::class])
  );

  <span class="hljs-variable">$this</span>-&gt;schedule(<span class="hljs-variable">$schedule</span>);
}</pre>
<p>따라서 lumen 프로젝트에서는 package 내부에서 직접적으로 schedule을 추가하는 것은 불가능해 보인다. 굳이 해야 한다면 Kernel 클래스의 <code>defineConsoleSchedule()</code> 메서드를 override 하여 아래와 같이 구현해야 한다.</p>
<pre class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineConsoleSchedule</span><span class="hljs-params">()</span>
</span>{
  <span class="hljs-variable">$this</span>-&gt;app-&gt;instance(
    <span class="hljs-string">'Illuminate\Console\Scheduling\Schedule'</span>, <span class="hljs-variable">$schedule</span> = ScheduleHelper::get()
  );

  <span class="hljs-variable">$this</span>-&gt;schedule(<span class="hljs-variable">$schedule</span>);
}</pre>
<p><code>new Schedule($this-&gt;app[Cache::class])</code> 대신에 <code>ScheduleHelper::get()</code>에서 인스턴스를 받아서 사용한다.</p>
<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Scheduling</span>\<span class="hljs-title">Schedule</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Repository</span> <span class="hljs-title">as</span> <span class="hljs-title">Cache</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduleHelper</span>
</span>{
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Schedule */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-variable">$scheduleInstance</span> = <span class="hljs-keyword">null</span>;

    <span class="hljs-comment">/**
     * <span class="hljs-doctag">@return</span> Schedule
     */</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> &amp;<span class="hljs-title">get</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">static</span>::<span class="hljs-variable">$scheduleInstance</span>)) {
            <span class="hljs-keyword">static</span>::<span class="hljs-variable">$scheduleInstance</span> = <span class="hljs-keyword">new</span> Schedule(app(Cache::class));
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">static</span>::<span class="hljs-variable">$scheduleInstance</span>;
    }
}</pre>
<p><code>ScheduleHelper</code>에서는 schedule 인스턴스를 싱글톤으로 반환한다.</p>
<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Scheduling</span>\<span class="hljs-title">Schedule</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduleServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>
</span>{
  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>
  </span>{
    <span class="hljs-variable">$schedule</span> = ScheduleHelper::get();
    <span class="hljs-variable">$schedule</span>-&gt;command(<span class="hljs-string">'some:command'</span>)-&gt;everyMinute();
  }

  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>
  </span>{
  }
}</pre>
<p>Provider 에서는 <code>ScheduleHelper::get()</code>를 이용해서 schedule 인스턴스를 받아 schedule을 추가 한다.</p>
<hr />
<p>위 방법은 lumen 프로젝트와 package 간의 종속 관계가 생기므로 권장할만한 방법은 아니다. 다만, 나의 경우는 lumen 프로젝트 개설시 기본적으로 직접 개발한 package를 사용하고 해당 package에서 기본 제어를 하도록 되어 있기 때문에 위 방법이 유용하게 사용될 수 있다(사실 대부분의 개발자들의 의견은 lumen은 간단한 프로젝트에서만 사용하고 다소 복잡해질 수 있는 프로젝트는 그냥 laravel을 쓰라는 것이다).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/03/08/laravel-log-files-permisson-change/</id><title type="html">라라벨(laravel) log 파일 권한 변경</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/03/08/laravel-log-files-permisson-change/"/><published>2017-03-08T10:37:02+09:00</published><updated>2017-03-08T10:37:02+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="laravel" label="laravel" /><summary><![CDATA[laravel 에서는 기본적으로 오류 로그를 "storage/logs"에 저장한다. 별다른 설정이 없다면 해당 경로에 실행 프로세스의 권한으로 로그 파일이 저장되는데 이것이 문제가 되는 경우가 있다. 예를들어 web server는 nobody 권한을 사용하고 crontab의 경우 root를 사용한다고 가정하다. crontab에 의해서 실행된 laravel 프로세스에서 오류가 발생하여 로그 파일이 생성 되었다면 이 파일의 권한은 기본적으로 root permission 에 644(-rw-r--r--)로 저장된다(서버 설정에 따라 다소 다를 수 있음). 이 상태에서 web server에서 실행한 프로세스에서 오류가 발생한다면 로그 파일에 접근할 권한이 없어 파일 저장 오류가 발생한다. 이 문제를 권한 변경없이 해결 할 수 있는 방법은 다음과 같다. <?php $app->configureMonologUsing(function(Monolog\Logger $monolog) { $filename = storage_path('/logs/laravel-' . php_sapi_name() . '.log'); $handler = new Monolog\Handler\RotatingFileHandler($filename, 5); $monolog->pushHandler($handler); }); 위 내용을 bootstrap이나 Provider에 추가한다. 이 방법은 php_sapi_name() 함수를 사용해서 인터페이스 형식을 로그 파일명에 추가함으로써 shell과 web의 로그 파일을 분리하는 것이다(권한 문제와는 상관없지만 RotatingFileHandler의 두번째 인자로 5가 추가되어 일단위로 5개의 파일까지 로그를 분할 저장하도록 되어있다). 일반적인 경우라면 이 정도로 문제는 모두 해결된다. 그리고 대부분 권한을 변경하기 보다는 위 방법을 권장한다. 하지만 다음의 경우를 생각해보자. crontab은 root에서 실행되나 작업 또는 테스트 등의 이유로 root가 아닌 사용자 계정의 shell에서 laravel 프로세스를 실행하는 경우 이미 root에 의해 로그 파일이 이미 생성되었다면 위 방법으로는 완전히 해결되지 않는다. 이러한 경우라면 아래와 같이 직접 permisson을 변경하는 방법도 가능하다. <?php $app->configureMonologUsing(function(Monolog\Logger $monolog) { $filename = storage_path('/logs/laravel-' . php_sapi_name() . '.log'); $handler = new Monolog\Handler\RotatingFileHandler($filename, 5, \Monolog\Logger::DEBUG, true, 0666); $monolog->pushHandler($handler); }); RotatingFileHandler에 추가 인자를 넘겨주어 로그 파일의 권한을 666(-rw-rw-rw-)으로 주도록 변경한 것이다. 혹 로그 파일의 수를 줄이고 싶거나 shell과 web의 로그가 분리되는 것이 싫다면 $filename 부분에서 php_sapi_name()를 제거하면 된다.]]></summary><content type="html"><![CDATA[<p><a href="https://laravel.com/">laravel</a> 에서는 기본적으로 오류 로그를 &quot;storage/logs&quot;에 저장한다. 별다른 설정이 없다면 해당 경로에 실행 프로세스의 권한으로 로그 파일이 저장되는데 이것이 문제가 되는 경우가 있다.</p>
<p>예를들어 web server는 nobody 권한을 사용하고 crontab의 경우 root를 사용한다고 가정하다. crontab에 의해서 실행된 laravel 프로세스에서 오류가 발생하여 로그 파일이 생성 되었다면 이 파일의 권한은 기본적으로 root permission 에 <code>644(-rw-r--r--)</code>로 저장된다(서버 설정에 따라 다소 다를 수 있음). 이 상태에서 web server에서 실행한 프로세스에서 오류가 발생한다면 로그 파일에 접근할 권한이 없어 파일 저장 오류가 발생한다.</p>
<p>이 문제를 권한 변경없이 해결 할 수 있는 방법은 다음과 같다.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$app</span>-&gt;configureMonologUsing(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(Monolog\Logger <span class="hljs-variable">$monolog</span>)</span> </span>{
    <span class="hljs-variable">$filename</span> = storage_path(<span class="hljs-string">'/logs/laravel-'</span> . php_sapi_name() . <span class="hljs-string">'.log'</span>);
    <span class="hljs-variable">$handler</span> = <span class="hljs-keyword">new</span> Monolog\Handler\RotatingFileHandler(<span class="hljs-variable">$filename</span>, <span class="hljs-number">5</span>);  
    <span class="hljs-variable">$monolog</span>-&gt;pushHandler(<span class="hljs-variable">$handler</span>);
});</pre>
<p>위 내용을 bootstrap이나 Provider에 추가한다.</p>
<p>이 방법은 <a href="http://php.net/manual/kr/function.php-sapi-name.php">php_sapi_name()</a> 함수를 사용해서 인터페이스 형식을 로그 파일명에 추가함으로써 shell과 web의 로그 파일을 분리하는 것이다(권한 문제와는 상관없지만 RotatingFileHandler의 두번째 인자로 5가 추가되어 일단위로 5개의 파일까지 로그를 분할 저장하도록 되어있다).</p>
<p>일반적인 경우라면 이 정도로 문제는 모두 해결된다. 그리고 대부분 권한을 변경하기 보다는 위 방법을 권장한다. 하지만 다음의 경우를 생각해보자.</p>
<p>crontab은 root에서 실행되나 작업 또는 테스트 등의 이유로 root가 아닌 사용자 계정의 shell에서 laravel 프로세스를 실행하는 경우 이미 root에 의해 로그 파일이 이미 생성되었다면 위 방법으로는 완전히 해결되지 않는다. 이러한 경우라면 아래와 같이 직접 permisson을 변경하는 방법도 가능하다.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$app</span>-&gt;configureMonologUsing(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(Monolog\Logger <span class="hljs-variable">$monolog</span>)</span> </span>{
    <span class="hljs-variable">$filename</span> = storage_path(<span class="hljs-string">'/logs/laravel-'</span> . php_sapi_name() . <span class="hljs-string">'.log'</span>);
    <span class="hljs-variable">$handler</span> = <span class="hljs-keyword">new</span> Monolog\Handler\RotatingFileHandler(<span class="hljs-variable">$filename</span>, <span class="hljs-number">5</span>, \Monolog\Logger::DEBUG, <span class="hljs-keyword">true</span>, <span class="hljs-number">0666</span>);  
    <span class="hljs-variable">$monolog</span>-&gt;pushHandler(<span class="hljs-variable">$handler</span>);
});</pre>
<p>RotatingFileHandler에 추가 인자를 넘겨주어 로그 파일의 권한을 <code>666(-rw-rw-rw-)</code>으로 주도록 변경한 것이다.</p>
<p>혹 로그 파일의 수를 줄이고 싶거나 shell과 web의 로그가 분리되는 것이 싫다면 <code>$filename</code> 부분에서 <code>php_sapi_name()</code>를 제거하면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/02/15/named-backreferences-with-preg-replace/</id><title type="html">preg_replace()의 치환 문자열에서 이름이 지정된 서브 패턴의 역 참조 사용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/02/15/named-backreferences-with-preg-replace/"/><published>2017-02-15T15:36:32+09:00</published><updated>2017-02-15T15:36:32+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[preg_replace()는 이름이 지정된 서브 패턴에 대한 역 참조(named backreferences)를 지원하지 않는다. 일단 일반적인 역 참조를 사용하는 방법에 대한 예시를 보자. <?php $string = 'user/foo'; echo preg_replace('/^user\\/(?P<id>[^\\/]+)$/', 'user/profile/\\1', $string); // user/profile/foo 위의 예시에서 치환 문자열의 \\1 대신에 패턴에서 지정된 이름("id")을 사용하고자 한다고 가정하자. <?php $string = 'user/foo'; echo preg_replace('/^user\\/(?P<id>[^\\/]+)$/', 'user/profile/\\id', $string); user/profile/\id 결과에서 보듯이 역 참조는 패턴에서 지정된 이름으로는 사용할 수 없다. 이런 경우라면 아래와 같이 preg_replace_callback()을 사용해야 한다. $string = 'user/foo'; echo preg_replace_callback('/^user\\/(?P<id>[^\\/]+)$/', function ($matches) { return 'user/profile/' . $matches['id']; }, $string) . "\n"; // user/profile/foo 위 예시를 봤을 때는 "굳이 복잡하게 서브 패턴에 이름을 지정해서 사용해야 하는가?" 하는 의문이 들겠지만 정규식이 복잡해 진다면 명시적으로 이름을 붙여서 사용하는 것이 유지 보수와 코드를 읽는데 도움이 된다. 서브 패턴과 역 참조에 대한 자세한 내용은 아래의 글을 참고하자. PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/manual/kr/function.preg-replace.php">preg_replace()</a>는 이름이 지정된 <a href="/2017/01/17/php-regex-subpatterns/">서브 패턴</a>에 대한 <a href="/2017/01/19/php-regex-back-references/">역 참조</a>(named backreferences)를 지원하지 않는다.</p>
<p>일단 일반적인 역 참조를 사용하는 방법에 대한 예시를 보자.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$string</span> = <span class="hljs-string">'user/foo'</span>;
<span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">'/^user\\/(?P&lt;id&gt;[^\\/]+)$/'</span>, <span class="hljs-string">'user/profile/\\1'</span>, <span class="hljs-variable">$string</span>);

<span class="hljs-comment">// user/profile/foo</span></pre>
<p>위의 예시에서 치환 문자열의 <code>\\1</code> 대신에 패턴에서 지정된 이름(&quot;id&quot;)을 사용하고자 한다고 가정하자.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$string</span> = <span class="hljs-string">'user/foo'</span>;
<span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">'/^user\\/(?P&lt;id&gt;[^\\/]+)$/'</span>, <span class="hljs-string">'user/profile/\\id'</span>, <span class="hljs-variable">$string</span>);

user/profile/\id</pre>
<p>결과에서 보듯이 역 참조는 패턴에서 지정된 이름으로는 사용할 수 없다. 이런 경우라면 아래와 같이 <a href="http://php.net/manual/kr/function.preg-replace-callback.php">preg_replace_callback()</a>을 사용해야 한다.</p>
<pre class="hljs php"><span class="hljs-variable">$string</span> = <span class="hljs-string">'user/foo'</span>;
<span class="hljs-keyword">echo</span> preg_replace_callback(<span class="hljs-string">'/^user\\/(?P&lt;id&gt;[^\\/]+)$/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-variable">$matches</span>)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">'user/profile/'</span> . <span class="hljs-variable">$matches</span>[<span class="hljs-string">'id'</span>];
    }, <span class="hljs-variable">$string</span>) . <span class="hljs-string">"\n"</span>;

<span class="hljs-comment">// user/profile/foo</span></pre>
<p>위 예시를 봤을 때는 &quot;굳이 복잡하게 서브 패턴에 이름을 지정해서 사용해야 하는가?&quot; 하는 의문이 들겠지만 정규식이 복잡해 진다면 명시적으로 이름을 붙여서 사용하는 것이 유지 보수와 코드를 읽는데 도움이 된다.</p>
<p>서브 패턴과 역 참조에 대한 자세한 내용은 아래의 글을 참고하자.</p>
<ul>
<li><a href="/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/02/06/difference-between-bindparam-and-bindvalue-in-php-pdo/</id><title type="html">PHP PDO의 bindParam와 bindValue의 차이</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/02/06/difference-between-bindparam-and-bindvalue-in-php-pdo/"/><published>2017-02-06T14:18:01+09:00</published><updated>2017-02-06T14:18:01+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PDO(PHP Data Objects)에서 Prepared statements 사용시 값을 bind하기 위해 PDOStatement::bindParam 또는 PDOStatement::bindValue를 주로 사용한다. 두개의 함수는 사용법이 거의 유사해서 어떤 차이가 있는지 알아둘 필요가 있다. 아래의 예시를 보면 정확한 차이를 바로 알 수 있다. <?php $sex = 'male'; $s = $dbh->prepare('SELECT name FROM students WHERE sex = :sex'); $s->bindParam(':sex', $sex); // use bindParam to bind the variable $sex = 'female'; $s->execute(); // executed with WHERE sex = 'female' <?php $sex = 'male'; $s = $dbh->prepare('SELECT name FROM students WHERE sex = :sex'); $s->bindValue(':sex', $sex); // use bindValue to bind the variable's value $sex = 'female'; $s->execute(); // executed with WHERE sex = 'male' 결론은 PDOStatement::bindParam는 변수의 레퍼런스로 바인딩 되므로 PDOStatement::execute가 호출될 때 값이 반영된다.]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/manual/en/book.pdo.php">PDO(PHP Data Objects)</a>에서 Prepared statements 사용시 값을 bind하기 위해  <a href="http://php.net/manual/en/pdostatement.bindparam.php">PDOStatement::bindParam</a> 또는
<a href="http://php.net/manual/en/pdostatement.bindvalue.php">PDOStatement::bindValue</a>를 주로 사용한다. 두개의 함수는 사용법이 거의 유사해서 어떤 차이가 있는지 알아둘 필요가 있다.</p>
<p>아래의 예시를 보면 정확한 차이를 바로 알 수 있다.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$sex</span> = <span class="hljs-string">'male'</span>;
<span class="hljs-variable">$s</span> = <span class="hljs-variable">$dbh</span>-&gt;prepare(<span class="hljs-string">'SELECT name FROM students WHERE sex = :sex'</span>);
<span class="hljs-variable">$s</span>-&gt;bindParam(<span class="hljs-string">':sex'</span>, <span class="hljs-variable">$sex</span>); <span class="hljs-comment">// use bindParam to bind the variable</span>
<span class="hljs-variable">$sex</span> = <span class="hljs-string">'female'</span>;
<span class="hljs-variable">$s</span>-&gt;execute(); <span class="hljs-comment">// executed with WHERE sex = 'female'</span></pre>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$sex</span> = <span class="hljs-string">'male'</span>;
<span class="hljs-variable">$s</span> = <span class="hljs-variable">$dbh</span>-&gt;prepare(<span class="hljs-string">'SELECT name FROM students WHERE sex = :sex'</span>);
<span class="hljs-variable">$s</span>-&gt;bindValue(<span class="hljs-string">':sex'</span>, <span class="hljs-variable">$sex</span>); <span class="hljs-comment">// use bindValue to bind the variable's value</span>
<span class="hljs-variable">$sex</span> = <span class="hljs-string">'female'</span>;
<span class="hljs-variable">$s</span>-&gt;execute(); <span class="hljs-comment">// executed with WHERE sex = 'male'</span></pre>
<p>결론은 <a href="http://php.net/manual/en/pdostatement.bindparam.php">PDOStatement::bindParam</a>는 변수의 레퍼런스로 바인딩 되므로 <a href="http://php.net/manual/kr/pdostatement.execute.php">PDOStatement::execute</a>가 호출될 때 값이 반영된다.</p>]]></content></entry>


</feed>