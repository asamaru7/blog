<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.1">Jekyll</generator>
<link href="http://blog.asamaru.net/atom.xml" rel="self" type="application/atom+xml" />
<link href="http://blog.asamaru.net/" rel="alternate" type="text/html" />
<updated>2016-03-21T11:46:03+09:00</updated>
<id>http://blog.asamaru.net/</id>
<subtitle>세상에 필요한 소스코드 한줄 남기고 가자.
</subtitle>
<author>
<name>유영재</name>
</author>
<entry>
<title>PHP 7에서 Gearman 모듈 사용하기</title>
<link href="http://blog.asamaru.net/2016/03/21/php7-and-gearman/" rel="alternate" type="text/html" title="PHP 7에서 Gearman 모듈 사용하기" />
<published>2016-03-21T11:22:49+09:00</published>
<updated>2016-03-21T11:22:49+09:00</updated>
<id>http://blog.asamaru.net/2016/03/21/php7-and-gearman</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/03/21/php7-and-gearman/">&lt;p&gt;PHP 7로 마이그레이션시에 걸림돌이 될 수 있는 것 중 하나가 PHP 모듈의 호환성 문제다. 나의 경우는 대부분 문제가 없었으나 &lt;a href=&quot;http://gearman.org/&quot;&gt;Gearman&lt;/a&gt;이 걸렸다. 아직 Gearman의 PHP 모듈이 정식으로 PHP 7을 지원하지 않아서 공식 지원을 기다리고 있었다. 그런데 시간을 두고 기다려봐도 지원을 기대하기 어려워(버전업이 오래전부터 멈춰있음) 자체적으로 방법을 찾기로 했다.&lt;/p&gt;

&lt;p&gt;Gearman 외에도 PHP 7과 모듈들의 호환성을 확인하려면 &lt;a href=&quot;https://gist.github.com/lewisgoddard/459b450106cf1e5b754e&quot;&gt;PHP 7 Extensions&lt;/a&gt;을 참고하기 바란다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;우선 나의 경우는 PHP 7을 소스 설치하지 않고 &lt;a href=&quot;https://webtatic.com/packages/php70/&quot;&gt;Webtatic.com&lt;/a&gt;에서 제공하는 바이너리를 yum으로 설치해서 사용중이다. CentOS에서 해당 레포지토리를 사용하려면 아래와 같이 webtatic 레포지토리를 yum에 추가하면 된다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;PECL에 등록된 Gearman 모듈은 &lt;a href=&quot;http://pecl.php.net/package/gearman&quot;&gt;PECL - Gearman&lt;/a&gt;에서 확인할 수 있고 소스는 &lt;a href=&quot;https://github.com/hjr3/pecl-gearman&quot;&gt;hjr3/pecl-gearman&lt;/a&gt;에서 확인할 수 있다. 보면 알겠지만 꽤 오래전부터 변경이 전혀 없다. 그래서 해당 라이브러리를 fork해서 문제를 개선하고 있는 &lt;a href=&quot;https://github.com/wcgallego/pecl-gearman/network&quot;&gt;wcgallego/pecl-gearman&lt;/a&gt;을 사용해서 컴파일하기로 했다.&lt;/p&gt;

&lt;p&gt;설치는 아래와 같이 할 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum install -y php70w-devel libgearman-devel
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/wcgallego/pecl-gearman.git
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pecl-gearman/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./configure
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;앞서 언급했던 것과 같이 나의 경우는 &lt;a href=&quot;https://webtatic.com/packages/php70/&quot;&gt;Webtatic.com&lt;/a&gt;의 바이너리를 사용한 경우이므로 상황에 따라 아래의 명령은 차이가 난다. 하지만 중요한 부분은 &lt;a href=&quot;https://github.com/wcgallego/pecl-gearman/network&quot;&gt;wcgallego/pecl-gearman&lt;/a&gt;의 소스를 받아서 빌드하는 것이므로 자신의 환경에 맞춰 빌드하는 것에는 큰 문제가 없을 것으로 생각한다.&lt;/p&gt;

&lt;p&gt;빌드에 오류가 없다면 &lt;code&gt;/usr/lib64/php/modules/&lt;/code&gt;에 &lt;code&gt;gearman.so&lt;/code&gt; 파일이 만들어져 있을 것이다. modules의 경로 또한 차이가 날 수 있으나 설치 마지막 메시지를 보면 자신의 위치는 확인 할 수 있을 것이다. 이 파일이 만들어 졌다면 이제 거의 끝이다. 이제는 php에서 해당 모듈을 load 하도록 연결하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/php.d/gearman.ini&lt;/code&gt; 파일을 열어서 아래의 내용을 넣는다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;; Enable gearman extension module
extension = gearman.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;php.ini&lt;/code&gt; 파일에 &lt;code&gt;extension = gearman.so&lt;/code&gt;를 추가해도 된다. 나의 경우는 ini 파일들이 분리되어 관리되기 때문에 따로 파일을 만든 것이다.&lt;/p&gt;

&lt;p&gt;이제는 php를 재시작(&lt;code&gt;service php-fpm restart&lt;/code&gt;)하고 &lt;code&gt;phpinfo();&lt;/code&gt;로 확인해보면 Gearman 모듈이 연결된 것을 확인 할 수 있다.&lt;/p&gt;
</content>
<summary>PHP 7로 마이그레이션시에 걸림돌이 될 수 있는 것 중 하나가 PHP 모듈의 호환성 문제다. 나의 경우는 대부분 문제가 없었으나 Gearman이 걸렸다. 아직 Gearman의 PHP 모듈이 정식으로 PHP 7을 지원하지 않아서 공식 지원을 기다리고 있었다. 그런데 시간을 두고 기다려봐도 지원을 기대하기 어려워(버전업이 오래전부터 멈춰있음) 자체적으로 방법을 찾기로 했다.Gearman 외에도 PHP 7과 모듈들의 호환성을 확인하려면 PHP 7 Extensions을 참고하기 바란다.우선 나의 경우는 PHP 7을 소스 설치하지 않고 Webtatic.com에서 제공하는 바이너리를 yum으로 설치해서 사용중이다. CentOS에서 해당 레포지토리를 사용하려면 아래와 같이 webtatic 레포지토리를 yum에 추가하면 된다.1$ rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpmPECL에 등록된 Gearman 모듈은 PECL - Gearman에서 확인할 수 있고 소스는 hjr3/pecl-gearman에서 확인할 수 있다. 보면 알겠지만 꽤 오래전부터 변경이 전혀 없다. 그래서 해당 라이브러리를 fork해서 문제를 개선하고 있는 wcgallego/pecl-gearman을 사용해서 컴파일하기로 했다.설치는 아래와 같이 할 수 있다.123456$ yum install -y php70w-devel libgearman-devel$ git clone https://github.com/wcgallego/pecl-gearman.git$ cd pecl-gearman/$ ./configure$ make$ make install앞서 언급했던 것과 같이 나의 경우는 Webtatic.com의 바이너리를 사용한 경우이므로 상황에 따라 아래의 명령은 차이가 난다. 하지만 중요한 부분은 wcgallego/pecl-gearman의 소스를 받아서 빌드하는 것이므로 자신의 환경에 맞춰 빌드하는 것에는 큰 문제가 없을 것으로 생각한다.빌드에 오류가 없다면 /usr/lib64/php/modules/에 gearman.so 파일이 만들어져 있을 것이다. modules의 경로 또한 차이가 날 수 있으나 설치 마지막 메시지를 보면 자신의 위치는 확인 할 수 있을 것이다. 이 파일이 만들어 졌다면 이제 거의 끝이다. 이제는 php에서 해당 모듈을 load 하도록 연결하면 된다./etc/php.d/gearman.ini 파일을 열어서 아래의 내용을 넣는다.; Enable gearman extension moduleextension = gearman.sophp.ini 파일에 extension = gearman.so를 추가해도 된다. 나의 경우는 ini 파일들이 분리되어 관리되기 때문에 따로 파일을 만든 것이다.이제는 php를 재시작(service php-fpm restart)하고 phpinfo();로 확인해보면 Gearman 모듈이 연결된 것을 확인 할 수 있다.</summary>
</entry>
<entry>
<title>iptables을 이용한 port forwarding</title>
<link href="http://blog.asamaru.net/2016/03/18/iptables-port-forwarding/" rel="alternate" type="text/html" title="iptables을 이용한 port forwarding" />
<published>2016-03-18T09:11:42+09:00</published>
<updated>2016-03-18T09:11:42+09:00</updated>
<id>http://blog.asamaru.net/2016/03/18/iptables-port-forwarding</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/03/18/iptables-port-forwarding/">&lt;p&gt;사무실 내부에서 외부에서 접근 가능한 포트가 개방된 아이피가 한정되어 있어서 두개의 작업 서버를 공유기로 포트 포워딩해서 사용하고 있었다. 그런데 그중 한대의 서버로 매일 대량의 트래픽을 외부에서 밀어 넣는데 이 상황에서 계속 공유기가 죽는 문제가 발생했다(아마도 공유기가 너무 낡은 것이라 그런 것일지도). 간단히 괜찮은 공유기하나 구매하면 해결될 수도 있는 문제지만 귀찮아서 한대의 서버에 외부 회선을 연결하고 포트포워딩으로 필요한 포트만 다른 서버로 연결하기로 했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;포트포워딩이 허용되어 있는지 확인&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;cat /etc/sysctl.conf|grep net.ipv4.ip_forward&lt;/code&gt; 또는 &lt;code&gt;sysctl -a | grep ip_forward&lt;/code&gt; 명령으로 &lt;code&gt;net.ipv4.ip_forward&lt;/code&gt;가 1로 설정되어 있는지 확인한다. 1이 아니라면 /etc/sysctl.conf 파일을 열어 수정하거나 &lt;code&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt; 명령으로 Kernel 변수를 수정할 수도 있다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;포트포워딩 설정&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;이후의 설명은 아래의 상황을 가정한 것이므로 상황에 맞게 수정되어야 합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;외부에 공개된 공인 서버, 사설망 내의 사설 서버가 있다.&lt;/li&gt;
  &lt;li&gt;공인 서버에 NIC이 두개가 있다(eth0, eth1).&lt;/li&gt;
  &lt;li&gt;외부에서 공인서버 eth1을 통해 접속하며 eth0를 통해 사설 서버(192.168.11.102)로 포트포워딩 한다.&lt;/li&gt;
  &lt;li&gt;공인 서버에 8888 포트를 사설 서버의 8888 포트로 포워딩 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;설명하는 방법은 &lt;code&gt;/etc/sysconfig/iptables&lt;/code&gt; 파일에 직접 설정하는 방법이다. &lt;code&gt;/etc/sysconfig/iptables&lt;/code&gt; 파일에 아래의 내용을 입력한다(기존에 내용이 있다면 nat와 filter 항목에 맞게 추가한다).&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;*nat
-A PREROUTING -i eth1 -p tcp -m tcp --dport 8888 -j DNAT --to-destination 192.168.11.102:8888
-A PREROUTING -i eth1 -p udp -m udp --dport 8888 -j DNAT --to-destination 192.168.11.102:8888
-A POSTROUTING -o eth0 -j MASQUERADE
COMMIT

*filter
-A INPUT -m state --state NEW -m tcp -p tcp --dport 8888 -j ACCEPT
-A INPUT -m state --state NEW -m udp -p udp --dport 8888 -j ACCEPT
-A FORWARD -i eth0 -j ACCEPT
-A FORWARD -o eth0 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;iptables을 재시작한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;/etc/init.d/iptables restart
&lt;span class=&quot;c&quot;&gt;# 아래는 systemd를 사용하는 경우&lt;/span&gt;
service ipstables restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;설정이 완료되었으므로 정상적으로 동작하는지 확인한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;위 설명은 서버가 2대이고 NIC도 두개이며 공인망과 사설망이 공존하는 상태에서의 설명이다. 하지만 내용을 조금 살펴보면 1대의 서버 내에서 포트포워딩과 서버는 2대이나 NIC이 하나인 경우에 대해서도 적용할 수 있을 것이다.&lt;/p&gt;
</content>
<summary>사무실 내부에서 외부에서 접근 가능한 포트가 개방된 아이피가 한정되어 있어서 두개의 작업 서버를 공유기로 포트 포워딩해서 사용하고 있었다. 그런데 그중 한대의 서버로 매일 대량의 트래픽을 외부에서 밀어 넣는데 이 상황에서 계속 공유기가 죽는 문제가 발생했다(아마도 공유기가 너무 낡은 것이라 그런 것일지도). 간단히 괜찮은 공유기하나 구매하면 해결될 수도 있는 문제지만 귀찮아서 한대의 서버에 외부 회선을 연결하고 포트포워딩으로 필요한 포트만 다른 서버로 연결하기로 했다.포트포워딩이 허용되어 있는지 확인cat /etc/sysctl.conf|grep net.ipv4.ip_forward 또는 sysctl -a | grep ip_forward 명령으로 net.ipv4.ip_forward가 1로 설정되어 있는지 확인한다. 1이 아니라면 /etc/sysctl.conf 파일을 열어 수정하거나 echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward 명령으로 Kernel 변수를 수정할 수도 있다.포트포워딩 설정이후의 설명은 아래의 상황을 가정한 것이므로 상황에 맞게 수정되어야 합니다.  외부에 공개된 공인 서버, 사설망 내의 사설 서버가 있다.  공인 서버에 NIC이 두개가 있다(eth0, eth1).  외부에서 공인서버 eth1을 통해 접속하며 eth0를 통해 사설 서버(192.168.11.102)로 포트포워딩 한다.  공인 서버에 8888 포트를 사설 서버의 8888 포트로 포워딩 한다.설명하는 방법은 /etc/sysconfig/iptables 파일에 직접 설정하는 방법이다. /etc/sysconfig/iptables 파일에 아래의 내용을 입력한다(기존에 내용이 있다면 nat와 filter 항목에 맞게 추가한다).*nat-A PREROUTING -i eth1 -p tcp -m tcp --dport 8888 -j DNAT --to-destination 192.168.11.102:8888-A PREROUTING -i eth1 -p udp -m udp --dport 8888 -j DNAT --to-destination 192.168.11.102:8888-A POSTROUTING -o eth0 -j MASQUERADECOMMIT*filter-A INPUT -m state --state NEW -m tcp -p tcp --dport 8888 -j ACCEPT-A INPUT -m state --state NEW -m udp -p udp --dport 8888 -j ACCEPT-A FORWARD -i eth0 -j ACCEPT-A FORWARD -o eth0 -j ACCEPTiptables을 재시작한다.123/etc/init.d/iptables restart# 아래는 systemd를 사용하는 경우service ipstables restart설정이 완료되었으므로 정상적으로 동작하는지 확인한다.위 설명은 서버가 2대이고 NIC도 두개이며 공인망과 사설망이 공존하는 상태에서의 설명이다. 하지만 내용을 조금 살펴보면 1대의 서버 내에서 포트포워딩과 서버는 2대이나 NIC이 하나인 경우에 대해서도 적용할 수 있을 것이다.</summary>
</entry>
<entry>
<title>php composer 속도 개선하기</title>
<link href="http://blog.asamaru.net/2016/03/17/php-composer-speed-up/" rel="alternate" type="text/html" title="php composer 속도 개선하기" />
<published>2016-03-17T19:20:39+09:00</published>
<updated>2016-03-17T19:20:39+09:00</updated>
<id>http://blog.asamaru.net/2016/03/17/php-composer-speed-up</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/03/17/php-composer-speed-up/">&lt;p&gt;&lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;(컴포저)는 PHP의 의존성 관리도구이다. 이 Composer를 사용하면서 가장 큰 단점으로 꼽을 수 있는 것은 느린 속도다. 나만 그렇게 느끼는 것은 아닌지 국내외에 많은 이야기가 있다. 오늘은 그 이야기들을 정리해 보려고 한다.&lt;/p&gt;

&lt;p&gt;우선 Composer에 대한 상세한 내용은 &lt;a href=&quot;https://xpressengine.github.io/Composer-korean-docs/&quot;&gt;Composer 한국어 매뉴얼&lt;/a&gt;을 참고하면 도움이 될 것 같다.&lt;/p&gt;

&lt;p&gt;그리고 Composer 속도에 관련된 참고글이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://findstar.pe.kr/archives/532&quot;&gt;composer.phar 의 동작이 느릴 때 조치할 수 있는 것들.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lesstif.com/pages/viewpage.action?pageId=30277898&quot;&gt;컴포저(PHP Composer) 속도 향상 시키기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그럼 하나씩 살펴보자.&lt;/p&gt;

&lt;h3 id=&quot;composer-&quot;&gt;Composer 진단&lt;/h3&gt;

&lt;p&gt;우선 &lt;code&gt;composer diagnose&lt;/code&gt; 명령을 이용해서 Composer의 상태를 진단할 수 있다. 진단 결과에 따라 개선이 필요한 부분들을 확인하고 개선할 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;$ composer diagnose

Checking composer.json: OK
require.~~~/~~~ : unbound version constraints (dev-master) should be avoided
Checking platform settings: OK
Checking git settings: OK
Checking http connectivity to packagist: OK
Checking https connectivity to packagist: OK
Checking github.com oauth access: OK
Checking disk free space: OK
Checking pubkeys:
Tags Public Key Fingerprint: ~~~
Dev Public Key Fingerprint: ~~~
OK
Checking composer version: OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;h3 id=&quot;composer--&quot;&gt;Composer 최신버전 사용&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;composer diagnose&lt;/code&gt;에서도 Composer의 최신 버전을 사용중인지 알려준다. 가급적 최신 버전의 Composer를 사용하는 것이 속도에 조금이나마 도움이 될 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;$ sudo /usr/local/bin/composer self-update

Updating to version 7c62e2b5346a6a656dd9587203719e35bb768056.
    Downloading: 100%
Use composer self-update --rollback to return to version d6d0435c5437111e42a123b06e4071e26ba7cb6e
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;h3 id=&quot;prestissimo--&quot;&gt;prestissimo 플러그인 사용&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/hirak/prestissimo&quot;&gt;prestissimo&lt;/a&gt; 이라는 Composer 플러그인이 있다. “composer parallel install plugin”이라고 소개하고 있는 플러그인으로 의존성 라이브러리 설치시 병렬 처리를 지원하여 속도를 대폭 개선해 준다고 한다. 확실히 다운로드가 필요한 상황(신규 설치, 버전업)에서는 병렬 처리로 속도가 개선된다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer global require hirak/prestissimo
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;설치 후 Composer를 사용(install, update)하면 아래와 같이 다른 모습을 볼 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;Loading composer repositories with package information
Updating dependencies
    Prefetch start: total: 6
    1/6:    https://codeload.github.com/symfony/polyfill-util/legacy.zip/8de62801aa12bc4dfcf85eef5d21981ae7bb3cc4
    2/6:    https://codeload.github.com/symfony/polyfill-php56/legacy.zip/4d891fff050101a53a4caabb03277284942d1ad9
    3/6:    https://codeload.github.com/Imangazaliev/DiDOM/legacy.zip/e492feae44321e2f4882f6e9466614732822f008
    4/6:    https://codeload.github.com/symfony/polyfill-mbstring/legacy.zip/1289d16209491b584839022f29257ad859b8532d
    5/6:    https://codeload.github.com/paragonie/random_compat/legacy.zip/b3313b618f4edd76523572531d5d7e22fe747430
    6/6:    https://codeload.github.com/Seldaek/monolog/legacy.zip/a5f2734e8c16f3aa21b3da09715d10e15b4d2d45
    Finished: success:6, skipped:0, failure:0, total: 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;h3 id=&quot;prefer-dist-&quot;&gt;–prefer-dist 사용&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/20827631&quot;&gt;Faster composer install&lt;/a&gt;에 보면 &lt;code&gt;--prefer-dist&lt;/code&gt; 옵션을 사용함으로써 속도를 향상 시킬 수 있다고 한다.&lt;/p&gt;

&lt;h3 id=&quot;hhvmhttphhvmcom--php-7-&quot;&gt;&lt;a href=&quot;http://hhvm.com/&quot;&gt;HHVM&lt;/a&gt; 또는 PHP 7 사용&lt;/h3&gt;

&lt;p&gt;Composer는 PHP로 제작된 프로그램으로 PHP의 성능에 영향을 많이 받는다. 따라서 보다 빠른 실행기를 사용하는 것이 속도에 도움이 된다. PHP 7을 사용할 수 없다면 &lt;a href=&quot;http://hhvm.com/&quot;&gt;HHVM&lt;/a&gt;을 사용하는 것이 도움이 될 수 있다. 하지만 Prebuilt Packages를 지원하는 ubuntu나 debian을 사용하는 것이 아니라면 직접 빌드를 해야하므로 귀찮을 수 있다(개인적 생각).&lt;/p&gt;

&lt;h3 id=&quot;disable-xdebug&quot;&gt;Disable Xdebug&lt;/h3&gt;

&lt;p&gt;Xdebug가 켜진 상태에서 Composer를 사용하면 아래와 같은 경고가 나온다. Xdebug를 켠 상태에서는 성능에 매우 큰 영향이 있으니 Xdebug를 끄고 사용하라는 것이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer update

You are running composer with xdebug enabled. This has a major impact on runtime performance. See https://getcomposer.org/xdebug
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;h3 id=&quot;packagist--&quot;&gt;packagist 미러 사용&lt;/h3&gt;

&lt;p&gt;아래와 같이 packagist의 레포지토리를 http://packagist.jp로 설정함으로써 약간의 속도 향상(일본이 아무래도 더 가까우니)을 얻을 수 있다고 한다. 하지만 자칫 잘못하면 더 느려질수도 있으므로 테스트를 해서 결정할 것을 권장한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;$ composer config -g repositories.packagist composer http://packagist.jp
# 제거는 아래와 같이
$ composer config -g --unset repositories.packagist
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;h3 id=&quot;disable-enablegc&quot;&gt;Disable enable_gc&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://laracasts.com/discuss/channels/tips/tip-speed-up-composer&quot;&gt;[Tip] Speed Up Composer&lt;/a&gt;에 보면 &lt;code&gt;enable_gc&lt;/code&gt;를 disable 함으로써 속도를 향상시키는 방법을 안내하고 있다. 하지만 &lt;a href=&quot;https://github.com/composer/composer/commit/ac676f47f7bbc619678a29deae097b6b0710b799&quot;&gt;Disable GC when computing deps, refs #3482&lt;/a&gt;에서 보면 이와 관련된 패치는 이미 Composer에 반영되어 있으므로 효과가 없다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;사실 서두에서 이야기한 것처럼 위 내용들은 여러 곳의 이야기를 나름대로 요약 정리한 것이다. 하지만 모두 효과가 있다고는 말하지 못하겠다. 현재 PHP 7을 사용하고 있는 상황에서 여러가지를 시도 해봐도 Composer의 속도는 느리기만 하다(약간씩의 도움은 되는 것들도 있다).&lt;/p&gt;

&lt;p&gt;느린 Composer로 인해 답답한 마음을 달래고자 시간이 되는대로 방법을 찾아보고 있으나 아직은 결론을 얻지 못했다. 그나마 prestissimo를 사용하는 것이 가장 효과적인 것 같다. 앞으로도 여러가지를 시도하여 도움이 될만한 방법을 발견하면 다시 글을 쓰도록 하겠다.&lt;/p&gt;
</content>
<summary>Composer(컴포저)는 PHP의 의존성 관리도구이다. 이 Composer를 사용하면서 가장 큰 단점으로 꼽을 수 있는 것은 느린 속도다. 나만 그렇게 느끼는 것은 아닌지 국내외에 많은 이야기가 있다. 오늘은 그 이야기들을 정리해 보려고 한다.우선 Composer에 대한 상세한 내용은 Composer 한국어 매뉴얼을 참고하면 도움이 될 것 같다.그리고 Composer 속도에 관련된 참고글이다.  composer.phar 의 동작이 느릴 때 조치할 수 있는 것들.  컴포저(PHP Composer) 속도 향상 시키기그럼 하나씩 살펴보자.Composer 진단우선 composer diagnose 명령을 이용해서 Composer의 상태를 진단할 수 있다. 진단 결과에 따라 개선이 필요한 부분들을 확인하고 개선할 수 있다.$ composer diagnoseChecking composer.json: OKrequire.~~~/~~~ : unbound version constraints (dev-master) should be avoidedChecking platform settings: OKChecking git settings: OKChecking http connectivity to packagist: OKChecking https connectivity to packagist: OKChecking github.com oauth access: OKChecking disk free space: OKChecking pubkeys:Tags Public Key Fingerprint: ~~~Dev Public Key Fingerprint: ~~~OKChecking composer version: OKComposer 최신버전 사용composer diagnose에서도 Composer의 최신 버전을 사용중인지 알려준다. 가급적 최신 버전의 Composer를 사용하는 것이 속도에 조금이나마 도움이 될 수 있다.$ sudo /usr/local/bin/composer self-updateUpdating to version 7c62e2b5346a6a656dd9587203719e35bb768056.    Downloading: 100%Use composer self-update --rollback to return to version d6d0435c5437111e42a123b06e4071e26ba7cb6eprestissimo 플러그인 사용prestissimo 이라는 Composer 플러그인이 있다. “composer parallel install plugin”이라고 소개하고 있는 플러그인으로 의존성 라이브러리 설치시 병렬 처리를 지원하여 속도를 대폭 개선해 준다고 한다. 확실히 다운로드가 필요한 상황(신규 설치, 버전업)에서는 병렬 처리로 속도가 개선된다.1$ composer global require hirak/prestissimo설치 후 Composer를 사용(install, update)하면 아래와 같이 다른 모습을 볼 수 있다.Loading composer repositories with package informationUpdating dependencies    Prefetch start: total: 6    1/6:    https://codeload.github.com/symfony/polyfill-util/legacy.zip/8de62801aa12bc4dfcf85eef5d21981ae7bb3cc4    2/6:    https://codeload.github.com/symfony/polyfill-php56/legacy.zip/4d891fff050101a53a4caabb03277284942d1ad9    3/6:    https://codeload.github.com/Imangazaliev/DiDOM/legacy.zip/e492feae44321e2f4882f6e9466614732822f008    4/6:    https://codeload.github.com/symfony/polyfill-mbstring/legacy.zip/1289d16209491b584839022f29257ad859b8532d    5/6:    https://codeload.github.com/paragonie/random_compat/legacy.zip/b3313b618f4edd76523572531d5d7e22fe747430    6/6:    https://codeload.github.com/Seldaek/monolog/legacy.zip/a5f2734e8c16f3aa21b3da09715d10e15b4d2d45    Finished: success:6, skipped:0, failure:0, total: 6–prefer-dist 사용Faster composer install에 보면 --prefer-dist 옵션을 사용함으로써 속도를 향상 시킬 수 있다고 한다.HHVM 또는 PHP 7 사용Composer는 PHP로 제작된 프로그램으로 PHP의 성능에 영향을 많이 받는다. 따라서 보다 빠른 실행기를 사용하는 것이 속도에 도움이 된다. PHP 7을 사용할 수 없다면 HHVM을 사용하는 것이 도움이 될 수 있다. 하지만 Prebuilt Packages를 지원하는 ubuntu나 debian을 사용하는 것이 아니라면 직접 빌드를 해야하므로 귀찮을 수 있다(개인적 생각).Disable XdebugXdebug가 켜진 상태에서 Composer를 사용하면 아래와 같은 경고가 나온다. Xdebug를 켠 상태에서는 성능에 매우 큰 영향이 있으니 Xdebug를 끄고 사용하라는 것이다.123$ composer updateYou are running composer with xdebug enabled. This has a major impact on runtime performance. See https://getcomposer.org/xdebugpackagist 미러 사용아래와 같이 packagist의 레포지토리를 http://packagist.jp로 설정함으로써 약간의 속도 향상(일본이 아무래도 더 가까우니)을 얻을 수 있다고 한다. 하지만 자칫 잘못하면 더 느려질수도 있으므로 테스트를 해서 결정할 것을 권장한다.$ composer config -g repositories.packagist composer http://packagist.jp# 제거는 아래와 같이$ composer config -g --unset repositories.packagistDisable enable_gc[Tip] Speed Up Composer에 보면 enable_gc를 disable 함으로써 속도를 향상시키는 방법을 안내하고 있다. 하지만 Disable GC when computing deps, refs #3482에서 보면 이와 관련된 패치는 이미 Composer에 반영되어 있으므로 효과가 없다.사실 서두에서 이야기한 것처럼 위 내용들은 여러 곳의 이야기를 나름대로 요약 정리한 것이다. 하지만 모두 효과가 있다고는 말하지 못하겠다. 현재 PHP 7을 사용하고 있는 상황에서 여러가지를 시도 해봐도 Composer의 속도는 느리기만 하다(약간씩의 도움은 되는 것들도 있다).느린 Composer로 인해 답답한 마음을 달래고자 시간이 되는대로 방법을 찾아보고 있으나 아직은 결론을 얻지 못했다. 그나마 prestissimo를 사용하는 것이 가장 효과적인 것 같다. 앞으로도 여러가지를 시도하여 도움이 될만한 방법을 발견하면 다시 글을 쓰도록 하겠다.</summary>
</entry>
<entry>
<title>android gradle provided와 org.apache.http.legacy</title>
<link href="http://blog.asamaru.net/2016/03/16/android-gradle-provided-and-org-apache-http-legacy/" rel="alternate" type="text/html" title="android gradle provided와 org.apache.http.legacy" />
<published>2016-03-16T15:56:00+09:00</published>
<updated>2016-03-16T15:56:00+09:00</updated>
<id>http://blog.asamaru.net/2016/03/16/android-gradle-provided-and-org-apache-http-legacy</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/03/16/android-gradle-provided-and-org-apache-http-legacy/">&lt;blockquote&gt;
  &lt;p&gt;이 글은 사실 주제가 명확하지 않다(제목도 그러하듯). 경험을 나열한 것에 불과할지도 모른다. 하지만 Volley와 Glide, gradle provided, org.apache.http.legacy.jar 파일을 얻는 법 등의 내용을 포함하고 있어서 다른 작업시에도 부분적으로 도움이 될 수 있을 것 같아 글을 남긴다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;/2015/09/25/android-6-apache-http-client-removal/&quot;&gt;Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거&lt;/a&gt;에서 안드로이드의 Apache HTTP 클라이언트에 대한 지원을 제거함에 따른 대응 방법을 안내했었다. 그런데 오늘은 유사하지만 조금 다른 이야기를 하려고 한다.&lt;/p&gt;

&lt;p&gt;본 주제를 이야기하기 전에 몇가지를 먼저 이야기 해야 할 것 같다.
이번에 신규 작업을 하면서 &lt;a href=&quot;https://android.googlesource.com/platform/frameworks/volley/&quot;&gt;Volley&lt;/a&gt;와 &lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;Glide&lt;/a&gt;를 알게 되었다. 안드로이드 개발을 주업무로 하는게 아니다보니 유명한 라이브러리임에도 불구하고 이제서야 알게된 것이다. 어쨌든 여러가지 장점을 가지고 있는 라이브러리들이라 기존의 &lt;a href=&quot;http://loopj.com/android-async-http/&quot;&gt;Android Asynchronous Http Client&lt;/a&gt; 와 &lt;a href=&quot;http://square.github.io/picasso/&quot;&gt;Picasso&lt;/a&gt;를 사용하지 않고 이것들을 사용하기로 했다. 기존 라이브러리들도 충분히 잘 만들어진 것들이지만 몇가지 버그(&lt;a href=&quot;/2015/09/25/android-async-http-1-dot-4-9-not-called-onsuccess-or-onfailure/&quot;&gt;Android Asynchronous Http Client(android-async-http) 1.4.9 사용시 Proguard를 적용하면 onSuccess 또는 onFailure이 호출되지 않는 문제 해결&lt;/a&gt; 등)와 의존 관계에 대한 문제들로 인해서 교체를 결정한 것이다.&lt;/p&gt;

&lt;p&gt;우선 Volley와 Glide에 대한 이해를 돕기 위한 관련 링크들을 먼저 안내한다.&lt;/p&gt;

&lt;h3 id=&quot;volleyhttpsandroidgooglesourcecomplatformframeworksvolley&quot;&gt;&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/volley/&quot;&gt;Volley&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/benelog/5981448&quot;&gt;Volley 설명 - GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/DWorkS/VolleyPlus&quot;&gt;DWorkS/VolleyPlus&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://d2.naver.com/helloworld/1258547&quot;&gt;Volley를 더 쉽고 강력하게, Volley Extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;glidehttpsgithubcombumptechglide&quot;&gt;&lt;a href=&quot;https://github.com/bumptech/glide&quot;&gt;Glide&lt;/a&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://gun0912.tistory.com/17&quot;&gt;[안드로이드]유용한 라이브러리 - Glide (이미지 로딩 라이브러리)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gun0912.tistory.com/19&quot;&gt;[안드로이드]Picasso와 Glide 비교분석&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 내용들을 보면 Glide는 크게 문제될 것이 없지만 Volley의 경우는 사용성에서 부족한 부분들이 있다고 한다. 그래서 조사를 해보니 그나마 VolleyPlus와 Volley Extensions가 부족한 부분을 메우기에 적합하다고 판단하고 내용을 검토했다. 그런데 VolleyPlus의 경우는 Volley를 확장한 것이 아니라 Volley 소스를 기반으로 새로 개발된 형태로 Volley의 원형을 사용할 수 없다는 문제가 있다(&lt;a href=&quot;https://github.com/isapoetra/VolleyPlus&quot;&gt;fork된 프로젝트&lt;/a&gt; 중에 이 문제를 수정한 프로젝트가 있긴 하지만 사용에는 적합해 보이지 않는다). 하지만 기능은 매력적인 부분이 많다. 반대로 Volley Extensions의 경우는 Volley에 대한 의존성을 가지고 확장한 것으로 내가 원하는 형태이지만 최근 관리가 안되고 있는 것으로 보인다(D2에서 지속적인 관리를 할 것이라고 했지만). 실제로 Volley의 경우 최근 jcenter(&lt;code&gt;com.android.volley:volley:1.0.0&lt;/code&gt;)에 배포하고 있지만 Volley Extensions의 경우 기존에 &lt;a href=&quot;https://github.com/mcxiaoke/android-volley&quot;&gt;Volley를 미러링한 라이브러리&lt;/a&gt;를 그대로 사용하고 있다.&lt;/p&gt;

&lt;p&gt;위 상황들을 종합해서 고민한 결과 Volley Extensions 중 &lt;a href=&quot;https://github.com/naver/volley-extensions/tree/master/volleyer&quot;&gt;Volleyer&lt;/a&gt; 소스를 기반으로 필요한 부분을 커스텀하기로 결정했다. Volleyer를 사용하는 구조가 편리하게 잘 구성되어 있으나 위에서 이야기한 Volley 의존성 처리 부분을 변경해야 했고 &lt;a href=&quot;https://github.com/google/gson&quot;&gt;gson&lt;/a&gt;을 사용한 request가 없기 때문에 추가해야 했다(jackson이 더 좋다고들 하지만 gson이 익숙해서). 사실 필요한 부분은 외부에서 확장해도 되지만 실제 사용하다 보면 분명 변경이 필요할 것이라는 생각에 미리 커스텀하기로 결정했다.&lt;/p&gt;

&lt;p&gt;이 과정에서 Volleyer 소스를 안드로이드 라이브러리로 추가해서 빌드하는 것이 필요했는데 여기서 문제가 발생했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Volleyer 안드로이드 라이브러리로 빌드하려고하면 org.apache.http.client.HttpClient, android.net.http.AndroidHttpClient, com.fasterxml.jackson.core.JsonParser 등이 사용된 부분에서 오류가 난다(sdk version 23 기준). 이 문제 중 HttpClient와 관련된 부분은 가장 쉽게 해결하려면 &lt;a href=&quot;/2015/09/25/android-6-apache-http-client-removal/&quot;&gt;Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거&lt;/a&gt;에서 언급했던 것처럼 &lt;code&gt;useLibrary &#39;org.apache.http.legacy&#39;&lt;/code&gt;를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;그런데 이 경우는 빌드시에는 org.apache.http.legacy가 필요하지만 런타임에서는 필요하지 않다. 정확하게는 나의 경우엔 필요하지 않다. Volley에서는 하위 OS를 지원하기 위해 기본적으로 API Level 9 이하에서는 AndroidHttpClient를 사용하도록 되어 있기 때문에 이 부분이 사용되는 것인데 나의 경우는 minSdkVersion이 14로 해당되지 않는다. 따라서 해당 부분의 소스를 수정해서 제거해도되나 가급적 원소스를 유지하는 방향으로 처리하려고 했다. 그럼에도 불구하고 useLibrary ‘org.apache.http.legacy’를 사용하고 싶지는 않았다. 그래서 &lt;code&gt;useLibrary &#39;org.apache.http.legacy&#39;&lt;/code&gt; 대신 아래의 내용을 build.gradle에 추가하는 방법으로 대체했다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;dependencies {
  provided files(&#39;libs/org.apache.http.legacy.jar&#39;)

  provided &#39;org.codehaus.jackson:jackson-mapper-asl:1.9.+&#39;
  provided &#39;com.fasterxml.jackson.core:jackson-databind:2.2.+&#39;
  provided(&#39;org.simpleframework:simple-xml:2.7.+&#39;) {
    exclude module: &#39;stax&#39;
    exclude module: &#39;stax-api&#39;
    exclude module: &#39;xpp3&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위 코드를 설명하기 위해서는 &lt;code&gt;provided&lt;/code&gt;를 먼저 이야기 해야 한다. &lt;a href=&quot;http://kwonnam.pe.kr/wiki/gradle/dependencies#provided&quot;&gt;Gradle Dependencies&lt;/a&gt;의 내용 중 provided가 필요한 상황을 설명하는 부분을 인용하자면 아래와 같다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;컴파일시에는 클래스패스에 넣지만, 실행/배포시에는 빠져야 하는 의존성이 있을 수 있다. 예를 들면 Servlet API 같은 것들이 그렇다. Servlet API는 Tomcat등의 WAS에 내장되어 있으므로 배포는 할 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://sinking.in/blog/provided-scope-in-gradle/&quot;&gt;PROVIDED SCOPE IN GRADLE&lt;/a&gt;이 글도 참고하면 이해에 도움이 될 것이다.&lt;/p&gt;

&lt;p&gt;우선 &lt;code&gt;provided files(&#39;libs/org.apache.http.legacy.jar&#39;)&lt;/code&gt; 부분부터 보자. 위에서 &lt;code&gt;provided&lt;/code&gt;로 &lt;code&gt;org.apache.http.legacy&lt;/code&gt; 지정했으므로 빌드시에는 해당 라이브러리가 있는 것으로 인정하지만 실제로 배포시에는 포함되지 않는다. 따라서 소스를 유지한 상태에서 오류없이 빌드할 수 있고 해당 라이브러리는 사용하지 않도록 할 수 있다.&lt;/p&gt;

&lt;p&gt;그런데 사실은 위의 코드만으로는 실제 빌드가 되지 않는다. &lt;code&gt;libs/org.apache.http.legacy.jar&lt;/code&gt; 파일이 없기 때문이다(사용되지는 않지만 빌드시 참조가 되어야 하므로 필요하다). 그럼 &lt;code&gt;org.apache.http.legacy.jar&lt;/code&gt; 파일을 어디서 찾아야 하나? &lt;code&gt;useLibrary &#39;org.apache.http.legacy&#39;&lt;/code&gt;로 사용할 수 있는 이유는 안드로이드 SDK에 포함되어 있기 때문이다. 따라서 SDK 폴더에서 해당 파일을 찾을 수 있다. 나의 경우에는 &lt;code&gt;~/Library/Android/sdk/platforms/android-23/optional/org.apache.http.legacy.jar&lt;/code&gt;에 있었다. 정확한 경로는 사용하는 sdk 버전과 환경 등에 따라 차이가 있을 수는 있겠지만 분명 sdk 폴더에서 찾을 수 있을 것이다. 해당 파일을 찾았다면 프로젝트 폴더에서 libs 폴더를 만들고 그 안에 넣어준다.&lt;/p&gt;

&lt;p&gt;그리고 아래의 부분을 보자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;provided &#39;org.codehaus.jackson:jackson-mapper-asl:1.9.+&#39;
provided &#39;com.fasterxml.jackson.core:jackson-databind:2.2.+&#39;
provided(&#39;org.simpleframework:simple-xml:2.7.+&#39;) {
  exclude module: &#39;stax&#39;
  exclude module: &#39;stax-api&#39;
  exclude module: &#39;xpp3&#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이 부분들도 모두 &lt;code&gt;provided&lt;/code&gt;를 사용하고 있다. Volleyer에서는 응답을 파싱하기 위한 &lt;code&gt;Jackson2NetworkResponseParser&lt;/code&gt;, &lt;code&gt;JacksonNetworkResponseParser&lt;/code&gt;, &lt;code&gt;SimpleXmlNetworkResponseParser&lt;/code&gt; 등의 클래스가 있다. 그런데 네이버에서는 친절하게도 필요시에만 이것들을 사용할 수 있도록 제작해 두었기 때문에 이 클래스들을 사용하지 않을 것이라면 위 라이브러리들을 포함시키지 않아도 된다. 하지만 빌드시에는 위에서 설명했던 것과 같이 해당 라이브러리들을 참조해야 하므로 provided 선언이 필요한 것이다. 반대로 거의 항상 사용할 것이라서 라이브러리 빌드시 포함시키고자 한다면 provided 대신 기존 처럼 compile을 사용하면 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;자.. 그런데 아직도 한가지가 남았다. 실제 빌드시에는 &lt;code&gt;proguard-rules.pro&lt;/code&gt; 파일에 아래의 내용을 추가해 주어야 한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;-dontwarn org.apache.http.**
-dontwarn android.net.http.AndroidHttpClient
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;여기까지 처리하고 나면 정상적으로 빌드할 수 있다.&lt;/p&gt;
</content>
<summary>  이 글은 사실 주제가 명확하지 않다(제목도 그러하듯). 경험을 나열한 것에 불과할지도 모른다. 하지만 Volley와 Glide, gradle provided, org.apache.http.legacy.jar 파일을 얻는 법 등의 내용을 포함하고 있어서 다른 작업시에도 부분적으로 도움이 될 수 있을 것 같아 글을 남긴다.Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거에서 안드로이드의 Apache HTTP 클라이언트에 대한 지원을 제거함에 따른 대응 방법을 안내했었다. 그런데 오늘은 유사하지만 조금 다른 이야기를 하려고 한다.본 주제를 이야기하기 전에 몇가지를 먼저 이야기 해야 할 것 같다.이번에 신규 작업을 하면서 Volley와 Glide를 알게 되었다. 안드로이드 개발을 주업무로 하는게 아니다보니 유명한 라이브러리임에도 불구하고 이제서야 알게된 것이다. 어쨌든 여러가지 장점을 가지고 있는 라이브러리들이라 기존의 Android Asynchronous Http Client 와 Picasso를 사용하지 않고 이것들을 사용하기로 했다. 기존 라이브러리들도 충분히 잘 만들어진 것들이지만 몇가지 버그(Android Asynchronous Http Client(android-async-http) 1.4.9 사용시 Proguard를 적용하면 onSuccess 또는 onFailure이 호출되지 않는 문제 해결 등)와 의존 관계에 대한 문제들로 인해서 교체를 결정한 것이다.우선 Volley와 Glide에 대한 이해를 돕기 위한 관련 링크들을 먼저 안내한다.Volley  Volley 설명 - GitHub  DWorkS/VolleyPlus  Volley를 더 쉽고 강력하게, Volley ExtensionsGlide  [안드로이드]유용한 라이브러리 - Glide (이미지 로딩 라이브러리)  [안드로이드]Picasso와 Glide 비교분석위 내용들을 보면 Glide는 크게 문제될 것이 없지만 Volley의 경우는 사용성에서 부족한 부분들이 있다고 한다. 그래서 조사를 해보니 그나마 VolleyPlus와 Volley Extensions가 부족한 부분을 메우기에 적합하다고 판단하고 내용을 검토했다. 그런데 VolleyPlus의 경우는 Volley를 확장한 것이 아니라 Volley 소스를 기반으로 새로 개발된 형태로 Volley의 원형을 사용할 수 없다는 문제가 있다(fork된 프로젝트 중에 이 문제를 수정한 프로젝트가 있긴 하지만 사용에는 적합해 보이지 않는다). 하지만 기능은 매력적인 부분이 많다. 반대로 Volley Extensions의 경우는 Volley에 대한 의존성을 가지고 확장한 것으로 내가 원하는 형태이지만 최근 관리가 안되고 있는 것으로 보인다(D2에서 지속적인 관리를 할 것이라고 했지만). 실제로 Volley의 경우 최근 jcenter(com.android.volley:volley:1.0.0)에 배포하고 있지만 Volley Extensions의 경우 기존에 Volley를 미러링한 라이브러리를 그대로 사용하고 있다.위 상황들을 종합해서 고민한 결과 Volley Extensions 중 Volleyer 소스를 기반으로 필요한 부분을 커스텀하기로 결정했다. Volleyer를 사용하는 구조가 편리하게 잘 구성되어 있으나 위에서 이야기한 Volley 의존성 처리 부분을 변경해야 했고 gson을 사용한 request가 없기 때문에 추가해야 했다(jackson이 더 좋다고들 하지만 gson이 익숙해서). 사실 필요한 부분은 외부에서 확장해도 되지만 실제 사용하다 보면 분명 변경이 필요할 것이라는 생각에 미리 커스텀하기로 결정했다.이 과정에서 Volleyer 소스를 안드로이드 라이브러리로 추가해서 빌드하는 것이 필요했는데 여기서 문제가 발생했다.Volleyer 안드로이드 라이브러리로 빌드하려고하면 org.apache.http.client.HttpClient, android.net.http.AndroidHttpClient, com.fasterxml.jackson.core.JsonParser 등이 사용된 부분에서 오류가 난다(sdk version 23 기준). 이 문제 중 HttpClient와 관련된 부분은 가장 쉽게 해결하려면 Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거에서 언급했던 것처럼 useLibrary &#39;org.apache.http.legacy&#39;를 사용하면 된다.그런데 이 경우는 빌드시에는 org.apache.http.legacy가 필요하지만 런타임에서는 필요하지 않다. 정확하게는 나의 경우엔 필요하지 않다. Volley에서는 하위 OS를 지원하기 위해 기본적으로 API Level 9 이하에서는 AndroidHttpClient를 사용하도록 되어 있기 때문에 이 부분이 사용되는 것인데 나의 경우는 minSdkVersion이 14로 해당되지 않는다. 따라서 해당 부분의 소스를 수정해서 제거해도되나 가급적 원소스를 유지하는 방향으로 처리하려고 했다. 그럼에도 불구하고 useLibrary ‘org.apache.http.legacy’를 사용하고 싶지는 않았다. 그래서 useLibrary &#39;org.apache.http.legacy&#39; 대신 아래의 내용을 build.gradle에 추가하는 방법으로 대체했다.dependencies {  provided files(&#39;libs/org.apache.http.legacy.jar&#39;)  provided &#39;org.codehaus.jackson:jackson-mapper-asl:1.9.+&#39;  provided &#39;com.fasterxml.jackson.core:jackson-databind:2.2.+&#39;  provided(&#39;org.simpleframework:simple-xml:2.7.+&#39;) {    exclude module: &#39;stax&#39;    exclude module: &#39;stax-api&#39;    exclude module: &#39;xpp3&#39;  }}위 코드를 설명하기 위해서는 provided를 먼저 이야기 해야 한다. Gradle Dependencies의 내용 중 provided가 필요한 상황을 설명하는 부분을 인용하자면 아래와 같다.  컴파일시에는 클래스패스에 넣지만, 실행/배포시에는 빠져야 하는 의존성이 있을 수 있다. 예를 들면 Servlet API 같은 것들이 그렇다. Servlet API는 Tomcat등의 WAS에 내장되어 있으므로 배포는 할 필요가 없다.PROVIDED SCOPE IN GRADLE이 글도 참고하면 이해에 도움이 될 것이다.우선 provided files(&#39;libs/org.apache.http.legacy.jar&#39;) 부분부터 보자. 위에서 provided로 org.apache.http.legacy 지정했으므로 빌드시에는 해당 라이브러리가 있는 것으로 인정하지만 실제로 배포시에는 포함되지 않는다. 따라서 소스를 유지한 상태에서 오류없이 빌드할 수 있고 해당 라이브러리는 사용하지 않도록 할 수 있다.그런데 사실은 위의 코드만으로는 실제 빌드가 되지 않는다. libs/org.apache.http.legacy.jar 파일이 없기 때문이다(사용되지는 않지만 빌드시 참조가 되어야 하므로 필요하다). 그럼 org.apache.http.legacy.jar 파일을 어디서 찾아야 하나? useLibrary &#39;org.apache.http.legacy&#39;로 사용할 수 있는 이유는 안드로이드 SDK에 포함되어 있기 때문이다. 따라서 SDK 폴더에서 해당 파일을 찾을 수 있다. 나의 경우에는 ~/Library/Android/sdk/platforms/android-23/optional/org.apache.http.legacy.jar에 있었다. 정확한 경로는 사용하는 sdk 버전과 환경 등에 따라 차이가 있을 수는 있겠지만 분명 sdk 폴더에서 찾을 수 있을 것이다. 해당 파일을 찾았다면 프로젝트 폴더에서 libs 폴더를 만들고 그 안에 넣어준다.그리고 아래의 부분을 보자.provided &#39;org.codehaus.jackson:jackson-mapper-asl:1.9.+&#39;provided &#39;com.fasterxml.jackson.core:jackson-databind:2.2.+&#39;provided(&#39;org.simpleframework:simple-xml:2.7.+&#39;) {  exclude module: &#39;stax&#39;  exclude module: &#39;stax-api&#39;  exclude module: &#39;xpp3&#39;}이 부분들도 모두 provided를 사용하고 있다. Volleyer에서는 응답을 파싱하기 위한 Jackson2NetworkResponseParser, JacksonNetworkResponseParser, SimpleXmlNetworkResponseParser 등의 클래스가 있다. 그런데 네이버에서는 친절하게도 필요시에만 이것들을 사용할 수 있도록 제작해 두었기 때문에 이 클래스들을 사용하지 않을 것이라면 위 라이브러리들을 포함시키지 않아도 된다. 하지만 빌드시에는 위에서 설명했던 것과 같이 해당 라이브러리들을 참조해야 하므로 provided 선언이 필요한 것이다. 반대로 거의 항상 사용할 것이라서 라이브러리 빌드시 포함시키고자 한다면 provided 대신 기존 처럼 compile을 사용하면 된다.자.. 그런데 아직도 한가지가 남았다. 실제 빌드시에는 proguard-rules.pro 파일에 아래의 내용을 추가해 주어야 한다.-dontwarn org.apache.http.**-dontwarn android.net.http.AndroidHttpClient여기까지 처리하고 나면 정상적으로 빌드할 수 있다.</summary>
</entry>
<entry>
<title>Mac OSX(10.6 – 10.11)에서 PHP(5.6 / 7) 업그레이드</title>
<link href="http://blog.asamaru.net/2016/03/11/upgrade-to-php-5-6-or-7-on-mac-osx-10-11-el-capitan-and-osx-10-6-10-10/" rel="alternate" type="text/html" title="Mac OSX(10.6 – 10.11)에서 PHP(5.6 / 7) 업그레이드" />
<published>2016-03-11T08:43:17+09:00</published>
<updated>2016-03-11T08:43:17+09:00</updated>
<id>http://blog.asamaru.net/2016/03/11/upgrade-to-php-5-6-or-7-on-mac-osx-10-11-el-capitan-and-osx-10-6-–-10-10</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/03/11/upgrade-to-php-5-6-or-7-on-mac-osx-10-11-el-capitan-and-osx-10-6-10-10/">&lt;p&gt;현재 기준으로 El Capitan에서 PHP 버전은 5.5.30이다. 웬만한 PHP 라이브러리는 동작하는데 문제가 없는 버전이긴 하지만 PHP 7이 최신 버전이며 작업에 따라 더 높은 버전의 PHP가 필요할 수 있다. 나의 경우도 웬만한 작업은 Vagrant에서 하므로 OSX의 PHP 버전은 문제가 되지 않지만 이번에 몇가지를 테스트하기 위해 OSX의 PHP를 버전업 하기로 했다.&lt;/p&gt;

&lt;p&gt;OSX에서의 PHP 버전업은 &lt;a href=&quot;http://coolestguidesontheplanet.com/upgrade-php-on-osx/&quot;&gt;Upgrade to PHP 5.6 or 7 on Mac OSX 10.11 El Capitan and OSX 10.6 – 10.10&lt;/a&gt;에 잘 나와있다. 아니 설명할 것이 거의 없을 정도로 아주 간단하다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# PHP 5.6으로 버전업&lt;/span&gt;
curl -s http://php-osx.liip.ch/install.sh &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; bash -s 5.6

&lt;span class=&quot;c&quot;&gt;# PHP 7.0으로 버전업&lt;/span&gt;
curl -s http://php-osx.liip.ch/install.sh &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; bash -s 7.0
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위처럼 쉘 스크립트를 실행해 주고 기다리면 거의 모든 작업이 완료된다(시간은 조금 걸린다).&lt;/p&gt;

&lt;p&gt;이제는 잘 설치되었는지 확인.&lt;/p&gt;

&lt;h3 id=&quot;php--&quot;&gt;PHP 버전 확인&lt;/h3&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;/usr/local/php5/bin/php --version
php --version
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위처럼 해보면 &lt;code&gt;/usr/local/php5/bin/php --version&lt;/code&gt;는 PHP가 버전업된 것으로 보이지만 &lt;code&gt;php --version&lt;/code&gt;는 기존 버전으로 나올 것이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;which php
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위 명령을 넣으면 실행되는 PHP의 경로를 볼 수 있다. 나의 경우엔 &lt;code&gt;/usr/bin/&lt;/code&gt;이다. 여기엔 PHP 기본 실행 파일 외에도 몇가지 관련 파일이 있는데 이 파일들을 새로 설치한 파일들로 교체 해주면 된다. 그런데 어떤 파일들을 바꿔야 할지 잘 모르거나 보다 간단한 방법을 찾고 있다면 아래의 방법을 사용하자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# 현재 계정 적용&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export PATH=/usr/local/php5/bin:\$PATH&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.profile
&lt;span class=&quot;c&quot;&gt;# 또는&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 전체 계정 적용&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;export PATH=/usr/local/php5/bin:\$PATH&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이제 shell을 다시 열어 &lt;code&gt;php --version&lt;/code&gt; 해보면 새로 설치된 PHP 버전을 확인 할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;웹 접속 확인&lt;/h3&gt;

&lt;p&gt;우선 httpd.conf는 El Capitan 기준으로 &lt;code&gt;/etc/apache2/httpd.conf&lt;/code&gt;에 있다. 여기서 &lt;code&gt;DocumentRoot&lt;/code&gt;를 확인하면 기본 웹 접근 경로를 알 수 있다. 이것 또한 El Capitan 기준으로  “/Library/WebServer/Documents”이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;vi /Library/WebServer/Documents/phpinfo.php
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위처럼 새로 파일을 하나 열어서 아래의 내용을 넣는다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;php&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;phpinfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이제는 &lt;a href=&quot;http://localhost/phpinfo.php&quot;&gt;http://localhost/phpinfo.php&lt;/a&gt;에 접속해서 페이지가 잘 나오는지 본다. 페이지가 나왔다면 PHP 버전도 확인 가능할 것이다. 나의 경우는 7.0.4가 설치되어 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;덤으로 composer 설치.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;curl -sS https://getcomposer.org/installer &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; php
mv composer.phar /usr/local/bin/composer
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
</content>
<summary>현재 기준으로 El Capitan에서 PHP 버전은 5.5.30이다. 웬만한 PHP 라이브러리는 동작하는데 문제가 없는 버전이긴 하지만 PHP 7이 최신 버전이며 작업에 따라 더 높은 버전의 PHP가 필요할 수 있다. 나의 경우도 웬만한 작업은 Vagrant에서 하므로 OSX의 PHP 버전은 문제가 되지 않지만 이번에 몇가지를 테스트하기 위해 OSX의 PHP를 버전업 하기로 했다.OSX에서의 PHP 버전업은 Upgrade to PHP 5.6 or 7 on Mac OSX 10.11 El Capitan and OSX 10.6 – 10.10에 잘 나와있다. 아니 설명할 것이 거의 없을 정도로 아주 간단하다.12345# PHP 5.6으로 버전업curl -s http://php-osx.liip.ch/install.sh | bash -s 5.6# PHP 7.0으로 버전업curl -s http://php-osx.liip.ch/install.sh | bash -s 7.0위처럼 쉘 스크립트를 실행해 주고 기다리면 거의 모든 작업이 완료된다(시간은 조금 걸린다).이제는 잘 설치되었는지 확인.PHP 버전 확인12/usr/local/php5/bin/php --versionphp --version위처럼 해보면 /usr/local/php5/bin/php --version는 PHP가 버전업된 것으로 보이지만 php --version는 기존 버전으로 나올 것이다.1which php위 명령을 넣으면 실행되는 PHP의 경로를 볼 수 있다. 나의 경우엔 /usr/bin/이다. 여기엔 PHP 기본 실행 파일 외에도 몇가지 관련 파일이 있는데 이 파일들을 새로 설치한 파일들로 교체 해주면 된다. 그런데 어떤 파일들을 바꿔야 할지 잘 모르거나 보다 간단한 방법을 찾고 있다면 아래의 방법을 사용하자.12345# 현재 계정 적용echo &amp;quot;export PATH=/usr/local/php5/bin:\$PATH&amp;quot; &amp;gt;&amp;gt; ~/.profile# 또는# 전체 계정 적용echo &amp;quot;export PATH=/usr/local/php5/bin:\$PATH&amp;quot; &amp;gt;&amp;gt; /etc/bashrc이제 shell을 다시 열어 php --version 해보면 새로 설치된 PHP 버전을 확인 할 수 있다.웹 접속 확인우선 httpd.conf는 El Capitan 기준으로 /etc/apache2/httpd.conf에 있다. 여기서 DocumentRoot를 확인하면 기본 웹 접근 경로를 알 수 있다. 이것 또한 El Capitan 기준으로  “/Library/WebServer/Documents”이다.1vi /Library/WebServer/Documents/phpinfo.php위처럼 새로 파일을 하나 열어서 아래의 내용을 넣는다.1&amp;lt;?php phpinfo();이제는 http://localhost/phpinfo.php에 접속해서 페이지가 잘 나오는지 본다. 페이지가 나왔다면 PHP 버전도 확인 가능할 것이다. 나의 경우는 7.0.4가 설치되어 있다.덤으로 composer 설치.12curl -sS https://getcomposer.org/installer | phpmv composer.phar /usr/local/bin/composer</summary>
</entry>
<entry>
<title>Android Studio : Find results에서 build files 제외하기</title>
<link href="http://blog.asamaru.net/2016/03/10/android-studio-ignore-build-files-in-find-results/" rel="alternate" type="text/html" title="Android Studio : Find results에서 build files 제외하기" />
<published>2016-03-10T19:30:12+09:00</published>
<updated>2016-03-10T19:30:12+09:00</updated>
<id>http://blog.asamaru.net/2016/03/10/android-studio-ignore-build-files-in-find-results</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/03/10/android-studio-ignore-build-files-in-find-results/">&lt;p&gt;Android Studio로 작업을 하다보면 많은 불편함을 겪게 된다. 그중에 하나가 원하는 문자열을 찾기 위해 사용하는 “Find in Path”(&lt;kbd&gt;Command&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;F&lt;/kbd&gt; / &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;F&lt;/kbd&gt;) 메뉴다. PHPStorm은 exclude 기능을 이용해서 원하지 않는 폴더를 프로젝트에서 제외해 둘 수 있다. 같은 회사에서 만들었음에도 불구하고 Android Studio에는 비슷한 기능이 없다. 그로 인해서 Find로 프로젝트 전체에서 검색시 build 폴더 등이 포함되어 원하는 결과를 찾기가 무척 힘들다(특히 R.java, log 파일등이 포함되면). 이 문제를 해결할 방법은 없는가?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/03/android_studio_find_in_path.png&quot; alt=&quot;Android Studio Find in path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일반적인 방법으로 “File name filter”를 이용해서 java, xml 등의 파일만 지정하는 것도 가능하지만 그래도 build 폴더 등을 제외하기는 쉽지 않다. 또는 “Scope &amp;gt; Directory”에서 소스 폴더를 지정하는 방법도 있으나 서브 모듈들이 다수 포함되어 있거나 libs 폴더 등도 함께 검색하고자 한다면 원하는 결과를 얻기 어렵다.&lt;/p&gt;

&lt;p&gt;그럼 build 시에 생성되는 파일들이 저장되는 intermediates, generated 폴더를 제외시키는 방법을 알아보자(&lt;a href=&quot;http://stackoverflow.com/a/32238593&quot;&gt;Ignore R.java files in Find results&lt;/a&gt;).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“Find in Path” 다이얼로그를 연다(&lt;kbd&gt;Command&lt;/kbd&gt;+&lt;kbd&gt;Shift&lt;/kbd&gt;+&lt;kbd&gt;F&lt;/kbd&gt;).&lt;/li&gt;
  &lt;li&gt;“Scope &amp;gt; Custom”을 선택하고 우측에 “…“을 선택한다.&lt;/li&gt;
  &lt;li&gt;“Scopes” 다이얼로그가 나타나면 좌측 상단에 “+”를 선택한다.&lt;/li&gt;
  &lt;li&gt;”+”를 선택하면 “Local / Shared”를 선택하라고 나오는데 아무것이나 선택해도 된다. 사실은 아직 두개의 차이를 모르겠다. 처음엔 Shared를 선택하면 다른 프로젝트에서도 사용할 수 있을 것이라 생각했는데 되지 않았다.&lt;/li&gt;
  &lt;li&gt;Scope 이름을 넣는 다이얼로그가 나오면 원하는 이름(“ExcludeIntermediates”)을 넣는다.&lt;/li&gt;
  &lt;li&gt;새로운 Scope가 생성되었다면 “Pattern:” 란에 &lt;code&gt;!file:*intermediates*/&amp;amp;&amp;amp;!file:*generated*/&lt;/code&gt;을 입력하고 “OK”를 선택한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Custom 메뉴에 보면 보다 다양하게 범위를 지정할 수 있는 기능들이 있으니 활용해 보는 것도 좋을 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/img/2016/03/android_studio_find_in_path_2.png&quot; alt=&quot;Android Studio Find in path&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제부터는 “Find in Path”에서 “Scope &amp;gt; Custom &amp;gt; ExcludeIntermediates”를 선택하고 검색하면 intermediates, generated를 제외한 폴더에서만 검색된 결과가 나온다. 설명을 보면 알겠지만 추가적으로 제외하고 싶은 폴더가 있다면 규칙을 추가하면 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;안드로이드 스튜디오를 이용한 개발은 정말 고난의 연속이다.&lt;/p&gt;
</content>
<summary>Android Studio로 작업을 하다보면 많은 불편함을 겪게 된다. 그중에 하나가 원하는 문자열을 찾기 위해 사용하는 “Find in Path”(Command+Shift+F / Ctrl+Shift+F) 메뉴다. PHPStorm은 exclude 기능을 이용해서 원하지 않는 폴더를 프로젝트에서 제외해 둘 수 있다. 같은 회사에서 만들었음에도 불구하고 Android Studio에는 비슷한 기능이 없다. 그로 인해서 Find로 프로젝트 전체에서 검색시 build 폴더 등이 포함되어 원하는 결과를 찾기가 무척 힘들다(특히 R.java, log 파일등이 포함되면). 이 문제를 해결할 방법은 없는가?일반적인 방법으로 “File name filter”를 이용해서 java, xml 등의 파일만 지정하는 것도 가능하지만 그래도 build 폴더 등을 제외하기는 쉽지 않다. 또는 “Scope &amp;gt; Directory”에서 소스 폴더를 지정하는 방법도 있으나 서브 모듈들이 다수 포함되어 있거나 libs 폴더 등도 함께 검색하고자 한다면 원하는 결과를 얻기 어렵다.그럼 build 시에 생성되는 파일들이 저장되는 intermediates, generated 폴더를 제외시키는 방법을 알아보자(Ignore R.java files in Find results).  “Find in Path” 다이얼로그를 연다(Command+Shift+F).  “Scope &amp;gt; Custom”을 선택하고 우측에 “…“을 선택한다.  “Scopes” 다이얼로그가 나타나면 좌측 상단에 “+”를 선택한다.  ”+”를 선택하면 “Local / Shared”를 선택하라고 나오는데 아무것이나 선택해도 된다. 사실은 아직 두개의 차이를 모르겠다. 처음엔 Shared를 선택하면 다른 프로젝트에서도 사용할 수 있을 것이라 생각했는데 되지 않았다.  Scope 이름을 넣는 다이얼로그가 나오면 원하는 이름(“ExcludeIntermediates”)을 넣는다.  새로운 Scope가 생성되었다면 “Pattern:” 란에 !file:*intermediates*/&amp;amp;&amp;amp;!file:*generated*/을 입력하고 “OK”를 선택한다.  Custom 메뉴에 보면 보다 다양하게 범위를 지정할 수 있는 기능들이 있으니 활용해 보는 것도 좋을 것이다.이제부터는 “Find in Path”에서 “Scope &amp;gt; Custom &amp;gt; ExcludeIntermediates”를 선택하고 검색하면 intermediates, generated를 제외한 폴더에서만 검색된 결과가 나온다. 설명을 보면 알겠지만 추가적으로 제외하고 싶은 폴더가 있다면 규칙을 추가하면 된다.안드로이드 스튜디오를 이용한 개발은 정말 고난의 연속이다.</summary>
</entry>
<entry>
<title>Android : Error:Could not read entry ‘:app:processDebugManifest’ from cache taskArtifacts.bin 오류 수정</title>
<link href="http://blog.asamaru.net/2016/03/10/android-error-could-not-read-entry-app-processdebugmanifest-from-cache-taskartifacts-bin/" rel="alternate" type="text/html" title="Android : Error:Could not read entry &#39;:app:processDebugManifest&#39; from cache taskArtifacts.bin 오류 수정" />
<published>2016-03-10T08:44:31+09:00</published>
<updated>2016-03-10T08:44:31+09:00</updated>
<id>http://blog.asamaru.net/2016/03/10/android-error-could-not-read-entry-app-processdebugmanifest-from-cache-taskartifacts-bin</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/03/10/android-error-could-not-read-entry-app-processdebugmanifest-from-cache-taskartifacts-bin/">&lt;p&gt;안드로이드 빌드시 아래와 같은 오류가 날 때가 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;Error:Could not read entry &#39;:app:processDebugManifest&#39; from cache taskArtifacts.bin ~~~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;흔하게 발생하지는 않는데 프로젝트의 Gradle 버전을 변경하는 경우 간혹 발생할 수 있다.&lt;/p&gt;

&lt;p&gt;해결 방법은 대부분 아주 간단하다. 오류 내용 중 &lt;code&gt;from cache taskArtifacts.bin&lt;/code&gt;에서 보듯이 cache 파일에서 필요한 정보를 가져오지 못하고 있으니 해당 cache 파일을 지우면 된다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;rm .gradle/2.10/taskArtifacts/taskArtifacts.bin
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;taskArtifacts.bin&lt;/code&gt; 파일의 경로는 Gradle 버전 등에 따라 다를 수 있으니 오류 로그에서 파일의 위치를 확인하거나 &lt;code&gt;.gradle&lt;/code&gt; 하위에서 해당 파일을 찾으면 된다.&lt;/p&gt;
</content>
<summary>안드로이드 빌드시 아래와 같은 오류가 날 때가 있다.Error:Could not read entry &#39;:app:processDebugManifest&#39; from cache taskArtifacts.bin ~~~흔하게 발생하지는 않는데 프로젝트의 Gradle 버전을 변경하는 경우 간혹 발생할 수 있다.해결 방법은 대부분 아주 간단하다. 오류 내용 중 from cache taskArtifacts.bin에서 보듯이 cache 파일에서 필요한 정보를 가져오지 못하고 있으니 해당 cache 파일을 지우면 된다.1rm .gradle/2.10/taskArtifacts/taskArtifacts.bintaskArtifacts.bin 파일의 경로는 Gradle 버전 등에 따라 다를 수 있으니 오류 로그에서 파일의 위치를 확인하거나 .gradle 하위에서 해당 파일을 찾으면 된다.</summary>
</entry>
<entry>
<title>PhantomJS 2.1.1: render PDF / zoomFactor 버그 해결</title>
<link href="http://blog.asamaru.net/2016/03/09/phantomjs-2-1-1-render-pdf-zoomfactor-bug/" rel="alternate" type="text/html" title="PhantomJS 2.1.1: render PDF / zoomFactor 버그 해결" />
<published>2016-03-09T11:18:51+09:00</published>
<updated>2016-03-09T11:18:51+09:00</updated>
<id>http://blog.asamaru.net/2016/03/09/phantomjs-2-1-1-render-pdf-zoomfactor-bug</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/03/09/phantomjs-2-1-1-render-pdf-zoomfactor-bug/">&lt;p&gt;어제 작성했던 &lt;a href=&quot;/2016/03/08/phantomjs-2-pagesize-format-bug/&quot;&gt;PhantomJS 2.1.1: render PDF / pageSize format 버그 해결&lt;/a&gt;에서 언급했던 PhantomJS에서 웹페이지를 PDF로 저장할 때 &lt;a href=&quot;http://phantomjs.org/api/webpage/property/zoom-factor.html&quot;&gt;zoomFactor&lt;/a&gt;가 정상 동작하지 않는 문제를 개선한 코드를 새로 올린다. &lt;a href=&quot;https://github.com/ariya/phantomjs/issues/12685&quot;&gt;PhantomJS 2: PDF rendering too large, page.zoomFactor doesn’t work&lt;/a&gt;에서 해결의 힌트가 있었음에도 불구하고 자세히 보지않아 해결하지 못했었는데 해당 부분을 조금 변형해서 조금 더 나은 방법을 적용했다(개인적인 생각).&lt;/p&gt;

&lt;p&gt;일단 코드부터.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*global phantom: false*/&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;major&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;webpage&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Web Page를 Control 하기 위한 Web Page Module 객체 생성&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// fixme phantomjs 2.1.1 에서 pageSize.format A4 버그 개선&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoomFactor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;585&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// A4 / 72 DPI : 585px X 842px&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;portrait&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paperSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onLoadFinished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoomFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 스크린 캡쳐파일 생성&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Status: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 폰트 문제로 사용가능한 폰트로 교체&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cssCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;html body, html body * { font-family:&amp;quot;바른돋움OTF&amp;quot; !important; }&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// html { zoom: 1; }&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cssText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cssCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cssCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;head&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// status 인자를 통해 성공, 실패여부 확인&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Cannot open webpage&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;지난 글에서의 코드와 거의 유사하다. 변경된 부분 중 중요한 부분만 아래에 설명한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoomFactor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;585&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// A4 / 72 DPI : 585px X 842px&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;보여줄 가로 width에 따라 zoomFactor를 결정한다. 585는 72 DPI 기준에서 A4용지의 가로 px 이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onLoadFinished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoomFactor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 스크린 캡쳐파일 생성&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Status: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;문제가 되던 부분이 zoomFactor가 적용되지 않는 것이었다. 이를 개선하기 위해 &lt;code&gt;body&lt;/code&gt;의 zoom css를 사용해서 보정한다.&lt;/p&gt;

&lt;p&gt;다른 부분의 자세한 내용은 &lt;a href=&quot;/2016/03/08/phantomjs-2-pagesize-format-bug/&quot;&gt;PhantomJS 2.1.1: render PDF / pageSize format 버그 해결&lt;/a&gt;을 참고하자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;마지막으로 위 방법도 완전한 방법은 아니다. PhantomJS가 버전업 되면서 zoomFactor 버그가 해결되면 이번엔 반대로 너무 작게 출력하게되는 코드가 될 수 있다. 그런 경우을 감안한다면 지난 글에서 언급한 방법이 나을 수도 있다(실제 PDF가 A4 사이즈가 아니라는 것을 무시한다면 : 출력시에는 A4에 맞게 잘 나온다).&lt;/p&gt;
</content>
<summary>어제 작성했던 PhantomJS 2.1.1: render PDF / pageSize format 버그 해결에서 언급했던 PhantomJS에서 웹페이지를 PDF로 저장할 때 zoomFactor가 정상 동작하지 않는 문제를 개선한 코드를 새로 올린다. PhantomJS 2: PDF rendering too large, page.zoomFactor doesn’t work에서 해결의 힌트가 있었음에도 불구하고 자세히 보지않아 해결하지 못했었는데 해당 부분을 조금 변형해서 조금 더 나은 방법을 적용했다(개인적인 생각).일단 코드부터. 1 2 3 4 5 6 7 8 910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&amp;quot;use strict&amp;quot;;/*global phantom: false*/var dest, source;var v = phantom.version;if (v.major &amp;gt;= 2) {	var system = require(&amp;#39;system&amp;#39;);	dest = system.args[1];	source = system.args[2];} else {	dest = phantom.args[0];	source = phantom.args[1];}var page = require(&amp;#39;webpage&amp;#39;).create();	// Web Page를 Control 하기 위한 Web Page Module 객체 생성// fixme phantomjs 2.1.1 에서 pageSize.format A4 버그 개선var width = 1024;page.viewportSize = {width: width, height: width * (768 / 1024)};	// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작page.zoomFactor = 585 / width;	// A4 / 72 DPI : 585px X 842pxvar pageSize = {	format: &amp;#39;A4&amp;#39;,	orientation: &amp;#39;portrait&amp;#39;,	margin: {		top: &amp;#39;0.5cm&amp;#39;,		bottom: &amp;#39;0.5cm&amp;#39;,		left: &amp;#39;0.5cm&amp;#39;,		right: &amp;#39;0.5cm&amp;#39;	}};page.paperSize = pageSize;page.onLoadFinished = function (status) {	var zoom = page.zoomFactor;	page.evaluate(function (zoom) {		document.getElementsByTagName(&amp;#39;body&amp;#39;)[0].style.zoom = zoom;	}, zoom);	setTimeout(function () {		page.render(dest);    // 스크린 캡쳐파일 생성		console.log(&amp;#39;Status: &amp;#39; + status);		phantom.exit();	}, 0);};page.open(source, function (status) {	page.evaluate(function () {		// 폰트 문제로 사용가능한 폰트로 교체		var cssCode = &amp;#39;html body, html body * { font-family:&amp;quot;바른돋움OTF&amp;quot; !important; }&amp;#39;;// html { zoom: 1; }		var styleElement = document.createElement(&amp;quot;style&amp;quot;);		styleElement.type = &amp;quot;text/css&amp;quot;;		if (styleElement.styleSheet) {			styleElement.styleSheet.cssText = cssCode;		} else {			styleElement.appendChild(document.createTextNode(cssCode));		}		document.getElementsByTagName(&amp;quot;head&amp;quot;)[0].appendChild(styleElement);	});	if (status !== &amp;#39;success&amp;#39;) {	// status 인자를 통해 성공, 실패여부 확인		console.log(&amp;#39;Cannot open webpage&amp;#39;);		phantom.exit();	}});지난 글에서의 코드와 거의 유사하다. 변경된 부분 중 중요한 부분만 아래에 설명한다.123var width = 1024;page.viewportSize = {width: width, height: width * (768 / 1024)};	// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작page.zoomFactor = 585 / width;	// A4 / 72 DPI : 585px X 842px보여줄 가로 width에 따라 zoomFactor를 결정한다. 585는 72 DPI 기준에서 A4용지의 가로 px 이다. 1 2 3 4 5 6 7 8 910111213page.onLoadFinished = function (status) {	var zoom = page.zoomFactor;	page.evaluate(function (zoom) {		document.getElementsByTagName(&amp;#39;body&amp;#39;)[0].style.zoom = zoom;	}, zoom);	setTimeout(function () {		page.render(dest);    // 스크린 캡쳐파일 생성		console.log(&amp;#39;Status: &amp;#39; + status);		phantom.exit();	}, 0);};문제가 되던 부분이 zoomFactor가 적용되지 않는 것이었다. 이를 개선하기 위해 body의 zoom css를 사용해서 보정한다.다른 부분의 자세한 내용은 PhantomJS 2.1.1: render PDF / pageSize format 버그 해결을 참고하자.마지막으로 위 방법도 완전한 방법은 아니다. PhantomJS가 버전업 되면서 zoomFactor 버그가 해결되면 이번엔 반대로 너무 작게 출력하게되는 코드가 될 수 있다. 그런 경우을 감안한다면 지난 글에서 언급한 방법이 나을 수도 있다(실제 PDF가 A4 사이즈가 아니라는 것을 무시한다면 : 출력시에는 A4에 맞게 잘 나온다).</summary>
</entry>
<entry>
<title>PhantomJS 2.1.1: render PDF / pageSize format 버그 해결</title>
<link href="http://blog.asamaru.net/2016/03/08/phantomjs-2-pagesize-format-bug/" rel="alternate" type="text/html" title="PhantomJS 2.1.1: render PDF / pageSize format 버그 해결" />
<published>2016-03-08T10:49:31+09:00</published>
<updated>2016-03-08T10:49:31+09:00</updated>
<id>http://blog.asamaru.net/2016/03/08/phantomjs-2-pagesize-format-bug</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/03/08/phantomjs-2-pagesize-format-bug/">&lt;p&gt;이번에 작업을 하면서 &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;로 웹페이지를 PDF로 저장(캡춰)하는 부분을 처리하게 되었다. 기본적으로 PhantomJS는 보여지는 페이지를 &lt;a href=&quot;http://phantomjs.org/api/webpage/method/render.html&quot;&gt;render&lt;/a&gt; 함수를 사용해서 파일로 저장하는 기능을 기본적으로 제공한다. &lt;code&gt;render&lt;/code&gt;에서 제공하는 포멧은 PDF, PNG, JPEG, BMP, PPM
, GIF 이다. 따라서 원하는 기능을 아주 간단하게 구현할 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://nodejs.org/ko/&quot;&gt;node.js&lt;/a&gt;의 설치나 PhantomJS의 설치에 관해서는 여기서 다루지 않는다. 복잡하지도 않고 검색해보면 상세히 설명되어 있는 자료도 많다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그런데 내 Vagrant 환경에서 이상없이 동작하던 기능이 동료의 Vagrant 환경에서 이상하게 동작했다. PDF 출력시 A4 사이즈를 지정했음에도 페이지가 잘려보였던 것이다. 그래서 원인을 찾아보니 PhantomJS의 버전 문제였다. 나의 경우는 예전부터 사용하면서 구버전(1.9)이 설치되어 있었고 동료의 경우는 새로 설치하면서 최신버전(2.1.1)이 설치되었던 것이다.&lt;/p&gt;

&lt;p&gt;이와 관련해서 찾아보니 아래와 같은 글들이 있었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ariya/phantomjs/issues/12936&quot;&gt;phantomjs 2 fails to render pdf properly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ariya/phantomjs/issues/12685&quot;&gt;PhantomJS 2: PDF rendering too large, page.zoomFactor doesn’t work&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;분위기를 보면 PhantomJS가 2버전이 되면서 문제가 발생하는 것 같다. 이 글들에서 해결 방법으로 사람들이 이야기하는 것 중 그나마 효과가 있었던 것은 css로 zoom을 줘서 비율을 맞추는 것인데 이건 맘에 들지 않는다. 정확한 비율을 지정하기도 애매하고 나중에 버전이 변경되면서 어떻게 바뀔지 모르기 때문이다.&lt;/p&gt;

&lt;p&gt;결론적으로 나의 경우는 &lt;a href=&quot;http://phantomjs.org/api/webpage/property/paper-size.html&quot;&gt;page.paperSize&lt;/a&gt;에 width, height를 주는 것으로 일단 해결했다. 이것 또한 완벽한 해결이라고 보기엔 어렵지만 zoom을 사용하는 것보다는 낫다는 개인적인 생각이다.&lt;/p&gt;

&lt;p&gt;일단 코드를 보자. 실행시 첫번째 인자로 파일이 저장될 경로, 두번째 인자로 대상 url이 지정된 것을 가정하고 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/*global phantom: false*/&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;major&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;webpage&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Web Page를 Control 하기 위한 Web Page Module 객체 생성&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// fixme phantomjs 2.1.1 에서 pageSize.format A4 버그로 인해 강제로 사이즈를 지정함&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2339&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1654&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//page.viewportSize = viewportSize;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;portrait&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//header: {&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	height: &amp;#39;1cm&amp;#39;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	contents: phantom.callback(function () {&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//		return &amp;#39;&amp;lt;div&amp;gt;PhantomJS Header, Footer 예제입니다.&amp;lt;/div&amp;gt;&amp;#39;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	})&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//},&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//footer: {&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	height: &amp;#39;1cm&amp;#39;,&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	contents: phantom.callback(function (pageNum, numPages) {&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//		return &amp;#39;&amp;lt;div&amp;gt;&amp;#39; + pageNum + &amp;#39;/&amp;#39; + numPages + &amp;#39;&amp;lt;/div&amp;gt;&amp;#39;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//	})&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;major&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paperSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onLoadFinished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 스크린 캡쳐파일 생성&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Status: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 폰트 문제로 사용가능한 폰트로 교체&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cssCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;html body, html body * { font-family:&amp;quot;바른돋움OTF&amp;quot; !important; }&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// html { zoom: 1; }&lt;/span&gt;
		&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cssText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cssCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cssCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;head&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// status 인자를 통해 성공, 실패여부 확인&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Cannot open webpage&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;여기서 이야기하는 문제와는 상관없지만 코드에서 설명이 필요한 부분들을 하나씩 보자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;major&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;system&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;예전에는 &lt;a href=&quot;http://phantomjs.org/api/phantom/property/args.html&quot;&gt;phantom.args&lt;/a&gt;를 사용해서 인자를 받았지만 메뉴엘에도 설명되어 있는 것처럼 지금은 phantom.args가 제거되고 system.args을 사용한다.&lt;/p&gt;

&lt;p&gt;그리고 중요한 부분. A4 사이즈에 대한 문제 해결 부분이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// fixme phantomjs 2.1.1 에서 pageSize.format A4 버그로 인해 강제로 사이즈를 지정함&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2339&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1654&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//page.viewportSize = viewportSize;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;A4&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;orientation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;portrait&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.5cm&amp;#39;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;major&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paperSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pageSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;여기서 중요한 것은 width와 height이다. width의 경우는 페이지를 랜더링할 width를 기준으로 주면되고 height의 경우는 A4 용지 비율에 맞게 넣어야 한다. &lt;code&gt;(2339/1654)&lt;/code&gt;가 A4 용지의 세로 비율이다(참고 : &lt;a href=&quot;http://www.a4papersize.org/a4-paper-size-in-pixels.php&quot;&gt;A4PaperSize.org
&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;그리고 한가지. 여기서는 페이지가 잘려나가지 않고 비율을 맞추는데 초첨을 맞춘 해결 방법이므로 완벽한 방법은 아니다. 일례로 OSX의 크롬에서는 브라우저에서 PDF를 열어 출력해도 깔끔하게 나오나 사파리에서는 50% 비율로 출력해야 정확히 나온다. 단, 브라우저가 아닌 파일 다운로드 후 출력하면 당연히 정상적으로 출력된다.
이것은 DPI 문제인 것 같으나 아직 해결하진 못했다. 기본 DPI가 72 DPI로 설정된 것으로 보인다. 이 경우 사이즈가 595px X 842px가 되므로 페이지가 잘려나가는 것이다. 하지만 페이지를 595px로 랜더링하면 웹페이지의 가로가 너무 좁으니 이렇게 사용할 수도 없다.&lt;/p&gt;

&lt;p&gt;정확한 해결을 위해서는 &lt;a href=&quot;http://phantomjs.org/api/webpage/property/zoom-factor.html&quot;&gt;zoomFactor&lt;/a&gt;에 DPI 비율을 넣어줘야 하는데 지금 zoomFactor가 정상적으로 적용되지를 않는다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evaluate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 폰트 문제로 사용가능한 폰트로 교체&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cssCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;html body, html body * { font-family:&amp;quot;바른돋움OTF&amp;quot; !important; }&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// html { zoom: 1; }&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cssText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cssCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cssCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;head&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;styleElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;사실 위 부분은 실제로는 굳이 필요하지는 않다. PhantomJS의 경우는 서버 내부에 등록된 폰트를 사용하게 되므로 서버에 있는 폰트로 맞춰준 것이다. 위 코드를 사용하지 않아도 기본 한글 폰트가 지정되어 나온다. 단, 서버에 한글 폰트가 설치된 경우에 한해서. PhantomJS에서 한글이 나오지 않는다면 폰트가 설치되지 않은 것이고 이 또한 자료가 아주 많으니 쉽게 해결할 수 있다(간단히 말하자면 CentOS 기준으로 폰트 파일을 &lt;code&gt;/usr/share/fonts/&lt;/code&gt;에 넣으면 된다).&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onLoadFinished&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 스크린 캡쳐파일 생성&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Status: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;phantom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;마지막으로 한가지 &lt;code&gt;page.render&lt;/code&gt; 처리를 setTimeout으로 씌운 것. 이 부분도 꼭 필요하지는 않으나 &lt;a href=&quot;http://phantomjs.org/api/webpage/method/evaluate-java-script.html&quot;&gt;page.evaluate&lt;/a&gt;가 실행되기 전에 render되는 경우가 있어 사용한 코드다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A4 출력 문제로 이 글을 썼지만 내용을 보면 웹페이지를 PDF로 저장하는 방법에 대해서도 충분한 샘플이 포함되어 있으니 원하는 작업에 약간의 도움이라도 되었으면 하는 바람이다.&lt;/p&gt;
</content>
<summary>이번에 작업을 하면서 PhantomJS로 웹페이지를 PDF로 저장(캡춰)하는 부분을 처리하게 되었다. 기본적으로 PhantomJS는 보여지는 페이지를 render 함수를 사용해서 파일로 저장하는 기능을 기본적으로 제공한다. render에서 제공하는 포멧은 PDF, PNG, JPEG, BMP, PPM, GIF 이다. 따라서 원하는 기능을 아주 간단하게 구현할 수 있다.  node.js의 설치나 PhantomJS의 설치에 관해서는 여기서 다루지 않는다. 복잡하지도 않고 검색해보면 상세히 설명되어 있는 자료도 많다.그런데 내 Vagrant 환경에서 이상없이 동작하던 기능이 동료의 Vagrant 환경에서 이상하게 동작했다. PDF 출력시 A4 사이즈를 지정했음에도 페이지가 잘려보였던 것이다. 그래서 원인을 찾아보니 PhantomJS의 버전 문제였다. 나의 경우는 예전부터 사용하면서 구버전(1.9)이 설치되어 있었고 동료의 경우는 새로 설치하면서 최신버전(2.1.1)이 설치되었던 것이다.이와 관련해서 찾아보니 아래와 같은 글들이 있었다.  phantomjs 2 fails to render pdf properly  PhantomJS 2: PDF rendering too large, page.zoomFactor doesn’t work분위기를 보면 PhantomJS가 2버전이 되면서 문제가 발생하는 것 같다. 이 글들에서 해결 방법으로 사람들이 이야기하는 것 중 그나마 효과가 있었던 것은 css로 zoom을 줘서 비율을 맞추는 것인데 이건 맘에 들지 않는다. 정확한 비율을 지정하기도 애매하고 나중에 버전이 변경되면서 어떻게 바뀔지 모르기 때문이다.결론적으로 나의 경우는 page.paperSize에 width, height를 주는 것으로 일단 해결했다. 이것 또한 완벽한 해결이라고 보기엔 어렵지만 zoom을 사용하는 것보다는 낫다는 개인적인 생각이다.일단 코드를 보자. 실행시 첫번째 인자로 파일이 저장될 경로, 두번째 인자로 대상 url이 지정된 것을 가정하고 있다. 1 2 3 4 5 6 7 8 9101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475&amp;quot;use strict&amp;quot;;/*global phantom: false*/var dest, source;var v = phantom.version;if (v.major &amp;gt;= 2) {	var system = require(&amp;#39;system&amp;#39;);	dest = system.args[1];	source = system.args[2];} else {	dest = phantom.args[0];	source = phantom.args[1];}var page = require(&amp;#39;webpage&amp;#39;).create();	// Web Page를 Control 하기 위한 Web Page Module 객체 생성// fixme phantomjs 2.1.1 에서 pageSize.format A4 버그로 인해 강제로 사이즈를 지정함var viewportSize = {width: 1024, height: 1024 * (2339/1654)};//page.viewportSize = viewportSize;page.viewportSize = {width: 1024, height: 768};	// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작var pageSize = {	format: &amp;#39;A4&amp;#39;,	orientation: &amp;#39;portrait&amp;#39;,	margin: {		top: &amp;#39;0.5cm&amp;#39;,		bottom: &amp;#39;0.5cm&amp;#39;,		left: &amp;#39;0.5cm&amp;#39;,		right: &amp;#39;0.5cm&amp;#39;	}//,	//header: {	//	height: &amp;#39;1cm&amp;#39;,	//	contents: phantom.callback(function () {	//		return &amp;#39;&amp;lt;div&amp;gt;PhantomJS Header, Footer 예제입니다.&amp;lt;/div&amp;gt;&amp;#39;;	//	})	//},	//footer: {	//	height: &amp;#39;1cm&amp;#39;,	//	contents: phantom.callback(function (pageNum, numPages) {	//		return &amp;#39;&amp;lt;div&amp;gt;&amp;#39; + pageNum + &amp;#39;/&amp;#39; + numPages + &amp;#39;&amp;lt;/div&amp;gt;&amp;#39;;	//	})	//}};if (v.major &amp;gt;= 2) {	pageSize.width = (viewportSize.width) + &amp;#39;px&amp;#39;;	pageSize.height = (viewportSize.height) + &amp;#39;px&amp;#39;;}page.paperSize = pageSize;page.onLoadFinished = function (status) {	setTimeout(function () {		page.render(dest);    // 스크린 캡쳐파일 생성		console.log(&amp;#39;Status: &amp;#39; + status);		phantom.exit();	}, 0);};page.open(source, function (status) {	page.evaluate(function () {		// 폰트 문제로 사용가능한 폰트로 교체		var cssCode = &amp;#39;html body, html body * { font-family:&amp;quot;바른돋움OTF&amp;quot; !important; }&amp;#39;;// html { zoom: 1; }		var styleElement = document.createElement(&amp;quot;style&amp;quot;);		styleElement.type = &amp;quot;text/css&amp;quot;;		if (styleElement.styleSheet) {			styleElement.styleSheet.cssText = cssCode;		} else {			styleElement.appendChild(document.createTextNode(cssCode));		}		document.getElementsByTagName(&amp;quot;head&amp;quot;)[0].appendChild(styleElement);	});	if (status !== &amp;#39;success&amp;#39;) {	// status 인자를 통해 성공, 실패여부 확인		console.log(&amp;#39;Cannot open webpage&amp;#39;);		phantom.exit();	}});여기서 이야기하는 문제와는 상관없지만 코드에서 설명이 필요한 부분들을 하나씩 보자. 1 2 3 4 5 6 7 8 910var dest, source;var v = phantom.version;if (v.major &amp;gt;= 2) {	var system = require(&amp;#39;system&amp;#39;);	dest = system.args[1];	source = system.args[2];} else {	dest = phantom.args[0];	source = phantom.args[1];}예전에는 phantom.args를 사용해서 인자를 받았지만 메뉴엘에도 설명되어 있는 것처럼 지금은 phantom.args가 제거되고 system.args을 사용한다.그리고 중요한 부분. A4 사이즈에 대한 문제 해결 부분이다. 1 2 3 4 5 6 7 8 91011121314151617181920// fixme phantomjs 2.1.1 에서 pageSize.format A4 버그로 인해 강제로 사이즈를 지정함var viewportSize = {width: 1024, height: 1024 * (2339/1654)};//page.viewportSize = viewportSize;page.viewportSize = {width: 1024, height: 768};	// PhantomJS에서 화면을 어떤 사이즈로 출력할 것인지에 대한 값 : 미디어 쿼리도 동작var pageSize = {	format: &amp;#39;A4&amp;#39;,	orientation: &amp;#39;portrait&amp;#39;,	margin: {		top: &amp;#39;0.5cm&amp;#39;,		bottom: &amp;#39;0.5cm&amp;#39;,		left: &amp;#39;0.5cm&amp;#39;,		right: &amp;#39;0.5cm&amp;#39;	}};if (v.major &amp;gt;= 2) {	pageSize.width = (viewportSize.width) + &amp;#39;px&amp;#39;;	pageSize.height = (viewportSize.height) + &amp;#39;px&amp;#39;;}page.paperSize = pageSize;여기서 중요한 것은 width와 height이다. width의 경우는 페이지를 랜더링할 width를 기준으로 주면되고 height의 경우는 A4 용지 비율에 맞게 넣어야 한다. (2339/1654)가 A4 용지의 세로 비율이다(참고 : A4PaperSize.org).그리고 한가지. 여기서는 페이지가 잘려나가지 않고 비율을 맞추는데 초첨을 맞춘 해결 방법이므로 완벽한 방법은 아니다. 일례로 OSX의 크롬에서는 브라우저에서 PDF를 열어 출력해도 깔끔하게 나오나 사파리에서는 50% 비율로 출력해야 정확히 나온다. 단, 브라우저가 아닌 파일 다운로드 후 출력하면 당연히 정상적으로 출력된다.이것은 DPI 문제인 것 같으나 아직 해결하진 못했다. 기본 DPI가 72 DPI로 설정된 것으로 보인다. 이 경우 사이즈가 595px X 842px가 되므로 페이지가 잘려나가는 것이다. 하지만 페이지를 595px로 랜더링하면 웹페이지의 가로가 너무 좁으니 이렇게 사용할 수도 없다.정확한 해결을 위해서는 zoomFactor에 DPI 비율을 넣어줘야 하는데 지금 zoomFactor가 정상적으로 적용되지를 않는다. 1 2 3 4 5 6 7 8 9101112page.evaluate(function () {  // 폰트 문제로 사용가능한 폰트로 교체  var cssCode = &amp;#39;html body, html body * { font-family:&amp;quot;바른돋움OTF&amp;quot; !important; }&amp;#39;;// html { zoom: 1; }  var styleElement = document.createElement(&amp;quot;style&amp;quot;);  styleElement.type = &amp;quot;text/css&amp;quot;;  if (styleElement.styleSheet) {    styleElement.styleSheet.cssText = cssCode;  } else {    styleElement.appendChild(document.createTextNode(cssCode));  }  document.getElementsByTagName(&amp;quot;head&amp;quot;)[0].appendChild(styleElement);});사실 위 부분은 실제로는 굳이 필요하지는 않다. PhantomJS의 경우는 서버 내부에 등록된 폰트를 사용하게 되므로 서버에 있는 폰트로 맞춰준 것이다. 위 코드를 사용하지 않아도 기본 한글 폰트가 지정되어 나온다. 단, 서버에 한글 폰트가 설치된 경우에 한해서. PhantomJS에서 한글이 나오지 않는다면 폰트가 설치되지 않은 것이고 이 또한 자료가 아주 많으니 쉽게 해결할 수 있다(간단히 말하자면 CentOS 기준으로 폰트 파일을 /usr/share/fonts/에 넣으면 된다).1234567page.onLoadFinished = function (status) {	setTimeout(function () {		page.render(dest);    // 스크린 캡쳐파일 생성		console.log(&amp;#39;Status: &amp;#39; + status);		phantom.exit();	}, 0);};마지막으로 한가지 page.render 처리를 setTimeout으로 씌운 것. 이 부분도 꼭 필요하지는 않으나 page.evaluate가 실행되기 전에 render되는 경우가 있어 사용한 코드다.A4 출력 문제로 이 글을 썼지만 내용을 보면 웹페이지를 PDF로 저장하는 방법에 대해서도 충분한 샘플이 포함되어 있으니 원하는 작업에 약간의 도움이라도 되었으면 하는 바람이다.</summary>
</entry>
<entry>
<title>ssh proxy를 이용한 git 사용하기</title>
<link href="http://blog.asamaru.net/2016/03/07/git-socks5-proxy/" rel="alternate" type="text/html" title="ssh proxy를 이용한 git 사용하기" />
<published>2016-03-07T20:28:24+09:00</published>
<updated>2016-03-07T20:28:24+09:00</updated>
<id>http://blog.asamaru.net/2016/03/07/git-socks5-proxy</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/03/07/git-socks5-proxy/">&lt;p&gt;앞서 &lt;a href=&quot;/2015/09/21/how-to-install-gogs-on-centos/&quot;&gt;CentOS에 gogs 설치하기&lt;/a&gt;,
&lt;a href=&quot;/2015/09/22/how-to-install-gitlib-on-centos/&quot;&gt;CentOS에 Gitlab 설치하기&lt;/a&gt;, &lt;a href=&quot;/2015/10/12/gitlab-ce-to-gitlab-dot-com/&quot;&gt;자체 설치한 gitlab-ce에서 gitlab.com으로 이전하다&lt;/a&gt;에서 언급했던 것처럼 git 저장소로 &lt;a href=&quot;https://gitlab.com/&quot;&gt;gitlab.com&lt;/a&gt;을 사용중이다. 한동안은 아무 문제없이 잘 사용하고 있었다. 아니 사실 gitlab.com에 접속이 되지 않는 문제가 간헐적으로 발생했었다. 얼마전까지만 하더라도 해외 서비스에서 서비스되는 사이트라서 그런가보다 했다.&lt;/p&gt;

&lt;p&gt;그런데 몇일 전부터 회사 네트워크에서 &lt;a href=&quot;https://gitlab.com/&quot;&gt;gitlab.com&lt;/a&gt;에 접속할 수 없었다. 웹사이트뿐 아니라 git push/pull도 할 수가 없었다. 처음엔 회사 네트워크 방화벽 문제인 줄 알고 확인했으나 아니었다. 그래서 tracepath로 확인해 보니 SK Broadband 네트워크를 벗어나지 못하고 있었다(회사 네트워크가 SK다). 이상해서 조금 검색해보니 예전부터 SK Broadband의 해외 사이트 접속 문제가 유명했던 것 같다. 사람들의 이야기를 봐도 SK에 이야기한다고 해결될 문제는 아닌 것 같고… 그렇다고 git를 사용하지 않을 수 없어서 다른 방법을 찾아야 했다.&lt;/p&gt;

&lt;p&gt;다행히 회사엔 외부망(SK가 아닌)에 연결된 Proxy가 하나 있다. 그래서 그 Proxy를 사용해서 급한대로 gitlab.com에 push/pull 하고 있다. 조금 더 기다려볼 생각이지만 빠른 시일 내에 접속이 복구되지 않는다면 다시 설치형 gitlab을 검토해야 할 것 같다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;본론으로 들어가서 위의 이유로 인해 사용하게된 ssh proxy에 대한 처리 방법을 설명하려고 한다. 이번에 필요에 의해 적용한 환경은 CentOS 7과 OSX 10.11 이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CentOS 7&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/.ssh/config&lt;/code&gt; 파일에 아래의 내용을 추가 한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;Host gitlab.com
    User                    git
    ProxyCommand            socat STDIO SOCKS4:[proxy ip]:%h:%p,socksport=[proxy port]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;여기서 중요한 부분. &lt;code&gt;socat&lt;/code&gt;이 설치되어 있어야 한다. 설치되어 있지 않다면 간단히 &lt;code&gt;yum install socat&lt;/code&gt;을 통해 설치할 수 있다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;code&gt;SOCKS4&lt;/code&gt;는 Proxy의 프로토콜에 따라 변경되어야 한다. 사실 내가 사용한 Proxy는 &lt;code&gt;SOCKS5&lt;/code&gt;를 사용하는데 &lt;code&gt;SOCKS5&lt;/code&gt;를 지정하면 오류가 나고 &lt;code&gt;SOCKS4&lt;/code&gt;를 지정해야만 정상 동작했다. 기타 프로토콜의 경우는 &lt;a href=&quot;http://www.dest-unreach.org/socat/&quot;&gt;socat&lt;/a&gt;를 참고.&lt;/p&gt;

&lt;p&gt;위 처리를 하고나면 “gitlab.com” 도메인에 대해서는 ssh 접속시 지정한 Proxy를 사용한다. 따라서 git 명령을 사용하면 Proxy를 통해서 데이터가 전달된다. 단, ssh를 사용해서 git remote가 연결된 경우에.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;OSX 또한 &lt;code&gt;~/.ssh/config&lt;/code&gt; 파일에 아래의 내용을 추가 한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;Host gitlab.com
    User                    git
    ProxyCommand            nc -X 5 -x [proxy ip]:[proxy port] %h %p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;OSX도 CentOS와 방법은 동일하나 socat 대신 nc(&lt;a href=&quot;http://netcat.sourceforge.net/&quot;&gt;netcat&lt;/a&gt;)를 사용하고 있다. nc가 기본적으로 설치되어 있어서 그냥 nc를 사용했다. 어짜피 원리는 같다.
nc의 경우는 -X 뒤에 있는 5가 Proxy 프로토콜을 뜻한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;-X proxy_version
            Requests that nc should use the specified protocol when talking to the proxy server.  Supported protocols are “4” (SOCKS v.4), “5”
            (SOCKS v.5) and “connect” (HTTPS proxy).  If the protocol is not specified, SOCKS version 5 is used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;PHPStorm&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;덤으로 PHPStorm과 같은 IntelliJ IDE에서의 설정을 설명한다. 기본적으로 IntelliJ는 Git의 ssh 클라이언트를 Built-in을 사용한다. 이 설정을 Native로 바꿔주면 위에서 설정한 &lt;code&gt;~/.ssh/config&lt;/code&gt; 파일의 설정을 그대로 적용시킬 수 있다. 메뉴의 위치는 “Preference &amp;gt; Version Control &amp;gt; Git”에서 “SSH executable”를 찾으면 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;위 방법은 ssh의 설정을 이용한 방법이지만 git의 설정한 방법도 있다. 개인적으로 git에 설정하는게 더 복잡해서 그냥 ssh에 설정하는 것을 선택했을 뿐이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;참고글&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://cms-sw.github.io/tutorial-proxy.html&quot;&gt;Tutorial: how to use git through a proxy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jones.ec/blogs/a/entry/using_git_through_a_socks/&quot;&gt;Using git through a SOCKS proxy (or SSH tunnel)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
<summary>앞서 CentOS에 gogs 설치하기,CentOS에 Gitlab 설치하기, 자체 설치한 gitlab-ce에서 gitlab.com으로 이전하다에서 언급했던 것처럼 git 저장소로 gitlab.com을 사용중이다. 한동안은 아무 문제없이 잘 사용하고 있었다. 아니 사실 gitlab.com에 접속이 되지 않는 문제가 간헐적으로 발생했었다. 얼마전까지만 하더라도 해외 서비스에서 서비스되는 사이트라서 그런가보다 했다.그런데 몇일 전부터 회사 네트워크에서 gitlab.com에 접속할 수 없었다. 웹사이트뿐 아니라 git push/pull도 할 수가 없었다. 처음엔 회사 네트워크 방화벽 문제인 줄 알고 확인했으나 아니었다. 그래서 tracepath로 확인해 보니 SK Broadband 네트워크를 벗어나지 못하고 있었다(회사 네트워크가 SK다). 이상해서 조금 검색해보니 예전부터 SK Broadband의 해외 사이트 접속 문제가 유명했던 것 같다. 사람들의 이야기를 봐도 SK에 이야기한다고 해결될 문제는 아닌 것 같고… 그렇다고 git를 사용하지 않을 수 없어서 다른 방법을 찾아야 했다.다행히 회사엔 외부망(SK가 아닌)에 연결된 Proxy가 하나 있다. 그래서 그 Proxy를 사용해서 급한대로 gitlab.com에 push/pull 하고 있다. 조금 더 기다려볼 생각이지만 빠른 시일 내에 접속이 복구되지 않는다면 다시 설치형 gitlab을 검토해야 할 것 같다.본론으로 들어가서 위의 이유로 인해 사용하게된 ssh proxy에 대한 처리 방법을 설명하려고 한다. 이번에 필요에 의해 적용한 환경은 CentOS 7과 OSX 10.11 이다.CentOS 7~/.ssh/config 파일에 아래의 내용을 추가 한다.Host gitlab.com    User                    git    ProxyCommand            socat STDIO SOCKS4:[proxy ip]:%h:%p,socksport=[proxy port]여기서 중요한 부분. socat이 설치되어 있어야 한다. 설치되어 있지 않다면 간단히 yum install socat을 통해 설치할 수 있다.그리고 SOCKS4는 Proxy의 프로토콜에 따라 변경되어야 한다. 사실 내가 사용한 Proxy는 SOCKS5를 사용하는데 SOCKS5를 지정하면 오류가 나고 SOCKS4를 지정해야만 정상 동작했다. 기타 프로토콜의 경우는 socat를 참고.위 처리를 하고나면 “gitlab.com” 도메인에 대해서는 ssh 접속시 지정한 Proxy를 사용한다. 따라서 git 명령을 사용하면 Proxy를 통해서 데이터가 전달된다. 단, ssh를 사용해서 git remote가 연결된 경우에.OSXOSX 또한 ~/.ssh/config 파일에 아래의 내용을 추가 한다.Host gitlab.com    User                    git    ProxyCommand            nc -X 5 -x [proxy ip]:[proxy port] %h %pOSX도 CentOS와 방법은 동일하나 socat 대신 nc(netcat)를 사용하고 있다. nc가 기본적으로 설치되어 있어서 그냥 nc를 사용했다. 어짜피 원리는 같다.nc의 경우는 -X 뒤에 있는 5가 Proxy 프로토콜을 뜻한다.  -X proxy_version            Requests that nc should use the specified protocol when talking to the proxy server.  Supported protocols are “4” (SOCKS v.4), “5”            (SOCKS v.5) and “connect” (HTTPS proxy).  If the protocol is not specified, SOCKS version 5 is used.PHPStorm덤으로 PHPStorm과 같은 IntelliJ IDE에서의 설정을 설명한다. 기본적으로 IntelliJ는 Git의 ssh 클라이언트를 Built-in을 사용한다. 이 설정을 Native로 바꿔주면 위에서 설정한 ~/.ssh/config 파일의 설정을 그대로 적용시킬 수 있다. 메뉴의 위치는 “Preference &amp;gt; Version Control &amp;gt; Git”에서 “SSH executable”를 찾으면 된다.위 방법은 ssh의 설정을 이용한 방법이지만 git의 설정한 방법도 있다. 개인적으로 git에 설정하는게 더 복잡해서 그냥 ssh에 설정하는 것을 선택했을 뿐이다.참고글  Tutorial: how to use git through a proxy  Using git through a SOCKS proxy (or SSH tunnel)</summary>
</entry>
</feed>
