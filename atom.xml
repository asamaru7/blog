<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.1">Jekyll</generator>
<link href="http://blog.asamaru.net/atom.xml" rel="self" type="application/atom+xml" />
<link href="http://blog.asamaru.net/" rel="alternate" type="text/html" />
<updated>2016-01-05T23:30:41+09:00</updated>
<id>http://blog.asamaru.net/</id>
<subtitle>세상에 필요한 소스코드 한줄 남기고 가자.
</subtitle>
<author>
<name>유영재</name>
</author>
<entry>
<title>CloudFlare Free Plan</title>
<link href="http://blog.asamaru.net/2016/01/05/cloudflare-free-plan/" rel="alternate" type="text/html" title="CloudFlare Free Plan" />
<published>2016-01-05T23:29:14+09:00</published>
<updated>2016-01-05T23:29:14+09:00</updated>
<id>http://blog.asamaru.net/2016/01/05/cloudflare-free-plan</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/01/05/cloudflare-free-plan/">&lt;p&gt;블로그를 Github Pages를 이용해 운영하면서 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%BD%98%ED%85%90%EC%B8%A0_%EC%A0%84%EC%86%A1_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC&quot;&gt;CDN&lt;/a&gt;을 적용하려고 여러가지를 알아보고 있었다. 사실 Github 자체가 기본적으로 CDN을 사용하고 있는 것으로 안다. &lt;a href=&quot;https://helloanselm.com/2013/use-a-cdn-on-github-pages/&quot;&gt;USE A CDN ON GITHUB PAGES&lt;/a&gt;에서도 그렇게 설명하고 있다. 그리고 이 글에서는 그럼에도 불구하고 CDN을 별도로 붙이는 것이 필요한 이유도 설명하고 있다.&lt;/p&gt;

&lt;p&gt;사실 나의 경우엔 페이지 로딩 속도에 큰 불만이 있는 것이 아니므로 굳이 별도의 CDN을 붙여야 할 이유는 없지만 CDN 적용을 테스트 해보기 위한 용도로 적용을 고려중이었다.&lt;/p&gt;

&lt;p&gt;예전부터 소문으로 들었던 &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt;를 적용해보려고 틈틈이 조사를 해오고 있었다. 사실 장점이야 너무나도 잘 알려져 있으므로 문제가 생길 수 있는 단점 부분을 주로 조사를 하다보니 몇가지 신경쓰이는 것들이 보였다. 우선 이 부분들을 이야기하기 전에 잘 알려진 장점부터 간략히 이야기하고자 한다(관련성이 있어서).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;무료다. 아주 강력한 장점이다. CDN 서비스를 무료로 사용할 수 있다니.&lt;/li&gt;
  &lt;li&gt;대역폭 / 트래픽 제한이 없다.&lt;/li&gt;
  &lt;li&gt;서버 유입 트래픽을 절감해준다.&lt;/li&gt;
  &lt;li&gt;DNS 서비스를 제공한다. 서브 도메인별로 선택적으로 CDN을 적용할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DDoS 공격을 방어해준다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;응답 속도를 높여준다(해외에 서버가 있거나 해외로 서비스 해야하는 경우에 효과적이다).&lt;/li&gt;
  &lt;li&gt;무료 플랜에서도 SSL을 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;서버 정지 상태에서는 캐시된 데이터를 사용해 서비스를 유지시켜 준다.&lt;/li&gt;
  &lt;li&gt;보안 강화. 실제 서비스 서버가 cloudflare 뒤로 숨겨지므로 이에 따른 보안 설정을 통해 보안을 강화할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 외에도 활용 상황/방법에 따라 여러가지가 있을 수 있겠지만 국내에서는 대부분 호스팅 서비스의 트래픽 절감을 위해 가장 많이 사용하는 것으로 보인다.&lt;/p&gt;

&lt;p&gt;그렇다면 단점은 무엇이 있을까? 일반적인 CDN의 용도를 생각한다면 단점은 거의 없다고 본다. 대부분 더 좋은 환경을 위해서 사용하는 부가 요소이니 단점이 많다면 사용할 이유가 없을 것이다. 하지만 cloudflare를 무료로 사용하게 아래와 같은 제약사항이 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;업로드에 제한(100M)이 있다. 무료일 경우에.&lt;/li&gt;
  &lt;li&gt;크롤링 주기가 1주일로 길다.&lt;/li&gt;
  &lt;li&gt;캐싱 정책 설정을 할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 외에도 더 있는지는 모르겠지만 잘 알려진 것은 이 정도다. 그런데 이 정도의 문제라면 정적 리소스에 CDN을 적용하는데에는 큰 제약사항이 되지 않는다.&lt;/p&gt;

&lt;p&gt;하지만 다른 문제들에 대한 이야기가 많이 거론되고 있다. 대표적인 것이 한국에서 접속했음에도 한국 CDN 서버를 사용하지 않고 해외 CDN 서버를 사용해서 서비스가 더 느려지는 경우가 있다는 것이다. “&lt;a href=&quot;https://www.xpressengine.com/qna/22994192&quot;&gt;cloudflare CDN 위치가 원래 오락가락 하나요?&lt;/a&gt;“라는 글에서 사례가 언급되었는데 다른 곳에서도 비슷한 내용들이 보이고 있다. 사실 이 부분에 대해서는 검토가 필요한 부분이라고 생각한다. 요즘 잘나가는 모바일 앱의 서비스가 ip를 조회해보니 cloudflare를 사용하고 있었다. 위 문제가 심각하다면 해당 모바일 앱이 서비스를 운영하는데 문제가 발생 했을텐데 관련 이슈를 본 적이 없다.&lt;/p&gt;

&lt;p&gt;그리고 오늘 다른 부분을 찾아보다가 찾게된 글이 “&lt;a href=&quot;https://blog.ryush00.me/archives/121&quot;&gt;CloudFlare의 DDOS 공격 보호?&lt;/a&gt;“이다. 여기서 보면 익히 알고있는 것과 달리 무료 플랜의 경우엔 DDoS 방어가 제한적이라는 것이다. 실제로 cloudflare의 사이트를 보면 “&lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/200170186-Does-CloudFlare-offer-DDoS-protection-to-Free-and-Pro-plans-&quot;&gt;Does CloudFlare offer DDoS protection to Free and Pro plans?&lt;/a&gt;“라는 글에서 이 부분을 안내하고 있다.&lt;/p&gt;

&lt;p&gt;결론적으로 보자면 cloudflare를 적용하는 것이 옳은 선택이라고 생각된다. 문제가 될 수 있는 이슈가 있지만 적용 사례들을 종합적으로 보자면 현재까지는 cloudflare의 대안을 찾을 수 없다. 단, 무료 사용에 한해서다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;마지막으로 &lt;a href=&quot;https://blog.cloudflare.com/cloudflares-free-cdn-and-you/&quot;&gt;“CloudFlare’s Free CDN and You”&lt;/a&gt;에서 언급된 cloudflare에 대한 설명 중 일부를 참고용으로 발췌하여 아래에 첨부한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;What kind of static content does CloudFlare cache?&lt;/strong&gt;
CloudFlare caches common static content file extensions, including JavaScript, CSS and images. The full list of what CloudFlare caches can be found here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Does CloudFlare cache dynamic content, such as HTML or PHP?&lt;/strong&gt;
CloudFlare does not currently cache these content types.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;간단히 이야기하자면 cloudflare는 html, php와 같은 동적 콘텐츠는 cache하지 않고 JavaScript, CSS, image와 같은 정적 파일만 cache 처리한다는 것이다. 따라서 적용 도메인에 정적 콘텐츠와 동적 콘텐츠가 섞여 있더라도 알아서 구분하여 처리한다는 뜻이다.
정적 콘텐츠에 해당하는 파일 확장자 리스트는 &lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/200172516-What-file-extensions-does-CloudFlare-cache-for-static-content-&quot;&gt;Which file extensions does CloudFlare cache for static content?&lt;/a&gt;에 안내되어 있다.&lt;/p&gt;

&lt;p&gt;하지만 필요하다면 cloudflare Page Rule을 사용해서 cache 하도록 지정할 수 있다고 한다(HTTP header를 설정을 통해 cache를 지정할 수 있다는 이야기도 있으나 정확한 메뉴얼을 아직 찾지 못했다).&lt;/p&gt;
</content>
<summary>블로그를 Github Pages를 이용해 운영하면서 CDN을 적용하려고 여러가지를 알아보고 있었다. 사실 Github 자체가 기본적으로 CDN을 사용하고 있는 것으로 안다. USE A CDN ON GITHUB PAGES에서도 그렇게 설명하고 있다. 그리고 이 글에서는 그럼에도 불구하고 CDN을 별도로 붙이는 것이 필요한 이유도 설명하고 있다.사실 나의 경우엔 페이지 로딩 속도에 큰 불만이 있는 것이 아니므로 굳이 별도의 CDN을 붙여야 할 이유는 없지만 CDN 적용을 테스트 해보기 위한 용도로 적용을 고려중이었다.예전부터 소문으로 들었던 CloudFlare를 적용해보려고 틈틈이 조사를 해오고 있었다. 사실 장점이야 너무나도 잘 알려져 있으므로 문제가 생길 수 있는 단점 부분을 주로 조사를 하다보니 몇가지 신경쓰이는 것들이 보였다. 우선 이 부분들을 이야기하기 전에 잘 알려진 장점부터 간략히 이야기하고자 한다(관련성이 있어서).  무료다. 아주 강력한 장점이다. CDN 서비스를 무료로 사용할 수 있다니.  대역폭 / 트래픽 제한이 없다.  서버 유입 트래픽을 절감해준다.  DNS 서비스를 제공한다. 서브 도메인별로 선택적으로 CDN을 적용할 수 있다.  DDoS 공격을 방어해준다.  응답 속도를 높여준다(해외에 서버가 있거나 해외로 서비스 해야하는 경우에 효과적이다).  무료 플랜에서도 SSL을 사용할 수 있다.  서버 정지 상태에서는 캐시된 데이터를 사용해 서비스를 유지시켜 준다.  보안 강화. 실제 서비스 서버가 cloudflare 뒤로 숨겨지므로 이에 따른 보안 설정을 통해 보안을 강화할 수 있다.이 외에도 활용 상황/방법에 따라 여러가지가 있을 수 있겠지만 국내에서는 대부분 호스팅 서비스의 트래픽 절감을 위해 가장 많이 사용하는 것으로 보인다.그렇다면 단점은 무엇이 있을까? 일반적인 CDN의 용도를 생각한다면 단점은 거의 없다고 본다. 대부분 더 좋은 환경을 위해서 사용하는 부가 요소이니 단점이 많다면 사용할 이유가 없을 것이다. 하지만 cloudflare를 무료로 사용하게 아래와 같은 제약사항이 존재한다.  업로드에 제한(100M)이 있다. 무료일 경우에.  크롤링 주기가 1주일로 길다.  캐싱 정책 설정을 할 수 없다.이 외에도 더 있는지는 모르겠지만 잘 알려진 것은 이 정도다. 그런데 이 정도의 문제라면 정적 리소스에 CDN을 적용하는데에는 큰 제약사항이 되지 않는다.하지만 다른 문제들에 대한 이야기가 많이 거론되고 있다. 대표적인 것이 한국에서 접속했음에도 한국 CDN 서버를 사용하지 않고 해외 CDN 서버를 사용해서 서비스가 더 느려지는 경우가 있다는 것이다. “cloudflare CDN 위치가 원래 오락가락 하나요?“라는 글에서 사례가 언급되었는데 다른 곳에서도 비슷한 내용들이 보이고 있다. 사실 이 부분에 대해서는 검토가 필요한 부분이라고 생각한다. 요즘 잘나가는 모바일 앱의 서비스가 ip를 조회해보니 cloudflare를 사용하고 있었다. 위 문제가 심각하다면 해당 모바일 앱이 서비스를 운영하는데 문제가 발생 했을텐데 관련 이슈를 본 적이 없다.그리고 오늘 다른 부분을 찾아보다가 찾게된 글이 “CloudFlare의 DDOS 공격 보호?“이다. 여기서 보면 익히 알고있는 것과 달리 무료 플랜의 경우엔 DDoS 방어가 제한적이라는 것이다. 실제로 cloudflare의 사이트를 보면 “Does CloudFlare offer DDoS protection to Free and Pro plans?“라는 글에서 이 부분을 안내하고 있다.결론적으로 보자면 cloudflare를 적용하는 것이 옳은 선택이라고 생각된다. 문제가 될 수 있는 이슈가 있지만 적용 사례들을 종합적으로 보자면 현재까지는 cloudflare의 대안을 찾을 수 없다. 단, 무료 사용에 한해서다.마지막으로 “CloudFlare’s Free CDN and You”에서 언급된 cloudflare에 대한 설명 중 일부를 참고용으로 발췌하여 아래에 첨부한다.  What kind of static content does CloudFlare cache?CloudFlare caches common static content file extensions, including JavaScript, CSS and images. The full list of what CloudFlare caches can be found here.  Does CloudFlare cache dynamic content, such as HTML or PHP?CloudFlare does not currently cache these content types.간단히 이야기하자면 cloudflare는 html, php와 같은 동적 콘텐츠는 cache하지 않고 JavaScript, CSS, image와 같은 정적 파일만 cache 처리한다는 것이다. 따라서 적용 도메인에 정적 콘텐츠와 동적 콘텐츠가 섞여 있더라도 알아서 구분하여 처리한다는 뜻이다.정적 콘텐츠에 해당하는 파일 확장자 리스트는 Which file extensions does CloudFlare cache for static content?에 안내되어 있다.하지만 필요하다면 cloudflare Page Rule을 사용해서 cache 하도록 지정할 수 있다고 한다(HTTP header를 설정을 통해 cache를 지정할 수 있다는 이야기도 있으나 정확한 메뉴얼을 아직 찾지 못했다).</summary>
</entry>
<entry>
<title>composer 사용시 github token을 요구할 때</title>
<link href="http://blog.asamaru.net/2016/01/05/composer-github-token/" rel="alternate" type="text/html" title="composer 사용시 github token을 요구할 때" />
<published>2016-01-05T21:26:29+09:00</published>
<updated>2016-01-05T21:26:29+09:00</updated>
<id>http://blog.asamaru.net/2016/01/05/composer-github-token</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/01/05/composer-github-token/">&lt;p&gt;php &lt;a href=&quot;https://getcomposer.org/&quot;&gt;composer&lt;/a&gt;를 사용해서 의존성 모듈을 설치하려고 할 때 아래와 같이 Token을 요구하는 경우가 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer update
Loading composer repositories with package information
Cloning failed using an ssh key &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; authentication, enter your GitHub credentials to access private repos
Head to https://github.com/settings/tokens/new?scopes&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;repo&lt;span class=&quot;p&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Composer+on+dev.vagrant.startupbridgeva.com+2015-12-30+0812
to retrieve a token. It will be stored in &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/web/.composer/auth.json&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; future use by Composer.
Token &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;hidden&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;여기서의 Token은 github에서 생성한 &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Personal access tokens&lt;/a&gt;을 넣으라는 것이다. 사실 대부분의 경우엔 여기서 그냥 Enter를 눌러도 설치가 된다(원래 그런 것인지는 몰라도 나의 경우엔 되는 경우가 많았다). 그런데 간혹 오류를 내면서 설치가 중단되는 경우가 있다. 사실 중단되지 않더라도 앞으로도 계속 물어보므로 그냥 한번 입력하는 것이 낫다.&lt;/p&gt;

&lt;p&gt;우선 Github의 &lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Personal access tokens&lt;/a&gt;에 가면 기존에 생성된 token이 목록으로 표시된다. 그런데 기존에 생성된 token은 그 값을 볼 수가 없고 수정(Edit)에서 재생성하거나 권한을 변경하거나 삭제하는 기능만 제공된다. 사실 이 token은 여러 개를 만들어도 상관없으므로 기존 token을 모른다면 상단에 “Generate new token”을 눌러서 그냥 새로 생성하면 된다. 권한도 기본 설정 상태로 만들어도 Composer를 사용하는데는 문제가 없다. 어쨌든 새로 생성하고 나면 token을 보여주는데 이 값을 복사해서 composer에 입력하면 된다. (hidden)이라고 표시된 것과 같이 입력값이 보이지 않지만 붙여넣기를 하면 입력된 것이므로 Enter를 누르면 된다.&lt;/p&gt;

&lt;p&gt;이렇게 한번 넣어주고 나면 앞으로는 물어보지 않는다. 이유는 Composer가 입력한 token 값을 &lt;code&gt;auth.json&lt;/code&gt; 파일로 저장해주기 때문이다. 해당 파일을 열어보면 아래와 같이 저장되어 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;github-oauth&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;github.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[입력한 token]&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;사실 이 방법은 Composer가 요청 시에 입력해주는 방식이었고 &lt;a href=&quot;https://github.com/composer/composer/issues/3609&quot;&gt;auth.json refers to “github.com” instead of “api.github.com” for authenticated api calls&lt;/a&gt;에 언급된 것처럼 미리 설정해 두는 것도 가능하다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;composer config -g --unset github-oauth.api.github.com
composer config -g github-oauth.github.com TOKEN
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;여기서 &lt;code&gt;-g&lt;/code&gt; 옵션은 global 설정으로 지정하는 것인데 현재 프로젝트에만 지정하고 싶다면 &lt;code&gt;-g&lt;/code&gt;를 빼면 된다(나의 경우엔 &lt;code&gt;-g&lt;/code&gt; 옵션 사용시 &lt;code&gt;~/.composer/auth.json&lt;/code&gt;에 해당 내용이 추가되긴 했는데 계속 Token을 물어봐서 local에 그냥 추가했다).&lt;/p&gt;
</content>
<summary>php composer를 사용해서 의존성 모듈을 설치하려고 할 때 아래와 같이 Token을 요구하는 경우가 있다.123456$ composer updateLoading composer repositories with package informationCloning failed using an ssh key for authentication, enter your GitHub credentials to access private reposHead to https://github.com/settings/tokens/new?scopes=repo&amp;amp;description=Composer+on+dev.vagrant.startupbridgeva.com+2015-12-30+0812to retrieve a token. It will be stored in &amp;quot;/home/web/.composer/auth.json&amp;quot; for future use by Composer.Token (hidden):여기서의 Token은 github에서 생성한 Personal access tokens을 넣으라는 것이다. 사실 대부분의 경우엔 여기서 그냥 Enter를 눌러도 설치가 된다(원래 그런 것인지는 몰라도 나의 경우엔 되는 경우가 많았다). 그런데 간혹 오류를 내면서 설치가 중단되는 경우가 있다. 사실 중단되지 않더라도 앞으로도 계속 물어보므로 그냥 한번 입력하는 것이 낫다.우선 Github의 Personal access tokens에 가면 기존에 생성된 token이 목록으로 표시된다. 그런데 기존에 생성된 token은 그 값을 볼 수가 없고 수정(Edit)에서 재생성하거나 권한을 변경하거나 삭제하는 기능만 제공된다. 사실 이 token은 여러 개를 만들어도 상관없으므로 기존 token을 모른다면 상단에 “Generate new token”을 눌러서 그냥 새로 생성하면 된다. 권한도 기본 설정 상태로 만들어도 Composer를 사용하는데는 문제가 없다. 어쨌든 새로 생성하고 나면 token을 보여주는데 이 값을 복사해서 composer에 입력하면 된다. (hidden)이라고 표시된 것과 같이 입력값이 보이지 않지만 붙여넣기를 하면 입력된 것이므로 Enter를 누르면 된다.이렇게 한번 넣어주고 나면 앞으로는 물어보지 않는다. 이유는 Composer가 입력한 token 값을 auth.json 파일로 저장해주기 때문이다. 해당 파일을 열어보면 아래와 같이 저장되어 있다.12345{    &amp;quot;github-oauth&amp;quot;: {        &amp;quot;github.com&amp;quot;: &amp;quot;[입력한 token]&amp;quot;    }}사실 이 방법은 Composer가 요청 시에 입력해주는 방식이었고 auth.json refers to “github.com” instead of “api.github.com” for authenticated api calls에 언급된 것처럼 미리 설정해 두는 것도 가능하다.12composer config -g --unset github-oauth.api.github.comcomposer config -g github-oauth.github.com TOKEN여기서 -g 옵션은 global 설정으로 지정하는 것인데 현재 프로젝트에만 지정하고 싶다면 -g를 빼면 된다(나의 경우엔 -g 옵션 사용시 ~/.composer/auth.json에 해당 내용이 추가되긴 했는데 계속 Token을 물어봐서 local에 그냥 추가했다).</summary>
</entry>
<entry>
<title>git [fatal: index file smaller than expected] 오류</title>
<link href="http://blog.asamaru.net/2016/01/05/git-status-fatal-index-file-smaller-than-expected/" rel="alternate" type="text/html" title="git [fatal: index file smaller than expected] 오류" />
<published>2016-01-05T21:00:02+09:00</published>
<updated>2016-01-05T21:00:02+09:00</updated>
<id>http://blog.asamaru.net/2016/01/05/git-status-fatal-index-file-smaller-than-expected</id>
<content type="html" xml:base="http://blog.asamaru.net/2016/01/05/git-status-fatal-index-file-smaller-than-expected/">&lt;p&gt;git를 사용하다 보면 여러가지 이유로 아래와 같은 오류를 만날 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git status
fatal: index file smaller than expected
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이 경우는 git의 index가 훼손된 상태로 size가 0인 경우가 많다.
해결 방법은 훼손된 index를 복구해야 하는데 사실상 복구는 거의 힘들고 대부분 새로 생성해야 한다.&lt;/p&gt;

&lt;p&gt;대부분은 아래의 방법을 제시하는 경우가 많다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;rm .git/index
git add .
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;그런데 위 방법으로 하면 변경 상태가 제대로 복구되지 않고 모두 new로 추가되는 경우가 있다. 따라서 변경 상태를 유지하면서 복구하려면 아래의 방법을 사용한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm .git/index  
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset HEAD .
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;위 방법들을 적용하기 전에 소스 데이터를 백업하길 권장한다.&lt;/strong&gt; 혹시라도 index가 정상적으로 복구되지 않는다면 새로 clone을 받아서 소스 데이터를 복사해주는 방식으로 복구하는 수 밖에 없기 때문이다(내가 아는 범위 내에선).&lt;/p&gt;
</content>
<summary>git를 사용하다 보면 여러가지 이유로 아래와 같은 오류를 만날 수 있다.12$ git statusfatal: index file smaller than expected이 경우는 git의 index가 훼손된 상태로 size가 0인 경우가 많다.해결 방법은 훼손된 index를 복구해야 하는데 사실상 복구는 거의 힘들고 대부분 새로 생성해야 한다.대부분은 아래의 방법을 제시하는 경우가 많다.12rm .git/indexgit add .그런데 위 방법으로 하면 변경 상태가 제대로 복구되지 않고 모두 new로 추가되는 경우가 있다. 따라서 변경 상태를 유지하면서 복구하려면 아래의 방법을 사용한다.12$ rm .git/index  $ git reset HEAD .위 방법들을 적용하기 전에 소스 데이터를 백업하길 권장한다. 혹시라도 index가 정상적으로 복구되지 않는다면 새로 clone을 받아서 소스 데이터를 복사해주는 방식으로 복구하는 수 밖에 없기 때문이다(내가 아는 범위 내에선).</summary>
</entry>
<entry>
<title>tar를 이용한 증분 백업 / 복원 + atime-preserve</title>
<link href="http://blog.asamaru.net/2015/12/24/using-tar-for-differential-backup-with-atime-preserve/" rel="alternate" type="text/html" title="tar를 이용한 증분 백업 / 복원 + atime-preserve" />
<published>2015-12-24T21:45:15+09:00</published>
<updated>2015-12-24T21:45:15+09:00</updated>
<id>http://blog.asamaru.net/2015/12/24/using-tar-for-differential-backup-with-atime-preserve</id>
<content type="html" xml:base="http://blog.asamaru.net/2015/12/24/using-tar-for-differential-backup-with-atime-preserve/">&lt;p&gt;서버를 운영하면서 가장 중요한 부분을 꼽으라면 백업을 꼽을 것이다. 안정적인 서버의 운영도 중요한 문제지만 소중한 데이터를 보호하는 것은 더 중요한 문제이다. 백업의 방법은 다양하다. RAID를 이용한 백업, sync를 통한 원격 백업, 파일을 압축해서 보관하는 백업, 백업 장비를 이용한 백업 등 많은 종류의 방법이 존재한다. 하지만 나는 백업의 방법 보다 백업 정책이 더 중요하다고 생각한다. 그중에서도 가장 중요한 원칙은 백업본은 원본 데이터와 함께 두지 않는다는 것이다. 다시말해 백업본은 원격지로 보내서 보관하여 원본 데이터가 있는 장소가 복구 불가능한 상황이 되더라도 데이터를 살릴 수 있어야 한다는 것이다. 나의 경우엔 다음과 같은 방식으로 백업본을 관리한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;원본 데이터를 해당 서버에서 1차 백업&lt;/li&gt;
  &lt;li&gt;백업된 데이터를 백업 서버로 sync하여 2차 백업&lt;/li&gt;
  &lt;li&gt;백업 서버의 데이터를 원격지 백업 서버로 sync하여 3차 백업&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 정책이 최선이라는 것은 아니지만 나에게 주어진 여건 내에서 할 수 있는 나름의 최선이라고 생각한다. 비용의 여유가 있다면 백업 솔루션을 사용하는 것이 더욱 좋겠지만 아직은 여건이 안된다.&lt;/p&gt;

&lt;p&gt;이 글에서 다루고자하는 이야기는 1차 백업(원본 데이터 보관 서버 내 백업)시 증분 백업을 적용하는 부분이다. 증분 백업은 최종 백업된 상태 이후로 변경된 사항만 다시 백업하는 방식으로 full 백업에 비해 자원 소모가 적다. 그렇다고 지속적인 증분 백업만 할 수는 없으므로(복원 과정이 너무 길어질 수 있고 데이터의 손실 위험이 있을 수 있으므로) 나의 경우엔 일요일 새벽에 full 백업을 하고 주간 동안에는 증분 백업을 시행한다.&lt;/p&gt;

&lt;p&gt;이러한 일련의 과정에서 가장 중요한 역할을 하는 것이 &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;tar&lt;/a&gt;다. 다른 압축 프로그램들을 사용할 수도 있지만 대부분의 서버에서 기본적으로 설치하는 &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;tar&lt;/a&gt;를 사용하는 것이 가장 범용적이라 나는 &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;tar&lt;/a&gt;를 압축 백업에 사용한다.&lt;/p&gt;

&lt;p&gt;참고로 여기서는 &lt;a href=&quot;https://www.gnu.org/software/tar/&quot;&gt;tar&lt;/a&gt;의 기본적인 사용법에 대해서는 다루지 않는다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;증분 백업의 원리에 대해서는 &lt;a href=&quot;http://www.gnu.org/software/tar/manual/html_node/Incremental-Dumps.html&quot;&gt;Using tar to Perform Incremental Dumps&lt;/a&gt;와 &lt;a href=&quot;https://gist.github.com/bdsatish/5650700&quot;&gt;bdsatish/gist:5650700 - Differential backups&lt;/a&gt;를 참고하면 도움이 될 것이다. 그리고 &lt;a href=&quot;http://apfelboymchen.net/gnu/scripte/backup/&quot;&gt;incremental backups with tar&lt;/a&gt;에는 기본적인 설명과 증분 백업용 스크립트를 안내하고 있다(참고만 하자).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그리고 미리 한가지를 설명할 것이 있다. 이것은 증분 백업과 직접적인 상관이 있는 것은 아니지만 필요한 경우가 있다. 그것은 다름이 아니라 백업시 파일의 atime을 보존하는 것이다. atime에 대해서는 &lt;a href=&quot;http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime&quot;&gt;Difference between mtime, ctime and atime&lt;/a&gt;를 참고하면 되는데 간단히 이야기하자면 해당 파일의 최종 access time을 뜻한다. 그렇다면 이게 백업과 무슨 상관이 있을까? tar를 사용해서 파일을 압축하면 atime이 압축 시점으로 변경된다. 그런데 백업을 하면서 atime은 그대로 보존해야 할 수도 있다. 예를들면 cache 파일의 경우 오랫동안 access가 없는 경우 삭제하는 것이 효율이 높이는 방법이므로 삭제시 검사를 위해 atime을 유지해야 한다. 그렇지 않으면 백업할 때마다 최종 access 시점이 변경되면서 언제 실제 access가 일어났었는지 확인할 수 없게 된다. 이 부분은 예시일 뿐이므로 그렇다고만 생각하자. 실제로 파일 access가 많은 곳에서는 성능을 높이기 위해 access time을 기록하지 않도록 설정하기 때문이다. 게다가 cache 파일은 손실되어도 문제가 되지 않으므로 백업에서 아예 제외하는 것이 맞을 것이다.&lt;/p&gt;

&lt;p&gt;어쨌든 어떠한 목적으로 인해 백업시 atime을 유지하고자 한다면 tar 사용시 &lt;code&gt;--atime-preserve&lt;/code&gt; 옵션을 주면 된다. 자세한 설명은 &lt;a href=&quot;https://www.gnu.org/software/tar/manual/html_section/tar_70.html&quot;&gt;GNU tar: an archiver tool - 8.2 Handling File Attributes&lt;/a&gt;을 참고하자. 그런데 이 옵션을 사용할 경우 유의할 점이 하나 있다. &lt;code&gt;--atime-preserve&lt;/code&gt;을 그냥 사용하면 &lt;code&gt;--atime-preserve=replace&lt;/code&gt;로 동작하는데 이 경우는 증분 백업이 정상적으로 되지 않는다(계속 full 백업이 일어난다). 이 옵션은 대부분의 시스템에서 동작하나 증분 백업이 정상적이지 않을 수 있다고 &lt;a href=&quot;https://www.gnu.org/software/tar/manual/html_section/tar_70.html&quot;&gt;메뉴얼&lt;/a&gt;에도 설명하고 있다. 그러면 atime을 유지하면서 증분 백업을 하려면 어떻게 해야하나? &lt;code&gt;--atime-preserve=system&lt;/code&gt; 옵션을 사용하면 된다. 이 옵션에 대해서도 &lt;a href=&quot;https://www.gnu.org/software/tar/manual/html_section/tar_70.html&quot;&gt;메뉴얼&lt;/a&gt;에 나와 있는데 시스템에 따라서 지원하지 않을 수도 있다고하니 유의하자(CentOS 7에서는 정상 동작했다).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이제부터는 증분 백업에 대해서 본격적으로 알아보자. 그런데 사실은 아주 간단하다. &lt;code&gt;-g&lt;/code&gt; 옵션을 사용해서 백업 파일에 대한 기록을 남겨서 보관하는 것만 추가하면 기존의 tar 압축과 다를 것이 없다. 예를들어 아래의 스크립트를 보자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;tar -g backup.snap -zcf backup.tgz /backup/target/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위처럼 실행을 하면 &lt;code&gt;/backup/target/&lt;/code&gt; 폴더를 &lt;code&gt;backup.tgz&lt;/code&gt;로 압축해준다. 그런데 일반 압축과의 차이는 &lt;code&gt;backup.snap&lt;/code&gt;라는 파일이 하나 더 생긴다는 것이다. 이 파일은 압축한 파일들의 정보로 이후 증분 백업시 데이터로 사용되므로 보관해야 한다.&lt;/p&gt;

&lt;p&gt;방금했던 압축은 증분이 아닌 full 백업이다. &lt;code&gt;-g&lt;/code&gt; 옵션으로 넘겨주는 데이터가 없다면 이전 백업을 확인할 수 없으므로 full 백업을 한다. 자.. 이제 다시 아래의 스크립트를 보자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;cp backup.snap backup-1.snap
tar -g backup-1.snap -zcf backup-1.tgz /backup/target/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이번에도 최초의 full 백업과 별반 다르지 않다. 다만, snapshot 파일을 복사해서 사용했다는 차이만 있다. &lt;code&gt;-g&lt;/code&gt; 옵션을 사용하면 백업시 참조만 하는 것이 아니라 이번 백업의 정보를 보관하므로 내용을 덮어쓰지 않도록 복사해서 사용한 것이다. 위 과정을 통해 압축한 결과 파일들을 보면 &lt;code&gt;backup.tgz&lt;/code&gt;는 용량이 커도 &lt;code&gt;backup-1.tgz&lt;/code&gt;는 용량이 적을 것이다(대상 폴더에 파일이 거의 없었다면 별반 차이가 나지 않을 수 있다). &lt;code&gt;backup-1.tgz&lt;/code&gt;는 증분 백업된 파일이기 때문이다.&lt;/p&gt;

&lt;p&gt;마지막으로 이 상태에서 다시 증분 백업하는 것을 한번만 더 보자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;cp backup-1.snap backup-2.snap
tar -g backup-2.snap -zcf backup-2.tgz /backup/target/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;굳이 설명하지 않아도 보면 이해가 될 것이다. 그럼에도 한번 더 적는 이유는 &lt;code&gt;cp backup.snap backup-2.snap&lt;/code&gt; 처럼 최초 snapshot에서 시작해야 하는지 마지막 snapshot에서 시작해야 하는지 헛갈릴 수 있기 때문이다. 사실 이 부분은 증분 백업 방식에 따라 차이가 나는 부분인데 뒤에 자세히 설명할 것이므로 일단은 그렇다고 생각하자.&lt;/p&gt;

&lt;p&gt;이로써 증분 백업에 대한 기본적인 설명이 끝났다. 생각보다 아주 간단하다. 하지만 이해를 돕기 위해 아래에 예시를 하나 첨부한다.&lt;/p&gt;

&lt;p&gt;우선 백업 과정이다. 이후의 예시들은 명령 중간 중간에 &lt;code&gt;ls -al&lt;/code&gt; 등으로 &lt;code&gt;test&lt;/code&gt; 폴더의 상태를 확인해 가면서 진행하면 이해가 더 쉬울 것이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;mkdir &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/1.txt
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/2.txt

tar -g backup.snap -zcf backup.tgz ./test/

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/3.txt
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/4.txt

cp backup.snap backup-1.snap
tar -g backup-1.snap -zcf backup-1.tgz ./test/

rm -f &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/4.txt

cp backup-1.snap backup-2.snap
tar -g backup-2.snap -zcf backup-2.tgz ./test/

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/5.txt
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/6.txt

cp backup-2.snap backup-3.snap
tar -g backup-3.snap -zcf backup-3.tgz ./test/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이번엔 증분 백업된 내용에서 복원하는 과정이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# 복원 과정을 확인하기 위해 백업한 폴더는 일단 지운다.&lt;/span&gt;
rm -rf &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;

tar zxvf backup-0.tgz
ls -al ./test/

tar --incremental -zxvf backup-1.tgz
ls -al ./test/

tar --incremental -zxvf backup-2.tgz
ls -al ./test/

tar --incremental -zxvf backup-3.tgz
ls -al ./test/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;그런데 이상하게 보이는 부분이 있을 수 있다. 압축할 때 사용했던 snapshot 파일을 복원시에는 사용하지 않는다는 것이다. 대신에 &lt;code&gt;--incremental&lt;/code&gt;를 사용하고 있다. 이게 가능한 이유는 tgz 파일이 이미 자신에게 필요한 정보를 모두 가지고 있기 때문이다. 단, 정상적인 복원를 위해서는 백업한 순서대로 복원해야 한다. 그리고 &lt;code&gt;--incremental&lt;/code&gt; 대신 &lt;code&gt;--listed-incremental=/dev/null&lt;/code&gt;를 사용해도 무방하다. 그리고 이 부분에 대해서는 유의할 점이 한가지 있다. 다른 대부분의 설명글에 보면 snapshot 파일을 복원시에 사용한다. 그럼에도 불구하고 내가 이렇게 설명하는 것은 &lt;a href=&quot;https://www.gnu.org/software/tar/manual/html_section/tar_70.html&quot;&gt;메뉴얼&lt;/a&gt;에 동일하게 나와있으며 위 실험 결과를 보면 알 수 있듯이 정상 동작하기 때문이다. 하지만 tar의 버전에 따른 차이일 수도 있으니 유의하자.&lt;/p&gt;

&lt;p&gt;자.. 다시 백업 과정을 한번 생각해보자. 복원시에 snapshot 파일이 필요하지 않다면 굳이 백업시마다 snapshot 파일을 복사하거나 하지 않고 계속 같은 파일을 덮어쓰도록 하면 안될까? 결론부터 이야기 하자면 당연히 가능하다. 그럼 굳이 복사를 했던 이유는 뭘까? 이 부분은 증분 백업의 방법 중 level을 증가시키면서 백업하는 방법을 보여주기 위해서였다. 따라서 이 방법에서는 &lt;code&gt;backup.snap&lt;/code&gt; 파일을 다음 백업에서도 사용해도 된다. 데이터를 덮어쓰겠지만 어짜피 level을 증가시키면서 백업하는 것이므로 상관없다.&lt;/p&gt;

&lt;p&gt;이번엔 level-0와 level-1만 생성하는 백업 과정을 한번 보자. 이를 예를들어 설명하자면 다음과 같다. 최초에 full 백업(level-0) 한다. 다음 백업에서 증분 백업(level-1)으로 백업한다. 여기까지는 위의 방식과 같다. 하지만 이 다음부터 다르다. 위의 방법에서는 그 다음 백업은 level-1 상태를 기초로 level-2로 백업했다. 하지만 이 방법에서는 다시 level-0에서 level-1을 백업한다. 따라서 기존에 level-1 백업 파일은 필요가 없다. 아래의 스크립트를 보자.&lt;/p&gt;

&lt;p&gt;이전 백업 방법과 유사하지만 자세히 보면 다른 백업 과정이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;rm -rf *
mkdir &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/1.txt
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/2.txt

tar -g backup-0.snap -zcf backup-0.tgz ./test/

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/3.txt
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/4.txt

cp backup-0.snap backup-1.snap
tar -g backup-1.snap -zcf backup-1.tgz ./test/
rm -f backup-1.snap

rm -f &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/4.txt

cp backup-0.snap backup-1.snap
tar -g backup-1.snap -zcf backup-2.tgz ./test/
rm -f backup-1.snap

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/5.txt
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;6&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/6.txt

cp backup-0.snap backup-1.snap
tar -g backup-1.snap -zcf backup-3.tgz ./test/
rm -f backup-1.snap
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;자세히 보면 알겠지만 항상 &lt;code&gt;backup-0.snap&lt;/code&gt; 파일을 기준으로 증분 백업을 하고 있다. 자세한 설명은 아래의 복원 과정을 보고 설명하겠다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;rm -rf &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;

tar zxvf backup-0.tgz
ls -al ./test/

tar --incremental -zxvf backup-3.tgz
ls -al ./test/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;복원 과정이 이전 방법에 비해 대폭 줄었다. 최초 백업본(full 백업)을 복원하고 중간 단계없이 바로 마지막 백업본으로 복원하고 있다. 결과를 보면 알겠지만 정상적으로 복원되었다. 어떻게 이게 가능할까? 앞서 설명했던 것과 같이 이 방법은 증분 백업을 항상 최초 백업본을 기준으로 증분 백업을 했으므로 최초와 마지막 백업본만 있으면 복구가 가능하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;짧게 설명하려던 것이 어쩌다보니 길어졌다. 그렇지만 정확한 내용이 전달되었을지 모르겠다. 나름 예시를 들어 설명한다고 했는데.&lt;/p&gt;

&lt;p&gt;요약하자면 이렇다. tar를 이용한 증분 백업은 2가지가 있다. 지속적 증분 백업(level 0~max)과 1차 증분 백업(level 0~1). 이 이름들은 정식 명칭이 아니라 그냥 내가 설명하려고 붙인 이름이다.
지속적 증분 백업은 용량 효율이 좋을 수 있으나 복원 과정에서 모든 백업본이 필요하다. 그리고 원하는 지점까지만 복원하는 것이 가능하고 지속적인 변경만 백업하므로 효율(시간/공간)이 높다.&lt;/p&gt;

&lt;p&gt;그러나 1차 증분 백업은 최초 백업과 마지막 백업만 있으면 복원이 가능하므로 관리가 용이하나 중간 지점으로의 복원이 불가능(중간 백업본도 모두 유지한다면 가능)하며 효율이 떨어질 수 있다.&lt;/p&gt;

&lt;p&gt;그런데 이런 차이는 상황에 따라 다를 수 있으므로 차이를 이해하고 선택적으로 사용하면 된다. 그리고 내용이 길어질까봐 압축/복원시 사용하는 옵션들의 사용법에 대해서는 설명하지 않았으니 메뉴얼을 참고하자. 압축/복원시 다양한 옵션을 활용하면 보다 정교한 백업을 할 수 있다.&lt;/p&gt;
</content>
<summary>서버를 운영하면서 가장 중요한 부분을 꼽으라면 백업을 꼽을 것이다. 안정적인 서버의 운영도 중요한 문제지만 소중한 데이터를 보호하는 것은 더 중요한 문제이다. 백업의 방법은 다양하다. RAID를 이용한 백업, sync를 통한 원격 백업, 파일을 압축해서 보관하는 백업, 백업 장비를 이용한 백업 등 많은 종류의 방법이 존재한다. 하지만 나는 백업의 방법 보다 백업 정책이 더 중요하다고 생각한다. 그중에서도 가장 중요한 원칙은 백업본은 원본 데이터와 함께 두지 않는다는 것이다. 다시말해 백업본은 원격지로 보내서 보관하여 원본 데이터가 있는 장소가 복구 불가능한 상황이 되더라도 데이터를 살릴 수 있어야 한다는 것이다. 나의 경우엔 다음과 같은 방식으로 백업본을 관리한다.  원본 데이터를 해당 서버에서 1차 백업  백업된 데이터를 백업 서버로 sync하여 2차 백업  백업 서버의 데이터를 원격지 백업 서버로 sync하여 3차 백업위 정책이 최선이라는 것은 아니지만 나에게 주어진 여건 내에서 할 수 있는 나름의 최선이라고 생각한다. 비용의 여유가 있다면 백업 솔루션을 사용하는 것이 더욱 좋겠지만 아직은 여건이 안된다.이 글에서 다루고자하는 이야기는 1차 백업(원본 데이터 보관 서버 내 백업)시 증분 백업을 적용하는 부분이다. 증분 백업은 최종 백업된 상태 이후로 변경된 사항만 다시 백업하는 방식으로 full 백업에 비해 자원 소모가 적다. 그렇다고 지속적인 증분 백업만 할 수는 없으므로(복원 과정이 너무 길어질 수 있고 데이터의 손실 위험이 있을 수 있으므로) 나의 경우엔 일요일 새벽에 full 백업을 하고 주간 동안에는 증분 백업을 시행한다.이러한 일련의 과정에서 가장 중요한 역할을 하는 것이 tar다. 다른 압축 프로그램들을 사용할 수도 있지만 대부분의 서버에서 기본적으로 설치하는 tar를 사용하는 것이 가장 범용적이라 나는 tar를 압축 백업에 사용한다.참고로 여기서는 tar의 기본적인 사용법에 대해서는 다루지 않는다.증분 백업의 원리에 대해서는 Using tar to Perform Incremental Dumps와 bdsatish/gist:5650700 - Differential backups를 참고하면 도움이 될 것이다. 그리고 incremental backups with tar에는 기본적인 설명과 증분 백업용 스크립트를 안내하고 있다(참고만 하자).그리고 미리 한가지를 설명할 것이 있다. 이것은 증분 백업과 직접적인 상관이 있는 것은 아니지만 필요한 경우가 있다. 그것은 다름이 아니라 백업시 파일의 atime을 보존하는 것이다. atime에 대해서는 Difference between mtime, ctime and atime를 참고하면 되는데 간단히 이야기하자면 해당 파일의 최종 access time을 뜻한다. 그렇다면 이게 백업과 무슨 상관이 있을까? tar를 사용해서 파일을 압축하면 atime이 압축 시점으로 변경된다. 그런데 백업을 하면서 atime은 그대로 보존해야 할 수도 있다. 예를들면 cache 파일의 경우 오랫동안 access가 없는 경우 삭제하는 것이 효율이 높이는 방법이므로 삭제시 검사를 위해 atime을 유지해야 한다. 그렇지 않으면 백업할 때마다 최종 access 시점이 변경되면서 언제 실제 access가 일어났었는지 확인할 수 없게 된다. 이 부분은 예시일 뿐이므로 그렇다고만 생각하자. 실제로 파일 access가 많은 곳에서는 성능을 높이기 위해 access time을 기록하지 않도록 설정하기 때문이다. 게다가 cache 파일은 손실되어도 문제가 되지 않으므로 백업에서 아예 제외하는 것이 맞을 것이다.어쨌든 어떠한 목적으로 인해 백업시 atime을 유지하고자 한다면 tar 사용시 --atime-preserve 옵션을 주면 된다. 자세한 설명은 GNU tar: an archiver tool - 8.2 Handling File Attributes을 참고하자. 그런데 이 옵션을 사용할 경우 유의할 점이 하나 있다. --atime-preserve을 그냥 사용하면 --atime-preserve=replace로 동작하는데 이 경우는 증분 백업이 정상적으로 되지 않는다(계속 full 백업이 일어난다). 이 옵션은 대부분의 시스템에서 동작하나 증분 백업이 정상적이지 않을 수 있다고 메뉴얼에도 설명하고 있다. 그러면 atime을 유지하면서 증분 백업을 하려면 어떻게 해야하나? --atime-preserve=system 옵션을 사용하면 된다. 이 옵션에 대해서도 메뉴얼에 나와 있는데 시스템에 따라서 지원하지 않을 수도 있다고하니 유의하자(CentOS 7에서는 정상 동작했다).이제부터는 증분 백업에 대해서 본격적으로 알아보자. 그런데 사실은 아주 간단하다. -g 옵션을 사용해서 백업 파일에 대한 기록을 남겨서 보관하는 것만 추가하면 기존의 tar 압축과 다를 것이 없다. 예를들어 아래의 스크립트를 보자.1tar -g backup.snap -zcf backup.tgz /backup/target/위처럼 실행을 하면 /backup/target/ 폴더를 backup.tgz로 압축해준다. 그런데 일반 압축과의 차이는 backup.snap라는 파일이 하나 더 생긴다는 것이다. 이 파일은 압축한 파일들의 정보로 이후 증분 백업시 데이터로 사용되므로 보관해야 한다.방금했던 압축은 증분이 아닌 full 백업이다. -g 옵션으로 넘겨주는 데이터가 없다면 이전 백업을 확인할 수 없으므로 full 백업을 한다. 자.. 이제 다시 아래의 스크립트를 보자.12cp backup.snap backup-1.snaptar -g backup-1.snap -zcf backup-1.tgz /backup/target/이번에도 최초의 full 백업과 별반 다르지 않다. 다만, snapshot 파일을 복사해서 사용했다는 차이만 있다. -g 옵션을 사용하면 백업시 참조만 하는 것이 아니라 이번 백업의 정보를 보관하므로 내용을 덮어쓰지 않도록 복사해서 사용한 것이다. 위 과정을 통해 압축한 결과 파일들을 보면 backup.tgz는 용량이 커도 backup-1.tgz는 용량이 적을 것이다(대상 폴더에 파일이 거의 없었다면 별반 차이가 나지 않을 수 있다). backup-1.tgz는 증분 백업된 파일이기 때문이다.마지막으로 이 상태에서 다시 증분 백업하는 것을 한번만 더 보자.12cp backup-1.snap backup-2.snaptar -g backup-2.snap -zcf backup-2.tgz /backup/target/굳이 설명하지 않아도 보면 이해가 될 것이다. 그럼에도 한번 더 적는 이유는 cp backup.snap backup-2.snap 처럼 최초 snapshot에서 시작해야 하는지 마지막 snapshot에서 시작해야 하는지 헛갈릴 수 있기 때문이다. 사실 이 부분은 증분 백업 방식에 따라 차이가 나는 부분인데 뒤에 자세히 설명할 것이므로 일단은 그렇다고 생각하자.이로써 증분 백업에 대한 기본적인 설명이 끝났다. 생각보다 아주 간단하다. 하지만 이해를 돕기 위해 아래에 예시를 하나 첨부한다.우선 백업 과정이다. 이후의 예시들은 명령 중간 중간에 ls -al 등으로 test 폴더의 상태를 확인해 가면서 진행하면 이해가 더 쉬울 것이다. 1 2 3 4 5 6 7 8 910111213141516171819202122mkdir testecho &amp;quot;1&amp;quot; &amp;gt; test/1.txtecho &amp;quot;2&amp;quot; &amp;gt; test/2.txttar -g backup.snap -zcf backup.tgz ./test/echo &amp;quot;3&amp;quot; &amp;gt; test/3.txtecho &amp;quot;4&amp;quot; &amp;gt; test/4.txtcp backup.snap backup-1.snaptar -g backup-1.snap -zcf backup-1.tgz ./test/rm -f test/4.txtcp backup-1.snap backup-2.snaptar -g backup-2.snap -zcf backup-2.tgz ./test/echo &amp;quot;5&amp;quot; &amp;gt; test/5.txtecho &amp;quot;6&amp;quot; &amp;gt; test/6.txtcp backup-2.snap backup-3.snaptar -g backup-3.snap -zcf backup-3.tgz ./test/이번엔 증분 백업된 내용에서 복원하는 과정이다. 1 2 3 4 5 6 7 8 91011121314# 복원 과정을 확인하기 위해 백업한 폴더는 일단 지운다.rm -rf testtar zxvf backup-0.tgzls -al ./test/tar --incremental -zxvf backup-1.tgzls -al ./test/tar --incremental -zxvf backup-2.tgzls -al ./test/tar --incremental -zxvf backup-3.tgzls -al ./test/그런데 이상하게 보이는 부분이 있을 수 있다. 압축할 때 사용했던 snapshot 파일을 복원시에는 사용하지 않는다는 것이다. 대신에 --incremental를 사용하고 있다. 이게 가능한 이유는 tgz 파일이 이미 자신에게 필요한 정보를 모두 가지고 있기 때문이다. 단, 정상적인 복원를 위해서는 백업한 순서대로 복원해야 한다. 그리고 --incremental 대신 --listed-incremental=/dev/null를 사용해도 무방하다. 그리고 이 부분에 대해서는 유의할 점이 한가지 있다. 다른 대부분의 설명글에 보면 snapshot 파일을 복원시에 사용한다. 그럼에도 불구하고 내가 이렇게 설명하는 것은 메뉴얼에 동일하게 나와있으며 위 실험 결과를 보면 알 수 있듯이 정상 동작하기 때문이다. 하지만 tar의 버전에 따른 차이일 수도 있으니 유의하자.자.. 다시 백업 과정을 한번 생각해보자. 복원시에 snapshot 파일이 필요하지 않다면 굳이 백업시마다 snapshot 파일을 복사하거나 하지 않고 계속 같은 파일을 덮어쓰도록 하면 안될까? 결론부터 이야기 하자면 당연히 가능하다. 그럼 굳이 복사를 했던 이유는 뭘까? 이 부분은 증분 백업의 방법 중 level을 증가시키면서 백업하는 방법을 보여주기 위해서였다. 따라서 이 방법에서는 backup.snap 파일을 다음 백업에서도 사용해도 된다. 데이터를 덮어쓰겠지만 어짜피 level을 증가시키면서 백업하는 것이므로 상관없다.이번엔 level-0와 level-1만 생성하는 백업 과정을 한번 보자. 이를 예를들어 설명하자면 다음과 같다. 최초에 full 백업(level-0) 한다. 다음 백업에서 증분 백업(level-1)으로 백업한다. 여기까지는 위의 방식과 같다. 하지만 이 다음부터 다르다. 위의 방법에서는 그 다음 백업은 level-1 상태를 기초로 level-2로 백업했다. 하지만 이 방법에서는 다시 level-0에서 level-1을 백업한다. 따라서 기존에 level-1 백업 파일은 필요가 없다. 아래의 스크립트를 보자.이전 백업 방법과 유사하지만 자세히 보면 다른 백업 과정이다. 1 2 3 4 5 6 7 8 91011121314151617181920212223242526rm -rf *mkdir testecho &amp;quot;1&amp;quot; &amp;gt; test/1.txtecho &amp;quot;2&amp;quot; &amp;gt; test/2.txttar -g backup-0.snap -zcf backup-0.tgz ./test/echo &amp;quot;3&amp;quot; &amp;gt; test/3.txtecho &amp;quot;4&amp;quot; &amp;gt; test/4.txtcp backup-0.snap backup-1.snaptar -g backup-1.snap -zcf backup-1.tgz ./test/rm -f backup-1.snaprm -f test/4.txtcp backup-0.snap backup-1.snaptar -g backup-1.snap -zcf backup-2.tgz ./test/rm -f backup-1.snapecho &amp;quot;5&amp;quot; &amp;gt; test/5.txtecho &amp;quot;6&amp;quot; &amp;gt; test/6.txtcp backup-0.snap backup-1.snaptar -g backup-1.snap -zcf backup-3.tgz ./test/rm -f backup-1.snap자세히 보면 알겠지만 항상 backup-0.snap 파일을 기준으로 증분 백업을 하고 있다. 자세한 설명은 아래의 복원 과정을 보고 설명하겠다.1234567rm -rf testtar zxvf backup-0.tgzls -al ./test/tar --incremental -zxvf backup-3.tgzls -al ./test/복원 과정이 이전 방법에 비해 대폭 줄었다. 최초 백업본(full 백업)을 복원하고 중간 단계없이 바로 마지막 백업본으로 복원하고 있다. 결과를 보면 알겠지만 정상적으로 복원되었다. 어떻게 이게 가능할까? 앞서 설명했던 것과 같이 이 방법은 증분 백업을 항상 최초 백업본을 기준으로 증분 백업을 했으므로 최초와 마지막 백업본만 있으면 복구가 가능하다.짧게 설명하려던 것이 어쩌다보니 길어졌다. 그렇지만 정확한 내용이 전달되었을지 모르겠다. 나름 예시를 들어 설명한다고 했는데.요약하자면 이렇다. tar를 이용한 증분 백업은 2가지가 있다. 지속적 증분 백업(level 0~max)과 1차 증분 백업(level 0~1). 이 이름들은 정식 명칭이 아니라 그냥 내가 설명하려고 붙인 이름이다.지속적 증분 백업은 용량 효율이 좋을 수 있으나 복원 과정에서 모든 백업본이 필요하다. 그리고 원하는 지점까지만 복원하는 것이 가능하고 지속적인 변경만 백업하므로 효율(시간/공간)이 높다.그러나 1차 증분 백업은 최초 백업과 마지막 백업만 있으면 복원이 가능하므로 관리가 용이하나 중간 지점으로의 복원이 불가능(중간 백업본도 모두 유지한다면 가능)하며 효율이 떨어질 수 있다.그런데 이런 차이는 상황에 따라 다를 수 있으므로 차이를 이해하고 선택적으로 사용하면 된다. 그리고 내용이 길어질까봐 압축/복원시 사용하는 옵션들의 사용법에 대해서는 설명하지 않았으니 메뉴얼을 참고하자. 압축/복원시 다양한 옵션을 활용하면 보다 정교한 백업을 할 수 있다.</summary>
</entry>
<entry>
<title>Octopress 2에서 Jekyll로 전환</title>
<link href="http://blog.asamaru.net/2015/12/23/moving-from-octopress-to-jekyll/" rel="alternate" type="text/html" title="Octopress 2에서 Jekyll로 전환" />
<published>2015-12-23T21:41:33+09:00</published>
<updated>2015-12-23T21:41:33+09:00</updated>
<id>http://blog.asamaru.net/2015/12/23/moving-from-octopress-to-jekyll</id>
<content type="html" xml:base="http://blog.asamaru.net/2015/12/23/moving-from-octopress-to-jekyll/">&lt;p&gt;최근 이틀동안 현재 운영중인 블로그에서 사용중인 옥토프레스를 걷어내고 순수 &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;로 전환하는 작업을 했다. 사실 처음엔 지금 사용중인 옥토프레스를 3버전으로 버전업 하려고 했다. 그래서 &lt;a href=&quot;http://samwize.com/2015/09/30/migrating-octopress-2-to-octopress-3/&quot;&gt;Migrating Octopress 2 to Octopress 3&lt;/a&gt;를 따라 전환을 시도했다. 이 글에서도 나와 있는 것처럼 옥토프레스 제작자가 &lt;a href=&quot;http://octopress.org/2015/01/15/octopress-3.0-is-coming/&quot;&gt;Octopress 3.0 Is Coming&lt;/a&gt;이라고만 해두고 정식 릴리즈를 하지 않아 기다림에 지쳐 작업을 시작했다(이때까지만 하더라도 일이 간단하리라 생각했다).&lt;/p&gt;

&lt;p&gt;아래의 글은 체계적인 설치 안내서 보다는 전환 경험담에 가깝다. 아래의 과정을 따라 설치하면 동일하게 안될 확률이 높으므로 참고만 하길 바란다. 사실 처음엔 잘 정리해 두려고 했는데 워낙에 이리저리 시도를 많이 하면서 정리하는 것을 포기했다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 전환에 앞서 octopress 버전업 시도 과정부터 이야기하려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/octopress/octopress&quot;&gt;Octopress 3 - Github&lt;/a&gt;에 가면 최신 옥토프레스를 확인할 수 있다. 현재 시점을 기준으로 3.0.11이 최신이다. 정식 릴리즈를 공식적으로 출시하지 않았지만 개발을 나름 활발히 진행중이다. 나중에 버전업을 진행해 보니 왜 정식 릴리즈를 하지 못하고 있는지 알 것도 같다. &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; 기반으로 여러가지 플러그인을 사용하고 템플릿의 제작도 프로그램 제작에 준할 정도로 커스텀되는 상황이다보니 체계적인 마이그레이션 방법을 제시하기 어려운 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://samwize.com/2015/09/30/migrating-octopress-2-to-octopress-3/&quot;&gt;Migrating Octopress 2 to Octopress 3&lt;/a&gt;에 나름 잘 설명되어 있기는하나 나의 경우엔 그대로 적용되지 않았다(특별한 플러그인 다수 사용하지도 않았는데). 결국은 여러가지 시도 끝에 남은 거라곤 옥토프레스 3.0.11이 설치되었다는 것 밖에 없다(사실 이건 간단히 설치가 되므로 대부분의 시간을 허비한 것이다).&lt;/p&gt;

&lt;p&gt;이러한 이유로 순수 &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;로 전환을 시작하게 되었다. 사실 이 과정도 옥토프레스를 버전업하는 것과 같이 새로운 블로그를 생성하고 주요 설정을 이전하는 것이다.
옥토프레스는 원래 Jekyll을 기반으로 확장된 것이라 전환이 간단할 것이라고 생각했다. 이것 또한 착각이었다. 이 과정에서도 여러가지 실패기가 있지만 다 나열하기도 힘들다. 이후부터는 설치 과정을 간략히 요약하려고 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;아래는 Jekyll을 설치하기 위한 &lt;strong&gt;Gemfile&lt;/strong&gt; 의 내용이다. 거의 필수에 가까운 플러그인만으로 구성했다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://rubygems.org&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;= 3.0.1&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-paginate&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-archives&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-sitemap&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll-feed&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pygments.rb&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Gemfile&lt;/strong&gt; 을 사용한 설치는 아래와 같이 할 수 있다. 단, ruby 버전 2.1 이상을 요구할 수 있는데 그때는 rvm을 사용해 설치하면 된다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem install bundler
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;다음은 &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;에서 가장 중요한 &lt;strong&gt;_config.yml&lt;/strong&gt; 파일의 내용이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;gems&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jekyll-paginate&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jekyll-archives&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jekyll-sitemap&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;jekyll-feed&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;pygments.rb&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.idea&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.git&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;README.md&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Gemfile&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Gemfile.lock&amp;quot;&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;http://blog.asamaru.net&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;이 세상에 하나는 남기고 가자&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;내가 할 수 있는 모든 것을...&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;유영재&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;simple_search&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;https://www.google.com/search&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p-Indicator&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# this means to ignore newlines until &amp;quot;baseurl:&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;세상에 필요한 소스코드 한줄 남기고 가자.&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;asamaru@asamaru.net&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;baseurl&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# the subpath of your site, e.g. /blog/&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/:year/:month/:day/:title/&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;markdown&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;KramdownPygments&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;markdown_ext&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;markdown,mkd,mkdn,md&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;textile_ext&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;textile&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;kramdown&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;GFM&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;auto_ids&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;footnote_nr&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;entity_output&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;as_char&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;toc_levels&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1..6&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;smart_quotes&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;lsquo,rsquo,ldquo,rdquo&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;paginate&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;paginate_path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;posts/:num&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;recent_posts&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;excerpt_link&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Read&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;amp;rarr;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;excerpt_separator&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;!--more--&amp;gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;titlecase&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Disqus Comments&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;disqus_short_name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;asamaru7&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Google Analytics&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;google_analytics_tracking_id&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;UA-65749108-2&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;github_username&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;asamaru7&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;feed&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;atom.xml&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# archives 생성&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;jekyll-archives&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;categories&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;year&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;month&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;day&lt;/span&gt;
    &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;tags&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;layouts&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;archive-year&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;archive-month&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;archive-day&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;archive-tag&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;archive-tag&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;permalinks&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/:year/&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/:year/:month/&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/:year/:month/:day/&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/tag/:name/&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;/category/:name/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;하나씩 설명하자니 너무 많다. 다만 그리 어려운 설정들이 아니므로 보면 이해할 것으로 본다.&lt;/p&gt;

&lt;p&gt;마지막으로 한가지. &lt;a href=&quot;https://github.com/mvdbos/kramdown-with-pygments&quot;&gt;Kramdown with Pygments&lt;/a&gt;라는 플러그인을 사용했다. Jekyll에서 kramdown을 사용하면서 Pygments를 함께 사용(코드 하이라이팅)하기 위한 플러그인이다. 그런데 몇가지 문제가 있어 아래와 같이 변형해서 사용하고 있다. 덤으로 옥토프레스에서 코드 블럭에 사용되던 문법도 호환되게 변경했으나 마지막에 문제에 걸렸다. kramdown에서 그 문법을 정상적으로 인식하지 못했다. 코드에 빈 줄바꿈이 포함되면 정상적으로 인식하지 못한다. 따라서 이 플러그인이 동작하기 이전에 발생되는 문제로 여기서는 아직 처리하지 못했다. 시간을 들여 분석해보면 처리 방법이 있을수도 있지만 일단 두기로 했다. 중요한 문제는 아니므로(게다가 내가 ruby를 모른다. 이 작업도 기본 문법 몇가지만 공부해서 처리한 것이라 깊이있는 수정은 어렵다).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kramdown_pygments.rb&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;# We define the an additional option for the kramdown parser to look for&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Kramdown&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Options&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:kramdown_default_lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;Sets the default language for highlighting code blocks&lt;/span&gt;

&lt;span class=&quot;sh&quot;&gt;If no language is set for a code block, the default language is used&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;instead. The value has to be one of the languages supported by pygments&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;or nil if no default language should be used.&lt;/span&gt;

&lt;span class=&quot;sh&quot;&gt;Default: nil&lt;/span&gt;
&lt;span class=&quot;sh&quot;&gt;Used by: PygmentsHtml converter&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This class is a plugin for kramdown, to make it use pygments instead of coderay&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# It has nothing to do with Jekyll, it is simply used by the custom converter below&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Kramdown&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Converter&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#AllOptions = /([^\s]+)\s+(.+?)\s+(https?:\/\/\S+|\/\S+)\s*(.+)?\n/i&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#LangCaption = /([^\s]+)\s*(.+)?\n/i&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;AllOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/([a-z0-9]+)[[:blank:]]+(.+?)[[:blank:]]+(https?:\/\/\S+|\/\S+)[[:blank:]]*([^\n]+)?\n/i&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;LangCaption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/([a-z0-9]+)[[:blank:]]*([^\n]+)?\n/i&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PygmentsHtml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Html&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pygments&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoadError&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;STDERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;You are missing a library required for syntax highlighting. Please run:&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;STDERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;  $ [sudo] gem install pygments&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FatalException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Missing dependency: Pygments&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert_codeblock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;codeProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert_codespan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;codeProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;codeProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSapn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dup&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extract_code_language!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:kramdown_default_lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# STDERR.puts &amp;quot;lang #{el.value}&amp;quot;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;codeStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# octopress code 형식 지원&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSapn&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AllOptions&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LangCaption&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;acceptLang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pygments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Lexer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_alias&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acceptLang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;# STDERR.puts &amp;quot;lang [#{$1}] [#{$2}]&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;isSapn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AllOptions&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# STDERR.puts &amp;quot;lang all&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# fn = &amp;quot;#{$2}&amp;quot;.gsub(/\s+/, &amp;quot;&amp;quot;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;figcaption&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;a href=&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$3&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LangCaption&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# STDERR.puts &amp;quot;lang lang&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;figcaption&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/figcaption&amp;gt;&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;codeStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codeStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 첫줄 제거&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pygmentize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codeStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSapn&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;highlight notranslate&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; language-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;language-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;language-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;escape_html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;codeStr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; nmcode&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;nmcode&amp;quot;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isSapn&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;code&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/code&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;figure class=&amp;#39;code&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;div class=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;highlight notranslate&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&amp;lt;pre&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&amp;lt;code&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pygmentize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;Pygments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;highlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:lexer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#            :options =&amp;gt; { :startinline =&amp;gt; true, :encoding =&amp;gt; &amp;#39;utf-8&amp;#39;, :nowrap =&amp;gt; true })&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;:options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:startinline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:linenos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;table&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This class is the actual custom Jekyll converter.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Converters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Markdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;KramdownPygments&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LoadError&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;STDERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;You are missing a library required for Markdown. Please run:&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;STDERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;  $ [sudo] gem install kramdown&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FatalException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Missing dependency: kramdown&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Kramdown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:auto_ids&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;auto_ids&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:footnote_nr&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;footnote_nr&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:entity_output&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;entity_output&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:toc_levels&lt;/span&gt;           &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;toc_levels&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:smart_quotes&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;smart_quotes&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:kramdown_default_lang&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;default_lang&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:input&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:hard_wrap&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;kramdown&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;hard_wrap&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_pygments_html&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;보다 자세한 처리 결과를 확인하고 싶다면 이 블로그의 소스를 참고하기 바란다. &lt;a href=&quot;https://github.com/asamaru7/blog&quot;&gt;asamaru7/blog - Github&lt;/a&gt;&lt;/p&gt;
</content>
<summary>최근 이틀동안 현재 운영중인 블로그에서 사용중인 옥토프레스를 걷어내고 순수 Jekyll로 전환하는 작업을 했다. 사실 처음엔 지금 사용중인 옥토프레스를 3버전으로 버전업 하려고 했다. 그래서 Migrating Octopress 2 to Octopress 3를 따라 전환을 시도했다. 이 글에서도 나와 있는 것처럼 옥토프레스 제작자가 Octopress 3.0 Is Coming이라고만 해두고 정식 릴리즈를 하지 않아 기다림에 지쳐 작업을 시작했다(이때까지만 하더라도 일이 간단하리라 생각했다).아래의 글은 체계적인 설치 안내서 보다는 전환 경험담에 가깝다. 아래의 과정을 따라 설치하면 동일하게 안될 확률이 높으므로 참고만 하길 바란다. 사실 처음엔 잘 정리해 두려고 했는데 워낙에 이리저리 시도를 많이 하면서 정리하는 것을 포기했다.Jekyll 전환에 앞서 octopress 버전업 시도 과정부터 이야기하려고 한다.Octopress 3 - Github에 가면 최신 옥토프레스를 확인할 수 있다. 현재 시점을 기준으로 3.0.11이 최신이다. 정식 릴리즈를 공식적으로 출시하지 않았지만 개발을 나름 활발히 진행중이다. 나중에 버전업을 진행해 보니 왜 정식 릴리즈를 하지 못하고 있는지 알 것도 같다. Jekyll 기반으로 여러가지 플러그인을 사용하고 템플릿의 제작도 프로그램 제작에 준할 정도로 커스텀되는 상황이다보니 체계적인 마이그레이션 방법을 제시하기 어려운 것 같다.Migrating Octopress 2 to Octopress 3에 나름 잘 설명되어 있기는하나 나의 경우엔 그대로 적용되지 않았다(특별한 플러그인 다수 사용하지도 않았는데). 결국은 여러가지 시도 끝에 남은 거라곤 옥토프레스 3.0.11이 설치되었다는 것 밖에 없다(사실 이건 간단히 설치가 되므로 대부분의 시간을 허비한 것이다).이러한 이유로 순수 Jekyll로 전환을 시작하게 되었다. 사실 이 과정도 옥토프레스를 버전업하는 것과 같이 새로운 블로그를 생성하고 주요 설정을 이전하는 것이다.옥토프레스는 원래 Jekyll을 기반으로 확장된 것이라 전환이 간단할 것이라고 생각했다. 이것 또한 착각이었다. 이 과정에서도 여러가지 실패기가 있지만 다 나열하기도 힘들다. 이후부터는 설치 과정을 간략히 요약하려고 한다.아래는 Jekyll을 설치하기 위한 Gemfile 의 내용이다. 거의 필수에 가까운 플러그인만으로 구성했다.12345678source &amp;#39;https://rubygems.org&amp;#39;gem &amp;#39;jekyll&amp;#39;, &amp;#39;= 3.0.1&amp;#39;gem &amp;#39;jekyll-paginate&amp;#39;gem &amp;#39;jekyll-archives&amp;#39;gem &amp;#39;jekyll-sitemap&amp;#39;gem &amp;#39;jekyll-feed&amp;#39;gem &amp;#39;pygments.rb&amp;#39;Gemfile 을 사용한 설치는 아래와 같이 할 수 있다. 단, ruby 버전 2.1 이상을 요구할 수 있는데 그때는 rvm을 사용해 설치하면 된다.12$ sudo gem install bundler$ bundle install다음은 Jekyll에서 가장 중요한 _config.yml 파일의 내용이다.```yamlgems:  - jekyll-paginate  - jekyll-archives  - jekyll-sitemap  - jekyll-feed  - pygments.rbexclude: [“.idea”, “.git”, “README.md”, “Gemfile”, “Gemfile.lock”]url: http://blog.asamaru.nettitle: 이 세상에 하나는 남기고 가자subtitle: 내가 할 수 있는 모든 것을…author: 유영재simple_search: https://www.google.com/searchdescription: &amp;gt; # this means to ignore newlines until “baseurl:”  세상에 필요한 소스코드 한줄 남기고 가자.email: asamaru@asamaru.netbaseurl: “” # the subpath of your site, e.g. /blog/permalink: /:year/:month/:day/:title/markdown: KramdownPygmentsmarkdown_ext: markdown,mkd,mkdn,mdtextile_ext: textilekramdown:  input: GFM  auto_ids: true  footnote_nr: 1  entity_output: as_char  toc_levels: 1..6  smart_quotes: lsquo,rsquo,ldquo,rdquopaginate: 1paginate_path: “posts/:num”recent_posts: 5excerpt_link: “Read on →”excerpt_separator: “</summary>
</entry>
<entry>
<title>Charles를 이용한 안드로이드 SSL Proxy</title>
<link href="http://blog.asamaru.net/2015/12/17/charles-android-ssl-proxy/" rel="alternate" type="text/html" title="Charles를 이용한 안드로이드 SSL Proxy" />
<published>2015-12-17T08:36:04+09:00</published>
<updated>2015-12-17T08:36:04+09:00</updated>
<id>http://blog.asamaru.net/2015/12/17/charles-android-ssl-proxy</id>
<content type="html" xml:base="http://blog.asamaru.net/2015/12/17/charles-android-ssl-proxy/">&lt;p&gt;안드로이드 앱을 개발할 때 http/https 디버깅을 위해서 proxy를 사용한다. 나는 예전에 &lt;a href=&quot;http://sourceforge.net/projects/paros/&quot;&gt;Paros&lt;/a&gt;를 주로 사용했었는데 기본적인 기능을 사용하는데 문제가 없지만 버전업이 중단되어 아쉬운 부분이 많았다. 그래서 최근엔 &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;를 주로 사용한다. &lt;a href=&quot;http://sourceforge.net/projects/paros/&quot;&gt;Paros&lt;/a&gt;와 달리 &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;는 유료지만 사용이 편리하고 다양한 기능을 제공한다. 그래서 많은 사람들이 사용하고 있는 것 같다.&lt;/p&gt;

&lt;p&gt;이번에는 이 &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;를 이용해서 https(SSL)를 proxy하는 방법을 설명하고자 한다. 이 글의 주요 주제는 아니지만 &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;를 이용해서 proxy로 연결하는 방법부터 간략히 보자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt; &amp;gt; Proxy &amp;gt; Proxy Settings 메뉴로 들어가면 port를 지정할 수 있는 란이 나온다. 여기에 원하는 port를 입력한다. 안드로이드 기기에서는 Wi-Fi 설정으로 들어가서 연결된 네트워크를 길게 누르면 &lt;code&gt;네트워크 구성 변경&lt;/code&gt;이라는 메뉴가 나타난다. 해당 메뉴로 들어가서 &lt;code&gt;고급 옵션 표시&lt;/code&gt;를 체크하면 프록시 설정을 할 수 있는 란들이 나타난다. 여기서 &lt;code&gt;프록시 호스트 이름&lt;/code&gt;에는 &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;가 켜져있는 컴퓨터의 IP를 넣고 &lt;code&gt;프록시 포트&lt;/code&gt;에는 &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;에서 지정했던 port를 넣는다. 아이폰도 안드로이드와 메뉴는 다르지만 동일한 형태로 프록시 설정을 해주면 된다. 더 자세한 내용이 필요하면 인터넷에 관련 자료가 아주 많으니 찾아보길 바란다.&lt;/p&gt;

&lt;p&gt;이렇게 연결이 되고나면 &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;에는 해당 기기에서 사용하는 http/https 기록이 모두 나타난다. http 정보는 암호화가 되어 있지 않기 때문에 모든 내용을 다 볼 수 있지만 https의 경우는 송수신 데이터가 모두 암호화되어 있어 내용을 알아볼 수 없다. 이 부분을 http처럼 볼 수 있도록 설정하는 방법을 설명하고자 하는 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;다시 &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt;로 가서 아래의 단계를 따라한다. &lt;a href=&quot;https://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt; 3.9.3 버전 기준이므로 참고 바란다(3.11.2 버전의 경우 확인해보니 메뉴 위치가 다르긴 하나 설정은 큰 차이가 없다).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Proxy &amp;gt; Proxy Settings &amp;gt; SSL로 간다.&lt;/li&gt;
  &lt;li&gt;“Enable SSL Proxying”를 체크한다.&lt;/li&gt;
  &lt;li&gt;“Locations” 아래의 “Add” 버튼을 눌러 디버깅하고자 하는 도메인과 port를 입력한다.&lt;/li&gt;
  &lt;li&gt;“OK”를 눌러 완료한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이제는 &lt;a href=&quot;http://www.charlesproxy.com/documentation/additional/legacy-ssl-proxying/&quot;&gt;Charles - LEGACY SSL PROXYING&lt;/a&gt; 사이트로 가서 cert 파일을 다운 받는다. 다운받은 cert 파일을 안드로이드 기기에 넣는다. 이메일로 보내서 첨부파일을 열어도 되고 파일을 직접 넣어도 되고 어떻게든 기기에 파일을 넣기만 하면 된다. 그리고 cert(crt) 파일을 터치하여 실행한다. 이후의 과정은 다음과 같다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cert 이름을 넣으라고 나오는데 아무 이름이나 넣어도 상관없다.&lt;/li&gt;
  &lt;li&gt;기기에 보안 lock(잠금 화면)이 걸려있지 않다면 lock을 걸어야만 사용할 수 있다는 안내가 나온다. 따라서 lock을 설정해야 한다. 패턴이건 비밀번호건 상관은 없다.&lt;/li&gt;
  &lt;li&gt;설치가 완료되고나면 네트워크 모니터링 가능성(이 기기의 네트워크 정보를 다른 곳에서 볼 수 있다) 안내가 나오는데 무시하면 된다. 지금하고 있는 작업 자체가 그것이므로.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정상적으로 설치가 완료되었다면 이제부터는 이전과는 다르게 지정했던 도메인의 https 정보는 http와 동일하게 모두 볼 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그런데 3.10 버전 이상을 사용할 경우는 방법이 다르다. &lt;a href=&quot;https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/&quot;&gt;Charles - SSL CERTIFICATES&lt;/a&gt;에 설명되어 있다. 안드로이드의 경우는 사이트에서 다운 받는 대신 Charles에서 “Help &amp;gt; SSL Proxying &amp;gt; Install Charles Root Certificate on Mobile Device or Remote Browser…“를 선택하면 방법을 안내한다. 내용은 다음과 같다.&lt;/p&gt;

&lt;p&gt;안드로이드 기기의 브라우저에서 http://www.charlesproxy.com/getssl를 방문한다. 단, Proxy가 연결된 상태이어야 한다. 이 사이트에 접속하면 cert 파일을 자동으로 추가해 준다. 이후의 과정은 3.9.3과 동일하다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;마지막으로 설치한 cert 파일을 제거하는 방법이다. 이 부분은 기기마다 차이가 날 수 있다. 갤노트3 / 롤리팝 기준으로 “설정 &amp;gt; 일반 &amp;gt; 보안 &amp;gt; 인증서 저장공간 &amp;gt; 신뢰할 수 있는 인증서 &amp;gt; 사용자”를 찾아가면 추가한 인증서가 있다. 해당 인증서를 누르면 맨 하단에 “제거” 버튼이 있다.&lt;/p&gt;

&lt;p&gt;아.. 그리고 기존에 잠금 화면을 사용하지 않았던 사람이라면 위 과정을 거치면서 잠금 화면을 추가했으므로 다시 해제하고 싶을 수 있다. 그런데 추가한 인증서만 제거해서는 잠금 화면을 해제할 수 없다. 해제를 원한다면 “신뢰할 수 있는 인증서” 메뉴 대신 “인증서 삭제” 메뉴를 이용해서 모든 인증서를 지우면 잠금 화면을 해제할 수 있다.&lt;/p&gt;
</content>
<summary>안드로이드 앱을 개발할 때 http/https 디버깅을 위해서 proxy를 사용한다. 나는 예전에 Paros를 주로 사용했었는데 기본적인 기능을 사용하는데 문제가 없지만 버전업이 중단되어 아쉬운 부분이 많았다. 그래서 최근엔 Charles를 주로 사용한다. Paros와 달리 Charles는 유료지만 사용이 편리하고 다양한 기능을 제공한다. 그래서 많은 사람들이 사용하고 있는 것 같다.이번에는 이 Charles를 이용해서 https(SSL)를 proxy하는 방법을 설명하고자 한다. 이 글의 주요 주제는 아니지만 Charles를 이용해서 proxy로 연결하는 방법부터 간략히 보자.Charles &amp;gt; Proxy &amp;gt; Proxy Settings 메뉴로 들어가면 port를 지정할 수 있는 란이 나온다. 여기에 원하는 port를 입력한다. 안드로이드 기기에서는 Wi-Fi 설정으로 들어가서 연결된 네트워크를 길게 누르면 네트워크 구성 변경이라는 메뉴가 나타난다. 해당 메뉴로 들어가서 고급 옵션 표시를 체크하면 프록시 설정을 할 수 있는 란들이 나타난다. 여기서 프록시 호스트 이름에는 Charles가 켜져있는 컴퓨터의 IP를 넣고 프록시 포트에는 Charles에서 지정했던 port를 넣는다. 아이폰도 안드로이드와 메뉴는 다르지만 동일한 형태로 프록시 설정을 해주면 된다. 더 자세한 내용이 필요하면 인터넷에 관련 자료가 아주 많으니 찾아보길 바란다.이렇게 연결이 되고나면 Charles에는 해당 기기에서 사용하는 http/https 기록이 모두 나타난다. http 정보는 암호화가 되어 있지 않기 때문에 모든 내용을 다 볼 수 있지만 https의 경우는 송수신 데이터가 모두 암호화되어 있어 내용을 알아볼 수 없다. 이 부분을 http처럼 볼 수 있도록 설정하는 방법을 설명하고자 하는 것이다.다시 Charles로 가서 아래의 단계를 따라한다. Charles 3.9.3 버전 기준이므로 참고 바란다(3.11.2 버전의 경우 확인해보니 메뉴 위치가 다르긴 하나 설정은 큰 차이가 없다).  Proxy &amp;gt; Proxy Settings &amp;gt; SSL로 간다.  “Enable SSL Proxying”를 체크한다.  “Locations” 아래의 “Add” 버튼을 눌러 디버깅하고자 하는 도메인과 port를 입력한다.  “OK”를 눌러 완료한다.이제는 Charles - LEGACY SSL PROXYING 사이트로 가서 cert 파일을 다운 받는다. 다운받은 cert 파일을 안드로이드 기기에 넣는다. 이메일로 보내서 첨부파일을 열어도 되고 파일을 직접 넣어도 되고 어떻게든 기기에 파일을 넣기만 하면 된다. 그리고 cert(crt) 파일을 터치하여 실행한다. 이후의 과정은 다음과 같다.  cert 이름을 넣으라고 나오는데 아무 이름이나 넣어도 상관없다.  기기에 보안 lock(잠금 화면)이 걸려있지 않다면 lock을 걸어야만 사용할 수 있다는 안내가 나온다. 따라서 lock을 설정해야 한다. 패턴이건 비밀번호건 상관은 없다.  설치가 완료되고나면 네트워크 모니터링 가능성(이 기기의 네트워크 정보를 다른 곳에서 볼 수 있다) 안내가 나오는데 무시하면 된다. 지금하고 있는 작업 자체가 그것이므로.정상적으로 설치가 완료되었다면 이제부터는 이전과는 다르게 지정했던 도메인의 https 정보는 http와 동일하게 모두 볼 수 있다.그런데 3.10 버전 이상을 사용할 경우는 방법이 다르다. Charles - SSL CERTIFICATES에 설명되어 있다. 안드로이드의 경우는 사이트에서 다운 받는 대신 Charles에서 “Help &amp;gt; SSL Proxying &amp;gt; Install Charles Root Certificate on Mobile Device or Remote Browser…“를 선택하면 방법을 안내한다. 내용은 다음과 같다.안드로이드 기기의 브라우저에서 http://www.charlesproxy.com/getssl를 방문한다. 단, Proxy가 연결된 상태이어야 한다. 이 사이트에 접속하면 cert 파일을 자동으로 추가해 준다. 이후의 과정은 3.9.3과 동일하다.마지막으로 설치한 cert 파일을 제거하는 방법이다. 이 부분은 기기마다 차이가 날 수 있다. 갤노트3 / 롤리팝 기준으로 “설정 &amp;gt; 일반 &amp;gt; 보안 &amp;gt; 인증서 저장공간 &amp;gt; 신뢰할 수 있는 인증서 &amp;gt; 사용자”를 찾아가면 추가한 인증서가 있다. 해당 인증서를 누르면 맨 하단에 “제거” 버튼이 있다.아.. 그리고 기존에 잠금 화면을 사용하지 않았던 사람이라면 위 과정을 거치면서 잠금 화면을 추가했으므로 다시 해제하고 싶을 수 있다. 그런데 추가한 인증서만 제거해서는 잠금 화면을 해제할 수 없다. 해제를 원한다면 “신뢰할 수 있는 인증서” 메뉴 대신 “인증서 삭제” 메뉴를 이용해서 모든 인증서를 지우면 잠금 화면을 해제할 수 있다.</summary>
</entry>
<entry>
<title>발송 메일을 스팸으로 분류되지 않도록 개선하는 법</title>
<link href="http://blog.asamaru.net/2015/12/16/how-can-i-prevent-mail-from-being-classified-as-spam/" rel="alternate" type="text/html" title="발송 메일을 스팸으로 분류되지 않도록 개선하는 법" />
<published>2015-12-16T17:02:42+09:00</published>
<updated>2015-12-16T17:02:42+09:00</updated>
<id>http://blog.asamaru.net/2015/12/16/how-can-i-prevent-mail-from-being-classified-as-spam</id>
<content type="html" xml:base="http://blog.asamaru.net/2015/12/16/how-can-i-prevent-mail-from-being-classified-as-spam/">&lt;p&gt;개인이 정상적인 메일 서비스를 통해 발송한 메일은 수신 측에서 스팸으로 분류될 확률이 적다. 하지만 서버에서 공지/안내 등의 이유로 다량의 메일을 지속적으로 발송할 경우 스팸으로 분류될 확률이 높다. 이 글에서 설명하고자 하는 것은 서버에서 다량의 메일 발송시 스팸으로 분류될 확률을 낮추기 위해 처리해야 할 몇가지를 소개하고자 한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;스팸 필터는 아래에 설명하는 조건 외에도 메일의 내용, 수신한 사용자의 반응(스팸으로 체크) 등의 다양한 조건을 사용해서 스팸을 분류하므로 이 내용을 모두 적용한다고 스팸으로 무조건 분류되지 않는 것은 아니다.&lt;/strong&gt; 하지만 아래의 조건들을 만족함으로써 정상적인 메일을 발송함에도 불구하고 스팸 서버로 분류되는 것을 어느 정도 예방하기 위한 활동이라고 생각하면 된다. 그리고 아래의 내용은 스팸 서버로 분류되는 상황을 겪으면서 조금씩 추가했던 내용들을 정리한 것이지만 잘못된 부분이 있을 수 있으니 참고용으로 둘러보기를 권장한다. 스팸 필터 정책은 수시로 변경되기도 하고 서비스별로 모두 다른 정책을 사용하므로 아래의 내용이 진리는 아니라는 것이다(사실 그런 것이 있다면 스패머들이 판치는 세상이 될 것이다).&lt;/p&gt;

&lt;p&gt;그럼 하나씩 알아보자.&lt;/p&gt;

&lt;h3 id=&quot;reverse-dns-&quot;&gt;Reverse DNS 설정&lt;/h3&gt;

&lt;p&gt;Reverse DNS란 DNS의 반대 개념으로서 IP로 Domain Name을 조회하는 것을 말한다. Reverse DNS를 통해 도메인이 조회 가능한 IP를 가지는 서버는 실제 운영되는 서비스 서버일 확률이 높으므로 스팸 서버가 아닐 확률이 높은 것으로 보는 것이다. 특히 구글과 같은 메일 서버들은 Reverse DNS가 등록되지 않은 서버에서 발송한 메일은 스팸 점수를 높게 책정하거나 수신을 거부하는 경우도 있다. 따라서 &lt;strong&gt;이메일을 발송하는 서버는 필히 Reverse DNS를 설정하는 것을 권장한다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;등록이 되어 있는지를 확인하는 방법은 아래와 같다. 여기서 A.B.C.D는 해당 서버 IP다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nslookup -type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ptr A.B.C.D
Server:		168.126.63.1
Address:	168.126.63.1#53

Non-authoritative answer:
D.C.B.A.in-addr.arpa	&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; mail.domain.com.

Authoritative answers can be found from:
C.B.A.in-addr.arpa	&lt;span class=&quot;nv&quot;&gt;nameserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; rev2.kornet.net.
C.B.A.in-addr.arpa	&lt;span class=&quot;nv&quot;&gt;nameserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; rev1.kornet.net.
rev1.kornet.net	internet &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 211.216.50.170
rev2.kornet.net	internet &lt;span class=&quot;nv&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 211.216.50.180
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;Reverse DNS가 정상적으로 설정되어 있다면 위와 같이 조회 결과를 볼 수 있다.&lt;/p&gt;

&lt;p&gt;등록이 되어 있지 않다면 어떻게 해야 할까? 대부분의 경우(전체 네트워크를 소유하지 않은 경우) 망사업자 측에 요청하여 설정해야 한다.&lt;/p&gt;

&lt;p&gt;KT 회선을 기준으로 아래의 방법으로 등록 신청이 가능했다. 하지만 얼마전 확인해 보니 사이트가 변경되어 아래의 방법을 사용할 수 없었다. 대부분의 경우 IDC 등에 문의해서 처리하면 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;등록 방법 : [아래]&lt;br /&gt;
① http://dns.kornet.net 사이트 접속&lt;br /&gt;
② 도메인 등록 요청/문의 클릭&lt;br /&gt;
③ 새글작성 클릭&lt;br /&gt;
④ 게시물 유형 -&amp;gt; 리버스 등록, 소속 -&amp;gt; idc 체크, 나머지 정보 기입후 등록&lt;br /&gt;
rDNS 관련 연락처 : 02-3674-5820&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;spfsender-policy-framework--&quot;&gt;SPF(Sender Policy Framework) 레코드 등록&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://support.google.com/a/answer/33786?hl=ko&quot;&gt;구글 관리자 도움말 - SPF 레코드 정보&lt;/a&gt;에 SPF에 대해 다음과 같이 설명하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SPF 레코드는 도메인을 대표하여 이메일을 보낼 수 있는 메일 서버를 식별하는 DNS(Domain Name Service) 레코드의 한 유형입니다.&lt;/p&gt;

  &lt;p&gt;SPF 레코드의 목적은 스팸 발송자가 도메인의 위조된 ‘보낸사람’ 주소를 사용하여 메일을 보내지 못하도록 하는 것입니다. 수신자는 SPF 레코드를 참조하여 자신의 도메인에서 보낸 것처럼 위장한 메일이 인증된 메일 서버에서 전송된 것인지를 판별할 수 있습니다.&lt;/p&gt;

  &lt;p&gt;예를 들어 example.com 도메인에서 Gmail을 사용한다고 가정해 보겠습니다. Google Apps 메일 서버를 도메인에 대한 인증된 메일 서버로 식별하는 SPF 레코드를 만듭니다. 수신자의 메일 서버가 user\@example.com에서 보낸 메일을 수신하는 경우, example.com에 대한 SPF 레코드를 확인하여 유효한 메일인지 여부를 판별할 수 있습니다. 메일이 SPF 레코드에 나열된 Google Apps 메일 서버가 아닌 다른 서버에서 전송된 경우 수신자의 메일 서버에서 이를 스팸으로 간주하여 수신 거부할 수도 있습니다.&lt;/p&gt;

  &lt;p&gt;도메인에 SPF 레코드가 없는 경우에는 수신자 도메인에서 메일이 인증된 메일 서버에서 전송된 것인지를 확인할 수 없으므로 사용자의 메일이 수신 거부될 수도 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 설명을 보면 알 수 있듯이 SPF 레코드 등록의 경우도 메일 발송을 위해서는 필수적으로 해야할 것 중 하나다. 그리고 뒤에 설명할 White Domain 등록을 위해서도 필히 등록이 되어 있어야 한다.&lt;/p&gt;

&lt;p&gt;SPF 레코드 등록 방법은 잘 설명된 문서들이 많으므로 굳이 여기서 다시 설명하지는 않는다. 다만 간단히 예시만 하나 남긴다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS zone 설정에 추가&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;@   IN TXT      &quot;v=spf1 ip4:A.B.C.1 ip4:A.B.C.2 ip4:A.B.C.3 ~all&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;간단히 설명하자면 다음의 IP(A.B.C.1, A.B.C.2, A.B.C.3)가 설정된 서버에서 해당 도메인을 사용해 메일을 발송할 수 있다는 의미다.&lt;/p&gt;

&lt;h3 id=&quot;white-domain-&quot;&gt;화이트 도메인(White Domain) 등록&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.kisarbl.or.kr/&quot;&gt;KISA RBL&lt;/a&gt;에서 통합 White Domain 등록제를 운영하고 있다.
통합 White Domain 등록제에 대해서는 위 사이트에서 아래와 같이 안내하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;정상적으로 발송하는 대량 이메일이 RBL이력으로 간주되어 차단되는 것을 방지하기 위하여, 사전에 등록된 개인이나 사업자에 한하여 국내 주요 포탈사이트로의 이메일 전송을 보장해주는 제도입니다. ( 무료 )&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;단, White Domain으로 등록되었다 하더라도 이후 모니터링을 통해 RBL이력발송 사실이 확인되면, 즉각 차단 조치되며 White 리스트에서도 삭제될 수 있습니다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;기존에 개별 포탈에서 ‘IP 등록제’, ‘IP 실명제’등의 이름으로 운영해오던 것을 2006년 9월 1일부로 KISARBL이 등록접수/관리/운영을 통합한 것이므로, KISARBL에 White Domain으로 등록하게 되면 , 여러번 별도로 등록할 필요없이 참여하고 있는 포탈사이트에 동시에 등록됩니다 .&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;단 , 개인의 경우에는 일부 포탈사이트에서 자사의 정책상 등록을 허용하지 않습니다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 설명을 보면 알 수 있듯이 White Domain은 국내 포털 사이트로 메일을 발송하는 경우에 적용될 수 있는 것으로 범위가 제한되지만 대부분의 수신자가 국내 포털 사이트의 이메일을 사용하고 있는 것을 감안하면 이 또한 필수적으로 등록하는 것이 좋다. 등록 방법은 위 사이트에서 안내하고 있으므로 별도로 설명하지는 않는다. 하지만 등록 과정이 그리 복잡하지 않으므로 큰 어려움은 없을 것으로 생각된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;상기 안내한 사항들은 필수적으로 처리하는 것이 좋은 것들이고 이후의 사항들은 가급적 처리하는 것이 좋은 것이다.&lt;/strong&gt; 하지만 스팸으로 분류되지 않기 위해서는 최대한 할 수 있는 모든 방법을 동원하는 것이 좋다. 그렇게 해도 스팸으로 빠진다. 따라서 확률을 낮추는데 집중해야 한다.
정확하게 이야기 하자면 요즘엔 메일 내용을 더 중요하게 다루는 경우가 많아 내용 작성에도 공을 들여야 한다. 여기서 내용이란 의미를 갖는 문장 뿐아니라 html 마크업과 같은 메일 전문을 뜻한다. 하지만 이 부분은 이 글에서 이야기 하고자하는 것이 아니므로 이 이상의 언급은 피하려 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;dkimdomainkeys-identified-mailhttpwwwdkimorg-&quot;&gt;&lt;a href=&quot;http://www.dkim.org/&quot;&gt;DKIM(DomainKeys Identified Mail)&lt;/a&gt; 인증&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://support.google.com/a/answer/174124&quot;&gt;Google Apps 관리자 도움말 - DKIM으로 이메일 인증&lt;/a&gt;에서는 다음과 같이 DKIM을 소개하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DKIM 표준을 사용하여 발신 메일 헤더에 디지털 서명을 추가하면 스푸핑을 방지하는 데 도움이 됩니다. 이렇게 하려면 비공개 도메인 키를 사용하여 도메인의 발신 메일 헤더를 암호화하고 키의 공개 버전을 도메인의 DNS 레코드에 추가해야 합니다. 그러면 수신 서버가 공개 키를 검색하여 수신 헤더의 암호를 해독하고 메일이 실제로 사용자의 도메인에서 전송되었으며 전송 과정에서 변경되지 않았는지 여부를 확인할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 설명을 보면 알 수 있듯이 스푸핑 방지에 도움을 준다. 따라서 수신된 메일이 스푸핑되지 않았음을 보증하므로 스팸으로 분류될 확률을 낮추는데 도움이 된다(기술적 의미에서는 스팸과 아무런 연관성이 없으나 스팸 필터에서 DKIM이 적용된 메일의 스팸 지수를 낮추는 정책을 사용하는 곳들이 많다).&lt;/p&gt;

&lt;p&gt;DKIM에서 사용할 서명 키는 &lt;code&gt;openssl&lt;/code&gt;등을 이용해서 직접 생성하는 것도 가능하지만 잘 만들어진 온라인 도구들이 있다. 그중에서 &lt;a href=&quot;http://dkimcore.org/&quot;&gt;DKIM Core Tools&lt;/a&gt;를 간략히 소개하고자 한다. 직접 생성하는 방법을 사용해도 되나 여기서는 다루지 않는다(RSA 키를 생성하는 것이므로 쉽게 정보를 얻을 수 있다). 단, 직접 생성했을 경우라면 DNS에 등록할 레코드를 만드는 것이 조금 복잡할 수 있으니 DNS 레코드 생성을 도와주는 &lt;a href=&quot;http://www.dnswatch.info/dkim/create-dns-record&quot;&gt;DNS Watch - DKIM DNS Wizard&lt;/a&gt;를 활용하자.&lt;/p&gt;

&lt;p&gt;http://dkimcore.org/tools/ 로 접속해보면 상단에 도메인을 넣는 란이 있다. 여기에 원하는 도메인을 입력하고 &lt;code&gt;Generate&lt;/code&gt; 버튼을 누르면 private/public key를 만들어 보여주며 DNS에 설정할 DKIM 레코드도 생성하여 바로 보여준다(친절하게도 Bind9, Tinydns, Raw 포멧으로 제공한다). 여기서 제공하는 DKIM 레코드를 DNS에 추가하면 된다.&lt;/p&gt;

&lt;p&gt;그런데 DKIM의 경우는 앞서 설명했던 것들과 다르게 설정만하면 완료되는 것이 아니다. DKIM 레코드에는 공개키를 제공하는 것이므로 메일 발송시 비공개 도메인 키를 사용하여 도메인의 발신 메일 헤더를 암호화하는 과정이 필요하다. 이 부분에 대해서는 오픈소스로 제작된 라이브러리들이 다수 있으니 쉽게 찾을 수 있다. 아니면 직접 구현해도 된다. 다만 RSA를 다루어야 하므로 약간의 지식이 필요하다.&lt;/p&gt;

&lt;h3 id=&quot;dmarcdomain-based-message-authentication-reporting-and-conformance--&quot;&gt;DMARC(Domain-based Message Authentication, Reporting and Conformance) 정책 게시&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://dmarc.org/&quot;&gt;dmarc.org&lt;/a&gt;에서는 DMARC에 대해 다음과 같이 설명하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DMARC, which stands for “Domain-based Message Authentication, Reporting &amp;amp; Conformance”, is an email authentication protocol. It builds on the widely deployed SPF and DKIM protocols, adding a reporting function that allows senders and receivers to improve and monitor protection of the domain from fraudulent email.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 내용을 번역한 것은 아니지만 DMARC를 조금 더 이해하기 쉽게 설명하자면 다음과 같다.&lt;/p&gt;

&lt;p&gt;DMARC는 이메일 인증 프로토콜로써 도메인 기반 메시지 인증, 보고, 준수를 의미한다. DMARC는 SPF, DKIM 두 가지 방법에 의존하여 서명 무결성을 확인한다. 메일이 SPF, DKIM 검사에 실패하면 DMARC 정책이 실행된다. 어떤 방법을 사용하든 두 가지 검사에 모두 실패하지 않는 한 메일은 DMARC를 통과한 것으로 간주된다. 그렇다면 DMARC를 통과하지 못하면 어떻게 되는가? 이때 어떻게 대응할 것인지에 대해서 정의하는 것이 DMARC 정책 게시라고 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://support.google.com/a/answer/2466563?hl=ko&amp;amp;ref_topic=2759254&quot;&gt;Google Apps 관리자 도움말 - DMARC 레코드 추가&lt;/a&gt;에서 설명하고 있는 DMARC TXT 레코드에 대한 설명은 아래와 같다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;태그 이름&lt;/th&gt;
      &lt;th&gt;필수항목&lt;/th&gt;
      &lt;th&gt;목적&lt;/th&gt;
      &lt;th&gt;샘플&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;v&lt;/td&gt;
      &lt;td&gt;필수&lt;/td&gt;
      &lt;td&gt;프로토콜 버전&lt;/td&gt;
      &lt;td&gt;v=DMARC1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;p&lt;/td&gt;
      &lt;td&gt;필수&lt;/td&gt;
      &lt;td&gt;도메인에 대한 정책&lt;/td&gt;
      &lt;td&gt;p=quarantine&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;pct&lt;/td&gt;
      &lt;td&gt;선택사항&lt;/td&gt;
      &lt;td&gt;필터링이 적용되는 메일의 비율(%)&lt;/td&gt;
      &lt;td&gt;pct=20&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rua&lt;/td&gt;
      &lt;td&gt;선택사항&lt;/td&gt;
      &lt;td&gt;집계 보고서의 보고 URI&lt;/td&gt;
      &lt;td&gt;rua=mailto:aggrep@example.com&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sp&lt;/td&gt;
      &lt;td&gt;선택사항	도메인의 하위 도메인에 대한 정책&lt;/td&gt;
      &lt;td&gt;sp=reject&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;aspf&lt;/td&gt;
      &lt;td&gt;선택사항&lt;/td&gt;
      &lt;td&gt;SPF의 정렬 모드&lt;/td&gt;
      &lt;td&gt;aspf=r&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;v(버전) 및 p(정책) 태그만 필수항목입니다. 가능한 정책 설정, 즉 메일 처리에는 다음 3가지가 있습니다.&lt;/p&gt;

  &lt;p&gt;none - 아무 조치도 취하지 않습니다. 문제가 발생한 메일을 일일 보고서에 기록만 합니다.
quarantine - 문제가 있는 메일을 스팸으로 표시합니다.
reject - SMTP 계층에서 메일을 취소합니다.
정렬 모드란 발신자 레코드를 SPF 및 DKIM 서명과 비교하는 정밀도를 의미하는데, 느슨함 또는 엄격함의 두 가지 값을 가질 수 있으며, 느슨함은 ‘r’, 엄격함은 ‘s’로 표시됩니다. 간단히 말해, 느슨함 모드에서는 주어진 도메인의 하위 도메인처럼 부분 일치를 허용하며, 엄격함 모드에서는 완전히 일치해야 합니다.&lt;/p&gt;

  &lt;p&gt;일일 보고서를 받으려면 선택항목인 rua 태그와 함께 이메일 주소를 포함해야 합니다.&lt;/p&gt;

  &lt;p&gt;다음은 DMARC TXT 레코드(_dmarc.your_domain.com IN TXT)의 예입니다. 적절히 수정하여 사용할 수 있습니다. ‘your_domain.com’ 및 ‘postmaster@your_domain.com’은 실제 도메인 이름과 이메일 주소로 변경해야 합니다.&lt;/p&gt;

  &lt;p&gt;다음 TXT 레코드 예에서는 ‘your domain.com’에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 아무런 조치도 취하지 않습니다. 대신 해당하는 모든 메일은 ‘postmaster@your_domain.com’에 전송되는 일일 집계 보고서에 표시됩니다.&lt;/p&gt;

  &lt;p&gt;“v=DMARC1; p=none; rua=mailto:postmaster@your_domain.com”
다음 TXT 레코드 예에서는 ‘your domain.com’에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 이런 메일의 5%에 대해 차단 조치(스팸으로 표시)를 취합니다. 그런 다음 일일 집계 보고서를 ‘postmaster@your_domain.com’으로 보냅니다.&lt;/p&gt;

  &lt;p&gt;“v=DMARC1; p=quarantine; pct=5; rua=mailto:postmaster@your_domain.com”
마지막 예에서는 ‘your_domain.com’에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 이런 메일을 항상 거부합니다. 그런 다음 일일 집계 보고서를 ‘postmaster@your_domain.com’ 및 ‘dmarc@your_domain.com’으로 보냅니다.&lt;/p&gt;

  &lt;p&gt;“v=DMARC1; p=reject; rua=mailto:postmaster@your_domain.com, mailto:dmarc@your_domain.com”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;설명을 보면 알 수 있듯이 이것 또한 메일이 스팸으로 분류되는 것과는 크게 상관이 없다. 하지만 여러 스팸 필터에서 DMARC가 설정된 도메인의 메일을 스팸 지수를 낮게 책정하는 정책을 사용하는 경우가 있어 소개한 것이다. 그도 그럴 것이 메일 품질(스팸, 스푸핑 등)에 대한 관리를 하고자하는 의지를 보이는 것이므로 정상적인 발송자라고 생각할 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;그리고 한가지. DMARC는 모든 메일 수신처에 적용되는 것이 아니다. &lt;a href=&quot;https://dmarc.org/&quot;&gt;dmarc.org&lt;/a&gt; 표준을 준수하는 곳에서만 정책을 확인하고 대응한다.&lt;/p&gt;

&lt;p&gt;DMARC를 어떻게 활용할 것인가에 대해서는 &lt;a href=&quot;http://www.boannews.com/media/view.asp?idx=45489&quot;&gt;이메일 보안을 위한 DMARC의 점진적인 사용법&lt;/a&gt;을 참고하자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;마지막으로 위 설명들을 처리하는데 도움을 줄 수 있는 몇가지 온라인 도구들을 소개하고자 한다.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;온라인 도구&lt;/h3&gt;

&lt;p&gt;레코드 / 키 생성 / 유효성 검사 등을 도와준다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.protodave.com/tools/dkim-key-checker/&quot;&gt;DKIM Key Checker&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://dkimcore.org/tools/keycheck.html&quot;&gt;DKIMCore - Key checker&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.brandonchecketts.com/emailtest.php&quot;&gt;DKIM, SPF, SpamAssassin Email Validator&lt;/a&gt; - DKIM 수신 유효성 검사&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.microsoft.com/mscorp/safety/content/technologies/senderid/wizard/&quot;&gt;Sender ID Framework SPF Record Wizard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;스팸 검사기&lt;/h3&gt;

&lt;p&gt;자신의 메일에 대한 스팸 지수 등을 확인 할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://isnotspam.com/&quot;&gt;ISNotSPAM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mail-tester.com/&quot;&gt;Test the Spammyness of your Emails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
<summary>개인이 정상적인 메일 서비스를 통해 발송한 메일은 수신 측에서 스팸으로 분류될 확률이 적다. 하지만 서버에서 공지/안내 등의 이유로 다량의 메일을 지속적으로 발송할 경우 스팸으로 분류될 확률이 높다. 이 글에서 설명하고자 하는 것은 서버에서 다량의 메일 발송시 스팸으로 분류될 확률을 낮추기 위해 처리해야 할 몇가지를 소개하고자 한다.스팸 필터는 아래에 설명하는 조건 외에도 메일의 내용, 수신한 사용자의 반응(스팸으로 체크) 등의 다양한 조건을 사용해서 스팸을 분류하므로 이 내용을 모두 적용한다고 스팸으로 무조건 분류되지 않는 것은 아니다. 하지만 아래의 조건들을 만족함으로써 정상적인 메일을 발송함에도 불구하고 스팸 서버로 분류되는 것을 어느 정도 예방하기 위한 활동이라고 생각하면 된다. 그리고 아래의 내용은 스팸 서버로 분류되는 상황을 겪으면서 조금씩 추가했던 내용들을 정리한 것이지만 잘못된 부분이 있을 수 있으니 참고용으로 둘러보기를 권장한다. 스팸 필터 정책은 수시로 변경되기도 하고 서비스별로 모두 다른 정책을 사용하므로 아래의 내용이 진리는 아니라는 것이다(사실 그런 것이 있다면 스패머들이 판치는 세상이 될 것이다).그럼 하나씩 알아보자.Reverse DNS 설정Reverse DNS란 DNS의 반대 개념으로서 IP로 Domain Name을 조회하는 것을 말한다. Reverse DNS를 통해 도메인이 조회 가능한 IP를 가지는 서버는 실제 운영되는 서비스 서버일 확률이 높으므로 스팸 서버가 아닐 확률이 높은 것으로 보는 것이다. 특히 구글과 같은 메일 서버들은 Reverse DNS가 등록되지 않은 서버에서 발송한 메일은 스팸 점수를 높게 책정하거나 수신을 거부하는 경우도 있다. 따라서 이메일을 발송하는 서버는 필히 Reverse DNS를 설정하는 것을 권장한다.등록이 되어 있는지를 확인하는 방법은 아래와 같다. 여기서 A.B.C.D는 해당 서버 IP다. 1 2 3 4 5 6 7 8 9101112$ nslookup -type=ptr A.B.C.DServer:		168.126.63.1Address:	168.126.63.1#53Non-authoritative answer:D.C.B.A.in-addr.arpa	name = mail.domain.com.Authoritative answers can be found from:C.B.A.in-addr.arpa	nameserver = rev2.kornet.net.C.B.A.in-addr.arpa	nameserver = rev1.kornet.net.rev1.kornet.net	internet address = 211.216.50.170rev2.kornet.net	internet address = 211.216.50.180Reverse DNS가 정상적으로 설정되어 있다면 위와 같이 조회 결과를 볼 수 있다.등록이 되어 있지 않다면 어떻게 해야 할까? 대부분의 경우(전체 네트워크를 소유하지 않은 경우) 망사업자 측에 요청하여 설정해야 한다.KT 회선을 기준으로 아래의 방법으로 등록 신청이 가능했다. 하지만 얼마전 확인해 보니 사이트가 변경되어 아래의 방법을 사용할 수 없었다. 대부분의 경우 IDC 등에 문의해서 처리하면 된다.  등록 방법 : [아래]① http://dns.kornet.net 사이트 접속② 도메인 등록 요청/문의 클릭③ 새글작성 클릭④ 게시물 유형 -&amp;gt; 리버스 등록, 소속 -&amp;gt; idc 체크, 나머지 정보 기입후 등록rDNS 관련 연락처 : 02-3674-5820SPF(Sender Policy Framework) 레코드 등록구글 관리자 도움말 - SPF 레코드 정보에 SPF에 대해 다음과 같이 설명하고 있다.  SPF 레코드는 도메인을 대표하여 이메일을 보낼 수 있는 메일 서버를 식별하는 DNS(Domain Name Service) 레코드의 한 유형입니다.  SPF 레코드의 목적은 스팸 발송자가 도메인의 위조된 ‘보낸사람’ 주소를 사용하여 메일을 보내지 못하도록 하는 것입니다. 수신자는 SPF 레코드를 참조하여 자신의 도메인에서 보낸 것처럼 위장한 메일이 인증된 메일 서버에서 전송된 것인지를 판별할 수 있습니다.  예를 들어 example.com 도메인에서 Gmail을 사용한다고 가정해 보겠습니다. Google Apps 메일 서버를 도메인에 대한 인증된 메일 서버로 식별하는 SPF 레코드를 만듭니다. 수신자의 메일 서버가 user\@example.com에서 보낸 메일을 수신하는 경우, example.com에 대한 SPF 레코드를 확인하여 유효한 메일인지 여부를 판별할 수 있습니다. 메일이 SPF 레코드에 나열된 Google Apps 메일 서버가 아닌 다른 서버에서 전송된 경우 수신자의 메일 서버에서 이를 스팸으로 간주하여 수신 거부할 수도 있습니다.  도메인에 SPF 레코드가 없는 경우에는 수신자 도메인에서 메일이 인증된 메일 서버에서 전송된 것인지를 확인할 수 없으므로 사용자의 메일이 수신 거부될 수도 있습니다.위 설명을 보면 알 수 있듯이 SPF 레코드 등록의 경우도 메일 발송을 위해서는 필수적으로 해야할 것 중 하나다. 그리고 뒤에 설명할 White Domain 등록을 위해서도 필히 등록이 되어 있어야 한다.SPF 레코드 등록 방법은 잘 설명된 문서들이 많으므로 굳이 여기서 다시 설명하지는 않는다. 다만 간단히 예시만 하나 남긴다.DNS zone 설정에 추가@   IN TXT      &quot;v=spf1 ip4:A.B.C.1 ip4:A.B.C.2 ip4:A.B.C.3 ~all&quot;간단히 설명하자면 다음의 IP(A.B.C.1, A.B.C.2, A.B.C.3)가 설정된 서버에서 해당 도메인을 사용해 메일을 발송할 수 있다는 의미다.화이트 도메인(White Domain) 등록KISA RBL에서 통합 White Domain 등록제를 운영하고 있다.통합 White Domain 등록제에 대해서는 위 사이트에서 아래와 같이 안내하고 있다.  정상적으로 발송하는 대량 이메일이 RBL이력으로 간주되어 차단되는 것을 방지하기 위하여, 사전에 등록된 개인이나 사업자에 한하여 국내 주요 포탈사이트로의 이메일 전송을 보장해주는 제도입니다. ( 무료 )      단, White Domain으로 등록되었다 하더라도 이후 모니터링을 통해 RBL이력발송 사실이 확인되면, 즉각 차단 조치되며 White 리스트에서도 삭제될 수 있습니다.    기존에 개별 포탈에서 ‘IP 등록제’, ‘IP 실명제’등의 이름으로 운영해오던 것을 2006년 9월 1일부로 KISARBL이 등록접수/관리/운영을 통합한 것이므로, KISARBL에 White Domain으로 등록하게 되면 , 여러번 별도로 등록할 필요없이 참여하고 있는 포탈사이트에 동시에 등록됩니다 .      단 , 개인의 경우에는 일부 포탈사이트에서 자사의 정책상 등록을 허용하지 않습니다.  위 설명을 보면 알 수 있듯이 White Domain은 국내 포털 사이트로 메일을 발송하는 경우에 적용될 수 있는 것으로 범위가 제한되지만 대부분의 수신자가 국내 포털 사이트의 이메일을 사용하고 있는 것을 감안하면 이 또한 필수적으로 등록하는 것이 좋다. 등록 방법은 위 사이트에서 안내하고 있으므로 별도로 설명하지는 않는다. 하지만 등록 과정이 그리 복잡하지 않으므로 큰 어려움은 없을 것으로 생각된다.상기 안내한 사항들은 필수적으로 처리하는 것이 좋은 것들이고 이후의 사항들은 가급적 처리하는 것이 좋은 것이다. 하지만 스팸으로 분류되지 않기 위해서는 최대한 할 수 있는 모든 방법을 동원하는 것이 좋다. 그렇게 해도 스팸으로 빠진다. 따라서 확률을 낮추는데 집중해야 한다.정확하게 이야기 하자면 요즘엔 메일 내용을 더 중요하게 다루는 경우가 많아 내용 작성에도 공을 들여야 한다. 여기서 내용이란 의미를 갖는 문장 뿐아니라 html 마크업과 같은 메일 전문을 뜻한다. 하지만 이 부분은 이 글에서 이야기 하고자하는 것이 아니므로 이 이상의 언급은 피하려 한다.DKIM(DomainKeys Identified Mail) 인증Google Apps 관리자 도움말 - DKIM으로 이메일 인증에서는 다음과 같이 DKIM을 소개하고 있다.  DKIM 표준을 사용하여 발신 메일 헤더에 디지털 서명을 추가하면 스푸핑을 방지하는 데 도움이 됩니다. 이렇게 하려면 비공개 도메인 키를 사용하여 도메인의 발신 메일 헤더를 암호화하고 키의 공개 버전을 도메인의 DNS 레코드에 추가해야 합니다. 그러면 수신 서버가 공개 키를 검색하여 수신 헤더의 암호를 해독하고 메일이 실제로 사용자의 도메인에서 전송되었으며 전송 과정에서 변경되지 않았는지 여부를 확인할 수 있습니다.위 설명을 보면 알 수 있듯이 스푸핑 방지에 도움을 준다. 따라서 수신된 메일이 스푸핑되지 않았음을 보증하므로 스팸으로 분류될 확률을 낮추는데 도움이 된다(기술적 의미에서는 스팸과 아무런 연관성이 없으나 스팸 필터에서 DKIM이 적용된 메일의 스팸 지수를 낮추는 정책을 사용하는 곳들이 많다).DKIM에서 사용할 서명 키는 openssl등을 이용해서 직접 생성하는 것도 가능하지만 잘 만들어진 온라인 도구들이 있다. 그중에서 DKIM Core Tools를 간략히 소개하고자 한다. 직접 생성하는 방법을 사용해도 되나 여기서는 다루지 않는다(RSA 키를 생성하는 것이므로 쉽게 정보를 얻을 수 있다). 단, 직접 생성했을 경우라면 DNS에 등록할 레코드를 만드는 것이 조금 복잡할 수 있으니 DNS 레코드 생성을 도와주는 DNS Watch - DKIM DNS Wizard를 활용하자.http://dkimcore.org/tools/ 로 접속해보면 상단에 도메인을 넣는 란이 있다. 여기에 원하는 도메인을 입력하고 Generate 버튼을 누르면 private/public key를 만들어 보여주며 DNS에 설정할 DKIM 레코드도 생성하여 바로 보여준다(친절하게도 Bind9, Tinydns, Raw 포멧으로 제공한다). 여기서 제공하는 DKIM 레코드를 DNS에 추가하면 된다.그런데 DKIM의 경우는 앞서 설명했던 것들과 다르게 설정만하면 완료되는 것이 아니다. DKIM 레코드에는 공개키를 제공하는 것이므로 메일 발송시 비공개 도메인 키를 사용하여 도메인의 발신 메일 헤더를 암호화하는 과정이 필요하다. 이 부분에 대해서는 오픈소스로 제작된 라이브러리들이 다수 있으니 쉽게 찾을 수 있다. 아니면 직접 구현해도 된다. 다만 RSA를 다루어야 하므로 약간의 지식이 필요하다.DMARC(Domain-based Message Authentication, Reporting and Conformance) 정책 게시dmarc.org에서는 DMARC에 대해 다음과 같이 설명하고 있다.  DMARC, which stands for “Domain-based Message Authentication, Reporting &amp;amp; Conformance”, is an email authentication protocol. It builds on the widely deployed SPF and DKIM protocols, adding a reporting function that allows senders and receivers to improve and monitor protection of the domain from fraudulent email.위 내용을 번역한 것은 아니지만 DMARC를 조금 더 이해하기 쉽게 설명하자면 다음과 같다.DMARC는 이메일 인증 프로토콜로써 도메인 기반 메시지 인증, 보고, 준수를 의미한다. DMARC는 SPF, DKIM 두 가지 방법에 의존하여 서명 무결성을 확인한다. 메일이 SPF, DKIM 검사에 실패하면 DMARC 정책이 실행된다. 어떤 방법을 사용하든 두 가지 검사에 모두 실패하지 않는 한 메일은 DMARC를 통과한 것으로 간주된다. 그렇다면 DMARC를 통과하지 못하면 어떻게 되는가? 이때 어떻게 대응할 것인지에 대해서 정의하는 것이 DMARC 정책 게시라고 볼 수 있다.Google Apps 관리자 도움말 - DMARC 레코드 추가에서 설명하고 있는 DMARC TXT 레코드에 대한 설명은 아래와 같다.            태그 이름      필수항목      목적      샘플                  v      필수      프로토콜 버전      v=DMARC1              p      필수      도메인에 대한 정책      p=quarantine              pct      선택사항      필터링이 적용되는 메일의 비율(%)      pct=20              rua      선택사항      집계 보고서의 보고 URI      rua=mailto:aggrep@example.com              sp      선택사항	도메인의 하위 도메인에 대한 정책      sp=reject                     aspf      선택사항      SPF의 정렬 모드      aspf=r        v(버전) 및 p(정책) 태그만 필수항목입니다. 가능한 정책 설정, 즉 메일 처리에는 다음 3가지가 있습니다.  none - 아무 조치도 취하지 않습니다. 문제가 발생한 메일을 일일 보고서에 기록만 합니다.quarantine - 문제가 있는 메일을 스팸으로 표시합니다.reject - SMTP 계층에서 메일을 취소합니다.정렬 모드란 발신자 레코드를 SPF 및 DKIM 서명과 비교하는 정밀도를 의미하는데, 느슨함 또는 엄격함의 두 가지 값을 가질 수 있으며, 느슨함은 ‘r’, 엄격함은 ‘s’로 표시됩니다. 간단히 말해, 느슨함 모드에서는 주어진 도메인의 하위 도메인처럼 부분 일치를 허용하며, 엄격함 모드에서는 완전히 일치해야 합니다.  일일 보고서를 받으려면 선택항목인 rua 태그와 함께 이메일 주소를 포함해야 합니다.  다음은 DMARC TXT 레코드(_dmarc.your_domain.com IN TXT)의 예입니다. 적절히 수정하여 사용할 수 있습니다. ‘your_domain.com’ 및 ‘postmaster@your_domain.com’은 실제 도메인 이름과 이메일 주소로 변경해야 합니다.  다음 TXT 레코드 예에서는 ‘your domain.com’에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 아무런 조치도 취하지 않습니다. 대신 해당하는 모든 메일은 ‘postmaster@your_domain.com’에 전송되는 일일 집계 보고서에 표시됩니다.  “v=DMARC1; p=none; rua=mailto:postmaster@your_domain.com”다음 TXT 레코드 예에서는 ‘your domain.com’에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 이런 메일의 5%에 대해 차단 조치(스팸으로 표시)를 취합니다. 그런 다음 일일 집계 보고서를 ‘postmaster@your_domain.com’으로 보냅니다.  “v=DMARC1; p=quarantine; pct=5; rua=mailto:postmaster@your_domain.com”마지막 예에서는 ‘your_domain.com’에서 전송된 것으로 표시되는 메일이 DMARC 검사에 실패하는 경우, 이런 메일을 항상 거부합니다. 그런 다음 일일 집계 보고서를 ‘postmaster@your_domain.com’ 및 ‘dmarc@your_domain.com’으로 보냅니다.  “v=DMARC1; p=reject; rua=mailto:postmaster@your_domain.com, mailto:dmarc@your_domain.com”설명을 보면 알 수 있듯이 이것 또한 메일이 스팸으로 분류되는 것과는 크게 상관이 없다. 하지만 여러 스팸 필터에서 DMARC가 설정된 도메인의 메일을 스팸 지수를 낮게 책정하는 정책을 사용하는 경우가 있어 소개한 것이다. 그도 그럴 것이 메일 품질(스팸, 스푸핑 등)에 대한 관리를 하고자하는 의지를 보이는 것이므로 정상적인 발송자라고 생각할 수 있는 것이다.그리고 한가지. DMARC는 모든 메일 수신처에 적용되는 것이 아니다. dmarc.org 표준을 준수하는 곳에서만 정책을 확인하고 대응한다.DMARC를 어떻게 활용할 것인가에 대해서는 이메일 보안을 위한 DMARC의 점진적인 사용법을 참고하자.마지막으로 위 설명들을 처리하는데 도움을 줄 수 있는 몇가지 온라인 도구들을 소개하고자 한다.온라인 도구레코드 / 키 생성 / 유효성 검사 등을 도와준다.  DKIM Key Checker      DKIMCore - Key checker        DKIM, SPF, SpamAssassin Email Validator - DKIM 수신 유효성 검사    Sender ID Framework SPF Record Wizard스팸 검사기자신의 메일에 대한 스팸 지수 등을 확인 할 수 있다.  ISNotSPAM  Test the Spammyness of your Emails</summary>
</entry>
<entry>
<title>Yum Delta RPM 사용하기</title>
<link href="http://blog.asamaru.net/2015/12/16/delta-rpm/" rel="alternate" type="text/html" title="Yum Delta RPM 사용하기" />
<published>2015-12-16T08:47:36+09:00</published>
<updated>2015-12-16T08:47:36+09:00</updated>
<id>http://blog.asamaru.net/2015/12/16/delta-rpm</id>
<content type="html" xml:base="http://blog.asamaru.net/2015/12/16/delta-rpm/">&lt;p&gt;최근부터 CentOS 7을 사용하면서 yum으로 update를 하면서 아래와 같은 오류가 자주 발생했다. 하지만 항상 나오는 것은 아니다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;Error: Delta RPMs disabled because /usr/bin/applydeltarpm not installed.
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이 메시지가 나오지만 실제로는 동작에는 이상이 없다. 하지만 계속 메시지가 나오니 보기도 싫고 다른 문제가 생길 수도 있을 것으로 생각되어 좀 찾아봤다.&lt;/p&gt;

&lt;p&gt;일단 &lt;strong&gt;&lt;a href=&quot;https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM&quot;&gt;Delta RPM&lt;/a&gt; 이라고 하는 것은 RPM 패키지 버전별로 변경사항만 가지고 있는 것을 뜻한다.&lt;/strong&gt; 다시 말해 update 시에 전체 RPM을 다운 받아서 설치하지 않고 변경사항만 다운 받아서 update를 하게 해준다는 것이다.&lt;/p&gt;

&lt;p&gt;처리 과정을 보자면 yum에서 DRPM(Delta RPM)을 다운 받아 이전 패키지에 변경 사항을 병합하여 새로운 RPM을 빌드한 후 설치가 이루어 진다고 한다. 따라서 다운 받는 시간은 줄어들지만 병합하는 시간이 추가로 소요된다. 하지만 네트워크 비용이 더 크기 때문에 사용하는 것이 더 유리하다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM&quot;&gt;Delta RPM&lt;/a&gt;은 Fedora 11부터 적용되었다고 하며 RPM을 사용하는 다른 Linux에서도 사용중이라고 한다. 그런데 CentOS의 minimal 설치시에는 포함되지 않기 때문에 위 오류가 난다고 한다. 그리고 update 대상이 DRPM을 지원할 경우만 위 오류가 표시되는 것으로 보인다.&lt;/p&gt;

&lt;p&gt;이 오류를 제거하고 &lt;a href=&quot;https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM&quot;&gt;Delta RPM&lt;/a&gt;을 사용하는 방법은 간단하다. deltarpm 패키지를 설치하면 된다.&lt;/p&gt;

&lt;p&gt;우선 오류에 나와있는 프로그램의 경로(&lt;code&gt;/usr/bin/applydeltarpm&lt;/code&gt;)를 이용해서 패키지명을 찾는다. 사실 이 과정은 굳이 할 필요가 없다(이미 패키지명을 알고 있으니).&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum provides /usr/bin/applydeltarpm

Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: ftp.daumkakao.com
 * epel: ftp.cuhk.edu.hk
 * extras: ftp.daumkakao.com
 * updates: ftp.daumkakao.com
 * webtatic: sp.repo.webtatic.com
deltarpm-3.6-3.el7.x86_64 : Create deltas between rpms
Repo        : base
Matched from:
Filename    : /usr/bin/applydeltarpm
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;패키지명을 알았으니 이제 설치만 하면 된다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum install deltarpm
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;끝이다. 이제부터 &lt;a href=&quot;https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM&quot;&gt;Delta RPM&lt;/a&gt;이 지원되는 패키지는 DRPM을 이용해서 다운받는 시간이 줄어들 것이다.&lt;/p&gt;
</content>
<summary>최근부터 CentOS 7을 사용하면서 yum으로 update를 하면서 아래와 같은 오류가 자주 발생했다. 하지만 항상 나오는 것은 아니다.1Error: Delta RPMs disabled because /usr/bin/applydeltarpm not installed.이 메시지가 나오지만 실제로는 동작에는 이상이 없다. 하지만 계속 메시지가 나오니 보기도 싫고 다른 문제가 생길 수도 있을 것으로 생각되어 좀 찾아봤다.일단 Delta RPM 이라고 하는 것은 RPM 패키지 버전별로 변경사항만 가지고 있는 것을 뜻한다. 다시 말해 update 시에 전체 RPM을 다운 받아서 설치하지 않고 변경사항만 다운 받아서 update를 하게 해준다는 것이다.처리 과정을 보자면 yum에서 DRPM(Delta RPM)을 다운 받아 이전 패키지에 변경 사항을 병합하여 새로운 RPM을 빌드한 후 설치가 이루어 진다고 한다. 따라서 다운 받는 시간은 줄어들지만 병합하는 시간이 추가로 소요된다. 하지만 네트워크 비용이 더 크기 때문에 사용하는 것이 더 유리하다.Delta RPM은 Fedora 11부터 적용되었다고 하며 RPM을 사용하는 다른 Linux에서도 사용중이라고 한다. 그런데 CentOS의 minimal 설치시에는 포함되지 않기 때문에 위 오류가 난다고 한다. 그리고 update 대상이 DRPM을 지원할 경우만 위 오류가 표시되는 것으로 보인다.이 오류를 제거하고 Delta RPM을 사용하는 방법은 간단하다. deltarpm 패키지를 설치하면 된다.우선 오류에 나와있는 프로그램의 경로(/usr/bin/applydeltarpm)를 이용해서 패키지명을 찾는다. 사실 이 과정은 굳이 할 필요가 없다(이미 패키지명을 알고 있으니). 1 2 3 4 5 6 7 8 910111213$ yum provides /usr/bin/applydeltarpmLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile * base: ftp.daumkakao.com * epel: ftp.cuhk.edu.hk * extras: ftp.daumkakao.com * updates: ftp.daumkakao.com * webtatic: sp.repo.webtatic.comdeltarpm-3.6-3.el7.x86_64 : Create deltas between rpmsRepo        : baseMatched from:Filename    : /usr/bin/applydeltarpm패키지명을 알았으니 이제 설치만 하면 된다.1$ yum install deltarpm끝이다. 이제부터 Delta RPM이 지원되는 패키지는 DRPM을 이용해서 다운받는 시간이 줄어들 것이다.</summary>
</entry>
<entry>
<title>안드로이드 앱 종료 방법</title>
<link href="http://blog.asamaru.net/2015/12/15/android-app-finish/" rel="alternate" type="text/html" title="안드로이드 앱 종료 방법" />
<published>2015-12-15T19:38:39+09:00</published>
<updated>2015-12-15T19:38:39+09:00</updated>
<id>http://blog.asamaru.net/2015/12/15/android-app-finish</id>
<content type="html" xml:base="http://blog.asamaru.net/2015/12/15/android-app-finish/">&lt;p&gt;안드로이드에서 앱의 종료는 보통 Root Activity에서 &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#finish%28%29&quot;&gt;finish()&lt;/a&gt;를 사용한다. 그런데 앱의 종료는 이외에도 여러가지 방법이 있고 각각이 다른 상황을 만들어 낸다. 당연히 구글에서는 &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#finish%28%29&quot;&gt;finish()&lt;/a&gt;를 권장한다고 한다. 하지만 상황적으로 프로세스를 완전히 종료해야 하는 경우가 있을 수 있다. 아래에 설명하고자 하는 것들은 안정적으로 사용할 수 있는 방법이라고 장담하지는 못한다. 충분히 테스트된 코드가 아니라 인터넷 상에서 소개되는 방법들을 정리한 것이다. 물론 기본적인 테스트는 했다.&lt;/p&gt;

&lt;p&gt;우선 Activity만 종료하는 방법부터 알아보자.&lt;/p&gt;

&lt;h3 id=&quot;finishaffinityhttpdeveloperandroidcomreferenceandroidappactivityhtmlfinishaffinity2829--&quot;&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#finishAffinity%28%29&quot;&gt;finishAffinity()&lt;/a&gt;를 사용하는 방법&lt;/h3&gt;

&lt;p&gt;Root Activity에서 &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#finish%28%29&quot;&gt;finish()&lt;/a&gt;를 사용해서 종료하는 것은 굳이 설명하지 않아도 될 것으로 생각한다. 단, 이 방법은 현재 Activity가 Root Activity가 아니면 Root Activity를 찾아가는 과정이 필요하므로 복잡해질 수 있다. 예를들어 아래와 같이 처리한다(이 코드는 테스트하지 않았다. 그리고 호출하는 Activity와 Root Activity에서 각각 처리해야 한다).&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Root Activity를 호출&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXTRA_FINISH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        
&lt;span class=&quot;n&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// Root Activity에서 인자를 받아 종료&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getExtras&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getIntentExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXTRA_FINISH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이런 번거로움을 해결해 줄 수 있는 것이 &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#finishAffinity%28%29&quot;&gt;finishAffinity()&lt;/a&gt;다. 이 함수를 사용하면 어느 Activity에서든 모든 부모 Activity를 닫을 수 있다. 단, 이 함수는 API 16부터 사용 가능하다. 하지만 support library v4를 사용하면 이하 버전에서도 이 함수를 사용할 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// only API 16+&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finishAffinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// support library v4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ActivityCompat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finishAffinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;h3 id=&quot;activity-&quot;&gt;홈 화면 Activity 띄우기&lt;/h3&gt;

&lt;p&gt;이 방법은 Activity의 종료라고 하기에는 조금 애매한 방법이다. 일단 아래의 소스를 보자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;homeIntent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_MAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;homeIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addCategory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CATEGORY_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;homeIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;startActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;homeIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;소스를 보면 알겠지만 말그대로 홈 화면 Activity를 띄우는 것이다. 어쨌든 사용자가 보기에는 앱이 종료된 것처럼 보인다. 뒤에 남겨진 프로세스가 계속 살아남는지 Activity finish와 동일한 생명주기를 갖는지는 테스트 해보지 않았다.&lt;/p&gt;

&lt;h3 id=&quot;finishandremovetask-httpdeveloperandroidcomreferenceandroidappactivityhtmlfinishandremovetask2829--&quot;&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#finishAndRemoveTask%28%29&quot;&gt;finishAndRemoveTask ()&lt;/a&gt;를 사용하는 방법&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#finishAndRemoveTask%28%29&quot;&gt;finishAndRemoveTask ()&lt;/a&gt;는 Activity를 종료하고 Task Manager(최근 앱 사용 목록)에서도 해당 앱을 제거한다. &lt;strong&gt;단, Task를 종료하지만 Process까지 종료하지는 않는다.&lt;/strong&gt; 앱을 &lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#finishAndRemoveTask%28%29&quot;&gt;finishAndRemoveTask ()&lt;/a&gt;로 종료하고 Task Manager를 보면 해당 앱이 없어 Process가 종료된 것처럼 보이지만 이 상태에서 다시 앱을 실행하면 Application Class의 onCreate()가 실행되지 않는다(Process가 종료되었다면 이 함수가 다시 실행되었을 것이다). 메뉴얼에는 아래와 같이 나와있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the Activity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그리고 이 함수는 API 21에서 추가된 함수로 아직까지는 호환성 함수는 없는 것으로 보인다. 그나마 찾아본 바로는 chromium 소스 코드 중 &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/base/+/master/android/java/src/org/chromium/base/ApiCompatibilityUtils.java&quot;&gt;ApiCompatibilityUtils.java&lt;/a&gt;에 있는 아래의 코드가 있다. 하지만 사용에 큰 의미는 없어보이니 참고만 하자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;finishAndRemoveTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LOLLIPOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finishAndRemoveTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SDK_INT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LOLLIPOP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// crbug.com/395772 : Fallback for Activity.finishAndRemoveTask() failing.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FinishAndRemoveTaskWithRetry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FinishAndRemoveTaskWithRetry&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETRY_DELAY_MS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRY_COUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTryCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;FinishAndRemoveTaskWithRetry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finishAndRemoveTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mTryCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFinishing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mTryCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_TRY_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ThreadUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postOnUiThreadDelayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RETRY_DELAY_MS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;h3 id=&quot;process-&quot;&gt;Process 종료하기&lt;/h3&gt;

&lt;p&gt;이제부터는 앱을 종료하고 Process까지 완전히 종료시키는 방법들이다. 이 부분에 대해서는 의견이 다양한데 앱 종료시 처리되어야 할 프로세스들이 정상적으로 동작하지 못할 수 있다는 우려로 사용을 자제하라는 의견도 있고 알아서 처리하므로 상관없다는 의견도 있다. 테스트를 아직 해보지 못해 어떤 문제가 발생하는지에 대해서는 설명할 수 없으니 사용시 유의하자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/5036668&quot;&gt;How to close Android application?&lt;/a&gt;에 소개된  Class 소스의 일부를 보자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;killApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;killSafely&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;killSafely&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * Notify the system to finalize and collect all objects of the app&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * on exit so that the virtual machine running the app can be killed&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * by the system without causing issues. NOTE: If this is set to&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * true then the virtual machine will not be killed until all of its&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * threads have closed.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runFinalizersOnExit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * Force the system to close the app down completely instead of&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * retaining it in the background. The virtual machine that runs the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * app will be killed. The app will be completely created as a new&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * app in a new virtual machine running in a new process if the user&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * starts the app again.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * Alternatively the process that runs the virtual machine could be&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * abruptly killed. This is the quickest way to remove the app from&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * the device but it could cause problems since resources will not&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * be finalized first. For example, all threads running under the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * process will be abruptly killed when the process is abruptly&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * killed. If one of those threads was making multiple related&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * changes to the database, then it may have committed some of those&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * changes but not all of those changes when it was abruptly killed.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;killProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myPid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이 함수에서 Process를 종료하는 방법은 크게 두가지로 나뉜다. &lt;code&gt;System.exit()&lt;/code&gt;를 사용하는 방법과 &lt;code&gt;android.os.Process.killProcess&lt;/code&gt;를 사용하는 방법이다. 함수를 보면 알다시피 &lt;code&gt;System.exit()&lt;/code&gt;를 사용하는 것이 더 안전한 방법으로 보인다. 그런데 이 부분에 대해서도 사람들의 의견이 차이가 있다. &lt;code&gt;System.runFinalizersOnExit(true)&lt;/code&gt; 대신 &lt;code&gt;System.runFinalization()&lt;/code&gt;를 호출하여 강제로 Finalization을 수행하는 방법을 설명하는 사람도 있고 이렇게하면 불안정하게 동작할 수 있으니 그냥 &lt;code&gt;System.exit()&lt;/code&gt;만 호출하라는 사람도 있고… 어쨌든 개인적으로는 위 함수가 가장 적절하게 구성되어 있다고 생각한다. &lt;strong&gt;단, 주의사항 한가지. 이 부분은 직접 테스트 해본 것은 아니나 두개 이상의 Activity가 떠 있는 상황에서 Process를 종료시키면 Process가 살아난다는 이야기도 있다.&lt;/strong&gt; 그런 이유가 아니더라도 Activity의 종료 프로세스를 제대로 동작시키는 것이 좋다는 생각으로 나는 아래와 같이 처리하고 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ActivityCompat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finishAffinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runFinalizersOnExit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;현재까지는 이 방법으로 이상없이 사용하고 있으나 서두에서 언급한 것처럼 충분한 테스트를 거친 내용들이 아니므로 사용시에는 유의하기 바란다.&lt;/p&gt;
</content>
<summary>안드로이드에서 앱의 종료는 보통 Root Activity에서 finish()를 사용한다. 그런데 앱의 종료는 이외에도 여러가지 방법이 있고 각각이 다른 상황을 만들어 낸다. 당연히 구글에서는 finish()를 권장한다고 한다. 하지만 상황적으로 프로세스를 완전히 종료해야 하는 경우가 있을 수 있다. 아래에 설명하고자 하는 것들은 안정적으로 사용할 수 있는 방법이라고 장담하지는 못한다. 충분히 테스트된 코드가 아니라 인터넷 상에서 소개되는 방법들을 정리한 것이다. 물론 기본적인 테스트는 했다.우선 Activity만 종료하는 방법부터 알아보자.finishAffinity()를 사용하는 방법Root Activity에서 finish()를 사용해서 종료하는 것은 굳이 설명하지 않아도 될 것으로 생각한다. 단, 이 방법은 현재 Activity가 Root Activity가 아니면 Root Activity를 찾아가는 과정이 필요하므로 복잡해질 수 있다. 예를들어 아래와 같이 처리한다(이 코드는 테스트하지 않았다. 그리고 호출하는 Activity와 Root Activity에서 각각 처리해야 한다).123456// Root Activity를 호출Intent intent  = new Intent(this, FirstActivity.class);intent.putExtra(EXTRA_FINISH, true);intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);        startActivity(intent);finish();1234// Root Activity에서 인자를 받아 종료if (getExtras() != null &amp;amp;&amp;amp; getIntentExtra(EXTRA_FINISH, false)) {   finish();}이런 번거로움을 해결해 줄 수 있는 것이 finishAffinity()다. 이 함수를 사용하면 어느 Activity에서든 모든 부모 Activity를 닫을 수 있다. 단, 이 함수는 API 16부터 사용 가능하다. 하지만 support library v4를 사용하면 이하 버전에서도 이 함수를 사용할 수 있다.12345// only API 16+activity.finishAffinity();// support library v4ActivityCompat.finishAffinity(activity);홈 화면 Activity 띄우기이 방법은 Activity의 종료라고 하기에는 조금 애매한 방법이다. 일단 아래의 소스를 보자.1234Intent homeIntent = new Intent(Intent.ACTION_MAIN);homeIntent.addCategory(Intent.CATEGORY_HOME);homeIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);startActivity(homeIntent);소스를 보면 알겠지만 말그대로 홈 화면 Activity를 띄우는 것이다. 어쨌든 사용자가 보기에는 앱이 종료된 것처럼 보인다. 뒤에 남겨진 프로세스가 계속 살아남는지 Activity finish와 동일한 생명주기를 갖는지는 테스트 해보지 않았다.finishAndRemoveTask ()를 사용하는 방법finishAndRemoveTask ()는 Activity를 종료하고 Task Manager(최근 앱 사용 목록)에서도 해당 앱을 제거한다. 단, Task를 종료하지만 Process까지 종료하지는 않는다. 앱을 finishAndRemoveTask ()로 종료하고 Task Manager를 보면 해당 앱이 없어 Process가 종료된 것처럼 보이지만 이 상태에서 다시 앱을 실행하면 Application Class의 onCreate()가 실행되지 않는다(Process가 종료되었다면 이 함수가 다시 실행되었을 것이다). 메뉴얼에는 아래와 같이 나와있다.  Call this when your activity is done and should be closed and the task should be completely removed as a part of finishing the Activity.그리고 이 함수는 API 21에서 추가된 함수로 아직까지는 호환성 함수는 없는 것으로 보인다. 그나마 찾아본 바로는 chromium 소스 코드 중 ApiCompatibilityUtils.java에 있는 아래의 코드가 있다. 하지만 사용에 큰 의미는 없어보이니 참고만 하자. 1 2 3 4 5 6 7 8 91011121314151617181920212223242526272829303132public static void finishAndRemoveTask(Activity activity) {    if (Build.VERSION.SDK_INT &amp;gt; Build.VERSION_CODES.LOLLIPOP) {        activity.finishAndRemoveTask();    } else if (Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP) {        // crbug.com/395772 : Fallback for Activity.finishAndRemoveTask() failing.        new FinishAndRemoveTaskWithRetry(activity).run();    } else {        activity.finish();    }}private static class FinishAndRemoveTaskWithRetry implements Runnable {    private static final long RETRY_DELAY_MS = 500;    private static final long MAX_TRY_COUNT = 3;    private final Activity mActivity;    private int mTryCount;    FinishAndRemoveTaskWithRetry(Activity activity) {        mActivity = activity;    }    @Override    public void run() {        mActivity.finishAndRemoveTask();        mTryCount++;        if (!mActivity.isFinishing()) {            if (mTryCount &amp;lt; MAX_TRY_COUNT) {                ThreadUtils.postOnUiThreadDelayed(this, RETRY_DELAY_MS);            } else {                mActivity.finish();            }        }    }}Process 종료하기이제부터는 앱을 종료하고 Process까지 완전히 종료시키는 방법들이다. 이 부분에 대해서는 의견이 다양한데 앱 종료시 처리되어야 할 프로세스들이 정상적으로 동작하지 못할 수 있다는 우려로 사용을 자제하라는 의견도 있고 알아서 처리하므로 상관없다는 의견도 있다. 테스트를 아직 해보지 못해 어떤 문제가 발생하는지에 대해서는 설명할 수 없으니 사용시 유의하자.How to close Android application?에 소개된  Class 소스의 일부를 보자. 1 2 3 4 5 6 7 8 9101112131415161718192021222324252627282930313233public static void killApp(boolean killSafely) {    if (killSafely) {        /*         * Notify the system to finalize and collect all objects of the app         * on exit so that the virtual machine running the app can be killed         * by the system without causing issues. NOTE: If this is set to         * true then the virtual machine will not be killed until all of its         * threads have closed.         */        System.runFinalizersOnExit(true);        /*         * Force the system to close the app down completely instead of         * retaining it in the background. The virtual machine that runs the         * app will be killed. The app will be completely created as a new         * app in a new virtual machine running in a new process if the user         * starts the app again.         */        System.exit(0);    } else {        /*         * Alternatively the process that runs the virtual machine could be         * abruptly killed. This is the quickest way to remove the app from         * the device but it could cause problems since resources will not         * be finalized first. For example, all threads running under the         * process will be abruptly killed when the process is abruptly         * killed. If one of those threads was making multiple related         * changes to the database, then it may have committed some of those         * changes but not all of those changes when it was abruptly killed.         */        android.os.Process.killProcess(android.os.Process.myPid());    }}이 함수에서 Process를 종료하는 방법은 크게 두가지로 나뉜다. System.exit()를 사용하는 방법과 android.os.Process.killProcess를 사용하는 방법이다. 함수를 보면 알다시피 System.exit()를 사용하는 것이 더 안전한 방법으로 보인다. 그런데 이 부분에 대해서도 사람들의 의견이 차이가 있다. System.runFinalizersOnExit(true) 대신 System.runFinalization()를 호출하여 강제로 Finalization을 수행하는 방법을 설명하는 사람도 있고 이렇게하면 불안정하게 동작할 수 있으니 그냥 System.exit()만 호출하라는 사람도 있고… 어쨌든 개인적으로는 위 함수가 가장 적절하게 구성되어 있다고 생각한다. 단, 주의사항 한가지. 이 부분은 직접 테스트 해본 것은 아니나 두개 이상의 Activity가 떠 있는 상황에서 Process를 종료시키면 Process가 살아난다는 이야기도 있다. 그런 이유가 아니더라도 Activity의 종료 프로세스를 제대로 동작시키는 것이 좋다는 생각으로 나는 아래와 같이 처리하고 있다.123ActivityCompat.finishAffinity(this);System.runFinalizersOnExit(true);System.exit(0);현재까지는 이 방법으로 이상없이 사용하고 있으나 서두에서 언급한 것처럼 충분한 테스트를 거친 내용들이 아니므로 사용시에는 유의하기 바란다.</summary>
</entry>
<entry>
<title>안드로이드 Realm 0.82.2 -&amp;gt; 0.86.0 버전업</title>
<link href="http://blog.asamaru.net/2015/12/10/realm/" rel="alternate" type="text/html" title="안드로이드 Realm 0.82.2 -&gt; 0.86.0 버전업" />
<published>2015-12-10T20:43:17+09:00</published>
<updated>2015-12-10T20:43:17+09:00</updated>
<id>http://blog.asamaru.net/2015/12/10/realm</id>
<content type="html" xml:base="http://blog.asamaru.net/2015/12/10/realm/">&lt;p&gt;모바일 앱 개발시에 DB는 주로 Sqlite 또는 Core Data를 많이 사용한다. 그런데 Sqlite 등을 사용하는 것이 조금 불편한 부분들이 많아서 지난 앱 개발시 &lt;a href=&quot;https://realm.io/kr/&quot;&gt;Realm&lt;/a&gt;을 사용했다. &lt;a href=&quot;https://realm.io/kr/&quot;&gt;Realm&lt;/a&gt;을 사용하면 개발이 용이해지기는 한데 간혹 다루기가 까다로워지는 경우가 있다. 사실 그런 문제 상황은 내가 사용시 뭔가를 잘못했을 확률이 높지만 개인적으로 다소 예민한 라이브러리라고 생각한다. 어찌보면 당연할 수도 있는 것이 아직 1.0 버전이 되지도 못한 라이브러리니 그럴만도 하다. 실제로 아직은 버전업이 자주 발생하고 버전업시에 변경 사항이 다소 있는 편이다. 중요 변경이 있을 때 마이그레이션을 잘못하거나 하면 앱 크래시의 원인이 되기도 하니 버전업시에는 유의해야 한다.
&lt;strong&gt;그렇지만 다행인 것은 &lt;a href=&quot;https://realm.io/kr/docs/java/latest/&quot;&gt;문서화&lt;/a&gt;가 잘되어 있고 한글본도 번역도 빠르게 올라온다.&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;얼마전 기존 프로젝트의 Realm의 0.82.2에서 0.86.0으로 버전업을 했다(버전을 확인한지 그리 오래되지 않았는데 그 사이 많이도 버전업되었다). 그랬더니 아래와 같은 오류가 발생했다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;Field &#39;date&#39; is required. Either set @Required to field &#39;date&#39; or migrate using io.realm.internal.Table.convertColumnToNullable(). : io.realm.exceptions.RealmMigrationNeededException: Field &#39;date&#39; is required. Either set @Required to field &#39;date&#39; or migrate using io.realm.internal.Table.convertColumnToNullable().
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;사용하는 테이블의 &lt;code&gt;date&lt;/code&gt; 필드가 &lt;code&gt;required&lt;/code&gt;이니 &lt;code&gt;@Required&lt;/code&gt; 어노테이션을 붙이거나 테이블을 마이그레이션하라는 안내다. 이미 Realm에서 해결 방법을 친절히도 안내해주고 있다. &lt;code&gt;@Required&lt;/code&gt;는 기존에 사용하지 않던 것이라 찾아봤다. &lt;a href=&quot;https://realm.io/kr/news/realm-java-0.83.0/&quot;&gt;Realm 자바 0.83 — Null 지원!&lt;/a&gt;를 보니 0.83 버전에서 데이터값으로 null을 사용할 수 있게 됨에 따라 추가된 어노테이션이다. 그러니 기존 0.82.2의 데이터는 null이 될 수 없었으므로 required 타입으로 인식하는 것이다. 그외에도 다른 변경 사항을 보고 싶다면 &lt;a href=&quot;https://github.com/realm/realm-java/blob/master/changelog.txt&quot;&gt;changelog&lt;/a&gt;를 참고하자.&lt;/p&gt;

&lt;p&gt;기존에도 null이 들어올 수 없는 구조로 프로그램되어 있었으니 &lt;code&gt;@Required&lt;/code&gt;를 해당 필드(변수)에 붙이는 것으로 해결하는 것이 맞겠다. 나는 여기서 다른 문제를 겪었었는데 &lt;code&gt;@Required&lt;/code&gt;만 붙이면 될 것을 스키마 버전 정보까지 올리는 바람에 엉망이 되었었다. 어쨌든 결론은 이 문제에 대해서는 &lt;code&gt;@Required&lt;/code&gt;를 붙이는 방법으로 간단히 해결된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그런데 문제는 여기서 끝나지 않았다. &lt;a href=&quot;https://realm.io/docs/java/latest/api/io/realm/RealmMigration.html&quot;&gt;RealmMigration&lt;/a&gt; 클래스도 방식이 변경되어 맞춰줬다.&lt;/p&gt;

&lt;p&gt;그리고 또 하나. 기존에는 아래와 같이 인스턴스를 생성해서 사용했다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;RealmConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realmBuilder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealmConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realmName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;schemaVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCHEME_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RealmConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realmBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;그런데 여기서 문제가 발생하기 시작했다. 이 부분은 realm 접속을 생성하는 과정으로 사용하는 시점에 처리하고 있었다. 기존에 사용처 자체가 워낙에 간단한 부분이라서 그랬는지는 몰라도 문제가 없었다. 그런데 버전업 이후 이상하게 앱 크래시가 발생했다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;E/AndroidRuntime: FATAL EXCEPTION: main
                  Process: ~~~, PID: 21532
                  java.lang.RuntimeException: Unable to start activity ComponentInfo{~~~/~~~}: java.lang.IllegalArgumentException: Configurations cannot be different if used to open the same file.
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;오류 내용은 이렇다. 동일 table 파일을 다른 Configurations으로 열 수 없다. 이 오류는 처음에 앱이 열릴 때는 발생하지 않다가 종료 후 다시 들어오면 발생했다. 이상했다. 분명이 앱을 종료 했음에도 불구하고 왜 다른 Configurations을 넣고 있다는 것인지.&lt;/p&gt;

&lt;p&gt;이번에 알게 되었는데 root activity에서의 finish()는 앱의 종료를 의미하는 것이 아니었다. 마지막 activity가 finish()되면 화면에서는 즉시 종료된 것으로 보이나 프로세스는 살아 남는다. 아마도 시스템 자원이 부족해지면 프로세스가 OS에 의해 죽을 수는 있다. 이와 관련해서 앱을 완전히 종료하는 방법에 대해서는 ~~조만간 별도로 글을 남기려고 한다.~~ &lt;a href=&quot;/2015/12/15/android-app-finish/&quot;&gt;안드로이드 앱 종료 방법&lt;/a&gt;에서 설명하고 있다.&lt;/p&gt;

&lt;p&gt;어쨌든 이러한 상황이 발생하는 것으로 보아 기존 버전과 최신 버전의 Realm 생명 주기를 관리하는 방법이 변경된 것으로 보인다. 메뉴얼에 보면 &lt;a href=&quot;https://realm.io/kr/docs/java/0.86.0/#section-52&quot;&gt;모범 사용예 - Realm 인스턴스들의 생명주기 관리하기&lt;/a&gt;라는 부분이 있다. “모범 사용예”라는 항목 자체가 0.85.0 버전부터 있는 것으로 보아 그 시점에 변경이 된 것으로 생각한다. 그런데 여기서 사용하는 함수는 &lt;a href=&quot;https://realm.io/news/realm-java-0.81.1/&quot;&gt;Realm Java 0.81.1&lt;/a&gt;에서 추가된 것으로 소개하고 있다. 기존에 내가 사용하던 것이 0.82.2 였지만 위 문제가 발생하지 않았던 것으로 보아 앞선 예상대로 그 후에 관리 방법이 변경된 것 같기는 하다. 어쨌든 이 부분에 관련된 정보가 있어 발췌한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Realm 인스턴스들의 생명주기 관리하기&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;RealmObjects과 RealmResults는 데이터 전체를 느긋하게 가져옵니다. 이런 이유로 Realm 오브젝트나 질의 결과를 접근할 때 가능한 오래 Realm 인스턴스를 유지하는 것이 중요합니다. Realm 데이터 커넥션을 열고 닫는 추가 비용을 줄이기 위해 레퍼런스 카운트화된 캐시를 가집니다. 이는 Realm.getDefaultInstance()를 같은 스레드에서 여러번 호출하는 것은 비용이 들지 않고 내부의 리소스는 자체적으로 모든 인스턴스가 닫히면 해제됨을 의미합니다.&lt;/p&gt;

  &lt;p&gt;모든 액티비티와 프래그먼트의 UI 스레드에서 Realm 인스턴스를 열고 Activity나 Fragment가 파괴될 때 닫는 것은 쉽고 안전한 접근 법입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 애플리케이션에서 Realm 설정하기&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyApplication&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;RealmConfiguration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realmConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealmConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDefaultConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realmConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 액티비티들을 전환하며 onCreate()/onDestroy()가 중첩되면 Activity 2의 onCreate가&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Activity 1의 onDestroy()보다 먼저 호출 됩니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 프래그먼트에서 onStart()/onStop()를 사용합니다.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 프래그먼트의 onDestroy()는 호출되지 않을 수 있습니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFragment&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDefaultInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;그렇다. 이제는 앱 생성시 &lt;code&gt;Realm.setDefaultConfiguration()&lt;/code&gt;를 이용해서 Configuration을 지정하고 필요한 곳에서 &lt;code&gt;Realm.getDefaultInstance()&lt;/code&gt;으로 인스턴스를 받아 사용하는 것을 권장한다. 위에 이야기한 문제도 이 방식을 사용하면 발생하지 않는다.&lt;/p&gt;
</content>
<summary>모바일 앱 개발시에 DB는 주로 Sqlite 또는 Core Data를 많이 사용한다. 그런데 Sqlite 등을 사용하는 것이 조금 불편한 부분들이 많아서 지난 앱 개발시 Realm을 사용했다. Realm을 사용하면 개발이 용이해지기는 한데 간혹 다루기가 까다로워지는 경우가 있다. 사실 그런 문제 상황은 내가 사용시 뭔가를 잘못했을 확률이 높지만 개인적으로 다소 예민한 라이브러리라고 생각한다. 어찌보면 당연할 수도 있는 것이 아직 1.0 버전이 되지도 못한 라이브러리니 그럴만도 하다. 실제로 아직은 버전업이 자주 발생하고 버전업시에 변경 사항이 다소 있는 편이다. 중요 변경이 있을 때 마이그레이션을 잘못하거나 하면 앱 크래시의 원인이 되기도 하니 버전업시에는 유의해야 한다.그렇지만 다행인 것은 문서화가 잘되어 있고 한글본도 번역도 빠르게 올라온다.얼마전 기존 프로젝트의 Realm의 0.82.2에서 0.86.0으로 버전업을 했다(버전을 확인한지 그리 오래되지 않았는데 그 사이 많이도 버전업되었다). 그랬더니 아래와 같은 오류가 발생했다.Field &#39;date&#39; is required. Either set @Required to field &#39;date&#39; or migrate using io.realm.internal.Table.convertColumnToNullable(). : io.realm.exceptions.RealmMigrationNeededException: Field &#39;date&#39; is required. Either set @Required to field &#39;date&#39; or migrate using io.realm.internal.Table.convertColumnToNullable().사용하는 테이블의 date 필드가 required이니 @Required 어노테이션을 붙이거나 테이블을 마이그레이션하라는 안내다. 이미 Realm에서 해결 방법을 친절히도 안내해주고 있다. @Required는 기존에 사용하지 않던 것이라 찾아봤다. Realm 자바 0.83 — Null 지원!를 보니 0.83 버전에서 데이터값으로 null을 사용할 수 있게 됨에 따라 추가된 어노테이션이다. 그러니 기존 0.82.2의 데이터는 null이 될 수 없었으므로 required 타입으로 인식하는 것이다. 그외에도 다른 변경 사항을 보고 싶다면 changelog를 참고하자.기존에도 null이 들어올 수 없는 구조로 프로그램되어 있었으니 @Required를 해당 필드(변수)에 붙이는 것으로 해결하는 것이 맞겠다. 나는 여기서 다른 문제를 겪었었는데 @Required만 붙이면 될 것을 스키마 버전 정보까지 올리는 바람에 엉망이 되었었다. 어쨌든 결론은 이 문제에 대해서는 @Required를 붙이는 방법으로 간단히 해결된다.그런데 문제는 여기서 끝나지 않았다. RealmMigration 클래스도 방식이 변경되어 맞춰줬다.그리고 또 하나. 기존에는 아래와 같이 인스턴스를 생성해서 사용했다.123RealmConfiguration.Builder realmBuilder = new RealmConfiguration.Builder(context).name(realmName) .schemaVersion(SCHEME_VERSION);RealmConfiguration config = realmBuilder.build();Realm realm = Realm.getInstance(config);그런데 여기서 문제가 발생하기 시작했다. 이 부분은 realm 접속을 생성하는 과정으로 사용하는 시점에 처리하고 있었다. 기존에 사용처 자체가 워낙에 간단한 부분이라서 그랬는지는 몰라도 문제가 없었다. 그런데 버전업 이후 이상하게 앱 크래시가 발생했다.E/AndroidRuntime: FATAL EXCEPTION: main                  Process: ~~~, PID: 21532                  java.lang.RuntimeException: Unable to start activity ComponentInfo{~~~/~~~}: java.lang.IllegalArgumentException: Configurations cannot be different if used to open the same file....오류 내용은 이렇다. 동일 table 파일을 다른 Configurations으로 열 수 없다. 이 오류는 처음에 앱이 열릴 때는 발생하지 않다가 종료 후 다시 들어오면 발생했다. 이상했다. 분명이 앱을 종료 했음에도 불구하고 왜 다른 Configurations을 넣고 있다는 것인지.이번에 알게 되었는데 root activity에서의 finish()는 앱의 종료를 의미하는 것이 아니었다. 마지막 activity가 finish()되면 화면에서는 즉시 종료된 것으로 보이나 프로세스는 살아 남는다. 아마도 시스템 자원이 부족해지면 프로세스가 OS에 의해 죽을 수는 있다. 이와 관련해서 앱을 완전히 종료하는 방법에 대해서는 ~~조만간 별도로 글을 남기려고 한다.~~ 안드로이드 앱 종료 방법에서 설명하고 있다.어쨌든 이러한 상황이 발생하는 것으로 보아 기존 버전과 최신 버전의 Realm 생명 주기를 관리하는 방법이 변경된 것으로 보인다. 메뉴얼에 보면 모범 사용예 - Realm 인스턴스들의 생명주기 관리하기라는 부분이 있다. “모범 사용예”라는 항목 자체가 0.85.0 버전부터 있는 것으로 보아 그 시점에 변경이 된 것으로 생각한다. 그런데 여기서 사용하는 함수는 Realm Java 0.81.1에서 추가된 것으로 소개하고 있다. 기존에 내가 사용하던 것이 0.82.2 였지만 위 문제가 발생하지 않았던 것으로 보아 앞선 예상대로 그 후에 관리 방법이 변경된 것 같기는 하다. 어쨌든 이 부분에 관련된 정보가 있어 발췌한다.  Realm 인스턴스들의 생명주기 관리하기  RealmObjects과 RealmResults는 데이터 전체를 느긋하게 가져옵니다. 이런 이유로 Realm 오브젝트나 질의 결과를 접근할 때 가능한 오래 Realm 인스턴스를 유지하는 것이 중요합니다. Realm 데이터 커넥션을 열고 닫는 추가 비용을 줄이기 위해 레퍼런스 카운트화된 캐시를 가집니다. 이는 Realm.getDefaultInstance()를 같은 스레드에서 여러번 호출하는 것은 비용이 들지 않고 내부의 리소스는 자체적으로 모든 인스턴스가 닫히면 해제됨을 의미합니다.  모든 액티비티와 프래그먼트의 UI 스레드에서 Realm 인스턴스를 열고 Activity나 Fragment가 파괴될 때 닫는 것은 쉽고 안전한 접근 법입니다. 1 2 3 4 5 6 7 8 9101112131415161718192021222324252627282930313233343536373839404142434445// 애플리케이션에서 Realm 설정하기public class MyApplication extends Application {    @Override    public void onCreate() {        super.onCreate();        RealmConfiguration realmConfiguration = new RealmConfiguration.Builder(this).build();        Realm.setDefaultConfiguration(realmConfiguration);    }}// 액티비티들을 전환하며 onCreate()/onDestroy()가 중첩되면 Activity 2의 onCreate가// Activity 1의 onDestroy()보다 먼저 호출 됩니다.public class MyActivity extends Activity {    private Realm realm;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        realm = Realm.getDefaultInstance();    }        @Override    protected void onDestroy() {        super.onDestroy();        realm.close();    }}// 프래그먼트에서 onStart()/onStop()를 사용합니다.// 프래그먼트의 onDestroy()는 호출되지 않을 수 있습니다.public class MyFragment extends Fragment {    private Realm realm;    @Override    public void onStart() {        super.onStart();        realm = Realm.getDefaultInstance();    }    @Override    public void onStop() {        super.onStop();        realm.close();    }}그렇다. 이제는 앱 생성시 Realm.setDefaultConfiguration()를 이용해서 Configuration을 지정하고 필요한 곳에서 Realm.getDefaultInstance()으로 인스턴스를 받아 사용하는 것을 권장한다. 위에 이야기한 문제도 이 방식을 사용하면 발생하지 않는다.</summary>
</entry>
</feed>
