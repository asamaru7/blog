<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

<title>이 세상에 하나는 남기고 가자</title><id>https://blog.asamaru.net/</id><updated>2017-06-26T17:38:06+09:00</updated><subtitle>세상에 필요한 소스코드 한줄 남기고 가자</subtitle><link href="https://blog.asamaru.net/" rel="alternate" type="text/html" /><link href="https://blog.asamaru.net/atom.xml" rel="self" type="application/atom+xml" /><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author>
<entry><id>https://blog.asamaru.net/2017/06/26/mac-os-git-korean-file-name-corequotepath/</id><title type="html">Mac 에서 git 사용시 한글 파일명 문제 2</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/06/26/mac-os-git-korean-file-name-corequotepath/"/><published>2017-06-26T17:25:35+09:00</published><updated>2017-06-26T17:36:27+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><category term="git" label="git" /><summary><![CDATA[Mac 에서 git 사용시 한글 파일명 문제 라는 글에서 core.precomposeunicode 옵션을 설정해서 한글 파일명 사용시 자소 단위로 분리되는 문제를 해결하는 방법을 소개 했었다. 그런데 맥에서 한글 파일명을 사용할 경우에 다른 문제가 하나더 있다. git status 명령으로 변경 파일을 보면 한글이 \306\301... 와 같이 보이는 문제가 있다. 보이기만 이렇게 보이는 것이면 그냥 참겠지만 commit 하는 등의 과정에서 파일명을 지정하는게 어려워진다. 이 문제를 해결하는 방법은 아래와 같다. git config --global core.quotepath false git config --local core.quotepath false Git Documentation core.quotePath Commands that output paths (e.g. ls-files, diff), will quote "unusual" characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. \t for TAB, \n for LF, \ for backslash) or bytes with values larger than 0x80 (e.g. octal \302\265 for "micro" in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered "unusual" any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered "unusual". Many commands can output pathnames completely verbatim using the -z option. The default value is true. 결론을 이야기 하자면 특별한 이유가 있지 않는 이상 한글 파일명은 사용하지 않는 것이 정신 건강에 좋다. 그래서 나는 가급적 사용하지 않으려고 하지만 간혹 어쩔 수 없이 써야하는 경우가 있어 위 방법들을 남겨둔다.]]></summary><content type="html"><![CDATA[<p><a href="/2016/10/19/mac-os-git-korean-file-name-error/">Mac 에서 git 사용시 한글 파일명 문제</a> 라는 글에서 <code>core.precomposeunicode</code> 옵션을 설정해서 한글 파일명 사용시 자소 단위로 분리되는 문제를 해결하는 방법을 소개 했었다.
그런데 맥에서 한글 파일명을 사용할 경우에 다른 문제가 하나더 있다. <code>git status</code> 명령으로 변경 파일을 보면 한글이 <code>\306\301...</code> 와 같이 보이는 문제가 있다. 보이기만 이렇게 보이는 것이면 그냥 참겠지만 commit 하는 등의 과정에서 파일명을 지정하는게 어려워진다.
이 문제를 해결하는 방법은 아래와 같다.</p>
<pre class="hljs bash">git config --global core.quotepath <span class="hljs-literal">false</span>
git config --local core.quotepath <span class="hljs-literal">false</span></pre>
<blockquote>
<p><a href="http://git-scm.com/docs/git-config">Git Documentation</a></p>
<p><strong>core.quotePath</strong></p>
<p>Commands that output paths (e.g. ls-files, diff), will quote &quot;unusual&quot; characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. \t for TAB, \n for LF, \ for backslash) or bytes with values larger than 0x80 (e.g. octal \302\265 for &quot;micro&quot; in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered &quot;unusual&quot; any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered &quot;unusual&quot;. Many commands can output pathnames completely verbatim using the -z option. The default value is true.</p>
</blockquote>
<hr />
<p>결론을 이야기 하자면 특별한 이유가 있지 않는 이상 한글 파일명은 사용하지 않는 것이 정신 건강에 좋다. 그래서 나는 가급적 사용하지 않으려고 하지만 간혹 어쩔 수 없이 써야하는 경우가 있어 위 방법들을 남겨둔다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/06/05/bitbar-os-x-menu-bar-app/</id><title type="html">BitBar 소개 - OS X Menu Bar에 원하는 모니터링 정보 넣기 </title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/06/05/bitbar-os-x-menu-bar-app/"/><published>2017-06-05T13:50:43+09:00</published><updated>2017-06-05T13:50:43+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><summary><![CDATA[BitBar 를 사용하면 Mac OS X 메뉴 막대에 모든 스크립트나 프로그램의 출력을 넣을 수 있다. 이미 BitBar 사이트에서 제공하고 있는 다양한 플러그인이 존재하지만 출력 결과에 대한 규칙만 지킨다면 어떤 내용이라도 들어갈 수 있으므로 다양한 분야에 활용할 수 있다. 나의 경우는 서버 또는 서비스의 상태를 모니터링 하거나 구글 어날리틱스, 애드센스 등의 현황을 Menu Bar에서 바로 확인하기 위해 사용한다. 하지만 앞서 이야기한 것처럼 활용에 제한이 없으므로 자신이 모니터링하고자하는 모든 정보를 만들어 추가할 수 있다(게다가 간단하다). 설치 https://github.com/matryer/bitbar/releases 에 가서 최신 버전을 다운 받는다. BitBar 와 BitBarDistro 가 있는데 그냥 BitBar를 다운 받으면 된다. 압축을 풀어서 응용 프로그램 폴더에 넣고 실행한다. 플러그인 설치 BitBar에 표시되는 내용은 플러그인에서 출력한 결과들이므로 원하는 정보를 출력해 줄 플러그인들이 필요하다. 플러그인의 설치는 간단하다. 지정된 플러그인 폴더에 원하는 플러그인 파일을 넣고 메뉴에서 'Refresh' 를 실행하면 된다. BitBar는 플러그인을 실행해서 결과를 출력해주므로 해당 플러그인들은 실행 권한을 가지고 있어야 한다. chmod +x plugin.sh 플러그인 폴더의 위치를 확인하거나 변경하려면 Preferences 하위의 메뉴에서 원하는 메뉴를 고르면 된다. 플러그인 갱신 시간 설정 플러그인 실행 결과에 대한 갱신 시간은 플러그인의 파일 이름에 아래의 형식을 사용함으로써 지정 가능하다. {name}.{time}.{ext} name - 파일명 time - 새로 고침 빈도 10s - ten seconds 1m - one minute 2h - two hours 1d - a day ext - 파일 확장명 예를들어 date.1m.sh 플러그인은 1분 간격으로 실행되어 출력된 결과로 갱신된다. 플러그인 만들기 이미 만들어진 플러그인을 사용한 것뿐 아니라 Plugin API를 이용해서 원하는 플러그인을 직접 만들 수도 있다. 표준 출력을 사용하는 실행 가능한 스크립트 형식을 작성하는 것으로 플러그인을 만들 수 있다. 스크립트에서 사용하는 언어는 ruby, python php, bash 등 사용하는 시스템에서 사용 가능한 어떠한 언어도 사용할 수 있다. 여러 줄이 반복해서 출력할 수 있다. ---만으로 구성된 행이 있으면 그 아래의 행은 해당 플러그인의 드롬 다운에 표시되지만 메뉴 표시 줄 자체에는 나타나지 않는다. --로 시작하는 줄은 하위 메뉴로 나타난다. | 를 이용해서 해당 줄에 여러가지 정보를 포함할 수 있다. href=.. to make the item clickable color=.. to change their text color. eg. color=red or color=#ff0000 font=.. to change their text font. eg. font=UbuntuMono-Bold size=.. to change their text size. eg. size=12 bash=.. to make the item run a given script terminal with your script e.g. bash=/Users/user/BitBar_Plugins/scripts/nginx.restart.sh if there are spaces in the file path you will need quotes e.g. bash="/Users/user/BitBar Plugins/scripts/nginx.restart.sh" param1= to specify arguments to the script. additional params like this param2=foo param3=bar full example bash="/Users/user/BitBar_Plugins/scripts/nginx.restart.sh" param1=- verbose assuming that nginx.restart.sh is executable or bash=/usr/bin/ruby param1=/Users/user/rubyscript.rb param2=arg1 param3=arg2 if script is not executable terminal=.. start bash script without opening Terminal. true or false refresh=.. to make the item refresh the plugin it belongs to. If the item runs a script, refresh is performed after the script finishes. eg. refresh=true dropdown=.. May be set to true or false. If false, the line will only appear and cycle in the status bar but not in the dropdown length=.. to truncate the line to the specified number of characters. A … will be added to any truncated strings, as well as a tooltip displaying the full string. eg. length=10 trim=.. whether to trim leading/trailing whitespace from the title. true or false (defaults to true) alternate=true to mark a line as an alternate to the previous one for when the Option key is pressed in the dropdown templateImage=.. set an image for this item. The image data must be passed as base64 encoded string and should consist of only black and clear pixels. The alpha channel in the image can be used to adjust the opacity of black content, however. This is the recommended way to set an image for the statusbar. Use a 144 DPI resolution to support Retina displays. The imageformat can be any of the formats supported by Mac OS X image=.. set an image for this item. The image data must be passed as base64 encoded string. Use a 144 DPI resolution to support Retina displays. The imageformat can be any of the formats supported by Mac OS X emojize=false will disable parsing of github style :mushroom: into 🍄 ansi=false turns off parsing of ANSI codes. 아래는 matryer/bitbar 에 소개된 예시들이다. 예시들을 보면 알겠지만 자신이 익숙한 언어와 BitBar API를 사용해서 간단히 만들 수 있다. One line plugin #!/bin/bash date Multi-line plugin #!/bin/bash # the current date and time date # the current username echo $USER # the current user id id -u Multi-line plugin with extra data #!/bin/bash echo "One" echo "Two" echo "Three" echo "---" echo "Four" echo "Five" echo "Six" Only One, Two and Three will appear in the top bar Clicking the plugin menu item will show all lines Multi-line plugin with links and colors #!/bin/bash curl -m 1 http://example.com -I >/dev/null 2>&1 [ $? -gt 0 ] && echo "FAIL | color=red" || echo "OK | color=green" echo "---" echo "Show Graphs | color=#123def href=http://example.com/graph?foo=bar" echo "Show KPI Report | color=purple href=http://example.com/report"]]></summary><content type="html"><![CDATA[<p><a href="https://getbitbar.com/">BitBar</a> 를 사용하면 Mac OS X 메뉴 막대에 모든 스크립트나 프로그램의 출력을 넣을 수 있다. 이미 <a href="https://getbitbar.com/">BitBar</a> 사이트에서 제공하고 있는 다양한 플러그인이 존재하지만 출력 결과에 대한 규칙만 지킨다면 어떤 내용이라도 들어갈 수 있으므로 다양한 분야에 활용할 수 있다. </p>
<p>나의 경우는 서버 또는 서비스의 상태를 모니터링 하거나 구글 어날리틱스, 애드센스 등의 현황을 Menu Bar에서 바로 확인하기 위해 사용한다. 하지만 앞서 이야기한 것처럼 활용에 제한이 없으므로 자신이 모니터링하고자하는 모든 정보를 만들어 추가할 수 있다(게다가 간단하다).</p>
<hr />
<h3>설치</h3>
<ul>
<li><a href="https://github.com/matryer/bitbar/releases">https://github.com/matryer/bitbar/releases</a> 에 가서 최신 버전을 다운 받는다.
<ul>
<li>BitBar 와 BitBarDistro 가 있는데 그냥 BitBar를 다운 받으면 된다.</li>
</ul></li>
<li>압축을 풀어서 응용 프로그램 폴더에 넣고 실행한다.</li>
</ul>
<h3>플러그인 설치</h3>
<p>BitBar에 표시되는 내용은 플러그인에서 출력한 결과들이므로 원하는 정보를 출력해 줄 플러그인들이 필요하다.<br />
플러그인의 설치는 간단하다. 지정된 플러그인 폴더에 원하는 플러그인 파일을 넣고 메뉴에서 'Refresh' 를 실행하면 된다.  </p>
<p>BitBar는 플러그인을 실행해서 결과를 출력해주므로 해당 플러그인들은 실행 권한을 가지고 있어야 한다.</p>
<pre class="hljs bash">chmod +x plugin.sh</pre>
<p>플러그인 폴더의 위치를 확인하거나 변경하려면 Preferences 하위의 메뉴에서 원하는 메뉴를 고르면 된다.</p>
<p><img src="/res/img/post/2017/06/bitbar-os-x-menu-bar-app.png" alt="bitbar-os-x-menu-bar-app" width="503" height="414" /></p>
<h3>플러그인 갱신 시간 설정</h3>
<p>플러그인 실행 결과에 대한 갱신 시간은 플러그인의 파일 이름에 아래의 형식을 사용함으로써 지정 가능하다.</p>
<p><code>{name}.{time}.{ext}</code></p>
<ul>
<li>name - 파일명</li>
<li>time - 새로 고침 빈도
<ul>
<li>10s - ten seconds</li>
<li>1m - one minute</li>
<li>2h - two hours</li>
<li>1d - a day</li>
</ul></li>
<li>ext - 파일 확장명</li>
</ul>
<p>예를들어 <code>date.1m.sh</code> 플러그인은 1분 간격으로 실행되어 출력된 결과로 갱신된다.</p>
<h3>플러그인 만들기</h3>
<p>이미 만들어진 플러그인을 사용한 것뿐 아니라 <a href="https://github.com/matryer/bitbar#plugin-api">Plugin API</a>를 이용해서 원하는 플러그인을 직접 만들 수도 있다.</p>
<ul>
<li>표준 출력을 사용하는 실행 가능한 스크립트 형식을 작성하는 것으로 플러그인을 만들 수 있다. 
<ul>
<li>스크립트에서 사용하는 언어는 ruby, python php, bash 등 사용하는 시스템에서 사용 가능한 어떠한 언어도 사용할 수 있다.</li>
</ul></li>
<li>여러 줄이 반복해서 출력할 수 있다.</li>
<li><code>---</code>만으로 구성된 행이 있으면 그 아래의 행은 해당 플러그인의 드롬 다운에 표시되지만 메뉴 표시 줄 자체에는 나타나지 않는다.</li>
<li><code>--</code>로 시작하는 줄은 하위 메뉴로 나타난다.</li>
<li><code>|</code> 를 이용해서 해당 줄에 여러가지 정보를 포함할 수 있다.
<ul>
<li>href=.. to make the item clickable</li>
<li>color=.. to change their text color. eg. color=red or color=#ff0000</li>
<li>font=.. to change their text font. eg. font=UbuntuMono-Bold</li>
<li>size=.. to change their text size. eg. size=12</li>
<li>bash=.. to make the item run a given script terminal with your script e.g. bash=/Users/user/BitBar_Plugins/scripts/nginx.restart.sh if there are spaces in the file path you will need quotes
e.g. bash=&quot;/Users/user/BitBar Plugins/scripts/nginx.restart.sh&quot;</li>
<li>param1= to specify arguments to the script. additional params like this param2=foo param3=bar full example bash=&quot;/Users/user/BitBar_Plugins/scripts/nginx.restart.sh&quot; param1=- verbose assuming that nginx.restart.sh is executable or bash=/usr/bin/ruby param1=/Users/user/rubyscript.rb param2=arg1 param3=arg2 if script is not executable</li>
<li>terminal=.. start bash script without opening Terminal. true or false</li>
<li>refresh=.. to make the item refresh the plugin it belongs to. If the item runs a script, refresh is performed after the script finishes. eg. refresh=true</li>
<li>dropdown=.. May be set to true or false. If false, the line will only appear and cycle in the status bar but not in the dropdown</li>
<li>length=.. to truncate the line to the specified number of characters. A … will be added to any truncated strings, as well as a tooltip displaying the full string. eg. length=10</li>
<li>trim=.. whether to trim leading/trailing whitespace from the title. true or false (defaults to true)</li>
<li>alternate=true to mark a line as an alternate to the previous one for when the Option key is pressed in the dropdown</li>
<li>templateImage=.. set an image for this item. The image data must be passed as base64 encoded string and should consist of only black and clear pixels. The alpha channel in the image  can be used to adjust the opacity of black content, however. This is the recommended way to set an image for the statusbar. Use a 144 DPI resolution to support Retina displays. The  imageformat can be any of the formats supported by Mac OS X</li>
<li>image=.. set an image for this item. The image data must be passed as base64 encoded string. Use a 144 DPI resolution to support Retina displays. The imageformat can be any of the  formats supported by Mac OS X</li>
<li>emojize=false will disable parsing of github style :mushroom: into 🍄</li>
<li>ansi=false turns off parsing of ANSI codes.</li>
</ul></li>
</ul>
<hr />
<p>아래는 <a href="https://github.com/matryer/bitbar">matryer/bitbar</a> 에 소개된 예시들이다. 예시들을 보면 알겠지만 자신이 익숙한 언어와 BitBar API를 사용해서 간단히 만들 수 있다.</p>
<h4>One line plugin</h4>
<pre class="hljs bash"><span class="hljs-shebang">#!/bin/bash</span>
date</pre>
<h4>Multi-line plugin</h4>
<pre class="hljs bash"><span class="hljs-shebang">#!/bin/bash
</span>
<span class="hljs-comment"># the current date and time</span>
date

<span class="hljs-comment"># the current username</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$USER</span>

<span class="hljs-comment"># the current user id</span>
id -u</pre>
<h4>Multi-line plugin with extra data</h4>
<pre class="hljs bash"><span class="hljs-shebang">#!/bin/bash</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"One"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Two"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Three"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"---"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Four"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Five"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Six"</span></pre>
<ul>
<li>Only One, Two and Three will appear in the top bar</li>
<li>Clicking the plugin menu item will show all lines</li>
</ul>
<h4>Multi-line plugin with links and colors</h4>
<pre class="hljs bash"><span class="hljs-shebang">#!/bin/bash</span>
curl -m <span class="hljs-number">1</span> http://example.com -I &gt;/dev/null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span>
[ $? <span class="hljs-operator">-gt</span> <span class="hljs-number">0</span> ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">"FAIL | color=red"</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">"OK | color=green"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"---"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Show Graphs | color=#123def href=http://example.com/graph?foo=bar"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Show KPI Report | color=purple href=http://example.com/report"</span></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/04/script-async-defer/</id><title type="html">script의 async와 defer 속성</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/04/script-async-defer/"/><published>2017-05-04T13:23:55+09:00</published><updated>2017-05-04T13:23:55+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[웹 브라우저는 html을 랜더링하는 과정에서 css(<link type='text/css'>) 또는 js(<script>) 를 만나면 동기적으로 처리한다. 다시 말해 해당 내용이 해석되고 실행되기 전에는 뒤에 나오는 내용을 처리하지 않는다는 것이다. 이 부분은 화면의 랜더링 속도에 큰 영향을 줄 수 있다(사용자 경험 측면에서 큰 영향을 주며 SEO와도 관련된다). 이와 관련된 자세한 내용은 HTML Critical rendering path의 이해라는 글에 있으니 필요하면 참고 바란다. css의 경우는 화면을 랜더링하는데 필요한 정보를 담고 있으므로 해당 내용을 출력하기 전에 해석되는 것이 당연히 유리하다(화면이 여러번 랜더링되는 것을 줄일 수 있다). css에 대한 부분도 최적화를 위해 화면에 보여지는 영역과 숨겨진 영역에 대한 css를 분리 호출하는 것을 권장하는 등 최적화에 관련된 여러가지 이슈가 있다. 하지만 이 부분은 여기서 다루고자하는 내용이 아니므로 일단 넘어가자. js의 경우 대부분 화면 출력과 관련되기 보다 기능적 처리에 관련된 경우가 많다. 웹앱 등의 경우 출력과 직접적인 관련이 있을 수도 있으나 이 또한 기본적인 화면이 출력된 이후에 처리되는 것이 웹 페이지를 빠르게 랜더링하는데 유리하기 때문에 처리를 지연하는 것이 좋다. 이러한 이유로 대부분의 경우 css는 <head> 영역에 js는 </body> 바로 앞에 선언하는 것을 추천한다. 이 방식은 아래에 기술하겠지만 오래된 브라우저에서도 동일한 효과를 얻는 좋은 방법이 될 수 있다. 하지만 이 방법 외에도 <script>에는 async 속성과 defer 속성을 사용하는 방법이 있다. 이 글에서는 이 두가지 속성에 대해서 이야기 하고자 한다. 일반적인 실행 async와 defer의 동작에 대해 알아보기 전에 기본적인 <script>의 실행 과정에 대해 알아보자. 기본적으로 <script>는 인라인 코드의 경우 즉시 해석되고 실행될 수 있지만 그렇지 않은 경우는 해당 파일을 가져올 때까지 HTML 문서의 구문 분석을 중단한다. 위 그림에서 보여주듯이 스크립트를 가져 와서 실행하기 위해 HTML 구문 분석이 일시 중지되므로 HTML이 화면에 출력되는 시간이 길어진다. async 속성이 추가된 경우의 실행 async 속성은 브라우저에 스크립트 파일이 비동기적으로 실행될 수 있음을 나타내기 위해 사용된다. HTML 구문 분석기는 스크립트 태그에 도달한 지점에서 스크립트를 가져오고 실행하기 위해 일시 중지 할 필요가 없다. 따라서 HTML 구문 분석과 병행하여 스크립트를 가져온 후 스크립트가 준비 될 때마다 즉시 실행이 가능하다. 그러므로 실행의 순서가 다운로드 완료 시점의 결정되므로 실행 순서가 중요한 스크립트들에 async를 사용할 때는 유의해야 한다(HTML5 spec에 async=false 속성 지정시 호출 순서대로 실행되도록 추가됨(default : true)). <script async src="script.js"> 이 속성은 외부에 위치한 스크립트 파일에서만 사용할 수 있다. 외부 스크립트에 이 속성이 있으면 HTML 문서가 여전히 구문 분석되는 동안 파일을 다운로드 할 수 있으며 다운로드가 완료되면 스크립트가 실행될 수 있도록 구문 분석이 일시 중지 된다. defer 속성이 추가된 경우의 실행 defer 속성은 HTML 구문 분석이 완전히 완료되면 스크립트 파일을 실행하도록 브라우저에 지시한다. <script defer src="script.js"> 비동기적으로 로드된 스크립트와 마찬가지로, HTML 구문 분석이 실행되는 동안 파일을 다운로드 할 수 있다. 그러나 HTML 구문 분석이 완료되기 전에 스크립트 다운로드가 완료 되더라도 구문 분석이 완료 될 때까지 스크립트는 실행되지 않는다. 또한, async와는 다르게 호출된 순서대로 실행된다. 언제 사용할 것인가? 일반적인 스크립트 실행과 aync, defer 실행을 결정하기 위해서는 몇가지 확인해야 할 사항이 있다. <script> 요소는 어디에 있는가? <script> 요소가 문서 맨 끝에 있지 않으면 스크립트의 비동기 및 지연 실행이 더 중요하다. HTML 문서는 첫 번째 여는 <html> 요소부터 닫히는 순서로 파싱됩니다. 외부 소스 JavaScript 파일이 닫는 </body> 요소 바로 앞에 있으면, async 또는 defer 속성을 사용하는 것이 큰 효과가 없다(HTML 파서가 그 시점까지 문서의 대다수를 완성 했기 때문에 지연에 의미가 크게 없다는 것이다). 스크립트 자체가 포함되어 있는가? 다른 파일들에 종속적이지 않거나 종속성 자체가 없는 스크립트 파일의 경우 async 속성이 특히 유용하다. 파일이 어느 지점에서 실행되는지 정확히 알 필요가 없기 때문에 비동기 로드가 가장 적합하다. 스크립트가 완전히 구문 분석 된 DOM에 의존하는가? 대부분의 경우 스크립트 파일에는 DOM과의 상호 작용이 필요한 기능이 포함되어 있거나 페이지에 포함된 다른 파일에 대한 종속성이 있을 수 있다. 이러한 경우 스크립트를 실행하기 전에 DOM이 완전히 해석되어야 정상적인 동작을 할 수 있다. 일반적으로 이러한 스크립트 파일은 페이지의 맨 아래에 배치되어 모든 내용이 파싱된 후에 동작하도록 해야 한다. 그러나 어떤 이유로 든 문제의 파일을 다른 위치에 배치해야 하는 상황에서는 defer 속성을 사용할 수 있다. 스크립트가 작고 종속성을 가지는가? 마지막으로 스크립트가 비교적 작고 다른 파일에 의존하는 경우 인라인으로 정의하는 것이 더 유용 할 수 있다. 인라인을 사용하면 HTML 문서의 구문 분석이 차단되지만 크기가 작으면 큰 문제가 되지 않는다. 또한 다른 파일에 의존하는 경우 차단이 필요할 수 있다. async와 defer를 지원하는 브라우저 async 및 defer 속성은 최신 브라우저를 기준으로 보자면 매우 광범위하게 지원된다. 단, 이러한 속성의 동작은 JavaScript 엔진마다 약간 다를 수 있다. 예를 들어 V8(Chromium에서 사용됨)에서는 스크립트 실행을 위한 별도의 전용 스레드에서 속성에 관계없이 모든 스크립트를 구문 분석하려고 한다(New JavaScript techniques for rapid page loads). 지원하는 브라우저를 알아보기 전에 일부만 지원되는 경우에 대한 동작 과정을 알아보자. defer 속성만 있다면 스크립트는 페이지의 파싱이 완료된 후에 실행된다. 단, async와 defer 속성이 모두 지정된 경우 async 속성을 지원하는 최신 브라우저는 기본적으로 async 속성을 따른다. 하지만 async 속성을 지원하지 않는 구형 브라우저는 defer 속성의 지원 여부에 따라 결과가 다르다. defer 속성을 지원하는 경우 defer 속성에 의해 비동기적으로 스크립트를 실행한다. defer 조차도 지원하지 않는 구형 브라우저는 동기적으로 스크립트를 실행한다. IE는 defer의 경우 예전부터 부분 지원하고 있으나 async 속성은 10 버전 이상부터 지원(defer 완전 지원 포함) Firefox는 3.6 버전부터 모두 지원 chrome은 8 버전부터 모두 지원 safari는 5 버전부터 모두 지원(단, 5버전에서는 async=false 지원 안함) ios safari는 5.1 버전부터 모두 지원 android는 3 버전부터 모두 지원 결론적으로는 원만하면 다 지원한다. IE의 경우가 예외적이긴 하지만 IE 10 미만의 점유율이 극히 낮아진 이 시점에서 무시해도 될 듯하다(굳이 지원해야 한다면 aync, defer 속성을 사용하기 보다 </body> 바로 앞에 스크립트를 위치시키는 방법이 가장 낫다). 보다 상세한 지원 여부는 아래의 caniuse.com 을 참고하자. caniuse.com async 지원 확인 caniuse.com defer 지원 확인]]></summary><content type="html"><![CDATA[<p>웹 브라우저는 html을 랜더링하는 과정에서 css(<code>&lt;link type='text/css'&gt;</code>) 또는 js(<code>&lt;script&gt;</code>) 를 만나면 동기적으로 처리한다. 다시 말해 해당 내용이 해석되고 실행되기 전에는 뒤에 나오는 내용을 처리하지 않는다는 것이다. 이 부분은 화면의 랜더링 속도에 큰 영향을 줄 수 있다(사용자 경험 측면에서 큰 영향을 주며 SEO와도 관련된다). 이와 관련된 자세한 내용은 <a href="/2017/05/04/understanding-the-critical-rendering-path/">HTML Critical rendering path의 이해</a>라는 글에 있으니 필요하면 참고 바란다.</p>
<p>css의 경우는 화면을 랜더링하는데 필요한 정보를 담고 있으므로 해당 내용을 출력하기 전에 해석되는 것이 당연히 유리하다(화면이 여러번 랜더링되는 것을 줄일 수 있다). css에 대한 부분도 최적화를 위해 화면에 보여지는 영역과 숨겨진 영역에 대한 css를 분리 호출하는 것을 권장하는 등 최적화에 관련된 여러가지 이슈가 있다. 하지만 이 부분은 여기서 다루고자하는 내용이 아니므로 일단 넘어가자.</p>
<p>js의 경우 대부분 화면 출력과 관련되기 보다 기능적 처리에 관련된 경우가 많다. 웹앱 등의 경우 출력과 직접적인 관련이 있을 수도 있으나 이 또한 기본적인 화면이 출력된 이후에 처리되는 것이 웹 페이지를 빠르게 랜더링하는데 유리하기 때문에 처리를 지연하는 것이 좋다.</p>
<p>이러한 이유로 대부분의 경우 css는 <code>&lt;head&gt;</code> 영역에 js는 <code>&lt;/body&gt;</code> 바로 앞에 선언하는 것을 추천한다. 이 방식은 아래에 기술하겠지만 오래된 브라우저에서도 동일한 효과를 얻는 좋은 방법이 될 수 있다. 하지만 이 방법 외에도 <code>&lt;script&gt;</code>에는 <a href="https://www.w3schools.com/tags/att_script_async.asp">async</a> 속성과 <a href="https://www.w3schools.com/tags/att_script_defer.asp">defer</a> 속성을 사용하는 방법이 있다. 이 글에서는 이 두가지 속성에 대해서 이야기 하고자 한다.</p>
<h3>일반적인 실행</h3>
<p>async와 defer의 동작에 대해 알아보기 전에 기본적인 <code>&lt;script&gt;</code>의 실행 과정에 대해 알아보자. 기본적으로 <code>&lt;script&gt;</code>는 인라인 코드의 경우 즉시 해석되고 실행될 수 있지만 그렇지 않은 경우는 해당 파일을 가져올 때까지 HTML 문서의 구문 분석을 중단한다.</p>
<p><img src="/res/img/post/2017/05/script-async-defer-1.png" alt="javascript-execution" width="780" height="152" /></p>
<p>위 그림에서 보여주듯이 스크립트를 가져 와서 실행하기 위해 HTML 구문 분석이 일시 중지되므로 HTML이 화면에 출력되는 시간이 길어진다.</p>
<h3>async 속성이 추가된 경우의 실행</h3>
<p>async 속성은 브라우저에 스크립트 파일이 비동기적으로 실행될 수 있음을 나타내기 위해 사용된다. HTML 구문 분석기는 스크립트 태그에 도달한 지점에서 스크립트를 가져오고 실행하기 위해 일시 중지 할 필요가 없다. 따라서 HTML 구문 분석과 병행하여 스크립트를 가져온 후 스크립트가 준비 될 때마다 즉시 실행이 가능하다. 그러므로 <strong>실행의 순서가 다운로드 완료 시점의 결정되므로 실행 순서가 중요한 스크립트들에 async를 사용할 때는 유의해야 한다(HTML5 spec에 async=false 속성 지정시 호출 순서대로 실행되도록 추가됨(default : true)).</strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">async</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script.js"</span>&gt;</span><span class=""></span></pre>
<p>이 속성은 외부에 위치한 스크립트 파일에서만 사용할 수 있다. 외부 스크립트에 이 속성이 있으면 HTML 문서가 여전히 구문 분석되는 동안 파일을 다운로드 할 수 있으며 다운로드가 완료되면 스크립트가 실행될 수 있도록 구문 분석이 일시 중지 된다.</p>
<p><img src="/res/img/post/2017/05/script-async-defer-2.png" alt="javascript-async-execution" width="780" height="152" /></p>
<h3>defer 속성이 추가된 경우의 실행</h3>
<p>defer 속성은 HTML 구문 분석이 완전히 완료되면 스크립트 파일을 실행하도록 브라우저에 지시한다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">defer</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script.js"</span>&gt;</span><span class=""></span></pre>
<p>비동기적으로 로드된 스크립트와 마찬가지로, HTML 구문 분석이 실행되는 동안 파일을 다운로드 할 수 있다. 그러나 HTML 구문 분석이 완료되기 전에 스크립트 다운로드가 완료 되더라도 구문 분석이 완료 될 때까지 스크립트는 실행되지 않는다. 또한, <strong>async와는 다르게 호출된 순서대로 실행된다.</strong></p>
<p><img src="/res/img/post/2017/05/script-async-defer-3.png" alt="javascript-defer-execution" width="780" height="152" /></p>
<h3>언제 사용할 것인가?</h3>
<p>일반적인 스크립트 실행과 aync, defer 실행을 결정하기 위해서는 몇가지 확인해야 할 사항이 있다.</p>
<h4><code>&lt;script&gt;</code> 요소는 어디에 있는가?</h4>
<p><code>&lt;script&gt;</code> 요소가 문서 맨 끝에 있지 않으면 스크립트의 비동기 및 지연 실행이 더 중요하다. HTML 문서는 첫 번째 여는 <code>&lt;html&gt;</code> 요소부터 닫히는 순서로 파싱됩니다. 외부 소스 JavaScript 파일이 닫는 <code>&lt;/body&gt;</code> 요소 바로 앞에 있으면, async 또는 defer 속성을 사용하는 것이 큰 효과가 없다(HTML 파서가 그 시점까지 문서의 대다수를 완성 했기 때문에 지연에 의미가 크게 없다는 것이다).</p>
<h4>스크립트 자체가 포함되어 있는가?</h4>
<p>다른 파일들에 종속적이지 않거나 종속성 자체가 없는 스크립트 파일의 경우 async 속성이 특히 유용하다. 파일이 어느 지점에서 실행되는지 정확히 알 필요가 없기 때문에 비동기 로드가 가장 적합하다.</p>
<h4>스크립트가 완전히 구문 분석 된 DOM에 의존하는가?</h4>
<p>대부분의 경우 스크립트 파일에는 DOM과의 상호 작용이 필요한 기능이 포함되어 있거나 페이지에 포함된 다른 파일에 대한 종속성이 있을 수 있다. 이러한 경우 스크립트를 실행하기 전에 DOM이 완전히 해석되어야 정상적인 동작을 할 수 있다. 일반적으로 이러한 스크립트 파일은 페이지의 맨 아래에 배치되어 모든 내용이 파싱된 후에 동작하도록 해야 한다. 그러나 어떤 이유로 든 문제의 파일을 다른 위치에 배치해야 하는 상황에서는 defer 속성을 사용할 수 있다.</p>
<h4>스크립트가 작고 종속성을 가지는가?</h4>
<p>마지막으로 스크립트가 비교적 작고 다른 파일에 의존하는 경우 인라인으로 정의하는 것이 더 유용 할 수 있다. 인라인을 사용하면 HTML 문서의 구문 분석이 차단되지만 크기가 작으면 큰 문제가 되지 않는다. 또한 다른 파일에 의존하는 경우 차단이 필요할 수 있다.</p>
<h3>async와 defer를 지원하는 브라우저</h3>
<p>async 및 defer 속성은 최신 브라우저를 기준으로 보자면 매우 광범위하게 지원된다. 단, 이러한 속성의 동작은 JavaScript 엔진마다 약간 다를 수 있다. 예를 들어 V8(Chromium에서 사용됨)에서는 스크립트 실행을 위한 별도의 전용 스레드에서 속성에 관계없이 모든 스크립트를 구문 분석하려고 한다(<a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html">New JavaScript techniques for rapid page loads</a>).</p>
<p>지원하는 브라우저를 알아보기 전에 일부만 지원되는 경우에 대한 동작 과정을 알아보자. defer 속성만 있다면 스크립트는 페이지의 파싱이 완료된 후에 실행된다. 단, async와 defer 속성이 모두 지정된 경우 async 속성을 지원하는 최신 브라우저는 기본적으로 async 속성을 따른다. 하지만 async 속성을 지원하지 않는 구형 브라우저는 defer 속성의 지원 여부에 따라 결과가 다르다. defer 속성을 지원하는 경우 defer 속성에 의해 비동기적으로 스크립트를 실행한다. defer 조차도 지원하지 않는 구형 브라우저는 동기적으로 스크립트를 실행한다.</p>
<ul>
<li>IE는 defer의 경우 예전부터 부분 지원하고 있으나 async 속성은 10 버전 이상부터 지원(defer 완전 지원 포함)</li>
<li>Firefox는 3.6 버전부터 모두 지원</li>
<li>chrome은 8 버전부터 모두 지원</li>
<li>safari는 5 버전부터 모두 지원(단, 5버전에서는 async=false 지원 안함)</li>
<li>ios safari는 5.1 버전부터 모두 지원</li>
<li>android는 3 버전부터 모두 지원</li>
</ul>
<p>결론적으로는 원만하면 다 지원한다. IE의 경우가 예외적이긴 하지만 IE 10 미만의 점유율이 극히 낮아진 이 시점에서 무시해도 될 듯하다(굳이 지원해야 한다면 aync, defer 속성을 사용하기 보다 <code>&lt;/body&gt;</code> 바로 앞에 스크립트를 위치시키는 방법이 가장 낫다).</p>
<p>보다 상세한 지원 여부는 아래의 caniuse.com 을 참고하자.</p>
<ul>
<li><a href="http://caniuse.com/#feat=script-async">caniuse.com async 지원 확인</a></li>
<li><a href="http://caniuse.com/#feat=script-defer">caniuse.com defer 지원 확인</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/04/understanding-the-critical-rendering-path/</id><title type="html">HTML Critical rendering path의 이해</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/04/understanding-the-critical-rendering-path/"/><published>2017-05-04T10:50:36+09:00</published><updated>2017-05-04T10:52:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="html" label="html" /><category term="js" label="js" /><category term="css" label="css" /><summary><![CDATA[아래의 글은 "Understanding the Critical Rendering Path"의 내용을 번역한 글이다. 브라우저가 서버에서 페이지에 대한 HTML 응답을 받으면 화면에 표시되기 전에 많은 단계를 거쳐야 한다. 브라우저가 페이지의 초기 출력을 위해 실행해야하는 이 순서를 "Critical Rendering Path"(이하 CRP)라고 한다. 사이트의 성능을 향상시키는 방법을 이해하는데 CRP에 대한 지식은 매우 유용하다. CRP는 아래와 같이 6단계로 구성된다. DOM 트리 구축(Constructing the DOM Tree) CSSOM 트리 구축(Constructing the CSSOM Tree) JavaScript 실행(Running JavaScript) 랜더링 트리 구축(Creating the Render Tree) 레이아웃 생성(Generating the Layout) 페인팅(Painting) 1. DOM 트리 구축(Constructing the DOM Tree) DOM(Document Object Model) 트리는 완전히 구문 분석된 HTML 페이지의 Object 표현이다. 루트 요소 <html>로 시작하여 페이지의 각 element/text에 대한 노드가 만들어진다. 다른 요소 내에 중첩된 요소는 자식 노드로 표시되며 각 노드에는 해당 요소의 전체 특성이 포함된다. 예를 들어, <a> 요소는 노드와 관련된 href 속성을 갖는다. 예를들어 아래의 html 문서를 보자. <html> <head> <title>Understanding the Critical Rendering Path</title> <link rel="stylesheet" href="style.css"> </head> <body> <header> <h1>Understanding the Critical Rendering Path</h1> </header> <main> <h2>Introduction</h2> <p>Lorem ipsum dolor sit amet</p> </main> <footer> <small>Copyright 2017</small> </footer> </body> </html> 위 html 문서는 다음과 같은 DOM 트리를 생성한다. HTML의 장점은 부분적으로 실행될 수 있다는 것이다. 페이지에 내용이 표시하기 위해 전체 문서를 로드할 필요가 없다. 그러나 다른 리소스인 CSS와 JavaScript는 페이지 렌더링을 차단할 수 있다. 2. CSSOM 트리 구축(Constructing the CSSOM Tree) CSSOM(CSS Object Model)은 DOM과 연관된 스타일의 Object 표현이다. 이것은 DOM과 비슷한 방식으로 표현되지만 명시적 또는 암시적 선언과 상속 여부에 관계없이 각 노드의 관련 스타일로 표시된다. 위에서 언급한 html 문서의 style.css 파일에는 아래와 같은 style이 정의되어 있다. body { font-size: 18px; } header { color: plum; } h1 { font-size: 28px; } main { color: firebrick; } h2 { font-size: 20px; } footer { display: none; } 위 CSS는 다음과 같은 CSSOM 트리를 생성한다. CSS는 "렌더링 차단 리소스(render blocking resource)"로 간주된다. 즉, 먼저 리소스를 완전히 파싱하지 않으면 렌더링 트리를 구성 할 수 없다. HTML과 달리 CSS는 계단식 상속 특성 때문에 부분적으로 실행될 수 없다. 문서의 뒷부분에 정의된 스타일은 이전에 정의된 스타일을 무시하고 변경할 수 있다. 따라서 스타일 시트 전체가 파싱되기 전에 스타일 시트에서 앞에서 정의한 CSS 스타일을 사용하기 시작하면 잘못된 CSS가 적용되는 상황이 발생할 수 있다. 즉, 다음 단계로 넘어 가기 전에 CSS를 완전히 파싱 해야 한다. CSS 파일은 현재 장치에 적용되는 경우에만 렌더링 차단 리소스로 간주된다. <link rel = "stylesheet"> 태그는 미디어 속성을 받아 들일 수 있다. 미디어 속성은 스타일이 적용되는 미디어 쿼리를 지정할 수 있다. 예를 들어 media 속성이 orientation:landscape 인 스타일 시트가 있고 페이지를 세로 모드로 보고 있는 경우 해당 리소스는 렌더링 차단 리소스로 간주되지 않는다. CSS는 "script blocking"일 수도 있다. 이것은 JavaScript 파일이 실행되기 전에 CSSOM이 생성 될 때까지 기다려야 하기 때문이다. 3. JavaScript 실행(Running JavaScript) JavaScript는 "파서 차단 리소스(parser blocking resource)"로 간주된다. 즉, HTML 문서 자체의 구문 분석은 JavaScript에 의해 차단된다. 파서가 내부 태그이든 외부 태그이든 <script> 태그에 도달하면 (외부 태그 인 경우) fetch를 중단하고 실행한다. 따라서 문서 내의 요소를 참조하는 JavaScript 파일이 있는 경우 해당 문서가 표시된 후에 배치 해야 한다. JavaScript가 파서 차단(parser blocking)되는 것을 피하기 위해 async 속성을 적용하여 비동기적으로 로드 할 수 있다. <script async src="script.js"> 4. 랜더링 트리 구축(Creating the Render Tree) 렌더링 트리는 DOM과 CSSOM의 조합이다. 페이지에서 최종적으로 렌더링 될 내용을 나타내는 트리다. 즉, 표시되는 내용만 캡쳐하가 때문에 display:none을 사용하여 CSS로 숨겨진 요소는 포함하지 않는다. 위의 예제 DOM과 CSSOM을 사용하여 다음 렌더링 트리가 생성된다. 5. 레이아웃 생성(Generating the Layout) 레이아웃은 뷰포트의 크기에 관련된 CSS 스타일에 대한 컨텍스트에 의해 뷰포트의 크기를 결정한다. 비율 또는 뷰포트 단위. 뷰포트 크기는 문서 헤드에 제공된 메타 뷰포트 태그에 의해 결정되거나, 태그가 제공되지 않으면 기본 뷰포트 너비 인 980px가 사용된다. 예를 들어 가장 일반적인 메타 뷰포트 값은 뷰포트 크기를 장치 너비에 맞게 설정하는 것이다. <meta name="viewport" content="width=device-width,initial-scale=1"> 예를 들어 사용자가 너비가 1000px 인 기기에서 웹 페이지를 방문하면 뷰포트 크기는 해당 값을 기반으로 합니다. 뷰포트의 절반은 500px이고, 10vw는 100px이 된다. 6. 페인팅(Painting) 마지막으로 Painting 단계에서 페이지의 가시적인 내용을 픽셀로 변환하여 화면에 표시 할 수 있다. 페인트 단계에서 처리에 걸리는 시간은 DOM의 크기와 적용되는 스타일에 따라 다르다. 어떤 스타일은 다른 스타일보다 더 많은 작업을 필요로 한다. 예를 들어, 복잡한 그래디언트 배경 이미지는 단순한 단색 배경색보다 더 많은 시간을 필요로 한다. 종합(Putting it All Together) Critical Rendering Path를 진행하는 과정을 DevTools로 확인 할 수 있다(Chrome에서는 DevTools의 Performance에서 확인 할 수 있다). 예를 들어 위의 샘플 HTML (<script> 태그가 추가 된 경우) - <html> <head> <title>Understanding the Critical Rendering Path</title> <link rel="stylesheet" href="style.css"> </head> <body> <header> <h1>Understanding the Critical Rendering Path</h1> </header> <main> <h2>Introduction</h2> <p>Lorem ipsum dolor sit amet</p> </main> <footer> <small>Copyright 2017</small> </footer> <script src="main.js"></script> </body> </html> 페이지 로드에 대한 이벤트 로그를 보면 아래와 같은 결과를 볼 수 있다. Send Request - index.html에 대한 GET 요청 전송 Parse HTML and Send Request - HTML 및 DOM 구문 분석을 시작. style.css 및 main.js에 대한 GET 요청 Parse Stylesheet - CSSOM이 style.css 용으로 생성 Evaluate Script - main.js 평가 Layout - HTML의 메타 뷰포트 태그를 기반으로 레이아웃 생성 Paint - 문서의 픽셀을 페인트 이 정보를 바탕으로 Critical Rendering Path를 최적화하는 방법을 결정할 수 있다.]]></summary><content type="html"><![CDATA[<blockquote>
<p>아래의 글은 &quot;<a href="https://bitsofco.de/understanding-the-critical-rendering-path/">Understanding the Critical Rendering Path</a>&quot;의 내용을 번역한 글이다.</p>
</blockquote>
<p>브라우저가 서버에서 페이지에 대한 HTML 응답을 받으면 화면에 표시되기 전에 많은 단계를 거쳐야 한다. 브라우저가 페이지의 초기 출력을 위해 실행해야하는 이 순서를 &quot;Critical Rendering Path&quot;(이하 CRP)라고 한다.</p>
<p>사이트의 성능을 향상시키는 방법을 이해하는데 CRP에 대한 지식은 매우 유용하다. CRP는 아래와 같이 6단계로 구성된다.</p>
<ol>
<li>DOM 트리 구축(Constructing the DOM Tree)</li>
<li>CSSOM 트리 구축(Constructing the CSSOM Tree)</li>
<li>JavaScript 실행(Running JavaScript)</li>
<li>랜더링 트리 구축(Creating the Render Tree)</li>
<li>레이아웃 생성(Generating the Layout)</li>
<li>페인팅(Painting)</li>
</ol>
<p><img src="/res/img/post/2017/05/understanding-the-critical-rendering-path.png" alt="understanding-the-critical-rendering-path" width="742" height="214" /></p>
<h3>1.  DOM 트리 구축(Constructing the DOM Tree)</h3>
<p>DOM(Document Object Model) 트리는 완전히 구문 분석된 HTML 페이지의 Object 표현이다. 루트 요소 <code>&lt;html&gt;</code>로 시작하여 페이지의 각 element/text에 대한 노드가 만들어진다. 다른 요소 내에 중첩된 요소는 자식 노드로 표시되며 각 노드에는 해당 요소의 전체 특성이 포함된다. 예를 들어, <code>&lt;a&gt;</code> 요소는 노드와 관련된 <code>href</code> 속성을 갖는다.</p>
<p>예를들어 아래의 html 문서를 보자.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"style.css"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-title">header</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">header</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">main</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Introduction<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Lorem ipsum dolor sit amet<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">main</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">footer</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">small</span>&gt;</span>Copyright 2017<span class="hljs-tag">&lt;/<span class="hljs-title">small</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">footer</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>  
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>  </pre>
<p>위 html 문서는 다음과 같은 DOM 트리를 생성한다.</p>
<p><img src="/res/img/post/2017/05/understanding-the-critical-rendering-path-1.png" alt="understanding-the-critical-rendering-path-1" width="780" height="411" /></p>
<p>HTML의 장점은 부분적으로 실행될 수 있다는 것이다. 페이지에 내용이 표시하기 위해 전체 문서를 로드할 필요가 없다. 그러나 다른 리소스인 CSS와 JavaScript는 페이지 렌더링을 차단할 수 있다.</p>
<h3>2. CSSOM 트리 구축(Constructing the CSSOM Tree)</h3>
<p>CSSOM(CSS Object Model)은 DOM과 연관된 스타일의 Object 표현이다. 이것은 DOM과 비슷한 방식으로 표현되지만 명시적 또는 암시적 선언과 상속 여부에 관계없이 각 노드의 관련 스타일로 표시된다.</p>
<p>위에서 언급한 html 문서의 <code>style.css</code> 파일에는 아래와 같은 style이 정의되어 있다.</p>
<pre class="hljs css"><span class="hljs-tag">body</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">18px</span></span></span>; }</span>

<span class="hljs-tag">header</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> plum</span></span>; }</span>  
<span class="hljs-tag">h1</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">28px</span></span></span>; }</span>

<span class="hljs-tag">main</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">color</span>:<span class="hljs-value"> firebrick</span></span>; }</span>  
<span class="hljs-tag">h2</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">font-size</span>:<span class="hljs-value"> <span class="hljs-number">20px</span></span></span>; }</span>

<span class="hljs-tag">footer</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value"> none</span></span>; }</span>  </pre>
<p>위 CSS는 다음과 같은 CSSOM 트리를 생성한다.</p>
<p><img src="/res/img/post/2017/05/understanding-the-critical-rendering-path-2.png" alt="understanding-the-critical-rendering-path-2" width="780" height="411" /></p>
<p>CSS는 &quot;<strong>렌더링 차단 리소스(render blocking resource)</strong>&quot;로 간주된다. 즉, 먼저 리소스를 완전히 파싱하지 않으면 렌더링 트리를 구성 할 수 없다. HTML과 달리 CSS는 계단식 상속  특성 때문에 부분적으로 실행될 수 없다. 문서의 뒷부분에 정의된 스타일은 이전에 정의된 스타일을 무시하고 변경할 수 있다. 따라서 스타일 시트 전체가 파싱되기 전에 스타일 시트에서 앞에서 정의한 CSS 스타일을 사용하기 시작하면 잘못된 CSS가 적용되는 상황이 발생할 수 있다. 즉, 다음 단계로 넘어 가기 전에 CSS를 완전히 파싱 해야 한다.</p>
<p>CSS 파일은 현재 장치에 적용되는 경우에만 렌더링 차단 리소스로 간주된다. <code>&lt;link rel = "stylesheet"&gt;</code> 태그는 미디어 속성을 받아 들일 수 있다. 미디어 속성은 스타일이 적용되는 미디어 쿼리를 지정할 수 있다. 예를 들어 media 속성이 <code>orientation:landscape</code> 인 스타일 시트가 있고 페이지를 세로 모드로 보고 있는 경우 해당 리소스는 렌더링 차단 리소스로 간주되지 않는다.</p>
<p>CSS는 &quot;script blocking&quot;일 수도 있다. 이것은 JavaScript 파일이 실행되기 전에 CSSOM이 생성 될 때까지 기다려야 하기 때문이다.</p>
<h3>3. JavaScript 실행(Running JavaScript)</h3>
<p>JavaScript는 &quot;<strong>파서 차단 리소스(parser blocking resource)</strong>&quot;로 간주된다. 즉, HTML 문서 자체의 구문 분석은 JavaScript에 의해 차단된다.</p>
<p>파서가 내부 태그이든 외부 태그이든 <code>&lt;script&gt;</code> 태그에 도달하면 (외부 태그 인 경우) fetch를 중단하고 실행한다. 따라서 문서 내의 요소를 참조하는 JavaScript 파일이 있는 경우 해당 문서가 표시된 후에 배치 해야 한다.</p>
<p>JavaScript가 파서 차단(parser blocking)되는 것을 피하기 위해 <code>async</code> 속성을 적용하여 비동기적으로 로드 할 수 있다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">async</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"script.js"</span>&gt;</span><span class=""></span></pre>
<h3>4. 랜더링 트리 구축(Creating the Render Tree)</h3>
<p>렌더링 트리는 DOM과 CSSOM의 조합이다. 페이지에서 최종적으로 렌더링 될 내용을 나타내는 트리다. 즉, 표시되는 내용만 캡쳐하가 때문에 <code>display:none</code>을 사용하여 CSS로 숨겨진 요소는 포함하지 않는다.</p>
<p>위의 예제 DOM과 CSSOM을 사용하여 다음 렌더링 트리가 생성된다.</p>
<p><img src="/res/img/post/2017/05/understanding-the-critical-rendering-path-3.png" alt="understanding-the-critical-rendering-path-3" width="780" height="411" /></p>
<h3>5. 레이아웃 생성(Generating the Layout)</h3>
<p>레이아웃은 뷰포트의 크기에 관련된 CSS 스타일에 대한 컨텍스트에 의해 뷰포트의 크기를 결정한다. 비율 또는 뷰포트 단위. 뷰포트 크기는 문서 헤드에 제공된 메타 뷰포트 태그에 의해 결정되거나, 태그가 제공되지 않으면 기본 뷰포트 너비 인 980px가 사용된다.</p>
<p>예를 들어 가장 일반적인 메타 뷰포트 값은 뷰포트 크기를 장치 너비에 맞게 설정하는 것이다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"viewport"</span> <span class="hljs-attribute">content</span>=<span class="hljs-value">"width=device-width,initial-scale=1"</span>&gt;</span>  </pre>
<p>예를 들어 사용자가 너비가 1000px 인 기기에서 웹 페이지를 방문하면 뷰포트 크기는 해당 값을 기반으로 합니다. 뷰포트의 절반은 500px이고, 10vw는 100px이 된다.</p>
<h3>6. 페인팅(Painting)</h3>
<p>마지막으로 Painting 단계에서 페이지의 가시적인 내용을 픽셀로 변환하여 화면에 표시 할 수 있다.</p>
<p>페인트 단계에서 처리에 걸리는 시간은 DOM의 크기와 적용되는 스타일에 따라 다르다. 어떤 스타일은 다른 스타일보다 더 많은 작업을 필요로 한다. 예를 들어, 복잡한 그래디언트 배경 이미지는 단순한 단색 배경색보다 더 많은 시간을 필요로 한다.</p>
<h3>종합(Putting it All Together)</h3>
<p>Critical Rendering Path를 진행하는 과정을 DevTools로 확인 할 수 있다(Chrome에서는 DevTools의 Performance에서 확인 할 수 있다).</p>
<p>예를 들어 위의 샘플 HTML (<code>&lt;script&gt;</code> 태그가 추가 된 경우) -</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-title">title</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-title">title</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">link</span> <span class="hljs-attribute">rel</span>=<span class="hljs-value">"stylesheet"</span> <span class="hljs-attribute">href</span>=<span class="hljs-value">"style.css"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-title">header</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">h1</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-title">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">header</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">main</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">h2</span>&gt;</span>Introduction<span class="hljs-tag">&lt;/<span class="hljs-title">h2</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">p</span>&gt;</span>Lorem ipsum dolor sit amet<span class="hljs-tag">&lt;/<span class="hljs-title">p</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">main</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">footer</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-title">small</span>&gt;</span>Copyright 2017<span class="hljs-tag">&lt;/<span class="hljs-title">small</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-title">footer</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-title">script</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"main.js"</span>&gt;</span><span class=""></span><span class="hljs-tag">&lt;/<span class="hljs-title">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>  
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span>  </pre>
<p>페이지 로드에 대한 이벤트 로그를 보면 아래와 같은 결과를 볼 수 있다.</p>
<p><img src="/res/img/post/2017/05/understanding-the-critical-rendering-path-4.png" alt="understanding-the-critical-rendering-path-4" width="568" height="681" /></p>
<ol>
<li>Send Request - index.html에 대한 GET 요청 전송</li>
<li>Parse HTML and Send Request - HTML 및 DOM 구문 분석을 시작. style.css 및 main.js에 대한 GET 요청</li>
<li>Parse Stylesheet - CSSOM이 style.css 용으로 생성</li>
<li>Evaluate Script - main.js 평가</li>
<li>Layout - HTML의 메타 뷰포트 태그를 기반으로 레이아웃 생성</li>
<li>Paint - 문서의 픽셀을 페인트</li>
</ol>
<p>이 정보를 바탕으로 Critical Rendering Path를 최적화하는 방법을 결정할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/02/absolute-enable-right-click-copy/</id><title type="html">마우스 우클릭/드래그 방지 해제 방법(북마크릿)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/02/absolute-enable-right-click-copy/"/><published>2017-05-02T14:25:31+09:00</published><updated>2017-05-02T15:09:52+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[웹사이트를 서핑하다가 필요한 내용이 있어 복사하려고 하면 우클릭이나 드래그를 막아놔서 복사를 할 수 없도록 하는 사이트들이 있다. 이런 경우라면 javascript를 끄고 해당 사이트를 방문하면 대부분 복사가 가능하다. 하지만 매번 이렇게 하기에는 귀찮다. 그래서 찾아보니 기존에 돌아다니는 우클릭 해제에 관련된 스크립트들은 대부분이 지금은 동작하지 않았다. 그래서 그런대로 잘 동작하는 스크립트를 가져다가 조금 개선해서 gist에 올려 놨다. 코드를 소개하기에 앞서 무단 복제는 지양하기를 바란다. 나도 나름의 콘텐트를 생산하는 입장헤서 불펌은 반대한다. 내용을 퍼간다면 최소한 출처를 남겨주는 예의만이라도... 다만, 개발 관련된 문서를 보다 보면 소개한 내용 중 일부(쉘 명령어 등)을 복사해서 사용해야 하는데 복사하기가 막혀 너무 불편한 부분을 해소하기 위해 만든 것이다. 일단 원 소스는 asamaru7/right-click.js에 공개되어 있으니 개선이 필요한 부분은 직접 개선해서 사용해도 된다. 위 소스를 북마크릿으로 변형한 소스는 아래와 같다. javascript:(function () %7B%0A%09if (window.subvaAllowRightClick === undefined) %7B%0A%09%09// https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code%0A%09%09window.subvaAllowRightClick = function (dom) %7B%0A%09%09%09(function GetSelection() %7B%0A%09%09%09%09var Style = dom.createElement('style');%0A%09%09%09%09Style.type = 'text/css';%0A%09%09%09%09var TextNode = '*%7Buser-select:text!important;-webkit-user-select:text!important;%7D';%0A%09%09%09%09if (Style.styleSheet) %7B%0A%09%09%09%09%09Style.styleSheet.cssText = TextNode;%0A%09%09%09%09%7D%0A%09%09%09%09else %7B%0A%09%09%09%09%09Style.appendChild(dom.createTextNode(TextNode));%0A%09%09%09%09%7D%0A%09%09%09%09dom.getElementsByTagName('head')%5B0%5D.appendChild(Style);%0A%09%09%09%7D)();%0A%0A%09%09%09(function SetEvents() %7B%0A%09%09%09%09var events = %5B'copy', 'cut', 'paste', 'select', 'selectstart'%5D;%0A%09%09%09%09for (var i = 0; i < events.length; i++)%0A%09%09%09%09%09dom.addEventListener(events%5Bi%5D, function (e) %7B%0A%09%09%09%09%09%09e.stopPropagation();%0A%09%09%09%09%09%7D, true);%0A%09%09%09%7D)();%0A%0A%09%09%09(function RestoreEvents() %7B%0A%09%09%09%09var n = null;%0A%09%09%09%09var d = document;%0A%09%09%09%09var b = dom.body;%0A%09%09%09%09var SetEvents = %5Bd.oncontextmenu = n, d.onselectstart = n, d.ondragstart = n, d.onmousedown = n%5D;%0A%09%09%09%09var GetEvents = %5Bb.oncontextmenu = n, b.onselectstart = n, b.ondragstart = n, b.onmousedown = n, b.oncut = n, b.oncopy = n, b.onpaste = n%5D;%0A%09%09%09%7D)();%0A%0A%09%09%09(function RightClickButton() %7B%0A%09%09%09%09setTimeout(function () %7B%0A%09%09%09%09%09dom.oncontextmenu = null;%0A%09%09%09%09%7D, 2000);%0A%09%09%09%09function EventsCall(callback) %7B%0A%09%09%09%09%09this.events = %5B'DOMAttrModified', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMCharacterDataModified', 'DOMSubtreeModified'%5D;%0A%09%09%09%09%09this.bind();%0A%09%09%09%09%7D%0A%0A%09%09%09%09EventsCall.prototype.bind = function () %7B%0A%09%09%09%09%09this.events.forEach(function (event) %7B%0A%09%09%09%09%09%09dom.addEventListener(event, this, true);%0A%09%09%09%09%09%7D.bind(this));%0A%09%09%09%09%7D;%0A%09%09%09%09EventsCall.prototype.handleEvent = function () %7B%0A%09%09%09%09%09this.isCalled = true;%0A%09%09%09%09%7D;%0A%09%09%09%09EventsCall.prototype.unbind = function () %7B%0A%09%09%09%09%09this.events.forEach(function (event) %7B%0A%09%09%09%09%09%7D.bind(this));%0A%09%09%09%09%7D;%0A%09%09%09%09function EventHandler(event) %7B%0A%09%09%09%09%09this.event = event;%0A%09%09%09%09%09this.contextmenuEvent = this.createEvent(this.event.type);%0A%09%09%09%09%7D%0A%0A%09%09%09%09EventHandler.prototype.createEvent = function (type) %7B%0A%09%09%09%09%09var target = this.event.target;%0A%09%09%09%09%09var event = target.ownerDocument.createEvent('MouseEvents');%0A%09%09%09%09%09event.initMouseEvent(type, this.event.bubbles, this.event.cancelable,%0A%09%09%09%09%09%09target.ownerDocument.defaultView, this.event.detail,%0A%09%09%09%09%09%09this.event.screenX, this.event.screenY, this.event.clientX, this.event.clientY,%0A%09%09%09%09%09%09this.event.ctrlKey, this.event.altKey, this.event.shiftKey, this.event.metaKey,%0A%09%09%09%09%09%09this.event.button, this.event.relatedTarget);%0A%09%09%09%09%09return event;%0A%09%09%09%09%7D;%0A%09%09%09%09EventHandler.prototype.fire = function () %7B%0A%09%09%09%09%09var target = this.event.target;%0A%09%09%09%09%09var contextmenuHandler = function (event) %7B%0A%09%09%09%09%09%09event.preventDefault();%0A%09%09%09%09%09%7D.bind(this);%0A%09%09%09%09%09target.dispatchEvent(this.contextmenuEvent);%0A%09%09%09%09%09this.isCanceled = this.contextmenuEvent.defaultPrevented;%0A%09%09%09%09%7D;%0A%09%09%09%09window.addEventListener('contextmenu', handleEvent, true);%0A%09%09%09%09function handleEvent(event) %7B%0A%09%09%09%09%09event.stopPropagation();%0A%09%09%09%09%09event.stopImmediatePropagation();%0A%09%09%09%09%09var handler = new EventHandler(event);%0A%09%09%09%09%09window.removeEventListener(event.type, handleEvent, true);%0A%09%09%09%09%09var EventsCallBback = new EventsCall(function () %7B%0A%09%09%09%09%09%7D);%0A%09%09%09%09%09handler.fire();%0A%09%09%09%09%09window.addEventListener(event.type, handleEvent, true);%0A%09%09%09%09%09if (handler.isCanceled && (EventsCallBback.isCalled))%0A%09%09%09%09%09%09event.preventDefault();%0A%09%09%09%09%7D%0A%09%09%09%7D)();%0A%0A%09%09%09// function KeyPress(e) %7B%0A%09%09%09// %09if (e.altKey && e.ctrlKey) %7B%0A%09%09%09// %09%09if (confirm("Activate Absolute Right Click Mode!") === true) %7B%0A%09%09%09// %09%09%09Absolute_Mod();%0A%09%09%09// %09%09%7D%0A%09%09%09// %09%7D%0A%09%09%09// %7D%0A%09%09%09// dom.addEventListener("keydown", KeyPress);%0A%0A%09%09%09(function Absolute_Mod() %7B%0A%09%09%09%09var events = %5B'contextmenu', 'copy', 'cut', 'paste', 'mouseup', 'mousedown', 'keyup', 'keydown', 'drag', 'dragstart', 'select', 'selectstart'%5D;%0A%09%09%09%09for (var i = 0; i < events.length; i++) %7B%0A%09%09%09%09%09dom.addEventListener(events%5Bi%5D, function (e) %7B%0A%09%09%09%09%09%09e.stopPropagation();%0A%09%09%09%09%09%7D, true);%0A%09%09%09%09%7D%0A%09%09%09%7D)();%0A%09%09%7D;%0A%0A//%09%09window.subvaAllowRightClick(document);%0A%0A%09%09function runAll(w) %7B%0A%09%09%09try %7B%0A%09%09%09%09window.subvaAllowRightClick(w.document);%0A%09%09%09%7D catch (e) %7B%0A%09%09%09%7D%0A%09%09%09for (var i = 0; i < w.frames.length; i++) %7B%0A%09%09%09%09runAll(w.frames%5Bi%5D);%0A%09%09%09%7D%0A%09%09%7D%0A%09%7D%0A%09runAll(window);%0A%7D)(); 사용하는 브라우저에서 북마크를 하나 만들고 위 소스를 복사해서 url에 입력하면 된다. 사용 방법은 당연히 우클릭이 막힌 페이지에 가서 새로 만든 북마크를 누르면 해당 페이지에서 우클릭을 사용할 수 있다. 위 방법이 어렵다면 "북마크릿 생성기-우클릭 해제"에 가서 아래쪽에 있는 "DRAG INTO YOUR BOOKMARK-TOOLBAR" 링크를 드래그해서 북마크바에 올려 놓으면 자동 추가된다. gist에 공개되어 있지만 여기에도 소스를 남겨둔다. (function () { if (window.subvaAllowRightClick === undefined) { // https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code window.subvaAllowRightClick = function (dom) { (function GetSelection() { var Style = dom.createElement('style'); Style.type = 'text/css'; var TextNode = '*{user-select:text!important;-webkit-user-select:text!important;}'; if (Style.styleSheet) { Style.styleSheet.cssText = TextNode; } else { Style.appendChild(dom.createTextNode(TextNode)); } dom.getElementsByTagName('head')[0].appendChild(Style); })(); (function SetEvents() { var events = ['copy', 'cut', 'paste', 'select', 'selectstart']; for (var i = 0; i < events.length; i++) dom.addEventListener(events[i], function (e) { e.stopPropagation(); }, true); })(); (function RestoreEvents() { var n = null; var d = document; var b = dom.body; var SetEvents = [d.oncontextmenu = n, d.onselectstart = n, d.ondragstart = n, d.onmousedown = n]; var GetEvents = [b.oncontextmenu = n, b.onselectstart = n, b.ondragstart = n, b.onmousedown = n, b.oncut = n, b.oncopy = n, b.onpaste = n]; })(); (function RightClickButton() { setTimeout(function () { dom.oncontextmenu = null; }, 2000); function EventsCall(callback) { this.events = ['DOMAttrModified', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMCharacterDataModified', 'DOMSubtreeModified']; this.bind(); } EventsCall.prototype.bind = function () { this.events.forEach(function (event) { dom.addEventListener(event, this, true); }.bind(this)); }; EventsCall.prototype.handleEvent = function () { this.isCalled = true; }; EventsCall.prototype.unbind = function () { this.events.forEach(function (event) { }.bind(this)); }; function EventHandler(event) { this.event = event; this.contextmenuEvent = this.createEvent(this.event.type); } EventHandler.prototype.createEvent = function (type) { var target = this.event.target; var event = target.ownerDocument.createEvent('MouseEvents'); event.initMouseEvent(type, this.event.bubbles, this.event.cancelable, target.ownerDocument.defaultView, this.event.detail, this.event.screenX, this.event.screenY, this.event.clientX, this.event.clientY, this.event.ctrlKey, this.event.altKey, this.event.shiftKey, this.event.metaKey, this.event.button, this.event.relatedTarget); return event; }; EventHandler.prototype.fire = function () { var target = this.event.target; var contextmenuHandler = function (event) { event.preventDefault(); }.bind(this); target.dispatchEvent(this.contextmenuEvent); this.isCanceled = this.contextmenuEvent.defaultPrevented; }; window.addEventListener('contextmenu', handleEvent, true); function handleEvent(event) { event.stopPropagation(); event.stopImmediatePropagation(); var handler = new EventHandler(event); window.removeEventListener(event.type, handleEvent, true); var EventsCallBback = new EventsCall(function () { }); handler.fire(); window.addEventListener(event.type, handleEvent, true); if (handler.isCanceled && (EventsCallBback.isCalled)) event.preventDefault(); } })(); // function KeyPress(e) { // if (e.altKey && e.ctrlKey) { // if (confirm("Activate Absolute Right Click Mode!") === true) { // Absolute_Mod(); // } // } // } // dom.addEventListener("keydown", KeyPress); (function Absolute_Mod() { var events = ['contextmenu', 'copy', 'cut', 'paste', 'mouseup', 'mousedown', 'keyup', 'keydown', 'drag', 'dragstart', 'select', 'selectstart']; for (var i = 0; i < events.length; i++) { dom.addEventListener(events[i], function (e) { e.stopPropagation(); }, true); } })(); }; // window.subvaAllowRightClick(document); function runAll(w) { try { window.subvaAllowRightClick(w.document); } catch (e) { } for (var i = 0; i < w.frames.length; i++) { runAll(w.frames[i]); } } } runAll(window); })();]]></summary><content type="html"><![CDATA[<p>웹사이트를 서핑하다가 필요한 내용이 있어 복사하려고 하면 우클릭이나 드래그를 막아놔서 복사를 할 수 없도록 하는 사이트들이 있다. 이런 경우라면 javascript를 끄고 해당 사이트를 방문하면 대부분 복사가 가능하다.</p>
<p>하지만 매번 이렇게 하기에는 귀찮다. 그래서 찾아보니 기존에 돌아다니는 우클릭 해제에 관련된 스크립트들은 대부분이 지금은 동작하지 않았다. 그래서 <a href="https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code">그런대로 잘 동작하는 스크립트</a>를 가져다가 조금 개선해서 <a href="https://gist.github.com/asamaru7/ebab2459eaae6d33f87dba328d435a84">gist</a>에 올려 놨다.</p>
<p>코드를 소개하기에 앞서 무단 복제는 지양하기를 바란다. 나도 나름의 콘텐트를 생산하는 입장헤서 불펌은 반대한다. 내용을 퍼간다면 최소한 출처를 남겨주는 예의만이라도...
다만, 개발 관련된 문서를 보다 보면 소개한 내용 중 일부(쉘 명령어 등)을 복사해서 사용해야 하는데 복사하기가 막혀 너무 불편한 부분을 해소하기 위해 만든 것이다.</p>
<p>일단 원 소스는 <a href="https://gist.github.com/asamaru7/ebab2459eaae6d33f87dba328d435a84">asamaru7/right-click.js</a>에 공개되어 있으니 개선이 필요한 부분은 직접 개선해서 사용해도 된다.</p>
<p>위 소스를 북마크릿으로 변형한 소스는 아래와 같다.</p>
<pre class="hljs javascript">javascript:(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09<span class="hljs-title">if</span> (<span class="hljs-params">window.subvaAllowRightClick === undefined</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09// <span class="hljs-title">https</span>://<span class="hljs-title">greasyfork</span>.<span class="hljs-title">org</span>/<span class="hljs-title">en</span>/<span class="hljs-title">scripts</span>/23772-<span class="hljs-title">absolute</span>-<span class="hljs-title">enable</span>-<span class="hljs-title">right</span>-<span class="hljs-title">click</span>-<span class="hljs-title">copy</span>/<span class="hljs-title">code</span>%0<span class="hljs-title">A</span>%09%09<span class="hljs-title">window</span>.<span class="hljs-title">subvaAllowRightClick</span> = <span class="hljs-title">function</span> (<span class="hljs-params">dom</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function GetSelection(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">Style</span> = <span class="hljs-title">dom</span>.<span class="hljs-title">createElement</span>(<span class="hljs-params">'style'</span>);%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">Style</span>.<span class="hljs-title">type</span> = '<span class="hljs-title">text</span>/<span class="hljs-title">css</span>';%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">TextNode</span> = '*%7<span class="hljs-title">Buser</span>-<span class="hljs-title">select</span>:<span class="hljs-title">text</span>!<span class="hljs-title">important</span>;-<span class="hljs-title">webkit</span>-<span class="hljs-title">user</span>-<span class="hljs-title">select</span>:<span class="hljs-title">text</span>!<span class="hljs-title">important</span>;%7<span class="hljs-title">D</span>';%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">if</span> (<span class="hljs-params">Style.styleSheet</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">Style</span>.<span class="hljs-title">styleSheet</span>.<span class="hljs-title">cssText</span> = <span class="hljs-title">TextNode</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">else</span> %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">Style</span>.<span class="hljs-title">appendChild</span>(<span class="hljs-params">dom.createTextNode(TextNode</span>));%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">getElementsByTagName</span>(<span class="hljs-params">'head'</span>)%5<span class="hljs-title">B0</span>%5<span class="hljs-title">D</span>.<span class="hljs-title">appendChild</span>(<span class="hljs-params">Style</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function SetEvents(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">events</span> = %5<span class="hljs-title">B</span>'<span class="hljs-title">copy</span>', '<span class="hljs-title">cut</span>', '<span class="hljs-title">paste</span>', '<span class="hljs-title">select</span>', '<span class="hljs-title">selectstart</span>'%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">for</span> (<span class="hljs-params">var i = 0; i &lt; events.length; i++</span>)%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">events%5Bi%5D, function (e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">e</span>.<span class="hljs-title">stopPropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>, <span class="hljs-title">true</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function RestoreEvents(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">n</span> = <span class="hljs-title">null</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">d</span> = <span class="hljs-title">document</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">b</span> = <span class="hljs-title">dom</span>.<span class="hljs-title">body</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">SetEvents</span> = %5<span class="hljs-title">Bd</span>.<span class="hljs-title">oncontextmenu</span> = <span class="hljs-title">n</span>, <span class="hljs-title">d</span>.<span class="hljs-title">onselectstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">d</span>.<span class="hljs-title">ondragstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">d</span>.<span class="hljs-title">onmousedown</span> = <span class="hljs-title">n</span>%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">GetEvents</span> = %5<span class="hljs-title">Bb</span>.<span class="hljs-title">oncontextmenu</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">onselectstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">ondragstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">onmousedown</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">oncut</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">oncopy</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">onpaste</span> = <span class="hljs-title">n</span>%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function RightClickButton(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">setTimeout</span>(<span class="hljs-params">function (</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">oncontextmenu</span> = <span class="hljs-title">null</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>, 2000);%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">function</span> <span class="hljs-title">EventsCall</span>(<span class="hljs-params">callback</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">events</span> = %5<span class="hljs-title">B</span>'<span class="hljs-title">DOMAttrModified</span>', '<span class="hljs-title">DOMNodeInserted</span>', '<span class="hljs-title">DOMNodeRemoved</span>', '<span class="hljs-title">DOMCharacterDataModified</span>', '<span class="hljs-title">DOMSubtreeModified</span>'%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">bind</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventsCall</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">bind</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">events</span>.<span class="hljs-title">forEach</span>(<span class="hljs-params">function (event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">event, this, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>.<span class="hljs-title">bind</span>(<span class="hljs-params">this</span>));%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventsCall</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">handleEvent</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">isCalled</span> = <span class="hljs-title">true</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventsCall</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">unbind</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">events</span>.<span class="hljs-title">forEach</span>(<span class="hljs-params">function (event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>.<span class="hljs-title">bind</span>(<span class="hljs-params">this</span>));%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">function</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">event</span> = <span class="hljs-title">event</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">contextmenuEvent</span> = <span class="hljs-title">this</span>.<span class="hljs-title">createEvent</span>(<span class="hljs-params">this.event.type</span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventHandler</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">createEvent</span> = <span class="hljs-title">function</span> (<span class="hljs-params">type</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">target</span> = <span class="hljs-title">this</span>.<span class="hljs-title">event</span>.<span class="hljs-title">target</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">event</span> = <span class="hljs-title">target</span>.<span class="hljs-title">ownerDocument</span>.<span class="hljs-title">createEvent</span>(<span class="hljs-params">'MouseEvents'</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">initMouseEvent</span>(<span class="hljs-params">type, this.event.bubbles, this.event.cancelable,%0A%09%09%09%09%09%09target.ownerDocument.defaultView, this.event.detail,%0A%09%09%09%09%09%09this.event.screenX, this.event.screenY, this.event.clientX, this.event.clientY,%0A%09%09%09%09%09%09this.event.ctrlKey, this.event.altKey, this.event.shiftKey, this.event.metaKey,%0A%09%09%09%09%09%09this.event.button, this.event.relatedTarget</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">return</span> <span class="hljs-title">event</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventHandler</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">fire</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">target</span> = <span class="hljs-title">this</span>.<span class="hljs-title">event</span>.<span class="hljs-title">target</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">contextmenuHandler</span> = <span class="hljs-title">function</span> (<span class="hljs-params">event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">preventDefault</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>.<span class="hljs-title">bind</span>(<span class="hljs-params">this</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">target</span>.<span class="hljs-title">dispatchEvent</span>(<span class="hljs-params">this.contextmenuEvent</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">isCanceled</span> = <span class="hljs-title">this</span>.<span class="hljs-title">contextmenuEvent</span>.<span class="hljs-title">defaultPrevented</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">'contextmenu', handleEvent, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">function</span> <span class="hljs-title">handleEvent</span>(<span class="hljs-params">event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">stopPropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">stopImmediatePropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">handler</span> = <span class="hljs-title">new</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">event</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">removeEventListener</span>(<span class="hljs-params">event.type, handleEvent, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">EventsCallBback</span> = <span class="hljs-title">new</span> <span class="hljs-title">EventsCall</span>(<span class="hljs-params">function (</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">handler</span>.<span class="hljs-title">fire</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">event.type, handleEvent, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">if</span> (<span class="hljs-params">handler.isCanceled &amp;&amp; (EventsCallBback.isCalled</span>))%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">preventDefault</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09// <span class="hljs-title">function</span> <span class="hljs-title">KeyPress</span>(<span class="hljs-params">e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09// %09<span class="hljs-title">if</span> (<span class="hljs-params">e.altKey &amp;&amp; e.ctrlKey</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09// %09%09<span class="hljs-title">if</span> (<span class="hljs-params">confirm("Activate Absolute Right Click Mode!"</span>) === <span class="hljs-title">true</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09// %09%09%09<span class="hljs-title">Absolute_Mod</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09// %09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09// %09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09// %7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09// <span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">"keydown", KeyPress</span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function Absolute_Mod(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">events</span> = %5<span class="hljs-title">B</span>'<span class="hljs-title">contextmenu</span>', '<span class="hljs-title">copy</span>', '<span class="hljs-title">cut</span>', '<span class="hljs-title">paste</span>', '<span class="hljs-title">mouseup</span>', '<span class="hljs-title">mousedown</span>', '<span class="hljs-title">keyup</span>', '<span class="hljs-title">keydown</span>', '<span class="hljs-title">drag</span>', '<span class="hljs-title">dragstart</span>', '<span class="hljs-title">select</span>', '<span class="hljs-title">selectstart</span>'%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">for</span> (<span class="hljs-params">var i = 0; i &lt; events.length; i++</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">events%5Bi%5D, function (e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">e</span>.<span class="hljs-title">stopPropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>, <span class="hljs-title">true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>//%09%09<span class="hljs-title">window</span>.<span class="hljs-title">subvaAllowRightClick</span>(<span class="hljs-params">document</span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09<span class="hljs-title">function</span> <span class="hljs-title">runAll</span>(<span class="hljs-params">w</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09<span class="hljs-title">try</span> %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">subvaAllowRightClick</span>(<span class="hljs-params">w.document</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span> <span class="hljs-title">catch</span> (<span class="hljs-params">e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09<span class="hljs-title">for</span> (<span class="hljs-params">var i = 0; i &lt; w.frames.length; i++</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">runAll</span>(<span class="hljs-params">w.frames%5Bi%5D</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09<span class="hljs-title">runAll</span>(<span class="hljs-params">window</span>);%0<span class="hljs-title">A</span>%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);</span></pre>
<p>사용하는 브라우저에서 북마크를 하나 만들고 위 소스를 복사해서 url에 입력하면 된다. 사용 방법은 당연히 우클릭이 막힌 페이지에 가서 새로 만든 북마크를 누르면 해당 페이지에서 우클릭을 사용할 수 있다.</p>
<p>위 방법이 어렵다면 &quot;<a href="http://bookmarklet.asamaru.net/right-click.html">북마크릿 생성기-우클릭 해제</a>&quot;에 가서 아래쪽에 있는 &quot;DRAG INTO YOUR BOOKMARK-TOOLBAR&quot; 링크를 드래그해서 북마크바에 올려 놓으면 자동 추가된다.</p>
<p>gist에 공개되어 있지만 여기에도 소스를 남겨둔다.</p>
<pre class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.subvaAllowRightClick === <span class="hljs-literal">undefined</span>) {
        <span class="hljs-comment">// https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code</span>
        <span class="hljs-built_in">window</span>.subvaAllowRightClick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">dom</span>) </span>{
            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetSelection</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> Style = dom.createElement(<span class="hljs-string">'style'</span>);
                Style.type = <span class="hljs-string">'text/css'</span>;
                <span class="hljs-keyword">var</span> TextNode = <span class="hljs-string">'*{user-select:text!important;-webkit-user-select:text!important;}'</span>;
                <span class="hljs-keyword">if</span> (Style.styleSheet) {
                    Style.styleSheet.cssText = TextNode;
                }
                <span class="hljs-keyword">else</span> {
                    Style.appendChild(dom.createTextNode(TextNode));
                }
                dom.getElementsByTagName(<span class="hljs-string">'head'</span>)[<span class="hljs-number">0</span>].appendChild(Style);
            })();

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SetEvents</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> events = [<span class="hljs-string">'copy'</span>, <span class="hljs-string">'cut'</span>, <span class="hljs-string">'paste'</span>, <span class="hljs-string">'select'</span>, <span class="hljs-string">'selectstart'</span>];
                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; events.length; i++)
                    dom.addEventListener(events[i], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{
                        e.stopPropagation();
                    }, <span class="hljs-literal">true</span>);
            })();

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RestoreEvents</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> n = <span class="hljs-literal">null</span>;
                <span class="hljs-keyword">var</span> d = <span class="hljs-built_in">document</span>;
                <span class="hljs-keyword">var</span> b = dom.body;
                <span class="hljs-keyword">var</span> SetEvents = [d.oncontextmenu = n, d.onselectstart = n, d.ondragstart = n, d.onmousedown = n];
                <span class="hljs-keyword">var</span> GetEvents = [b.oncontextmenu = n, b.onselectstart = n, b.ondragstart = n, b.onmousedown = n, b.oncut = n, b.oncopy = n, b.onpaste = n];
            })();

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RightClickButton</span>(<span class="hljs-params"></span>) </span>{
                setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    dom.oncontextmenu = <span class="hljs-literal">null</span>;
                }, <span class="hljs-number">2000</span>);
                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">EventsCall</span>(<span class="hljs-params">callback</span>) </span>{
                    <span class="hljs-keyword">this</span>.events = [<span class="hljs-string">'DOMAttrModified'</span>, <span class="hljs-string">'DOMNodeInserted'</span>, <span class="hljs-string">'DOMNodeRemoved'</span>, <span class="hljs-string">'DOMCharacterDataModified'</span>, <span class="hljs-string">'DOMSubtreeModified'</span>];
                    <span class="hljs-keyword">this</span>.bind();
                }

                EventsCall.prototype.bind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">this</span>.events.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{
                        dom.addEventListener(event, <span class="hljs-keyword">this</span>, <span class="hljs-literal">true</span>);
                    }.bind(<span class="hljs-keyword">this</span>));
                };
                EventsCall.prototype.handleEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">this</span>.isCalled = <span class="hljs-literal">true</span>;
                };
                EventsCall.prototype.unbind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">this</span>.events.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{
                    }.bind(<span class="hljs-keyword">this</span>));
                };
                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">event</span>) </span>{
                    <span class="hljs-keyword">this</span>.event = event;
                    <span class="hljs-keyword">this</span>.contextmenuEvent = <span class="hljs-keyword">this</span>.createEvent(<span class="hljs-keyword">this</span>.event.type);
                }

                EventHandler.prototype.createEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">type</span>) </span>{
                    <span class="hljs-keyword">var</span> target = <span class="hljs-keyword">this</span>.event.target;
                    <span class="hljs-keyword">var</span> event = target.ownerDocument.createEvent(<span class="hljs-string">'MouseEvents'</span>);
                    event.initMouseEvent(type, <span class="hljs-keyword">this</span>.event.bubbles, <span class="hljs-keyword">this</span>.event.cancelable,
                        target.ownerDocument.defaultView, <span class="hljs-keyword">this</span>.event.detail,
                        <span class="hljs-keyword">this</span>.event.screenX, <span class="hljs-keyword">this</span>.event.screenY, <span class="hljs-keyword">this</span>.event.clientX, <span class="hljs-keyword">this</span>.event.clientY,
                        <span class="hljs-keyword">this</span>.event.ctrlKey, <span class="hljs-keyword">this</span>.event.altKey, <span class="hljs-keyword">this</span>.event.shiftKey, <span class="hljs-keyword">this</span>.event.metaKey,
                        <span class="hljs-keyword">this</span>.event.button, <span class="hljs-keyword">this</span>.event.relatedTarget);
                    <span class="hljs-keyword">return</span> event;
                };
                EventHandler.prototype.fire = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">var</span> target = <span class="hljs-keyword">this</span>.event.target;
                    <span class="hljs-keyword">var</span> contextmenuHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{
                        event.preventDefault();
                    }.bind(<span class="hljs-keyword">this</span>);
                    target.dispatchEvent(<span class="hljs-keyword">this</span>.contextmenuEvent);
                    <span class="hljs-keyword">this</span>.isCanceled = <span class="hljs-keyword">this</span>.contextmenuEvent.defaultPrevented;
                };
                <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'contextmenu'</span>, handleEvent, <span class="hljs-literal">true</span>);
                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleEvent</span>(<span class="hljs-params">event</span>) </span>{
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    <span class="hljs-keyword">var</span> handler = <span class="hljs-keyword">new</span> EventHandler(event);
                    <span class="hljs-built_in">window</span>.removeEventListener(event.type, handleEvent, <span class="hljs-literal">true</span>);
                    <span class="hljs-keyword">var</span> EventsCallBback = <span class="hljs-keyword">new</span> EventsCall(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    });
                    handler.fire();
                    <span class="hljs-built_in">window</span>.addEventListener(event.type, handleEvent, <span class="hljs-literal">true</span>);
                    <span class="hljs-keyword">if</span> (handler.isCanceled &amp;&amp; (EventsCallBback.isCalled))
                        event.preventDefault();
                }
            })();

            <span class="hljs-comment">// function KeyPress(e) {</span>
            <span class="hljs-comment">//  if (e.altKey &amp;&amp; e.ctrlKey) {</span>
            <span class="hljs-comment">//      if (confirm("Activate Absolute Right Click Mode!") === true) {</span>
            <span class="hljs-comment">//          Absolute_Mod();</span>
            <span class="hljs-comment">//      }</span>
            <span class="hljs-comment">//  }</span>
            <span class="hljs-comment">// }</span>
            <span class="hljs-comment">// dom.addEventListener("keydown", KeyPress);</span>

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Absolute_Mod</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> events = [<span class="hljs-string">'contextmenu'</span>, <span class="hljs-string">'copy'</span>, <span class="hljs-string">'cut'</span>, <span class="hljs-string">'paste'</span>, <span class="hljs-string">'mouseup'</span>, <span class="hljs-string">'mousedown'</span>, <span class="hljs-string">'keyup'</span>, <span class="hljs-string">'keydown'</span>, <span class="hljs-string">'drag'</span>, <span class="hljs-string">'dragstart'</span>, <span class="hljs-string">'select'</span>, <span class="hljs-string">'selectstart'</span>];
                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; events.length; i++) {
                    dom.addEventListener(events[i], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{
                        e.stopPropagation();
                    }, <span class="hljs-literal">true</span>);
                }
            })();
        };

<span class="hljs-comment">//      window.subvaAllowRightClick(document);</span>

        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAll</span>(<span class="hljs-params">w</span>) </span>{
            <span class="hljs-keyword">try</span> {
                <span class="hljs-built_in">window</span>.subvaAllowRightClick(w.document);
            } <span class="hljs-keyword">catch</span> (e) {
            }
            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; w.frames.length; i++) {
                runAll(w.frames[i]);
            }
        }
    }
    runAll(<span class="hljs-built_in">window</span>);
})();</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/02/virtualbox-5-1-20-vagrant-shared-folders-mount-error/</id><title type="html">VirtualBox 5.1.20 버전업 후 Vagrant Shared Folders mount 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/02/virtualbox-5-1-20-vagrant-shared-folders-mount-error/"/><published>2017-05-02T13:51:56+09:00</published><updated>2017-05-02T14:02:44+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[개발 환경 구성을 위해 Vagrant를 사용중이다. 그런데 얼마전 VirtualBox를 5.1.20으로 업데이트하고 나니 Shared Folders를 mount 하는 과정에서 오류가 발생했다. Vagrant was unable to mount VirtualBox shared folders. This is usually because the filesystem "vboxsf" is not available. This filesystem is made available via the VirtualBox Guest Additions and kernel module. Please verify that these guest additions are properly installed in the guest. This is not a bug in Vagrant and is usually caused by a faulty Vagrant box. For context, the command attempted was: mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant The error output from the command was: mount: wrong fs type, bad option, bad superblock on vagrant, missing codepage or helper program, or other error In some cases useful info is found in syslog - try dmesg | tail or so. 나의 경우는 shared folders를 사용하지 않고 nfs mount를 사용하고 있어 사용 상에 문제가 되는 부분은 없었으나 실행시 마다 오류가 나타나는 것도 보기 싫고 vagrant up을 한번 더 해줘야 시작시 실행되는 스크립트가 정상 실행되었기 때문에 해결하기 위해 찾아봤다(사실 비슷한 문제에 대해 "VirtualBox 버전업 후 Vagrant synced_folder 설정에서 오류가 날 경우"라는 글을 쓴 적이 있었지만 이번엔 다른 문제였다). 검색해보니 일본어로 되어 있긴 하지만 "VirtualBox 5.1.20で共有フォルダーが動かなくなる対策" 글에 해결 방법이 나와 있었다. 간단한 해결 방법을 소개하자면 아래의 명령을 vagrant vm 내부에서 실행하면 된다. sudo rm /sbin/mount.vboxsf && sudo ln -s /usr/lib/VBoxGuestAdditions/mount.vboxsf /sbin/mount.vboxsf 이후에 vagrant를 재시작 해주면 문제는 해결된다. 재시작하기 싫다면 아래의 명령을 추가로 실행해서 즉시 mount 하는 것도 가능하다. sudo mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant]]></summary><content type="html"><![CDATA[<p>개발 환경 구성을 위해 <a href="https://www.vagrantup.com/">Vagrant</a>를 사용중이다. 그런데 얼마전 VirtualBox를 5.1.20으로 업데이트하고 나니 Shared Folders를 mount 하는 과정에서 오류가 발생했다.</p>
<pre><code>Vagrant was unable to mount VirtualBox shared folders. This is usually
because the filesystem "vboxsf" is not available. This filesystem is
made available via the VirtualBox Guest Additions and kernel module.
Please verify that these guest additions are properly installed in the
guest. This is not a bug in Vagrant and is usually caused by a faulty
Vagrant box. For context, the command attempted was:

mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant

The error output from the command was:

mount: wrong fs type, bad option, bad superblock on vagrant,
       missing codepage or helper program, or other error

       In some cases useful info is found in syslog - try
       dmesg | tail or so.</code></pre>
<p>나의 경우는 shared folders를 사용하지 않고 nfs mount를 사용하고 있어 사용 상에 문제가 되는 부분은 없었으나 실행시 마다 오류가 나타나는 것도 보기 싫고 <code>vagrant up</code>을 한번 더 해줘야 시작시 실행되는 스크립트가 정상 실행되었기 때문에 해결하기 위해 찾아봤다(사실 비슷한 문제에 대해 &quot;<a href="/2015/12/02/vagrant-cant-mount-shared-folder/">VirtualBox 버전업 후 Vagrant synced_folder 설정에서 오류가 날 경우</a>&quot;라는 글을 쓴 적이 있었지만 이번엔 다른 문제였다).</p>
<p>검색해보니 일본어로 되어 있긴 하지만 &quot;<a href="http://qiita.com/poad1010/items/675ffe46e70135fff839">VirtualBox 5.1.20で共有フォルダーが動かなくなる対策</a>&quot; 글에 해결 방법이 나와 있었다.</p>
<p>간단한 해결 방법을 소개하자면 아래의 명령을 vagrant vm 내부에서 실행하면 된다.</p>
<pre class="hljs bash">sudo rm /sbin/mount.vboxsf &amp;&amp; sudo ln <span class="hljs-operator">-s</span> /usr/lib/VBoxGuestAdditions/mount.vboxsf /sbin/mount.vboxsf</pre>
<p>이후에 vagrant를 재시작 해주면 문제는 해결된다. </p>
<p>재시작하기 싫다면 아래의 명령을 추가로 실행해서 즉시 mount 하는 것도 가능하다.</p>
<pre class="hljs bash">sudo mount -t vboxsf -o dmode=<span class="hljs-number">755</span>,fmode=<span class="hljs-number">644</span>,uid=<span class="hljs-number">1000</span>,gid=<span class="hljs-number">1000</span> vagrant /vagrant</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/25/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8/</id><title type="html">PHP 에서 한글 파일명 사용시 pathinfo(), basename() 결과가 맞지 않는 문제 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/25/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8/"/><published>2017-04-25T20:27:54+09:00</published><updated>2017-04-25T21:59:55+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP에서 path에 대한 정보를 얻기 위해 pathinfo()와 basename()을 많이 사용한다. 그런데 path 내에 한글과 같이 UTF-8 문자열이 포함될 경우 결과가 이상하게 나올 수 있다. 일단 아래의 소스 코드와 실행 결과를 보자. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; echo '<br />'; $locales = explode("\n", trim(shell_exec('locale -a'))); foreach ($locales as $locale) { setlocale(LC_ALL, $locale); $info = pathinfo($filepath); if (strcmp($info['basename'], '가 나 다.txt') != 0) { echo $locale . ' -> ' . $info['basename'] . '<br />'; } } /* 실행 결과 Current Location : C C -> 나 다.txt C -> 나 다.txt POSIX -> 나 다.txt */ 위 코드는 현재 system 내에서 사용 가능한 모든 locale에 대해 실행 결과를 테스트한 결과다. 결과를 보면 정상적으로 처리되지 않고 첫글자가 잘려나간 잘못된 결과를 반환하는 경우가 있다. 바로 locale이 C 또는 POSIX인 경우다. 서버 환경 구성에 따른 차이가 있겠지만 나의 경우는 nobody 권한으로 실행되는 웹서버 상에서 현재 locale이 C로 나왔다. 따라서 한글 파일명이 포함된 path에 대해서는 pathinfo()를 사용할 수 없다. 이 문제에 대해 검색하다 Make PHP pathinfo() return the correct filename if the filename is UTF-8 라는 글을 찾았다. 여기서 질문을 한 aä.pdf path에 대해서는 현재 시점(PHP 7)에서 locale C와 POSIX에서도 문제가 없었다. 이 버그와 관련하여 패치가 되었지만 아직 한글에 대한 버그는 남아 있는 것으로 보인다. 혹시나 해서 아래와 같이 일본어로도 동일한 테스트를 해보니 역시나 문제가 발생한다. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/うながす.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; echo '<br />'; $locales = explode("\n", trim(shell_exec('locale -a'))); foreach ($locales as $locale) { setlocale(LC_ALL, $locale); $info = pathinfo($filepath); if (strcmp($info['basename'], 'うながす.txt') != 0) { echo $locale . ' -> ' . $info['basename'] . '<br />'; } } /* 실행 결과 Current Location : C C -> .txt C -> .txt POSIX -> .txt ja_JP -> ��ながす.txt ja_JP.eucjp -> ��ながす.txt ja_JP.ujis -> ��ながす.txt japanese -> ��ながす.txt japanese.euc -> ��ながす.txt ko_KR -> ��ながす.txt ko_KR.euckr -> ��ながす.txt korean -> ��ながす.txt korean.euc -> ��ながす.txt mt_MT -> ��ながす.txt mt_MT.iso88593 -> ��ながす.txt yi_US -> �ながす.txt yi_US.cp1255 -> �ながす.txt zh_CN -> .txt zh_CN.gb2312 -> .txt zh_HK -> �がす.txt zh_HK.big5hkscs -> �がす.txt zh_SG -> .txt zh_SG.gb2312 -> .txt zh_TW -> �がす.txt zh_TW.big5 -> �がす.txt zh_TW.euctw -> .txt */ 결론적으로 이 문제를 해결하기 위해서는 아래와 같이 간단히 해결 가능하다. <?php setlocale(LC_ALL,'ko_KR.UTF-8'); $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; /* 실행 결과 Current Location : ko_KR.UTF-8 ko_KR.UTF-8 -> 가 나 다.txt */ setlocale(LC_ALL,'ko_KR.UTF-8')와 같이 UTF-8을 사용하는 locale로 변경하면 한글 파일명을 가진 path에 대해서도 pathinfo는 정상적으로 동작한다(ko_KR임에도 불구하고 일본어도 정상 동작한다). 이 문제에서의 특징은 한가지가 더 있다. 파일명 앞에 영문자와 같이 한글이 아닌 글자가 있다면 이 문제가 발생하지 않는다는 것이다. 아래의 예시를 보자. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/a가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; /* 실행 결과 Current Location : C C -> a가 나 다.txt */ 이러한 원리를 이용한 방법으로 Make PHP pathinfo() return the correct filename if the filename is UTF-8에서는 아래와 같이 처리하는 방법을 제시하고 있다. <?php function getFilename($path) { // if there's no '/', we're probably dealing with just a filename // so just put an 'a' in front of it if (strpos($path, '/') === false) { $path_parts = pathinfo('a'.$path); } else { $path= str_replace('/', '/a', $path); $path_parts = pathinfo($path); } return substr($path_parts["filename"],1); } 하지만 이 방법 보다는 아래의 방법이 조금 더 나아 보인다(urlencode()를 이용하는 방법이다). <php function _pathinfo($path, $options = null) { $path = urlencode($path); $parts = null === $options ? pathinfo($path) : pathinfo($path, $options); foreach ($parts as $field => $value) { $parts[$field] = urldecode($value); } return $parts; } 결론적으로는 위 두가지 방법 보다는 setlocale(LC_ALL,'ko_KR.UTF-8') 을 이용해서 locale을 변경하는 것을 권장한다. 사용하는 라이브러리 내부 등에서도 pathinfo를 사용하는 경우가 있을 수 있으므로 프로그램이 시작시 locale을 변경하는 것이 좋을 것이다(단, locale이 다른 프로그램 영역에 영향을 줄 수 있는지에 대해서는 검토를 해보는 것이 좋다).]]></summary><content type="html"><![CDATA[<p>PHP에서 path에 대한 정보를 얻기 위해 <a href="http://php.net/manual/kr/function.pathinfo.php">pathinfo()</a>와 <a href="http://php.net/manual/kr/function.basename.php">basename()</a>을 많이 사용한다. 그런데 path 내에 한글과 같이 UTF-8 문자열이 포함될 경우 결과가 이상하게 나올 수 있다. 일단 아래의 소스 코드와 실행 결과를 보자.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$currentLocal</span> = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">"&lt;br/&gt;"</span>;

<span class="hljs-variable">$filepath</span> = <span class="hljs-string">'/home/가 나 다.txt'</span>;
<span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-variable">$locales</span> = explode(<span class="hljs-string">"\n"</span>, trim(shell_exec(<span class="hljs-string">'locale -a'</span>)));
<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$locales</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$locale</span>) {
    setlocale(LC_ALL, <span class="hljs-variable">$locale</span>);
    <span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
    <span class="hljs-keyword">if</span> (strcmp(<span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>], <span class="hljs-string">'가 나 다.txt'</span>) != <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$locale</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;
    }
}

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; 나 다.txt

C -&gt; 나 다.txt
POSIX -&gt; 나 다.txt
*/</span></pre>
<p>위 코드는 현재 system 내에서 사용 가능한 모든 locale에 대해 실행 결과를 테스트한 결과다. 결과를 보면 정상적으로 처리되지 않고 첫글자가 잘려나간 잘못된 결과를 반환하는 경우가 있다. 바로 locale이 <code>C</code> 또는 <code>POSIX</code>인 경우다.</p>
<p>서버 환경 구성에 따른 차이가 있겠지만 나의 경우는 nobody 권한으로 실행되는 웹서버 상에서 현재 locale이 <code>C</code>로 나왔다. 따라서 한글 파일명이 포함된 path에 대해서는 pathinfo()를 사용할 수 없다.</p>
<p>이 문제에 대해 검색하다 <a href="http://stackoverflow.com/questions/4451664/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8">Make PHP pathinfo() return the correct filename if the filename is UTF-8</a> 라는 글을 찾았다. 여기서 질문을 한 <code>aä.pdf</code> path에 대해서는 현재 시점(PHP 7)에서 locale <code>C</code>와 <code>POSIX</code>에서도 문제가 없었다. 이 버그와 관련하여 패치가 되었지만 아직 한글에 대한 버그는 남아 있는 것으로 보인다. 혹시나 해서 아래와 같이 일본어로도 동일한 테스트를 해보니 역시나 문제가 발생한다.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$currentLocal</span> = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">"&lt;br/&gt;"</span>;

<span class="hljs-variable">$filepath</span> = <span class="hljs-string">'/home/うながす.txt'</span>;
<span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-variable">$locales</span> = explode(<span class="hljs-string">"\n"</span>, trim(shell_exec(<span class="hljs-string">'locale -a'</span>)));
<span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$locales</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$locale</span>) {
    setlocale(LC_ALL, <span class="hljs-variable">$locale</span>);
    <span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
    <span class="hljs-keyword">if</span> (strcmp(<span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>], <span class="hljs-string">'うながす.txt'</span>) != <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$locale</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;
    }
}

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; .txt

C -&gt; .txt
POSIX -&gt; .txt
ja_JP -&gt; ��ながす.txt
ja_JP.eucjp -&gt; ��ながす.txt
ja_JP.ujis -&gt; ��ながす.txt
japanese -&gt; ��ながす.txt
japanese.euc -&gt; ��ながす.txt
ko_KR -&gt; ��ながす.txt
ko_KR.euckr -&gt; ��ながす.txt
korean -&gt; ��ながす.txt
korean.euc -&gt; ��ながす.txt
mt_MT -&gt; ��ながす.txt
mt_MT.iso88593 -&gt; ��ながす.txt
yi_US -&gt; �ながす.txt
yi_US.cp1255 -&gt; �ながす.txt
zh_CN -&gt; .txt
zh_CN.gb2312 -&gt; .txt
zh_HK -&gt; �がす.txt
zh_HK.big5hkscs -&gt; �がす.txt
zh_SG -&gt; .txt
zh_SG.gb2312 -&gt; .txt
zh_TW -&gt; �がす.txt
zh_TW.big5 -&gt; �がす.txt
zh_TW.euctw -&gt; .txt
*/</span></pre>
<p>결론적으로 이 문제를 해결하기 위해서는 아래와 같이 간단히 해결 가능하다.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
setlocale(LC_ALL,<span class="hljs-string">'ko_KR.UTF-8'</span>);

<span class="hljs-variable">$currentLocal</span> = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">"&lt;br/&gt;"</span>;

<span class="hljs-variable">$filepath</span> = <span class="hljs-string">'/home/가 나 다.txt'</span>;
<span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-comment">/*
실행 결과

Current Location : ko_KR.UTF-8
ko_KR.UTF-8 -&gt; 가 나 다.txt
*/</span></pre>
<p><code>setlocale(LC_ALL,'ko_KR.UTF-8')</code>와 같이 <code>UTF-8</code>을 사용하는 locale로 변경하면 한글 파일명을 가진 path에 대해서도 pathinfo는 정상적으로 동작한다(<code>ko_KR</code>임에도 불구하고 일본어도 정상 동작한다).</p>
<p>이 문제에서의 특징은 한가지가 더 있다. 파일명 앞에 영문자와 같이 한글이 아닌 글자가 있다면 이 문제가 발생하지 않는다는 것이다. 아래의 예시를 보자.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-variable">$currentLocal</span> = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">"&lt;br/&gt;"</span>;

<span class="hljs-variable">$filepath</span> = <span class="hljs-string">'/home/a가 나 다.txt'</span>;
<span class="hljs-variable">$info</span> = pathinfo(<span class="hljs-variable">$filepath</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-variable">$currentLocal</span> . <span class="hljs-string">' -&gt; '</span> . <span class="hljs-variable">$info</span>[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; a가 나 다.txt
*/</span></pre>
<p>이러한 원리를 이용한 방법으로 <a href="http://stackoverflow.com/questions/4451664/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8">Make PHP pathinfo() return the correct filename if the filename is UTF-8</a>에서는 아래와 같이 처리하는 방법을 제시하고 있다.</p>
<pre class="hljs php"><span class="hljs-preprocessor">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFilename</span><span class="hljs-params">(<span class="hljs-variable">$path</span>)</span>
</span>{
    <span class="hljs-comment">// if there's no '/', we're probably dealing with just a filename</span>
    <span class="hljs-comment">// so just put an 'a' in front of it</span>
    <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$path</span>, <span class="hljs-string">'/'</span>) === <span class="hljs-keyword">false</span>)
    {
        <span class="hljs-variable">$path_parts</span> = pathinfo(<span class="hljs-string">'a'</span>.<span class="hljs-variable">$path</span>);
    }
    <span class="hljs-keyword">else</span>
    {
        <span class="hljs-variable">$path</span>= str_replace(<span class="hljs-string">'/'</span>, <span class="hljs-string">'/a'</span>, <span class="hljs-variable">$path</span>);
        <span class="hljs-variable">$path_parts</span> = pathinfo(<span class="hljs-variable">$path</span>);
    }
    <span class="hljs-keyword">return</span> substr(<span class="hljs-variable">$path_parts</span>[<span class="hljs-string">"filename"</span>],<span class="hljs-number">1</span>);
}</pre>
<p>하지만 이 방법 보다는 아래의 방법이 조금 더 나아 보인다(<a href="http://php.net/manual/kr/function.urldecode.php">urlencode()</a>를 이용하는 방법이다).</p>
<pre class="hljs php">&lt;php
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_pathinfo</span><span class="hljs-params">(<span class="hljs-variable">$path</span>, <span class="hljs-variable">$options</span> = null)</span>
</span>{
    <span class="hljs-variable">$path</span> = urlencode(<span class="hljs-variable">$path</span>);
    <span class="hljs-variable">$parts</span> = <span class="hljs-keyword">null</span> === <span class="hljs-variable">$options</span> ? pathinfo(<span class="hljs-variable">$path</span>) : pathinfo(<span class="hljs-variable">$path</span>, <span class="hljs-variable">$options</span>);
    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$parts</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$field</span> =&gt; <span class="hljs-variable">$value</span>) {
        <span class="hljs-variable">$parts</span>[<span class="hljs-variable">$field</span>] = urldecode(<span class="hljs-variable">$value</span>);
    }
    <span class="hljs-keyword">return</span> <span class="hljs-variable">$parts</span>;
}</pre>
<p>결론적으로는 위 두가지 방법 보다는 <code>setlocale(LC_ALL,'ko_KR.UTF-8')</code> 을 이용해서 locale을 변경하는 것을 권장한다. 사용하는 라이브러리 내부 등에서도 pathinfo를 사용하는 경우가 있을 수 있으므로 프로그램이 시작시 locale을 변경하는 것이 좋을 것이다(단, locale이 다른 프로그램 영역에 영향을 줄 수 있는지에 대해서는 검토를 해보는 것이 좋다). </p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/12/could-not-find-comandroidsupportconstraintconstraint-layout/</id><title type="html">Could not find com.android.support.constraint:constraint-layout 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/12/could-not-find-comandroidsupportconstraintconstraint-layout/"/><published>2017-04-12T17:02:44+09:00</published><updated>2017-04-12T17:02:44+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 ConstraintLayout를 사용하기 위해 아래와 같이 gradle에 설정했었다. dependencies { compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha9' } 업데이트가 있는지 확인해 보니 1.0.1이 있기에 아래와 같이 변경했다. dependencies { compile 'com.android.support.constraint:constraint-layout:1.0.1' } 그리고 빌드를 해려고 했더니 아래와 같은 오류가 났다. Error:Could not find com.android.support.constraint:constraint-layout:1.0.1. Required by:myapp:app:unspecified 관련 정보를 검색해 보니 아래와 같이 설정이 필요하다. "Settings -> Appearance & Behavior -> System Settings -> Android SDK -> SDK Tools" 에서 "ConstraintLayout for Android" 를 체크해서 사용 가능하도록 해줘야 한다. 나의 경우는 기존에 사용했었기 때문에 체크는 되어 있었으나 업데이트가 되지 않아서 발생한 문제였다. 다시 체크하여 업데이트를 받고 나니 정상적으로 빌드가 완료되었다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 <a href="https://developer.android.com/training/constraint-layout/index.html">ConstraintLayout</a>를 사용하기 위해 아래와 같이 gradle에 설정했었다.</p>
<pre class="hljs gradle"><span class="hljs-keyword">dependencies</span> {
    <span class="hljs-keyword">compile</span> <span class="hljs-string">'com.android.support.constraint:constraint-layout:1.0.0-alpha9'</span>
}</pre>
<p>업데이트가 있는지 확인해 보니 1.0.1이 있기에 아래와 같이 변경했다.</p>
<pre class="hljs gradle"><span class="hljs-keyword">dependencies</span> {
    <span class="hljs-keyword">compile</span> <span class="hljs-string">'com.android.support.constraint:constraint-layout:1.0.1'</span>
}</pre>
<p>그리고 빌드를 해려고 했더니 아래와 같은 오류가 났다.</p>
<pre><code>Error:Could not find com.android.support.constraint:constraint-layout:1.0.1.
Required by:myapp:app:unspecified</code></pre>
<p>관련 정보를 검색해 보니 아래와 같이 설정이 필요하다.</p>
<p><img src="/res/img/post/2017/04/could-not-find-comandroidsupportconstraintconstraint-layout-1.png" alt="could-not-find-comandroidsupportconstraintconstraint-layout-1" width="988" height="699" /></p>
<p>&quot;Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK -&gt; SDK Tools&quot; 에서 &quot;ConstraintLayout for Android&quot; 를 체크해서 사용 가능하도록 해줘야 한다.</p>
<p>나의 경우는 기존에 사용했었기 때문에 체크는 되어 있었으나 업데이트가 되지 않아서 발생한 문제였다. 다시 체크하여 업데이트를 받고 나니 정상적으로 빌드가 완료되었다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/11/target-overrides-the-always-embed-swift-standard-libraries-build-setting/</id><title type="html">target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/11/target-overrides-the-always-embed-swift-standard-libraries-build-setting/"/><published>2017-04-11T21:40:03+09:00</published><updated>2017-04-11T21:40:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="swift" label="swift" /><summary><![CDATA[Xcode 8에서 cocoapods 사용시 아래와 같은 오류가 발생하는 경우가 있다. [!] The `xproject [Debug]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.debug.xcconfig'. This can lead to problems with the CocoaPods installation - Use the `$(inherited)` flag, or - Remove the build settings from the target. [!] The `xproject [Release]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.release.xcconfig'. This can lead to problems with the CocoaPods installation - Use the `$(inherited)` flag, or - Remove the build settings from the target. 최근 Xcode와 cocoapods를 업데이트하고 위와 같은 오류가 발생해서 찾아보니 Errors after updating to Xcode 8: "No such module" and "target overrides the EMBEDDED_CONTENT_CONTAINS_SWIFTbuild setting" 에서 해결 방법을 설명하고 있었다. Project/Targets -> [Project Name] -> Build Settings -> "ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES" 를 "$(inherited)"로 변경하는 것으로 위 문제는 간단히 해결된다. Xcode 8 Release Notes 주요 내용 정리를 보면 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES에 대해 다음과 같이 설명하고 있다. EMBEDDED_CONTENT_CONTAINS_SWIFT는 없어지고 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES가 추가되었다. 이 새로운 설정은 Xcode에서 항상 Swift Standard Libearies를 채워넣도록 지정하는 것이다. 대상에 직접 사용하거나 덧붙여 다른 제품이 Swift를 사용하는 경우에만 이 설정을 사용할 수 있다.]]></summary><content type="html"><![CDATA[<p>Xcode 8에서 <a href="https://cocoapods.org/">cocoapods</a> 사용시  아래와 같은 오류가 발생하는 경우가 있다.</p>
<pre class="hljs bash">[!] The `xproject [Debug]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined <span class="hljs-keyword">in</span> `Pods/Target Support Files/Pods-xproject/Pods-xproject.debug.xcconfig<span class="hljs-string">'. This can lead to problems with the CocoaPods installation
    - Use the `$(inherited)` flag, or
    - Remove the build settings from the target.

[!] The `xproject [Release]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.release.xcconfig'</span>. This can lead to problems with the CocoaPods installation
    - Use the `$(inherited)` flag, or
    - Remove the build settings from the target.</pre>
<p>최근 Xcode와 cocoapods를 업데이트하고 위와 같은 오류가 발생해서 찾아보니 <a href="http://stackoverflow.com/a/39686652">Errors after updating to Xcode 8: &quot;No such module&quot; and &quot;target overrides the <code>EMBEDDED_CONTENT_CONTAINS_SWIFT</code>build setting&quot;</a> 에서 해결 방법을 설명하고 있었다.</p>
<p>Project/Targets -&gt; [Project Name] -&gt; Build Settings -&gt;  &quot;ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES&quot; 를 &quot;$(inherited)&quot;로 변경하는 것으로 위 문제는 간단히 해결된다.</p>
<p><img src="/res/img/post/2017/04/target-overrides-the-always-embed-swift-standard-libraries-build-setting-1.png" alt="target-overrides-the-always-embed-swift-standard-libraries-build-setting-1" width="1123" height="247" /></p>
<p><a href="https://swifter.kr/2016/09/26/xcode-8-release-notes-%EC%A3%BC%EC%9A%94-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC/">Xcode 8 Release Notes 주요 내용 정리</a>를 보면 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES에 대해 다음과 같이 설명하고 있다.</p>
<blockquote>
<p>EMBEDDED_CONTENT_CONTAINS_SWIFT는 없어지고 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES가 추가되었다. 이 새로운 설정은 Xcode에서 항상 Swift Standard Libearies를 채워넣도록 지정하는 것이다. 대상에 직접 사용하거나 덧붙여 다른 제품이 Swift를 사용하는 경우에만 이 설정을 사용할 수 있다.</p>
</blockquote>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/04/css-image-vertical-center/</id><title type="html">CSS로 이미지 세로 중앙 정렬(Vertical align)하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/04/css-image-vertical-center/"/><published>2017-04-04T17:14:41+09:00</published><updated>2017-04-04T17:14:41+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="css" label="css" /><summary><![CDATA[HTML에서 <img>를 CSS만으로 비율을 유지한 채로 특정 영역의 중앙에 출력하는 방법은 다음과 같다. <!DOCTYPE html> <html> <head> <meta charset="utf-8"/> <style type="text/css"> /* 예시를 위한 css */ dl { float:left; margin-right:20px; } dt { clear:both; } dd { margin:0 0 20px 0; padding:10px; float:left; } dd > img, dd > div { border:#ccc solid 1px; float:left; margin-right:10px; } /* position 을 이용한 방법 */ div.box1 { position:relative; width:150px; height:200px; } div.box1 > img { position:absolute; max-width:100%; max-height:100%; width:auto; height:auto; margin:auto; top:0; bottom:0; left:0; right:0; } /* line-height 를 이용한 방법 */ div.box2 { width:150px; height:200px; line-height:200px; text-align:center; } div.box2 > img { max-width:100%; max-height:100%; vertical-align:middle; } /* :before / content 를 이용한 방법 */ div.box3 { width:150px; height:200px; text-align:center; white-space:nowrap; font:0/0 a; } div.box3:before { content:""; display:inline-block; vertical-align:middle; height:100%; } div.box3 > img { max-width:100%; max-height:100%; display:inline-block; vertical-align:middle; } /* flex 를 이용한 방법 */ div.box4 { width:150px; height:200px; display:flex; justify-content:center; align-items:center; } div.box4 > img { max-width:100%; max-height:100%; } </style> </head> <body> <dl> <dt>position 을 이용한 방법</dt> <dd> <div class="box1"> <img src="test_100px.png" alt="test image"/> </div> <div class="box1"> <img src="test_550px.png" alt="test image"/> </div> </dd> <dt>line-height 를 이용한 방법</dt> <dd> <div class="box2"> <img src="test_100px.png" alt="test image"/> </div> <div class="box2"> <img src="test_550px.png" alt="test image"/> </div> </dd> </dl> <dl> <dt>:before / content 를 이용한 방법</dt> <dd> <div class="box3"> <img src="test_100px.png" alt="test image"/> </div> <div class="box3"> <img src="test_550px.png" alt="test image"/> </div> </dd> <dt>flex 를 이용한 방법</dt> <dd> <div class="box4"> <img src="test_100px.png" alt="test image"/> </div> <div class="box4"> <img src="test_550px.png" alt="test image"/> </div> </dd> </dl> </body> </html> 총 4가지 방법을 예시로 나열했지만 나의 경우는 크로스 브라우징을 위해 "position 을 이용한 방법"이나 "line-height 를 이용한 방법"을 주로 사용한다. 하지만 상황에 따라서는 다른 방법이 유용할 수도 있기에 함께 남겨둔다. 그리고 여기서 사용된 원리를 잘 이용하면 다른 레이아웃을 구성하는데도 도움이 되니 한번쯤은 원리를 참고해보면 좋을 듯하다.]]></summary><content type="html"><![CDATA[<p>HTML에서 <code>&lt;img&gt;</code>를 CSS만으로 비율을 유지한 채로 특정 영역의 중앙에 출력하는 방법은 다음과 같다.</p>
<p><img src="/res/img/post/2017/04/image_align_center.png" alt="phpstorm formatter markers" width="706" height="509" /></p>
<pre class="hljs xml"><span class="hljs-doctype">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">meta</span> <span class="hljs-attribute">charset</span>=<span class="hljs-value">"utf-8"</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">type</span>=<span class="hljs-value">"text/css"</span>&gt;</span><span class="css">
        <span class="hljs-comment">/* 예시를 위한 css */</span>
        <span class="hljs-tag">dl</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">float</span>:<span class="hljs-value">left</span></span>; <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"><span class="hljs-number">20px</span></span></span>; }</span>
        <span class="hljs-tag">dt</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">clear</span>:<span class="hljs-value">both</span></span>; }</span>
        <span class="hljs-tag">dd</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">margin</span>:<span class="hljs-value"><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">padding</span>:<span class="hljs-value"><span class="hljs-number">10px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">float</span>:<span class="hljs-value">left</span></span>; }</span>
        <span class="hljs-tag">dd</span> &gt; <span class="hljs-tag">img</span>,
        <span class="hljs-tag">dd</span> &gt; <span class="hljs-tag">div</span> <span class="hljs-rules">{ <span class="hljs-rule"><span class="hljs-attribute">border</span>:<span class="hljs-value"><span class="hljs-hexcolor">#ccc</span> solid <span class="hljs-number">1px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">float</span>:<span class="hljs-value">left</span></span>; <span class="hljs-rule"><span class="hljs-attribute">margin-right</span>:<span class="hljs-value"><span class="hljs-number">10px</span></span></span>; }</span>
        <span class="hljs-comment">/* position 을 이용한 방법 */</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box1</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value">relative</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"><span class="hljs-number">150px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"><span class="hljs-number">200px</span></span></span>;
        }</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box1</span> &gt; <span class="hljs-tag">img</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">position</span>:<span class="hljs-value">absolute</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">max-width</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">max-height</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value">auto</span></span>; <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value">auto</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">margin</span>:<span class="hljs-value">auto</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">top</span>:<span class="hljs-value"><span class="hljs-number">0</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">bottom</span>:<span class="hljs-value"><span class="hljs-number">0</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">left</span>:<span class="hljs-value"><span class="hljs-number">0</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">right</span>:<span class="hljs-value"><span class="hljs-number">0</span></span></span>;
        }</span>
        <span class="hljs-comment">/* line-height 를 이용한 방법 */</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box2</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"><span class="hljs-number">150px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"><span class="hljs-number">200px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">line-height</span>:<span class="hljs-value"><span class="hljs-number">200px</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value">center</span></span>;
        }</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box2</span> &gt; <span class="hljs-tag">img</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">max-width</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">max-height</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value">middle</span></span>;
        }</span>
        <span class="hljs-comment">/* :before / content 를 이용한 방법 */</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box3</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"><span class="hljs-number">150px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"><span class="hljs-number">200px</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">text-align</span>:<span class="hljs-value">center</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">white-space</span>:<span class="hljs-value">nowrap</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">font</span>:<span class="hljs-value"><span class="hljs-number">0</span>/<span class="hljs-number">0</span> a</span></span>;
        }</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box3</span><span class="hljs-pseudo">:before</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">content</span>:<span class="hljs-value"><span class="hljs-string">""</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value">inline-block</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value">middle</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>;
        }</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box3</span> &gt; <span class="hljs-tag">img</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">max-width</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">max-height</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value">inline-block</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">vertical-align</span>:<span class="hljs-value">middle</span></span>;
        }</span>
        <span class="hljs-comment">/* flex 를 이용한 방법 */</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box4</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">width</span>:<span class="hljs-value"><span class="hljs-number">150px</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">height</span>:<span class="hljs-value"><span class="hljs-number">200px</span></span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">display</span>:<span class="hljs-value">flex</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">justify-content</span>:<span class="hljs-value">center</span></span>;
            <span class="hljs-rule"><span class="hljs-attribute">align-items</span>:<span class="hljs-value">center</span></span>;
        }</span>
        <span class="hljs-tag">div</span><span class="hljs-class">.box4</span> &gt; <span class="hljs-tag">img</span> <span class="hljs-rules">{
            <span class="hljs-rule"><span class="hljs-attribute">max-width</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>; <span class="hljs-rule"><span class="hljs-attribute">max-height</span>:<span class="hljs-value"><span class="hljs-number">100%</span></span></span>;
        }</span>
    </span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>position 을 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box1"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_100px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box1"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_550px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>line-height 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box2"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_100px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box2"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_550px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">dl</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-title">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>:before / content 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box3"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_100px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box3"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_550px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dt</span>&gt;</span>flex 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-title">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-title">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box4"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_100px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-title">div</span> <span class="hljs-attribute">class</span>=<span class="hljs-value">"box4"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-title">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-value">"test_550px.png"</span> <span class="hljs-attribute">alt</span>=<span class="hljs-value">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-title">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-title">dd</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">dl</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-title">html</span>&gt;</span></pre>
<p>총 4가지 방법을 예시로 나열했지만 나의 경우는 크로스 브라우징을 위해 &quot;position 을 이용한 방법&quot;이나 &quot;line-height 를 이용한 방법&quot;을 주로 사용한다. 하지만 상황에 따라서는 다른 방법이 유용할 수도 있기에 함께 남겨둔다. 그리고 여기서 사용된 원리를 잘 이용하면 다른 레이아웃을 구성하는데도 도움이 되니 한번쯤은 원리를 참고해보면 좋을 듯하다.</p>]]></content></entry>


</feed>