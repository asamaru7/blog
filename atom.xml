<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.1">Jekyll</generator>
<link href="https://blog.asamaru.net/atom.xml" rel="self" type="application/atom+xml" />
<link href="https://blog.asamaru.net/" rel="alternate" type="text/html" />
<updated>2016-07-12T11:55:40+09:00</updated>
<id>https://blog.asamaru.net/</id>
<subtitle>세상에 필요한 소스코드 한줄 남기고 가자.
</subtitle>
<author>
<name>유영재</name>
</author>
<entry>
<title>안드로이드 : TextView 터치시 가로 스크롤이 되지 않는 문제 수정(ViewPager 등에서)</title>
<link href="https://blog.asamaru.net/2016/07/12/android-textview-with-a-single-line-in-viewpager-scroll-doesnt-work/" rel="alternate" type="text/html" title="안드로이드 : TextView 터치시 가로 스크롤이 되지 않는 문제 수정(ViewPager 등에서)" />
<published>2016-07-12T11:34:06+09:00</published>
<updated>2016-07-12T11:34:06+09:00</updated>
<id>https://blog.asamaru.net/2016/07/12/android-textview-with-a-single-line-in-viewpager-scroll-doesnt-work</id>
<content type="html" xml:base="https://blog.asamaru.net/2016/07/12/android-textview-with-a-single-line-in-viewpager-scroll-doesnt-work/">&lt;p&gt;오늘도 역시 안드로이드는 실망시키지 않는다. 오늘의 문제는 이렇다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;가로 스크롤되는 ViewPager의 Item View에 TextView가 포함되도록 구성되어 있을 경우 TextView 위에서 터치를 하면 가로 스크롤이 동작하지 않는 문제가 발생한다. 조금 더 정확히 이야기하자면 &lt;code&gt;singleLine&lt;/code&gt; 속성이 true로 설정된 TextView들이 가로 스크롤을 정상 동작하지 않도록 만든다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;처음엔 click 이벤트로 인한 문제로 생각했다. 실제로 아래에 깔린 View의 click 이벤트를 제거하니 스크롤이 정상적으로 동작했다. 그런데 다른 UI에서 동일한 형태로 사용중이나 그곳에서는 해당 문제가 발생하지 않기에 다른 원인이 있을 것이라는 판단으로 조금 더 찾아봤다.&lt;/p&gt;

&lt;p&gt;결국 원인을 찾고보니 &lt;code&gt;android:scrollHorizontally&lt;/code&gt; 속성이 true로 설정될 경우 해당 문제가 발생했다. TextView의 scroll 처리 영역과 ViewPager의 scroll 처리가 충돌하는 것이다. 그런데 나는 이 속성을 true로 주지 않았기 때문에 이상하다고 생각하고 &lt;code&gt;TextView.java&lt;/code&gt; 파일의 내부를 보다가 아래의 코드를 찾았다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TextView.java&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;applySingleLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;applyTransformation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeMaxLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mSingleLine&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setHorizontallyScrolling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applyTransformation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setTransformationMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SingleLineTransformationMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeMaxLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setMaxLines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAX_VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setHorizontallyScrolling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;applyTransformation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;setTransformationMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;그렇다. &lt;code&gt;singleLine&lt;/code&gt; 속성을 사용하면 자동적으로 &lt;code&gt;setHorizontallyScrolling(true);&lt;/code&gt;가 적용되는 것이다. 여담이지만 &lt;code&gt;android:scrollHorizontally&lt;/code&gt; 설정 상태를 확인하기 위해 &lt;code&gt;TextView.java&lt;/code&gt;에 있는 아래의 함수를 호출해 봤더니 해당 함수를 못찾는다. 최신 SDK에 들어간 것도 아니고 public 인데도 불구하고… 역시 이상한 안드로이드.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHorizontallyScrolling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mHorizontallyScrolling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;어쨌든 이를 해결하기 위해 아래와 같이 style을 정의해서 TextView에 적용해 봤다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TextViewBaseStyle&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 가로 스크롤 문제를 발생시키는 속성 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:singleLine&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:ellipsize&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;end&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 가로 스크롤 문제를 개선하기 위한 시도 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:scrollHorizontally&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:clickable&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:focusable&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;android:focusableInTouchMode&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;false&lt;span class=&quot;nt&quot;&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;결론은 안된다. &lt;code&gt;android:scrollHorizontally&lt;/code&gt; 값이 위에 보여준 코드에 의해 무시되는 결과를 가져오는 것이다.&lt;/p&gt;

&lt;p&gt;따라서 해결 방법은 아래의 방법 밖에 없다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;textView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHorizontallyScrolling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;그렇다. 프로그램에서 직접 &lt;code&gt;android:scrollHorizontally&lt;/code&gt;를 false로 설정하는 것 외에는 다른 방법이 없다. &lt;code&gt;TextView.java&lt;/code&gt; 내부에서 직접 true를 지정하고 있으므로 해당 코드를 오버라이딩 할 것이 아니라면 이 방법 밖에는 없다. 생성자 내부에서 처리 순서가 아래와 같기 때문에 &lt;code&gt;singleLine&lt;/code&gt; 속성을 사용한다면 다른 방법이 없는 것이다. 도대체 TextView 개발자는 무슨 생각으로 코드를 짠 것인가?&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;internal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;styleable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TextView_scrollHorizontally&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBoolean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setHorizontallyScrolling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;applySingleLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;singleLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;singleLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;          
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
</content>
<summary>오늘도 역시 안드로이드는 실망시키지 않는다. 오늘의 문제는 이렇다.  가로 스크롤되는 ViewPager의 Item View에 TextView가 포함되도록 구성되어 있을 경우 TextView 위에서 터치를 하면 가로 스크롤이 동작하지 않는 문제가 발생한다. 조금 더 정확히 이야기하자면 singleLine 속성이 true로 설정된 TextView들이 가로 스크롤을 정상 동작하지 않도록 만든다.처음엔 click 이벤트로 인한 문제로 생각했다. 실제로 아래에 깔린 View의 click 이벤트를 제거하니 스크롤이 정상적으로 동작했다. 그런데 다른 UI에서 동일한 형태로 사용중이나 그곳에서는 해당 문제가 발생하지 않기에 다른 원인이 있을 것이라는 판단으로 조금 더 찾아봤다.결국 원인을 찾고보니 android:scrollHorizontally 속성이 true로 설정될 경우 해당 문제가 발생했다. TextView의 scroll 처리 영역과 ViewPager의 scroll 처리가 충돌하는 것이다. 그런데 나는 이 속성을 true로 주지 않았기 때문에 이상하다고 생각하고 TextView.java 파일의 내부를 보다가 아래의 코드를 찾았다.TextView.java 1 2 3 4 5 6 7 8 910111213141516171819private void applySingleLine(boolean singleLine, boolean applyTransformation,        boolean changeMaxLines) {    mSingleLine = singleLine;    if (singleLine) {        setLines(1);        setHorizontallyScrolling(true);        if (applyTransformation) {            setTransformationMethod(SingleLineTransformationMethod.getInstance());        }    } else {        if (changeMaxLines) {            setMaxLines(Integer.MAX_VALUE);        }        setHorizontallyScrolling(false);        if (applyTransformation) {            setTransformationMethod(null);        }    }}그렇다. singleLine 속성을 사용하면 자동적으로 setHorizontallyScrolling(true);가 적용되는 것이다. 여담이지만 android:scrollHorizontally 설정 상태를 확인하기 위해 TextView.java에 있는 아래의 함수를 호출해 봤더니 해당 함수를 못찾는다. 최신 SDK에 들어간 것도 아니고 public 인데도 불구하고… 역시 이상한 안드로이드.123public boolean getHorizontallyScrolling() {    return mHorizontallyScrolling;}어쨌든 이를 해결하기 위해 아래와 같이 style을 정의해서 TextView에 적용해 봤다. 1 2 3 4 5 6 7 8 910&amp;lt;style name=&amp;quot;TextViewBaseStyle&amp;quot;&amp;gt;  &amp;lt;!-- 가로 스크롤 문제를 발생시키는 속성 --&amp;gt;  &amp;lt;item name=&amp;quot;android:singleLine&amp;quot;&amp;gt;true&amp;lt;/item&amp;gt;  &amp;lt;item name=&amp;quot;android:ellipsize&amp;quot;&amp;gt;end&amp;lt;/item&amp;gt;  &amp;lt;!-- 가로 스크롤 문제를 개선하기 위한 시도 --&amp;gt;  &amp;lt;item name=&amp;quot;android:scrollHorizontally&amp;quot;&amp;gt;false&amp;lt;/item&amp;gt;  &amp;lt;item name=&amp;quot;android:clickable&amp;quot;&amp;gt;false&amp;lt;/item&amp;gt;  &amp;lt;item name=&amp;quot;android:focusable&amp;quot;&amp;gt;false&amp;lt;/item&amp;gt;  &amp;lt;item name=&amp;quot;android:focusableInTouchMode&amp;quot;&amp;gt;false&amp;lt;/item&amp;gt;&amp;lt;/style&amp;gt;결론은 안된다. android:scrollHorizontally 값이 위에 보여준 코드에 의해 무시되는 결과를 가져오는 것이다.따라서 해결 방법은 아래의 방법 밖에 없다.1textView.setHorizontallyScrolling(false);그렇다. 프로그램에서 직접 android:scrollHorizontally를 false로 설정하는 것 외에는 다른 방법이 없다. TextView.java 내부에서 직접 true를 지정하고 있으므로 해당 코드를 오버라이딩 할 것이 아니라면 이 방법 밖에는 없다. 생성자 내부에서 처리 순서가 아래와 같기 때문에 singleLine 속성을 사용한다면 다른 방법이 없는 것이다. 도대체 TextView 개발자는 무슨 생각으로 코드를 짠 것인가?123456789...case com.android.internal.R.styleable.TextView_scrollHorizontally:    if (a.getBoolean(attr, false)) {        setHorizontallyScrolling(true);    }    break;...applySingleLine(singleLine, singleLine, singleLine);...          </summary>
</entry>
<entry>
<title>PHP Composer : Private Repository / Proxy / 속도 향상(Toran Proxy를 사용한)</title>
<link href="https://blog.asamaru.net/2016/07/04/php-composer-private-repository-and-proxy-toran-proxy/" rel="alternate" type="text/html" title="PHP Composer : Private Repository / Proxy / 속도 향상(Toran Proxy를 사용한)" />
<published>2016-07-04T20:09:16+09:00</published>
<updated>2016-07-04T20:09:16+09:00</updated>
<id>https://blog.asamaru.net/2016/07/04/php-composer-private-repository-and-proxy-toran-proxy</id>
<content type="html" xml:base="https://blog.asamaru.net/2016/07/04/php-composer-private-repository-and-proxy-toran-proxy/">&lt;p&gt;오늘은 &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;에서 &lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;가 아닌 private repository를 사용할 수 있도록 &lt;a href=&quot;https://toranproxy.com/&quot;&gt;Toran Proxy&lt;/a&gt;를 설정하는 방법을 설명하고자 한다. 사실 Toran Proxy 외에도 &lt;a href=&quot;https://github.com/composer/satis&quot;&gt;Satis&lt;/a&gt;라는 것도 있는데 관련된 내용은 &lt;a href=&quot;https://getcomposer.org/doc/articles/handling-private-packages-with-satis.md&quot;&gt;Handling private packages with Satis or Toran Proxy&lt;/a&gt;을 참고하길 바란다(Satis를 조금 더 편하게 사용하기 위한 라이브러리들도 몇가지가 있다. 사실 Satis가 더 유명하나 Toran Proxy가 더 사용하기 편할 것 같아 선택했다).&lt;/p&gt;

&lt;p&gt;본 설명에 앞서 Toran Proxy를 이용함으로써 얻을 수 있는 이점부터 이야기 해보자. 내가 Toran Proxy를 설치한 이유기도 하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;private repository 운영할 수 있다.&lt;/li&gt;
  &lt;li&gt;public proxy를 사용해서 composer의 속도를 올릴 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;오픈소스 프로젝트를 진행하는 것이 아닌 회사의 업무 등의 이유로 composer를 사용하는 경우라면 private project로 진행하는 것이 일반적일 것이다. 나의 경우는 &lt;a href=&quot;https://gitlab.com/&quot;&gt;gitlab.com&lt;/a&gt;에서 private project로 git를 사용하고 composer에는 아래와 같은 형식으로 사용하고 있었다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;require&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;company/project&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dev-master&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;git@gitlab.com:company/project.git&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이 방법은 project를 package로 배포하지 않고 최신 소스(커밋)를 composer에서 가져오도록 한 것이다. 이 경우 별도의 composer repository가 필요하지 않다. 다만, 버전을 별도로 관리할 수 없고 &lt;code&gt;composer update&lt;/code&gt;가 느려진다. &lt;code&gt;composer update&lt;/code&gt;가 느려지는 이유는 update시마다 해당 프로젝트의 composer.json을 읽어 변경사항을 확인하기 때문이다. 이렇게 사용하는 것이 한두개라면 모르겠지만 많다면 &lt;code&gt;composer update&lt;/code&gt;를 실행 하기가 두려워질 정도로 느려진다(composer.json 파일을 매번 확인하는 데다가 &lt;a href=&quot;gitlab.com&quot;&gt;gitlab.com&lt;/a&gt; / &lt;a href=&quot;packagist.org&quot;&gt;packagist.org&lt;/a&gt;가 해외 서비스다 보니 네트워크가 느려서 더 심하다). composer 자체도 느린데 이런 문제까지 겹치니 감당 안된다. &lt;a href=&quot;/2016/03/17/php-composer-speed-up/&quot;&gt;php composer 속도 개선하기&lt;/a&gt;에서 언급한 방법들을 적용해도 이 문제에는 큰 효과가 없다.&lt;/p&gt;

&lt;p&gt;composer에 관해서는 더 많은 이야기가 있을 수 있으나 본 글의 주제를 벗어 나므로 이쯤에서 줄이고 본격적으로 Toran Proxy 설치를 설명하겠다.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;Toran Proxy는 사실 유료다. 단, 개인 사용자에게는 개발자 1명까지 무료다(무료의 경우 기술 지원을 하지 않는다).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://toranproxy.com/&quot;&gt;Toran Proxy&lt;/a&gt;에서 &lt;a href=&quot;https://toranproxy.com/download&quot;&gt;download 링크&lt;/a&gt;를 누르면 다시 download 링크와 설치 방법에 대한 안내를 볼 수 있다.&lt;/p&gt;

&lt;p&gt;아래는 내가 설치한 과정을 정리한 것이다. 실제로는 bash shell 스크립트로 작성되어 있는데 중요한 부분만 다시 정리한 것으로 작업 상에 약간의 차이가 있을 수 있다. 또한, CentOS 7에서 작업 했으며 사용자는 &lt;code&gt;web&lt;/code&gt;, 사용자 그룹은 &lt;code&gt;usergroup&lt;/code&gt;이며 사용자 root directory는 &lt;code&gt;/home/web/&lt;/code&gt;이다. 따라서 자신의 환경과 맞지 않는 부분은 맞게 고쳐서 적용해야 한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# 소스를 다운 받아서 /home/web/에 압축을 푼다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 최신 버전이 1.5.1이 아닐 수 있으니 다운로드 링크는 웹사이트에서 복사하는 것을 권한다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl -LO https://toranproxy.com/releases/toran-proxy-v1.5.1.tgz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tar zxvf toran-proxy-v1.5.1.tgz -C /home/web/

&lt;span class=&quot;c&quot;&gt;# 해당 폴더로 가서&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/web/toran
&lt;span class=&quot;c&quot;&gt;# 기본 설정 파일을 만든다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cp app/config/parameters.yml.dist app/config/parameters.yml

&lt;span class=&quot;c&quot;&gt;# 아래의 app/config/parameters.yml의 설정은 직접 해당 파일을 열어서 수정해도 된다.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 나의 경우는 shell 스크립트로 제작하면서 아래와 같이 처리한 것이다.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# project hash키를 난수로 만들어 넣어준다.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ hashkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;php -r &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo sha1(rand());&amp;quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sed -i &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/ThisTokenIsNotSoSecret-Change-I/$hashkey/g&amp;quot;&lt;/span&gt; app/config/parameters.yml
&lt;span class=&quot;c&quot;&gt;# https를 사용하도록 설정한다. 기본은 http이나 나중에 composer에서 쉽게 사용하려면 https를 사용하는 것이 좋다.&lt;/span&gt;
sed -i &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/toran_scheme:\s*http$/toran_scheme: https/g&amp;quot;&lt;/span&gt; app/config/parameters.yml
&lt;span class=&quot;c&quot;&gt;# private repository로 사용할 도메인을 지정한다.&lt;/span&gt;
sed -i &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/toran_host:\s*example.org$/toran_host: your-private-repository.com/g&amp;quot;&lt;/span&gt; app/config/parameters.yml

&lt;span class=&quot;c&quot;&gt;# 필요한 디렉토리를 생성하고 권한을 부여한다.&lt;/span&gt;
chmod &lt;span class=&quot;m&quot;&gt;777&lt;/span&gt; app/toran app/cache app/logs web/repo app/bootstrap.php.cache
mkdir -p app/toran/cache web/repo/packagist/ web/repo/private/
chmod &lt;span class=&quot;m&quot;&gt;777&lt;/span&gt; app/toran/cache web/repo/packagist/ web/repo/private/
chown web.usergroup -R /home/web/toran
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;여기까지가 기본 설치 과정이다. 하지만 사용을 위해서는 설정할 것들이 많이 남았다. 이 상태에서 &lt;code&gt;php bin/cron -v&lt;/code&gt;를 실행하면 아래와 같은 결과가 나올 것이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php bin/cron -v
You need to setup a GitHub OAuth token because Toran makes a lot of requests and will use up the API calls limit &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; it is unauthenticated
Head to https://github.com/settings/tokens/new to create a token. You need to &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; the public_repo credentials, and the repo one &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; you are going to use private repositories from GitHub with Toran.
Token:
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;안내에 설명되어 있는 것과 같이 &lt;a href=&quot;https://github.com/settings/tokens/new&quot;&gt;https://github.com/settings/tokens/new&lt;/a&gt; 에 가서 개인용 ssh token을 생성해서 넣어야 한다. 생성시 어떤 권한을 부여할지 선택하는 화면이 나오는데 다른 것은 필요 없고 &lt;code&gt;public_repo&lt;/code&gt;만 선택해서 생성하면 된다. 사실 일반적인 경우라면 composer 사용시 미리 받아 놓은 token이 있을테니 그걸 사용해도 된다. 보통 &lt;code&gt;~/.composer/auth.json&lt;/code&gt; 또는 &lt;code&gt;~/.config/composer/auth.json&lt;/code&gt;에 등록이 되어있다.&lt;/p&gt;

&lt;p&gt;token을 입력하면 &lt;code&gt;app/toran/composer/auth.json&lt;/code&gt;에 파일이 생성된다. 여기서는 github에 대한 token만 등록하도록 물어보는데 나의 경우처럼 gitlab.com 등의 접근이 필요하다면 아래과 같이 설정 할 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;github-oauth&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;github.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[github token]&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;gitlab-oauth&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;quot;gitlab.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[gitlab token]&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;여기서 설정된 “gitlab token”은 github와는 조금 다르다. github의 경우는 사이트에 token을 발급해서 넣었었는데 gitlab은 동일하게 &lt;a href=&quot;https://gitlab.com/profile/personal_access_tokens&quot;&gt;사이트에서 발급&lt;/a&gt; 받은 token을 강제로 넣었더니 정상적으로 동작하지 않았다. 대신 gitlab에 관련된 repository가 추가된 후 &lt;code&gt;php bin/cron -v&lt;/code&gt;를 다시 실행하면 아래와 같이 아이디와 비밀번호를 물어보는데 여기에 입력하면 “gitlab token”이 생성되어 들어가 있다. gitlab.com에 API로 token을 만들어주나 싶어 확인해 봤더니 token은 없었다(아이디 / 비밀번호를 암호화해서 보관하는 것으로 보인다).&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php bin/cron -v
Initializing private repositories
Initializing git@gitlab.com:company/project.git

Could not fetch https://gitlab.com/api/v3/projects/company%2Fproject, enter your gitlab.com credentials to access private repos
A token will be created and stored in &lt;span class=&quot;s2&quot;&gt;&amp;quot;/home/web/toran/app/toran/composer/auth.json&amp;quot;&lt;/span&gt;, your password will never be stored
To revoke access to this token you can visit gitlab.com/profile/applications
Username:
Password:
Token successfully created
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;여기까지 적용 했다면 이제는 웹페이지를 열어서 최종 설정을 하고 crontab에 스케쥴을 걸면 끝난다. 하지만 웹페이지 관련 설정이 조금 복잡하다. 이유는 Toran Proxy가 shell 접근과 web 접근시 동일한 퍼미션을 요구하기 때문이다. 필요한 폴더를 모두 쓰기 권한(777)을 주는 방법이 일반적이나 생성되는 파일 마다 계속 쓰기 권한을 주는 것은 무리가 있었다(몇가지를 그렇게 맞추다가 포기했다).&lt;/p&gt;

&lt;p&gt;따라서 아래의 내용은 선택에 맡긴다. 쓰기 권한이 요구되는 상황에 맞추어 권한을 주는 방법과 아래와 같이 php-fpm에서 사용자를 변경하는 방법이 있다.&lt;/p&gt;

&lt;p&gt;일반적인 php-fpm 설정 상태라면 pool로 www(/etc/php-fpm.d/www.conf)가 설정되어 있을 것이다. 여기에 새로운 pool을 아래와 같이 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/php-fpm.d/toran.conf&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;[toran]
...
user = web
group = usergroup
...
listen = /dev/shm/php5-fpm.toran.sock
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;나머지 설정은 자신의 상황에 맞게하면 된다. 우선 listen의 경우 기존 unix socket 과 겹치지 않는 파일을 지정한 것인데 기존에 unix socket를 사용하지 않고 &lt;code&gt;listen = 127.0.0.1:9000&lt;/code&gt;과 같이 사용한다면 &lt;code&gt;listen = 127.0.0.1:9001&lt;/code&gt;와 같이 다른 포트를 지정해서 사용하면 된다.
중요한 부분은 user / group 설정 부분이다. 일반적으로 nobody / nobody를 사용하지만 여기서는 web / usergroup 를 지정해서 웹 접근시에도 shell 접속과 동일한 계정을 사용하도록 한 것이다. 일반적으로 보안 상의 이유로 이렇게 사용하지는 않으나 이 방법이 제일 쉬운 방법이다(보안에 대한 문제는 방화벽 등에서 제어하기 바란다. 어짜피 private repository로 사용할 것이므로 접근 제한은 해야할 것이다).&lt;/p&gt;

&lt;p&gt;이제 php-fpm을 재시작하면 www와 toran 두가지 pool이 동작하고 있다.&lt;/p&gt;

&lt;p&gt;이제부터는 nginx 설정이다. 아래의 예시를 참고해서 설정하자. ssl 관련된 설정을 위해서 ssl 인증서를 생성해야 한다(&lt;a href=&quot;https://letsencrypt.org/&quot;&gt;letsencrypt&lt;/a&gt;를 이용하면 무료로 인증서를 받을 수 있다. 이게 어렵거나 귀찮다면 &lt;a href=&quot;https://buy.wosign.com/free/&quot;&gt;https://buy.wosign.com/free/&lt;/a&gt;를 이용하면 3년까지 사용 가능한 ssl 인증서를 받을 수 있다).&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;server {
    listen 80;
    listen 443 ssl;
    server_name  your-private-repository.com;
    root         /home/web/toran/web/;

    ssl_certificate /etc/nginx/ssl/toran/your-private-repository.com.crt;
    ssl_certificate_key /etc/nginx/ssl/toran/your-private-repository.com.key;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;

    location / {
        try_files $uri /app.php$is_args$args;
    }

    location ~ ^/(app|cron)\.php(/|$) {
        # The path or IP to access your PHP FCGI/FPM processes
        fastcgi_pass unix:/dev/shm/php5-fpm.toran.sock;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;

        # Set this to &quot;off&quot; if you are not using an ssl vhost
        fastcgi_param  HTTPS              on;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이제는 거의 마지막이다. 이제 your-private-repository.com로 접속해 보면 설정화면이 나온다. 여기서는 내용을 보고 필요한 설정을 하면 된다. 대부분의 경우는 특별히 손댈 것이 없다. 다만, 맨 위의 라이센스 관련된 부분을 확인해서 개인 사용을 체크 해주고 저장하면 설정이 완료된다. 나머지 설정도 나중에 설정 화면에서 변경할 수 있다.&lt;/p&gt;

&lt;p&gt;정말 마지막. 스케쥴 설정을 해준다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;crontab -e

* * * * * su - web -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;cd /home/web/toran &amp;amp;&amp;amp; php bin/cron&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위 설정은 매분마다 정보를 갱신하도록 스케쥴을 설정한 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;설정은 모두 끝났다. 이젠 사용하면된다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;require&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;company/project&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dev-master&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;repositories&amp;quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;composer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://your-private-repository.com/repo/private/&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;composer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://your-private-repository.com/repo/packagist/&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;packagist&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;    
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;간단히 설명하자면 &lt;code&gt;https://your-private-repository.com/repo/packagist/&lt;/code&gt;와 &lt;code&gt;&quot;packagist&quot;: false&lt;/code&gt;는 default repository인 packagist를 제외하고 toran proxy를 추가하는 것이다. toran이 proxy / cache 처리를 해주므로 packagist는 제외해도 된다(proxy를 사용하는 경우). 이 설정을 통해 느린 packagist를 벗어나 빠른 개인 repository를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;https://your-private-repository.com/repo/private/&lt;/code&gt; 설정은 말 그대로 private repository를 사용하기 위한 설정이다. private repository를 설정하는 것은 관리 화면에서 &lt;code&gt;Private Repositories&lt;/code&gt; 메뉴로 들어가면 간단히 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;나의 경우처럼 git를 바로 연결해서 사용했었다면 간단히 &lt;code&gt;Add Repository&lt;/code&gt;를 눌러 Type을 &lt;code&gt;vcs&lt;/code&gt;로 선택하고 git repository 주소를 입력해주면 끝난다(참고로 설정 내용은 &lt;code&gt;app/toran/config.yml&lt;/code&gt; 파일에 저장되어 있다).&lt;/p&gt;

&lt;p&gt;단, 여기서 오류가 날 수 있다. 앞서 설명했던 것과 같이 해당 repository가 private project라면 접속 권한 요구에 대한 오류가 날 수 있다. 이 때는 &lt;code&gt;app/toran/composer/auth.json&lt;/code&gt;에 접근 정보를 추가해 주면 된다(Type을 &lt;code&gt;git&lt;/code&gt;를 선택했다면 web 계정의 &lt;code&gt;auth.json&lt;/code&gt;(&lt;code&gt;~/.composer/auth.json&lt;/code&gt; 또는 &lt;code&gt;~/.config/composer/auth.json&lt;/code&gt;)에 접근 정보를 추가해 주어야 할 수도 있다).&lt;/p&gt;

&lt;p&gt;그리고 Type를 &lt;code&gt;git&lt;/code&gt;로 선택할 수도 있는데 이 경우엔 composer에서 package를 받았을 때 git를 사용할 수 없다. &lt;code&gt;vcs&lt;/code&gt;로 설정된 경우만 git를 사용할 수 있어 commit / push가 가능하다. 목적에 따라 이를 막아야 할 경우라면 &lt;code&gt;git&lt;/code&gt;를 선택하는 것도 가능하다.&lt;/p&gt;
</content>
<summary>오늘은 Composer에서 Packagist가 아닌 private repository를 사용할 수 있도록 Toran Proxy를 설정하는 방법을 설명하고자 한다. 사실 Toran Proxy 외에도 Satis라는 것도 있는데 관련된 내용은 Handling private packages with Satis or Toran Proxy을 참고하길 바란다(Satis를 조금 더 편하게 사용하기 위한 라이브러리들도 몇가지가 있다. 사실 Satis가 더 유명하나 Toran Proxy가 더 사용하기 편할 것 같아 선택했다).본 설명에 앞서 Toran Proxy를 이용함으로써 얻을 수 있는 이점부터 이야기 해보자. 내가 Toran Proxy를 설치한 이유기도 하다.  private repository 운영할 수 있다.  public proxy를 사용해서 composer의 속도를 올릴 수 있다.오픈소스 프로젝트를 진행하는 것이 아닌 회사의 업무 등의 이유로 composer를 사용하는 경우라면 private project로 진행하는 것이 일반적일 것이다. 나의 경우는 gitlab.com에서 private project로 git를 사용하고 composer에는 아래와 같은 형식으로 사용하고 있었다.123456789&amp;quot;require&amp;quot;: {  &amp;quot;company/project&amp;quot;: &amp;quot;dev-master&amp;quot;},&amp;quot;repositories&amp;quot;: [    {      &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,      &amp;quot;url&amp;quot;: &amp;quot;git@gitlab.com:company/project.git&amp;quot;    }]    이 방법은 project를 package로 배포하지 않고 최신 소스(커밋)를 composer에서 가져오도록 한 것이다. 이 경우 별도의 composer repository가 필요하지 않다. 다만, 버전을 별도로 관리할 수 없고 composer update가 느려진다. composer update가 느려지는 이유는 update시마다 해당 프로젝트의 composer.json을 읽어 변경사항을 확인하기 때문이다. 이렇게 사용하는 것이 한두개라면 모르겠지만 많다면 composer update를 실행 하기가 두려워질 정도로 느려진다(composer.json 파일을 매번 확인하는 데다가 gitlab.com / packagist.org가 해외 서비스다 보니 네트워크가 느려서 더 심하다). composer 자체도 느린데 이런 문제까지 겹치니 감당 안된다. php composer 속도 개선하기에서 언급한 방법들을 적용해도 이 문제에는 큰 효과가 없다.composer에 관해서는 더 많은 이야기가 있을 수 있으나 본 글의 주제를 벗어 나므로 이쯤에서 줄이고 본격적으로 Toran Proxy 설치를 설명하겠다.  Toran Proxy는 사실 유료다. 단, 개인 사용자에게는 개발자 1명까지 무료다(무료의 경우 기술 지원을 하지 않는다).Toran Proxy에서 download 링크를 누르면 다시 download 링크와 설치 방법에 대한 안내를 볼 수 있다.아래는 내가 설치한 과정을 정리한 것이다. 실제로는 bash shell 스크립트로 작성되어 있는데 중요한 부분만 다시 정리한 것으로 작업 상에 약간의 차이가 있을 수 있다. 또한, CentOS 7에서 작업 했으며 사용자는 web, 사용자 그룹은 usergroup이며 사용자 root directory는 /home/web/이다. 따라서 자신의 환경과 맞지 않는 부분은 맞게 고쳐서 적용해야 한다. 1 2 3 4 5 6 7 8 91011121314151617181920212223242526# 소스를 다운 받아서 /home/web/에 압축을 푼다.# 최신 버전이 1.5.1이 아닐 수 있으니 다운로드 링크는 웹사이트에서 복사하는 것을 권한다.$ curl -LO https://toranproxy.com/releases/toran-proxy-v1.5.1.tgz$ tar zxvf toran-proxy-v1.5.1.tgz -C /home/web/# 해당 폴더로 가서$ cd /home/web/toran# 기본 설정 파일을 만든다.$ cp app/config/parameters.yml.dist app/config/parameters.yml# 아래의 app/config/parameters.yml의 설정은 직접 해당 파일을 열어서 수정해도 된다.# 나의 경우는 shell 스크립트로 제작하면서 아래와 같이 처리한 것이다.# project hash키를 난수로 만들어 넣어준다.$ hashkey=`php -r &amp;quot;echo sha1(rand());&amp;quot;`$ sed -i &amp;quot;s/ThisTokenIsNotSoSecret-Change-I/$hashkey/g&amp;quot; app/config/parameters.yml# https를 사용하도록 설정한다. 기본은 http이나 나중에 composer에서 쉽게 사용하려면 https를 사용하는 것이 좋다.sed -i &amp;quot;s/toran_scheme:\s*http$/toran_scheme: https/g&amp;quot; app/config/parameters.yml# private repository로 사용할 도메인을 지정한다.sed -i &amp;quot;s/toran_host:\s*example.org$/toran_host: your-private-repository.com/g&amp;quot; app/config/parameters.yml# 필요한 디렉토리를 생성하고 권한을 부여한다.chmod 777 app/toran app/cache app/logs web/repo app/bootstrap.php.cachemkdir -p app/toran/cache web/repo/packagist/ web/repo/private/chmod 777 app/toran/cache web/repo/packagist/ web/repo/private/chown web.usergroup -R /home/web/toran여기까지가 기본 설치 과정이다. 하지만 사용을 위해서는 설정할 것들이 많이 남았다. 이 상태에서 php bin/cron -v를 실행하면 아래와 같은 결과가 나올 것이다.1234$ php bin/cron -vYou need to setup a GitHub OAuth token because Toran makes a lot of requests and will use up the API calls limit if it is unauthenticatedHead to https://github.com/settings/tokens/new to create a token. You need to select the public_repo credentials, and the repo one if you are going to use private repositories from GitHub with Toran.Token:안내에 설명되어 있는 것과 같이 https://github.com/settings/tokens/new 에 가서 개인용 ssh token을 생성해서 넣어야 한다. 생성시 어떤 권한을 부여할지 선택하는 화면이 나오는데 다른 것은 필요 없고 public_repo만 선택해서 생성하면 된다. 사실 일반적인 경우라면 composer 사용시 미리 받아 놓은 token이 있을테니 그걸 사용해도 된다. 보통 ~/.composer/auth.json 또는 ~/.config/composer/auth.json에 등록이 되어있다.token을 입력하면 app/toran/composer/auth.json에 파일이 생성된다. 여기서는 github에 대한 token만 등록하도록 물어보는데 나의 경우처럼 gitlab.com 등의 접근이 필요하다면 아래과 같이 설정 할 수 있다.1234{    &amp;quot;github-oauth&amp;quot;: { &amp;quot;github.com&amp;quot;: &amp;quot;[github token]&amp;quot; },    &amp;quot;gitlab-oauth&amp;quot;: { &amp;quot;gitlab.com&amp;quot;: &amp;quot;[gitlab token]&amp;quot; }}여기서 설정된 “gitlab token”은 github와는 조금 다르다. github의 경우는 사이트에 token을 발급해서 넣었었는데 gitlab은 동일하게 사이트에서 발급 받은 token을 강제로 넣었더니 정상적으로 동작하지 않았다. 대신 gitlab에 관련된 repository가 추가된 후 php bin/cron -v를 다시 실행하면 아래와 같이 아이디와 비밀번호를 물어보는데 여기에 입력하면 “gitlab token”이 생성되어 들어가 있다. gitlab.com에 API로 token을 만들어주나 싶어 확인해 봤더니 token은 없었다(아이디 / 비밀번호를 암호화해서 보관하는 것으로 보인다). 1 2 3 4 5 6 7 8 910$ php bin/cron -vInitializing private repositoriesInitializing git@gitlab.com:company/project.gitCould not fetch https://gitlab.com/api/v3/projects/company%2Fproject, enter your gitlab.com credentials to access private reposA token will be created and stored in &amp;quot;/home/web/toran/app/toran/composer/auth.json&amp;quot;, your password will never be storedTo revoke access to this token you can visit gitlab.com/profile/applicationsUsername:Password:Token successfully created여기까지 적용 했다면 이제는 웹페이지를 열어서 최종 설정을 하고 crontab에 스케쥴을 걸면 끝난다. 하지만 웹페이지 관련 설정이 조금 복잡하다. 이유는 Toran Proxy가 shell 접근과 web 접근시 동일한 퍼미션을 요구하기 때문이다. 필요한 폴더를 모두 쓰기 권한(777)을 주는 방법이 일반적이나 생성되는 파일 마다 계속 쓰기 권한을 주는 것은 무리가 있었다(몇가지를 그렇게 맞추다가 포기했다).따라서 아래의 내용은 선택에 맡긴다. 쓰기 권한이 요구되는 상황에 맞추어 권한을 주는 방법과 아래와 같이 php-fpm에서 사용자를 변경하는 방법이 있다.일반적인 php-fpm 설정 상태라면 pool로 www(/etc/php-fpm.d/www.conf)가 설정되어 있을 것이다. 여기에 새로운 pool을 아래와 같이 추가한다./etc/php-fpm.d/toran.conf[toran]...user = webgroup = usergroup...listen = /dev/shm/php5-fpm.toran.sock...나머지 설정은 자신의 상황에 맞게하면 된다. 우선 listen의 경우 기존 unix socket 과 겹치지 않는 파일을 지정한 것인데 기존에 unix socket를 사용하지 않고 listen = 127.0.0.1:9000과 같이 사용한다면 listen = 127.0.0.1:9001와 같이 다른 포트를 지정해서 사용하면 된다.중요한 부분은 user / group 설정 부분이다. 일반적으로 nobody / nobody를 사용하지만 여기서는 web / usergroup 를 지정해서 웹 접근시에도 shell 접속과 동일한 계정을 사용하도록 한 것이다. 일반적으로 보안 상의 이유로 이렇게 사용하지는 않으나 이 방법이 제일 쉬운 방법이다(보안에 대한 문제는 방화벽 등에서 제어하기 바란다. 어짜피 private repository로 사용할 것이므로 접근 제한은 해야할 것이다).이제 php-fpm을 재시작하면 www와 toran 두가지 pool이 동작하고 있다.이제부터는 nginx 설정이다. 아래의 예시를 참고해서 설정하자. ssl 관련된 설정을 위해서 ssl 인증서를 생성해야 한다(letsencrypt를 이용하면 무료로 인증서를 받을 수 있다. 이게 어렵거나 귀찮다면 https://buy.wosign.com/free/를 이용하면 3년까지 사용 가능한 ssl 인증서를 받을 수 있다).server {    listen 80;    listen 443 ssl;    server_name  your-private-repository.com;    root         /home/web/toran/web/;    ssl_certificate /etc/nginx/ssl/toran/your-private-repository.com.crt;    ssl_certificate_key /etc/nginx/ssl/toran/your-private-repository.com.key;    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    ssl_prefer_server_ciphers on;    ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;    location / {        try_files $uri /app.php$is_args$args;    }    location ~ ^/(app|cron)\.php(/|$) {        # The path or IP to access your PHP FCGI/FPM processes        fastcgi_pass unix:/dev/shm/php5-fpm.toran.sock;        fastcgi_split_path_info ^(.+\.php)(/.*)$;        include fastcgi_params;        fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;        # Set this to &quot;off&quot; if you are not using an ssl vhost        fastcgi_param  HTTPS              on;    }}이제는 거의 마지막이다. 이제 your-private-repository.com로 접속해 보면 설정화면이 나온다. 여기서는 내용을 보고 필요한 설정을 하면 된다. 대부분의 경우는 특별히 손댈 것이 없다. 다만, 맨 위의 라이센스 관련된 부분을 확인해서 개인 사용을 체크 해주고 저장하면 설정이 완료된다. 나머지 설정도 나중에 설정 화면에서 변경할 수 있다.정말 마지막. 스케쥴 설정을 해준다.123$ crontab -e* * * * * su - web -c &amp;quot;cd /home/web/toran &amp;amp;&amp;amp; php bin/cron&amp;quot;위 설정은 매분마다 정보를 갱신하도록 스케쥴을 설정한 것이다.설정은 모두 끝났다. 이젠 사용하면된다. 1 2 3 4 5 6 7 8 910111213141516&amp;quot;require&amp;quot;: {  &amp;quot;company/project&amp;quot;: &amp;quot;dev-master&amp;quot;},&amp;quot;repositories&amp;quot;: [  {    &amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;,    &amp;quot;url&amp;quot;: &amp;quot;https://your-private-repository.com/repo/private/&amp;quot;  },  {    &amp;quot;type&amp;quot;: &amp;quot;composer&amp;quot;,    &amp;quot;url&amp;quot;: &amp;quot;https://your-private-repository.com/repo/packagist/&amp;quot;  },  {    &amp;quot;packagist&amp;quot;: false  }]    간단히 설명하자면 https://your-private-repository.com/repo/packagist/와 &quot;packagist&quot;: false는 default repository인 packagist를 제외하고 toran proxy를 추가하는 것이다. toran이 proxy / cache 처리를 해주므로 packagist는 제외해도 된다(proxy를 사용하는 경우). 이 설정을 통해 느린 packagist를 벗어나 빠른 개인 repository를 사용할 수 있다.https://your-private-repository.com/repo/private/ 설정은 말 그대로 private repository를 사용하기 위한 설정이다. private repository를 설정하는 것은 관리 화면에서 Private Repositories 메뉴로 들어가면 간단히 사용할 수 있다.나의 경우처럼 git를 바로 연결해서 사용했었다면 간단히 Add Repository를 눌러 Type을 vcs로 선택하고 git repository 주소를 입력해주면 끝난다(참고로 설정 내용은 app/toran/config.yml 파일에 저장되어 있다).단, 여기서 오류가 날 수 있다. 앞서 설명했던 것과 같이 해당 repository가 private project라면 접속 권한 요구에 대한 오류가 날 수 있다. 이 때는 app/toran/composer/auth.json에 접근 정보를 추가해 주면 된다(Type을 git를 선택했다면 web 계정의 auth.json(~/.composer/auth.json 또는 ~/.config/composer/auth.json)에 접근 정보를 추가해 주어야 할 수도 있다).그리고 Type를 git로 선택할 수도 있는데 이 경우엔 composer에서 package를 받았을 때 git를 사용할 수 없다. vcs로 설정된 경우만 git를 사용할 수 있어 commit / push가 가능하다. 목적에 따라 이를 막아야 할 경우라면 git를 선택하는 것도 가능하다.</summary>
</entry>
<entry>
<title>Mysql: Table ‘name’ is specified twice, both as a target for ‘UPDATE’ and as a separate source for data 오류 해결</title>
<link href="https://blog.asamaru.net/2016/05/30/mysql-table-name-is-specified-twice-both-as-a-target-for-update-and-as-a-separate-source-for-data/" rel="alternate" type="text/html" title="Mysql: Table &#39;name&#39; is specified twice, both as a target for &#39;UPDATE&#39; and as a separate source for data 오류 해결" />
<published>2016-05-30T20:55:10+09:00</published>
<updated>2016-05-30T20:55:10+09:00</updated>
<id>https://blog.asamaru.net/2016/05/30/mysql-table-name-is-specified-twice-both-as-a-target-for-update-and-as-a-separate-source-for-data</id>
<content type="html" xml:base="https://blog.asamaru.net/2016/05/30/mysql-table-name-is-specified-twice-both-as-a-target-for-update-and-as-a-separate-source-for-data/">&lt;p&gt;아래의 Query는 계층형 카테고리에서 해당 노드와 상위 노드의 ‘itemCount’를 모두 1 증가 시키기 위한 Query다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;`storeCategory`&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;`_lft`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;`storeCategory`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;`fullCode`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ab&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BETWEEN&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;`_lft`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;`_rgt`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위 Query 에서는 자신의 Table의 검색 결과를 자신의 데이터를 변경하는데 사용하고 있다. 이 경우 아래와 같은 오류가 난다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;Table &#39;storeCategory&#39; is specified twice, both as a target for &#39;UPDATE&#39; and as a separate source for data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;이 경우는 아래와 같은 방식으로 문제를 회피할 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;`storeCategory`&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;`_lft`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;`storeCategory`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;`fullCode`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categoryId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dummy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BETWEEN&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;`_lft`&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;AND&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;`_rgt`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;검색 결과를 dummy table로 alias 하여 직접적인 접근을 우회한 것이다.&lt;/p&gt;
</content>
<summary>아래의 Query는 계층형 카테고리에서 해당 노드와 상위 노드의 ‘itemCount’를 모두 1 증가 시키기 위한 Query다.1UPDATE `storeCategory` SET itemCount=itemCount+1 WHERE (SELECT X.`_lft` FROM `storeCategory` as X WHERE X.`fullCode` = &amp;#39;ab&amp;#39; LIMIT 1) BETWEEN `_lft` AND `_rgt`;위 Query 에서는 자신의 Table의 검색 결과를 자신의 데이터를 변경하는데 사용하고 있다. 이 경우 아래와 같은 오류가 난다.Table &#39;storeCategory&#39; is specified twice, both as a target for &#39;UPDATE&#39; and as a separate source for data이 경우는 아래와 같은 방식으로 문제를 회피할 수 있다.1UPDATE `storeCategory` SET itemCount=itemCount+1 WHERE (SELECT * FROM (SELECT X.`_lft` FROM `storeCategory` as X WHERE X.`fullCode` = new.categoryId LIMIT 1) _dummy) BETWEEN `_lft` AND `_rgt`;검색 결과를 dummy table로 alias 하여 직접적인 접근을 우회한 것이다.</summary>
</entry>
<entry>
<title>linux에서 대량의 파일을 보다 빠르게 지우기</title>
<link href="https://blog.asamaru.net/2016/04/26/efficiently-delete-large-directory-containing-thousands-of-files/" rel="alternate" type="text/html" title="linux에서 대량의 파일을 보다 빠르게 지우기" />
<published>2016-04-26T21:53:55+09:00</published>
<updated>2016-04-26T21:53:55+09:00</updated>
<id>https://blog.asamaru.net/2016/04/26/efficiently-delete-large-directory-containing-thousands-of-files</id>
<content type="html" xml:base="https://blog.asamaru.net/2016/04/26/efficiently-delete-large-directory-containing-thousands-of-files/">&lt;p&gt;주기적으로 실행되는 스케쥴 중에 대량의 파일을 삭제해야 하는 작업이 있었다. 데이터 수집 등의 작업으로 누적된 로그/캐시 파일들을 작업 완료 후 삭제를 해야하는 작업이었다. 그런데 파일의 수가 워낙에 많다보니 지우는 작업에 소요되는 시간이 너무 길었다. 어차피 서비스 서버가 아니고 스케쥴로 처리되는 작업이니 시간이 조금 오래 걸려도 큰 문제될 것은 없었으나 그래도 시간을 조금이라도 줄여보고자 자료를 찾아보다 &lt;a href=&quot;http://unix.stackexchange.com/questions/37329/efficiently-delete-large-directory-containing-thousands-of-files&quot;&gt;Efficiently delete large directory containing thousands of files&lt;/a&gt;라는 글을 찾았다.&lt;/p&gt;

&lt;p&gt;위 글에서 제시하는 방법은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Rsync&quot;&gt;rsync&lt;/a&gt;를 이용해서 빈 폴더와 동기화시키는 방법으로 파일들을 삭제하는 것이다. 이게 큰 차이가 있을까 싶었으나 위 글 외에도 여러 곳에서 이 방법을 제시하고 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rsync -a --delete _empty/ target_directory/
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;대량의 파일을 지울 일이 있다면 한번쯤은 시도해 보는 것도 괜찮을 것 같아 소개해 본다.&lt;/p&gt;

&lt;p&gt;추가적으로 아래와 같이 병렬 삭제를 하는 것도 방법이라고 한다. 하지만 위 방법이 훨씬 나을 것으로 본다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;find target_directory -maxdepth &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tac &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs -d &lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt; -P &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; -n &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; rm -rf
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
</content>
<summary>주기적으로 실행되는 스케쥴 중에 대량의 파일을 삭제해야 하는 작업이 있었다. 데이터 수집 등의 작업으로 누적된 로그/캐시 파일들을 작업 완료 후 삭제를 해야하는 작업이었다. 그런데 파일의 수가 워낙에 많다보니 지우는 작업에 소요되는 시간이 너무 길었다. 어차피 서비스 서버가 아니고 스케쥴로 처리되는 작업이니 시간이 조금 오래 걸려도 큰 문제될 것은 없었으나 그래도 시간을 조금이라도 줄여보고자 자료를 찾아보다 Efficiently delete large directory containing thousands of files라는 글을 찾았다.위 글에서 제시하는 방법은 rsync를 이용해서 빈 폴더와 동기화시키는 방법으로 파일들을 삭제하는 것이다. 이게 큰 차이가 있을까 싶었으나 위 글 외에도 여러 곳에서 이 방법을 제시하고 있다.1$ rsync -a --delete _empty/ target_directory/대량의 파일을 지울 일이 있다면 한번쯤은 시도해 보는 것도 괜찮을 것 같아 소개해 본다.추가적으로 아래와 같이 병렬 삭제를 하는 것도 방법이라고 한다. 하지만 위 방법이 훨씬 나을 것으로 본다.1$ find target_directory -maxdepth 3 | tac | xargs -d \n -P 5 -n 5 rm -rf</summary>
</entry>
<entry>
<title>NFS로 연결된 디스크에서 Gulp Watch 사용시 파일 변경 감지가 느릴 때</title>
<link href="https://blog.asamaru.net/2016/04/26/gulp-watch-is-very-slow-to-recognize-file-modifications/" rel="alternate" type="text/html" title="NFS로 연결된 디스크에서 Gulp Watch 사용시 파일 변경 감지가 느릴 때" />
<published>2016-04-26T21:21:07+09:00</published>
<updated>2016-04-26T21:21:07+09:00</updated>
<id>https://blog.asamaru.net/2016/04/26/gulp-watch-is-very-slow-to-recognize-file-modifications</id>
<content type="html" xml:base="https://blog.asamaru.net/2016/04/26/gulp-watch-is-very-slow-to-recognize-file-modifications/">&lt;p&gt;얼마 전부터 프로젝트에서 &lt;a href=&quot;https://lumen.laravel.com/&quot;&gt;Lumen&lt;/a&gt;을 사용하고 있다. &lt;a href=&quot;https://laravel.com/&quot;&gt;Laravel&lt;/a&gt;을 사용하려고 하다가 경량 프레임워크에 더 끌려서 Lumen을 사용중이다. 사실 이 부분에 관련해서 약간의 후회(고민)를 하고 있다. lumen은 아무래도 자료도 부족한 면이 있고 Laravel 모듈과의 연동이 원활하지 않은 부분이 있어서 불편한 면이 있다.&lt;/p&gt;

&lt;p&gt;Lumen에는 Laravel에서 기본적으로 제공하는 기능 중 많은 부분이 제외되어 있는데 그 중 하나가 &lt;a href=&quot;https://laravel.com/docs/master/elixir&quot;&gt;Elixir&lt;/a&gt;이다. 하지만 Elixir를 Lumen에 연결하는 것은 크게 어렵지 않다. Elixir는 &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;를 기반으로 제작되어 있다. 따라서 작업시 gulp의 watch 기능을 사용하게 되는데 나의 작업 환경인 vagrant(centos) 내에서 파일의 변경을 잘 인식하지 못했다.&lt;/p&gt;

&lt;p&gt;그래서 관련자료를 찾다가 &lt;a href=&quot;https://github.com/gulpjs/gulp/issues/448&quot;&gt;Watch is very slow to recognize file modifications&lt;/a&gt;라는 글을 찾았다. 여기서 원인을 찾았는데 원인은 바로 NFS로 연결된 디스크로 인한 문제였다.&lt;/p&gt;

&lt;p&gt;이 글에서의 해결책은 아래와 같다. 중요한 부분은 &lt;code&gt;actimeo=2&lt;/code&gt; 이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;config.vm.synced_folder &quot;dev&quot;, &quot;/dev/vagrant&quot;,
    :nfs =&amp;gt; true,
    :mount_options =&amp;gt; [&#39;actimeo=2&#39;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;하지만 나의 경우는 &lt;code&gt;synced_folder&lt;/code&gt;를 사용하지 않고 부팅시 직접적으로 NFS 디스크를 마운트하고 있다. 그래서 아래와 같이 적용했다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;mount -o &quot;vers=3,udp,nolock,actimeo=2&quot; 192.168.99.1:&quot;/subdev/web&quot; /home/web
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;그럼 여기서 &lt;code&gt;actimeo&lt;/code&gt;는 무엇인가? &lt;a href=&quot;http://linux.die.net/man/5/nfs&quot;&gt;Linux man page&lt;/a&gt;에 아래와 같이 설명되어 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;actimeo=n&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;Using actimeo sets all of acregmin, acregmax, acdirmin, and acdirmax to the same value. If this option is not specified, the NFS client uses the defaults for each of these options listed above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;간단히 이야기하자면 위의 방법은 NFS의 파일 cache time을 2초로 줄여서 파일의 변경을 빠르게 인지할 수 있도록 해주는 것이다.&lt;/p&gt;

&lt;p&gt;다른 방법으로는 &lt;code&gt;lookupcache=none&lt;/code&gt; 옵션을 사용하는 것도 가능하다(&lt;a href=&quot;http://stackoverflow.com/a/28571327&quot;&gt;Watching files for changes on Vagrant, file modification times not updating&lt;/a&gt;
).&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;config.vm.synced_folder &quot;./&quot;, &quot;/vagrant&quot;, type: &quot;nfs&quot;, mount_options: [&quot;lookupcache=none&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
</content>
<summary>얼마 전부터 프로젝트에서 Lumen을 사용하고 있다. Laravel을 사용하려고 하다가 경량 프레임워크에 더 끌려서 Lumen을 사용중이다. 사실 이 부분에 관련해서 약간의 후회(고민)를 하고 있다. lumen은 아무래도 자료도 부족한 면이 있고 Laravel 모듈과의 연동이 원활하지 않은 부분이 있어서 불편한 면이 있다.Lumen에는 Laravel에서 기본적으로 제공하는 기능 중 많은 부분이 제외되어 있는데 그 중 하나가 Elixir이다. 하지만 Elixir를 Lumen에 연결하는 것은 크게 어렵지 않다. Elixir는 Gulp를 기반으로 제작되어 있다. 따라서 작업시 gulp의 watch 기능을 사용하게 되는데 나의 작업 환경인 vagrant(centos) 내에서 파일의 변경을 잘 인식하지 못했다.그래서 관련자료를 찾다가 Watch is very slow to recognize file modifications라는 글을 찾았다. 여기서 원인을 찾았는데 원인은 바로 NFS로 연결된 디스크로 인한 문제였다.이 글에서의 해결책은 아래와 같다. 중요한 부분은 actimeo=2 이다.config.vm.synced_folder &quot;dev&quot;, &quot;/dev/vagrant&quot;,    :nfs =&amp;gt; true,    :mount_options =&amp;gt; [&#39;actimeo=2&#39;]하지만 나의 경우는 synced_folder를 사용하지 않고 부팅시 직접적으로 NFS 디스크를 마운트하고 있다. 그래서 아래와 같이 적용했다.mount -o &quot;vers=3,udp,nolock,actimeo=2&quot; 192.168.99.1:&quot;/subdev/web&quot; /home/web그럼 여기서 actimeo는 무엇인가? Linux man page에 아래와 같이 설명되어 있다.  actimeo=n  Using actimeo sets all of acregmin, acregmax, acdirmin, and acdirmax to the same value. If this option is not specified, the NFS client uses the defaults for each of these options listed above.간단히 이야기하자면 위의 방법은 NFS의 파일 cache time을 2초로 줄여서 파일의 변경을 빠르게 인지할 수 있도록 해주는 것이다.다른 방법으로는 lookupcache=none 옵션을 사용하는 것도 가능하다(Watching files for changes on Vagrant, file modification times not updating).config.vm.synced_folder &quot;./&quot;, &quot;/vagrant&quot;, type: &quot;nfs&quot;, mount_options: [&quot;lookupcache=none&quot;]</summary>
</entry>
<entry>
<title>chmod로 권한 변경시 디렉토리(또는 파일)만 적용하기</title>
<link href="https://blog.asamaru.net/2016/04/14/how-to-chmod-all-directories-or-files/" rel="alternate" type="text/html" title="chmod로 권한 변경시 디렉토리(또는 파일)만 적용하기" />
<published>2016-04-14T19:00:43+09:00</published>
<updated>2016-04-14T19:00:43+09:00</updated>
<id>https://blog.asamaru.net/2016/04/14/how-to-chmod-all-directories-or-files</id>
<content type="html" xml:base="https://blog.asamaru.net/2016/04/14/how-to-chmod-all-directories-or-files/">&lt;p&gt;chmod로 디렉토리 또는 파일의 권한을 변경할 때 하위에 포함된 파일들까지 일괄 적용을 하기 위해 &lt;code&gt;-R&lt;/code&gt; 옵션을 사용할 수 있다. 그런데 이 경우는 하위의 모든 디렉토리와 파일에 적용된다. 아래는 하위의 디렉토리만 또는 파일만 적용하도록 하는 방법을 안내한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# 하위 디렉토리만 포함&lt;/span&gt;
find /path/to/base/dir -type d -exec chmod &lt;span class=&quot;m&quot;&gt;755&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; +
chmod &lt;span class=&quot;m&quot;&gt;755&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;find /path/to/base/dir -type d&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
find /path/to/base/dir -type d -print0 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs -0 chmod 755

&lt;span class=&quot;c&quot;&gt;# 하위 파일만 포함&lt;/span&gt;
find /path/to/base/dir -type f -exec chmod &lt;span class=&quot;m&quot;&gt;644&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; +
chmod &lt;span class=&quot;m&quot;&gt;644&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;find /path/to/base/dir -type f&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
find /path/to/base/dir -type f -print0 &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs -0 chmod 644
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;출처 : &lt;a href=&quot;http://superuser.com/a/91938&quot;&gt;How to chmod all directories except files (recursively)?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;여러가지 방법이 있으니 상황에 따라 골라서 사용하면 된다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;위 주제와 관련있는 내용은 아니지만 덤으로 chown 사용시 기존에 지정된 사용자에 따라 적용 여부를 결정할 수 있는 명령도 아래에 안내한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# chown 특정 사용자만 변경&lt;/span&gt;
chown --from&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root.root web.usergroup * -R
chown --from&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;511&lt;/span&gt; -R web *
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
</content>
<summary>chmod로 디렉토리 또는 파일의 권한을 변경할 때 하위에 포함된 파일들까지 일괄 적용을 하기 위해 -R 옵션을 사용할 수 있다. 그런데 이 경우는 하위의 모든 디렉토리와 파일에 적용된다. 아래는 하위의 디렉토리만 또는 파일만 적용하도록 하는 방법을 안내한다.123456789# 하위 디렉토리만 포함find /path/to/base/dir -type d -exec chmod 755 {} +chmod 755 $(find /path/to/base/dir -type d)find /path/to/base/dir -type d -print0 | xargs -0 chmod 755# 하위 파일만 포함find /path/to/base/dir -type f -exec chmod 644 {} +chmod 644 $(find /path/to/base/dir -type f)find /path/to/base/dir -type f -print0 | xargs -0 chmod 644출처 : How to chmod all directories except files (recursively)?여러가지 방법이 있으니 상황에 따라 골라서 사용하면 된다.위 주제와 관련있는 내용은 아니지만 덤으로 chown 사용시 기존에 지정된 사용자에 따라 적용 여부를 결정할 수 있는 명령도 아래에 안내한다.123# chown 특정 사용자만 변경chown --from=root.root web.usergroup * -Rchown --from=511 -R web *</summary>
</entry>
<entry>
<title>php-fpm opcache로 인한 Nginx - 502 bad gateaway 오류</title>
<link href="https://blog.asamaru.net/2016/04/12/php-fpm-opcache-and-nginx-502-bad-gateaway/" rel="alternate" type="text/html" title="php-fpm opcache로 인한 Nginx - 502 bad gateaway 오류" />
<published>2016-04-12T15:39:21+09:00</published>
<updated>2016-04-12T15:39:21+09:00</updated>
<id>https://blog.asamaru.net/2016/04/12/php-fpm-opcache-and-nginx-502-bad-gateaway</id>
<content type="html" xml:base="https://blog.asamaru.net/2016/04/12/php-fpm-opcache-and-nginx-502-bad-gateaway/">&lt;p&gt;얼마 전부터 서비스 사용자로부터 이상한 오류 보고를 비주기적으로 받고 있다.&lt;/p&gt;

&lt;p&gt;특정 페이지에 접속시 &lt;code&gt;502 Bad gateaway&lt;/code&gt; 오류가 난다는 것이다. 하지만 그 오류가 나는 페이지에 특별히 눈에 띄는 부분은 없다. 게다가 동일한 프로그램이 몇개의 폴더에서 동시에 사용 중임에도 꼭 한군데서만 동일한 문제를 일으킨다. 게다가 일시적으로 발생하고 사라지지 않고 한번 오류가 발생하면 그 후에 해당 페이지에 접속하면 해결 전까지는 계속 502 에러를 보인다. 게다가 해당 오류가 발생하는 조건을 알 수 없어 오류 재연이 불가능한 상황이라 원인 파악에 애를 먹고 있다.&lt;/p&gt;

&lt;p&gt;현재 해당 서버는 CentOS 6.7에 nginx + php-fpm으로 서비스 되고 있고 opcache와 apcu 등이 적용되어 있다. 오류가 난 상황에서는 로그에 아래와 같은 기록이 남는다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/var/log/nginx/error.log&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;2016/04/12 14:50:43 [error] 2481#2481: *1828457 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: ~~~.~~~.~~~.~~~, server: ~~~, request: &quot;GET /~~~ HTTP/1.1&quot;, upstream: &quot;fastcgi://~~~:&quot;, host: &quot;~~~&quot;, referrer: &quot;~~~&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;/var/log/php-fpm/error.log&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;[12-Apr-2016 14:54:39] WARNING: [pool www] child 24352 exited on signal 11 (SIGSEGV) after 301.965713 seconds from start
[12-Apr-2016 14:54:39] NOTICE: [pool www] child 24510 started
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;현재로써는 일단 오류가 발생하면 해당 서버의 opcache를 초기화해주면 문제는 즉시 해결된다. 따라서 opcache의 오류로 판단하고 있다.&lt;/p&gt;

&lt;p&gt;이 문제와 관련해서 검색해보니 비슷한 증상을 보이는 사례들이 많았다. 대부분의 경우 해결책은 opcache를 끄도록 설정하는 것을 제시하고 있다. 하지만 opcache는 당연히 필요하니 사용하던 것이라 그냥 끌수는 없다. 다른 방법으로 &lt;a href=&quot;http://offandon.org/2015/12/apache-2-4-opcache-apcu-502/&quot;&gt;Apache 2.4 + Opcache + APCu = 502?&lt;/a&gt;에 보면 아래와 같은 방법을 제시하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/php.d/opcache.ini:&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;opcache.fast_shutdown=0
opcache.enable_cli=0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;하지만 &lt;code&gt;fast_shutdown&lt;/code&gt;의 경우도 성능을 위해 사용하는 것이 권장되고 있는 옵션으로 그냥 끌수는 없다. 사실 문제가 해결된다는 보장도 없다(글쓴이도 정확하게 이해한 것이 아니라고 한다).&lt;/p&gt;

&lt;p&gt;여기서 잠깐 &lt;code&gt;fast_shutdown&lt;/code&gt;에 대해 조금 알아보자. &lt;a href=&quot;http://php.net/manual/kr/opcache.configuration.php#ini.opcache.fast-shutdown&quot;&gt;PHP 매뉴얼 OPcache 설치/설정&lt;/a&gt;에 보면 아래와 같이 설명되어 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;opcache.fast_shutdown boolean&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;If enabled, a fast shutdown sequence is used that doesn’t free each allocated block, but relies on the Zend Engine memory manager to deallocate the entire set of request variables en masse.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;정확한 의미는 모르겠지만 메뉴얼(&lt;a href=&quot;http://php.net/manual/kr/opcache.installation.php&quot;&gt;Recommended php.ini settings &lt;/a&gt;) 상에서도 아래와 같이 &lt;code&gt;fast_shutdown&lt;/code&gt;를 켜는 것을 권장하고 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;opcache.memory_consumption=128
opcache.interned_strings_buffer=8
opcache.max_accelerated_files=4000
opcache.revalidate_freq=60
opcache.fast_shutdown=1
opcache.enable_cli=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;다른 문서인 &lt;a href=&quot;https://www.scalingphpbook.com/blog/2014/02/14/best-zend-opcache-settings.html&quot;&gt;Best Zend OpCache Settings/Tuning/Config&lt;/a&gt;에서도 켜는 것을 권장하고 있다. 따라서 이 옵션을 끄는 것도 보류.&lt;/p&gt;

&lt;p&gt;현재 프로그램에서 의심되는 부분(다른 파일과 동일한 namespace와 class명을 사용)을 수정하고 opcache의 몇가지 옵션을 조정해서 다시 오류가 발생하는지 지켜보고 있다. 다시 오류가 재연되면 opcache 관리 페이지에서 전체 초기화가 아닌 파일 단위로 초기화하면서 원인 파일을 찾으려고 한다(진작에 했어야 하는 일이지만 서비스 중인 상태로 최대한 빨리 복구해야 해서 많은 시간을 들여 오류 위치를 찾을 수 없었다).&lt;/p&gt;

&lt;p&gt;원인 파일을 찾고 나면 소스를 리뷰한 후 특별한 문제를 찾지 못할 경우 해당 파일만 opcache에서 제외시킬 계획이다.&lt;/p&gt;

&lt;p&gt;제외하는 방법은 &lt;code&gt;opcache.blacklist_filename&lt;/code&gt;에 지정된 파일에 해당 파일 경로를 추가하면 된다. 나의 경우는 &lt;code&gt;opcache.blacklist_filename = /etc/php.d/opcache*.blacklist&lt;/code&gt;로 설정되어 있고 &lt;code&gt;/etc/php.d/opcache-default.blacklist&lt;/code&gt; 파일이 기본적으로 생성되어 있다. 현재 테스트 서버에서 &lt;code&gt;/etc/php.d/opcache-default.blacklist&lt;/code&gt;에 특정 파일 경로를 추가해서 opcache에서 정상적으로 제외되는지 확인은 마쳤다.&lt;/p&gt;

&lt;p&gt;php를 10여년 넘게 써오면서 이런 경우는 처음이다. 프로그램을 수정한 부분으로 문제가 해결되었으면 하는 바람이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;첨부&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위 상황과는 관련이 없지만 불특정하게 발생하지 않는 일반적인 상황에서의 502 오류라면 &lt;a href=&quot;https://gom2.net/502-bad-gateway-solution-on-nginx-php_fpm/&quot;&gt;nginx + PHP-fpm에서 502 Bad gateway 에러 해결법 총정리&lt;/a&gt;를 참고하면 도움이 될 것이다.&lt;/p&gt;
</content>
<summary>얼마 전부터 서비스 사용자로부터 이상한 오류 보고를 비주기적으로 받고 있다.특정 페이지에 접속시 502 Bad gateaway 오류가 난다는 것이다. 하지만 그 오류가 나는 페이지에 특별히 눈에 띄는 부분은 없다. 게다가 동일한 프로그램이 몇개의 폴더에서 동시에 사용 중임에도 꼭 한군데서만 동일한 문제를 일으킨다. 게다가 일시적으로 발생하고 사라지지 않고 한번 오류가 발생하면 그 후에 해당 페이지에 접속하면 해결 전까지는 계속 502 에러를 보인다. 게다가 해당 오류가 발생하는 조건을 알 수 없어 오류 재연이 불가능한 상황이라 원인 파악에 애를 먹고 있다.현재 해당 서버는 CentOS 6.7에 nginx + php-fpm으로 서비스 되고 있고 opcache와 apcu 등이 적용되어 있다. 오류가 난 상황에서는 로그에 아래와 같은 기록이 남는다./var/log/nginx/error.log2016/04/12 14:50:43 [error] 2481#2481: *1828457 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: ~~~.~~~.~~~.~~~, server: ~~~, request: &quot;GET /~~~ HTTP/1.1&quot;, upstream: &quot;fastcgi://~~~:&quot;, host: &quot;~~~&quot;, referrer: &quot;~~~&quot;/var/log/php-fpm/error.log[12-Apr-2016 14:54:39] WARNING: [pool www] child 24352 exited on signal 11 (SIGSEGV) after 301.965713 seconds from start[12-Apr-2016 14:54:39] NOTICE: [pool www] child 24510 started현재로써는 일단 오류가 발생하면 해당 서버의 opcache를 초기화해주면 문제는 즉시 해결된다. 따라서 opcache의 오류로 판단하고 있다.이 문제와 관련해서 검색해보니 비슷한 증상을 보이는 사례들이 많았다. 대부분의 경우 해결책은 opcache를 끄도록 설정하는 것을 제시하고 있다. 하지만 opcache는 당연히 필요하니 사용하던 것이라 그냥 끌수는 없다. 다른 방법으로 Apache 2.4 + Opcache + APCu = 502?에 보면 아래와 같은 방법을 제시하고 있다./etc/php.d/opcache.ini:opcache.fast_shutdown=0opcache.enable_cli=0하지만 fast_shutdown의 경우도 성능을 위해 사용하는 것이 권장되고 있는 옵션으로 그냥 끌수는 없다. 사실 문제가 해결된다는 보장도 없다(글쓴이도 정확하게 이해한 것이 아니라고 한다).여기서 잠깐 fast_shutdown에 대해 조금 알아보자. PHP 매뉴얼 OPcache 설치/설정에 보면 아래와 같이 설명되어 있다.  opcache.fast_shutdown boolean  If enabled, a fast shutdown sequence is used that doesn’t free each allocated block, but relies on the Zend Engine memory manager to deallocate the entire set of request variables en masse.정확한 의미는 모르겠지만 메뉴얼(Recommended php.ini settings ) 상에서도 아래와 같이 fast_shutdown를 켜는 것을 권장하고 있다.opcache.memory_consumption=128opcache.interned_strings_buffer=8opcache.max_accelerated_files=4000opcache.revalidate_freq=60opcache.fast_shutdown=1opcache.enable_cli=1다른 문서인 Best Zend OpCache Settings/Tuning/Config에서도 켜는 것을 권장하고 있다. 따라서 이 옵션을 끄는 것도 보류.현재 프로그램에서 의심되는 부분(다른 파일과 동일한 namespace와 class명을 사용)을 수정하고 opcache의 몇가지 옵션을 조정해서 다시 오류가 발생하는지 지켜보고 있다. 다시 오류가 재연되면 opcache 관리 페이지에서 전체 초기화가 아닌 파일 단위로 초기화하면서 원인 파일을 찾으려고 한다(진작에 했어야 하는 일이지만 서비스 중인 상태로 최대한 빨리 복구해야 해서 많은 시간을 들여 오류 위치를 찾을 수 없었다).원인 파일을 찾고 나면 소스를 리뷰한 후 특별한 문제를 찾지 못할 경우 해당 파일만 opcache에서 제외시킬 계획이다.제외하는 방법은 opcache.blacklist_filename에 지정된 파일에 해당 파일 경로를 추가하면 된다. 나의 경우는 opcache.blacklist_filename = /etc/php.d/opcache*.blacklist로 설정되어 있고 /etc/php.d/opcache-default.blacklist 파일이 기본적으로 생성되어 있다. 현재 테스트 서버에서 /etc/php.d/opcache-default.blacklist에 특정 파일 경로를 추가해서 opcache에서 정상적으로 제외되는지 확인은 마쳤다.php를 10여년 넘게 써오면서 이런 경우는 처음이다. 프로그램을 수정한 부분으로 문제가 해결되었으면 하는 바람이다.첨부위 상황과는 관련이 없지만 불특정하게 발생하지 않는 일반적인 상황에서의 502 오류라면 nginx + PHP-fpm에서 502 Bad gateway 에러 해결법 총정리를 참고하면 도움이 될 것이다.</summary>
</entry>
<entry>
<title>Generic Type으로 인스턴스 생성</title>
<link href="https://blog.asamaru.net/2016/04/11/create-instance-of-generic-type-in-java/" rel="alternate" type="text/html" title="Generic Type으로 인스턴스 생성" />
<published>2016-04-11T19:40:32+09:00</published>
<updated>2016-04-11T19:40:32+09:00</updated>
<id>https://blog.asamaru.net/2016/04/11/create-instance-of-generic-type-in-java</id>
<content type="html" xml:base="https://blog.asamaru.net/2016/04/11/create-instance-of-generic-type-in-java/">&lt;p&gt;java에서 Generic Type은 유용하고 다양한 곳에서 사용한다. 예를 들어 &lt;a href=&quot;/2015/09/08/cleaner-view-casting-with-generics/&quot;&gt;안드로이드에서 findViewById 사용시 Generics을 이용해 Type Casting 없애기&lt;/a&gt;처럼 사용도 가능하다. 이 글의 주제는 Generic Type으로 해당 class의 인스턴스를 얻는 방법에 대한 것이므로 Generic Type에 대한 기본적인 내용은 다루지 않는다(설명이 길다).&lt;/p&gt;

&lt;p&gt;우선 class로 인스턴스를 생성하는 가장 기본적인 방법부터 보자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IllegalAccessException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;InstantiationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위처럼 class를 가지고 있다면 인스턴스를 생성할 수 있으므로 Generic Type으로 class를 얻을 수 있다면 인스턴스 또한 생성할 수 있다.&lt;/p&gt;

&lt;p&gt;아래는 일반적으로 Generic Type에 맞는 인스턴스를 생성하기 위한 방법에 대한 샘플 소스다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;그런데 위 방법은 원하는 결과를 얻을 수 있으나 Generic Type으로 인스턴스를 얻은 것은 아니다. 생성자에 Generic Type에 해당하는 class를 넘겨주고 이를 기억했다가 인스턴스를 생성하기 때문이다. Generic Type에 의해 class가 정확히 제한되는 장점은 있으나 항상 class를 넘겨줘야 한다.&lt;/p&gt;

&lt;p&gt;위 방법을 개선해서 class를 직접 넘겨주지 않고 인스턴스를 얻는 방법을 알아보자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// noinspection unchecked&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getReclusiveGenericClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetT&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Gen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;GetT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위 소스에서 사용된 &lt;code&gt;ClassUtils&lt;/code&gt;의 소스는 아래와 같다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.GenericArrayType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.ParameterizedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassUtils&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TYPE_NAME_PREFIX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;class &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getReclusiveGenericClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genericClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getGenericClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;genericClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genericClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;targetClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSuperclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getGenericClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getParameterizedTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getParameterizedTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getGenericType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParameterizedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParameterizedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getActualTypeArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParameterizedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParameterizedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRawType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericArrayType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenericArrayType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGenericComponentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;componentClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;componentClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getClassName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TYPE_NAME_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TYPE_NAME_PREFIX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getGenericType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGenericInterfaces&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGenericSuperclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParameterizedType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;언뜻보면 위 방법이 처음 방법에 비해 훨씬 복잡해 보일 수 있다. 하지만 이 방법이 아주 유용하게 사용되는 경우들이 많이 있다.&lt;/p&gt;

&lt;p&gt;그리고 위 코드를 자세히 보면 알겠지만 가장 큰 단점이 있다. Generic Type 이 포함된 클래스를 바로 사용할 수 없고 상속을 한번 이상 받아야 한다는 것이다. 그럼에도 불구하고 위 방법을 응용하면 조금 더 간결한 코딩을 할 수 있다.&lt;/p&gt;

&lt;p&gt;예를들어 아래의 &lt;a href=&quot;https://github.com/naver/volley-extensions/tree/master/volleyer&quot;&gt;volleyer&lt;/a&gt; 사용 예시 소스를 보자.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;volleyer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;header1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;value1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;header2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;value2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withTargetClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;person : &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;위 소스를 보면 &lt;code&gt;.withTargetClass(Person.class)&lt;/code&gt;에서 &lt;code&gt;Person.class&lt;/code&gt;를 넘겨주고 있다. 하지만 이 부분은 &lt;code&gt;.withListener(new Listener&amp;lt;Person&amp;gt;()&lt;/code&gt;에서 보듯이 Listener의 Generic Type에 의해 유추할 수 있다. 따라서 위에 소개한 방법을 응용하면 아래와 같은 코드를 만들어 낼 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;volleyer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;header1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;value1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;header2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;value2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
                        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;person : &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;결론은 &lt;code&gt;.withTargetClass(Person.class)&lt;/code&gt; 한줄 빠진 것이다. 굳이 저 한줄을 빼고자 이렇게 복잡하게 해야하나 생각할 수 있지만 복잡한 로직과 결합되면 이 한줄의 코드를 제거하는 것이 큰 영향을 줄 수 있다. 그리고 위 상황이라면 어짜피 Listener는 상속을 한번 받아서 사용하므로 안내한 방법의 단점이 단점이 되지 않는다.&lt;/p&gt;

&lt;p&gt;안내한 방법을 응용하면 Method에서 Generic Type을 추출하는 방법도 있다. 그외에도 여러가지 응용 방법이 있으나 설명하자니 너무 길어질 것 같아서 줄인다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;첨부 2016.04.12&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;위 클래스를 사용하는 방법도 있지만 이와 관련된 라이브러리도 찾았다. &lt;a href=&quot;https://github.com/jhalterman/typetools&quot;&gt;jhalterman/typetools&lt;/a&gt;라는 것인데 사용법은 해당 사이트에 설명되어 있다. 내부적인 구현은 위에서 소개한 방법과 유사하나 조금 더 다양하게 사용이 가능하고 조금 더 여러가지 상황이 고려되어 있다. 다만, 사이트에 gradle에 추가하는 방법이 안내되어 있지 않다. 그래서 테스트하면서 적용한 방법을 아래에 남긴다. 참고로 android 프로젝트에서 unittest 시에 실행 오류가 발생할 수 있다. 이에 관련해서 오늘 오전에 이슈를 남겼는데 몇시간 지나지 않아 패치를 했다는 답변을 받았다. 하지만 현재 시점(0.4.6)에서는 아직 release되지 않았으므로 혹시 테스트를 하려면 다음의 &lt;code&gt;System.setProperty(&quot;java.version&quot;, &quot;0&quot;);&lt;/code&gt; 코드를 &lt;code&gt;TypeResolver.resolveRawArguments()&lt;/code&gt; 사용 전에 추가해주면 된다. 참고로 오류는 아래와 같다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;Caused by: java.lang.NumberFormatException: For input string: &quot;1.7.0_79&quot;
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:492)
	at java.lang.Integer.valueOf(Integer.java:582)
	at net.jodah.typetools.TypeResolver.&amp;lt;clinit&amp;gt;(TypeResolver.java:54)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;사용법은 gradle을 사용하는 경우 아래의 코드를 build.gradle 파일에 추가하면 사용 가능하다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;repositories {
	mavenCentral()
}

dependencies {
	compile &#39;net.jodah:typetools:0.4.6&#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;
</content>
<summary>java에서 Generic Type은 유용하고 다양한 곳에서 사용한다. 예를 들어 안드로이드에서 findViewById 사용시 Generics을 이용해 Type Casting 없애기처럼 사용도 가능하다. 이 글의 주제는 Generic Type으로 해당 class의 인스턴스를 얻는 방법에 대한 것이므로 Generic Type에 대한 기본적인 내용은 다루지 않는다(설명이 길다).우선 class로 인스턴스를 생성하는 가장 기본적인 방법부터 보자.1234567Class clazz = String.class;try {  String a = (String) clazz.newInstance();} catch (IllegalAccessException e) {} catch (java.lang.InstantiationException e) {  e.printStackTrace();}위처럼 class를 가지고 있다면 인스턴스를 생성할 수 있으므로 Generic Type으로 class를 얻을 수 있다면 인스턴스 또한 생성할 수 있다.아래는 일반적으로 Generic Type에 맞는 인스턴스를 생성하기 위한 방법에 대한 샘플 소스다. 1 2 3 4 5 6 7 8 91011121314151617181920212223242526class Gen&amp;lt;T&amp;gt; {  private Class&amp;lt;T&amp;gt; mClass;  public Gen(Class&amp;lt;T&amp;gt; cls) {    mClass = cls;  }  public T get() {    try {      return mClass.newInstance();    } catch (Exception e) {      e.printStackTrace();      return null;    }  }}class A {  public String name = &amp;quot;A!&amp;quot;;}public static void main(String[] args) {  Gen&amp;lt;A&amp;gt; g = new Gen&amp;lt;&amp;gt;(A.class);  A a = g.get();  System.out.println(a.name);}그런데 위 방법은 원하는 결과를 얻을 수 있으나 Generic Type으로 인스턴스를 얻은 것은 아니다. 생성자에 Generic Type에 해당하는 class를 넘겨주고 이를 기억했다가 인스턴스를 생성하기 때문이다. Generic Type에 의해 class가 정확히 제한되는 장점은 있으나 항상 class를 넘겨줘야 한다.위 방법을 개선해서 class를 직접 넘겨주지 않고 인스턴스를 얻는 방법을 알아보자. 1 2 3 4 5 6 7 8 9101112131415161718192021222324252627abstract class Gen&amp;lt;T&amp;gt; {	public T get() {		try {			// noinspection unchecked			Class&amp;lt;T&amp;gt; mClass = (Class&amp;lt;T&amp;gt;) ClassUtils.getReclusiveGenericClass(getClass(), 0);			if (mClass != null) {				return mClass.newInstance();			}		} catch (Exception e) {			e.printStackTrace();		}		return null;	}}class A {	public String name = &amp;quot;A!&amp;quot;;}class GetT extends Gen&amp;lt;A&amp;gt; {}public static void main(String[] args) {	GetT gt = new GetT();	A a = gt.get();	System.out.println(a.name);}위 소스에서 사용된 ClassUtils의 소스는 아래와 같다. 1 2 3 4 5 6 7 8 9101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687import java.lang.reflect.Array;import java.lang.reflect.GenericArrayType;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;class ClassUtils {	private static final String TYPE_NAME_PREFIX = &amp;quot;class &amp;quot;;	public static Class&amp;lt;?&amp;gt; getReclusiveGenericClass(Class&amp;lt;?&amp;gt; clazz, int index) {		Class&amp;lt;?&amp;gt; targetClass = clazz;		while (targetClass != null) {			Class&amp;lt;?&amp;gt; genericClass = getGenericClass(targetClass, index);			if (genericClass != null) {				return genericClass;			}			targetClass = targetClass.getSuperclass();		}		return null;	}	public static Class&amp;lt;?&amp;gt; getGenericClass(Class&amp;lt;?&amp;gt; clazz, int index) {		Type types[] = getParameterizedTypes(clazz);		if ((types != null) &amp;amp;&amp;amp; (types.length &amp;gt; index)) {			try {				return getClass(types[index]);			} catch (Exception e) {				e.printStackTrace();			}		}		return null;	}	static public Type[] getParameterizedTypes(Class&amp;lt;?&amp;gt; target) {		Type[] types = getGenericType(target);		if (types.length &amp;gt; 0 &amp;amp;&amp;amp; types[0] instanceof ParameterizedType) {			return ((ParameterizedType) types[0]).getActualTypeArguments();		}		return null;	}	static public Class&amp;lt;?&amp;gt; getClass(Type type) throws ClassNotFoundException {		if (type instanceof Class) {			return (Class) type;		} else if (type instanceof ParameterizedType) {			return getClass(((ParameterizedType) type).getRawType());		} else if (type instanceof GenericArrayType) {			Type componentType = ((GenericArrayType) type).getGenericComponentType();			Class&amp;lt;?&amp;gt; componentClass = getClass(componentType);			if (componentClass != null) {				return Array.newInstance(componentClass, 0).getClass();			}		}		String className = getClassName(type);		if (className == null || className.isEmpty()) {			return null;		}		return Class.forName(className);	}	static public String getClassName(Type type) {		if (type == null) {			return &amp;quot;&amp;quot;;		}		String className = type.toString();		if (className.startsWith(TYPE_NAME_PREFIX)) {			className = className.substring(TYPE_NAME_PREFIX.length());		}		return className;	}	static public Type[] getGenericType(Class&amp;lt;?&amp;gt; target) {		if (target == null) {			return new Type[0];		}		Type[] types = target.getGenericInterfaces();		if (types.length &amp;gt; 0) {			return types;		}		Type type = target.getGenericSuperclass();		if (type != null) {			if (type instanceof ParameterizedType) {				return new Type[]{type};			}		}		return new Type[0];	}}언뜻보면 위 방법이 처음 방법에 비해 훨씬 복잡해 보일 수 있다. 하지만 이 방법이 아주 유용하게 사용되는 경우들이 많이 있다.그리고 위 코드를 자세히 보면 알겠지만 가장 큰 단점이 있다. Generic Type 이 포함된 클래스를 바로 사용할 수 없고 상속을 한번 이상 받아야 한다는 것이다. 그럼에도 불구하고 위 방법을 응용하면 조금 더 간결한 코딩을 할 수 있다.예를들어 아래의 volleyer 사용 예시 소스를 보자. 1 2 3 4 5 6 7 8 9101112volleyer(requestQueue).get(url)                      .addHeader(&amp;quot;header1&amp;quot;, &amp;quot;value1&amp;quot;)                    .addHeader(&amp;quot;header2&amp;quot;, &amp;quot;value2&amp;quot;)                    .withTargetClass(Person.class)                    .withListener(new Listener&amp;lt;Person&amp;gt;() {                        @Override                        public void onResponse(Person person) {                            Log.d(TAG, &amp;quot;person : &amp;quot; + person);                                }                    })                    .execute();위 소스를 보면 .withTargetClass(Person.class)에서 Person.class를 넘겨주고 있다. 하지만 이 부분은 .withListener(new Listener&amp;lt;Person&amp;gt;()에서 보듯이 Listener의 Generic Type에 의해 유추할 수 있다. 따라서 위에 소개한 방법을 응용하면 아래와 같은 코드를 만들어 낼 수 있다. 1 2 3 4 5 6 7 8 91011volleyer(requestQueue).get(url)                      .addHeader(&amp;quot;header1&amp;quot;, &amp;quot;value1&amp;quot;)                    .addHeader(&amp;quot;header2&amp;quot;, &amp;quot;value2&amp;quot;)                    .withListener(new Listener&amp;lt;Person&amp;gt;() {                        @Override                        public void onResponse(Person person) {                            Log.d(TAG, &amp;quot;person : &amp;quot; + person);                                }                    })                    .execute();결론은 .withTargetClass(Person.class) 한줄 빠진 것이다. 굳이 저 한줄을 빼고자 이렇게 복잡하게 해야하나 생각할 수 있지만 복잡한 로직과 결합되면 이 한줄의 코드를 제거하는 것이 큰 영향을 줄 수 있다. 그리고 위 상황이라면 어짜피 Listener는 상속을 한번 받아서 사용하므로 안내한 방법의 단점이 단점이 되지 않는다.안내한 방법을 응용하면 Method에서 Generic Type을 추출하는 방법도 있다. 그외에도 여러가지 응용 방법이 있으나 설명하자니 너무 길어질 것 같아서 줄인다.첨부 2016.04.12위 클래스를 사용하는 방법도 있지만 이와 관련된 라이브러리도 찾았다. jhalterman/typetools라는 것인데 사용법은 해당 사이트에 설명되어 있다. 내부적인 구현은 위에서 소개한 방법과 유사하나 조금 더 다양하게 사용이 가능하고 조금 더 여러가지 상황이 고려되어 있다. 다만, 사이트에 gradle에 추가하는 방법이 안내되어 있지 않다. 그래서 테스트하면서 적용한 방법을 아래에 남긴다. 참고로 android 프로젝트에서 unittest 시에 실행 오류가 발생할 수 있다. 이에 관련해서 오늘 오전에 이슈를 남겼는데 몇시간 지나지 않아 패치를 했다는 답변을 받았다. 하지만 현재 시점(0.4.6)에서는 아직 release되지 않았으므로 혹시 테스트를 하려면 다음의 System.setProperty(&quot;java.version&quot;, &quot;0&quot;); 코드를 TypeResolver.resolveRawArguments() 사용 전에 추가해주면 된다. 참고로 오류는 아래와 같다.Caused by: java.lang.NumberFormatException: For input string: &quot;1.7.0_79&quot;	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)	at java.lang.Integer.parseInt(Integer.java:492)	at java.lang.Integer.valueOf(Integer.java:582)	at net.jodah.typetools.TypeResolver.&amp;lt;clinit&amp;gt;(TypeResolver.java:54)사용법은 gradle을 사용하는 경우 아래의 코드를 build.gradle 파일에 추가하면 사용 가능하다.repositories {	mavenCentral()}dependencies {	compile &#39;net.jodah:typetools:0.4.6&#39;}</summary>
</entry>
<entry>
<title>com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: Expected an int but was 오류</title>
<link href="https://blog.asamaru.net/2016/04/11/com-google-gson-jsonsyntaxexception-java-lang-numberformatexception-expected-an-int-but-was-2744647680/" rel="alternate" type="text/html" title="com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: Expected an int but was 오류" />
<published>2016-04-11T12:54:28+09:00</published>
<updated>2016-04-11T12:54:28+09:00</updated>
<id>https://blog.asamaru.net/2016/04/11/com-google-gson-jsonsyntaxexception-java-lang-numberformatexception-expected-an-int-but-was-2744647680</id>
<content type="html" xml:base="https://blog.asamaru.net/2016/04/11/com-google-gson-jsonsyntaxexception-java-lang-numberformatexception-expected-an-int-but-was-2744647680/">&lt;p&gt;&lt;a href=&quot;https://github.com/google/gson&quot;&gt;GSON&lt;/a&gt;을 이용해서 JSON 데이터를 Parse하려고 할 때 아래와 같이 &lt;code&gt;NumberFormatException&lt;/code&gt;이 발생할 수 있다. 이는 대부분의 경우 int의 최대값을 넘어선 값을 int에 대입하려고 할 때 발생한다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;com.android.volley.ParseError: com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: Expected an int but was 4291611852 at line 1 column 143 path $.items[0].items[0].borderColor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;나의 경우엔 안드로이드로 color 값을 넘겨주려고 할 때 위 오류가 발생했다. 내가 지정한 값은 &lt;code&gt;0xffcccccc&lt;/code&gt;인데 int로 4291611852이다. 그런데 안드로이드에서 int의 최대값은 2147483647이므로 범위를 벋어난다. 그런데 안드로이드에서는 &lt;code&gt;0xffcccccc&lt;/code&gt;와 같은 형식으로 color 값을 사용하지만 문제가 없다. 이유는 아래와 같이 &lt;code&gt;0xffcccccc&lt;/code&gt;값을 int 범위 내로 변환하면 -3355444이 된다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0xffcccccc &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xffcccccc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;결론은 이런 값을 사용해야 할 경우는 GSON 객체에서 int 대신 long을 사용하고 사용하는 곳에서 int로 type casting하면 된다.&lt;/p&gt;
</content>
<summary>GSON을 이용해서 JSON 데이터를 Parse하려고 할 때 아래와 같이 NumberFormatException이 발생할 수 있다. 이는 대부분의 경우 int의 최대값을 넘어선 값을 int에 대입하려고 할 때 발생한다.com.android.volley.ParseError: com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: Expected an int but was 4291611852 at line 1 column 143 path $.items[0].items[0].borderColor나의 경우엔 안드로이드로 color 값을 넘겨주려고 할 때 위 오류가 발생했다. 내가 지정한 값은 0xffcccccc인데 int로 4291611852이다. 그런데 안드로이드에서 int의 최대값은 2147483647이므로 범위를 벋어난다. 그런데 안드로이드에서는 0xffcccccc와 같은 형식으로 color 값을 사용하지만 문제가 없다. 이유는 아래와 같이 0xffcccccc값을 int 범위 내로 변환하면 -3355444이 된다.1System.out.println(&amp;quot;0xffcccccc &amp;quot; + (int)0xffcccccc);결론은 이런 값을 사용해야 할 경우는 GSON 객체에서 int 대신 long을 사용하고 사용하는 곳에서 int로 type casting하면 된다.</summary>
</entry>
<entry>
<title>SSH 무작위 로그인 시도 막기(With Fail2Ban on CentOS 6/7 + selinux)</title>
<link href="https://blog.asamaru.net/2016/04/07/how-to-protect-ssh-with-fail2ban-on-centos-6-7/" rel="alternate" type="text/html" title="SSH 무작위 로그인 시도 막기(With Fail2Ban on CentOS 6/7 + selinux)" />
<published>2016-04-07T21:03:32+09:00</published>
<updated>2016-04-07T21:03:32+09:00</updated>
<id>https://blog.asamaru.net/2016/04/07/how-to-protect-ssh-with-fail2ban-on-centos-6-7</id>
<content type="html" xml:base="https://blog.asamaru.net/2016/04/07/how-to-protect-ssh-with-fail2ban-on-centos-6-7/">&lt;p&gt;linux 서버를 공개망에서 사용하면서 방화벽을 사용하지 않는 경우 ssh 로그인을 지속적으로 시도하는 로그를 볼 수 있다. 대부분 외국 IP 대역에서 지속적으로 ssh 로그인을 시도하는데 무작위 비밀번호를 대입하는 것이다. 당연히 방화벽을 설정하는 것이 당연하나 특수한 목적으로 인해 접속 IP 대역을 제한할 수 없는 경우도 있을 수 있다. 이런 경우에 보안을 조금이나마 강화하기 위해 사용할 수 있는 것이 &lt;a href=&quot;http://www.fail2ban.org/&quot;&gt;fail2ban&lt;/a&gt; 이다.&lt;/p&gt;

&lt;p&gt;우선 실제로 해당 서버에 어떤 IP들이 ssh 로그인을 시도했는지 아래의 명령으로 확인 할 수 있다(이하는 CentOS 7 기준이다).&lt;/p&gt;

&lt;p&gt;아래는 로그인 시도 IP를 확인하는 방법이다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls /var/log/secure &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; xargs grep -E &lt;span class=&quot;s2&quot;&gt;&amp;quot;[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+&amp;quot;&lt;/span&gt; -o &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;공개망에 연결된 서버라면 생각보다 많은 IP가 나와 놀랄수도 있다. IP들 중 자신이 아는 IP를 제외하면 대부분이 위에 언급한 공격일 확률이 높다.&lt;/p&gt;

&lt;p&gt;다른 방법으로 아래와 같이 최근 로그인 실패 기록을 확인하는 것도 가능하다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;last -f /var/log/btmp &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; more
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://www.thegeekstuff.com/2011/08/linux-var-log-files/&quot;&gt;20 Linux Log Files that are Located under /var/log Directory&lt;/a&gt;에 보면 &lt;code&gt;/var/log/btmp&lt;/code&gt;에 대한 설명을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;상황을 확인 했으니 이제 본격적으로 &lt;a href=&quot;http://www.fail2ban.org/&quot;&gt;fail2ban&lt;/a&gt;을 사용해 보자.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;fail2ban-&quot;&gt;fail2ban 설치&lt;/h3&gt;

&lt;p&gt;fail2ban은 지정된 시간 내에 지정된 횟수 이상으로 ssh 로그인을 실패하면 해당 IP에서의 접근을 지정된 시간만큼 차단하는 역할을 한다.&lt;/p&gt;

&lt;p&gt;아래의 설치 과정은 CentOS 7을 기준으로 한다. 이는 iptables 대신 firewalld가 사용되며 systemd를 사용하는 것을 기준으로 한다는 뜻이다. CentOS 6이라면 아래의 참고자료를 살펴보기 바란다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# epel-release 추가&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm

&lt;span class=&quot;c&quot;&gt;# fail2ban 설치&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yum install -y fail2ban

&lt;span class=&quot;c&quot;&gt;# fail2ban 기본 설정&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ hostname&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/bin/hostname&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[DEFAULT]&amp;quot;&lt;/span&gt; &amp;gt; /etc/fail2ban/jail.local
&lt;span class=&quot;c&quot;&gt;# 1시간 동안 접근 제한&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bantime = 3600&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fail2ban/jail.local
&lt;span class=&quot;c&quot;&gt;# 결과 수신 메일 지정&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;destemail = ~~~@~~~.com&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fail2ban/jail.local
&lt;span class=&quot;c&quot;&gt;# 결과 발신 메일 지정&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sender = root@$hostname&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fail2ban/jail.local
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fail2ban/jail.local
&lt;span class=&quot;c&quot;&gt;# ssh 접근 검사 활성화&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[sshd]&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fail2ban/jail.local
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;enabled = true&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fail2ban/jail.local
&lt;span class=&quot;c&quot;&gt;# nginx-http-auth 접근 검사 활성화 : 필요시에만 사용&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fail2ban/jail.local
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[nginx-http-auth]&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fail2ban/jail.local
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;enabled = true&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /etc/fail2ban/jail.local
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;fail2ban 서비스 활성&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;fail2ban.service
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;fail2ban 서비스 시작&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;systemctl start fail2ban.service
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;h3 id=&quot;selinux--fail2ban--&quot;&gt;selinux 사용시 fail2ban 관련 설정&lt;/h3&gt;

&lt;p&gt;이하는 selinux 사용시에만 적용하면 된다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;checkmodule -M -m -o fail2ban-syslog.mod fail2ban-syslog.te
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;semodule_package -o fail2ban-syslog.pp -m fail2ban-syslog.mod
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;semodule -r fail2ban-syslog
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;semodule -i fail2ban-syslog.pp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm -f fail2ban-syslog.mod
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm -f fail2ban-syslog.pp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;semodule -l&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;grep fail2ban-syslog

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;checkmodule -M -m -o logrotate-fail2ban.mod logrotate-fail2ban.te
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;semodule_package -o logrotate-fail2ban.pp -m logrotate-fail2ban.mod
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;semodule -r logrotate-fail2ban
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;semodule -i logrotate-fail2ban.pp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm -f logrotate-fail2ban.mod
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rm -f logrotate-fail2ban.pp
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;semodule -l&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;grep logrotate-fail2ban
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;아래의 2개의 파일은 위 스크립트 실행에 필요한 파일이므로 해당 파일명으로 저장해서 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fail2ban-syslog.te&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;module fail2ban-syslog 1.0;

require {
type syslogd_var_run_t;
type fail2ban_t;
class dir read;
class file read;
class file open;
class file getattr;
}

#============= fail2ban_t ==============
allow fail2ban_t syslogd_var_run_t:dir read;
allow fail2ban_t syslogd_var_run_t:file read;
allow fail2ban_t syslogd_var_run_t:file open;
allow fail2ban_t syslogd_var_run_t:file getattr;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;logrotate-fail2ban.te&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;nmcode&quot;&gt;module logrotate-fail2ban 1.7;

require {
type fail2ban_client_exec_t;
type logrotate_t;
type init_var_lib_t;
class file { open read execute getattr write create execute_no_trans setattr unlink ioctl rename};
}

#============= logrotate_t ==============
allow logrotate_t fail2ban_client_exec_t:file execute_no_trans;
allow logrotate_t fail2ban_client_exec_t:file { open read execute ioctl };
allow logrotate_t init_var_lib_t:file { open read getattr write create unlink setattr rename };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;p&gt;설치가 다 되었다면 아래의 명령 실행시 다음과 비슷한 결과를 볼 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;firewall-cmd --direct --get-all-rules

ipv4 filter INPUT &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; -p tcp -m multiport --dports ssh -m &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; --match-set fail2ban-sshd src -j REJECT --reject-with icmp-port-unreachable
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;p&gt;그리고 아래의 명령으로 적용 상황을 확인할 수 있다.&lt;/p&gt;

&lt;figure class=&#39;code&#39;&gt;&lt;div class=&quot;highlight notranslate&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# fail2ban 상태 확인&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;fail2ban-client status sshd

Status &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; the jail: sshd
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;- Filter
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;- Currently failed:	1
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;- Total failed:	153
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;  &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- File list:	/var/log/secure
&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- Actions
   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;- Currently banned:	0
   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;- Total banned:	2
   &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;- Banned IP list:

&lt;span class=&quot;c&quot;&gt;# ipset에 설정(차단)된 내용 확인&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ipset --list

Name: fail2ban-sshd
Type: &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;:ip
Revision: 1
Header: family inet hashsize &lt;span class=&quot;m&quot;&gt;1024&lt;/span&gt; maxelem &lt;span class=&quot;m&quot;&gt;65536&lt;/span&gt; timeout 3600
Size in memory: 16656
References: 1
Members:

&lt;span class=&quot;c&quot;&gt;# fail2ban 로그 확인&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat /var/log/fail2ban.log

&lt;span class=&quot;c&quot;&gt;# 차단 IP 목록&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;($(NF-1) = /Ban/){print $NF}&amp;#39;&lt;/span&gt; /var/log/fail2ban.log &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; uniq -c &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; sort -n
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section&quot;&gt;참고자료&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.fail2ban.org/wiki/index.php/Commands&quot;&gt;fail2ban-client commands&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://krash.be/node/27&quot;&gt;selinux module for fail2ban on Centos/RHEL 7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-centos-7&quot;&gt;How To Protect SSH With Fail2Ban on CentOS 7&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-protect-ssh-with-fail2ban-on-centos-6&quot;&gt;How To Protect SSH with fail2ban on CentOS 6&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.servermom.org/install-fail2ban-centos/1809/&quot;&gt;HOW TO INSTALL FAIL2BAN ON CENTOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fedoraproject.org/wiki/Fail2ban_with_FirewallD&quot;&gt;Fail2ban with FirewallD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.the-art-of-web.com/system/fail2ban-log/&quot;&gt;System: Monitoring the fail2ban log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
<summary>linux 서버를 공개망에서 사용하면서 방화벽을 사용하지 않는 경우 ssh 로그인을 지속적으로 시도하는 로그를 볼 수 있다. 대부분 외국 IP 대역에서 지속적으로 ssh 로그인을 시도하는데 무작위 비밀번호를 대입하는 것이다. 당연히 방화벽을 설정하는 것이 당연하나 특수한 목적으로 인해 접속 IP 대역을 제한할 수 없는 경우도 있을 수 있다. 이런 경우에 보안을 조금이나마 강화하기 위해 사용할 수 있는 것이 fail2ban 이다.우선 실제로 해당 서버에 어떤 IP들이 ssh 로그인을 시도했는지 아래의 명령으로 확인 할 수 있다(이하는 CentOS 7 기준이다).아래는 로그인 시도 IP를 확인하는 방법이다.1$ ls /var/log/secure | xargs grep -E &amp;quot;[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+&amp;quot; -o | sort | uniq공개망에 연결된 서버라면 생각보다 많은 IP가 나와 놀랄수도 있다. IP들 중 자신이 아는 IP를 제외하면 대부분이 위에 언급한 공격일 확률이 높다.다른 방법으로 아래와 같이 최근 로그인 실패 기록을 확인하는 것도 가능하다.1$ last -f /var/log/btmp | more20 Linux Log Files that are Located under /var/log Directory에 보면 /var/log/btmp에 대한 설명을 확인 할 수 있다.상황을 확인 했으니 이제 본격적으로 fail2ban을 사용해 보자.fail2ban 설치fail2ban은 지정된 시간 내에 지정된 횟수 이상으로 ssh 로그인을 실패하면 해당 IP에서의 접근을 지정된 시간만큼 차단하는 역할을 한다.아래의 설치 과정은 CentOS 7을 기준으로 한다. 이는 iptables 대신 firewalld가 사용되며 systemd를 사용하는 것을 기준으로 한다는 뜻이다. CentOS 6이라면 아래의 참고자료를 살펴보기 바란다. 1 2 3 4 5 6 7 8 91011121314151617181920212223# epel-release 추가$ rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm# fail2ban 설치$ yum install -y fail2ban# fail2ban 기본 설정$ hostname=`/bin/hostname`$ echo &amp;quot;[DEFAULT]&amp;quot; &amp;gt; /etc/fail2ban/jail.local# 1시간 동안 접근 제한$ echo &amp;quot;bantime = 3600&amp;quot; &amp;gt;&amp;gt; /etc/fail2ban/jail.local# 결과 수신 메일 지정$ echo &amp;quot;destemail = ~~~@~~~.com&amp;quot; &amp;gt;&amp;gt; /etc/fail2ban/jail.local# 결과 발신 메일 지정$ echo &amp;quot;sender = root@$hostname&amp;quot; &amp;gt;&amp;gt; /etc/fail2ban/jail.local$ echo &amp;quot;&amp;quot; &amp;gt;&amp;gt; /etc/fail2ban/jail.local# ssh 접근 검사 활성화$ echo &amp;quot;[sshd]&amp;quot; &amp;gt;&amp;gt; /etc/fail2ban/jail.local$ echo &amp;quot;enabled = true&amp;quot; &amp;gt;&amp;gt; /etc/fail2ban/jail.local# nginx-http-auth 접근 검사 활성화 : 필요시에만 사용$ echo &amp;quot;&amp;quot; &amp;gt;&amp;gt; /etc/fail2ban/jail.local$ echo &amp;quot;[nginx-http-auth]&amp;quot; &amp;gt;&amp;gt; /etc/fail2ban/jail.local$ echo &amp;quot;enabled = true&amp;quot; &amp;gt;&amp;gt; /etc/fail2ban/jail.localfail2ban 서비스 활성1$ systemctl enable fail2ban.servicefail2ban 서비스 시작1$ systemctl start fail2ban.serviceselinux 사용시 fail2ban 관련 설정이하는 selinux 사용시에만 적용하면 된다. 1 2 3 4 5 6 7 8 9101112131415$ checkmodule -M -m -o fail2ban-syslog.mod fail2ban-syslog.te$ semodule_package -o fail2ban-syslog.pp -m fail2ban-syslog.mod$ semodule -r fail2ban-syslog$ semodule -i fail2ban-syslog.pp$ rm -f fail2ban-syslog.mod$ rm -f fail2ban-syslog.pp$ semodule -l|grep fail2ban-syslog$ checkmodule -M -m -o logrotate-fail2ban.mod logrotate-fail2ban.te$ semodule_package -o logrotate-fail2ban.pp -m logrotate-fail2ban.mod$ semodule -r logrotate-fail2ban$ semodule -i logrotate-fail2ban.pp$ rm -f logrotate-fail2ban.mod$ rm -f logrotate-fail2ban.pp$ semodule -l|grep logrotate-fail2ban아래의 2개의 파일은 위 스크립트 실행에 필요한 파일이므로 해당 파일명으로 저장해서 사용하면 된다.fail2ban-syslog.temodule fail2ban-syslog 1.0;require {type syslogd_var_run_t;type fail2ban_t;class dir read;class file read;class file open;class file getattr;}#============= fail2ban_t ==============allow fail2ban_t syslogd_var_run_t:dir read;allow fail2ban_t syslogd_var_run_t:file read;allow fail2ban_t syslogd_var_run_t:file open;allow fail2ban_t syslogd_var_run_t:file getattr;logrotate-fail2ban.temodule logrotate-fail2ban 1.7;require {type fail2ban_client_exec_t;type logrotate_t;type init_var_lib_t;class file { open read execute getattr write create execute_no_trans setattr unlink ioctl rename};}#============= logrotate_t ==============allow logrotate_t fail2ban_client_exec_t:file execute_no_trans;allow logrotate_t fail2ban_client_exec_t:file { open read execute ioctl };allow logrotate_t init_var_lib_t:file { open read getattr write create unlink setattr rename };설치가 다 되었다면 아래의 명령 실행시 다음과 비슷한 결과를 볼 수 있다.123$ firewall-cmd --direct --get-all-rulesipv4 filter INPUT 0 -p tcp -m multiport --dports ssh -m set --match-set fail2ban-sshd src -j REJECT --reject-with icmp-port-unreachable그리고 아래의 명령으로 적용 상황을 확인할 수 있다. 1 2 3 4 5 6 7 8 91011121314151617181920212223242526272829# fail2ban 상태 확인$ fail2ban-client status sshdStatus for the jail: sshd|- Filter|  |- Currently failed:	1|  |- Total failed:	153|  `- File list:	/var/log/secure`- Actions   |- Currently banned:	0   |- Total banned:	2   `- Banned IP list:# ipset에 설정(차단)된 내용 확인$ ipset --listName: fail2ban-sshdType: hash:ipRevision: 1Header: family inet hashsize 1024 maxelem 65536 timeout 3600Size in memory: 16656References: 1Members:# fail2ban 로그 확인$ cat /var/log/fail2ban.log# 차단 IP 목록$ awk &amp;#39;($(NF-1) = /Ban/){print $NF}&amp;#39; /var/log/fail2ban.log | sort | uniq -c | sort -n참고자료  fail2ban-client commands  selinux module for fail2ban on Centos/RHEL 7  How To Protect SSH With Fail2Ban on CentOS 7  How To Protect SSH with fail2ban on CentOS 6  HOW TO INSTALL FAIL2BAN ON CENTOS  Fail2ban with FirewallD  System: Monitoring the fail2ban log</summary>
</entry>
</feed>
