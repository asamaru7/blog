<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

<title>이 세상에 하나는 남기고 가자</title><id>https://blog.asamaru.net/</id><updated>2018-05-18T17:06:14+09:00</updated><subtitle>세상에 필요한 소스코드 한줄 남기고 가자</subtitle><link href="https://blog.asamaru.net/" rel="alternate" type="text/html" /><link href="https://blog.asamaru.net/atom.xml" rel="self" type="application/atom+xml" /><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author>
<entry><id>https://blog.asamaru.net/2018/05/18/custom-domain-in-github-page-support-https/</id><title type="html">Github Pages Custom Domain Https 지원</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2018/05/18/custom-domain-in-github-page-support-https/"/><published>2018-05-18T16:20:06+09:00</published><updated>2018-05-18T16:20:06+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ssl" label="ssl" /><category term="tip" label="tip" /><summary><![CDATA[드디어 Github Pages에서 Custom Domain을 사용할 때에도 HTTPS를 사용할 수 있다. 정확한 공지는 Custom domains on GitHub Pages gain support for HTTPS를 참고. 현재 이 블로그도 Github Pages를 사용하고 있다. "[블로그를 리뉴얼 하다.]"에서 언급했던 것 처럼 Octopress에서 Jekyll을 거쳐 직접 개발한 정적 파일 기반 블로그를 사용하고 있으니 무료에 트래픽도 넉넉한 Github Pages 만한 것도 없다(GitHub Pages에 대한 제약사항은 What is GitHub Pages?에서 확인할 수 있다). 게다가 git에 의한 버전관리까지. 그런데 사실 이 블로그도 얼마전까지는 Firebase 호스팅 을 통해 서비스하고 있었다. Firebase는 무료의 경우 개설 프로젝트의 개수에 제한이 있고, 호스팅의 경우도 용량과 트래픽에 제한이 있지만 HTTPS와 전세계에 퍼져있는 CDN을 무료로 사용할 수 있기 때문이다. Firebase 호스팅을 사용하기 전에는 Github Pages + Cloudflare를 통해서 무료 HTTPS + CDN을 사용했다(Github Pages에서 HTTPS 를 지원하지 않았기 때문에 Cloudflare의 무료 SSL을 사용했음). 그런데 "클라우드플레어(Cloudflare)가 한국에서 느린 이유"에 나오는 것처럼 속도가 너무 느려 Firebase 호스팅으로 옮겼다. 단, 개인적으로 Firebase 호스팅은 배포가 좀 불편해서 불만이 있었다(편리한 CLI를 제공하지만 그냥 웬지 불편했다). 그렇게 지내던 중 어제 Github Pages에서 HTTPS 지원을 시작했다는 소식을 접하고 급하게 블로그와 기타 웹페이지들을 다시 이전했다. 결과는 대만족. 속도도 빠르고 HTTPS 설정도 아주 간단하다. 이전하던 웹페이지들 중 하나는 아직 Firebase에 있는데 그 이유는 그 웹페이지 도메인만 SSL 생성이 완료되지 않는 상황에 부딪쳤기 때문이다. 이미 서비스 중인 웹페이지라 SSL 오류가 나는 상태로 계속 둘 순 없었다. Github 고객센터에 안되는 영어로 문의를 남겼으나 아직 해결하진 못했다. 빠르게 답변을 받았으나 내가 DNS 설정을 미리 바꿔두지 않는한 자신들이 확인할 수가 없다는 것이었다. 그래서 현재는 도메인을 아예 이전하는 방법을 고민 중이다(그 정도로 Firebase에서 Github로 옮기고 싶다). "개발자스럽다" 님의 "Github Pages 개인 도메인도 무료로 HTTPS 지원 시작!"에 보면 이 소식과 함께 적용 방법을 잘 설명해 두셨다. 한가지 보강하자면 "A 레코드의 IP를 변경"하는 방법을 설명하고 있지만 CNAME을 설정(USERNAME.github.io)하는 것이 향후 IP 변경에 유연하므로 더 좋다. 요즘엔 대부분의 DNS 서비스에서 CNAME을 지원한다.]]></summary><content type="html"><![CDATA[<p><strong>드디어 <a href="https://pages.github.com/">Github Pages</a>에서 Custom Domain을 사용할 때에도 HTTPS를 사용할 수 있다.</strong></p>
<p>정확한 공지는 <a href="https://blog.github.com/2018-05-01-github-pages-custom-domains-https/">Custom domains on GitHub Pages gain support for HTTPS</a>를 참고.</p>
<hr />
<p>현재 이 블로그도 <a href="https://pages.github.com/">Github Pages</a>를 사용하고 있다.</p>
<p>&quot;[블로그를 리뉴얼 하다.]&quot;에서 언급했던 것 처럼 Octopress에서 Jekyll을 거쳐 직접 개발한 정적 파일 기반 블로그를 사용하고 있으니 무료에 트래픽도 넉넉한 Github Pages 만한 것도 없다(GitHub Pages에 대한 제약사항은 <a href="https://help.github.com/articles/what-is-github-pages/">What is GitHub Pages?</a>에서 확인할 수 있다).</p>
<p>게다가 git에 의한 버전관리까지.</p>
<p>그런데 사실 이 블로그도 얼마전까지는 <a href="https://firebase.google.com/docs/hosting/">Firebase 호스팅</a> 을 통해 서비스하고 있었다. Firebase는 무료의 경우 개설 프로젝트의 개수에 제한이 있고, 호스팅의 경우도 용량과 트래픽에 제한이 있지만 HTTPS와 전세계에 퍼져있는 CDN을 무료로 사용할 수 있기 때문이다.</p>
<p>Firebase 호스팅을 사용하기 전에는 Github Pages + <a href="https://www.cloudflare.com/">Cloudflare</a>를 통해서 무료 HTTPS + CDN을 사용했다(Github Pages에서 HTTPS 를 지원하지 않았기 때문에 Cloudflare의 무료 SSL을 사용했음).</p>
<p>그런데 &quot;<a href="http://ryush00.tistory.com/448">클라우드플레어(Cloudflare)가 한국에서 느린 이유</a>&quot;에 나오는 것처럼 속도가 너무 느려 Firebase 호스팅으로 옮겼다. 단, 개인적으로 Firebase 호스팅은 배포가 좀 불편해서 불만이 있었다(편리한 CLI를 제공하지만 그냥 웬지 불편했다).</p>
<p>그렇게 지내던 중 어제 Github Pages에서 HTTPS 지원을 시작했다는 소식을 접하고 급하게 블로그와 기타 웹페이지들을 다시 이전했다.</p>
<p><strong>결과는 대만족. 속도도 빠르고 HTTPS 설정도 아주 간단하다.</strong></p>
<p>이전하던 웹페이지들 중 하나는 아직 Firebase에 있는데 그 이유는 그 웹페이지 도메인만 SSL 생성이 완료되지 않는 상황에 부딪쳤기 때문이다. 이미 서비스 중인 웹페이지라 SSL 오류가 나는 상태로 계속 둘 순 없었다.</p>
<p>Github 고객센터에 안되는 영어로 문의를 남겼으나 아직 해결하진 못했다. 빠르게 답변을 받았으나 내가 DNS 설정을 미리 바꿔두지 않는한 자신들이 확인할 수가 없다는 것이었다. 그래서 현재는 도메인을 아예 이전하는 방법을 고민 중이다(그 정도로 Firebase에서 Github로 옮기고 싶다).</p>
<hr />
<p>&quot;<a href="https://blog.gaerae.com/">개발자스럽다</a>&quot; 님의 &quot;<a href="https://blog.gaerae.com/2018/05/github-pages-custom-domains-https.html">Github Pages 개인 도메인도 무료로 HTTPS 지원 시작!</a>&quot;에 보면 이 소식과 함께 적용 방법을 잘 설명해 두셨다.</p>
<p>한가지 보강하자면 &quot;A 레코드의 IP를 변경&quot;하는 방법을 설명하고 있지만 CNAME을 설정(USERNAME.github.io)하는 것이 향후 IP 변경에 유연하므로 더 좋다. 요즘엔 대부분의 DNS 서비스에서 CNAME을 지원한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2018/02/14/install-php-7-2-on-centos-with-remi-rpm-repository/</id><title type="html">PHP 7.2 설치(업그레이드) [CentOS 7 / remi RPM repository]</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2018/02/14/install-php-7-2-on-centos-with-remi-rpm-repository/"/><published>2018-02-14T10:47:57+09:00</published><updated>2018-02-14T10:47:57+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="linux" label="linux" /><summary><![CDATA[PHP를 CentOS에 설치하는 방법은 소스를 컴파일하거나 yum을 사용하는 방법이 주로 사용된다. 나의 경우는 예전엔 컴파일 방법을 주로 사용했었으나 RPM 기반으로 설치하는 것이 더 편리하기도 하고 성능 최적화에 유리하다는 소식을 접하고 yum을 주로 사용하고 있다(yum을 사용해서 PHP를 설치할 경우 CentOS에 포함된 PHP의 버전은 매우 낮기 때문에 외부 RPM repository를 사용하는 경우가 많다). PHP 최신 버전을 제공하는 외부 repository 중 유명한 곳은 webtatic과 remi 등이 있다. 이중에서 webtatic을 주로 사용하다가 이번에 PHP 7.2로 버전업하는 과정에서 remi로 갈아탔다. 내가 remi를 선택한 이유는 다음과 같다. webtatic이 mcrypt를 지원하지 않는다(PHP 7.2에서 보안 문제로 제거). webtatic에서는 openssl 또는 libsodium 사용을 권장 굳이 필요하면 phpseclib/mcrypt_compat을 사용 (packagist에서 mcrypt로 검색하면 다른 프로젝트들도 있음) 참고 : PHP 7.2.1 on CentOS/RHEL 7.4 via Yum webtatic 보다 다양한 extension을 제공 운영중인 서비스로 인해 gearman, oci8 등이 추가로 필요했다. 빠른 업데이트 webtatic의 경우 최신 버전에 대한 업데이트가 조금 늦는 경우가 많다. 위에 나열한 이유는 크게 중요한 문제들은 아니며 대안이 존재하지만 간편한 사용을 위해 갈아탔다. 사실 굳이 다른 repository를 알아봤던 이유는 mcrypt 때문이다. 보안상의 문제로 사용이 권장되지 않는 모듈이지만 PG(결제대행)사에서 제공하는 모듈이 mcrypt를 필수로 요구하고 있는 상황이라 사용하지 않을 수 없었다. 사설이 길었는데 이제 본격적으로 설치에 대해 알아보자(yum을 이용한 설치는 무척 간단하다). 설치환경 CentOS 7.2 Extra Packages for Enterprise Linux (EPEL) repository를 사용하고 있어야 한다. 설치과정 1. 우선 remi repository를 yum 에 추가 한다. $ wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm $ rpm -Uvh epel-release-latest-7.noarch.rpm $ wget http://rpms.remirepo.net/enterprise/remi-release-7.rpm $ rpm -Uvh remi-release-7.rpm $ yum install -y yum-utils $ yum-config-manager --enable remi-php72 repository 주소는 OS/Version 별로 차이가 있다. 다른 OS를 사용하고 있거나 자세한 내용을 확인하고 싶다면 Remi's RPM repository를 참고하자. 2. 기존 설치된 PHP를 제거하고 7.2 버전을 설치 $ yum remove -y `yum list installed | cut -d " " -f 1 | grep php` 위 명령을 실행하기 전에 yum list installed | cut -d " " -f 1 | grep php 만 먼저 실행해서 삭제될 패키지를 확인하는 것이 좋다(잘못된 패키지가 삭제되지 않도록). $ yum install -y php-common php-fpm php-cli \ php-process \ php-opcache php-pecl-apcu \ php-mysqlnd php-pdo \ php-gd \ php-mbstring php-xml \ php-pecl-zip \ php-bcmath "php-common" 외의 패키지는 자신의 상황에 맞게 조정해서 설치한다. "php-common" 대신 "php72w-common"과 같이 PHP 버전을 지정한 패키지를 사용해도 된다. 항상 최신 버전을 사용할 것이 아니라 특정 버전대를 사용해야 한다면 이 방법을 사용하자. 향후 PHP가 버전업되면 운영중인 프로그램과의 호환에 문제가 발생할 수 있으므로 이 방법이 더 안전하다. 단, 메이저 버전업시 기존 패키지를 지우고 설치하는 방법을 사용해야 하므로 불편하다. 기존에 yum으로 설치된 PHP가 존재하고 해당 패키지의 이름이 "php-"로 시작한다면(위에 설명한 것과 같이 "php72w-"로 시작하는 패키지가 설치된 경우가 아닌) 기존 패키지를 지우고 재설치하는 것보다 아래처럼 그냥 update 받는 방법도 있다. $ yum update php-* 나의 경우는 기존에 webtatic을 사용했기 때문에 패키지들의 이름이 "php70w-"로 시작해서 기존 패키지를 지우고 새로 설치했다. 대신, 이번에 "php-"로 시작하는 패키지들을 설치했기 때문에 향후 버전업 시에는 update 방식을 사용할 수 있다. 3. 설치된 php 버전 확인 $ php -v PHP 7.2.2 (cli) (built: Jan 30 2018 13:44:49) ( NTS ) Copyright (c) 1997-2018 The PHP Group Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies with Zend OPcache v7.2.2, Copyright (c) 1999-2018, by Zend Technologies 이것으로 PHP 7.2 버전의 설치가 끝났다. yum을 이용한 PHP의 설치는 앞서 보는 것과 같이 아주 간단하다. "php-" 패키지를 설치할지 "php72w-" 패키지를 설치할지는 자신의 관리 성향에 맞추어 잘 선택하길 바란다(생각보다 중요한 문제다).]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/">PHP</a>를 <a href="https://www.centos.org/">CentOS</a>에 설치하는 방법은 소스를 컴파일하거나 <a href="https://ko.wikipedia.org/wiki/Yum">yum</a>을 사용하는 방법이 주로 사용된다.</p>
<p>나의 경우는 예전엔 컴파일 방법을 주로 사용했었으나 RPM 기반으로 설치하는 것이 더 편리하기도 하고 성능 최적화에 유리하다는 소식을 접하고 yum을 주로 사용하고 있다(yum을 사용해서 PHP를 설치할 경우 CentOS에 포함된 PHP의 버전은 매우 낮기 때문에 외부 RPM repository를 사용하는 경우가 많다).</p>
<p>PHP 최신 버전을 제공하는 외부 repository 중 유명한 곳은 <a href="https://webtatic.com/">webtatic</a>과 <a href="https://blog.remirepo.net/">remi</a> 등이 있다. 이중에서 webtatic을 주로 사용하다가 이번에 PHP 7.2로 버전업하는 과정에서 remi로 갈아탔다. 내가 remi를 선택한 이유는 다음과 같다.</p>
<ul>
<li>webtatic이 <a href="http://php.net/manual/en/book.mcrypt.php">mcrypt</a>를 지원하지 않는다(PHP 7.2에서 보안 문제로 제거).
<ul>
<li>webtatic에서는 openssl 또는 libsodium 사용을 권장</li>
<li>굳이 필요하면 <a href="https://packagist.org/packages/phpseclib/mcrypt_compat">phpseclib/mcrypt_compat</a>을 사용 (<a href="https://packagist.org/search/?q=mcrypt">packagist에서 mcrypt로 검색</a>하면 다른 프로젝트들도 있음)</li>
<li>참고 : <a href="https://webtatic.com/packages/php72/">PHP 7.2.1 on CentOS/RHEL 7.4 via Yum</a></li>
</ul></li>
<li>webtatic 보다 다양한 extension을 제공
<ul>
<li>운영중인 서비스로 인해 gearman, oci8 등이 추가로 필요했다.</li>
</ul></li>
<li>빠른 업데이트
<ul>
<li>webtatic의 경우 최신 버전에 대한 업데이트가 조금 늦는 경우가 많다.</li>
</ul></li>
</ul>
<p>위에 나열한 이유는 크게 중요한 문제들은 아니며 대안이 존재하지만 간편한 사용을 위해 갈아탔다. 사실 굳이 다른 repository를 알아봤던 이유는 mcrypt 때문이다. 보안상의 문제로 사용이 권장되지 않는 모듈이지만 PG(결제대행)사에서 제공하는 모듈이 mcrypt를 필수로 요구하고 있는 상황이라 사용하지 않을 수 없었다.</p>
<p>사설이 길었는데 이제 본격적으로 설치에 대해 알아보자(yum을 이용한 설치는 무척 간단하다).</p>
<hr />
<h3>설치환경</h3>
<ul>
<li>CentOS 7.2</li>
<li>Extra Packages for Enterprise Linux (<a href="https://fedoraproject.org/wiki/EPEL">EPEL</a>) repository를 사용하고 있어야 한다.</li>
</ul>
<h3>설치과정</h3>
<h4>1. 우선 remi repository를 yum 에 추가 한다.</h4>
<pre class="hljs bash">$ wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
$ rpm -Uvh epel-release-latest-7.noarch.rpm
$ wget http://rpms.remirepo.net/enterprise/remi-release-7.rpm
$ rpm -Uvh remi-release-7.rpm

$ yum install -y yum-utils
$ yum-config-manager --<span class="hljs-built_in">enable</span> remi-php72</pre>
<p>repository 주소는 OS/Version 별로 차이가 있다. 다른 OS를 사용하고 있거나 자세한 내용을 확인하고 싶다면 <a href="https://blog.remirepo.net/post/2017/12/04/Install-PHP-7.2-on-CentOS-RHEL-or-Fedora">Remi's RPM repository</a>를 참고하자.</p>
<h4>2. 기존 설치된 PHP를 제거하고 7.2 버전을 설치</h4>
<pre class="hljs bash">$ yum remove -y `yum list installed | cut -d <span class="hljs-string">" "</span> -f 1  | grep php`</pre>
<p>위 명령을 실행하기 전에 <code>yum list installed | cut -d " " -f 1  | grep php</code> 만 먼저 실행해서 삭제될 패키지를 확인하는 것이 좋다(잘못된 패키지가 삭제되지 않도록).</p>
<pre class="hljs bash">$ yum install -y php-common php-fpm php-cli \
        php-process \
        php-opcache php-pecl-apcu \
        php-mysqlnd php-pdo \
        php-gd \
        php-mbstring php-xml \
        php-pecl-zip \
        php-bcmath</pre>
<p>&quot;php-common&quot; 외의 패키지는 자신의 상황에 맞게 조정해서 설치한다.</p>
<blockquote>
<p>&quot;php-common&quot; 대신 &quot;php72w-common&quot;과 같이 PHP 버전을 지정한 패키지를 사용해도 된다.
항상 최신 버전을 사용할 것이 아니라 특정 버전대를 사용해야 한다면 이 방법을 사용하자.
향후 PHP가 버전업되면 운영중인 프로그램과의 호환에 문제가 발생할 수 있으므로 이 방법이 더 안전하다. 단, 메이저 버전업시 기존 패키지를 지우고 설치하는 방법을 사용해야 하므로 불편하다.</p>
</blockquote>
<hr />
<p>기존에 yum으로 설치된 PHP가 존재하고 해당 패키지의 이름이 &quot;php-&quot;로 시작한다면(위에 설명한 것과 같이 &quot;php72w-&quot;로 시작하는 패키지가 설치된 경우가 아닌) 기존 패키지를 지우고 재설치하는 것보다 아래처럼 그냥 update 받는 방법도 있다.</p>
<pre class="hljs bash">$ yum update php-*</pre>
<p>나의 경우는 기존에 webtatic을 사용했기 때문에 패키지들의 이름이 &quot;php70w-&quot;로 시작해서 기존 패키지를 지우고 새로 설치했다. 대신, 이번에 &quot;php-&quot;로 시작하는 패키지들을 설치했기 때문에 향후 버전업 시에는 update 방식을 사용할 수 있다.</p>
<h4>3. 설치된 php 버전 확인</h4>
<pre class="hljs bash">$ php -v

PHP 7.2.2 (cli) (built: Jan 30 2018 13:44:49) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.2.0, Copyright (c) 1998-2018 Zend Technologies
    with Zend OPcache v7.2.2, Copyright (c) 1999-2018, by Zend Technologies</pre>
<p>이것으로 PHP 7.2 버전의 설치가 끝났다.</p>
<hr />
<p>yum을 이용한 PHP의 설치는 앞서 보는 것과 같이 아주 간단하다. &quot;php-&quot; 패키지를 설치할지 &quot;php72w-&quot; 패키지를 설치할지는 자신의 관리 성향에 맞추어 잘 선택하길 바란다(생각보다 중요한 문제다).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2018/02/01/let-s-encrypt-acme-v2-protocol-api-endpoint-and-support-for-wildcard-certificates/</id><title type="html">Let's Encrypt : ACME v2 protocol API 및 wildcard certificates 지원</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2018/02/01/let-s-encrypt-acme-v2-protocol-api-endpoint-and-support-for-wildcard-certificates/"/><published>2018-02-01T17:00:35+09:00</published><updated>2018-02-01T17:00:35+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ssl" label="ssl" /><category term="linux" label="linux" /><summary><![CDATA[Let's Encrypt는 2017년 12월 Looking Forward to 2018라는 글을 통해 ACME v2 protocol API와 와일드카드 SSL 인증서를 1월 4일까지 공개 테스트하고 2월 27일부터 정식 배포 하겠다고 밝혔다. 두가지 지원 사항 중 하나인 ACME는 위키피디아에서 아래와 같이 설명하고 있다. The Automatic Certificate Management Environment (ACME) protocol is a communications protocol for automating interactions between certificate authorities and their users' web servers, allowing the automated deployment of public key infrastructure at very low cost.[1][2] It was designed by the Internet Security Research Group (ISRG) for their Let's Encrypt service. ACME v2 protocol에 대해서는 명확한 설명을 찾지 못했지만 이 링크를 통해 비교해 볼 수는 있다. 사실 그냥 무료 인증서가 필요해서 사용하는 입장에서는 ACME protocol의 상세는 중요하지 않다고 본다. 이번 업데이트에서 가장 중요한 부분은 와일드카드 SSL 인증서를 지원한다는 것이다. 기존에는 SSL을 사용하고자 하는 모든 도메인을 일일이 세팅해 주었어야 하지만 와일드카드를 지원하게 됨으로써 하나의 SSL 인증서를 발급받아 여러 서브 도메인에서 사용할 수 있게 된다. 업데이트 이전에는 해당 도메인에 접속하여 인증한 후 SSL 인증서를 발급하는 방식이었다. 하지만 와일드카드를 지원하게 되면 발급 과정이 어떻게 변경되는지 궁금해서 찾아보았으나 아직 찾지는 못했다. 기존에 주로 certbot을 이용해 발급/갱신 했었기 때문에 해당 사이트도 대충 둘러 보았으나 찾지 못했다(1월 4일까지 공개 테스트를 한다고 했기 때문에 어딘가엔 방법이 있을 듯한데). 어쨌든 2월 27일이되면 상세한 설명이 나올 것으로 보이니 기다려봐야 겠다. 결론적으로 와일드카드 SSL을 무료로 사용할 수 있게 된다니 아주 기대된다.]]></summary><content type="html"><![CDATA[<p><a href="https://letsencrypt.org">Let's Encrypt</a>는 2017년 12월 <a href="https://letsencrypt.org/2017/12/07/looking-forward-to-2018.html">Looking Forward to 2018</a>라는 글을 통해 <a href="https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment">ACME</a> v2 protocol API와 와일드카드 SSL 인증서를 1월 4일까지 공개 테스트하고 2월 27일부터 정식 배포 하겠다고 밝혔다.</p>
<p>두가지 지원 사항 중 하나인 <a href="https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment">ACME</a>는 위키피디아에서 아래와 같이 설명하고 있다.</p>
<blockquote>
<p>The Automatic Certificate Management Environment (ACME) protocol is a communications protocol for automating interactions between certificate authorities and their users' web servers, allowing the automated deployment of public key infrastructure at very low cost.[1][2] It was designed by the Internet Security Research Group (ISRG) for their Let's Encrypt service.</p>
</blockquote>
<p>ACME v2 protocol에 대해서는 명확한 설명을 찾지 못했지만 이 <a href="https://tools.ietf.org/rfcdiff?url1=https://tools.ietf.org/id/draft-ietf-acme-acme-01.txt&amp;url2=https://tools.ietf.org/id/draft-ietf-acme-acme-07.txt">링크</a>를 통해 비교해 볼 수는 있다.</p>
<p>사실 그냥 무료 인증서가 필요해서 사용하는 입장에서는 ACME protocol의 상세는 중요하지 않다고 본다.</p>
<p>이번 업데이트에서 가장 중요한 부분은 와일드카드 SSL 인증서를 지원한다는 것이다.</p>
<p>기존에는 SSL을 사용하고자 하는 모든 도메인을 일일이 세팅해 주었어야 하지만 와일드카드를 지원하게 됨으로써 하나의 SSL 인증서를 발급받아 여러 서브 도메인에서 사용할 수 있게 된다.</p>
<p>업데이트 이전에는 해당 도메인에 접속하여 인증한 후 SSL 인증서를 발급하는 방식이었다. 하지만 와일드카드를 지원하게 되면 발급 과정이 어떻게 변경되는지 궁금해서 찾아보았으나 아직 찾지는 못했다.</p>
<p>기존에 주로 <a href="https://certbot.eff.org/">certbot</a>을 이용해 발급/갱신 했었기 때문에 해당 사이트도 대충 둘러 보았으나 찾지 못했다(1월 4일까지 공개 테스트를 한다고 했기 때문에 어딘가엔 방법이 있을 듯한데).</p>
<p>어쨌든 2월 27일이되면 상세한 설명이 나올 것으로 보이니 기다려봐야 겠다.</p>
<p>결론적으로 <strong>와일드카드 SSL을 무료로 사용할 수 있게 된다니 아주 기대된다</strong>.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/08/14/top-10-es6-features/</id><title type="html">개발자가 필히 알아야 할 ES6 10가지 기능</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/08/14/top-10-es6-features/"/><published>2017-08-14T17:42:35+09:00</published><updated>2017-08-14T17:42:35+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[ES6(ECMAScript 표준의 6번째 에디션, ECMAScript2015)에 대한 이야기를 하기 전에 자바스크립트와 ECMAScript에 대한 것부터 간략히 소개한다. 넷스케이프(Netscape)에서 1995년 개발한 자바스크립트(javascript)는 웹 브라우저에서 동적인 기능을 제공하기 위한 언어다. 현재는 대부분의 브라우저에서 이 언어를 제공하고 있다. 그런데 표준 규격없이 여러 브라우저에서 독자적인 특성이 추가되면서 호환성 문제가 발생하기 시작했다. 이에 ECMA 국제 기구에서 “ECMAScript Standard”라는 표준을 만들게 되었다. 정확히 이야기 하자면 현재의 자바스크립트는 ECMAScript와 BOM(Browser Object Model)와 DOM(Document Object Model)을 포괄하는 개념이다. 개별적인 설명에 앞서 개발자가 필히 알아야 할 ES6 10가지 기능을 나열하자면 아래와 같다. 기본 매개 변수 (Default Parameters) 템플릿 리터럴 (Template Literals) 멀티 라인 문자열 (Multi-line Strings) 비구조화 할당 (Destructuring Assignment) 향상된 객체 리터럴 (Enhanced Object Literals) 화살표 함수 (Arrow Functions) Promises 블록 범위 생성자 Let 및 Const (Block-Scoped Constructs Let and Const) 클래스 (Classes) 모듈 (Modules) 이제부터 하나씩 알아보자. 1. 기본 매개 변수 (Default Parameters) var link = function (height, color, url) { var height = height || 50 var color = color || 'red' var url = url || 'http://azat.co' ... } 함수에 넘겨주는 인자값에 대한 default 처리를 위해 위와 같이 처리 했었다면 ES6에서는 아래와 같이 간단히 처리할 수 있다. var link = function(height = 50, color = 'red', url = 'http://azat.co') { ... } 단, 주의해야 할 점이 있다. 인자값으로 0 또는 false가 입력될 때 두 예시의 결과는 다르다. ES5에서는 || 처리 시 0 또는 false 값이 입력 되어도 거짓이 되므로 기본값으로 대체된다. 하지만 ES6의 기본 매개 변수를 사용하면 undefined 를 제외한 입력된 모든 값(0, false, null 등)을 인정한다. 2. 템플릿 리터럴 (Template Literals) ES5에서는 아래와 같이 문자열을 처리해야 했다. var name = 'Your name is ' + first + ' ' + last + '.' var url = 'http://localhost:3000/api/messages/' + id 하지만 ES6에서는 템플릿 리터럴을 제공하므로 "`" (back-ticked) 문자열 안에 ${NAME}라는 새로운 구문을 사용해서 아래와 같이 간단히 처리할 수 있다. var name = `Your name is ${first} ${last}.` var url = `http://localhost:3000/api/messages/${id}` 3. 멀티 라인 문자열 (Multi-line Strings) ES5에서는 멀티 라인 문자열을 처리하기 위해 아래와 같은 방법들을 사용해야 했다. var roadPoem = 'Then took the other, as just as fair,\n\t' + 'And having perhaps the better claim\n\t' + 'Because it was grassy and wanted wear,\n\t' + 'Though as for that the passing there\n\t' + 'Had worn them really about the same,\n\t' var fourAgreements = 'You have the right to be you.\n\ You can only be you when you do your best.' 하지만 ES6에서는 "`" (back-ticked) 문자열을 이용해서 아래와 같이 간단히 처리할 수 있다. var roadPoem = `Then took the other, as just as fair, And having perhaps the better claim Because it was grassy and wanted wear, Though as for that the passing there Had worn them really about the same,` var fourAgreements = `You have the right to be you. You can only be you when you do your best.` 4. 비구조화 할당 (Destructuring Assignment) ES5에서는 구조화된 데이터를 변수로 받기 위해 아래와 같이 처리해야 했다. // browser var data = $('body').data(), // data has properties house and mouse house = data.house, mouse = data.mouse // Node.js var jsonMiddleware = require('body-parser').json var body = req.body, // body has username and password username = body.username, password = body.password 하지만 ES6에서는 비구조화 할당을 사용해 아래와 같이 처리할 수 있다. var {house, mouse} = $('body').data() // we'll get house and mouse variables var {jsonMiddleware} = require('body-parser') var {username, password} = req.body 주의할 점은 var로 할당하려는 변수명과 구조화된 데이터의 property명이 같아야 한다. 또한 구조화된 데이터가 아니라 배열의 경우 {} 대신 []를 사용해서 위와 유사하게 사용할 수 있다. var [col1, col2] = $('.column'), [line1, line2, line3, , line5] = file.split('\n') 5. 향상된 객체 리터럴 (Enhanced Object Literals) ES5에서는 아래와 같이 JSON을 사용해서 객체 리터럴을 만들 수 있었다. var serviceBase = {port: 3000, url: 'azat.co'}, getAccounts = function(){return [1,2,3]} var accountServiceES5 = { port: serviceBase.port, url: serviceBase.url, getAccounts: getAccounts, toString: function() { return JSON.stringify(this.valueOf()) }, getUrl: function() {return "http://" + this.url + ':' + this.port}, valueOf_1_2_3: getAccounts() } 위 예시와 달리 serviceBase를 확장하길 원한다면 Object.create 로 프로토타입화하여 상속 받을 수 있다. var accountServiceES5ObjectCreate = { getAccounts: getAccounts, toString: function() { return JSON.stringify(this.valueOf()) }, getUrl: function() {return "http://" + this.url + ':' + this.port}, valueOf_1_2_3: getAccounts() } accountServiceES5ObjectCreate.__proto__ = Object.create(serviceBase) accountServiceES5ObjectCreate와 accountServiceES5는 동일하게 사용할 수 있으나 다른 구조를 가진다. accountServiceES5ObjectCreate는 accountServiceES5와 다르게 __proto__ 에 port 와 url 속성을 가진 객체를 담고 있다. ES6에서는 아래와 같이 처리할 수 있다. var serviceBase = {port: 3000, url: 'azat.co'}, getAccounts = function(){return [1,2,3]} var accountService = { __proto__: serviceBase, getAccounts, toString() { return JSON.stringify((super.valueOf())) }, getUrl() {return "http://" + this.url + ':' + this.port}, [ 'valueOf_' + getAccounts().join('_') ]: getAccounts() }; 위 예시에 대해 ES5와의 차이를 요약하면 아래와 같다. __proto__ 속성을 사용해서 바로 프로토타입을 설정할 수 있다. getAccounts: getAccounts, 대신 getAccounts, 를 사용할 수 있다 (변수명으로 속성 이름을 지정). [ 'valueOf_' + getAccounts().join('_') ] 와 같이 동적으로 속성 이름을 정의할 수 있다. 조금 더 자세한 내용을 보고 싶다면 gsfe/es2015features 를 참고하자. 6. 화살표 함수 (Arrow Functions) 화살표 함수는 항상 익명 함수이며 this의 값을 현재 문맥에 바인딩 시킨다. 아래의 예시는 화살표 함수가 지원되지 않는 ES5에서 this를 사용하기 위한 처리 예시다. var _this = this $('.btn').click(function(event){ _this.sendData() }) 다음은 위 예시를 화살표 함수로 대체한 ES6 예시이다. $('.btn').click((event) => { this.sendData() }) 다음은 ES5에서 call을 사용하여 context를 logUpperCase() 함수에 전달하는 또 다른 예제다. var logUpperCase = function() { var _this = this this.string = this.string.toUpperCase() return function () { return console.log(_this.string) } } logUpperCase.call({ string: 'es6 rocks' })() ES6에서는 화살표 함수를 사용하면 _this 를 사용할 필요가 없다. var logUpperCase = function() { this.string = this.string.toUpperCase() return () => console.log(this.string) } logUpperCase.call({ string: 'es6 rocks' })() 화살표 함수가 한 줄의 명령문과 함께 사용되면 표현식이 되어 명령문의 결과를 암시적으로 반환한다. ES5에서의 처리 예시. var ids = ['5632953c4e345e145fdf2df8','563295464e345e145fdf2df9'] var messages = ids.map(function (value) { return "ID is " + value // explicit return }); ES6에서의 처리 예시. var ids = ['5632953c4e345e145fdf2df8','563295464e345e145fdf2df9'] var messages = ids.map(value => `ID is ${value}`) // implicit return 여러 개의 인자를 사용하는 경우는 변수 목록을 () 로 감싸줘야 한다. ES5에서의 처리 예시. var ids = ['5632953c4e345e145fdf2df8', '563295464e345e145fdf2df9']; var messages = ids.map(function (value, index, list) { return 'ID of ' + index + ' element is ' + value + ' ' // explicit return }); ES6에서의 처리 예시. var ids = ['5632953c4e345e145fdf2df8','563295464e345e145fdf2df9'] var messages = ids.map((value, index, list) => `ID of ${index} element is ${value} `) // implicit return 또한 본문을 괄호로 감싸 객체 표현식을 반환할 수 있으며 ... 을 이용해 가변 파라미터를 사용할 수도 있다. var ids = ['5632953c4e345e145fdf2df8','563295464e345e145fdf2df9'] var messages = ids.map((value, index, ...abc) => ({v:value, i:index, a:abc})) 7. Promises ES6에서는 표준 Promise가 제공된다. 아래는 setTimeout 을 이용한 지연된 비동기 실행에 대한 ES5 예시다. setTimeout(function(){ console.log('Yay!') }, 1000) 위 예시를 ES6에서 Promise를 사용해서 재작성하면 아래와 같다. var wait1000 = new Promise(function(resolve, reject) { setTimeout(resolve, 1000) }).then(function() { console.log('Yay!') }) 위 예시를 화살표 함수를 사용해 재작성한 예시는 아래와 같다. var wait1000 = new Promise((resolve, reject)=> { setTimeout(resolve, 1000) }).then(()=> { console.log('Yay!') }) ES5 보다 ES6의 Promise를 사용한 예시가 더 복잡해 보이지만 아래와 같이 중첩된 setTimeout 예시를 보면 Promise의 이점을 확인할 수 있다. setTimeout(function(){ console.log('Yay!') setTimeout(function(){ console.log('Wheeyee!') }, 1000) }, 1000) 아래는 ES6 Promise 로 작성된 예시. var wait1000 = ()=> new Promise((resolve, reject)=> {setTimeout(resolve, 1000)}) wait1000() .then(function() { console.log('Yay!') return wait1000() }) .then(function() { console.log('Wheeyee!') }); 조금 더 자세한 내용을 보고 싶다면 Introduction to ES6 Promises – The Four Functions You Need To Avoid Callback Hell 또는 gsfe/es2015features 를 참고하자. 8. 블록 범위 생성자 Let 및 Const (Block-Scoped Constructs Let and Const) let과 const는 중괄호("{}")로 정의된 블록으로 유효 범위(스코프)를 지정하는 새로운 var이다. 단, let은 변수를 const는 상수를 선언한다. function calculateTotalAmount (vip) { var amount = 0 if (vip) { var amount = 1 } { // more crazy blocks! var amount = 100 { var amount = 1000 } } return amount } console.log(calculateTotalAmount(true)) 위 예시의 결과는 1000 이다. var는 전역 또는 함수 내부로 유효 범위를 갖기 때문에 예시에 사용된 함수 내부의 "{}" 들은 아무런 역할을 하지 못한다. 아래는 위 예시에서 var를 let으로 바꾼 ES6 예시다. function calculateTotalAmount (vip) { var amount = 0 // probably should also be let, but you can mix var and let if (vip) { let amount = 1 // first amount is still 0 } { // more crazy blocks! let amount = 100 // first amount is still 0 { let amount = 1000 // first amount is still 0 } } return amount } console.log(calculateTotalAmount(true)) 이 예시의 결과는 0 이다. let 으로 선언된 변수는 "{}" 블록 내부로 유효 범위가 한정되므로 100, 1000으로 할당된 변수는 해당 블록 내부에서만 유효하기 때문이다. if 블록 내부에서 let으로 선언된 amount 또한 해당 if 블록 내에서만 유효하므로 아무런 변경이 일어나지 않는다. 아래의 예시는 const를 사용한 예시다. const는 상수를 선언하는 것으로 여러번 선언될 수 없지만 let과 같이 블록 내부로 유효 범위가 한정되므로 아래의 예시는 오류가 발생하지 않는다. function calculateTotalAmount (vip) { const amount = 0 if (vip) { const amount = 1 } { // more crazy blocks! const amount = 100 { const amount = 1000 } } return amount } console.log(calculateTotalAmount(true)) 9. 클래스 (Classes) ES6에는 class 키워드가 추가되어 ES5의 prototype 기반 상속보다 명확하게 class를 정의할 수 있다. get 과 set 키워드 외에도 static 키워드를 사용해 static 메소드를 정의하는 것도 가능하다. class baseModel { constructor(options = {}, data = []) { // class constructor this.name = 'Base' this.url = 'http://azat.co/api' this.data = data this.options = options } getName() { // class method console.log(`Class name: ${this.name}`) } } constructor 는 class 내부에 하나만 존재할 수 있으며 메소드 정의에 function 또는 콜론(":")이 더이상 필요하지 않다. 단, property의 경우 메소드와 달리 생성자에서 값을 할당해야 한다. 또한 아래의 예시와 같이 class NAME extends PARENT_NAME 형식으로 상속이 가능하다. 상속시 부모 생성자를 호출하기 위해 super() 를 사용할 수 있다. 생성자가 아닌 메소드에서는 super 키워드를 사용해서 부모 메소드에 접근한다. class AccountModel extends baseModel { constructor(options, data) { super({private: true}, ['32113123123', '524214691']) //call the parent method with super this.name = 'Account Model' this.url +='/accounts/' } get accountsData() { //calculated attribute getter // ... make XHR return this.data } } class 는 get 과 set 키워드를 사용할 수 있으며 선언된 함수는 아래와 같이 사용할 수 있다. let accounts = new AccountModel(5) accounts.getName() console.log('Data is %s', accounts.accountsData) 위 예시를 실행하면 아래와 같은 결과를 얻을 수 있다. Class name: Account Model Data is %s 32113123123,524214691 10. 모듈 (Modules) ES6 에서 모듈을 공식적으로 제공하기 전까지는 CommonJS, AMD, RequireJS 등의 비공식 모듈 스펙을 사용해 왔다. ES6에서 제공하는 모듈 스펙은 기존과 유사하지만 차이가 있다. ES5에서 CommonJS를 이용해서 모듈을 사용하는 예시는 아래와 같다(module.js). module.exports = { port: 3000, getAccounts: function() { ... } } main.js 파일에서 위에서 정의한 모듈을 불러서 사용하는 예시는 아래와 같다. var service = require('module.js') console.log(service.port) // 3000 여기서 부터는 ES6의 import 와 export 를 사용해서 유사한 기능을 구현한 예시다(module.js). export var port = 3000 export function getAccounts(url) { ... } main.js 파일에서는 import 를 사용해서 module.js 모듈을 불러올 수 있다. import {port, getAccounts} from 'module' console.log(port) // 3000 위와 유사하지만 export 된 모든 변수를 아래와 같이 하나의 구조화된 데이터로 받을 수도 있다. import * as service from 'module' console.log(service.port) // 3000 ES6 당장 사용할 수 있는 방법 (Babel) ES6는 확정되었지만 아직 모든 브라우저에서 완전하게 지원되지 않는다. 따라서 지금 당장 ES6 사용하고 싶다면 Babel과 같은 컴파일러를 사용해야 한다. Babel은 독립 실행형 도구로 실행하거나 빌드 시스템에서 사용할 수 있다. Grunt, Gulp 및 Webpack 용 Babel 플러그인이 있다. ES6의 기타 특징 참고로 이 외에도 여러가지 특징이 있으니 관심이 있다면 git.io/es6features를 번역한 ECMAScript 6 Features를 참고하면 된다. 참고 Top 10 ES6 Features Every Busy JavaScript Developer Must Know 자바스크립트-위키피디아 ECMA스크립트-위키피디아 ECMAScript, ES6란?-워너비스페셜]]></summary><content type="html"><![CDATA[<p>ES6(ECMAScript 표준의 6번째 에디션, ECMAScript2015)에 대한 이야기를 하기 전에 자바스크립트와 <a href="http://www.ecmascript.org/">ECMAScript</a>에 대한 것부터 간략히 소개한다.</p>
<blockquote>
<p>넷스케이프(Netscape)에서 1995년 개발한 자바스크립트(javascript)는 웹 브라우저에서 동적인 기능을 제공하기 위한 언어다. 현재는 대부분의 브라우저에서 이 언어를 제공하고 있다. 그런데 표준 규격없이 여러 브라우저에서 독자적인 특성이 추가되면서 호환성 문제가 발생하기 시작했다. 이에 ECMA 국제 기구에서 “ECMAScript Standard”라는 표준을 만들게 되었다. 정확히 이야기 하자면 현재의 자바스크립트는 ECMAScript와 BOM(Browser Object Model)와 DOM(Document Object Model)을 포괄하는 개념이다.</p>
</blockquote>
<p>개별적인 설명에 앞서 개발자가 필히 알아야 할 ES6 10가지 기능을 나열하자면 아래와 같다.</p>
<ol>
<li>기본 매개 변수 (Default Parameters)</li>
<li>템플릿 리터럴 (Template Literals)</li>
<li>멀티 라인 문자열 (Multi-line Strings)</li>
<li>비구조화 할당 (Destructuring Assignment)</li>
<li>향상된 객체 리터럴 (Enhanced Object Literals)</li>
<li>화살표 함수 (Arrow Functions)</li>
<li>Promises</li>
<li>블록 범위 생성자 Let 및 Const (Block-Scoped Constructs Let and Const)</li>
<li>클래스 (Classes)</li>
<li>모듈 (Modules)</li>
</ol>
<p>이제부터 하나씩 알아보자.</p>
<h3>1. 기본 매개 변수 (Default Parameters)</h3>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> link = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">height, color, url</span>) </span>{
    <span class="hljs-keyword">var</span> height = height || <span class="hljs-number">50</span>
    <span class="hljs-keyword">var</span> color = color || <span class="hljs-string">'red'</span>
    <span class="hljs-keyword">var</span> url = url || <span class="hljs-string">'http://azat.co'</span>
    ...
}</pre>
<p>함수에 넘겨주는 인자값에 대한 default 처리를 위해 위와 같이 처리 했었다면 ES6에서는 아래와 같이 간단히 처리할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> link = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">height = <span class="hljs-number">50</span>, color = <span class="hljs-string">'red'</span>, url = <span class="hljs-string">'http://azat.co'</span></span>) </span>{
  ...
}</pre>
<p>단, 주의해야 할 점이 있다. 인자값으로 0 또는 false가 입력될 때 두 예시의 결과는 다르다. ES5에서는 <code>||</code> 처리 시 0 또는 false 값이 입력 되어도 거짓이 되므로 기본값으로 대체된다. 하지만 ES6의 기본 매개 변수를 사용하면 undefined 를 제외한 입력된 모든 값(0, false, null 등)을 인정한다.</p>
<h3>2. 템플릿 리터럴 (Template Literals)</h3>
<p>ES5에서는 아래와 같이 문자열을 처리해야 했다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">'Your name is '</span> + first + <span class="hljs-string">' '</span> + last + <span class="hljs-string">'.'</span>
<span class="hljs-keyword">var</span> url = <span class="hljs-string">'http://localhost:3000/api/messages/'</span> + id</pre>
<p>하지만 ES6에서는 템플릿 리터럴을 제공하므로 &quot;`&quot; (back-ticked) 문자열 안에 <code>${NAME}</code>라는 새로운 구문을 사용해서 아래와 같이 간단히 처리할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> name = <span class="hljs-string">`Your name is <span class="hljs-subst">${first}</span> <span class="hljs-subst">${last}</span>.`</span>
<span class="hljs-keyword">var</span> url = <span class="hljs-string">`http://localhost:3000/api/messages/<span class="hljs-subst">${id}</span>`</span></pre>
<h3>3. 멀티 라인 문자열 (Multi-line Strings)</h3>
<p>ES5에서는 멀티 라인 문자열을 처리하기 위해 아래와 같은 방법들을 사용해야 했다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> roadPoem = <span class="hljs-string">'Then took the other, as just as fair,\n\t'</span>
    + <span class="hljs-string">'And having perhaps the better claim\n\t'</span>
    + <span class="hljs-string">'Because it was grassy and wanted wear,\n\t'</span>
    + <span class="hljs-string">'Though as for that the passing there\n\t'</span>
    + <span class="hljs-string">'Had worn them really about the same,\n\t'</span>

<span class="hljs-keyword">var</span> fourAgreements = <span class="hljs-string">'You have the right to be you.\n\
    You can only be you when you do your best.'</span></pre>
<p>하지만 ES6에서는 &quot;`&quot; (back-ticked) 문자열을 이용해서 아래와 같이 간단히 처리할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> roadPoem = <span class="hljs-string">`Then took the other, as just as fair,
    And having perhaps the better claim
    Because it was grassy and wanted wear,
    Though as for that the passing there
    Had worn them really about the same,`</span>

<span class="hljs-keyword">var</span> fourAgreements = <span class="hljs-string">`You have the right to be you.
    You can only be you when you do your best.`</span></pre>
<h3>4. 비구조화 할당 (Destructuring Assignment)</h3>
<p>ES5에서는 구조화된 데이터를 변수로 받기 위해 아래와 같이 처리해야 했다.</p>
<pre class="hljs javascript"><span class="hljs-comment">// browser</span>
<span class="hljs-keyword">var</span> data = $(<span class="hljs-string">'body'</span>).data(), <span class="hljs-comment">// data has properties house and mouse</span>
  house = data.house,
  mouse = data.mouse

<span class="hljs-comment">// Node.js</span>
<span class="hljs-keyword">var</span> jsonMiddleware = <span class="hljs-built_in">require</span>(<span class="hljs-string">'body-parser'</span>).json

<span class="hljs-keyword">var</span> body = req.body, <span class="hljs-comment">// body has username and password</span>
  username = body.username,
  password = body.password</pre>
<p>하지만 ES6에서는 비구조화 할당을 사용해 아래와 같이 처리할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> {house, mouse} = $(<span class="hljs-string">'body'</span>).data() <span class="hljs-comment">// we'll get house and mouse variables</span>

<span class="hljs-keyword">var</span> {jsonMiddleware} = <span class="hljs-built_in">require</span>(<span class="hljs-string">'body-parser'</span>)

<span class="hljs-keyword">var</span> {username, password} = req.body</pre>
<p>주의할 점은 var로 할당하려는 변수명과 구조화된 데이터의 property명이 같아야 한다. 또한 구조화된 데이터가 아니라 배열의 경우 <code>{}</code> 대신 <code>[]</code>를 사용해서 위와 유사하게 사용할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> [col1, col2]  = $(<span class="hljs-string">'.column'</span>),
  [line1, line2, line3, , line5] = file.split(<span class="hljs-string">'\n'</span>)</pre>
<h3>5. 향상된 객체 리터럴 (Enhanced Object Literals)</h3>
<p>ES5에서는 아래와 같이 JSON을 사용해서 객체 리터럴을 만들 수 있었다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> serviceBase = {<span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">'azat.co'</span>},
    getAccounts = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]}

<span class="hljs-keyword">var</span> accountServiceES5 = {
  <span class="hljs-attr">port</span>: serviceBase.port,
  <span class="hljs-attr">url</span>: serviceBase.url,
  <span class="hljs-attr">getAccounts</span>: getAccounts,
  <span class="hljs-attr">toString</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-keyword">this</span>.valueOf())
  },
  <span class="hljs-attr">getUrl</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<span class="hljs-keyword">return</span> <span class="hljs-string">"http://"</span> + <span class="hljs-keyword">this</span>.url + <span class="hljs-string">':'</span> + <span class="hljs-keyword">this</span>.port},
  <span class="hljs-attr">valueOf_1_2_3</span>: getAccounts()
}</pre>
<p>위 예시와 달리 serviceBase를 확장하길 원한다면 <code>Object.create</code> 로 프로토타입화하여 상속 받을 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> accountServiceES5ObjectCreate = {
  <span class="hljs-attr">getAccounts</span>: getAccounts,
  <span class="hljs-attr">toString</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-keyword">this</span>.valueOf())
  },
  <span class="hljs-attr">getUrl</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{<span class="hljs-keyword">return</span> <span class="hljs-string">"http://"</span> + <span class="hljs-keyword">this</span>.url + <span class="hljs-string">':'</span> + <span class="hljs-keyword">this</span>.port},
  <span class="hljs-attr">valueOf_1_2_3</span>: getAccounts()
}
accountServiceES5ObjectCreate.__proto__ = <span class="hljs-built_in">Object</span>.create(serviceBase)</pre>
<p>accountServiceES5ObjectCreate와 accountServiceES5는 동일하게 사용할 수 있으나 다른 구조를 가진다. accountServiceES5ObjectCreate는 accountServiceES5와 다르게 <code>__proto__</code> 에 <code>port</code> 와 <code>url</code> 속성을 가진 객체를 담고 있다.</p>
<p>ES6에서는 아래와 같이 처리할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> serviceBase = {<span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>, <span class="hljs-attr">url</span>: <span class="hljs-string">'azat.co'</span>},
    getAccounts = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{<span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]}
<span class="hljs-keyword">var</span> accountService = {
    <span class="hljs-attr">__proto__</span>: serviceBase,
    getAccounts,
    toString() {
     <span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify((<span class="hljs-keyword">super</span>.valueOf()))
    },
    getUrl() {<span class="hljs-keyword">return</span> <span class="hljs-string">"http://"</span> + <span class="hljs-keyword">this</span>.url + <span class="hljs-string">':'</span> + <span class="hljs-keyword">this</span>.port},
    [ <span class="hljs-string">'valueOf_'</span> + getAccounts().join(<span class="hljs-string">'_'</span>) ]: getAccounts()
};</pre>
<p>위 예시에 대해 ES5와의 차이를 요약하면 아래와 같다.</p>
<ul>
<li><code>__proto__</code> 속성을 사용해서 바로 프로토타입을 설정할 수 있다.</li>
<li><code>getAccounts: getAccounts,</code> 대신 <code>getAccounts,</code> 를 사용할 수 있다 (변수명으로 속성 이름을 지정).</li>
<li><code>[ 'valueOf_' + getAccounts().join('_') ]</code> 와 같이 동적으로 속성 이름을 정의할 수 있다.</li>
</ul>
<p>조금 더 자세한 내용을 보고 싶다면 <a href="https://github.com/gsfe/es2015features/tree/master/enhanced-object-literals">gsfe/es2015features</a> 를 참고하자.</p>
<h3>6. 화살표 함수 (Arrow Functions)</h3>
<p>화살표 함수는 항상 익명 함수이며 <code>this</code>의 값을 현재 문맥에 바인딩 시킨다.</p>
<p>아래의 예시는 화살표 함수가 지원되지 않는 ES5에서 <code>this</code>를 사용하기 위한 처리 예시다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> _this = <span class="hljs-keyword">this</span>
$(<span class="hljs-string">'.btn'</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)</span>{
  _this.sendData()
})</pre>
<p>다음은 위 예시를 화살표 함수로 대체한 ES6 예시이다.</p>
<pre class="hljs javascript">$(<span class="hljs-string">'.btn'</span>).click(<span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> {
  <span class="hljs-keyword">this</span>.sendData()
})</pre>
<p>다음은 ES5에서 <code>call</code>을 사용하여 <code>context</code>를 <code>logUpperCase()</code> 함수에 전달하는 또 다른 예제다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> logUpperCase = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">var</span> _this = <span class="hljs-keyword">this</span>

  <span class="hljs-keyword">this</span>.string = <span class="hljs-keyword">this</span>.string.toUpperCase()
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(_this.string)
  }
}
logUpperCase.call({ <span class="hljs-attr">string</span>: <span class="hljs-string">'es6 rocks'</span> })()</pre>
<p>ES6에서는 화살표 함수를 사용하면 <code>_this</code> 를 사용할 필요가 없다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> logUpperCase = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-keyword">this</span>.string = <span class="hljs-keyword">this</span>.string.toUpperCase()
  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.string)
}
logUpperCase.call({ <span class="hljs-attr">string</span>: <span class="hljs-string">'es6 rocks'</span> })()</pre>
<p>화살표 함수가 한 줄의 명령문과 함께 사용되면 표현식이 되어 명령문의 결과를 암시적으로 반환한다.</p>
<p>ES5에서의 처리 예시.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> ids = [<span class="hljs-string">'5632953c4e345e145fdf2df8'</span>,<span class="hljs-string">'563295464e345e145fdf2df9'</span>]
<span class="hljs-keyword">var</span> messages = ids.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-string">"ID is "</span> + value <span class="hljs-comment">// explicit return</span>
});</pre>
<p>ES6에서의 처리 예시.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> ids = [<span class="hljs-string">'5632953c4e345e145fdf2df8'</span>,<span class="hljs-string">'563295464e345e145fdf2df9'</span>]
<span class="hljs-keyword">var</span> messages = ids.map(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-string">`ID is <span class="hljs-subst">${value}</span>`</span>) <span class="hljs-comment">// implicit return</span></pre>
<p>여러 개의 인자를 사용하는 경우는 변수 목록을 <code>()</code> 로 감싸줘야 한다.</p>
<p>ES5에서의 처리 예시.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> ids = [<span class="hljs-string">'5632953c4e345e145fdf2df8'</span>, <span class="hljs-string">'563295464e345e145fdf2df9'</span>];
<span class="hljs-keyword">var</span> messages = ids.map(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, index, list</span>) </span>{
  <span class="hljs-keyword">return</span> <span class="hljs-string">'ID of '</span> + index + <span class="hljs-string">' element is '</span> + value + <span class="hljs-string">' '</span> <span class="hljs-comment">// explicit return</span>
});</pre>
<p>ES6에서의 처리 예시.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> ids = [<span class="hljs-string">'5632953c4e345e145fdf2df8'</span>,<span class="hljs-string">'563295464e345e145fdf2df9'</span>]
<span class="hljs-keyword">var</span> messages = ids.map(<span class="hljs-function">(<span class="hljs-params">value, index, list</span>) =&gt;</span> <span class="hljs-string">`ID of <span class="hljs-subst">${index}</span> element is <span class="hljs-subst">${value}</span> `</span>) <span class="hljs-comment">// implicit return</span></pre>
<p>또한 본문을 괄호로 감싸 객체 표현식을 반환할 수 있으며 <code>...</code> 을 이용해 가변 파라미터를 사용할 수도 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> ids = [<span class="hljs-string">'5632953c4e345e145fdf2df8'</span>,<span class="hljs-string">'563295464e345e145fdf2df9'</span>]
<span class="hljs-keyword">var</span> messages = ids.map(<span class="hljs-function">(<span class="hljs-params">value, index, ...abc</span>) =&gt;</span> ({<span class="hljs-attr">v</span>:value, <span class="hljs-attr">i</span>:index, <span class="hljs-attr">a</span>:abc}))</pre>
<h3>7. Promises</h3>
<p>ES6에서는 표준 Promise가 제공된다.</p>
<p>아래는 <code>setTimeout</code> 을 이용한 지연된 비동기 실행에 대한 ES5 예시다.</p>
<pre class="hljs javascript">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Yay!'</span>)
}, <span class="hljs-number">1000</span>)</pre>
<p>위 예시를 ES6에서 Promise를 사용해서 재작성하면 아래와 같다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> wait1000 =  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{
  setTimeout(resolve, <span class="hljs-number">1000</span>)
}).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Yay!'</span>)
})</pre>
<p>위 예시를 화살표 함수를 사용해 재작성한 예시는 아래와 같다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> wait1000 =  <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span> {
  setTimeout(resolve, <span class="hljs-number">1000</span>)
}).then(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span> {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Yay!'</span>)
})</pre>
<p>ES5 보다 ES6의 Promise를 사용한 예시가 더 복잡해 보이지만 아래와 같이 중첩된 <code>setTimeout</code> 예시를 보면 Promise의 이점을 확인할 수 있다.</p>
<pre class="hljs javascript">setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Yay!'</span>)
  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Wheeyee!'</span>)
  }, <span class="hljs-number">1000</span>)
}, <span class="hljs-number">1000</span>)</pre>
<p>아래는 ES6 Promise 로 작성된 예시.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> wait1000 =  <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>)=&gt;</span> {setTimeout(resolve, <span class="hljs-number">1000</span>)})

wait1000()
    .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Yay!'</span>)
        <span class="hljs-keyword">return</span> wait1000()
    })
    .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Wheeyee!'</span>)
    });</pre>
<p>조금 더 자세한 내용을 보고 싶다면 <a href="http://jamesknelson.com/grokking-es6-promises-the-four-functions-you-need-to-avoid-callback-hell/">Introduction to ES6 Promises – The Four Functions You Need To Avoid Callback Hell</a> 또는 <a href="https://github.com/gsfe/es2015features/tree/master/promise">gsfe/es2015features</a> 를 참고하자.</p>
<h3>8. 블록 범위 생성자 Let 및 Const (Block-Scoped Constructs Let and Const)</h3>
<p>let과 const는 중괄호(&quot;{}&quot;)로 정의된 블록으로 유효 범위(스코프)를 지정하는 새로운 var이다. 단, let은 변수를 const는 상수를 선언한다.</p>
<pre class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateTotalAmount</span> (<span class="hljs-params">vip</span>) </span>{
  <span class="hljs-keyword">var</span> amount = <span class="hljs-number">0</span>
  <span class="hljs-keyword">if</span> (vip) {
    <span class="hljs-keyword">var</span> amount = <span class="hljs-number">1</span>
  }
  { <span class="hljs-comment">// more crazy blocks!</span>
    <span class="hljs-keyword">var</span> amount = <span class="hljs-number">100</span>
    {
      <span class="hljs-keyword">var</span> amount = <span class="hljs-number">1000</span>
      }
  }
  <span class="hljs-keyword">return</span> amount
}
<span class="hljs-built_in">console</span>.log(calculateTotalAmount(<span class="hljs-literal">true</span>))</pre>
<p>위 예시의 결과는 1000 이다. var는 전역 또는 함수 내부로 유효 범위를 갖기 때문에 예시에 사용된 함수 내부의 &quot;{}&quot; 들은 아무런 역할을 하지 못한다. 아래는 위 예시에서 var를 let으로 바꾼 ES6 예시다.</p>
<pre class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateTotalAmount</span> (<span class="hljs-params">vip</span>) </span>{
  <span class="hljs-keyword">var</span> amount = <span class="hljs-number">0</span> <span class="hljs-comment">// probably should also be let, but you can mix var and let</span>
  <span class="hljs-keyword">if</span> (vip) {
    <span class="hljs-keyword">let</span> amount = <span class="hljs-number">1</span> <span class="hljs-comment">// first amount is still 0</span>
  }
  { <span class="hljs-comment">// more crazy blocks!</span>
    <span class="hljs-keyword">let</span> amount = <span class="hljs-number">100</span> <span class="hljs-comment">// first amount is still 0</span>
    {
      <span class="hljs-keyword">let</span> amount = <span class="hljs-number">1000</span> <span class="hljs-comment">// first amount is still 0</span>
      }
  }
  <span class="hljs-keyword">return</span> amount
}
<span class="hljs-built_in">console</span>.log(calculateTotalAmount(<span class="hljs-literal">true</span>))</pre>
<p>이 예시의 결과는 0 이다. let 으로 선언된 변수는 &quot;{}&quot; 블록 내부로 유효 범위가 한정되므로 100, 1000으로 할당된 변수는 해당 블록 내부에서만 유효하기 때문이다. <code>if</code> 블록 내부에서 let으로 선언된 amount 또한 해당 <code>if</code> 블록 내에서만 유효하므로 아무런 변경이 일어나지 않는다.</p>
<p>아래의 예시는 const를 사용한 예시다. const는 상수를 선언하는 것으로 여러번 선언될 수 없지만 let과 같이 블록 내부로 유효 범위가 한정되므로 아래의 예시는 오류가 발생하지 않는다.</p>
<pre class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateTotalAmount</span> (<span class="hljs-params">vip</span>) </span>{
  <span class="hljs-keyword">const</span> amount = <span class="hljs-number">0</span>
  <span class="hljs-keyword">if</span> (vip) {
    <span class="hljs-keyword">const</span> amount = <span class="hljs-number">1</span>
  }
  { <span class="hljs-comment">// more crazy blocks!</span>
    <span class="hljs-keyword">const</span> amount = <span class="hljs-number">100</span>
    {
      <span class="hljs-keyword">const</span> amount = <span class="hljs-number">1000</span>
      }
  }
  <span class="hljs-keyword">return</span> amount
}
<span class="hljs-built_in">console</span>.log(calculateTotalAmount(<span class="hljs-literal">true</span>))</pre>
<h3>9. 클래스 (Classes)</h3>
<p>ES6에는 class 키워드가 추가되어 ES5의 prototype 기반 상속보다 명확하게 class를 정의할 수 있다. <code>get</code> 과 <code>set</code> 키워드 외에도 <code>static</code> 키워드를 사용해 static 메소드를 정의하는 것도 가능하다.</p>
<pre class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">baseModel</span> </span>{
  <span class="hljs-keyword">constructor</span>(options = {}, data = []) { <span class="hljs-comment">// class constructor</span>
        <span class="hljs-keyword">this</span>.name = <span class="hljs-string">'Base'</span>
    <span class="hljs-keyword">this</span>.url = <span class="hljs-string">'http://azat.co/api'</span>
        <span class="hljs-keyword">this</span>.data = data
    <span class="hljs-keyword">this</span>.options = options
    }

    getName() { <span class="hljs-comment">// class method</span>
        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Class name: <span class="hljs-subst">${<span class="hljs-keyword">this</span>.name}</span>`</span>)
    }
}</pre>
<p>constructor 는 class 내부에 하나만 존재할 수 있으며 메소드 정의에 function 또는 콜론(&quot;:&quot;)이 더이상 필요하지 않다. 단, property의 경우 메소드와 달리 생성자에서 값을 할당해야 한다.</p>
<p>또한 아래의 예시와 같이 <code>class NAME extends PARENT_NAME</code> 형식으로 상속이 가능하다.  상속시 부모 생성자를 호출하기 위해 <code>super()</code> 를 사용할 수 있다. 생성자가 아닌 메소드에서는 <code>super</code> 키워드를 사용해서 부모 메소드에 접근한다.</p>
<pre class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AccountModel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">baseModel</span> </span>{
    <span class="hljs-keyword">constructor</span>(options, data) {
      <span class="hljs-keyword">super</span>({<span class="hljs-attr">private</span>: <span class="hljs-literal">true</span>}, [<span class="hljs-string">'32113123123'</span>, <span class="hljs-string">'524214691'</span>]) <span class="hljs-comment">//call the parent method with super</span>
      <span class="hljs-keyword">this</span>.name = <span class="hljs-string">'Account Model'</span>
      <span class="hljs-keyword">this</span>.url +=<span class="hljs-string">'/accounts/'</span>
    }

    get accountsData() { <span class="hljs-comment">//calculated attribute getter</span>
      <span class="hljs-comment">// ... make XHR</span>
      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.data
    }
}</pre>
<p>class 는 <code>get</code> 과 <code>set</code> 키워드를 사용할 수 있으며 선언된 함수는 아래와 같이 사용할 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">let</span> accounts = <span class="hljs-keyword">new</span> AccountModel(<span class="hljs-number">5</span>)
accounts.getName()
<span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Data is %s'</span>, accounts.accountsData)</pre>
<p>위 예시를 실행하면 아래와 같은 결과를 얻을 수 있다.</p>
<pre class="hljs javascript">Class name: Account Model
Data is %s <span class="hljs-number">32113123123</span>,<span class="hljs-number">524214691</span></pre>
<h3>10. 모듈 (Modules)</h3>
<p>ES6 에서 모듈을 공식적으로 제공하기 전까지는 CommonJS, AMD, RequireJS 등의 비공식 모듈 스펙을 사용해 왔다. ES6에서 제공하는 모듈 스펙은 기존과 유사하지만 차이가 있다.</p>
<p>ES5에서 CommonJS를 이용해서 모듈을 사용하는 예시는 아래와 같다(module.js).</p>
<pre class="hljs javascript"><span class="hljs-built_in">module</span>.exports = {
  <span class="hljs-attr">port</span>: <span class="hljs-number">3000</span>,
  <span class="hljs-attr">getAccounts</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    ...
  }
}</pre>
<p>main.js 파일에서 위에서 정의한 모듈을 불러서 사용하는 예시는 아래와 같다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">var</span> service = <span class="hljs-built_in">require</span>(<span class="hljs-string">'module.js'</span>)
<span class="hljs-built_in">console</span>.log(service.port) <span class="hljs-comment">// 3000</span></pre>
<p>여기서 부터는 ES6의 <code>import</code> 와 <code>export</code> 를 사용해서 유사한 기능을 구현한 예시다(module.js).</p>
<pre class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">var</span> port = <span class="hljs-number">3000</span>
<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAccounts</span>(<span class="hljs-params">url</span>) </span>{
  ...
}</pre>
<p>main.js 파일에서는 <code>import</code> 를 사용해서 module.js 모듈을 불러올 수 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">import</span> {port, getAccounts} <span class="hljs-keyword">from</span> <span class="hljs-string">'module'</span>
<span class="hljs-built_in">console</span>.log(port) <span class="hljs-comment">// 3000</span></pre>
<p>위와 유사하지만 <code>export</code> 된 모든 변수를 아래와 같이 하나의 구조화된 데이터로 받을 수도 있다.</p>
<pre class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> service <span class="hljs-keyword">from</span> <span class="hljs-string">'module'</span>
<span class="hljs-built_in">console</span>.log(service.port) <span class="hljs-comment">// 3000</span></pre>
<h3>ES6 당장 사용할 수 있는 방법 (<a href="https://babeljs.io/">Babel</a>)</h3>
<p>ES6는 확정되었지만 아직 모든 브라우저에서 완전하게 지원되지 않는다. 따라서 지금 당장 ES6 사용하고 싶다면 <a href="https://babeljs.io/">Babel</a>과 같은 컴파일러를 사용해야 한다.
Babel은 독립 실행형 도구로 실행하거나 빌드 시스템에서 사용할 수 있다. <a href="https://gruntjs.com/">Grunt</a>, <a href="https://gulpjs.com/">Gulp</a> 및 <a href="https://webpack.github.io/">Webpack</a> 용 Babel 플러그인이 있다.</p>
<h3>ES6의 기타 특징</h3>
<p>참고로 이 외에도 여러가지 특징이 있으니 관심이 있다면 <a href="https://github.com/lukehoban/es6features/">git.io/es6features</a>를 번역한  <a href="http://seokjun.kr/ecmascript-6-features/">ECMAScript 6 Features</a>를 참고하면 된다.</p>
<hr />
<p>참고</p>
<ul>
<li><a href="https://webapplog.com/es6/">Top 10 ES6 Features Every Busy JavaScript Developer Must Know</a></li>
<li><a href="https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8">자바스크립트-위키피디아</a></li>
<li><a href="https://ko.wikipedia.org/wiki/ECMA%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8">ECMA스크립트-위키피디아</a></li>
<li><a href="http://takeuu.tistory.com/93">ECMAScript, ES6란?-워너비스페셜</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/07/14/composer-autoloader-optimization/</id><title type="html">PHP Composer Autoloader 최적화</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/07/14/composer-autoloader-optimization/"/><published>2017-07-14T12:42:35+09:00</published><updated>2017-07-14T12:42:35+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[Composer Autoloader 최적화 Composer Autoloader는 상대적으로 빠르게 실행되나 PSR-4 및 PSR-0 autoload 규칙이 설정되는 방식으로 인해 클래스 이름을 확인하기 전에 파일 시스템을 검사해야 한다. 이 경우 성능이 떨어지지만 개발 환경에서는 새로운 Class를 추가할 때 autoload 구성을 다시 작성하지 않고도 즉시 사용할 수 있으므로 편리하다. 그러나 production 환경에서는 클래스의 추가가 발생하지 않기 때문에 성능을 위해서 파일 시스템을 검사하지 않고 클래스를 로드하는 것이 좋다. Composer는 이러한 문제를 개선하기 위해 autoload 최적화 옵션을 제공한다. 최적화 레벨 1 : 클래스 맵 생성 autoload 최적화를 위한 클래스 맵을 생성하는 방법은 다음과 같은 몇가지가 존재한다. composer.json에 optimize-autoloader을 추가 install 또는 update 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다. { "name": "project", ... "config": { "optimize-autoloader": true } } composer install / update 시 -o 또는 --optimize-autoloader 옵션을 추가 install 또는 update 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다. $ composer install -o $ composer update --optimize-autoloader composer dump-autoload를 -o 또는 --optimize 옵션과 함께 실행 패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다. $ composer dump-autoload --optimize 클래스 맵 생성은 기본적으로 PSR-4 / PSR-0 규칙을 클래스 맵 규칙으로 변환한다. 클래스 맵이 클래스의 존재와 위치를 보장하므로 Composer는 파일 시스템을 검사하지 않고 빠르게 클래스를 로드할 수 있다. 특히 PHP 5.6 이상에서는 opcache가 활성화되어 있는 경우 클래스 맵이 opcache에도 캐시될 수 있으므로 초기화 시간을 크게 향상된다. Trade-offs 최적화 레벨 1의 경우 특별한 Trade-offs가 없으므로 production 환경에서는 항상 활성화하는 것이 좋다. 단, 클래스 맵에 누락된 클래스를 호출하는 경우 PSR-4 규칙이 대체되어 파일 시스템 검사가 발생할 수 있다. 하지만 모든 클래스를 검사하는 것보다는 당연히 성능이 뛰어나므로 사용하지 않을 이유가 없다. 누락된 클래스에 의한 성능 저하를 해결하기 위해서 두가지의 레벨 2 최적화 옵션이 존재한다. 이 옵션들은 프로젝트에 존재하지 않는 클래스에 대한 class_exists 검사가 많은 경우 사용할 수 있다. 최적화 레벨 2/A : 신뢰할 수 있는 클래스 맵 autoload 최적화를 위한 신뢰할 수 있는 클래스 맵을 생성하는 방법은 다음과 같은 몇가지가 존재한다. composer.json에 classmap-authoritative을 추가 install 또는 update 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다. { "name": "project", ... "config": { "classmap-authoritative": true } } composer install / update 시 -a 또는 --classmap-authoritative 옵션을 추가 install 또는 update 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다. $ composer install -a $ composer update --classmap-authoritative composer dump-autoload를 -a 또는 --classmap-authoritative 옵션과 함께 실행 패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다. $ composer dump-autoload --classmap-authoritative 이 옵션이 활성화될 경우 클래스맵에 찾는 클래스가 없더라도 PSR-4 규칙에 따른 파일 시스템 조사를 하지 않도록 하는 것이다. 또한 이 옵션을 사용하면 레벨 1 최적화는 자동적으로 활성화 된다. 이 옵션의 추가 전후의 autoload_real.php 파일 변화를 보면 차이가 명확히 보인다. public static function getLoader() { ... } else { $map = require __DIR__ . '/autoload_namespaces.php'; foreach ($map as $namespace => $path) { $loader->set($namespace, $path); } $map = require __DIR__ . '/autoload_psr4.php'; foreach ($map as $namespace => $path) { $loader->setPsr4($namespace, $path); } $classMap = require __DIR__ . '/autoload_classmap.php'; if ($classMap) { $loader->addClassMap($classMap); } } ... } public static function getLoader() { ... } else { $classMap = require __DIR__ . '/autoload_classmap.php'; if ($classMap) { $loader->addClassMap($classMap); } } ... } Trade-offs 이 욥션을 사용하면 PSR-4 규칙을 통한 파일 시스템 검사를하지 않으므로 autoloader가 항상 빠르게 동작한다. 하지만 이로 인해 런타임 상에서 클래스가 생성되는 경우 클래스를 찾을 수 없으므로 "class not found" 오류가 날 수 있으므로 주의해서 사용해야 한다. 특히 개발 환경에서는 클래스의 추가가 자주 일어날 수 있으므로 불편하다(클래스 추가시마다 클래스 맵을 재생성 해야 함). 또한 이 최적화 옵션은 최적화 레벨 2/B와 동시에 사용할 수 없다. 최적화 수준 2 / B : APCu 캐시 autoload 최적화를 위한 APCu 캐시를 사용하는 방법은 다음과 같은 몇가지가 존재한다. composer.json에 apcu-autoloader을 추가 install 또는 update 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다. { "name": "project", ... "config": { "apcu-autoloader": true } } composer install / update 시 --apcu-autoloader 옵션을 추가 install 또는 update 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다. $ composer install --apcu-autoloader $ composer update --apcu-autoloader composer dump-autoload를 --apcu 옵션과 함께 실행 패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다. $ composer dump-autoload --apcu 이 옵션은 APCu 캐시를 클래스 맵의 fallback으로 추가한다. 발견된 class는 APCu에 캐시되므로 다음 요청시에는 빠르게 반환한다. 최적화 레벨 2/A와 달리 레벨 1 최적화를 자동적으로 활성화하지 않으므로 필요시 수동으로 활성화 해야 한다. Trade-offs APCu가 사용 가능해야 하는 제약이 있으며 APCu 메모리를 사용해 autoload를 수행하지만 신뢰할 수 있는 클래스 맵에서와 같이 클래스를 찾지 못하는 오류가 발생할 수 있다. 또한 이 최적화 옵션은 최적화 레벨 2/A와 동시에 사용할 수 없다. 결론 위에서 소개한 바와 같이 클래스 맵을 생성하는 최적화 레벨 1은 기본적으로 항상하는 것이 좋다. 최적화 레벨 2의 경우는 성능 상의 이점이 있으나 프로그램의 상황에 따라 오류 발생 가능성이 있으니 production 환경에서 상황에 맞게 선택적으로 사용하는 것이 좋다. 참고 : PHP Composer Autoloader Optimization]]></summary><content type="html"><![CDATA[<h3>Composer Autoloader 최적화</h3>
<p>Composer Autoloader는 상대적으로 빠르게 실행되나 PSR-4 및 PSR-0 autoload 규칙이 설정되는 방식으로 인해 클래스 이름을 확인하기 전에 파일 시스템을 검사해야 한다.
이 경우 성능이 떨어지지만 개발 환경에서는 새로운 Class를 추가할 때 autoload 구성을 다시 작성하지 않고도 즉시 사용할 수 있으므로 편리하다.
그러나 production 환경에서는 클래스의 추가가 발생하지 않기 때문에 성능을 위해서 파일 시스템을 검사하지 않고 클래스를 로드하는 것이 좋다.</p>
<p>Composer는 이러한 문제를 개선하기 위해 autoload 최적화 옵션을 제공한다.</p>
<h3>최적화 레벨 1 : 클래스 맵 생성</h3>
<p>autoload 최적화를 위한 클래스 맵을 생성하는 방법은 다음과 같은 몇가지가 존재한다.</p>
<ul>
<li><code>composer.json</code>에 <code>optimize-autoloader</code>을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다.</p>
</blockquote>
<pre class="hljs json">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"project"</span>,
  ...
  <span class="hljs-attr">"config"</span>: {
    <span class="hljs-attr">"optimize-autoloader"</span>: <span class="hljs-literal">true</span>
  }
}</pre>
<ul>
<li><code>composer install</code> / <code>update</code> 시 <code>-o</code> 또는 <code>--optimize-autoloader</code> 옵션을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다.</p>
</blockquote>
<pre class="hljs bash">$ composer install -o
$ composer update --optimize-autoloader</pre>
<ul>
<li><code>composer dump-autoload</code>를 <code>-o</code> 또는 <code>--optimize</code> 옵션과 함께 실행</li>
</ul>
<blockquote>
<p>패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다.</p>
</blockquote>
<pre class="hljs bash">$ composer dump-autoload --optimize</pre>
<p>클래스 맵 생성은 기본적으로 PSR-4 / PSR-0 규칙을 클래스 맵 규칙으로 변환한다.
클래스 맵이 클래스의 존재와 위치를 보장하므로 Composer는 파일 시스템을 검사하지 않고 빠르게 클래스를 로드할 수 있다.</p>
<p>특히 PHP 5.6 이상에서는 opcache가 활성화되어 있는 경우 클래스 맵이 opcache에도 캐시될 수 있으므로 초기화 시간을 크게 향상된다.</p>
<h4>Trade-offs</h4>
<p>최적화 레벨 1의 경우 특별한 Trade-offs가 없으므로 production 환경에서는 항상 활성화하는 것이 좋다.</p>
<p>단, 클래스 맵에 누락된 클래스를 호출하는 경우 PSR-4 규칙이 대체되어 파일 시스템 검사가 발생할 수 있다.
하지만 모든 클래스를 검사하는 것보다는 당연히 성능이 뛰어나므로 사용하지 않을 이유가 없다.</p>
<p>누락된 클래스에 의한 성능 저하를 해결하기 위해서 두가지의 레벨 2 최적화 옵션이 존재한다. 이 옵션들은 프로젝트에 존재하지 않는 클래스에 대한 <code>class_exists</code> 검사가 많은 경우 사용할 수 있다.</p>
<h3>최적화 레벨 2/A : 신뢰할 수 있는 클래스 맵</h3>
<p>autoload 최적화를 위한 신뢰할 수 있는 클래스 맵을 생성하는 방법은 다음과 같은 몇가지가 존재한다.</p>
<ul>
<li><code>composer.json</code>에 <code>classmap-authoritative</code>을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다.</p>
</blockquote>
<pre class="hljs json">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"project"</span>,
  ...
  <span class="hljs-attr">"config"</span>: {
    <span class="hljs-attr">"classmap-authoritative"</span>: <span class="hljs-literal">true</span>
  }
}</pre>
<ul>
<li><code>composer install</code> / <code>update</code> 시 <code>-a</code> 또는 <code>--classmap-authoritative</code> 옵션을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다.</p>
</blockquote>
<pre class="hljs bash">$ composer install -a
$ composer update --classmap-authoritative</pre>
<ul>
<li><code>composer dump-autoload</code>를 <code>-a</code> 또는 <code>--classmap-authoritative</code> 옵션과 함께 실행</li>
</ul>
<blockquote>
<p>패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다.</p>
</blockquote>
<pre class="hljs bash">$ composer dump-autoload --classmap-authoritative</pre>
<p>이 옵션이 활성화될 경우 클래스맵에 찾는 클래스가 없더라도 PSR-4 규칙에 따른 파일 시스템 조사를 하지 않도록 하는 것이다.
또한 이 옵션을 사용하면 레벨 1 최적화는 자동적으로 활성화 된다.</p>
<p>이 옵션의 추가 전후의 <code>autoload_real.php</code> 파일 변화를 보면 차이가 명확히 보인다.</p>
<pre class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLoader</span><span class="hljs-params">()</span>
</span>{
    ...
    } <span class="hljs-keyword">else</span> {
        $map = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/autoload_namespaces.php'</span>;
        <span class="hljs-keyword">foreach</span> ($map <span class="hljs-keyword">as</span> $namespace =&gt; $path) {
            $loader-&gt;set($namespace, $path);
        }

        $map = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/autoload_psr4.php'</span>;
        <span class="hljs-keyword">foreach</span> ($map <span class="hljs-keyword">as</span> $namespace =&gt; $path) {
            $loader-&gt;setPsr4($namespace, $path);
        }

        $classMap = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/autoload_classmap.php'</span>;
        <span class="hljs-keyword">if</span> ($classMap) {
            $loader-&gt;addClassMap($classMap);
        }
    }
    ...
}</pre>
<pre class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLoader</span><span class="hljs-params">()</span>
</span>{
    ...
    } <span class="hljs-keyword">else</span> {
        $classMap = <span class="hljs-keyword">require</span> <span class="hljs-keyword">__DIR__</span> . <span class="hljs-string">'/autoload_classmap.php'</span>;
        <span class="hljs-keyword">if</span> ($classMap) {
            $loader-&gt;addClassMap($classMap);
        }
    }
    ...
}</pre>
<h4>Trade-offs</h4>
<p>이 욥션을 사용하면 PSR-4 규칙을 통한 파일 시스템 검사를하지 않으므로 autoloader가 항상 빠르게 동작한다.
하지만 이로 인해 런타임 상에서 클래스가 생성되는 경우 클래스를 찾을 수 없으므로 &quot;class not found&quot; 오류가 날 수 있으므로 주의해서 사용해야 한다.
특히 개발 환경에서는 클래스의 추가가 자주 일어날 수 있으므로 불편하다(클래스 추가시마다 클래스 맵을 재생성 해야 함). </p>
<p>또한 이 최적화 옵션은 최적화 레벨 2/B와 동시에 사용할 수 없다.  </p>
<h3>최적화 수준 2 / B : APCu 캐시</h3>
<p>autoload 최적화를 위한 APCu 캐시를 사용하는 방법은 다음과 같은 몇가지가 존재한다.</p>
<ul>
<li><code>composer.json</code>에 <code>apcu-autoloader</code>을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주지 않아도 자동적으로 최적화를 수행하므로 편리하다.</p>
</blockquote>
<pre class="hljs json">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"project"</span>,
  ...
  <span class="hljs-attr">"config"</span>: {
    <span class="hljs-attr">"apcu-autoloader"</span>: <span class="hljs-literal">true</span>
  }
}</pre>
<ul>
<li><code>composer install</code> / <code>update</code> 시 <code>--apcu-autoloader</code> 옵션을 추가</li>
</ul>
<blockquote>
<p><code>install</code> 또는 <code>update</code> 시 별도의 옵션을 주어야 하지만 필요시에만 최적화를 하려는 경우 유용하다.</p>
</blockquote>
<pre class="hljs bash">$ composer install --apcu-autoloader
$ composer update --apcu-autoloader</pre>
<ul>
<li><code>composer dump-autoload</code>를 <code>--apcu</code> 옵션과 함께 실행</li>
</ul>
<blockquote>
<p>패키지들이 이미 설치된 이후에 최적화면 수행하고자 할 경우 사용 가능하다.</p>
</blockquote>
<pre class="hljs bash">$ composer dump-autoload --apcu</pre>
<p>이 옵션은 APCu 캐시를 클래스 맵의 fallback으로 추가한다. 발견된 class는 APCu에 캐시되므로 다음 요청시에는 빠르게 반환한다.
최적화 레벨 2/A와 달리 레벨 1 최적화를 자동적으로 활성화하지 않으므로 필요시 수동으로 활성화 해야 한다.</p>
<h4>Trade-offs</h4>
<p>APCu가 사용 가능해야 하는 제약이 있으며 APCu 메모리를 사용해 autoload를 수행하지만 신뢰할 수 있는 클래스 맵에서와 같이 클래스를 찾지 못하는 오류가 발생할 수 있다.</p>
<p>또한 이 최적화 옵션은 최적화 레벨 2/A와 동시에 사용할 수 없다.</p>
<h3>결론</h3>
<p>위에서 소개한 바와 같이 클래스 맵을 생성하는 최적화 레벨 1은 기본적으로 항상하는 것이 좋다.
최적화 레벨 2의 경우는 성능 상의 이점이 있으나 프로그램의 상황에 따라 오류 발생 가능성이 있으니 production 환경에서 상황에 맞게 선택적으로 사용하는 것이 좋다.</p>
<hr />
<p>참고 : <a href="https://getcomposer.org/doc/articles/autoloader-optimization.md">PHP Composer Autoloader Optimization</a></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/06/26/mac-os-git-korean-file-name-corequotepath/</id><title type="html">Mac 에서 git 사용시 한글 파일명 문제 2</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/06/26/mac-os-git-korean-file-name-corequotepath/"/><published>2017-06-26T17:25:35+09:00</published><updated>2017-06-26T17:36:27+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><category term="git" label="git" /><summary><![CDATA[Mac 에서 git 사용시 한글 파일명 문제 라는 글에서 core.precomposeunicode 옵션을 설정해서 한글 파일명 사용시 자소 단위로 분리되는 문제를 해결하는 방법을 소개 했었다. 그런데 맥에서 한글 파일명을 사용할 경우에 다른 문제가 하나더 있다. git status 명령으로 변경 파일을 보면 한글이 \306\301... 와 같이 보이는 문제가 있다. 보이기만 이렇게 보이는 것이면 그냥 참겠지만 commit 하는 등의 과정에서 파일명을 지정하는게 어려워진다. 이 문제를 해결하는 방법은 아래와 같다. git config --global core.quotepath false git config --local core.quotepath false Git Documentation core.quotePath Commands that output paths (e.g. ls-files, diff), will quote "unusual" characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. \t for TAB, \n for LF, \ for backslash) or bytes with values larger than 0x80 (e.g. octal \302\265 for "micro" in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered "unusual" any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered "unusual". Many commands can output pathnames completely verbatim using the -z option. The default value is true. 결론을 이야기 하자면 특별한 이유가 있지 않는 이상 한글 파일명은 사용하지 않는 것이 정신 건강에 좋다. 그래서 나는 가급적 사용하지 않으려고 하지만 간혹 어쩔 수 없이 써야하는 경우가 있어 위 방법들을 남겨둔다.]]></summary><content type="html"><![CDATA[<p><a href="https://blog.asamaru.net/2016/10/19/mac-os-git-korean-file-name-error/">Mac 에서 git 사용시 한글 파일명 문제</a> 라는 글에서 <code>core.precomposeunicode</code> 옵션을 설정해서 한글 파일명 사용시 자소 단위로 분리되는 문제를 해결하는 방법을 소개 했었다.
그런데 맥에서 한글 파일명을 사용할 경우에 다른 문제가 하나더 있다. <code>git status</code> 명령으로 변경 파일을 보면 한글이 <code>\306\301...</code> 와 같이 보이는 문제가 있다. 보이기만 이렇게 보이는 것이면 그냥 참겠지만 commit 하는 등의 과정에서 파일명을 지정하는게 어려워진다.
이 문제를 해결하는 방법은 아래와 같다.</p>
<pre class="hljs bash">git config --global core.quotepath <span class="hljs-literal">false</span>
git config --<span class="hljs-built_in">local</span> core.quotepath <span class="hljs-literal">false</span></pre>
<blockquote>
<p><a href="http://git-scm.com/docs/git-config">Git Documentation</a></p>
<p><strong>core.quotePath</strong></p>
<p>Commands that output paths (e.g. ls-files, diff), will quote &quot;unusual&quot; characters in the pathname by enclosing the pathname in double-quotes and escaping those characters with backslashes in the same way C escapes control characters (e.g. \t for TAB, \n for LF, \ for backslash) or bytes with values larger than 0x80 (e.g. octal \302\265 for &quot;micro&quot; in UTF-8). If this variable is set to false, bytes higher than 0x80 are not considered &quot;unusual&quot; any more. Double-quotes, backslash and control characters are always escaped regardless of the setting of this variable. A simple space character is not considered &quot;unusual&quot;. Many commands can output pathnames completely verbatim using the -z option. The default value is true.</p>
</blockquote>
<hr />
<p>결론을 이야기 하자면 특별한 이유가 있지 않는 이상 한글 파일명은 사용하지 않는 것이 정신 건강에 좋다. 그래서 나는 가급적 사용하지 않으려고 하지만 간혹 어쩔 수 없이 써야하는 경우가 있어 위 방법들을 남겨둔다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/06/05/bitbar-os-x-menu-bar-app/</id><title type="html">BitBar 소개 - OS X Menu Bar에 원하는 모니터링 정보 넣기 </title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/06/05/bitbar-os-x-menu-bar-app/"/><published>2017-06-05T13:50:43+09:00</published><updated>2017-06-05T13:50:43+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><summary><![CDATA[BitBar 를 사용하면 Mac OS X 메뉴 막대에 모든 스크립트나 프로그램의 출력을 넣을 수 있다. 이미 BitBar 사이트에서 제공하고 있는 다양한 플러그인이 존재하지만 출력 결과에 대한 규칙만 지킨다면 어떤 내용이라도 들어갈 수 있으므로 다양한 분야에 활용할 수 있다. 나의 경우는 서버 또는 서비스의 상태를 모니터링 하거나 구글 어날리틱스, 애드센스 등의 현황을 Menu Bar에서 바로 확인하기 위해 사용한다. 하지만 앞서 이야기한 것처럼 활용에 제한이 없으므로 자신이 모니터링하고자하는 모든 정보를 만들어 추가할 수 있다(게다가 간단하다). 설치 https://github.com/matryer/bitbar/releases 에 가서 최신 버전을 다운 받는다. BitBar 와 BitBarDistro 가 있는데 그냥 BitBar를 다운 받으면 된다. 압축을 풀어서 응용 프로그램 폴더에 넣고 실행한다. 플러그인 설치 BitBar에 표시되는 내용은 플러그인에서 출력한 결과들이므로 원하는 정보를 출력해 줄 플러그인들이 필요하다. 플러그인의 설치는 간단하다. 지정된 플러그인 폴더에 원하는 플러그인 파일을 넣고 메뉴에서 'Refresh' 를 실행하면 된다. BitBar는 플러그인을 실행해서 결과를 출력해주므로 해당 플러그인들은 실행 권한을 가지고 있어야 한다. chmod +x plugin.sh 플러그인 폴더의 위치를 확인하거나 변경하려면 Preferences 하위의 메뉴에서 원하는 메뉴를 고르면 된다. 플러그인 갱신 시간 설정 플러그인 실행 결과에 대한 갱신 시간은 플러그인의 파일 이름에 아래의 형식을 사용함으로써 지정 가능하다. {name}.{time}.{ext} name - 파일명 time - 새로 고침 빈도 10s - ten seconds 1m - one minute 2h - two hours 1d - a day ext - 파일 확장명 예를들어 date.1m.sh 플러그인은 1분 간격으로 실행되어 출력된 결과로 갱신된다. 플러그인 만들기 이미 만들어진 플러그인을 사용한 것뿐 아니라 Plugin API를 이용해서 원하는 플러그인을 직접 만들 수도 있다. 표준 출력을 사용하는 실행 가능한 스크립트 형식을 작성하는 것으로 플러그인을 만들 수 있다. 스크립트에서 사용하는 언어는 ruby, python php, bash 등 사용하는 시스템에서 사용 가능한 어떠한 언어도 사용할 수 있다. 여러 줄이 반복해서 출력할 수 있다. ---만으로 구성된 행이 있으면 그 아래의 행은 해당 플러그인의 드롬 다운에 표시되지만 메뉴 표시 줄 자체에는 나타나지 않는다. --로 시작하는 줄은 하위 메뉴로 나타난다. | 를 이용해서 해당 줄에 여러가지 정보를 포함할 수 있다. href=.. to make the item clickable color=.. to change their text color. eg. color=red or color=#ff0000 font=.. to change their text font. eg. font=UbuntuMono-Bold size=.. to change their text size. eg. size=12 bash=.. to make the item run a given script terminal with your script e.g. bash=/Users/user/BitBar_Plugins/scripts/nginx.restart.sh if there are spaces in the file path you will need quotes e.g. bash="/Users/user/BitBar Plugins/scripts/nginx.restart.sh" param1= to specify arguments to the script. additional params like this param2=foo param3=bar full example bash="/Users/user/BitBar_Plugins/scripts/nginx.restart.sh" param1=- verbose assuming that nginx.restart.sh is executable or bash=/usr/bin/ruby param1=/Users/user/rubyscript.rb param2=arg1 param3=arg2 if script is not executable terminal=.. start bash script without opening Terminal. true or false refresh=.. to make the item refresh the plugin it belongs to. If the item runs a script, refresh is performed after the script finishes. eg. refresh=true dropdown=.. May be set to true or false. If false, the line will only appear and cycle in the status bar but not in the dropdown length=.. to truncate the line to the specified number of characters. A … will be added to any truncated strings, as well as a tooltip displaying the full string. eg. length=10 trim=.. whether to trim leading/trailing whitespace from the title. true or false (defaults to true) alternate=true to mark a line as an alternate to the previous one for when the Option key is pressed in the dropdown templateImage=.. set an image for this item. The image data must be passed as base64 encoded string and should consist of only black and clear pixels. The alpha channel in the image can be used to adjust the opacity of black content, however. This is the recommended way to set an image for the statusbar. Use a 144 DPI resolution to support Retina displays. The imageformat can be any of the formats supported by Mac OS X image=.. set an image for this item. The image data must be passed as base64 encoded string. Use a 144 DPI resolution to support Retina displays. The imageformat can be any of the formats supported by Mac OS X emojize=false will disable parsing of github style :mushroom: into 🍄 ansi=false turns off parsing of ANSI codes. 아래는 matryer/bitbar 에 소개된 예시들이다. 예시들을 보면 알겠지만 자신이 익숙한 언어와 BitBar API를 사용해서 간단히 만들 수 있다. One line plugin #!/bin/bash date Multi-line plugin #!/bin/bash # the current date and time date # the current username echo $USER # the current user id id -u Multi-line plugin with extra data #!/bin/bash echo "One" echo "Two" echo "Three" echo "---" echo "Four" echo "Five" echo "Six" Only One, Two and Three will appear in the top bar Clicking the plugin menu item will show all lines Multi-line plugin with links and colors #!/bin/bash curl -m 1 http://example.com -I >/dev/null 2>&1 [ $? -gt 0 ] && echo "FAIL | color=red" || echo "OK | color=green" echo "---" echo "Show Graphs | color=#123def href=http://example.com/graph?foo=bar" echo "Show KPI Report | color=purple href=http://example.com/report"]]></summary><content type="html"><![CDATA[<p><a href="https://getbitbar.com/">BitBar</a> 를 사용하면 Mac OS X 메뉴 막대에 모든 스크립트나 프로그램의 출력을 넣을 수 있다. 이미 <a href="https://getbitbar.com/">BitBar</a> 사이트에서 제공하고 있는 다양한 플러그인이 존재하지만 출력 결과에 대한 규칙만 지킨다면 어떤 내용이라도 들어갈 수 있으므로 다양한 분야에 활용할 수 있다. </p>
<p>나의 경우는 서버 또는 서비스의 상태를 모니터링 하거나 구글 어날리틱스, 애드센스 등의 현황을 Menu Bar에서 바로 확인하기 위해 사용한다. 하지만 앞서 이야기한 것처럼 활용에 제한이 없으므로 자신이 모니터링하고자하는 모든 정보를 만들어 추가할 수 있다(게다가 간단하다).</p>
<hr />
<h3>설치</h3>
<ul>
<li><a href="https://github.com/matryer/bitbar/releases">https://github.com/matryer/bitbar/releases</a> 에 가서 최신 버전을 다운 받는다.
<ul>
<li>BitBar 와 BitBarDistro 가 있는데 그냥 BitBar를 다운 받으면 된다.</li>
</ul></li>
<li>압축을 풀어서 응용 프로그램 폴더에 넣고 실행한다.</li>
</ul>
<h3>플러그인 설치</h3>
<p>BitBar에 표시되는 내용은 플러그인에서 출력한 결과들이므로 원하는 정보를 출력해 줄 플러그인들이 필요하다.<br />
플러그인의 설치는 간단하다. 지정된 플러그인 폴더에 원하는 플러그인 파일을 넣고 메뉴에서 'Refresh' 를 실행하면 된다.  </p>
<p>BitBar는 플러그인을 실행해서 결과를 출력해주므로 해당 플러그인들은 실행 권한을 가지고 있어야 한다.</p>
<pre class="hljs bash">chmod +x plugin.sh</pre>
<p>플러그인 폴더의 위치를 확인하거나 변경하려면 Preferences 하위의 메뉴에서 원하는 메뉴를 고르면 된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/06/bitbar-os-x-menu-bar-app.png" alt="bitbar-os-x-menu-bar-app" width="503" height="414" /></p>
<h3>플러그인 갱신 시간 설정</h3>
<p>플러그인 실행 결과에 대한 갱신 시간은 플러그인의 파일 이름에 아래의 형식을 사용함으로써 지정 가능하다.</p>
<p><code>{name}.{time}.{ext}</code></p>
<ul>
<li>name - 파일명</li>
<li>time - 새로 고침 빈도
<ul>
<li>10s - ten seconds</li>
<li>1m - one minute</li>
<li>2h - two hours</li>
<li>1d - a day</li>
</ul></li>
<li>ext - 파일 확장명</li>
</ul>
<p>예를들어 <code>date.1m.sh</code> 플러그인은 1분 간격으로 실행되어 출력된 결과로 갱신된다.</p>
<h3>플러그인 만들기</h3>
<p>이미 만들어진 플러그인을 사용한 것뿐 아니라 <a href="https://github.com/matryer/bitbar#plugin-api">Plugin API</a>를 이용해서 원하는 플러그인을 직접 만들 수도 있다.</p>
<ul>
<li>표준 출력을 사용하는 실행 가능한 스크립트 형식을 작성하는 것으로 플러그인을 만들 수 있다. 
<ul>
<li>스크립트에서 사용하는 언어는 ruby, python php, bash 등 사용하는 시스템에서 사용 가능한 어떠한 언어도 사용할 수 있다.</li>
</ul></li>
<li>여러 줄이 반복해서 출력할 수 있다.</li>
<li><code>---</code>만으로 구성된 행이 있으면 그 아래의 행은 해당 플러그인의 드롬 다운에 표시되지만 메뉴 표시 줄 자체에는 나타나지 않는다.</li>
<li><code>--</code>로 시작하는 줄은 하위 메뉴로 나타난다.</li>
<li><code>|</code> 를 이용해서 해당 줄에 여러가지 정보를 포함할 수 있다.
<ul>
<li>href=.. to make the item clickable</li>
<li>color=.. to change their text color. eg. color=red or color=#ff0000</li>
<li>font=.. to change their text font. eg. font=UbuntuMono-Bold</li>
<li>size=.. to change their text size. eg. size=12</li>
<li>bash=.. to make the item run a given script terminal with your script e.g. bash=/Users/user/BitBar_Plugins/scripts/nginx.restart.sh if there are spaces in the file path you will need quotes
e.g. bash=&quot;/Users/user/BitBar Plugins/scripts/nginx.restart.sh&quot;</li>
<li>param1= to specify arguments to the script. additional params like this param2=foo param3=bar full example bash=&quot;/Users/user/BitBar_Plugins/scripts/nginx.restart.sh&quot; param1=- verbose assuming that nginx.restart.sh is executable or bash=/usr/bin/ruby param1=/Users/user/rubyscript.rb param2=arg1 param3=arg2 if script is not executable</li>
<li>terminal=.. start bash script without opening Terminal. true or false</li>
<li>refresh=.. to make the item refresh the plugin it belongs to. If the item runs a script, refresh is performed after the script finishes. eg. refresh=true</li>
<li>dropdown=.. May be set to true or false. If false, the line will only appear and cycle in the status bar but not in the dropdown</li>
<li>length=.. to truncate the line to the specified number of characters. A … will be added to any truncated strings, as well as a tooltip displaying the full string. eg. length=10</li>
<li>trim=.. whether to trim leading/trailing whitespace from the title. true or false (defaults to true)</li>
<li>alternate=true to mark a line as an alternate to the previous one for when the Option key is pressed in the dropdown</li>
<li>templateImage=.. set an image for this item. The image data must be passed as base64 encoded string and should consist of only black and clear pixels. The alpha channel in the image  can be used to adjust the opacity of black content, however. This is the recommended way to set an image for the statusbar. Use a 144 DPI resolution to support Retina displays. The  imageformat can be any of the formats supported by Mac OS X</li>
<li>image=.. set an image for this item. The image data must be passed as base64 encoded string. Use a 144 DPI resolution to support Retina displays. The imageformat can be any of the  formats supported by Mac OS X</li>
<li>emojize=false will disable parsing of github style :mushroom: into 🍄</li>
<li>ansi=false turns off parsing of ANSI codes.</li>
</ul></li>
</ul>
<hr />
<p>아래는 <a href="https://github.com/matryer/bitbar">matryer/bitbar</a> 에 소개된 예시들이다. 예시들을 보면 알겠지만 자신이 익숙한 언어와 BitBar API를 사용해서 간단히 만들 수 있다.</p>
<h4>One line plugin</h4>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>
date</pre>
<h4>Multi-line plugin</h4>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash
</span>
<span class="hljs-comment"># the current date and time</span>
date

<span class="hljs-comment"># the current username</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$USER</span>

<span class="hljs-comment"># the current user id</span>
id -u</pre>
<h4>Multi-line plugin with extra data</h4>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"One"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Two"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Three"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"---"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Four"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Five"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Six"</span></pre>
<ul>
<li>Only One, Two and Three will appear in the top bar</li>
<li>Clicking the plugin menu item will show all lines</li>
</ul>
<h4>Multi-line plugin with links and colors</h4>
<pre class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>
curl -m 1 http://example.com -I &gt;/dev/null 2&gt;&amp;1
[ $? -gt 0 ] &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">"FAIL | color=red"</span> || <span class="hljs-built_in">echo</span> <span class="hljs-string">"OK | color=green"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"---"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Show Graphs | color=#123def href=http://example.com/graph?foo=bar"</span>
<span class="hljs-built_in">echo</span> <span class="hljs-string">"Show KPI Report | color=purple href=http://example.com/report"</span></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/04/script-async-defer/</id><title type="html">script의 async와 defer 속성</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/04/script-async-defer/"/><published>2017-05-04T13:23:55+09:00</published><updated>2017-05-04T13:23:55+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[웹 브라우저는 html을 랜더링하는 과정에서 css(<link type='text/css'>) 또는 js(<script>) 를 만나면 동기적으로 처리한다. 다시 말해 해당 내용이 해석되고 실행되기 전에는 뒤에 나오는 내용을 처리하지 않는다는 것이다. 이 부분은 화면의 랜더링 속도에 큰 영향을 줄 수 있다(사용자 경험 측면에서 큰 영향을 주며 SEO와도 관련된다). 이와 관련된 자세한 내용은 HTML Critical rendering path의 이해라는 글에 있으니 필요하면 참고 바란다. css의 경우는 화면을 랜더링하는데 필요한 정보를 담고 있으므로 해당 내용을 출력하기 전에 해석되는 것이 당연히 유리하다(화면이 여러번 랜더링되는 것을 줄일 수 있다). css에 대한 부분도 최적화를 위해 화면에 보여지는 영역과 숨겨진 영역에 대한 css를 분리 호출하는 것을 권장하는 등 최적화에 관련된 여러가지 이슈가 있다. 하지만 이 부분은 여기서 다루고자하는 내용이 아니므로 일단 넘어가자. js의 경우 대부분 화면 출력과 관련되기 보다 기능적 처리에 관련된 경우가 많다. 웹앱 등의 경우 출력과 직접적인 관련이 있을 수도 있으나 이 또한 기본적인 화면이 출력된 이후에 처리되는 것이 웹 페이지를 빠르게 랜더링하는데 유리하기 때문에 처리를 지연하는 것이 좋다. 이러한 이유로 대부분의 경우 css는 <head> 영역에 js는 </body> 바로 앞에 선언하는 것을 추천한다. 이 방식은 아래에 기술하겠지만 오래된 브라우저에서도 동일한 효과를 얻는 좋은 방법이 될 수 있다. 하지만 이 방법 외에도 <script>에는 async 속성과 defer 속성을 사용하는 방법이 있다. 이 글에서는 이 두가지 속성에 대해서 이야기 하고자 한다. 일반적인 실행 async와 defer의 동작에 대해 알아보기 전에 기본적인 <script>의 실행 과정에 대해 알아보자. 기본적으로 <script>는 인라인 코드의 경우 즉시 해석되고 실행될 수 있지만 그렇지 않은 경우는 해당 파일을 가져올 때까지 HTML 문서의 구문 분석을 중단한다. 위 그림에서 보여주듯이 스크립트를 가져 와서 실행하기 위해 HTML 구문 분석이 일시 중지되므로 HTML이 화면에 출력되는 시간이 길어진다. async 속성이 추가된 경우의 실행 async 속성은 브라우저에 스크립트 파일이 비동기적으로 실행될 수 있음을 나타내기 위해 사용된다. HTML 구문 분석기는 스크립트 태그에 도달한 지점에서 스크립트를 가져오고 실행하기 위해 일시 중지 할 필요가 없다. 따라서 HTML 구문 분석과 병행하여 스크립트를 가져온 후 스크립트가 준비 될 때마다 즉시 실행이 가능하다. 그러므로 실행의 순서가 다운로드 완료 시점의 결정되므로 실행 순서가 중요한 스크립트들에 async를 사용할 때는 유의해야 한다(HTML5 spec에 async=false 속성 지정시 호출 순서대로 실행되도록 추가됨(default : true)). <script async src="script.js"> 이 속성은 외부에 위치한 스크립트 파일에서만 사용할 수 있다. 외부 스크립트에 이 속성이 있으면 HTML 문서가 여전히 구문 분석되는 동안 파일을 다운로드 할 수 있으며 다운로드가 완료되면 스크립트가 실행될 수 있도록 구문 분석이 일시 중지 된다. defer 속성이 추가된 경우의 실행 defer 속성은 HTML 구문 분석이 완전히 완료되면 스크립트 파일을 실행하도록 브라우저에 지시한다. <script defer src="script.js"> 비동기적으로 로드된 스크립트와 마찬가지로, HTML 구문 분석이 실행되는 동안 파일을 다운로드 할 수 있다. 그러나 HTML 구문 분석이 완료되기 전에 스크립트 다운로드가 완료 되더라도 구문 분석이 완료 될 때까지 스크립트는 실행되지 않는다. 또한, async와는 다르게 호출된 순서대로 실행된다. 언제 사용할 것인가? 일반적인 스크립트 실행과 aync, defer 실행을 결정하기 위해서는 몇가지 확인해야 할 사항이 있다. <script> 요소는 어디에 있는가? <script> 요소가 문서 맨 끝에 있지 않으면 스크립트의 비동기 및 지연 실행이 더 중요하다. HTML 문서는 첫 번째 여는 <html> 요소부터 닫히는 순서로 파싱됩니다. 외부 소스 JavaScript 파일이 닫는 </body> 요소 바로 앞에 있으면, async 또는 defer 속성을 사용하는 것이 큰 효과가 없다(HTML 파서가 그 시점까지 문서의 대다수를 완성 했기 때문에 지연에 의미가 크게 없다는 것이다). 스크립트 자체가 포함되어 있는가? 다른 파일들에 종속적이지 않거나 종속성 자체가 없는 스크립트 파일의 경우 async 속성이 특히 유용하다. 파일이 어느 지점에서 실행되는지 정확히 알 필요가 없기 때문에 비동기 로드가 가장 적합하다. 스크립트가 완전히 구문 분석 된 DOM에 의존하는가? 대부분의 경우 스크립트 파일에는 DOM과의 상호 작용이 필요한 기능이 포함되어 있거나 페이지에 포함된 다른 파일에 대한 종속성이 있을 수 있다. 이러한 경우 스크립트를 실행하기 전에 DOM이 완전히 해석되어야 정상적인 동작을 할 수 있다. 일반적으로 이러한 스크립트 파일은 페이지의 맨 아래에 배치되어 모든 내용이 파싱된 후에 동작하도록 해야 한다. 그러나 어떤 이유로 든 문제의 파일을 다른 위치에 배치해야 하는 상황에서는 defer 속성을 사용할 수 있다. 스크립트가 작고 종속성을 가지는가? 마지막으로 스크립트가 비교적 작고 다른 파일에 의존하는 경우 인라인으로 정의하는 것이 더 유용 할 수 있다. 인라인을 사용하면 HTML 문서의 구문 분석이 차단되지만 크기가 작으면 큰 문제가 되지 않는다. 또한 다른 파일에 의존하는 경우 차단이 필요할 수 있다. async와 defer를 지원하는 브라우저 async 및 defer 속성은 최신 브라우저를 기준으로 보자면 매우 광범위하게 지원된다. 단, 이러한 속성의 동작은 JavaScript 엔진마다 약간 다를 수 있다. 예를 들어 V8(Chromium에서 사용됨)에서는 스크립트 실행을 위한 별도의 전용 스레드에서 속성에 관계없이 모든 스크립트를 구문 분석하려고 한다(New JavaScript techniques for rapid page loads). 지원하는 브라우저를 알아보기 전에 일부만 지원되는 경우에 대한 동작 과정을 알아보자. defer 속성만 있다면 스크립트는 페이지의 파싱이 완료된 후에 실행된다. 단, async와 defer 속성이 모두 지정된 경우 async 속성을 지원하는 최신 브라우저는 기본적으로 async 속성을 따른다. 하지만 async 속성을 지원하지 않는 구형 브라우저는 defer 속성의 지원 여부에 따라 결과가 다르다. defer 속성을 지원하는 경우 defer 속성에 의해 비동기적으로 스크립트를 실행한다. defer 조차도 지원하지 않는 구형 브라우저는 동기적으로 스크립트를 실행한다. IE는 defer의 경우 예전부터 부분 지원하고 있으나 async 속성은 10 버전 이상부터 지원(defer 완전 지원 포함) Firefox는 3.6 버전부터 모두 지원 chrome은 8 버전부터 모두 지원 safari는 5 버전부터 모두 지원(단, 5버전에서는 async=false 지원 안함) ios safari는 5.1 버전부터 모두 지원 android는 3 버전부터 모두 지원 결론적으로는 원만하면 다 지원한다. IE의 경우가 예외적이긴 하지만 IE 10 미만의 점유율이 극히 낮아진 이 시점에서 무시해도 될 듯하다(굳이 지원해야 한다면 aync, defer 속성을 사용하기 보다 </body> 바로 앞에 스크립트를 위치시키는 방법이 가장 낫다). 보다 상세한 지원 여부는 아래의 caniuse.com 을 참고하자. caniuse.com async 지원 확인 caniuse.com defer 지원 확인]]></summary><content type="html"><![CDATA[<p>웹 브라우저는 html을 랜더링하는 과정에서 css(<code>&lt;link type='text/css'&gt;</code>) 또는 js(<code>&lt;script&gt;</code>) 를 만나면 동기적으로 처리한다. 다시 말해 해당 내용이 해석되고 실행되기 전에는 뒤에 나오는 내용을 처리하지 않는다는 것이다. 이 부분은 화면의 랜더링 속도에 큰 영향을 줄 수 있다(사용자 경험 측면에서 큰 영향을 주며 SEO와도 관련된다). 이와 관련된 자세한 내용은 <a href="https://blog.asamaru.net/2017/05/04/understanding-the-critical-rendering-path/">HTML Critical rendering path의 이해</a>라는 글에 있으니 필요하면 참고 바란다.</p>
<p>css의 경우는 화면을 랜더링하는데 필요한 정보를 담고 있으므로 해당 내용을 출력하기 전에 해석되는 것이 당연히 유리하다(화면이 여러번 랜더링되는 것을 줄일 수 있다). css에 대한 부분도 최적화를 위해 화면에 보여지는 영역과 숨겨진 영역에 대한 css를 분리 호출하는 것을 권장하는 등 최적화에 관련된 여러가지 이슈가 있다. 하지만 이 부분은 여기서 다루고자하는 내용이 아니므로 일단 넘어가자.</p>
<p>js의 경우 대부분 화면 출력과 관련되기 보다 기능적 처리에 관련된 경우가 많다. 웹앱 등의 경우 출력과 직접적인 관련이 있을 수도 있으나 이 또한 기본적인 화면이 출력된 이후에 처리되는 것이 웹 페이지를 빠르게 랜더링하는데 유리하기 때문에 처리를 지연하는 것이 좋다.</p>
<p>이러한 이유로 대부분의 경우 css는 <code>&lt;head&gt;</code> 영역에 js는 <code>&lt;/body&gt;</code> 바로 앞에 선언하는 것을 추천한다. 이 방식은 아래에 기술하겠지만 오래된 브라우저에서도 동일한 효과를 얻는 좋은 방법이 될 수 있다. 하지만 이 방법 외에도 <code>&lt;script&gt;</code>에는 <a href="https://www.w3schools.com/tags/att_script_async.asp">async</a> 속성과 <a href="https://www.w3schools.com/tags/att_script_defer.asp">defer</a> 속성을 사용하는 방법이 있다. 이 글에서는 이 두가지 속성에 대해서 이야기 하고자 한다.</p>
<h3>일반적인 실행</h3>
<p>async와 defer의 동작에 대해 알아보기 전에 기본적인 <code>&lt;script&gt;</code>의 실행 과정에 대해 알아보자. 기본적으로 <code>&lt;script&gt;</code>는 인라인 코드의 경우 즉시 해석되고 실행될 수 있지만 그렇지 않은 경우는 해당 파일을 가져올 때까지 HTML 문서의 구문 분석을 중단한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/script-async-defer-1.png" alt="javascript-execution" width="780" height="152" /></p>
<p>위 그림에서 보여주듯이 스크립트를 가져 와서 실행하기 위해 HTML 구문 분석이 일시 중지되므로 HTML이 화면에 출력되는 시간이 길어진다.</p>
<h3>async 속성이 추가된 경우의 실행</h3>
<p>async 속성은 브라우저에 스크립트 파일이 비동기적으로 실행될 수 있음을 나타내기 위해 사용된다. HTML 구문 분석기는 스크립트 태그에 도달한 지점에서 스크립트를 가져오고 실행하기 위해 일시 중지 할 필요가 없다. 따라서 HTML 구문 분석과 병행하여 스크립트를 가져온 후 스크립트가 준비 될 때마다 즉시 실행이 가능하다. 그러므로 <strong>실행의 순서가 다운로드 완료 시점의 결정되므로 실행 순서가 중요한 스크립트들에 async를 사용할 때는 유의해야 한다(HTML5 spec에 async=false 속성 지정시 호출 순서대로 실행되도록 추가됨(default : true)).</strong></p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"script.js"</span>&gt;</span><span class=""></span></pre>
<p>이 속성은 외부에 위치한 스크립트 파일에서만 사용할 수 있다. 외부 스크립트에 이 속성이 있으면 HTML 문서가 여전히 구문 분석되는 동안 파일을 다운로드 할 수 있으며 다운로드가 완료되면 스크립트가 실행될 수 있도록 구문 분석이 일시 중지 된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/script-async-defer-2.png" alt="javascript-async-execution" width="780" height="152" /></p>
<h3>defer 속성이 추가된 경우의 실행</h3>
<p>defer 속성은 HTML 구문 분석이 완전히 완료되면 스크립트 파일을 실행하도록 브라우저에 지시한다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"script.js"</span>&gt;</span><span class=""></span></pre>
<p>비동기적으로 로드된 스크립트와 마찬가지로, HTML 구문 분석이 실행되는 동안 파일을 다운로드 할 수 있다. 그러나 HTML 구문 분석이 완료되기 전에 스크립트 다운로드가 완료 되더라도 구문 분석이 완료 될 때까지 스크립트는 실행되지 않는다. 또한, <strong>async와는 다르게 호출된 순서대로 실행된다.</strong></p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/script-async-defer-3.png" alt="javascript-defer-execution" width="780" height="152" /></p>
<h3>언제 사용할 것인가?</h3>
<p>일반적인 스크립트 실행과 aync, defer 실행을 결정하기 위해서는 몇가지 확인해야 할 사항이 있다.</p>
<h4><code>&lt;script&gt;</code> 요소는 어디에 있는가?</h4>
<p><code>&lt;script&gt;</code> 요소가 문서 맨 끝에 있지 않으면 스크립트의 비동기 및 지연 실행이 더 중요하다. HTML 문서는 첫 번째 여는 <code>&lt;html&gt;</code> 요소부터 닫히는 순서로 파싱됩니다. 외부 소스 JavaScript 파일이 닫는 <code>&lt;/body&gt;</code> 요소 바로 앞에 있으면, async 또는 defer 속성을 사용하는 것이 큰 효과가 없다(HTML 파서가 그 시점까지 문서의 대다수를 완성 했기 때문에 지연에 의미가 크게 없다는 것이다).</p>
<h4>스크립트 자체가 포함되어 있는가?</h4>
<p>다른 파일들에 종속적이지 않거나 종속성 자체가 없는 스크립트 파일의 경우 async 속성이 특히 유용하다. 파일이 어느 지점에서 실행되는지 정확히 알 필요가 없기 때문에 비동기 로드가 가장 적합하다.</p>
<h4>스크립트가 완전히 구문 분석 된 DOM에 의존하는가?</h4>
<p>대부분의 경우 스크립트 파일에는 DOM과의 상호 작용이 필요한 기능이 포함되어 있거나 페이지에 포함된 다른 파일에 대한 종속성이 있을 수 있다. 이러한 경우 스크립트를 실행하기 전에 DOM이 완전히 해석되어야 정상적인 동작을 할 수 있다. 일반적으로 이러한 스크립트 파일은 페이지의 맨 아래에 배치되어 모든 내용이 파싱된 후에 동작하도록 해야 한다. 그러나 어떤 이유로 든 문제의 파일을 다른 위치에 배치해야 하는 상황에서는 defer 속성을 사용할 수 있다.</p>
<h4>스크립트가 작고 종속성을 가지는가?</h4>
<p>마지막으로 스크립트가 비교적 작고 다른 파일에 의존하는 경우 인라인으로 정의하는 것이 더 유용 할 수 있다. 인라인을 사용하면 HTML 문서의 구문 분석이 차단되지만 크기가 작으면 큰 문제가 되지 않는다. 또한 다른 파일에 의존하는 경우 차단이 필요할 수 있다.</p>
<h3>async와 defer를 지원하는 브라우저</h3>
<p>async 및 defer 속성은 최신 브라우저를 기준으로 보자면 매우 광범위하게 지원된다. 단, 이러한 속성의 동작은 JavaScript 엔진마다 약간 다를 수 있다. 예를 들어 V8(Chromium에서 사용됨)에서는 스크립트 실행을 위한 별도의 전용 스레드에서 속성에 관계없이 모든 스크립트를 구문 분석하려고 한다(<a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html">New JavaScript techniques for rapid page loads</a>).</p>
<p>지원하는 브라우저를 알아보기 전에 일부만 지원되는 경우에 대한 동작 과정을 알아보자. defer 속성만 있다면 스크립트는 페이지의 파싱이 완료된 후에 실행된다. 단, async와 defer 속성이 모두 지정된 경우 async 속성을 지원하는 최신 브라우저는 기본적으로 async 속성을 따른다. 하지만 async 속성을 지원하지 않는 구형 브라우저는 defer 속성의 지원 여부에 따라 결과가 다르다. defer 속성을 지원하는 경우 defer 속성에 의해 비동기적으로 스크립트를 실행한다. defer 조차도 지원하지 않는 구형 브라우저는 동기적으로 스크립트를 실행한다.</p>
<ul>
<li>IE는 defer의 경우 예전부터 부분 지원하고 있으나 async 속성은 10 버전 이상부터 지원(defer 완전 지원 포함)</li>
<li>Firefox는 3.6 버전부터 모두 지원</li>
<li>chrome은 8 버전부터 모두 지원</li>
<li>safari는 5 버전부터 모두 지원(단, 5버전에서는 async=false 지원 안함)</li>
<li>ios safari는 5.1 버전부터 모두 지원</li>
<li>android는 3 버전부터 모두 지원</li>
</ul>
<p>결론적으로는 원만하면 다 지원한다. IE의 경우가 예외적이긴 하지만 IE 10 미만의 점유율이 극히 낮아진 이 시점에서 무시해도 될 듯하다(굳이 지원해야 한다면 aync, defer 속성을 사용하기 보다 <code>&lt;/body&gt;</code> 바로 앞에 스크립트를 위치시키는 방법이 가장 낫다).</p>
<p>보다 상세한 지원 여부는 아래의 caniuse.com 을 참고하자.</p>
<ul>
<li><a href="http://caniuse.com/#feat=script-async">caniuse.com async 지원 확인</a></li>
<li><a href="http://caniuse.com/#feat=script-defer">caniuse.com defer 지원 확인</a></li>
</ul>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/04/understanding-the-critical-rendering-path/</id><title type="html">HTML Critical rendering path의 이해</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/04/understanding-the-critical-rendering-path/"/><published>2017-05-04T10:50:36+09:00</published><updated>2017-05-04T10:52:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="html" label="html" /><category term="js" label="js" /><category term="css" label="css" /><summary><![CDATA[아래의 글은 "Understanding the Critical Rendering Path"의 내용을 번역한 글이다. 브라우저가 서버에서 페이지에 대한 HTML 응답을 받으면 화면에 표시되기 전에 많은 단계를 거쳐야 한다. 브라우저가 페이지의 초기 출력을 위해 실행해야하는 이 순서를 "Critical Rendering Path"(이하 CRP)라고 한다. 사이트의 성능을 향상시키는 방법을 이해하는데 CRP에 대한 지식은 매우 유용하다. CRP는 아래와 같이 6단계로 구성된다. DOM 트리 구축(Constructing the DOM Tree) CSSOM 트리 구축(Constructing the CSSOM Tree) JavaScript 실행(Running JavaScript) 랜더링 트리 구축(Creating the Render Tree) 레이아웃 생성(Generating the Layout) 페인팅(Painting) 1. DOM 트리 구축(Constructing the DOM Tree) DOM(Document Object Model) 트리는 완전히 구문 분석된 HTML 페이지의 Object 표현이다. 루트 요소 <html>로 시작하여 페이지의 각 element/text에 대한 노드가 만들어진다. 다른 요소 내에 중첩된 요소는 자식 노드로 표시되며 각 노드에는 해당 요소의 전체 특성이 포함된다. 예를 들어, <a> 요소는 노드와 관련된 href 속성을 갖는다. 예를들어 아래의 html 문서를 보자. <html> <head> <title>Understanding the Critical Rendering Path</title> <link rel="stylesheet" href="style.css"> </head> <body> <header> <h1>Understanding the Critical Rendering Path</h1> </header> <main> <h2>Introduction</h2> <p>Lorem ipsum dolor sit amet</p> </main> <footer> <small>Copyright 2017</small> </footer> </body> </html> 위 html 문서는 다음과 같은 DOM 트리를 생성한다. HTML의 장점은 부분적으로 실행될 수 있다는 것이다. 페이지에 내용이 표시하기 위해 전체 문서를 로드할 필요가 없다. 그러나 다른 리소스인 CSS와 JavaScript는 페이지 렌더링을 차단할 수 있다. 2. CSSOM 트리 구축(Constructing the CSSOM Tree) CSSOM(CSS Object Model)은 DOM과 연관된 스타일의 Object 표현이다. 이것은 DOM과 비슷한 방식으로 표현되지만 명시적 또는 암시적 선언과 상속 여부에 관계없이 각 노드의 관련 스타일로 표시된다. 위에서 언급한 html 문서의 style.css 파일에는 아래와 같은 style이 정의되어 있다. body { font-size: 18px; } header { color: plum; } h1 { font-size: 28px; } main { color: firebrick; } h2 { font-size: 20px; } footer { display: none; } 위 CSS는 다음과 같은 CSSOM 트리를 생성한다. CSS는 "렌더링 차단 리소스(render blocking resource)"로 간주된다. 즉, 먼저 리소스를 완전히 파싱하지 않으면 렌더링 트리를 구성 할 수 없다. HTML과 달리 CSS는 계단식 상속 특성 때문에 부분적으로 실행될 수 없다. 문서의 뒷부분에 정의된 스타일은 이전에 정의된 스타일을 무시하고 변경할 수 있다. 따라서 스타일 시트 전체가 파싱되기 전에 스타일 시트에서 앞에서 정의한 CSS 스타일을 사용하기 시작하면 잘못된 CSS가 적용되는 상황이 발생할 수 있다. 즉, 다음 단계로 넘어 가기 전에 CSS를 완전히 파싱 해야 한다. CSS 파일은 현재 장치에 적용되는 경우에만 렌더링 차단 리소스로 간주된다. <link rel = "stylesheet"> 태그는 미디어 속성을 받아 들일 수 있다. 미디어 속성은 스타일이 적용되는 미디어 쿼리를 지정할 수 있다. 예를 들어 media 속성이 orientation:landscape 인 스타일 시트가 있고 페이지를 세로 모드로 보고 있는 경우 해당 리소스는 렌더링 차단 리소스로 간주되지 않는다. CSS는 "script blocking"일 수도 있다. 이것은 JavaScript 파일이 실행되기 전에 CSSOM이 생성 될 때까지 기다려야 하기 때문이다. 3. JavaScript 실행(Running JavaScript) JavaScript는 "파서 차단 리소스(parser blocking resource)"로 간주된다. 즉, HTML 문서 자체의 구문 분석은 JavaScript에 의해 차단된다. 파서가 내부 태그이든 외부 태그이든 <script> 태그에 도달하면 (외부 태그 인 경우) fetch를 중단하고 실행한다. 따라서 문서 내의 요소를 참조하는 JavaScript 파일이 있는 경우 해당 문서가 표시된 후에 배치 해야 한다. JavaScript가 파서 차단(parser blocking)되는 것을 피하기 위해 async 속성을 적용하여 비동기적으로 로드 할 수 있다. <script async src="script.js"> 4. 랜더링 트리 구축(Creating the Render Tree) 렌더링 트리는 DOM과 CSSOM의 조합이다. 페이지에서 최종적으로 렌더링 될 내용을 나타내는 트리다. 즉, 표시되는 내용만 캡쳐하가 때문에 display:none을 사용하여 CSS로 숨겨진 요소는 포함하지 않는다. 위의 예제 DOM과 CSSOM을 사용하여 다음 렌더링 트리가 생성된다. 5. 레이아웃 생성(Generating the Layout) 레이아웃은 뷰포트의 크기에 관련된 CSS 스타일에 대한 컨텍스트에 의해 뷰포트의 크기를 결정한다. 비율 또는 뷰포트 단위. 뷰포트 크기는 문서 헤드에 제공된 메타 뷰포트 태그에 의해 결정되거나, 태그가 제공되지 않으면 기본 뷰포트 너비 인 980px가 사용된다. 예를 들어 가장 일반적인 메타 뷰포트 값은 뷰포트 크기를 장치 너비에 맞게 설정하는 것이다. <meta name="viewport" content="width=device-width,initial-scale=1"> 예를 들어 사용자가 너비가 1000px 인 기기에서 웹 페이지를 방문하면 뷰포트 크기는 해당 값을 기반으로 합니다. 뷰포트의 절반은 500px이고, 10vw는 100px이 된다. 6. 페인팅(Painting) 마지막으로 Painting 단계에서 페이지의 가시적인 내용을 픽셀로 변환하여 화면에 표시 할 수 있다. 페인트 단계에서 처리에 걸리는 시간은 DOM의 크기와 적용되는 스타일에 따라 다르다. 어떤 스타일은 다른 스타일보다 더 많은 작업을 필요로 한다. 예를 들어, 복잡한 그래디언트 배경 이미지는 단순한 단색 배경색보다 더 많은 시간을 필요로 한다. 종합(Putting it All Together) Critical Rendering Path를 진행하는 과정을 DevTools로 확인 할 수 있다(Chrome에서는 DevTools의 Performance에서 확인 할 수 있다). 예를 들어 위의 샘플 HTML (<script> 태그가 추가 된 경우) - <html> <head> <title>Understanding the Critical Rendering Path</title> <link rel="stylesheet" href="style.css"> </head> <body> <header> <h1>Understanding the Critical Rendering Path</h1> </header> <main> <h2>Introduction</h2> <p>Lorem ipsum dolor sit amet</p> </main> <footer> <small>Copyright 2017</small> </footer> <script src="main.js"></script> </body> </html> 페이지 로드에 대한 이벤트 로그를 보면 아래와 같은 결과를 볼 수 있다. Send Request - index.html에 대한 GET 요청 전송 Parse HTML and Send Request - HTML 및 DOM 구문 분석을 시작. style.css 및 main.js에 대한 GET 요청 Parse Stylesheet - CSSOM이 style.css 용으로 생성 Evaluate Script - main.js 평가 Layout - HTML의 메타 뷰포트 태그를 기반으로 레이아웃 생성 Paint - 문서의 픽셀을 페인트 이 정보를 바탕으로 Critical Rendering Path를 최적화하는 방법을 결정할 수 있다.]]></summary><content type="html"><![CDATA[<blockquote>
<p>아래의 글은 &quot;<a href="https://bitsofco.de/understanding-the-critical-rendering-path/">Understanding the Critical Rendering Path</a>&quot;의 내용을 번역한 글이다.</p>
</blockquote>
<p>브라우저가 서버에서 페이지에 대한 HTML 응답을 받으면 화면에 표시되기 전에 많은 단계를 거쳐야 한다. 브라우저가 페이지의 초기 출력을 위해 실행해야하는 이 순서를 &quot;Critical Rendering Path&quot;(이하 CRP)라고 한다.</p>
<p>사이트의 성능을 향상시키는 방법을 이해하는데 CRP에 대한 지식은 매우 유용하다. CRP는 아래와 같이 6단계로 구성된다.</p>
<ol>
<li>DOM 트리 구축(Constructing the DOM Tree)</li>
<li>CSSOM 트리 구축(Constructing the CSSOM Tree)</li>
<li>JavaScript 실행(Running JavaScript)</li>
<li>랜더링 트리 구축(Creating the Render Tree)</li>
<li>레이아웃 생성(Generating the Layout)</li>
<li>페인팅(Painting)</li>
</ol>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/understanding-the-critical-rendering-path.png" alt="understanding-the-critical-rendering-path" width="742" height="214" /></p>
<h3>1.  DOM 트리 구축(Constructing the DOM Tree)</h3>
<p>DOM(Document Object Model) 트리는 완전히 구문 분석된 HTML 페이지의 Object 표현이다. 루트 요소 <code>&lt;html&gt;</code>로 시작하여 페이지의 각 element/text에 대한 노드가 만들어진다. 다른 요소 내에 중첩된 요소는 자식 노드로 표시되며 각 노드에는 해당 요소의 전체 특성이 포함된다. 예를 들어, <code>&lt;a&gt;</code> 요소는 노드와 관련된 <code>href</code> 속성을 갖는다.</p>
<p>예를들어 아래의 html 문서를 보자.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style.css"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Introduction<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Copyright 2017<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>  </pre>
<p>위 html 문서는 다음과 같은 DOM 트리를 생성한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/understanding-the-critical-rendering-path-1.png" alt="understanding-the-critical-rendering-path-1" width="780" height="411" /></p>
<p>HTML의 장점은 부분적으로 실행될 수 있다는 것이다. 페이지에 내용이 표시하기 위해 전체 문서를 로드할 필요가 없다. 그러나 다른 리소스인 CSS와 JavaScript는 페이지 렌더링을 차단할 수 있다.</p>
<h3>2. CSSOM 트리 구축(Constructing the CSSOM Tree)</h3>
<p>CSSOM(CSS Object Model)은 DOM과 연관된 스타일의 Object 표현이다. 이것은 DOM과 비슷한 방식으로 표현되지만 명시적 또는 암시적 선언과 상속 여부에 관계없이 각 노드의 관련 스타일로 표시된다.</p>
<p>위에서 언급한 html 문서의 <code>style.css</code> 파일에는 아래와 같은 style이 정의되어 있다.</p>
<pre class="hljs css"><span class="hljs-selector-tag">body</span> { <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>; }

<span class="hljs-selector-tag">header</span> { <span class="hljs-attribute">color</span>: plum; }  
<span class="hljs-selector-tag">h1</span> { <span class="hljs-attribute">font-size</span>: <span class="hljs-number">28px</span>; }

<span class="hljs-selector-tag">main</span> { <span class="hljs-attribute">color</span>: firebrick; }  
<span class="hljs-selector-tag">h2</span> { <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>; }

<span class="hljs-selector-tag">footer</span> { <span class="hljs-attribute">display</span>: none; }  </pre>
<p>위 CSS는 다음과 같은 CSSOM 트리를 생성한다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/understanding-the-critical-rendering-path-2.png" alt="understanding-the-critical-rendering-path-2" width="780" height="411" /></p>
<p>CSS는 &quot;<strong>렌더링 차단 리소스(render blocking resource)</strong>&quot;로 간주된다. 즉, 먼저 리소스를 완전히 파싱하지 않으면 렌더링 트리를 구성 할 수 없다. HTML과 달리 CSS는 계단식 상속  특성 때문에 부분적으로 실행될 수 없다. 문서의 뒷부분에 정의된 스타일은 이전에 정의된 스타일을 무시하고 변경할 수 있다. 따라서 스타일 시트 전체가 파싱되기 전에 스타일 시트에서 앞에서 정의한 CSS 스타일을 사용하기 시작하면 잘못된 CSS가 적용되는 상황이 발생할 수 있다. 즉, 다음 단계로 넘어 가기 전에 CSS를 완전히 파싱 해야 한다.</p>
<p>CSS 파일은 현재 장치에 적용되는 경우에만 렌더링 차단 리소스로 간주된다. <code>&lt;link rel = "stylesheet"&gt;</code> 태그는 미디어 속성을 받아 들일 수 있다. 미디어 속성은 스타일이 적용되는 미디어 쿼리를 지정할 수 있다. 예를 들어 media 속성이 <code>orientation:landscape</code> 인 스타일 시트가 있고 페이지를 세로 모드로 보고 있는 경우 해당 리소스는 렌더링 차단 리소스로 간주되지 않는다.</p>
<p>CSS는 &quot;script blocking&quot;일 수도 있다. 이것은 JavaScript 파일이 실행되기 전에 CSSOM이 생성 될 때까지 기다려야 하기 때문이다.</p>
<h3>3. JavaScript 실행(Running JavaScript)</h3>
<p>JavaScript는 &quot;<strong>파서 차단 리소스(parser blocking resource)</strong>&quot;로 간주된다. 즉, HTML 문서 자체의 구문 분석은 JavaScript에 의해 차단된다.</p>
<p>파서가 내부 태그이든 외부 태그이든 <code>&lt;script&gt;</code> 태그에 도달하면 (외부 태그 인 경우) fetch를 중단하고 실행한다. 따라서 문서 내의 요소를 참조하는 JavaScript 파일이 있는 경우 해당 문서가 표시된 후에 배치 해야 한다.</p>
<p>JavaScript가 파서 차단(parser blocking)되는 것을 피하기 위해 <code>async</code> 속성을 적용하여 비동기적으로 로드 할 수 있다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"script.js"</span>&gt;</span><span class=""></span></pre>
<h3>4. 랜더링 트리 구축(Creating the Render Tree)</h3>
<p>렌더링 트리는 DOM과 CSSOM의 조합이다. 페이지에서 최종적으로 렌더링 될 내용을 나타내는 트리다. 즉, 표시되는 내용만 캡쳐하가 때문에 <code>display:none</code>을 사용하여 CSS로 숨겨진 요소는 포함하지 않는다.</p>
<p>위의 예제 DOM과 CSSOM을 사용하여 다음 렌더링 트리가 생성된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/understanding-the-critical-rendering-path-3.png" alt="understanding-the-critical-rendering-path-3" width="780" height="411" /></p>
<h3>5. 레이아웃 생성(Generating the Layout)</h3>
<p>레이아웃은 뷰포트의 크기에 관련된 CSS 스타일에 대한 컨텍스트에 의해 뷰포트의 크기를 결정한다. 비율 또는 뷰포트 단위. 뷰포트 크기는 문서 헤드에 제공된 메타 뷰포트 태그에 의해 결정되거나, 태그가 제공되지 않으면 기본 뷰포트 너비 인 980px가 사용된다.</p>
<p>예를 들어 가장 일반적인 메타 뷰포트 값은 뷰포트 크기를 장치 너비에 맞게 설정하는 것이다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width,initial-scale=1"</span>&gt;</span>  </pre>
<p>예를 들어 사용자가 너비가 1000px 인 기기에서 웹 페이지를 방문하면 뷰포트 크기는 해당 값을 기반으로 합니다. 뷰포트의 절반은 500px이고, 10vw는 100px이 된다.</p>
<h3>6. 페인팅(Painting)</h3>
<p>마지막으로 Painting 단계에서 페이지의 가시적인 내용을 픽셀로 변환하여 화면에 표시 할 수 있다.</p>
<p>페인트 단계에서 처리에 걸리는 시간은 DOM의 크기와 적용되는 스타일에 따라 다르다. 어떤 스타일은 다른 스타일보다 더 많은 작업을 필요로 한다. 예를 들어, 복잡한 그래디언트 배경 이미지는 단순한 단색 배경색보다 더 많은 시간을 필요로 한다.</p>
<h3>종합(Putting it All Together)</h3>
<p>Critical Rendering Path를 진행하는 과정을 DevTools로 확인 할 수 있다(Chrome에서는 DevTools의 Performance에서 확인 할 수 있다).</p>
<p>예를 들어 위의 샘플 HTML (<code>&lt;script&gt;</code> 태그가 추가 된 경우) -</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"style.css"</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  
  <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Understanding the Critical Rendering Path<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Introduction<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>
      <span class="hljs-tag">&lt;<span class="hljs-name">small</span>&gt;</span>Copyright 2017<span class="hljs-tag">&lt;/<span class="hljs-name">small</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"main.js"</span>&gt;</span><span class=""></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>  
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>  </pre>
<p>페이지 로드에 대한 이벤트 로그를 보면 아래와 같은 결과를 볼 수 있다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/05/understanding-the-critical-rendering-path-4.png" alt="understanding-the-critical-rendering-path-4" width="568" height="681" /></p>
<ol>
<li>Send Request - index.html에 대한 GET 요청 전송</li>
<li>Parse HTML and Send Request - HTML 및 DOM 구문 분석을 시작. style.css 및 main.js에 대한 GET 요청</li>
<li>Parse Stylesheet - CSSOM이 style.css 용으로 생성</li>
<li>Evaluate Script - main.js 평가</li>
<li>Layout - HTML의 메타 뷰포트 태그를 기반으로 레이아웃 생성</li>
<li>Paint - 문서의 픽셀을 페인트</li>
</ol>
<p>이 정보를 바탕으로 Critical Rendering Path를 최적화하는 방법을 결정할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/02/absolute-enable-right-click-copy/</id><title type="html">마우스 우클릭/드래그 방지 해제 방법(북마크릿)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/02/absolute-enable-right-click-copy/"/><published>2017-05-02T14:25:31+09:00</published><updated>2017-05-02T15:09:52+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[웹사이트를 서핑하다가 필요한 내용이 있어 복사하려고 하면 우클릭이나 드래그를 막아놔서 복사를 할 수 없도록 하는 사이트들이 있다. 이런 경우라면 javascript를 끄고 해당 사이트를 방문하면 대부분 복사가 가능하다. 하지만 매번 이렇게 하기에는 귀찮다. 그래서 찾아보니 기존에 돌아다니는 우클릭 해제에 관련된 스크립트들은 대부분이 지금은 동작하지 않았다. 그래서 그런대로 잘 동작하는 스크립트를 가져다가 조금 개선해서 gist에 올려 놨다. 코드를 소개하기에 앞서 무단 복제는 지양하기를 바란다. 나도 나름의 콘텐트를 생산하는 입장헤서 불펌은 반대한다. 내용을 퍼간다면 최소한 출처를 남겨주는 예의만이라도... 다만, 개발 관련된 문서를 보다 보면 소개한 내용 중 일부(쉘 명령어 등)을 복사해서 사용해야 하는데 복사하기가 막혀 너무 불편한 부분을 해소하기 위해 만든 것이다. 일단 원 소스는 asamaru7/right-click.js에 공개되어 있으니 개선이 필요한 부분은 직접 개선해서 사용해도 된다. 위 소스를 북마크릿으로 변형한 소스는 아래와 같다. javascript:(function () %7B%0A%09if (window.subvaAllowRightClick === undefined) %7B%0A%09%09// https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code%0A%09%09window.subvaAllowRightClick = function (dom) %7B%0A%09%09%09(function GetSelection() %7B%0A%09%09%09%09var Style = dom.createElement('style');%0A%09%09%09%09Style.type = 'text/css';%0A%09%09%09%09var TextNode = '*%7Buser-select:text!important;-webkit-user-select:text!important;%7D';%0A%09%09%09%09if (Style.styleSheet) %7B%0A%09%09%09%09%09Style.styleSheet.cssText = TextNode;%0A%09%09%09%09%7D%0A%09%09%09%09else %7B%0A%09%09%09%09%09Style.appendChild(dom.createTextNode(TextNode));%0A%09%09%09%09%7D%0A%09%09%09%09dom.getElementsByTagName('head')%5B0%5D.appendChild(Style);%0A%09%09%09%7D)();%0A%0A%09%09%09(function SetEvents() %7B%0A%09%09%09%09var events = %5B'copy', 'cut', 'paste', 'select', 'selectstart'%5D;%0A%09%09%09%09for (var i = 0; i < events.length; i++)%0A%09%09%09%09%09dom.addEventListener(events%5Bi%5D, function (e) %7B%0A%09%09%09%09%09%09e.stopPropagation();%0A%09%09%09%09%09%7D, true);%0A%09%09%09%7D)();%0A%0A%09%09%09(function RestoreEvents() %7B%0A%09%09%09%09var n = null;%0A%09%09%09%09var d = document;%0A%09%09%09%09var b = dom.body;%0A%09%09%09%09var SetEvents = %5Bd.oncontextmenu = n, d.onselectstart = n, d.ondragstart = n, d.onmousedown = n%5D;%0A%09%09%09%09var GetEvents = %5Bb.oncontextmenu = n, b.onselectstart = n, b.ondragstart = n, b.onmousedown = n, b.oncut = n, b.oncopy = n, b.onpaste = n%5D;%0A%09%09%09%7D)();%0A%0A%09%09%09(function RightClickButton() %7B%0A%09%09%09%09setTimeout(function () %7B%0A%09%09%09%09%09dom.oncontextmenu = null;%0A%09%09%09%09%7D, 2000);%0A%09%09%09%09function EventsCall(callback) %7B%0A%09%09%09%09%09this.events = %5B'DOMAttrModified', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMCharacterDataModified', 'DOMSubtreeModified'%5D;%0A%09%09%09%09%09this.bind();%0A%09%09%09%09%7D%0A%0A%09%09%09%09EventsCall.prototype.bind = function () %7B%0A%09%09%09%09%09this.events.forEach(function (event) %7B%0A%09%09%09%09%09%09dom.addEventListener(event, this, true);%0A%09%09%09%09%09%7D.bind(this));%0A%09%09%09%09%7D;%0A%09%09%09%09EventsCall.prototype.handleEvent = function () %7B%0A%09%09%09%09%09this.isCalled = true;%0A%09%09%09%09%7D;%0A%09%09%09%09EventsCall.prototype.unbind = function () %7B%0A%09%09%09%09%09this.events.forEach(function (event) %7B%0A%09%09%09%09%09%7D.bind(this));%0A%09%09%09%09%7D;%0A%09%09%09%09function EventHandler(event) %7B%0A%09%09%09%09%09this.event = event;%0A%09%09%09%09%09this.contextmenuEvent = this.createEvent(this.event.type);%0A%09%09%09%09%7D%0A%0A%09%09%09%09EventHandler.prototype.createEvent = function (type) %7B%0A%09%09%09%09%09var target = this.event.target;%0A%09%09%09%09%09var event = target.ownerDocument.createEvent('MouseEvents');%0A%09%09%09%09%09event.initMouseEvent(type, this.event.bubbles, this.event.cancelable,%0A%09%09%09%09%09%09target.ownerDocument.defaultView, this.event.detail,%0A%09%09%09%09%09%09this.event.screenX, this.event.screenY, this.event.clientX, this.event.clientY,%0A%09%09%09%09%09%09this.event.ctrlKey, this.event.altKey, this.event.shiftKey, this.event.metaKey,%0A%09%09%09%09%09%09this.event.button, this.event.relatedTarget);%0A%09%09%09%09%09return event;%0A%09%09%09%09%7D;%0A%09%09%09%09EventHandler.prototype.fire = function () %7B%0A%09%09%09%09%09var target = this.event.target;%0A%09%09%09%09%09var contextmenuHandler = function (event) %7B%0A%09%09%09%09%09%09event.preventDefault();%0A%09%09%09%09%09%7D.bind(this);%0A%09%09%09%09%09target.dispatchEvent(this.contextmenuEvent);%0A%09%09%09%09%09this.isCanceled = this.contextmenuEvent.defaultPrevented;%0A%09%09%09%09%7D;%0A%09%09%09%09window.addEventListener('contextmenu', handleEvent, true);%0A%09%09%09%09function handleEvent(event) %7B%0A%09%09%09%09%09event.stopPropagation();%0A%09%09%09%09%09event.stopImmediatePropagation();%0A%09%09%09%09%09var handler = new EventHandler(event);%0A%09%09%09%09%09window.removeEventListener(event.type, handleEvent, true);%0A%09%09%09%09%09var EventsCallBback = new EventsCall(function () %7B%0A%09%09%09%09%09%7D);%0A%09%09%09%09%09handler.fire();%0A%09%09%09%09%09window.addEventListener(event.type, handleEvent, true);%0A%09%09%09%09%09if (handler.isCanceled && (EventsCallBback.isCalled))%0A%09%09%09%09%09%09event.preventDefault();%0A%09%09%09%09%7D%0A%09%09%09%7D)();%0A%0A%09%09%09// function KeyPress(e) %7B%0A%09%09%09// %09if (e.altKey && e.ctrlKey) %7B%0A%09%09%09// %09%09if (confirm("Activate Absolute Right Click Mode!") === true) %7B%0A%09%09%09// %09%09%09Absolute_Mod();%0A%09%09%09// %09%09%7D%0A%09%09%09// %09%7D%0A%09%09%09// %7D%0A%09%09%09// dom.addEventListener("keydown", KeyPress);%0A%0A%09%09%09(function Absolute_Mod() %7B%0A%09%09%09%09var events = %5B'contextmenu', 'copy', 'cut', 'paste', 'mouseup', 'mousedown', 'keyup', 'keydown', 'drag', 'dragstart', 'select', 'selectstart'%5D;%0A%09%09%09%09for (var i = 0; i < events.length; i++) %7B%0A%09%09%09%09%09dom.addEventListener(events%5Bi%5D, function (e) %7B%0A%09%09%09%09%09%09e.stopPropagation();%0A%09%09%09%09%09%7D, true);%0A%09%09%09%09%7D%0A%09%09%09%7D)();%0A%09%09%7D;%0A%0A//%09%09window.subvaAllowRightClick(document);%0A%0A%09%09function runAll(w) %7B%0A%09%09%09try %7B%0A%09%09%09%09window.subvaAllowRightClick(w.document);%0A%09%09%09%7D catch (e) %7B%0A%09%09%09%7D%0A%09%09%09for (var i = 0; i < w.frames.length; i++) %7B%0A%09%09%09%09runAll(w.frames%5Bi%5D);%0A%09%09%09%7D%0A%09%09%7D%0A%09%7D%0A%09runAll(window);%0A%7D)(); 사용하는 브라우저에서 북마크를 하나 만들고 위 소스를 복사해서 url에 입력하면 된다. 사용 방법은 당연히 우클릭이 막힌 페이지에 가서 새로 만든 북마크를 누르면 해당 페이지에서 우클릭을 사용할 수 있다. 위 방법이 어렵다면 "북마크릿 생성기-우클릭 해제"에 가서 아래쪽에 있는 "DRAG INTO YOUR BOOKMARK-TOOLBAR" 링크를 드래그해서 북마크바에 올려 놓으면 자동 추가된다. gist에 공개되어 있지만 여기에도 소스를 남겨둔다. (function () { if (window.subvaAllowRightClick === undefined) { // https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code window.subvaAllowRightClick = function (dom) { (function GetSelection() { var Style = dom.createElement('style'); Style.type = 'text/css'; var TextNode = '*{user-select:text!important;-webkit-user-select:text!important;}'; if (Style.styleSheet) { Style.styleSheet.cssText = TextNode; } else { Style.appendChild(dom.createTextNode(TextNode)); } dom.getElementsByTagName('head')[0].appendChild(Style); })(); (function SetEvents() { var events = ['copy', 'cut', 'paste', 'select', 'selectstart']; for (var i = 0; i < events.length; i++) dom.addEventListener(events[i], function (e) { e.stopPropagation(); }, true); })(); (function RestoreEvents() { var n = null; var d = document; var b = dom.body; var SetEvents = [d.oncontextmenu = n, d.onselectstart = n, d.ondragstart = n, d.onmousedown = n]; var GetEvents = [b.oncontextmenu = n, b.onselectstart = n, b.ondragstart = n, b.onmousedown = n, b.oncut = n, b.oncopy = n, b.onpaste = n]; })(); (function RightClickButton() { setTimeout(function () { dom.oncontextmenu = null; }, 2000); function EventsCall(callback) { this.events = ['DOMAttrModified', 'DOMNodeInserted', 'DOMNodeRemoved', 'DOMCharacterDataModified', 'DOMSubtreeModified']; this.bind(); } EventsCall.prototype.bind = function () { this.events.forEach(function (event) { dom.addEventListener(event, this, true); }.bind(this)); }; EventsCall.prototype.handleEvent = function () { this.isCalled = true; }; EventsCall.prototype.unbind = function () { this.events.forEach(function (event) { }.bind(this)); }; function EventHandler(event) { this.event = event; this.contextmenuEvent = this.createEvent(this.event.type); } EventHandler.prototype.createEvent = function (type) { var target = this.event.target; var event = target.ownerDocument.createEvent('MouseEvents'); event.initMouseEvent(type, this.event.bubbles, this.event.cancelable, target.ownerDocument.defaultView, this.event.detail, this.event.screenX, this.event.screenY, this.event.clientX, this.event.clientY, this.event.ctrlKey, this.event.altKey, this.event.shiftKey, this.event.metaKey, this.event.button, this.event.relatedTarget); return event; }; EventHandler.prototype.fire = function () { var target = this.event.target; var contextmenuHandler = function (event) { event.preventDefault(); }.bind(this); target.dispatchEvent(this.contextmenuEvent); this.isCanceled = this.contextmenuEvent.defaultPrevented; }; window.addEventListener('contextmenu', handleEvent, true); function handleEvent(event) { event.stopPropagation(); event.stopImmediatePropagation(); var handler = new EventHandler(event); window.removeEventListener(event.type, handleEvent, true); var EventsCallBback = new EventsCall(function () { }); handler.fire(); window.addEventListener(event.type, handleEvent, true); if (handler.isCanceled && (EventsCallBback.isCalled)) event.preventDefault(); } })(); // function KeyPress(e) { // if (e.altKey && e.ctrlKey) { // if (confirm("Activate Absolute Right Click Mode!") === true) { // Absolute_Mod(); // } // } // } // dom.addEventListener("keydown", KeyPress); (function Absolute_Mod() { var events = ['contextmenu', 'copy', 'cut', 'paste', 'mouseup', 'mousedown', 'keyup', 'keydown', 'drag', 'dragstart', 'select', 'selectstart']; for (var i = 0; i < events.length; i++) { dom.addEventListener(events[i], function (e) { e.stopPropagation(); }, true); } })(); }; // window.subvaAllowRightClick(document); function runAll(w) { try { window.subvaAllowRightClick(w.document); } catch (e) { } for (var i = 0; i < w.frames.length; i++) { runAll(w.frames[i]); } } } runAll(window); })();]]></summary><content type="html"><![CDATA[<p>웹사이트를 서핑하다가 필요한 내용이 있어 복사하려고 하면 우클릭이나 드래그를 막아놔서 복사를 할 수 없도록 하는 사이트들이 있다. 이런 경우라면 javascript를 끄고 해당 사이트를 방문하면 대부분 복사가 가능하다.</p>
<p>하지만 매번 이렇게 하기에는 귀찮다. 그래서 찾아보니 기존에 돌아다니는 우클릭 해제에 관련된 스크립트들은 대부분이 지금은 동작하지 않았다. 그래서 <a href="https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code">그런대로 잘 동작하는 스크립트</a>를 가져다가 조금 개선해서 <a href="https://gist.github.com/asamaru7/ebab2459eaae6d33f87dba328d435a84">gist</a>에 올려 놨다.</p>
<p>코드를 소개하기에 앞서 무단 복제는 지양하기를 바란다. 나도 나름의 콘텐트를 생산하는 입장헤서 불펌은 반대한다. 내용을 퍼간다면 최소한 출처를 남겨주는 예의만이라도...
다만, 개발 관련된 문서를 보다 보면 소개한 내용 중 일부(쉘 명령어 등)을 복사해서 사용해야 하는데 복사하기가 막혀 너무 불편한 부분을 해소하기 위해 만든 것이다.</p>
<p>일단 원 소스는 <a href="https://gist.github.com/asamaru7/ebab2459eaae6d33f87dba328d435a84">asamaru7/right-click.js</a>에 공개되어 있으니 개선이 필요한 부분은 직접 개선해서 사용해도 된다.</p>
<p>위 소스를 북마크릿으로 변형한 소스는 아래와 같다.</p>
<pre class="hljs javascript">javascript:(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09<span class="hljs-title">if</span> (<span class="hljs-params">window.subvaAllowRightClick === undefined</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09// <span class="hljs-title">https</span>://<span class="hljs-title">greasyfork</span>.<span class="hljs-title">org</span>/<span class="hljs-title">en</span>/<span class="hljs-title">scripts</span>/23772-<span class="hljs-title">absolute</span>-<span class="hljs-title">enable</span>-<span class="hljs-title">right</span>-<span class="hljs-title">click</span>-<span class="hljs-title">copy</span>/<span class="hljs-title">code</span>%0<span class="hljs-title">A</span>%09%09<span class="hljs-title">window</span>.<span class="hljs-title">subvaAllowRightClick</span> = <span class="hljs-title">function</span> (<span class="hljs-params">dom</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function GetSelection(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">Style</span> = <span class="hljs-title">dom</span>.<span class="hljs-title">createElement</span>(<span class="hljs-params"><span class="hljs-string">'style'</span></span>);%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">Style</span>.<span class="hljs-title">type</span> = '<span class="hljs-title">text</span>/<span class="hljs-title">css</span>';%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">TextNode</span> = '*%7<span class="hljs-title">Buser</span>-<span class="hljs-title">select</span>:<span class="hljs-title">text</span>!<span class="hljs-title">important</span>;-<span class="hljs-title">webkit</span>-<span class="hljs-title">user</span>-<span class="hljs-title">select</span>:<span class="hljs-title">text</span>!<span class="hljs-title">important</span>;%7<span class="hljs-title">D</span>';%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">if</span> (<span class="hljs-params">Style.styleSheet</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">Style</span>.<span class="hljs-title">styleSheet</span>.<span class="hljs-title">cssText</span> = <span class="hljs-title">TextNode</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">else</span> %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">Style</span>.<span class="hljs-title">appendChild</span>(<span class="hljs-params">dom.createTextNode(TextNode</span>));%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">getElementsByTagName</span>(<span class="hljs-params"><span class="hljs-string">'head'</span></span>)%5<span class="hljs-title">B0</span>%5<span class="hljs-title">D</span>.<span class="hljs-title">appendChild</span>(<span class="hljs-params">Style</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function SetEvents(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">events</span> = %5<span class="hljs-title">B</span>'<span class="hljs-title">copy</span>', '<span class="hljs-title">cut</span>', '<span class="hljs-title">paste</span>', '<span class="hljs-title">select</span>', '<span class="hljs-title">selectstart</span>'%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">for</span> (<span class="hljs-params">var i = <span class="hljs-number">0</span>; i &lt; events.length; i++</span>)%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">events%<span class="hljs-number">5</span>Bi%<span class="hljs-number">5</span>D, function (e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">e</span>.<span class="hljs-title">stopPropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>, <span class="hljs-title">true</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function RestoreEvents(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">n</span> = <span class="hljs-title">null</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">d</span> = <span class="hljs-title">document</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">b</span> = <span class="hljs-title">dom</span>.<span class="hljs-title">body</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">SetEvents</span> = %5<span class="hljs-title">Bd</span>.<span class="hljs-title">oncontextmenu</span> = <span class="hljs-title">n</span>, <span class="hljs-title">d</span>.<span class="hljs-title">onselectstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">d</span>.<span class="hljs-title">ondragstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">d</span>.<span class="hljs-title">onmousedown</span> = <span class="hljs-title">n</span>%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">GetEvents</span> = %5<span class="hljs-title">Bb</span>.<span class="hljs-title">oncontextmenu</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">onselectstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">ondragstart</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">onmousedown</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">oncut</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">oncopy</span> = <span class="hljs-title">n</span>, <span class="hljs-title">b</span>.<span class="hljs-title">onpaste</span> = <span class="hljs-title">n</span>%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function RightClickButton(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">setTimeout</span>(<span class="hljs-params">function (</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">oncontextmenu</span> = <span class="hljs-title">null</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>, 2000);%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">function</span> <span class="hljs-title">EventsCall</span>(<span class="hljs-params">callback</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">events</span> = %5<span class="hljs-title">B</span>'<span class="hljs-title">DOMAttrModified</span>', '<span class="hljs-title">DOMNodeInserted</span>', '<span class="hljs-title">DOMNodeRemoved</span>', '<span class="hljs-title">DOMCharacterDataModified</span>', '<span class="hljs-title">DOMSubtreeModified</span>'%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">bind</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventsCall</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">bind</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">events</span>.<span class="hljs-title">forEach</span>(<span class="hljs-params">function (event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">event, this, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>.<span class="hljs-title">bind</span>(<span class="hljs-params">this</span>));%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventsCall</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">handleEvent</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">isCalled</span> = <span class="hljs-title">true</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventsCall</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">unbind</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">events</span>.<span class="hljs-title">forEach</span>(<span class="hljs-params">function (event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>.<span class="hljs-title">bind</span>(<span class="hljs-params">this</span>));%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">function</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">event</span> = <span class="hljs-title">event</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">contextmenuEvent</span> = <span class="hljs-title">this</span>.<span class="hljs-title">createEvent</span>(<span class="hljs-params">this.event.type</span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventHandler</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">createEvent</span> = <span class="hljs-title">function</span> (<span class="hljs-params">type</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">target</span> = <span class="hljs-title">this</span>.<span class="hljs-title">event</span>.<span class="hljs-title">target</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">event</span> = <span class="hljs-title">target</span>.<span class="hljs-title">ownerDocument</span>.<span class="hljs-title">createEvent</span>(<span class="hljs-params"><span class="hljs-string">'MouseEvents'</span></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">initMouseEvent</span>(<span class="hljs-params">type, this.event.bubbles, this.event.cancelable,%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>target.ownerDocument.defaultView, this.event.detail,%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>this.event.screenX, this.event.screenY, this.event.clientX, this.event.clientY,%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>this.event.ctrlKey, this.event.altKey, this.event.shiftKey, this.event.metaKey,%<span class="hljs-number">0</span>A%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>%<span class="hljs-number">09</span>this.event.button, this.event.relatedTarget</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">return</span> <span class="hljs-title">event</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">EventHandler</span>.<span class="hljs-title">prototype</span>.<span class="hljs-title">fire</span> = <span class="hljs-title">function</span> (<span class="hljs-params"></span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">target</span> = <span class="hljs-title">this</span>.<span class="hljs-title">event</span>.<span class="hljs-title">target</span>;%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">contextmenuHandler</span> = <span class="hljs-title">function</span> (<span class="hljs-params">event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">preventDefault</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>.<span class="hljs-title">bind</span>(<span class="hljs-params">this</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">target</span>.<span class="hljs-title">dispatchEvent</span>(<span class="hljs-params">this.contextmenuEvent</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">this</span>.<span class="hljs-title">isCanceled</span> = <span class="hljs-title">this</span>.<span class="hljs-title">contextmenuEvent</span>.<span class="hljs-title">defaultPrevented</span>;%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params"><span class="hljs-string">'contextmenu'</span>, handleEvent, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">function</span> <span class="hljs-title">handleEvent</span>(<span class="hljs-params">event</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">stopPropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">stopImmediatePropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">handler</span> = <span class="hljs-title">new</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">event</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">removeEventListener</span>(<span class="hljs-params">event.type, handleEvent, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">EventsCallBback</span> = <span class="hljs-title">new</span> <span class="hljs-title">EventsCall</span>(<span class="hljs-params">function (</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">handler</span>.<span class="hljs-title">fire</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">event.type, handleEvent, true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">if</span> (<span class="hljs-params">handler.isCanceled &amp;&amp; (EventsCallBback.isCalled</span>))%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">event</span>.<span class="hljs-title">preventDefault</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09// <span class="hljs-title">function</span> <span class="hljs-title">KeyPress</span>(<span class="hljs-params">e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09// %09<span class="hljs-title">if</span> (<span class="hljs-params">e.altKey &amp;&amp; e.ctrlKey</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09// %09%09<span class="hljs-title">if</span> (<span class="hljs-params">confirm(<span class="hljs-string">"Activate Absolute Right Click Mode!"</span></span>) === <span class="hljs-title">true</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09// %09%09%09<span class="hljs-title">Absolute_Mod</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09// %09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09// %09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09// %7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09// <span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params"><span class="hljs-string">"keydown"</span>, KeyPress</span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09%09(<span class="hljs-params">function Absolute_Mod(</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">var</span> <span class="hljs-title">events</span> = %5<span class="hljs-title">B</span>'<span class="hljs-title">contextmenu</span>', '<span class="hljs-title">copy</span>', '<span class="hljs-title">cut</span>', '<span class="hljs-title">paste</span>', '<span class="hljs-title">mouseup</span>', '<span class="hljs-title">mousedown</span>', '<span class="hljs-title">keyup</span>', '<span class="hljs-title">keydown</span>', '<span class="hljs-title">drag</span>', '<span class="hljs-title">dragstart</span>', '<span class="hljs-title">select</span>', '<span class="hljs-title">selectstart</span>'%5<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">for</span> (<span class="hljs-params">var i = <span class="hljs-number">0</span>; i &lt; events.length; i++</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09<span class="hljs-title">dom</span>.<span class="hljs-title">addEventListener</span>(<span class="hljs-params">events%<span class="hljs-number">5</span>Bi%<span class="hljs-number">5</span>D, function (e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09%09%09<span class="hljs-title">e</span>.<span class="hljs-title">stopPropagation</span>(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%09%09%09%7<span class="hljs-title">D</span>, <span class="hljs-title">true</span>);%0<span class="hljs-title">A</span>%09%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);%0<span class="hljs-title">A</span>%09%09%7<span class="hljs-title">D</span>;%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>//%09%09<span class="hljs-title">window</span>.<span class="hljs-title">subvaAllowRightClick</span>(<span class="hljs-params">document</span>);%0<span class="hljs-title">A</span>%0<span class="hljs-title">A</span>%09%09<span class="hljs-title">function</span> <span class="hljs-title">runAll</span>(<span class="hljs-params">w</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09<span class="hljs-title">try</span> %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">window</span>.<span class="hljs-title">subvaAllowRightClick</span>(<span class="hljs-params">w.document</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span> <span class="hljs-title">catch</span> (<span class="hljs-params">e</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%09<span class="hljs-title">for</span> (<span class="hljs-params">var i = <span class="hljs-number">0</span>; i &lt; w.frames.length; i++</span>) %7<span class="hljs-title">B</span>%0<span class="hljs-title">A</span>%09%09%09%09<span class="hljs-title">runAll</span>(<span class="hljs-params">w.frames%<span class="hljs-number">5</span>Bi%<span class="hljs-number">5</span>D</span>);%0<span class="hljs-title">A</span>%09%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09%7<span class="hljs-title">D</span>%0<span class="hljs-title">A</span>%09<span class="hljs-title">runAll</span>(<span class="hljs-params">window</span>);%0<span class="hljs-title">A</span>%7<span class="hljs-title">D</span>)(<span class="hljs-params"></span>);</span></pre>
<p>사용하는 브라우저에서 북마크를 하나 만들고 위 소스를 복사해서 url에 입력하면 된다. 사용 방법은 당연히 우클릭이 막힌 페이지에 가서 새로 만든 북마크를 누르면 해당 페이지에서 우클릭을 사용할 수 있다.</p>
<p>위 방법이 어렵다면 &quot;<a href="http://bookmarklet.asamaru.net/right-click.html">북마크릿 생성기-우클릭 해제</a>&quot;에 가서 아래쪽에 있는 &quot;DRAG INTO YOUR BOOKMARK-TOOLBAR&quot; 링크를 드래그해서 북마크바에 올려 놓으면 자동 추가된다.</p>
<p>gist에 공개되어 있지만 여기에도 소스를 남겨둔다.</p>
<pre class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.subvaAllowRightClick === <span class="hljs-literal">undefined</span>) {
        <span class="hljs-comment">// https://greasyfork.org/en/scripts/23772-absolute-enable-right-click-copy/code</span>
        <span class="hljs-built_in">window</span>.subvaAllowRightClick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">dom</span>) </span>{
            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">GetSelection</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> Style = dom.createElement(<span class="hljs-string">'style'</span>);
                Style.type = <span class="hljs-string">'text/css'</span>;
                <span class="hljs-keyword">var</span> TextNode = <span class="hljs-string">'*{user-select:text!important;-webkit-user-select:text!important;}'</span>;
                <span class="hljs-keyword">if</span> (Style.styleSheet) {
                    Style.styleSheet.cssText = TextNode;
                }
                <span class="hljs-keyword">else</span> {
                    Style.appendChild(dom.createTextNode(TextNode));
                }
                dom.getElementsByTagName(<span class="hljs-string">'head'</span>)[<span class="hljs-number">0</span>].appendChild(Style);
            })();

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SetEvents</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> events = [<span class="hljs-string">'copy'</span>, <span class="hljs-string">'cut'</span>, <span class="hljs-string">'paste'</span>, <span class="hljs-string">'select'</span>, <span class="hljs-string">'selectstart'</span>];
                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; events.length; i++)
                    dom.addEventListener(events[i], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{
                        e.stopPropagation();
                    }, <span class="hljs-literal">true</span>);
            })();

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RestoreEvents</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> n = <span class="hljs-literal">null</span>;
                <span class="hljs-keyword">var</span> d = <span class="hljs-built_in">document</span>;
                <span class="hljs-keyword">var</span> b = dom.body;
                <span class="hljs-keyword">var</span> SetEvents = [d.oncontextmenu = n, d.onselectstart = n, d.ondragstart = n, d.onmousedown = n];
                <span class="hljs-keyword">var</span> GetEvents = [b.oncontextmenu = n, b.onselectstart = n, b.ondragstart = n, b.onmousedown = n, b.oncut = n, b.oncopy = n, b.onpaste = n];
            })();

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RightClickButton</span>(<span class="hljs-params"></span>) </span>{
                setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    dom.oncontextmenu = <span class="hljs-literal">null</span>;
                }, <span class="hljs-number">2000</span>);
                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">EventsCall</span>(<span class="hljs-params">callback</span>) </span>{
                    <span class="hljs-keyword">this</span>.events = [<span class="hljs-string">'DOMAttrModified'</span>, <span class="hljs-string">'DOMNodeInserted'</span>, <span class="hljs-string">'DOMNodeRemoved'</span>, <span class="hljs-string">'DOMCharacterDataModified'</span>, <span class="hljs-string">'DOMSubtreeModified'</span>];
                    <span class="hljs-keyword">this</span>.bind();
                }

                EventsCall.prototype.bind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">this</span>.events.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{
                        dom.addEventListener(event, <span class="hljs-keyword">this</span>, <span class="hljs-literal">true</span>);
                    }.bind(<span class="hljs-keyword">this</span>));
                };
                EventsCall.prototype.handleEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">this</span>.isCalled = <span class="hljs-literal">true</span>;
                };
                EventsCall.prototype.unbind = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">this</span>.events.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{
                    }.bind(<span class="hljs-keyword">this</span>));
                };
                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">EventHandler</span>(<span class="hljs-params">event</span>) </span>{
                    <span class="hljs-keyword">this</span>.event = event;
                    <span class="hljs-keyword">this</span>.contextmenuEvent = <span class="hljs-keyword">this</span>.createEvent(<span class="hljs-keyword">this</span>.event.type);
                }

                EventHandler.prototype.createEvent = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">type</span>) </span>{
                    <span class="hljs-keyword">var</span> target = <span class="hljs-keyword">this</span>.event.target;
                    <span class="hljs-keyword">var</span> event = target.ownerDocument.createEvent(<span class="hljs-string">'MouseEvents'</span>);
                    event.initMouseEvent(type, <span class="hljs-keyword">this</span>.event.bubbles, <span class="hljs-keyword">this</span>.event.cancelable,
                        target.ownerDocument.defaultView, <span class="hljs-keyword">this</span>.event.detail,
                        <span class="hljs-keyword">this</span>.event.screenX, <span class="hljs-keyword">this</span>.event.screenY, <span class="hljs-keyword">this</span>.event.clientX, <span class="hljs-keyword">this</span>.event.clientY,
                        <span class="hljs-keyword">this</span>.event.ctrlKey, <span class="hljs-keyword">this</span>.event.altKey, <span class="hljs-keyword">this</span>.event.shiftKey, <span class="hljs-keyword">this</span>.event.metaKey,
                        <span class="hljs-keyword">this</span>.event.button, <span class="hljs-keyword">this</span>.event.relatedTarget);
                    <span class="hljs-keyword">return</span> event;
                };
                EventHandler.prototype.fire = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    <span class="hljs-keyword">var</span> target = <span class="hljs-keyword">this</span>.event.target;
                    <span class="hljs-keyword">var</span> contextmenuHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{
                        event.preventDefault();
                    }.bind(<span class="hljs-keyword">this</span>);
                    target.dispatchEvent(<span class="hljs-keyword">this</span>.contextmenuEvent);
                    <span class="hljs-keyword">this</span>.isCanceled = <span class="hljs-keyword">this</span>.contextmenuEvent.defaultPrevented;
                };
                <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'contextmenu'</span>, handleEvent, <span class="hljs-literal">true</span>);
                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleEvent</span>(<span class="hljs-params">event</span>) </span>{
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    <span class="hljs-keyword">var</span> handler = <span class="hljs-keyword">new</span> EventHandler(event);
                    <span class="hljs-built_in">window</span>.removeEventListener(event.type, handleEvent, <span class="hljs-literal">true</span>);
                    <span class="hljs-keyword">var</span> EventsCallBback = <span class="hljs-keyword">new</span> EventsCall(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{
                    });
                    handler.fire();
                    <span class="hljs-built_in">window</span>.addEventListener(event.type, handleEvent, <span class="hljs-literal">true</span>);
                    <span class="hljs-keyword">if</span> (handler.isCanceled &amp;&amp; (EventsCallBback.isCalled))
                        event.preventDefault();
                }
            })();

            <span class="hljs-comment">// function KeyPress(e) {</span>
            <span class="hljs-comment">//  if (e.altKey &amp;&amp; e.ctrlKey) {</span>
            <span class="hljs-comment">//      if (confirm("Activate Absolute Right Click Mode!") === true) {</span>
            <span class="hljs-comment">//          Absolute_Mod();</span>
            <span class="hljs-comment">//      }</span>
            <span class="hljs-comment">//  }</span>
            <span class="hljs-comment">// }</span>
            <span class="hljs-comment">// dom.addEventListener("keydown", KeyPress);</span>

            (<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Absolute_Mod</span>(<span class="hljs-params"></span>) </span>{
                <span class="hljs-keyword">var</span> events = [<span class="hljs-string">'contextmenu'</span>, <span class="hljs-string">'copy'</span>, <span class="hljs-string">'cut'</span>, <span class="hljs-string">'paste'</span>, <span class="hljs-string">'mouseup'</span>, <span class="hljs-string">'mousedown'</span>, <span class="hljs-string">'keyup'</span>, <span class="hljs-string">'keydown'</span>, <span class="hljs-string">'drag'</span>, <span class="hljs-string">'dragstart'</span>, <span class="hljs-string">'select'</span>, <span class="hljs-string">'selectstart'</span>];
                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; events.length; i++) {
                    dom.addEventListener(events[i], <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{
                        e.stopPropagation();
                    }, <span class="hljs-literal">true</span>);
                }
            })();
        };

<span class="hljs-comment">//      window.subvaAllowRightClick(document);</span>

        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runAll</span>(<span class="hljs-params">w</span>) </span>{
            <span class="hljs-keyword">try</span> {
                <span class="hljs-built_in">window</span>.subvaAllowRightClick(w.document);
            } <span class="hljs-keyword">catch</span> (e) {
            }
            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; w.frames.length; i++) {
                runAll(w.frames[i]);
            }
        }
    }
    runAll(<span class="hljs-built_in">window</span>);
})();</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/05/02/virtualbox-5-1-20-vagrant-shared-folders-mount-error/</id><title type="html">VirtualBox 5.1.20 버전업 후 Vagrant Shared Folders mount 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/05/02/virtualbox-5-1-20-vagrant-shared-folders-mount-error/"/><published>2017-05-02T13:51:56+09:00</published><updated>2017-05-02T14:02:44+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[개발 환경 구성을 위해 Vagrant를 사용중이다. 그런데 얼마전 VirtualBox를 5.1.20으로 업데이트하고 나니 Shared Folders를 mount 하는 과정에서 오류가 발생했다. Vagrant was unable to mount VirtualBox shared folders. This is usually because the filesystem "vboxsf" is not available. This filesystem is made available via the VirtualBox Guest Additions and kernel module. Please verify that these guest additions are properly installed in the guest. This is not a bug in Vagrant and is usually caused by a faulty Vagrant box. For context, the command attempted was: mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant The error output from the command was: mount: wrong fs type, bad option, bad superblock on vagrant, missing codepage or helper program, or other error In some cases useful info is found in syslog - try dmesg | tail or so. 나의 경우는 shared folders를 사용하지 않고 nfs mount를 사용하고 있어 사용 상에 문제가 되는 부분은 없었으나 실행시 마다 오류가 나타나는 것도 보기 싫고 vagrant up을 한번 더 해줘야 시작시 실행되는 스크립트가 정상 실행되었기 때문에 해결하기 위해 찾아봤다(사실 비슷한 문제에 대해 "VirtualBox 버전업 후 Vagrant synced_folder 설정에서 오류가 날 경우"라는 글을 쓴 적이 있었지만 이번엔 다른 문제였다). 검색해보니 일본어로 되어 있긴 하지만 "VirtualBox 5.1.20で共有フォルダーが動かなくなる対策" 글에 해결 방법이 나와 있었다. 간단한 해결 방법을 소개하자면 아래의 명령을 vagrant vm 내부에서 실행하면 된다. sudo rm /sbin/mount.vboxsf && sudo ln -s /usr/lib/VBoxGuestAdditions/mount.vboxsf /sbin/mount.vboxsf 이후에 vagrant를 재시작 해주면 문제는 해결된다. 재시작하기 싫다면 아래의 명령을 추가로 실행해서 즉시 mount 하는 것도 가능하다. sudo mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant]]></summary><content type="html"><![CDATA[<p>개발 환경 구성을 위해 <a href="https://www.vagrantup.com/">Vagrant</a>를 사용중이다. 그런데 얼마전 VirtualBox를 5.1.20으로 업데이트하고 나니 Shared Folders를 mount 하는 과정에서 오류가 발생했다.</p>
<pre><code>Vagrant was unable to mount VirtualBox shared folders. This is usually
because the filesystem "vboxsf" is not available. This filesystem is
made available via the VirtualBox Guest Additions and kernel module.
Please verify that these guest additions are properly installed in the
guest. This is not a bug in Vagrant and is usually caused by a faulty
Vagrant box. For context, the command attempted was:

mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant

The error output from the command was:

mount: wrong fs type, bad option, bad superblock on vagrant,
       missing codepage or helper program, or other error

       In some cases useful info is found in syslog - try
       dmesg | tail or so.</code></pre>
<p>나의 경우는 shared folders를 사용하지 않고 nfs mount를 사용하고 있어 사용 상에 문제가 되는 부분은 없었으나 실행시 마다 오류가 나타나는 것도 보기 싫고 <code>vagrant up</code>을 한번 더 해줘야 시작시 실행되는 스크립트가 정상 실행되었기 때문에 해결하기 위해 찾아봤다(사실 비슷한 문제에 대해 &quot;<a href="https://blog.asamaru.net/2015/12/02/vagrant-cant-mount-shared-folder/">VirtualBox 버전업 후 Vagrant synced_folder 설정에서 오류가 날 경우</a>&quot;라는 글을 쓴 적이 있었지만 이번엔 다른 문제였다).</p>
<p>검색해보니 일본어로 되어 있긴 하지만 &quot;<a href="http://qiita.com/poad1010/items/675ffe46e70135fff839">VirtualBox 5.1.20で共有フォルダーが動かなくなる対策</a>&quot; 글에 해결 방법이 나와 있었다.</p>
<p>간단한 해결 방법을 소개하자면 아래의 명령을 vagrant vm 내부에서 실행하면 된다.</p>
<pre class="hljs bash">sudo rm /sbin/mount.vboxsf &amp;&amp; sudo ln -s /usr/lib/VBoxGuestAdditions/mount.vboxsf /sbin/mount.vboxsf</pre>
<p>이후에 vagrant를 재시작 해주면 문제는 해결된다. </p>
<p>재시작하기 싫다면 아래의 명령을 추가로 실행해서 즉시 mount 하는 것도 가능하다.</p>
<pre class="hljs bash">sudo mount -t vboxsf -o dmode=755,fmode=644,uid=1000,gid=1000 vagrant /vagrant</pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/25/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8/</id><title type="html">PHP 에서 한글 파일명 사용시 pathinfo(), basename() 결과가 맞지 않는 문제 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/25/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8/"/><published>2017-04-25T20:27:54+09:00</published><updated>2017-04-25T21:59:55+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP에서 path에 대한 정보를 얻기 위해 pathinfo()와 basename()을 많이 사용한다. 그런데 path 내에 한글과 같이 UTF-8 문자열이 포함될 경우 결과가 이상하게 나올 수 있다. 일단 아래의 소스 코드와 실행 결과를 보자. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; echo '<br />'; $locales = explode("\n", trim(shell_exec('locale -a'))); foreach ($locales as $locale) { setlocale(LC_ALL, $locale); $info = pathinfo($filepath); if (strcmp($info['basename'], '가 나 다.txt') != 0) { echo $locale . ' -> ' . $info['basename'] . '<br />'; } } /* 실행 결과 Current Location : C C -> 나 다.txt C -> 나 다.txt POSIX -> 나 다.txt */ 위 코드는 현재 system 내에서 사용 가능한 모든 locale에 대해 실행 결과를 테스트한 결과다. 결과를 보면 정상적으로 처리되지 않고 첫글자가 잘려나간 잘못된 결과를 반환하는 경우가 있다. 바로 locale이 C 또는 POSIX인 경우다. 서버 환경 구성에 따른 차이가 있겠지만 나의 경우는 nobody 권한으로 실행되는 웹서버 상에서 현재 locale이 C로 나왔다. 따라서 한글 파일명이 포함된 path에 대해서는 pathinfo()를 사용할 수 없다. 이 문제에 대해 검색하다 Make PHP pathinfo() return the correct filename if the filename is UTF-8 라는 글을 찾았다. 여기서 질문을 한 aä.pdf path에 대해서는 현재 시점(PHP 7)에서 locale C와 POSIX에서도 문제가 없었다. 이 버그와 관련하여 패치가 되었지만 아직 한글에 대한 버그는 남아 있는 것으로 보인다. 혹시나 해서 아래와 같이 일본어로도 동일한 테스트를 해보니 역시나 문제가 발생한다. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/うながす.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; echo '<br />'; $locales = explode("\n", trim(shell_exec('locale -a'))); foreach ($locales as $locale) { setlocale(LC_ALL, $locale); $info = pathinfo($filepath); if (strcmp($info['basename'], 'うながす.txt') != 0) { echo $locale . ' -> ' . $info['basename'] . '<br />'; } } /* 실행 결과 Current Location : C C -> .txt C -> .txt POSIX -> .txt ja_JP -> ��ながす.txt ja_JP.eucjp -> ��ながす.txt ja_JP.ujis -> ��ながす.txt japanese -> ��ながす.txt japanese.euc -> ��ながす.txt ko_KR -> ��ながす.txt ko_KR.euckr -> ��ながす.txt korean -> ��ながす.txt korean.euc -> ��ながす.txt mt_MT -> ��ながす.txt mt_MT.iso88593 -> ��ながす.txt yi_US -> �ながす.txt yi_US.cp1255 -> �ながす.txt zh_CN -> .txt zh_CN.gb2312 -> .txt zh_HK -> �がす.txt zh_HK.big5hkscs -> �がす.txt zh_SG -> .txt zh_SG.gb2312 -> .txt zh_TW -> �がす.txt zh_TW.big5 -> �がす.txt zh_TW.euctw -> .txt */ 결론적으로 이 문제를 해결하기 위해서는 아래와 같이 간단히 해결 가능하다. <?php setlocale(LC_ALL,'ko_KR.UTF-8'); $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; /* 실행 결과 Current Location : ko_KR.UTF-8 ko_KR.UTF-8 -> 가 나 다.txt */ setlocale(LC_ALL,'ko_KR.UTF-8')와 같이 UTF-8을 사용하는 locale로 변경하면 한글 파일명을 가진 path에 대해서도 pathinfo는 정상적으로 동작한다(ko_KR임에도 불구하고 일본어도 정상 동작한다). 이 문제에서의 특징은 한가지가 더 있다. 파일명 앞에 영문자와 같이 한글이 아닌 글자가 있다면 이 문제가 발생하지 않는다는 것이다. 아래의 예시를 보자. <?php $currentLocal = setlocale(LC_ALL, 0); echo 'Current Location : ' . $currentLocal . "<br/>"; $filepath = '/home/a가 나 다.txt'; $info = pathinfo($filepath); echo $currentLocal . ' -> ' . $info['basename'] . '<br />'; /* 실행 결과 Current Location : C C -> a가 나 다.txt */ 이러한 원리를 이용한 방법으로 Make PHP pathinfo() return the correct filename if the filename is UTF-8에서는 아래와 같이 처리하는 방법을 제시하고 있다. <?php function getFilename($path) { // if there's no '/', we're probably dealing with just a filename // so just put an 'a' in front of it if (strpos($path, '/') === false) { $path_parts = pathinfo('a'.$path); } else { $path= str_replace('/', '/a', $path); $path_parts = pathinfo($path); } return substr($path_parts["filename"],1); } 하지만 이 방법 보다는 아래의 방법이 조금 더 나아 보인다(urlencode()를 이용하는 방법이다). <php function _pathinfo($path, $options = null) { $path = urlencode($path); $parts = null === $options ? pathinfo($path) : pathinfo($path, $options); foreach ($parts as $field => $value) { $parts[$field] = urldecode($value); } return $parts; } 결론적으로는 위 두가지 방법 보다는 setlocale(LC_ALL,'ko_KR.UTF-8') 을 이용해서 locale을 변경하는 것을 권장한다. 사용하는 라이브러리 내부 등에서도 pathinfo를 사용하는 경우가 있을 수 있으므로 프로그램이 시작시 locale을 변경하는 것이 좋을 것이다(단, locale이 다른 프로그램 영역에 영향을 줄 수 있는지에 대해서는 검토를 해보는 것이 좋다).]]></summary><content type="html"><![CDATA[<p>PHP에서 path에 대한 정보를 얻기 위해 <a href="http://php.net/manual/kr/function.pathinfo.php">pathinfo()</a>와 <a href="http://php.net/manual/kr/function.basename.php">basename()</a>을 많이 사용한다. 그런데 path 내에 한글과 같이 UTF-8 문자열이 포함될 경우 결과가 이상하게 나올 수 있다. 일단 아래의 소스 코드와 실행 결과를 보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$currentLocal = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . $currentLocal . <span class="hljs-string">"&lt;br/&gt;"</span>;

$filepath = <span class="hljs-string">'/home/가 나 다.txt'</span>;
$info = pathinfo($filepath);
<span class="hljs-keyword">echo</span> $currentLocal . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br /&gt;'</span>;

$locales = explode(<span class="hljs-string">"\n"</span>, trim(shell_exec(<span class="hljs-string">'locale -a'</span>)));
<span class="hljs-keyword">foreach</span> ($locales <span class="hljs-keyword">as</span> $locale) {
    setlocale(LC_ALL, $locale);
    $info = pathinfo($filepath);
    <span class="hljs-keyword">if</span> (strcmp($info[<span class="hljs-string">'basename'</span>], <span class="hljs-string">'가 나 다.txt'</span>) != <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">echo</span> $locale . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;
    }
}

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; 나 다.txt

C -&gt; 나 다.txt
POSIX -&gt; 나 다.txt
*/</span></pre>
<p>위 코드는 현재 system 내에서 사용 가능한 모든 locale에 대해 실행 결과를 테스트한 결과다. 결과를 보면 정상적으로 처리되지 않고 첫글자가 잘려나간 잘못된 결과를 반환하는 경우가 있다. 바로 locale이 <code>C</code> 또는 <code>POSIX</code>인 경우다.</p>
<p>서버 환경 구성에 따른 차이가 있겠지만 나의 경우는 nobody 권한으로 실행되는 웹서버 상에서 현재 locale이 <code>C</code>로 나왔다. 따라서 한글 파일명이 포함된 path에 대해서는 pathinfo()를 사용할 수 없다.</p>
<p>이 문제에 대해 검색하다 <a href="http://stackoverflow.com/questions/4451664/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8">Make PHP pathinfo() return the correct filename if the filename is UTF-8</a> 라는 글을 찾았다. 여기서 질문을 한 <code>aä.pdf</code> path에 대해서는 현재 시점(PHP 7)에서 locale <code>C</code>와 <code>POSIX</code>에서도 문제가 없었다. 이 버그와 관련하여 패치가 되었지만 아직 한글에 대한 버그는 남아 있는 것으로 보인다. 혹시나 해서 아래와 같이 일본어로도 동일한 테스트를 해보니 역시나 문제가 발생한다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$currentLocal = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . $currentLocal . <span class="hljs-string">"&lt;br/&gt;"</span>;

$filepath = <span class="hljs-string">'/home/うながす.txt'</span>;
$info = pathinfo($filepath);
<span class="hljs-keyword">echo</span> $currentLocal . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-keyword">echo</span> <span class="hljs-string">'&lt;br /&gt;'</span>;

$locales = explode(<span class="hljs-string">"\n"</span>, trim(shell_exec(<span class="hljs-string">'locale -a'</span>)));
<span class="hljs-keyword">foreach</span> ($locales <span class="hljs-keyword">as</span> $locale) {
    setlocale(LC_ALL, $locale);
    $info = pathinfo($filepath);
    <span class="hljs-keyword">if</span> (strcmp($info[<span class="hljs-string">'basename'</span>], <span class="hljs-string">'うながす.txt'</span>) != <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">echo</span> $locale . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;
    }
}

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; .txt

C -&gt; .txt
POSIX -&gt; .txt
ja_JP -&gt; ��ながす.txt
ja_JP.eucjp -&gt; ��ながす.txt
ja_JP.ujis -&gt; ��ながす.txt
japanese -&gt; ��ながす.txt
japanese.euc -&gt; ��ながす.txt
ko_KR -&gt; ��ながす.txt
ko_KR.euckr -&gt; ��ながす.txt
korean -&gt; ��ながす.txt
korean.euc -&gt; ��ながす.txt
mt_MT -&gt; ��ながす.txt
mt_MT.iso88593 -&gt; ��ながす.txt
yi_US -&gt; �ながす.txt
yi_US.cp1255 -&gt; �ながす.txt
zh_CN -&gt; .txt
zh_CN.gb2312 -&gt; .txt
zh_HK -&gt; �がす.txt
zh_HK.big5hkscs -&gt; �がす.txt
zh_SG -&gt; .txt
zh_SG.gb2312 -&gt; .txt
zh_TW -&gt; �がす.txt
zh_TW.big5 -&gt; �がす.txt
zh_TW.euctw -&gt; .txt
*/</span></pre>
<p>결론적으로 이 문제를 해결하기 위해서는 아래와 같이 간단히 해결 가능하다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
setlocale(LC_ALL,<span class="hljs-string">'ko_KR.UTF-8'</span>);

$currentLocal = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . $currentLocal . <span class="hljs-string">"&lt;br/&gt;"</span>;

$filepath = <span class="hljs-string">'/home/가 나 다.txt'</span>;
$info = pathinfo($filepath);
<span class="hljs-keyword">echo</span> $currentLocal . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-comment">/*
실행 결과

Current Location : ko_KR.UTF-8
ko_KR.UTF-8 -&gt; 가 나 다.txt
*/</span></pre>
<p><code>setlocale(LC_ALL,'ko_KR.UTF-8')</code>와 같이 <code>UTF-8</code>을 사용하는 locale로 변경하면 한글 파일명을 가진 path에 대해서도 pathinfo는 정상적으로 동작한다(<code>ko_KR</code>임에도 불구하고 일본어도 정상 동작한다).</p>
<p>이 문제에서의 특징은 한가지가 더 있다. 파일명 앞에 영문자와 같이 한글이 아닌 글자가 있다면 이 문제가 발생하지 않는다는 것이다. 아래의 예시를 보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$currentLocal = setlocale(LC_ALL, <span class="hljs-number">0</span>);
<span class="hljs-keyword">echo</span> <span class="hljs-string">'Current Location : '</span> . $currentLocal . <span class="hljs-string">"&lt;br/&gt;"</span>;

$filepath = <span class="hljs-string">'/home/a가 나 다.txt'</span>;
$info = pathinfo($filepath);
<span class="hljs-keyword">echo</span> $currentLocal . <span class="hljs-string">' -&gt; '</span> . $info[<span class="hljs-string">'basename'</span>] . <span class="hljs-string">'&lt;br /&gt;'</span>;

<span class="hljs-comment">/*
실행 결과

Current Location : C
C -&gt; a가 나 다.txt
*/</span></pre>
<p>이러한 원리를 이용한 방법으로 <a href="http://stackoverflow.com/questions/4451664/make-php-pathinfo-return-the-correct-filename-if-the-filename-is-utf-8">Make PHP pathinfo() return the correct filename if the filename is UTF-8</a>에서는 아래와 같이 처리하는 방법을 제시하고 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFilename</span><span class="hljs-params">($path)</span>
</span>{
    <span class="hljs-comment">// if there's no '/', we're probably dealing with just a filename</span>
    <span class="hljs-comment">// so just put an 'a' in front of it</span>
    <span class="hljs-keyword">if</span> (strpos($path, <span class="hljs-string">'/'</span>) === <span class="hljs-keyword">false</span>)
    {
        $path_parts = pathinfo(<span class="hljs-string">'a'</span>.$path);
    }
    <span class="hljs-keyword">else</span>
    {
        $path= str_replace(<span class="hljs-string">'/'</span>, <span class="hljs-string">'/a'</span>, $path);
        $path_parts = pathinfo($path);
    }
    <span class="hljs-keyword">return</span> substr($path_parts[<span class="hljs-string">"filename"</span>],<span class="hljs-number">1</span>);
}</pre>
<p>하지만 이 방법 보다는 아래의 방법이 조금 더 나아 보인다(<a href="http://php.net/manual/kr/function.urldecode.php">urlencode()</a>를 이용하는 방법이다).</p>
<pre class="hljs php">&lt;php
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_pathinfo</span><span class="hljs-params">($path, $options = null)</span>
</span>{
    $path = urlencode($path);
    $parts = <span class="hljs-keyword">null</span> === $options ? pathinfo($path) : pathinfo($path, $options);
    <span class="hljs-keyword">foreach</span> ($parts <span class="hljs-keyword">as</span> $field =&gt; $value) {
        $parts[$field] = urldecode($value);
    }
    <span class="hljs-keyword">return</span> $parts;
}</pre>
<p>결론적으로는 위 두가지 방법 보다는 <code>setlocale(LC_ALL,'ko_KR.UTF-8')</code> 을 이용해서 locale을 변경하는 것을 권장한다. 사용하는 라이브러리 내부 등에서도 pathinfo를 사용하는 경우가 있을 수 있으므로 프로그램이 시작시 locale을 변경하는 것이 좋을 것이다(단, locale이 다른 프로그램 영역에 영향을 줄 수 있는지에 대해서는 검토를 해보는 것이 좋다). </p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/12/could-not-find-comandroidsupportconstraintconstraint-layout/</id><title type="html">Could not find com.android.support.constraint:constraint-layout 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/12/could-not-find-comandroidsupportconstraintconstraint-layout/"/><published>2017-04-12T17:02:44+09:00</published><updated>2017-04-12T17:02:44+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 ConstraintLayout를 사용하기 위해 아래와 같이 gradle에 설정했었다. dependencies { compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha9' } 업데이트가 있는지 확인해 보니 1.0.1이 있기에 아래와 같이 변경했다. dependencies { compile 'com.android.support.constraint:constraint-layout:1.0.1' } 그리고 빌드를 해려고 했더니 아래와 같은 오류가 났다. Error:Could not find com.android.support.constraint:constraint-layout:1.0.1. Required by:myapp:app:unspecified 관련 정보를 검색해 보니 아래와 같이 설정이 필요하다. "Settings -> Appearance & Behavior -> System Settings -> Android SDK -> SDK Tools" 에서 "ConstraintLayout for Android" 를 체크해서 사용 가능하도록 해줘야 한다. 나의 경우는 기존에 사용했었기 때문에 체크는 되어 있었으나 업데이트가 되지 않아서 발생한 문제였다. 다시 체크하여 업데이트를 받고 나니 정상적으로 빌드가 완료되었다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 <a href="https://developer.android.com/training/constraint-layout/index.html">ConstraintLayout</a>를 사용하기 위해 아래와 같이 gradle에 설정했었다.</p>
<pre class="hljs gradle"><span class="hljs-keyword">dependencies</span> {
    <span class="hljs-keyword">compile</span> <span class="hljs-string">'com.android.support.constraint:constraint-layout:1.0.0-alpha9'</span>
}</pre>
<p>업데이트가 있는지 확인해 보니 1.0.1이 있기에 아래와 같이 변경했다.</p>
<pre class="hljs gradle"><span class="hljs-keyword">dependencies</span> {
    <span class="hljs-keyword">compile</span> <span class="hljs-string">'com.android.support.constraint:constraint-layout:1.0.1'</span>
}</pre>
<p>그리고 빌드를 해려고 했더니 아래와 같은 오류가 났다.</p>
<pre><code>Error:Could not find com.android.support.constraint:constraint-layout:1.0.1.
Required by:myapp:app:unspecified</code></pre>
<p>관련 정보를 검색해 보니 아래와 같이 설정이 필요하다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/04/could-not-find-comandroidsupportconstraintconstraint-layout-1.png" alt="could-not-find-comandroidsupportconstraintconstraint-layout-1" width="988" height="699" /></p>
<p>&quot;Settings -&gt; Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK -&gt; SDK Tools&quot; 에서 &quot;ConstraintLayout for Android&quot; 를 체크해서 사용 가능하도록 해줘야 한다.</p>
<p>나의 경우는 기존에 사용했었기 때문에 체크는 되어 있었으나 업데이트가 되지 않아서 발생한 문제였다. 다시 체크하여 업데이트를 받고 나니 정상적으로 빌드가 완료되었다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/11/target-overrides-the-always-embed-swift-standard-libraries-build-setting/</id><title type="html">target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting 오류 해결</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/11/target-overrides-the-always-embed-swift-standard-libraries-build-setting/"/><published>2017-04-11T21:40:03+09:00</published><updated>2017-04-11T21:40:03+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="swift" label="swift" /><summary><![CDATA[Xcode 8에서 cocoapods 사용시 아래와 같은 오류가 발생하는 경우가 있다. [!] The `xproject [Debug]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.debug.xcconfig'. This can lead to problems with the CocoaPods installation - Use the `$(inherited)` flag, or - Remove the build settings from the target. [!] The `xproject [Release]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.release.xcconfig'. This can lead to problems with the CocoaPods installation - Use the `$(inherited)` flag, or - Remove the build settings from the target. 최근 Xcode와 cocoapods를 업데이트하고 위와 같은 오류가 발생해서 찾아보니 Errors after updating to Xcode 8: "No such module" and "target overrides the EMBEDDED_CONTENT_CONTAINS_SWIFTbuild setting" 에서 해결 방법을 설명하고 있었다. Project/Targets -> [Project Name] -> Build Settings -> "ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES" 를 "$(inherited)"로 변경하는 것으로 위 문제는 간단히 해결된다. Xcode 8 Release Notes 주요 내용 정리를 보면 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES에 대해 다음과 같이 설명하고 있다. EMBEDDED_CONTENT_CONTAINS_SWIFT는 없어지고 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES가 추가되었다. 이 새로운 설정은 Xcode에서 항상 Swift Standard Libearies를 채워넣도록 지정하는 것이다. 대상에 직접 사용하거나 덧붙여 다른 제품이 Swift를 사용하는 경우에만 이 설정을 사용할 수 있다.]]></summary><content type="html"><![CDATA[<p>Xcode 8에서 <a href="https://cocoapods.org/">cocoapods</a> 사용시  아래와 같은 오류가 발생하는 경우가 있다.</p>
<pre class="hljs bash">[!] The `xproject [Debug]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined <span class="hljs-keyword">in</span> `Pods/Target Support Files/Pods-xproject/Pods-xproject.debug.xcconfig<span class="hljs-string">'. This can lead to problems with the CocoaPods installation
    - Use the `$(inherited)` flag, or
    - Remove the build settings from the target.

[!] The `xproject [Release]` target overrides the `ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES` build setting defined in `Pods/Target Support Files/Pods-xproject/Pods-xproject.release.xcconfig'</span>. This can lead to problems with the CocoaPods installation
    - Use the `$(inherited)` flag, or
    - Remove the build settings from the target.</pre>
<p>최근 Xcode와 cocoapods를 업데이트하고 위와 같은 오류가 발생해서 찾아보니 <a href="http://stackoverflow.com/a/39686652">Errors after updating to Xcode 8: &quot;No such module&quot; and &quot;target overrides the <code>EMBEDDED_CONTENT_CONTAINS_SWIFT</code>build setting&quot;</a> 에서 해결 방법을 설명하고 있었다.</p>
<p>Project/Targets -&gt; [Project Name] -&gt; Build Settings -&gt;  &quot;ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES&quot; 를 &quot;$(inherited)&quot;로 변경하는 것으로 위 문제는 간단히 해결된다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/04/target-overrides-the-always-embed-swift-standard-libraries-build-setting-1.png" alt="target-overrides-the-always-embed-swift-standard-libraries-build-setting-1" width="1123" height="247" /></p>
<p><a href="https://swifter.kr/2016/09/26/xcode-8-release-notes-%EC%A3%BC%EC%9A%94-%EB%82%B4%EC%9A%A9-%EC%A0%95%EB%A6%AC/">Xcode 8 Release Notes 주요 내용 정리</a>를 보면 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES에 대해 다음과 같이 설명하고 있다.</p>
<blockquote>
<p>EMBEDDED_CONTENT_CONTAINS_SWIFT는 없어지고 ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES가 추가되었다. 이 새로운 설정은 Xcode에서 항상 Swift Standard Libearies를 채워넣도록 지정하는 것이다. 대상에 직접 사용하거나 덧붙여 다른 제품이 Swift를 사용하는 경우에만 이 설정을 사용할 수 있다.</p>
</blockquote>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/04/css-image-vertical-center/</id><title type="html">CSS로 이미지 세로 중앙 정렬(Vertical align)하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/04/css-image-vertical-center/"/><published>2017-04-04T17:14:41+09:00</published><updated>2017-04-04T17:14:41+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="css" label="css" /><summary><![CDATA[HTML에서 <img>를 CSS만으로 비율을 유지한 채로 특정 영역의 중앙에 출력하는 방법은 다음과 같다. <!DOCTYPE html> <html> <head> <meta charset="utf-8"/> <style type="text/css"> /* 예시를 위한 css */ dl { float:left; margin-right:20px; } dt { clear:both; } dd { margin:0 0 20px 0; padding:10px; float:left; } dd > img, dd > div { border:#ccc solid 1px; float:left; margin-right:10px; } /* position 을 이용한 방법 */ div.box1 { position:relative; width:150px; height:200px; } div.box1 > img { position:absolute; max-width:100%; max-height:100%; width:auto; height:auto; margin:auto; top:0; bottom:0; left:0; right:0; } /* line-height 를 이용한 방법 */ div.box2 { width:150px; height:200px; line-height:200px; text-align:center; } div.box2 > img { max-width:100%; max-height:100%; vertical-align:middle; } /* :before / content 를 이용한 방법 */ div.box3 { width:150px; height:200px; text-align:center; white-space:nowrap; font:0/0 a; } div.box3:before { content:""; display:inline-block; vertical-align:middle; height:100%; } div.box3 > img { max-width:100%; max-height:100%; display:inline-block; vertical-align:middle; } /* flex 를 이용한 방법 */ div.box4 { width:150px; height:200px; display:flex; justify-content:center; align-items:center; } div.box4 > img { max-width:100%; max-height:100%; } </style> </head> <body> <dl> <dt>position 을 이용한 방법</dt> <dd> <div class="box1"> <img src="test_100px.png" alt="test image"/> </div> <div class="box1"> <img src="test_550px.png" alt="test image"/> </div> </dd> <dt>line-height 를 이용한 방법</dt> <dd> <div class="box2"> <img src="test_100px.png" alt="test image"/> </div> <div class="box2"> <img src="test_550px.png" alt="test image"/> </div> </dd> </dl> <dl> <dt>:before / content 를 이용한 방법</dt> <dd> <div class="box3"> <img src="test_100px.png" alt="test image"/> </div> <div class="box3"> <img src="test_550px.png" alt="test image"/> </div> </dd> <dt>flex 를 이용한 방법</dt> <dd> <div class="box4"> <img src="test_100px.png" alt="test image"/> </div> <div class="box4"> <img src="test_550px.png" alt="test image"/> </div> </dd> </dl> </body> </html> 총 4가지 방법을 예시로 나열했지만 나의 경우는 크로스 브라우징을 위해 "position 을 이용한 방법"이나 "line-height 를 이용한 방법"을 주로 사용한다. 하지만 상황에 따라서는 다른 방법이 유용할 수도 있기에 함께 남겨둔다. 그리고 여기서 사용된 원리를 잘 이용하면 다른 레이아웃을 구성하는데도 도움이 되니 한번쯤은 원리를 참고해보면 좋을 듯하다.]]></summary><content type="html"><![CDATA[<p>HTML에서 <code>&lt;img&gt;</code>를 CSS만으로 비율을 유지한 채로 특정 영역의 중앙에 출력하는 방법은 다음과 같다.</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/04/image_align_center.png" alt="phpstorm formatter markers" width="706" height="509" /></p>
<pre class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css">
        <span class="hljs-comment">/* 예시를 위한 css */</span>
        <span class="hljs-selector-tag">dl</span> { <span class="hljs-attribute">float</span>:left; <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">20px</span>; }
        <span class="hljs-selector-tag">dt</span> { <span class="hljs-attribute">clear</span>:both; }
        <span class="hljs-selector-tag">dd</span> { <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>; <span class="hljs-attribute">float</span>:left; }
        <span class="hljs-selector-tag">dd</span> &gt; <span class="hljs-selector-tag">img</span>,
        <span class="hljs-selector-tag">dd</span> &gt; <span class="hljs-selector-tag">div</span> { <span class="hljs-attribute">border</span>:<span class="hljs-number">#ccc</span> solid <span class="hljs-number">1px</span>; <span class="hljs-attribute">float</span>:left; <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">10px</span>; }
        <span class="hljs-comment">/* position 을 이용한 방법 */</span>
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box1</span> {
            <span class="hljs-attribute">position</span>:relative;
            <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;
        }
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box1</span> &gt; <span class="hljs-selector-tag">img</span> {
            <span class="hljs-attribute">position</span>:absolute;
            <span class="hljs-attribute">max-width</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">max-height</span>:<span class="hljs-number">100%</span>;
            <span class="hljs-attribute">width</span>:auto; <span class="hljs-attribute">height</span>:auto;
            <span class="hljs-attribute">margin</span>:auto;
            <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">left</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;
        }
        <span class="hljs-comment">/* line-height 를 이용한 방법 */</span>
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box2</span> {
            <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>; <span class="hljs-attribute">line-height</span>:<span class="hljs-number">200px</span>;
            <span class="hljs-attribute">text-align</span>:center;
        }
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box2</span> &gt; <span class="hljs-selector-tag">img</span> {
            <span class="hljs-attribute">max-width</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">max-height</span>:<span class="hljs-number">100%</span>;
            <span class="hljs-attribute">vertical-align</span>:middle;
        }
        <span class="hljs-comment">/* :before / content 를 이용한 방법 */</span>
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box3</span> {
            <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;
            <span class="hljs-attribute">text-align</span>:center;
            <span class="hljs-attribute">white-space</span>:nowrap;
            <span class="hljs-attribute">font</span>:<span class="hljs-number">0</span>/<span class="hljs-number">0</span> a;
        }
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box3</span><span class="hljs-selector-pseudo">:before</span> {
            <span class="hljs-attribute">content</span>:<span class="hljs-string">""</span>;
            <span class="hljs-attribute">display</span>:inline-block;
            <span class="hljs-attribute">vertical-align</span>:middle;
            <span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;
        }
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box3</span> &gt; <span class="hljs-selector-tag">img</span> {
            <span class="hljs-attribute">max-width</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">max-height</span>:<span class="hljs-number">100%</span>;
            <span class="hljs-attribute">display</span>:inline-block;
            <span class="hljs-attribute">vertical-align</span>:middle;
        }
        <span class="hljs-comment">/* flex 를 이용한 방법 */</span>
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box4</span> {
            <span class="hljs-attribute">width</span>:<span class="hljs-number">150px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">200px</span>;
            <span class="hljs-attribute">display</span>:flex;
            <span class="hljs-attribute">justify-content</span>:center;
            <span class="hljs-attribute">align-items</span>:center;
        }
        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box4</span> &gt; <span class="hljs-selector-tag">img</span> {
            <span class="hljs-attribute">max-width</span>:<span class="hljs-number">100%</span>; <span class="hljs-attribute">max-height</span>:<span class="hljs-number">100%</span>;
        }
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>position 을 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box1"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_100px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box1"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_550px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>line-height 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box2"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_100px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box2"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_550px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>:before / content 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box3"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_100px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box3"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_550px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>flex 를 이용한 방법<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box4"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_100px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"box4"</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"test_550px.png"</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">"test image"</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></pre>
<p>총 4가지 방법을 예시로 나열했지만 나의 경우는 크로스 브라우징을 위해 &quot;position 을 이용한 방법&quot;이나 &quot;line-height 를 이용한 방법&quot;을 주로 사용한다. 하지만 상황에 따라서는 다른 방법이 유용할 수도 있기에 함께 남겨둔다. 그리고 여기서 사용된 원리를 잘 이용하면 다른 레이아웃을 구성하는데도 도움이 되니 한번쯤은 원리를 참고해보면 좋을 듯하다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/02/php-lock-file-using-symlink/</id><title type="html">PHP에서 symlink()를 이용해 lock 구현하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/02/php-lock-file-using-symlink/"/><published>2017-04-02T17:26:08+09:00</published><updated>2017-04-02T17:26:08+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[PHP에서 외부 Extensions 없이 간단히 lock을 구현하고자 할 때 file을 이용하는 경우가 많다(file에 대한 읽기/쓰기 lock을 말하는 것이 아니다). 예를들어 어떤 프로세스가 중첩되어 실행되는 것을 막기 위한 lock이 필요할 수 있다. 나의 경우는 Laravel의 Queue를 사용하면서 Daemon을 동시에 여러개를 띄운 상황에서 특정 작업의 중첩을 막기 위해 필요했다. Job에 대한 중복 실행은 Laravel의 Queue가 DB lock을 이용해 자체적으로 처리한다. 하지만 나는 Job의 중복 실행을 막는 것이 아닌 프로세스의 중첩을 막는 것이 필요했다. 가장 간단한 구현을 생각하면 아래와 같이 할 수 있다. #!/usr/bin/php <?php define('LOCK_FILE', "/var/run/" . basename($argv[0], ".php") . ".lock"); if (isLocked()) { die("Already running.\n"); } # The rest of your script goes here.... echo "Hello world!\n"; sleep(30); unlink(LOCK_FILE); exit(0); function isLocked() { # If lock file exists, check if stale. If exists and is not stale, return TRUE # Else, create lock file and return FALSE. if (file_exists(LOCK_FILE)) { # check if it's stale $lockingPID = trim(file_get_contents(LOCK_FILE)); # Get all active PIDs. $pids = explode("\n", trim(`ps -e | awk '{print $1}'`)); # If PID is still active, return true if (in_array($lockingPID, $pids)) { return true; } # Lock-file is stale, so kill it. Then move on to re-creating it. echo "Removing stale lock file.\n"; unlink(LOCK_FILE); } file_put_contents(LOCK_FILE, getmypid() . "\n"); return false; } 위 코드는 Kevin Traas가 제시한 코드다. 내가 laravel에서 구현 했던 코드는 예시로 사용하기엔 여러 가지 다른 코드가 섞여있어 이해하기 쉬운 코드로 예를 들었다. 어차피 원리는 거의 유사하다. 위 코드는 잘 동작할 것처럼 보이지만 그렇지 않다(일반적인 상황에서는 잘 동작한다). 이유는 lock을 검사하는 코드와 lock을 생성하는 코드 사이에 다른 프로세스가 끼어들 수 있기 때문이다. 위에서 이야기한 것처럼 Daemon이 동시에 여러개 떠 있는 상황에서 동시에 lock을 사용하다보면 생각보다 빈번하게 오작동 한다(프로세스가 중첩된다). 이 문제를 해결하기 위해서는 symlink()를 이용하는 방법이 있다. 아래는 Kevin Traas가 제시한 코드의 문제와 해결 방법을 제시한 Radu Cristescu의 코드다. #!/usr/bin/php <?php define('LOCK_FILE', "/var/run/" . basename($argv[0], ".php") . ".lock"); if (!tryLock()) { die("Already running.\n"); } # remove the lock on exit (Control+C doesn't count as 'exit'?) register_shutdown_function('unlink', LOCK_FILE); # The rest of your script goes here.... echo "Hello world!\n"; sleep(30); exit(0); function tryLock() { # If lock file exists, check if stale. If exists and is not stale, return TRUE # Else, create lock file and return FALSE. if (@symlink("/proc/" . getmypid(), LOCK_FILE) !== false) # the @ in front of 'symlink' is to suppress the NOTICE you get if the LOCK_FILE exists { return true; } # link already exists # check if it's stale if (is_link(LOCK_FILE) && !is_dir(LOCK_FILE)) { unlink(LOCK_FILE); # try to lock again return tryLock(); } return false; } 간단히 설명하자면 symlink()를 이용해서 lock이 걸려 있는지를 검사하는 과정과 lock을 생성하는 과정을 한번에 처리하는 것이다. 이 방법을 사용하면 보다 안전하게 lock-file 매커니즘을 사용할 수 있다.]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/">PHP</a>에서 외부 Extensions 없이 간단히 lock을 구현하고자 할 때 file을 이용하는 경우가 많다(file에 대한 읽기/쓰기 lock을 말하는 것이 아니다).</p>
<p>예를들어 어떤 프로세스가 중첩되어 실행되는 것을 막기 위한 lock이 필요할 수 있다. 나의 경우는 <a href="https://laravel.com/">Laravel</a>의 <a href="https://laravel.com/docs/master/queues">Queue</a>를 사용하면서 Daemon을 동시에 여러개를 띄운 상황에서 특정 작업의 중첩을 막기 위해 필요했다. Job에 대한 중복 실행은 Laravel의 Queue가 DB lock을 이용해 자체적으로 처리한다. 하지만 나는 Job의 중복 실행을 막는 것이 아닌 프로세스의 중첩을 막는 것이 필요했다.</p>
<p>가장 간단한 구현을 생각하면 아래와 같이 할 수 있다.</p>
<pre class="hljs php"><span class="hljs-comment">#!/usr/bin/php</span>
<span class="hljs-meta">&lt;?php</span>
define(<span class="hljs-string">'LOCK_FILE'</span>, <span class="hljs-string">"/var/run/"</span> . basename($argv[<span class="hljs-number">0</span>], <span class="hljs-string">".php"</span>) . <span class="hljs-string">".lock"</span>);
<span class="hljs-keyword">if</span> (isLocked()) {
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"Already running.\n"</span>);
}

<span class="hljs-comment"># The rest of your script goes here....</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">"Hello world!\n"</span>;
sleep(<span class="hljs-number">30</span>);

unlink(LOCK_FILE);
<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isLocked</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment"># If lock file exists, check if stale.  If exists and is not stale, return TRUE</span>
    <span class="hljs-comment"># Else, create lock file and return FALSE.</span>

    <span class="hljs-keyword">if</span> (file_exists(LOCK_FILE)) {
        <span class="hljs-comment"># check if it's stale</span>
        $lockingPID = trim(file_get_contents(LOCK_FILE));

        <span class="hljs-comment"># Get all active PIDs.</span>
        $pids = explode(<span class="hljs-string">"\n"</span>, trim(`ps -e | awk <span class="hljs-string">'{print $1}'</span>`));

        <span class="hljs-comment"># If PID is still active, return true</span>
        <span class="hljs-keyword">if</span> (in_array($lockingPID, $pids)) {
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
        }

        <span class="hljs-comment"># Lock-file is stale, so kill it.  Then move on to re-creating it.</span>
        <span class="hljs-keyword">echo</span> <span class="hljs-string">"Removing stale lock file.\n"</span>;
        unlink(LOCK_FILE);
    }

    file_put_contents(LOCK_FILE, getmypid() . <span class="hljs-string">"\n"</span>);
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;

}</pre>
<p>위 코드는 <a href="http://php.net/manual/en/function.getmypid.php#93753">Kevin Traas가 제시한 코드</a>다. 내가 laravel에서 구현 했던 코드는 예시로 사용하기엔 여러 가지 다른 코드가 섞여있어 이해하기 쉬운 코드로 예를 들었다. 어차피 원리는 거의 유사하다.</p>
<p>위 코드는 잘 동작할 것처럼 보이지만 그렇지 않다(일반적인 상황에서는 잘 동작한다). 이유는 lock을 검사하는 코드와 lock을 생성하는 코드 사이에 다른 프로세스가 끼어들 수 있기 때문이다.</p>
<p>위에서 이야기한 것처럼 Daemon이 동시에 여러개 떠 있는 상황에서 동시에 lock을 사용하다보면 생각보다 빈번하게 오작동 한다(프로세스가 중첩된다).</p>
<p>이 문제를 해결하기 위해서는 <a href="http://php.net/manual/en/function.symlink.php">symlink()</a>를 이용하는 방법이 있다.</p>
<p>아래는 Kevin Traas가 제시한 코드의 문제와 해결 방법을 제시한 <a href="http://php.net/manual/en/function.getmypid.php#112782">Radu Cristescu의 코드</a>다.</p>
<pre class="hljs php"><span class="hljs-comment">#!/usr/bin/php</span>
<span class="hljs-meta">&lt;?php</span>

define(<span class="hljs-string">'LOCK_FILE'</span>, <span class="hljs-string">"/var/run/"</span> . basename($argv[<span class="hljs-number">0</span>], <span class="hljs-string">".php"</span>) . <span class="hljs-string">".lock"</span>);

<span class="hljs-keyword">if</span> (!tryLock()) {
    <span class="hljs-keyword">die</span>(<span class="hljs-string">"Already running.\n"</span>);
}

<span class="hljs-comment"># remove the lock on exit (Control+C doesn't count as 'exit'?)</span>
register_shutdown_function(<span class="hljs-string">'unlink'</span>, LOCK_FILE);

<span class="hljs-comment"># The rest of your script goes here....</span>
<span class="hljs-keyword">echo</span> <span class="hljs-string">"Hello world!\n"</span>;
sleep(<span class="hljs-number">30</span>);

<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);

<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tryLock</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment"># If lock file exists, check if stale.  If exists and is not stale, return TRUE</span>
    <span class="hljs-comment"># Else, create lock file and return FALSE.</span>

    <span class="hljs-keyword">if</span> (@symlink(<span class="hljs-string">"/proc/"</span> . getmypid(), LOCK_FILE) !== <span class="hljs-keyword">false</span>) <span class="hljs-comment"># the @ in front of 'symlink' is to suppress the NOTICE you get if the LOCK_FILE exists</span>
    {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;
    }

    <span class="hljs-comment"># link already exists</span>
    <span class="hljs-comment"># check if it's stale</span>
    <span class="hljs-keyword">if</span> (is_link(LOCK_FILE) &amp;&amp; !is_dir(LOCK_FILE)) {
        unlink(LOCK_FILE);
        <span class="hljs-comment"># try to lock again</span>
        <span class="hljs-keyword">return</span> tryLock();
    }

    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;
}</pre>
<p>간단히 설명하자면 <a href="http://php.net/manual/en/function.symlink.php">symlink()</a>를 이용해서 lock이 걸려 있는지를 검사하는 과정과 lock을 생성하는 과정을 한번에 처리하는 것이다. 이 방법을 사용하면 보다 안전하게 lock-file 매커니즘을 사용할 수 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/04/01/phpstorm-disable-code-formatting-for-part-of-code/</id><title type="html">PhpStorm에서 부분적으로 코드 포멧팅(code formatting) disable 하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/04/01/phpstorm-disable-code-formatting-for-part-of-code/"/><published>2017-04-01T17:27:25+09:00</published><updated>2017-04-01T17:27:25+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="tip" label="tip" /><summary><![CDATA[PhpStorm을 사용하면서 자주 이용하는 기능 중 하나가 code formatting 기능이다. 코드의 가독성을 높이고 code style을 유지하는데 도움이 되기 때문이다. 이 기능을 사용하면서 항상 불편했던 것 중 하나가 부분적으로 code formatting을 제외할 수 없다는 것이었다. 그런데 알고 보니 이미 부분적으로 code formatting을 제외하는 기능이 존재했다. PhpStorm 중 2016.x 와 2017.x 기준으로 Preferences > Editor > Code Style > Formatter Control에서 'Enable formatter markers in comments'를 체크 해주고 code formatting 을 제외하고 싶은 곳을 @formatter:off와 @formatter:on으로 둘러싸주면 된다(설정을 보면 알겠지만 문구는 변경이 가능하다). PhpStorm 중 version 14의 경우는 Preferences > Editor > Code Style > Formatter Control에서 설정 가능하다고 한다. PHP를 기준으로 아래와 같이 사용 할 수 있다. <?php // @formatter:off $a = 1; $b = 2; // @formatter:on 또한, blade 템플릿을 기준으로 아래와 같이 사용 할 수 있다. {{--@formatter:off--}} @if(!empty($conf['site']['googleAnalytics'])) <script> if (typeof window.GoogleAnalyticsObject == 'undefined') { (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','https://www.google-analytics.com/analytics.js','ga'); ga('create', '{{$conf['site']['googleAnalytics']}}', 'auto'); ga('send', 'pageview'); } </script> @endif {{--@formatter:on--}} 위의 예시를 보면 알겠지만 @formatter 문구는 주석으로 처리하면 된다(다른 언어의 경우도 해당 언어에서의 주석으로 처리하면 된다). 참고 : How to disable code formatting for some part of the code using comments?]]></summary><content type="html"><![CDATA[<p><a href="https://www.jetbrains.com/phpstorm/">PhpStorm</a>을 사용하면서 자주 이용하는 기능 중 하나가 code formatting 기능이다. 코드의 가독성을 높이고 code style을 유지하는데 도움이 되기 때문이다.</p>
<p>이 기능을 사용하면서 항상 불편했던 것 중 하나가 부분적으로 code formatting을 제외할 수 없다는 것이었다. 그런데 알고 보니 이미 부분적으로 code formatting을 제외하는 기능이 존재했다.</p>
<p>PhpStorm 중 2016.x 와 2017.x 기준으로 <code>Preferences &gt; Editor &gt; Code Style &gt; Formatter Control</code>에서 'Enable formatter markers in comments'를 체크 해주고 code formatting 을 제외하고 싶은 곳을 <code>@formatter:off</code>와 <code>@formatter:on</code>으로 둘러싸주면 된다(설정을 보면 알겠지만 문구는 변경이 가능하다).</p>
<p><img src="https://blog.asamaru.net/res/img/post/2017/04/phpstorm_formatter_markers.png" alt="phpstorm formatter markers" width="1035" height="734" /></p>
<p>PhpStorm 중 version 14의 경우는 <code>Preferences &gt; Editor &gt; Code Style &gt; Formatter Control</code>에서 설정 가능하다고 한다.</p>
<p>PHP를 기준으로 아래와 같이 사용 할 수 있다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>

<span class="hljs-comment">// @formatter:off</span>
$a = <span class="hljs-number">1</span>;
$b = <span class="hljs-number">2</span>;
<span class="hljs-comment">// @formatter:on</span></pre>
<p>또한, blade 템플릿을 기준으로 아래와 같이 사용 할 수 있다.</p>
<pre class="hljs xml">{{--@formatter:off--}}
@if(!empty($conf['site']['googleAnalytics']))
  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span>.GoogleAnalyticsObject == <span class="hljs-string">'undefined'</span>) {
      (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i,s,o,g,r,a,m</span>)</span>{i[<span class="hljs-string">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{
          (i[r].q=i[r].q||[]).push(<span class="hljs-built_in">arguments</span>)},i[r].l=<span class="hljs-number">1</span>*<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();a=s.createElement(o),
        m=s.getElementsByTagName(o)[<span class="hljs-number">0</span>];a.async=<span class="hljs-number">1</span>;a.src=g;m.parentNode.insertBefore(a,m)
      })(<span class="hljs-built_in">window</span>,<span class="hljs-built_in">document</span>,<span class="hljs-string">'script'</span>,<span class="hljs-string">'https://www.google-analytics.com/analytics.js'</span>,<span class="hljs-string">'ga'</span>);

      ga(<span class="hljs-string">'create'</span>, <span class="hljs-string">'{{$conf['</span>site<span class="hljs-string">']['</span>googleAnalytics<span class="hljs-string">']}}'</span>, <span class="hljs-string">'auto'</span>);
      ga(<span class="hljs-string">'send'</span>, <span class="hljs-string">'pageview'</span>);
    }
  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
@endif
{{--@formatter:on--}}</pre>
<p>위의 예시를 보면 알겠지만 <code>@formatter</code> 문구는 주석으로 처리하면 된다(다른 언어의 경우도 해당 언어에서의 주석으로 처리하면 된다).</p>
<hr />
<p>참고 : <a href="http://stackoverflow.com/a/19492318">How to disable code formatting for some part of the code using comments?</a></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/03/17/laravel-schedule-artisan-commands-in-a-package/</id><title type="html">laravel(또는 lumen) package 에서 schedule 추가</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/03/17/laravel-schedule-artisan-commands-in-a-package/"/><published>2017-03-17T11:25:36+09:00</published><updated>2017-03-17T11:25:36+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="laravel" label="laravel" /><summary><![CDATA[laravel을 사용하는 프로젝트에서 schedule 처리는 Task Scheduling에 안내되어 있는 것처럼 \App\Console\Kernel의 schedule(Schedule $schedule) 메서드 내에서 정의해서 사용한다. laravel 기반 프로젝트에 추가한 package(module)에서 직접 schedule을 추가하고 싶다면 어떻게 해야 할까? 이 부분에 대해서는 메뉴얼 상에 안내된 내용이 없다. 하지만 "How to schedule Artisan commands in a package?" 글을 참고하면 아래와 같이 처리할 수 있다. use Illuminate\Support\ServiceProvider; use Illuminate\Console\Scheduling\Schedule; class ScheduleServiceProvider extends ServiceProvider { public function boot() { $this->app->booted(function () { $schedule = $this->app->make(Schedule::class); $schedule->command('some:command')->everyMinute(); }); } public function register() { } } Application Class의 booted($callback) 함수를 사용해서 schedule을 추가하는 것이다. 그런데 이 booted 함수가 lumen에서는 존재하지 않는다. booted 함수가 없는 것이 문제가 되는 이유는 schedule 개체를 만드는 Kernel Class의 defineConsoleSchedule() 메서드가 아래와 같이 구현되어 있으며 이 메서드는 Provider가 구성된 이후에 실행 되므로 $schedule 개체에 추가적인 schedule을 추가할 수 있는 진입 지점이 없다. protected function defineConsoleSchedule() { $this->app->instance( 'Illuminate\Console\Scheduling\Schedule', $schedule = new Schedule($this->app[Cache::class]) ); $this->schedule($schedule); } 따라서 lumen 프로젝트에서는 package 내부에서 직접적으로 schedule을 추가하는 것은 불가능해 보인다. 굳이 해야 한다면 Kernel 클래스의 defineConsoleSchedule() 메서드를 override 하여 아래와 같이 구현해야 한다. protected function defineConsoleSchedule() { $this->app->instance( 'Illuminate\Console\Scheduling\Schedule', $schedule = ScheduleHelper::get() ); $this->schedule($schedule); } new Schedule($this->app[Cache::class]) 대신에 ScheduleHelper::get()에서 인스턴스를 받아서 사용한다. use Illuminate\Console\Scheduling\Schedule; use Illuminate\Contracts\Cache\Repository as Cache; class ScheduleHelper { /** @var Schedule */ private static $scheduleInstance = null; /** * @return Schedule */ static public function &get() { if (empty(static::$scheduleInstance)) { static::$scheduleInstance = new Schedule(app(Cache::class)); } return static::$scheduleInstance; } } ScheduleHelper에서는 schedule 인스턴스를 싱글톤으로 반환한다. use Illuminate\Support\ServiceProvider; use Illuminate\Console\Scheduling\Schedule; class ScheduleServiceProvider extends ServiceProvider { public function boot() { $schedule = ScheduleHelper::get(); $schedule->command('some:command')->everyMinute(); } public function register() { } } Provider 에서는 ScheduleHelper::get()를 이용해서 schedule 인스턴스를 받아 schedule을 추가 한다. 위 방법은 lumen 프로젝트와 package 간의 종속 관계가 생기므로 권장할만한 방법은 아니다. 다만, 나의 경우는 lumen 프로젝트 개설시 기본적으로 직접 개발한 package를 사용하고 해당 package에서 기본 제어를 하도록 되어 있기 때문에 위 방법이 유용하게 사용될 수 있다(사실 대부분의 개발자들의 의견은 lumen은 간단한 프로젝트에서만 사용하고 다소 복잡해질 수 있는 프로젝트는 그냥 laravel을 쓰라는 것이다).]]></summary><content type="html"><![CDATA[<p><a href="https://laravel.com">laravel</a>을 사용하는 프로젝트에서 schedule 처리는 <a href="https://laravel.com/docs/5.4/scheduling">Task Scheduling</a>에 안내되어 있는 것처럼 <code>\App\Console\Kernel</code>의 <code>schedule(Schedule $schedule)</code> 메서드 내에서 정의해서 사용한다.</p>
<p>laravel 기반 프로젝트에 추가한 package(module)에서 직접 schedule을 추가하고 싶다면 어떻게 해야 할까? 이 부분에 대해서는 메뉴얼 상에 안내된 내용이 없다. 하지만 &quot;<a href="http://stackoverflow.com/a/36630136">How to schedule Artisan commands in a package?</a>&quot; 글을 참고하면 아래와 같이 처리할 수 있다.</p>
<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Scheduling</span>\<span class="hljs-title">Schedule</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduleServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">$this</span>-&gt;app-&gt;booted(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> </span>{
            $schedule = <span class="hljs-keyword">$this</span>-&gt;app-&gt;make(Schedule::class);
            $schedule-&gt;command(<span class="hljs-string">'some:command'</span>)-&gt;everyMinute();
        });
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>
    </span>{
    }
}</pre>
<p>Application Class의 <code>booted($callback)</code> 함수를 사용해서 schedule을 추가하는 것이다.</p>
<hr />
<p>그런데 이 <code>booted</code> 함수가 <a href="https://lumen.laravel.com/">lumen</a>에서는 존재하지 않는다. <code>booted</code> 함수가 없는 것이 문제가 되는 이유는 schedule 개체를 만드는 Kernel Class의 <code>defineConsoleSchedule()</code> 메서드가 아래와 같이 구현되어 있으며 이 메서드는 Provider가 구성된 이후에 실행 되므로 <code>$schedule</code> 개체에 추가적인 schedule을 추가할 수 있는 진입 지점이 없다.</p>
<pre class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineConsoleSchedule</span><span class="hljs-params">()</span>
</span>{
  <span class="hljs-keyword">$this</span>-&gt;app-&gt;instance(
      <span class="hljs-string">'Illuminate\Console\Scheduling\Schedule'</span>, $schedule = <span class="hljs-keyword">new</span> Schedule(<span class="hljs-keyword">$this</span>-&gt;app[Cache::class])
  );

  <span class="hljs-keyword">$this</span>-&gt;schedule($schedule);
}</pre>
<p>따라서 lumen 프로젝트에서는 package 내부에서 직접적으로 schedule을 추가하는 것은 불가능해 보인다. 굳이 해야 한다면 Kernel 클래스의 <code>defineConsoleSchedule()</code> 메서드를 override 하여 아래와 같이 구현해야 한다.</p>
<pre class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineConsoleSchedule</span><span class="hljs-params">()</span>
</span>{
  <span class="hljs-keyword">$this</span>-&gt;app-&gt;instance(
    <span class="hljs-string">'Illuminate\Console\Scheduling\Schedule'</span>, $schedule = ScheduleHelper::get()
  );

  <span class="hljs-keyword">$this</span>-&gt;schedule($schedule);
}</pre>
<p><code>new Schedule($this-&gt;app[Cache::class])</code> 대신에 <code>ScheduleHelper::get()</code>에서 인스턴스를 받아서 사용한다.</p>
<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Scheduling</span>\<span class="hljs-title">Schedule</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Repository</span> <span class="hljs-title">as</span> <span class="hljs-title">Cache</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduleHelper</span>
</span>{
    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Schedule */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> $scheduleInstance = <span class="hljs-keyword">null</span>;

    <span class="hljs-comment">/**
     * <span class="hljs-doctag">@return</span> Schedule
     */</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> &amp;<span class="hljs-title">get</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">static</span>::$scheduleInstance)) {
            <span class="hljs-keyword">static</span>::$scheduleInstance = <span class="hljs-keyword">new</span> Schedule(app(Cache::class));
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">static</span>::$scheduleInstance;
    }
}</pre>
<p><code>ScheduleHelper</code>에서는 schedule 인스턴스를 싱글톤으로 반환한다.</p>
<pre class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Support</span>\<span class="hljs-title">ServiceProvider</span>;
<span class="hljs-keyword">use</span> <span class="hljs-title">Illuminate</span>\<span class="hljs-title">Console</span>\<span class="hljs-title">Scheduling</span>\<span class="hljs-title">Schedule</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScheduleServiceProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ServiceProvider</span>
</span>{
  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">boot</span><span class="hljs-params">()</span>
  </span>{
    $schedule = ScheduleHelper::get();
    $schedule-&gt;command(<span class="hljs-string">'some:command'</span>)-&gt;everyMinute();
  }

  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span><span class="hljs-params">()</span>
  </span>{
  }
}</pre>
<p>Provider 에서는 <code>ScheduleHelper::get()</code>를 이용해서 schedule 인스턴스를 받아 schedule을 추가 한다.</p>
<hr />
<p>위 방법은 lumen 프로젝트와 package 간의 종속 관계가 생기므로 권장할만한 방법은 아니다. 다만, 나의 경우는 lumen 프로젝트 개설시 기본적으로 직접 개발한 package를 사용하고 해당 package에서 기본 제어를 하도록 되어 있기 때문에 위 방법이 유용하게 사용될 수 있다(사실 대부분의 개발자들의 의견은 lumen은 간단한 프로젝트에서만 사용하고 다소 복잡해질 수 있는 프로젝트는 그냥 laravel을 쓰라는 것이다).</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/03/08/laravel-log-files-permisson-change/</id><title type="html">라라벨(laravel) log 파일 권한 변경</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/03/08/laravel-log-files-permisson-change/"/><published>2017-03-08T10:37:02+09:00</published><updated>2017-03-08T10:37:02+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><category term="laravel" label="laravel" /><summary><![CDATA[laravel 에서는 기본적으로 오류 로그를 "storage/logs"에 저장한다. 별다른 설정이 없다면 해당 경로에 실행 프로세스의 권한으로 로그 파일이 저장되는데 이것이 문제가 되는 경우가 있다. 예를들어 web server는 nobody 권한을 사용하고 crontab의 경우 root를 사용한다고 가정하다. crontab에 의해서 실행된 laravel 프로세스에서 오류가 발생하여 로그 파일이 생성 되었다면 이 파일의 권한은 기본적으로 root permission 에 644(-rw-r--r--)로 저장된다(서버 설정에 따라 다소 다를 수 있음). 이 상태에서 web server에서 실행한 프로세스에서 오류가 발생한다면 로그 파일에 접근할 권한이 없어 파일 저장 오류가 발생한다. 이 문제를 권한 변경없이 해결 할 수 있는 방법은 다음과 같다. <?php $app->configureMonologUsing(function(Monolog\Logger $monolog) { $filename = storage_path('/logs/laravel-' . php_sapi_name() . '.log'); $handler = new Monolog\Handler\RotatingFileHandler($filename, 5); $monolog->pushHandler($handler); }); 위 내용을 bootstrap이나 Provider에 추가한다. 이 방법은 php_sapi_name() 함수를 사용해서 인터페이스 형식을 로그 파일명에 추가함으로써 shell과 web의 로그 파일을 분리하는 것이다(권한 문제와는 상관없지만 RotatingFileHandler의 두번째 인자로 5가 추가되어 일단위로 5개의 파일까지 로그를 분할 저장하도록 되어있다). 일반적인 경우라면 이 정도로 문제는 모두 해결된다. 그리고 대부분 권한을 변경하기 보다는 위 방법을 권장한다. 하지만 다음의 경우를 생각해보자. crontab은 root에서 실행되나 작업 또는 테스트 등의 이유로 root가 아닌 사용자 계정의 shell에서 laravel 프로세스를 실행하는 경우 이미 root에 의해 로그 파일이 이미 생성되었다면 위 방법으로는 완전히 해결되지 않는다. 이러한 경우라면 아래와 같이 직접 permisson을 변경하는 방법도 가능하다. <?php $app->configureMonologUsing(function(Monolog\Logger $monolog) { $filename = storage_path('/logs/laravel-' . php_sapi_name() . '.log'); $handler = new Monolog\Handler\RotatingFileHandler($filename, 5, \Monolog\Logger::DEBUG, true, 0666); $monolog->pushHandler($handler); }); RotatingFileHandler에 추가 인자를 넘겨주어 로그 파일의 권한을 666(-rw-rw-rw-)으로 주도록 변경한 것이다. 혹 로그 파일의 수를 줄이고 싶거나 shell과 web의 로그가 분리되는 것이 싫다면 $filename 부분에서 php_sapi_name()를 제거하면 된다.]]></summary><content type="html"><![CDATA[<p><a href="https://laravel.com/">laravel</a> 에서는 기본적으로 오류 로그를 &quot;storage/logs&quot;에 저장한다. 별다른 설정이 없다면 해당 경로에 실행 프로세스의 권한으로 로그 파일이 저장되는데 이것이 문제가 되는 경우가 있다.</p>
<p>예를들어 web server는 nobody 권한을 사용하고 crontab의 경우 root를 사용한다고 가정하다. crontab에 의해서 실행된 laravel 프로세스에서 오류가 발생하여 로그 파일이 생성 되었다면 이 파일의 권한은 기본적으로 root permission 에 <code>644(-rw-r--r--)</code>로 저장된다(서버 설정에 따라 다소 다를 수 있음). 이 상태에서 web server에서 실행한 프로세스에서 오류가 발생한다면 로그 파일에 접근할 권한이 없어 파일 저장 오류가 발생한다.</p>
<p>이 문제를 권한 변경없이 해결 할 수 있는 방법은 다음과 같다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$app-&gt;configureMonologUsing(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(Monolog\Logger $monolog)</span> </span>{
    $filename = storage_path(<span class="hljs-string">'/logs/laravel-'</span> . php_sapi_name() . <span class="hljs-string">'.log'</span>);
    $handler = <span class="hljs-keyword">new</span> Monolog\Handler\RotatingFileHandler($filename, <span class="hljs-number">5</span>);  
    $monolog-&gt;pushHandler($handler);
});</pre>
<p>위 내용을 bootstrap이나 Provider에 추가한다.</p>
<p>이 방법은 <a href="http://php.net/manual/kr/function.php-sapi-name.php">php_sapi_name()</a> 함수를 사용해서 인터페이스 형식을 로그 파일명에 추가함으로써 shell과 web의 로그 파일을 분리하는 것이다(권한 문제와는 상관없지만 RotatingFileHandler의 두번째 인자로 5가 추가되어 일단위로 5개의 파일까지 로그를 분할 저장하도록 되어있다).</p>
<p>일반적인 경우라면 이 정도로 문제는 모두 해결된다. 그리고 대부분 권한을 변경하기 보다는 위 방법을 권장한다. 하지만 다음의 경우를 생각해보자.</p>
<p>crontab은 root에서 실행되나 작업 또는 테스트 등의 이유로 root가 아닌 사용자 계정의 shell에서 laravel 프로세스를 실행하는 경우 이미 root에 의해 로그 파일이 이미 생성되었다면 위 방법으로는 완전히 해결되지 않는다. 이러한 경우라면 아래와 같이 직접 permisson을 변경하는 방법도 가능하다.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$app-&gt;configureMonologUsing(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(Monolog\Logger $monolog)</span> </span>{
    $filename = storage_path(<span class="hljs-string">'/logs/laravel-'</span> . php_sapi_name() . <span class="hljs-string">'.log'</span>);
    $handler = <span class="hljs-keyword">new</span> Monolog\Handler\RotatingFileHandler($filename, <span class="hljs-number">5</span>, \Monolog\Logger::DEBUG, <span class="hljs-keyword">true</span>, <span class="hljs-number">0666</span>);  
    $monolog-&gt;pushHandler($handler);
});</pre>
<p>RotatingFileHandler에 추가 인자를 넘겨주어 로그 파일의 권한을 <code>666(-rw-rw-rw-)</code>으로 주도록 변경한 것이다.</p>
<p>혹 로그 파일의 수를 줄이고 싶거나 shell과 web의 로그가 분리되는 것이 싫다면 <code>$filename</code> 부분에서 <code>php_sapi_name()</code>를 제거하면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2017/02/15/named-backreferences-with-preg-replace/</id><title type="html">preg_replace()의 치환 문자열에서 이름이 지정된 서브 패턴의 역 참조 사용하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/02/15/named-backreferences-with-preg-replace/"/><published>2017-02-15T15:36:32+09:00</published><updated>2017-02-15T15:36:32+09:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="php" label="php" /><summary><![CDATA[preg_replace()는 이름이 지정된 서브 패턴에 대한 역 참조(named backreferences)를 지원하지 않는다. 일단 일반적인 역 참조를 사용하는 방법에 대한 예시를 보자. <?php $string = 'user/foo'; echo preg_replace('/^user\\/(?P<id>[^\\/]+)$/', 'user/profile/\\1', $string); // user/profile/foo 위의 예시에서 치환 문자열의 \\1 대신에 패턴에서 지정된 이름("id")을 사용하고자 한다고 가정하자. <?php $string = 'user/foo'; echo preg_replace('/^user\\/(?P<id>[^\\/]+)$/', 'user/profile/\\id', $string); user/profile/\id 결과에서 보듯이 역 참조는 패턴에서 지정된 이름으로는 사용할 수 없다. 이런 경우라면 아래와 같이 preg_replace_callback()을 사용해야 한다. $string = 'user/foo'; echo preg_replace_callback('/^user\\/(?P<id>[^\\/]+)$/', function ($matches) { return 'user/profile/' . $matches['id']; }, $string) . "\n"; // user/profile/foo 위 예시를 봤을 때는 "굳이 복잡하게 서브 패턴에 이름을 지정해서 사용해야 하는가?" 하는 의문이 들겠지만 정규식이 복잡해 진다면 명시적으로 이름을 붙여서 사용하는 것이 유지 보수와 코드를 읽는데 도움이 된다. 서브 패턴과 역 참조에 대한 자세한 내용은 아래의 글을 참고하자. PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns) PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)]]></summary><content type="html"><![CDATA[<p><a href="http://php.net/manual/kr/function.preg-replace.php">preg_replace()</a>는 이름이 지정된 <a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">서브 패턴</a>에 대한 <a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">역 참조</a>(named backreferences)를 지원하지 않는다.</p>
<p>일단 일반적인 역 참조를 사용하는 방법에 대한 예시를 보자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">'user/foo'</span>;
<span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">'/^user\\/(?P&lt;id&gt;[^\\/]+)$/'</span>, <span class="hljs-string">'user/profile/\\1'</span>, $string);

<span class="hljs-comment">// user/profile/foo</span></pre>
<p>위의 예시에서 치환 문자열의 <code>\\1</code> 대신에 패턴에서 지정된 이름(&quot;id&quot;)을 사용하고자 한다고 가정하자.</p>
<pre class="hljs php"><span class="hljs-meta">&lt;?php</span>
$string = <span class="hljs-string">'user/foo'</span>;
<span class="hljs-keyword">echo</span> preg_replace(<span class="hljs-string">'/^user\\/(?P&lt;id&gt;[^\\/]+)$/'</span>, <span class="hljs-string">'user/profile/\\id'</span>, $string);

user/profile/\id</pre>
<p>결과에서 보듯이 역 참조는 패턴에서 지정된 이름으로는 사용할 수 없다. 이런 경우라면 아래와 같이 <a href="http://php.net/manual/kr/function.preg-replace-callback.php">preg_replace_callback()</a>을 사용해야 한다.</p>
<pre class="hljs php">$string = <span class="hljs-string">'user/foo'</span>;
<span class="hljs-keyword">echo</span> preg_replace_callback(<span class="hljs-string">'/^user\\/(?P&lt;id&gt;[^\\/]+)$/'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">($matches)</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">'user/profile/'</span> . $matches[<span class="hljs-string">'id'</span>];
    }, $string) . <span class="hljs-string">"\n"</span>;

<span class="hljs-comment">// user/profile/foo</span></pre>
<p>위 예시를 봤을 때는 &quot;굳이 복잡하게 서브 패턴에 이름을 지정해서 사용해야 하는가?&quot; 하는 의문이 들겠지만 정규식이 복잡해 진다면 명시적으로 이름을 붙여서 사용하는 것이 유지 보수와 코드를 읽는데 도움이 된다.</p>
<p>서브 패턴과 역 참조에 대한 자세한 내용은 아래의 글을 참고하자.</p>
<ul>
<li><a href="https://blog.asamaru.net/2017/01/17/php-regex-subpatterns/">PHP 정규식(PCRE)의 모든 것 - 서브 패턴(Subpatterns)</a></li>
<li><a href="https://blog.asamaru.net/2017/01/19/php-regex-back-references/">PHP 정규식(PCRE)의 모든 것 - 역 참조(Back references)</a></li>
</ul>]]></content></entry>


</feed>