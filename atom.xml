<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

<title>이 세상에 하나는 남기고 가자</title><id>https://blog.asamaru.net/</id><updated>2017-01-02T13:02:18+00:00</updated><subtitle>세상에 필요한 소스코드 한줄 남기고 가자</subtitle><link href="https://blog.asamaru.net/" rel="alternate" type="text/html" /><link href="https://blog.asamaru.net/atom.xml" rel="self" type="application/atom+xml" /><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author>
<entry><id>https://blog.asamaru.net/2017/01/02/optional-cocoapod-dependencies-using-subspecs/</id><title type="html">CocoaPods Subspecs를 이용한 선택적 의존성 설정</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2017/01/02/optional-cocoapod-dependencies-using-subspecs/"/><published>2017-01-02T20:41:10+00:00</published><updated>2017-01-02T20:41:10+00:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="ios" label="ios" /><summary><![CDATA[Xcode에서 CocoaPods를 이용해 sub module 만들기에서 모듈을 생성하는 것을 간단히 설명한 적이 있다. 모듈을 만들면서 여러 가지 기능을 하나의 모듈에 추가하다 보면 다른 프로젝트에서는 불필요한 코드들이 추가되는 상황이 발생한다. 이런 경우 Subspecs를 활용하면 선택적 의존성을 설정할 수 있다. 우선 Optional CocoaPod dependencies using Subspecs에 소개된 예시를 보자. # Kite-Print-SDK.podspec Pod::Spec.new do |spec| spec.name = 'Kite-Print-SDK' spec.version = '1.0.2' spec.license = 'MIT' spec.homepage = 'https://github.com/OceanLabs/iOS-Print-SDK' spec.authors = {'Deon Botha' => 'deon@oceanlabs.co'} spec.summary = '...' spec.source = { :git => 'https://github.com/OceanLabs/iOS-Print-SDK.git', :tag => '1.0.2'} spec.source_files = ['PSPrintSDK/OL*.{h,m}', 'PSPrintSDK/CardIO*.h'] spec.resources = ['PSPrintSDK/KitePrintSDK.xcassets', '*.lproj'] spec.dependency 'SDWebImage' spec.dependency 'SVProgressHUD' spec.dependency 'AFNetworking', '2.5.0' spec.dependency 'UICKeyChainStore', '~> 1.0.4' spec.requires_arc = true spec.platform = :ios, '7.0' spec.social_media_url = 'https://twitter.com/dbotha' spec.default_subspec = 'Lite' spec.subspec 'Lite' do |lite| # subspec for users who don't want the third party PayPal # & Stripe bloat end spec.subspec 'PayPal' do |paypal| paypal.xcconfig = { 'OTHER_CFLAGS' => '$(inherited) -DKITE_OFFER_PAYPAL' } paypal.dependency 'PayPal-iOS-SDK', '~> 2.4.2' end spec.subspec 'ApplePay' do |apple| apple.xcconfig = { 'OTHER_CFLAGS' => '$(inherited) -DKITE_OFFER_APPLE_PAY' } apple.dependency 'Stripe', '2.2.0' apple.dependency 'Stripe/ApplePay' end end 이 예시에서 자세히 살펴봐야 할 부분은 subspec과 default_subspecs 이다. 이 pod의 의존성을 부모 프로젝트에서 다음과 같이 지정 했다고 가정하자. pod "Kite-Print-SDK", "~> 1.0" 부모 프로젝트에는 'PayPal'과 'ApplePay' 부분을 제외한 의존성이 설정되었다. 단, default_subspecs에 의해 'Lite' 모듈은 포함된다(예시에서는 추가적인 의존성이 없으므로 차이는 없지만). 'PayPal'과 'ApplePay'에 관련된 의존성 추가는 필요에 따라 아래와 같이 지정할 수 있다. pod "Kite-Print-SDK", "~> 1.0" pod "Kite-Print-SDK/PayPal", "~> 1.0" pod "Kite-Print-SDK/ApplePay", "~> 1.0" 위 예시만으로 선택적 의존성을 설정하는 것에 대한 모든 부분을 설명한 것과 마찬가지다. 추가적으로 알아두어야 할 내용을 소개한다. 모든 subspec은 암시적으로 이를 둘러싸는 Root Spec을 상속 한다. default_subspecs는 다음과 같이 여러 개를 동시에 지정할 수 있다. spec.default_subspec = ['Lite', 'PayPal'] default_subspecs를 지정하지 않으면 모든 subspec이 포함된다. 'OTHER_CFLAGS'를 이용해서 소스 레벨에서 의존성 지정 여부를 확인 할 수 있다. #if KITE_OFFER_PAYPAL print("use PayPal") #else print("not use PayPal") #endif 마지막으로 default_subspecs에는 아래와 같이 설명되어 있다. A Pod should make available the full library by default. Users can fine tune their dependencies, and exclude unneeded subspecs, once their requirements are known. Therefore, this attribute is rarely needed. It is intended to be used to select a default if there are ‘sub-specifications’ which provide alternative incompatible implementations, or to exclude modules rarely needed (especially if they trigger dependencies on other libraries). 요약하자면 Pod는 기본적으로 전체 라이브러리를 제공해야 하므로 특별한 경우가 아니라면 사용하지 않는 것이 좋다. 하지만 이 글에서는 소개하고 있는 선택적 의존성을 지정하기 위해서는 사용하는 것이 좋다고 생각한다.]]></summary><content type="html"><![CDATA[<p><img src="/res/img/post/2017/01/CocoaPodsLogo.png" alt="cocoapods" width="402" height="100" /></p>
<p><a href="/2015/10/21/xcode-create-sub-module-using-cocoapods/">Xcode에서 CocoaPods를 이용해 sub module 만들기</a>에서 모듈을 생성하는 것을 간단히 설명한 적이 있다. 모듈을 만들면서 여러 가지 기능을 하나의 모듈에 추가하다 보면 다른 프로젝트에서는 불필요한 코드들이 추가되는 상황이 발생한다. 이런 경우 <a href="https://guides.cocoapods.org/syntax/podspec.html#group_subspecs">Subspecs</a>를 활용하면 선택적 의존성을 설정할 수 있다.</p>
<p>우선 <a href="http://www.dbotha.com/2014/12/04/optional-cocoapod-dependencies/">Optional CocoaPod dependencies using Subspecs</a>에 소개된 예시를 보자.</p>
<pre class="hljs ruby"><span class="hljs-comment"># Kite-Print-SDK.podspec</span>
<span class="hljs-constant">Pod::Spec</span>.new <span class="hljs-keyword">do</span> |spec|
  spec.name     = <span class="hljs-string">'Kite-Print-SDK'</span>
  spec.version  = <span class="hljs-string">'1.0.2'</span>
  spec.license  =  <span class="hljs-string">'MIT'</span>
  spec.homepage = <span class="hljs-string">'https://github.com/OceanLabs/iOS-Print-SDK'</span>
  spec.authors  = {<span class="hljs-string">'Deon Botha'</span> =&gt; <span class="hljs-string">'deon@oceanlabs.co'</span>}
  spec.summary  = <span class="hljs-string">'...'</span>
  spec.source   = {
    <span class="hljs-symbol">:git</span> =&gt; <span class="hljs-string">'https://github.com/OceanLabs/iOS-Print-SDK.git'</span>,
    <span class="hljs-symbol">:tag</span> =&gt; <span class="hljs-string">'1.0.2'</span>}
  spec.source_files =
    [<span class="hljs-string">'PSPrintSDK/OL*.{h,m}'</span>, <span class="hljs-string">'PSPrintSDK/CardIO*.h'</span>]
  spec.resources =
    [<span class="hljs-string">'PSPrintSDK/KitePrintSDK.xcassets'</span>, <span class="hljs-string">'*.lproj'</span>]
  spec.dependency   <span class="hljs-string">'SDWebImage'</span>
  spec.dependency   <span class="hljs-string">'SVProgressHUD'</span>
  spec.dependency   <span class="hljs-string">'AFNetworking'</span>, <span class="hljs-string">'2.5.0'</span>
  spec.dependency   <span class="hljs-string">'UICKeyChainStore'</span>, <span class="hljs-string">'~&gt; 1.0.4'</span>
  spec.requires_arc = <span class="hljs-keyword">true</span>
  spec.platform     = <span class="hljs-symbol">:ios</span>, <span class="hljs-string">'7.0'</span>
  spec.social_media_url = <span class="hljs-string">'https://twitter.com/dbotha'</span>
  spec.default_subspec = <span class="hljs-string">'Lite'</span>

  spec.subspec <span class="hljs-string">'Lite'</span> <span class="hljs-keyword">do</span> |lite|
  <span class="hljs-comment"># subspec for users who don't want the third party PayPal</span>
  <span class="hljs-comment"># &amp; Stripe bloat</span>
  <span class="hljs-keyword">end</span>

  spec.subspec <span class="hljs-string">'PayPal'</span> <span class="hljs-keyword">do</span> |paypal|
    paypal.xcconfig =  
        { <span class="hljs-string">'OTHER_CFLAGS'</span> =&gt; <span class="hljs-string">'$(inherited) -DKITE_OFFER_PAYPAL'</span> }
    paypal.dependency   <span class="hljs-string">'PayPal-iOS-SDK'</span>, <span class="hljs-string">'~&gt; 2.4.2'</span>
  <span class="hljs-keyword">end</span>

  spec.subspec <span class="hljs-string">'ApplePay'</span> <span class="hljs-keyword">do</span> |apple|
    apple.xcconfig =   
        { <span class="hljs-string">'OTHER_CFLAGS'</span> =&gt; <span class="hljs-string">'$(inherited) -DKITE_OFFER_APPLE_PAY'</span> }
    apple.dependency      <span class="hljs-string">'Stripe'</span>, <span class="hljs-string">'2.2.0'</span>
    apple.dependency      <span class="hljs-string">'Stripe/ApplePay'</span>
  <span class="hljs-keyword">end</span>
<span class="hljs-keyword">end</span></pre>
<p>이 예시에서 자세히 살펴봐야 할 부분은 <a href="https://guides.cocoapods.org/syntax/podspec.html#subspec">subspec</a>과 <a href="https://guides.cocoapods.org/syntax/podspec.html#default_subspecs">default_subspecs</a> 이다.</p>
<p>이 pod의 의존성을 부모 프로젝트에서 다음과 같이 지정 했다고 가정하자.</p>
<pre class="hljs ruby">pod <span class="hljs-string">"Kite-Print-SDK"</span>, <span class="hljs-string">"~&gt; 1.0"</span></pre>
<p>부모 프로젝트에는 'PayPal'과 'ApplePay' 부분을 제외한 의존성이 설정되었다. 단, <a href="https://guides.cocoapods.org/syntax/podspec.html#default_subspecs">default_subspecs</a>에 의해 'Lite' 모듈은 포함된다(예시에서는 추가적인 의존성이 없으므로 차이는 없지만).</p>
<p>'PayPal'과 'ApplePay'에 관련된 의존성 추가는 필요에 따라 아래와 같이 지정할 수 있다.</p>
<pre class="hljs ruby">pod <span class="hljs-string">"Kite-Print-SDK"</span>, <span class="hljs-string">"~&gt; 1.0"</span>
pod <span class="hljs-string">"Kite-Print-SDK/PayPal"</span>, <span class="hljs-string">"~&gt; 1.0"</span>
pod <span class="hljs-string">"Kite-Print-SDK/ApplePay"</span>, <span class="hljs-string">"~&gt; 1.0"</span></pre>
<p>위 예시만으로 선택적 의존성을 설정하는 것에 대한 모든 부분을 설명한 것과 마찬가지다.</p>
<hr />
<p>추가적으로 알아두어야 할 내용을 소개한다.</p>
<ul>
<li>모든 <a href="https://guides.cocoapods.org/syntax/podspec.html#subspec">subspec</a>은 암시적으로 이를 둘러싸는 Root Spec을 상속 한다.</li>
<li><a href="https://guides.cocoapods.org/syntax/podspec.html#default_subspecs">default_subspecs</a>는 다음과 같이 여러 개를 동시에 지정할 수 있다.
<ul>
<li>spec.default_subspec = ['Lite', 'PayPal']</li>
</ul></li>
<li><a href="https://guides.cocoapods.org/syntax/podspec.html#default_subspecs">default_subspecs</a>를 지정하지 않으면 모든 <a href="https://guides.cocoapods.org/syntax/podspec.html#subspec">subspec</a>이 포함된다.  </li>
<li>'OTHER_CFLAGS'를 이용해서 소스 레벨에서 의존성 지정 여부를 확인 할 수 있다.</li>
</ul>
<pre class="hljs swift">#<span class="hljs-keyword">if</span> <span class="hljs-type">KITE_OFFER_PAYPAL</span>
  <span class="hljs-built_in">print</span>(<span class="hljs-string">"use PayPal"</span>)
#<span class="hljs-keyword">else</span>
  <span class="hljs-built_in">print</span>(<span class="hljs-string">"not use PayPal"</span>)
#endif</pre>
<p>마지막으로 <a href="https://guides.cocoapods.org/syntax/podspec.html#default_subspecs">default_subspecs</a>에는 아래와 같이 설명되어 있다.</p>
<blockquote>
<p>A Pod should make available the full library by default. Users can fine tune their dependencies, and exclude unneeded subspecs, once their requirements are known. Therefore, this attribute is rarely needed. It is intended to be used to select a default if there are ‘sub-specifications’ which provide alternative incompatible implementations, or to exclude modules rarely needed (especially if they trigger dependencies on other libraries).</p>
<p>요약하자면 Pod는 기본적으로 전체 라이브러리를 제공해야 하므로 특별한 경우가 아니라면 사용하지 않는 것이 좋다.</p>
</blockquote>
<p>하지만 이 글에서는 소개하고 있는 선택적 의존성을 지정하기 위해서는 사용하는 것이 좋다고 생각한다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/29/upgrading-from-mariadb-10-0-to-10-1/</id><title type="html">MariaDB 10.0에서 10.1로 업그레이드(yum)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/29/upgrading-from-mariadb-10-0-to-10-1/"/><published>2016-12-29T09:26:33+00:00</published><updated>2016-12-29T09:26:33+00:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[MariaDB 최신 버전 설치(yum) - CentOS 7 이라는 글에서 MariaDB를 설치하는 방법에 대해 소개 했었다. 그 글에서는 처음부터 10.1을 설치하기를 권장했었는데 회사에서 사용하는 서버 중에 10.0을 사용하는 서버가 있어 이번에 업그레이드했던 내용을 간단히 남긴다. 본론에 들어가기에 앞서 10.1에서의 변경 사항이 궁금하다면 What is MariaDB 10.1?를 참고하자. MariaDB의 메뉴얼에 보면 Upgrading from MariaDB 10.0 to 10.1에서 업그레이드 과정 및 변경 사항을 자세히 설명하고 있다. MariaDB 10.0 종료 데이터 백업 MariaDB 10.0 제거 MariaDB 10.1 설치 mysql_upgrade를 실행 Ubuntu 및 Debian 패키지는 설치시 자동으로 실행(Red Hat, CentOS 및 Fedora 패키지는 자동 실행 안함) mysql_upgrade는 두 가지 작업을 수행한다. 몇몇 새로운 필드로 mysql 데이터베이스의 권한 테이블을 업그레이드 모든 테이블을 매우 빠르게 검사하여 MariaDB 10.1과 호환되는 것으로 표시 대부분의 경우이 이 작업은 빠르게 종료된다(물론 테이블 수에 따라 다름) 기능을 사용하려면 my.cnf에 새 옵션을 추가 my.cnf를 변경하면 mysqld를 재시작 아래는 yum으로 설치된 상황에서의 처리 예시다. MariaDB 레포지토리 설정 파일을 연다. $ vi /etc/yum.repos.d/MariaDB.repo 아마도 아래와 비슷한 내용이 나올 것이다. [mariadb] name = MariaDB baseurl = http://yum.mariadb.org/10.0/centos6-amd64 gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB gpgcheck=1 여기서 10.0 부분을 10.1로 수정하고 저장한다. Downloads Setting up MariaDB Repositories에 가면 더 정확한 레포지토리 주소를 얻을 수 있다. 하지만 이번 경우는 10.1로 고치는 것만으로도 충분하다. MariaDB를 종료한다. $ service mysql stop 데이터를 백업한다. 이 과정은 만일의 사태에 대한 대비를 위한 것이다. 실제로는 업그레이드 후 데이터를 새로 넣어야 하는 과정은 없다. 업그레이드 과정에서 데이터가 손실되는 경우에 복구를 위해 예방 차원이다. # 이 부분은 예시일 뿐이니 자신의 상황에 맞게 백업해야 한다. $ mysqldump -uroot dbname --default-character-set=utf8 --routines > dbname.sql 이제는 MariaDB를 제거한다. 이 과정에서 의존성이 있는 패키지들이 함께 제거될 수 있다(나의 경우 crontab과 postfix가 함께 제거되었다). 따라서 삭제된 패키지를 기록해 두었다가 업그레이드 후 다시 설치해 줘야 한다. 그리고 /etc/my.cnf 파일과 기타 설정 파일(/etc/my.cnf.d/)도 백업해 두길 권장한다. 기본적으로 yum remove 과정에서 /etc/my.cnf.rpmsave 파일로 자동 백업 되긴한데 혹시나 모르니. 그리도 my.cnf의 경로는 상황에 따라 차이가 있을 수 있다. $ rpm -qa | grep -i '^MariaDB' # rpm 명령으로 확인된 MariaDB 관련 패키지를 아래와 같이 나열하여 제거한다. $ yum remove MariaDB-server MariaDB-client MariaDB-compat MariaDB-common MariaDB를 다시 설치한다. $ yum install MariaDB-server MariaDB-client 설정 파일들(/etc/my.cnf, /etc/my.cnf.d/)을 복구한다. 이 과정에서 그냥 파일을 덮어쓰지 말고 기존 설정과 재설치 후 생성된 cnf 파일들을 비교해 보길 권장한다. 새로운 속성이 추가된 것들이 있을 수 있으니 변경점을 확인하기 위해서다(비교해서 추가하지 않아도 기본값으로 모두 동작 할테니 크게 문제 되진 않는다). $ mv /etc/my.cnf.rpmsave /etc/my.cnf # 추가적으로 /etc/my.cnf.d/ 를 백업했던 파일들도 복구한다. MariaDB를 다시 실행해서 정상적으로 데몬이 뜨는지 확인한다. service mysql start DB를 업그레이드 한다. 이 과정에서 주의할 것이 있다. MariaDB Documentation » Storage Engines » Archive에 안내되어 있는데 ARCHIVE Storage Engine은 10.0까지만 기본 설치된다. 따라서 10.1에서는 추가 설정이 필요하다. 따라서 관련 처리를 해주거나 mysql_upgrade 전에 미리 Engine을 변경해야 한다. mysql_upgrade -u root -p 여기까지 문제없이 진행되었다면 업그레이드 과정은 끝났다. 후기 사실 크게 복잡할 것 없는 과정인데 나의 실수로 인해 엄청난 삽질을 했다. 레포지토리 주소를 수정하는 과정에서 그냥 버전만 변경했어야 하는데 조금 더 정확히 하겠다는 생각으로 사이트에 안내된 레포지토리를 복사해서 붙여넣어 사용했다. 여기서 실수해서 centos 7 레포지토리 주소를 넣어버린 것이다. 해당 서버는 centos 6인데... 패키지는 지웠는데 다시 설치하려니 gcc++, gcc의 버전이 맞지 않다고 계속 설치 거부. 그래서 gcc++과 gcc 버전을 직접 재설치 하려는데 여러가지 문제에 부딪혔다. 특히 gcc의 경우는 무작정 버전업을 했다가는 골치 아픈 문제들을 만나게 된다. 워낙에 연결된 곳이 많다보니... 이 과정에서 참고한 사이트들은 아래와 같다. CentOS6의 libstdc++ 업데이트 CentOS6.7에 TensorFlow 설치 How to upgrade glibc from version 2.12 to 2.14 on CentOS? Glibc backward compatibility 참고삼아 위 사이트들을 소개했지만 centos 6에서 gcc를 버전업하는 것은 권장하지 않는다. 이번 작업은 어쨌든 사소한 실수 하나로 간단한 작업이 엄청난 재앙을 일으킨 작업이었다.]]></summary><content type="html"><![CDATA[<p><img src="/res/img/post/2016/12/mariadb-icon.png" alt="MariaDB" width="512" height="512" /></p>
<p><a href="/2015/12/04/installing-mariadb-on-centos-7/">MariaDB 최신 버전 설치(yum) - CentOS 7</a> 이라는 글에서 <a href="https://mariadb.com">MariaDB</a>를 설치하는 방법에 대해 소개 했었다. 그 글에서는 처음부터 10.1을 설치하기를 권장했었는데 회사에서 사용하는 서버 중에 10.0을 사용하는 서버가 있어 이번에 업그레이드했던 내용을 간단히 남긴다.</p>
<p>본론에 들어가기에 앞서 10.1에서의 변경 사항이 궁금하다면 <a href="https://mariadb.com/kb/en/mariadb/what-is-mariadb-101/">What is MariaDB 10.1?</a>를 참고하자.</p>
<hr />
<p><a href="https://mariadb.com">MariaDB</a>의 메뉴얼에 보면 <a href="https://mariadb.com/kb/en/mariadb/upgrading-from-mariadb-100-to-101/">Upgrading from MariaDB 10.0 to 10.1</a>에서 업그레이드 과정 및 변경 사항을 자세히 설명하고 있다.</p>
<ol>
<li><a href="https://mariadb.com">MariaDB</a> 10.0 종료</li>
<li>데이터 백업</li>
<li>MariaDB 10.0 제거</li>
<li>MariaDB 10.1 설치</li>
<li>mysql_upgrade를 실행
<ul>
<li>Ubuntu 및 Debian 패키지는 설치시 자동으로 실행(Red Hat, CentOS 및 Fedora 패키지는 자동 실행 안함)</li>
<li>mysql_upgrade는 두 가지 작업을 수행한다.</li>
<li>몇몇 새로운 필드로 mysql 데이터베이스의 권한 테이블을 업그레이드</li>
<li>모든 테이블을 매우 빠르게 검사하여 MariaDB 10.1과 호환되는 것으로 표시</li>
<li>대부분의 경우이 이 작업은 빠르게 종료된다(물론 테이블 수에 따라 다름)</li>
</ul></li>
<li>기능을 사용하려면 my.cnf에 새 옵션을 추가
<ul>
<li>my.cnf를 변경하면 mysqld를 재시작</li>
</ul></li>
</ol>
<hr />
<p>아래는 yum으로 설치된 상황에서의 처리 예시다.</p>
<p>MariaDB 레포지토리 설정 파일을 연다.</p>
<pre class="hljs bash">$ vi /etc/yum.repos.d/MariaDB.repo</pre>
<p>아마도 아래와 비슷한 내용이 나올 것이다.</p>
<pre><code>[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/10.0/centos6-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1</code></pre>
<p>여기서 10.0 부분을 10.1로 수정하고 저장한다. <a href="https://downloads.mariadb.org/mariadb/repositories/">Downloads Setting up MariaDB Repositories</a>에 가면 더 정확한 레포지토리 주소를 얻을 수 있다. 하지만 이번 경우는 10.1로 고치는 것만으로도 충분하다.</p>
<p>MariaDB를 종료한다.</p>
<pre class="hljs bash">$ service mysql stop</pre>
<p>데이터를 백업한다. 이 과정은 만일의 사태에 대한 대비를 위한 것이다. 실제로는 업그레이드 후 데이터를 새로 넣어야 하는 과정은 없다. 업그레이드 과정에서 데이터가 손실되는 경우에 복구를 위해 예방 차원이다.</p>
<pre class="hljs bash"><span class="hljs-comment"># 이 부분은 예시일 뿐이니 자신의 상황에 맞게 백업해야 한다.</span>
$ mysqldump -uroot dbname --default-character-set=utf8 --routines &gt; dbname.sql</pre>
<p>이제는 MariaDB를 제거한다. 이 과정에서 의존성이 있는 패키지들이 함께 제거될 수 있다(나의 경우 crontab과 postfix가 함께 제거되었다). 따라서 삭제된 패키지를 기록해 두었다가 업그레이드 후 다시 설치해 줘야 한다. 그리고 /etc/my.cnf 파일과 기타 설정 파일(/etc/my.cnf.d/)도 백업해 두길 권장한다. 기본적으로 yum remove 과정에서 /etc/my.cnf.rpmsave 파일로 자동 백업 되긴한데 혹시나 모르니. 그리도 my.cnf의 경로는 상황에 따라 차이가 있을 수 있다.</p>
<pre class="hljs bash">$ rpm -qa | grep -i <span class="hljs-string">'^MariaDB'</span>
<span class="hljs-comment"># rpm 명령으로 확인된 MariaDB 관련 패키지를 아래와 같이 나열하여 제거한다.</span>
$ yum remove MariaDB-server MariaDB-client MariaDB-compat MariaDB-common</pre>
<p>MariaDB를 다시 설치한다.</p>
<pre class="hljs bash">$ yum install MariaDB-server MariaDB-client</pre>
<p>설정 파일들(/etc/my.cnf, /etc/my.cnf.d/)을 복구한다. 이 과정에서 그냥 파일을 덮어쓰지 말고 기존 설정과 재설치 후 생성된 cnf 파일들을 비교해 보길 권장한다. 새로운 속성이 추가된 것들이 있을 수 있으니 변경점을 확인하기 위해서다(비교해서 추가하지 않아도 기본값으로 모두 동작 할테니 크게 문제 되진 않는다).</p>
<pre class="hljs bash">$ mv /etc/my.cnf.rpmsave /etc/my.cnf
<span class="hljs-comment"># 추가적으로 /etc/my.cnf.d/ 를 백업했던 파일들도 복구한다.</span></pre>
<p>MariaDB를 다시 실행해서 정상적으로 데몬이 뜨는지 확인한다.</p>
<pre class="hljs bash">service mysql start</pre>
<p>DB를 업그레이드 한다. 이 과정에서 주의할 것이 있다. <a href="https://mariadb.com/kb/en/mariadb/archive/">MariaDB Documentation » Storage Engines » Archive</a>에 안내되어 있는데 ARCHIVE Storage Engine은 10.0까지만 기본 설치된다. 따라서 10.1에서는 추가 설정이 필요하다. 따라서 관련 처리를 해주거나 mysql_upgrade 전에 미리 Engine을 변경해야 한다.</p>
<pre class="hljs bash">mysql_upgrade -u root -p</pre>
<p>여기까지 문제없이 진행되었다면 업그레이드 과정은 끝났다.</p>
<hr />
<p><strong>후기</strong></p>
<p>사실 크게 복잡할 것 없는 과정인데 나의 실수로 인해 엄청난 삽질을 했다. 레포지토리 주소를 수정하는 과정에서 그냥 버전만 변경했어야 하는데 조금 더 정확히 하겠다는 생각으로 사이트에 안내된 레포지토리를 복사해서 붙여넣어 사용했다. 여기서 실수해서 centos 7 레포지토리 주소를 넣어버린 것이다. 해당 서버는 centos 6인데...
패키지는 지웠는데 다시 설치하려니 gcc++, gcc의 버전이 맞지 않다고 계속 설치 거부. 그래서 gcc++과 gcc 버전을 직접 재설치 하려는데 여러가지 문제에 부딪혔다. 특히 gcc의 경우는 무작정 버전업을 했다가는 골치 아픈 문제들을 만나게 된다. 워낙에 연결된 곳이 많다보니... 이 과정에서 참고한 사이트들은 아래와 같다.</p>
<ul>
<li><a href="https://www.saintsouth.net/blog/update-libstdcpp-on-centos6/">CentOS6의 libstdc++ 업데이트</a></li>
<li><a href="http://qiita.com/Wanwannodao/items/42c93686e49498c43529">CentOS6.7에 TensorFlow 설치</a></li>
<li><a href="http://stackoverflow.com/questions/35616650/how-to-upgrade-glibc-from-version-2-12-to-2-14-on-centos">How to upgrade glibc from version 2.12 to 2.14 on CentOS?</a></li>
<li><a href="http://www.linuxquestions.org/questions/linux-general-1/glibc-backward-compatibility-4175445005/">Glibc backward compatibility</a></li>
</ul>
<p>참고삼아 위 사이트들을 소개했지만 centos 6에서 gcc를 버전업하는 것은 권장하지 않는다.
이번 작업은 어쨌든 사소한 실수 하나로 간단한 작업이 엄청난 재앙을 일으킨 작업이었다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/28/apply-amp/</id><title type="html">블로그에 AMP를 적용하다.</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/28/apply-amp/"/><published>2016-12-28T15:55:06+00:00</published><updated>2016-12-28T15:55:06+00:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="thinking" label="thinking" /><summary><![CDATA[블로그를 리뉴얼 하다.에서 언급했던 AMP(Accelerated Mobile Pages)를 이 블로그에 적용했다. AMP를 적용한 이유는 다분히 SEO를 테스트하기 위함이다. AMP를 적용한다고 구글에서 무조건 상위에 노출시켜주는 것은 아니다. 하지만 빠른 페이지 로딩은 SEO에 도움을 주기 때문에 간접적으로 SEO에 도움이 된다. 실제로 AMP를 적용한 것은 좀 됐는데 구글에서 해당 페이지를 재색인해서 반영되는 시간을 기다리느라고 이제서야 글을 쓴다. 사실 AMP를 적용하는 것은 그리 간단하지는 않았다. AMP의 요구사항을 충족시키는 것을 간단하게 생각했으나 실제로 작업하다보니 여러가지 문제에 부딪혔다. 그중에서 몇가지와 추가적으로 알게된 사항을 나열하자면 아래와 같다. AMP 적용을 고려해서 페이지의 구조 설계해야 한다. 모든 이미지는 사이즈를 알고 있어야 한다. Google AMP Cache는 페이지를 변형한다(일종의 최적화를 하고 상단에 사이트명을 출력하는 Header를 추가한다). 블로그를 리뉴얼 하다. - 원본 블로그를 리뉴얼 하다. - Google AMP Cache에서 보여주는 화면 이로인해 페이지가 의도하지 않은 상황을 만들 수 있다. 이 블로그도 아직 몇가지를 수정해야 한다(모바일에서 우상단에 메뉴 링크가 비정상적으로 동작하는 경우가 있다). 외부 자바스크립트를 사용하지 못하므로 스크립트에 의존하는 페이지를 구성하면 안된다 완전히 불가능한 것은 아니지만 쉽지 않다. Google AMP best way to write JS script tag iframe에서 불려지는 페이지의 도메인은 서비스되는 도메인과 같을 수 없다. 일반적으로는 보안상 동일한 도메인을 요구하지만 여기서는 반대다. 인터넷에서 누군가가 보안상의 이유라고 하는데 정확한 이유는 확인해보지 않았다. 이 사항은 블로그에서 사용하는 Disqus를 AMP 페이지에도 적용하면서 알게 되었다. Disqus in Amp라는 페이지에 잘 설명되어 있는데 Disqus를 출력할 iframe 도메인 문제를 page on an s3 bucket로 해결한다. AMP Components 들의 동작이 다소 불안하다(반응형 레이아웃을 사용할 경우 : 반응형 이미지, 반응형 iframe 등). AMP Components 들은 AMP 페이지가 아니더라도 사용할 수 있다(실제로 글 하단의 SNS 공유 기능이 AMP Components에서 제공하는 기능이다). 그 외에도 Schema.org의 적용이 필요한데 여기서도 약간의 어려움이 있다(이미지와 로고가 포함되어야 하고 사이즈도 정해준 기준에 맞춰야 하는 등). 주저리주저리 여러가지 이야기를 했지만 결론은 하나다. AMP를 직접 적용해보는 것이 가장 빨리 이해할 수 있는 방법이다. 사실 누군가는 "굳이 AMP 적용을 할 필요가 있는가?"라고 이야기 한다. 나의 생각도 크게 다르지 않다. 하지만 AMP의 가이드를 따라 페이지를 제작하다보면 보다 빠른 웹페이지를 설계하고 구축할 수 있는 아이디어를 얻을 수 있을 것이다. 나 또한 앞서 이야기 한 것과 같이 다분히 실험적인 이유로 AMP를 적용해 봤다. 참고로 이 블로그는 지난 글에서 이야기한 것과 같이 PHP로 직접 만든 정적 페이지 생성기에 의해 제작된다. 그래서 markdown이 파싱된 결과를 AMP에 호환되도록 변형하는데 lullabot/amp를 사용했다. 블로그다 보니 특별히 복잡한 구조가 없어서 그런지 현재까지 큰 문제없이 사용중이다.]]></summary><content type="html"><![CDATA[<p><a href="/2016/12/14/renewal-blog/">블로그를 리뉴얼 하다.</a>에서 언급했던 <a href="https://www.ampproject.org/">AMP</a>(Accelerated Mobile Pages)를 이 블로그에 적용했다.</p>
<p><img src="/res/img/post/2016/12/apply-amp-blog.png" alt="google search result" width="355" height="413" /></p>
<p>AMP를 적용한 이유는 다분히 SEO를 테스트하기 위함이다. AMP를 적용한다고 구글에서 무조건 상위에 노출시켜주는 것은 아니다. 하지만 빠른 페이지 로딩은 SEO에 도움을 주기 때문에 간접적으로 SEO에 도움이 된다.</p>
<p>실제로 AMP를 적용한 것은 좀 됐는데 구글에서 해당 페이지를 재색인해서 반영되는 시간을 기다리느라고 이제서야 글을 쓴다.</p>
<p>사실 AMP를 적용하는 것은 그리 간단하지는 않았다. AMP의 요구사항을 충족시키는 것을 간단하게 생각했으나 실제로 작업하다보니 여러가지 문제에 부딪혔다. 그중에서 몇가지와 추가적으로 알게된 사항을 나열하자면 아래와 같다.</p>
<ul>
<li>AMP 적용을 고려해서 페이지의 구조 설계해야 한다.</li>
<li>모든 이미지는 사이즈를 알고 있어야 한다.</li>
<li><a href="https://developers.google.com/amp/cache/">Google AMP Cache</a>는 페이지를 변형한다(일종의 최적화를 하고 상단에 사이트명을 출력하는 Header를 추가한다).
<ul>
<li><a href="/amp/2016/12/14/renewal-blog/">블로그를 리뉴얼 하다. - 원본</a></li>
<li><a href="https://www.google.co.kr/amp/s/blog.asamaru.net/amp/2016/12/14/renewal-blog/">블로그를 리뉴얼 하다. - Google AMP Cache에서 보여주는 화면</a></li>
<li>이로인해 페이지가 의도하지 않은 상황을 만들 수 있다. 이 블로그도 아직 몇가지를 수정해야 한다(모바일에서 우상단에 메뉴 링크가 비정상적으로 동작하는 경우가 있다).</li>
</ul></li>
<li>외부 자바스크립트를 사용하지 못하므로 스크립트에 의존하는 페이지를 구성하면 안된다
<ul>
<li>완전히 불가능한 것은 아니지만 쉽지 않다. <a href="http://stackoverflow.com/a/39363087/6736772">Google AMP best way to write JS script tag</a></li>
</ul></li>
<li>iframe에서 불려지는 페이지의 도메인은 서비스되는 도메인과 같을 수 없다.
<ul>
<li>일반적으로는 보안상 동일한 도메인을 요구하지만 여기서는 반대다. 인터넷에서 누군가가 보안상의 이유라고 하는데 정확한 이유는 확인해보지 않았다.</li>
<li>이 사항은 블로그에서 사용하는 Disqus를 AMP 페이지에도 적용하면서 알게 되었다. <a href="https://labs.tomasino.org/disqus-in-amp/">Disqus in Amp</a>라는 페이지에 잘 설명되어 있는데 Disqus를 출력할 iframe 도메인 문제를 <a href="https://s3.amazonaws.com/dangoldin.com/amp-disqus.html">page on an s3 bucket</a>로 해결한다.</li>
</ul></li>
<li>AMP Components 들의 동작이 다소 불안하다(반응형 레이아웃을 사용할 경우 : 반응형 이미지, 반응형 iframe 등).</li>
<li>AMP Components 들은 AMP 페이지가 아니더라도 사용할 수 있다(실제로 글 하단의 SNS 공유 기능이 AMP Components에서 제공하는 기능이다).</li>
</ul>
<p>그 외에도 <a href="http://schema.org/">Schema.org</a>의 적용이 필요한데 여기서도 약간의 어려움이 있다(이미지와 로고가 포함되어야 하고 사이즈도 정해준 기준에 맞춰야 하는 등).</p>
<p>주저리주저리 여러가지 이야기를 했지만 결론은 하나다.</p>
<p><strong>AMP를 직접 적용해보는 것이 가장 빨리 이해할 수 있는 방법이다.</strong></p>
<p>사실 누군가는 &quot;굳이 AMP 적용을 할 필요가 있는가?&quot;라고 이야기 한다. 나의 생각도 크게 다르지 않다. 하지만 AMP의 가이드를 따라 페이지를 제작하다보면 보다 빠른 웹페이지를 설계하고 구축할 수 있는 아이디어를 얻을 수 있을 것이다. 나 또한 앞서 이야기 한 것과 같이 다분히 실험적인 이유로 AMP를 적용해 봤다.</p>
<hr />
<p>참고로 이 블로그는 지난 글에서 이야기한 것과 같이 PHP로 직접 만든 정적 페이지 생성기에 의해 제작된다.
그래서 markdown이 파싱된 결과를 AMP에 호환되도록 변형하는데 <a href="https://github.com/Lullabot/amp-library">lullabot/amp</a>를 사용했다. 블로그다 보니 특별히 복잡한 구조가 없어서 그런지 현재까지 큰 문제없이 사용중이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/20/macos-sierra-10-12-2-xcode-8-2-cocoapods-install/</id><title type="html">macOS Sierra 10.12.2 (Xcode8.2) CocoaPods 설치</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/20/macos-sierra-10-12-2-xcode-8-2-cocoapods-install/"/><published>2016-12-20T11:10:06+00:00</published><updated>2016-12-20T11:10:06+00:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="osx" label="osx" /><category term="ios" label="ios" /><summary><![CDATA[예전에 CocoaPods 사용법이라는 글에서 CocoaPods을 설치하는 방법을 간단히 소개 했었다. 그런데 macOS가 버전업 되면서 이 방법으로는 설치가 되지 않는다 macOS Sierra에 CocoaPods을 설치하려는 경우 기본적으로 CocoaPods - Getting Started에 안내되어 있는 설치 방법으로는 다음과 같은 오류가 난다. $ sudo gem install cocoapods ERROR: While executing gem ... (Errno::EPERM) Operation not permitted - /usr/bin/fuzzy_match 이 문제는 사용자가 "/usr/bin/"에 프로그램을 설치하는 것을 macOS에서 막기 때문이다. 다른 방법으로는 "Sudo-less installation"에 안내되어 있는 방법으로 설치하는 방법이 있다. 아래의 내용을 ".profile" 파일에 추가한다. export GEM_HOME=$HOME/.gem export PATH=$GEM_HOME/bin:$PATH 아래와 같이 설치한다. $ gem install cocoapods --user-install $ gem which cocoapods /Users/eloy/.gem/ruby/2.0.0/gems/cocoapods-0.29.0/lib/cocoapods.rb $ /Users/eloy/.gem/ruby/2.0.0/bin/pod install 아래와 같이 rootless 속성을 변경해서 설치하는 방법도 있다. $ sudo nvram boot-args="rootless=0" $ sudo reboot $ sudo gem install cocoapods -V rootless 속성을 변경하면 다른 프로그램 설치시 유사하게 권한 문제가 발생하는 경우도 대부분 해결될 수 있지만 rootless 속성을 변경하는 것이 꺼려진다면 다음 설치 방법을 이용할 수 있다. 이 방법이 가장 간단하게 CocoaPods을 설치할 수 있는 방법이다. $ sudo gem install -n /usr/local/bin cocoapods $ pod setup --verbose pod setup 실행시 시간이 오래 걸릴 수 있으니 그냥 기다리면 된다.]]></summary><content type="html"><![CDATA[<p>예전에 <a href="/2015/08/28/cocoapods-usage/">CocoaPods 사용법</a>이라는 글에서 <a href="https://cocoapods.org/">CocoaPods</a>을 설치하는 방법을 간단히 소개 했었다. 그런데 macOS가 버전업 되면서 이 방법으로는 설치가 되지 않는다</p>
<p>macOS Sierra에 <a href="https://cocoapods.org/">CocoaPods</a>을 설치하려는 경우 기본적으로 <a href="https://guides.cocoapods.org/using/getting-started.html">CocoaPods - Getting Started</a>에 안내되어 있는 설치 방법으로는 다음과 같은 오류가 난다.</p>
<pre class="hljs bash">$ sudo gem install cocoapods
ERROR:  While executing gem ... (Errno::EPERM)
    Operation not permitted - /usr/bin/fuzzy_match</pre>
<p>이 문제는 사용자가 &quot;/usr/bin/&quot;에 프로그램을 설치하는 것을 macOS에서 막기 때문이다.
다른 방법으로는 &quot;Sudo-less installation&quot;에 안내되어 있는 방법으로 설치하는 방법이 있다.</p>
<p>아래의 내용을 &quot;.profile&quot; 파일에 추가한다.</p>
<pre class="hljs bash"><span class="hljs-built_in">export</span> GEM_HOME=<span class="hljs-variable">$HOME</span>/.gem
<span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$GEM_HOME</span>/bin:<span class="hljs-variable">$PATH</span></pre>
<p>아래와 같이 설치한다.</p>
<pre class="hljs bash">$ gem install cocoapods --user-install
$ gem <span class="hljs-built_in">which</span> cocoapods
/Users/eloy/.gem/ruby/<span class="hljs-number">2.0</span>.<span class="hljs-number">0</span>/gems/cocoapods-<span class="hljs-number">0.29</span>.<span class="hljs-number">0</span>/lib/cocoapods.rb
$ /Users/eloy/.gem/ruby/<span class="hljs-number">2.0</span>.<span class="hljs-number">0</span>/bin/pod install</pre>
<hr />
<p>아래와 같이 rootless 속성을 변경해서 설치하는 방법도 있다.</p>
<pre class="hljs bash">$ sudo nvram boot-args=<span class="hljs-string">"rootless=0"</span>
$ sudo reboot
$ sudo gem install cocoapods -V</pre>
<p>rootless 속성을 변경하면 다른 프로그램 설치시 유사하게 권한 문제가 발생하는 경우도 대부분 해결될 수 있지만 rootless 속성을 변경하는 것이 꺼려진다면 다음 설치 방법을 이용할 수 있다.
이 방법이 가장 간단하게 <a href="https://cocoapods.org/">CocoaPods</a>을 설치할 수 있는 방법이다.</p>
<pre class="hljs bash">$ sudo gem install -n /usr/<span class="hljs-built_in">local</span>/bin cocoapods
$ pod setup --verbose</pre>
<p><code>pod setup</code> 실행시 시간이 오래 걸릴 수 있으니 그냥 기다리면 된다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/14/renewal-blog/</id><title type="html">블로그를 리뉴얼 하다.</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/14/renewal-blog/"/><published>2016-12-14T21:41:06+00:00</published><updated>2016-12-14T21:41:06+00:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="thinking" label="thinking" /><summary><![CDATA[블로그를 시작한 것은 2012년 이었지만 제대로 관리를 시작한 것은 작년 8월 경이다. 1년 반 가량의 시간 동안 이 블로그는 Octopress에서 Jekyll로 전환 해 가면서 줄 곧 Jekyll 기반으로 운용해 왔다. Jekyll 자체는 훌륭한 편이지만 몇가지 부분에서 불편함이 있었고 디자인이 맘에 들지 않아 계속 고민을 해오던 중 이번에 회사에서 필요한 기능을 제작하면서 이 블로그를 실험 삼아 변경하는 작업을 병행했다. 드디어 오늘부로 Jekyll에서 벗어났다. 이번 작업으로 php의 lumen 기반으로 정적 페이지 생성기를 직접 만들었다. 사실 tightenco/jigsaw 기반으로 필요한 부분을 수정하려고 작업을 시작했다. 그런데 작업을 하다보니 여기저기 맘에 안드는 부분이 많아서 결국은 90% 이상 새로 만들었다. 현재 작업 상황으로는 정적 페이지를 생성하는 단계까지만 완료되었지만 이후 프로젝트의 중요 포인트 중 하나인 AMP를 적용할 예정이다. 그 외에도 몇가지 완료되지 못한 사항들이 있지만 블로그에 적용하기에는 충분한 단계가 되었다고 판단하고 변경한 것이다. 사실 오늘 오후에 적용하는 과정에 놓친 부분이 몇가지 있어서 그 시점에 블로그가 조금 불안정 하긴 했다. 어쨌든 현재 시점엔 내 눈엔 정상이니 다행이다. 이 블로그의 디자인도 내가 직접하긴 했는데... 디자인 감각이 별로라서 아주 만족스럽지는 않지만 이 정도면 봐줄만은 하다고 스스로를 위안 중이다. 어쨌든 얼른 남은 AMP와 SEO 작업 등을 마저 마무리해서 블로그를 안정시켜야겠다.]]></summary><content type="html"><![CDATA[<p>블로그를 시작한 것은 2012년 이었지만 제대로 관리를 시작한 것은 작년 8월 경이다. 1년 반 가량의 시간 동안 이 블로그는 <a href="/2015/12/23/moving-from-octopress-to-jekyll/">Octopress에서 Jekyll로 전환</a> 해 가면서 줄 곧 <a href="https://jekyllrb.com/">Jekyll</a> 기반으로 운용해 왔다. <a href="https://jekyllrb.com/">Jekyll</a> 자체는 훌륭한 편이지만 몇가지 부분에서 불편함이 있었고 디자인이 맘에 들지 않아 계속 고민을 해오던 중 이번에 회사에서 필요한 기능을 제작하면서 이 블로그를 실험 삼아 변경하는 작업을 병행했다.</p>
<p>드디어 오늘부로 <a href="https://jekyllrb.com/">Jekyll</a>에서 벗어났다.</p>
<p>이번 작업으로 php의 <a href="https://lumen.laravel.com/">lumen</a> 기반으로 정적 페이지 생성기를 직접 만들었다. 사실 <a href="https://github.com/tightenco/jigsaw">tightenco/jigsaw</a> 기반으로 필요한 부분을 수정하려고 작업을 시작했다. 그런데 작업을 하다보니 여기저기 맘에 안드는 부분이 많아서 결국은 90% 이상 새로 만들었다.</p>
<p>현재 작업 상황으로는 정적 페이지를 생성하는 단계까지만 완료되었지만 이후 프로젝트의 중요 포인트 중 하나인 <a href="https://www.ampproject.org/">AMP</a>를 적용할 예정이다. 그 외에도 몇가지 완료되지 못한 사항들이 있지만 블로그에 적용하기에는 충분한 단계가 되었다고 판단하고 변경한 것이다. 사실 오늘 오후에 적용하는 과정에 놓친 부분이 몇가지 있어서 그 시점에 블로그가 조금 불안정 하긴 했다. 어쨌든 현재 시점엔 내 눈엔 정상이니 다행이다.</p>
<p>이 블로그의 디자인도 내가 직접하긴 했는데... 디자인 감각이 별로라서 아주 만족스럽지는 않지만 이 정도면 봐줄만은 하다고 스스로를 위안 중이다.</p>
<p>어쨌든 얼른 남은 <a href="https://www.ampproject.org/">AMP</a>와 SEO 작업 등을 마저 마무리해서 블로그를 안정시켜야겠다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/07/android-theme-nodisplay-did-not-call-finish-prior-to-onresume-completing/</id><title type="html">Theme.NoDisplay 테마 사용시 안드로이드 API 23에서 did not call finish() prior to onResume() completing 오류 발생</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/07/android-theme-nodisplay-did-not-call-finish-prior-to-onresume-completing/"/><published>2016-12-07T20:40:04+00:00</published><updated>2016-12-07T20:40:04+00:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[눈에 보이지 않는 Activity를 생성하기 위해 "Theme.NoDisplay" 테마를 사용한 앱에서 오류가 발생했다. 오류 내용을 보면 onResume()이 호출되기 전에 finish()가 호출되지 않았다는 것이다. 확인해보니 "Theme.NoDisplay" 테마가 사용된 Activity는 윈도우 자체가 생성되지 않기 때문에 onResume()이 호출되기 전에 finish()가 호출되어야 하는 조건이 있다. 예를들면 아래와 같다. public class NoDisplayActivity extends Activity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); finish(); } } 이와 관련된 내용은 PSA: Android 6.0 Theme.NoDisplay Regression에서 자세히 설명하고 있다. 이 글에 따르면 Android 6.0의 문서화되지 않은 변경으로 인해 targetSdkVersion이 23 이상에서 실행시 오류가 발생할 수 있다고 경고하고 있다. 이 문제는 "Android M developer preview의 버그다(Issue 2353: Activity crash with @android:style/Theme.NoDisplay)"라는 이야기도 있으나 실제 Android 6에서 오류가 발생하고 있으므로 버그라 하더라도 무시할 수 없다. 나도 이번 작업에서 이 문제를 겪게 되었다. 나의 경우 targetSdkVersion이 24 였으며 오류가 보고된 기기는 모두 API 23(Android 6.0) 버전이었다. 이 문제에 대한 근본적인 문제 해결 방법은 onCreate() 또는 onStart() 단계에서 finish()를 호출하는 것이다. 비동기 처리 등의 상황으로 인해 이렇게 할 수 없는 상황이라면 Theme.NoDisplay 테마를 사용하지 말고 Android 투명 / 보이지 않는 Activity 만들기(Theme.Translucent / Theme.NoDisplay)에서 안내한 것과 같이 투명한 Activity를 만들어서 적용하는 방법 을 써야 한다. 위에서 언급한 비동기 처리 외에도 requestPermissions()을 사용하는 것과 같이 startActivityForResult()를 사용하게 되는 상황 등에서도 동일한 문제가 발생할 수 있다. 다른 해결 방법으로 아래와 같이 onStart() 함수에서 setVisible(true);를 호출해서 해결했다는 이야기도 있으나 해결되지 않는다는 이야기들이 있어 안전한 방법이라고 할 수 없다. @Override protected void onStart() { super.onStart(); setVisible(true); } 결론적으로 내가 생각하는 가장 쉽고 안전한 방법은 투명한 Activity를 이용해서 NoDisplay를 대체 구현하는 것이다. <style name="NoDisplay" parent="android:Theme"> <item name="android:windowIsTranslucent">true</item> <item name="android:windowBackground">@android:color/transparent</item> <item name="android:windowContentOverlay">@null</item> <item name="android:windowNoTitle">true</item> <item name="android:windowIsFloating">true</item> <item name="android:backgroundDimEnabled">false</item> <item name="android:colorBackgroundCacheHint">@null</item> <item name="android:windowAnimationStyle">@android:style/Animation</item> <item name="android:windowFullscreen">true</item> </style>]]></summary><content type="html"><![CDATA[<p>눈에 보이지 않는 Activity를 생성하기 위해 &quot;Theme.NoDisplay&quot; 테마를 사용한 앱에서 오류가 발생했다. 오류 내용을 보면 onResume()이 호출되기 전에 finish()가 호출되지 않았다는 것이다.
확인해보니 &quot;Theme.NoDisplay&quot; 테마가 사용된 Activity는 윈도우 자체가 생성되지 않기 때문에 onResume()이 호출되기 전에 finish()가 호출되어야 하는 조건이 있다. 예를들면 아래와 같다.</p>
<pre class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoDisplayActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Activity</span> </span>{  
    <span class="hljs-annotation">@Override</span>  
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>{  
        <span class="hljs-keyword">super</span>.onCreate(savedInstanceState);  
        finish();  
    }  
}  </pre>
<p>이와 관련된 내용은 <a href="https://commonsware.com/blog/2015/11/02/psa-android-6p0-theme.nodisplay-regression.html">PSA: Android 6.0 Theme.NoDisplay Regression</a>에서 자세히 설명하고 있다. 이 글에 따르면 Android 6.0의 문서화되지 않은 변경으로 인해 targetSdkVersion이 23 이상에서 실행시 오류가 발생할 수 있다고 경고하고 있다.</p>
<p>이 문제는 &quot;Android M developer preview의 버그다(<a href="https://web.archive.org/web/20151116170752/https://code.google.com/p/android-developer-preview/issues/detail?id=2353">Issue 2353:    Activity crash with @android:style/Theme.NoDisplay</a>)&quot;라는 이야기도 있으나 실제 Android 6에서 오류가 발생하고 있으므로 버그라 하더라도 무시할 수 없다.</p>
<hr />
<p>나도 이번 작업에서 이 문제를 겪게 되었다. 나의 경우 targetSdkVersion이 24 였으며 오류가 보고된 기기는 모두 API 23(Android 6.0) 버전이었다.</p>
<p>이 문제에 대한 근본적인 문제 해결 방법은 onCreate() 또는 onStart() 단계에서 finish()를 호출하는 것이다. 비동기 처리 등의 상황으로 인해 이렇게 할 수 없는 상황이라면 <strong>Theme.NoDisplay 테마를 사용하지 말고 <a href="/2016/12/07/android-transparent-no-display-activity/">Android 투명 / 보이지 않는 Activity 만들기(Theme.Translucent / Theme.NoDisplay)</a>에서 안내한 것과 같이 투명한 Activity를 만들어서 적용하는 방법</strong> 을 써야 한다.</p>
<p>위에서 언급한 비동기 처리 외에도 requestPermissions()을 사용하는 것과 같이 startActivityForResult()를 사용하게 되는 상황 등에서도 동일한 문제가 발생할 수 있다.</p>
<p>다른 해결 방법으로 아래와 같이 onStart() 함수에서 <code>setVisible(true);</code>를 호출해서 해결했다는 이야기도 있으나 해결되지 않는다는 이야기들이 있어 안전한 방법이라고 할 수 없다.</p>
<pre class="hljs java"><span class="hljs-annotation">@Override</span>
<span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStart</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">super</span>.onStart();
    setVisible(<span class="hljs-keyword">true</span>);
}</pre>
<hr />
<p>결론적으로 내가 생각하는 가장 쉽고 안전한 방법은 투명한 Activity를 이용해서 NoDisplay를 대체 구현하는 것이다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"NoDisplay"</span> <span class="hljs-attribute">parent</span>=<span class="hljs-value">"android:Theme"</span>&gt;</span><span class="css">
  &lt;<span class="hljs-tag">item</span> <span class="hljs-tag">name</span>="<span class="hljs-tag">android</span><span class="hljs-pseudo">:windowIsTranslucent"</span>&gt;<span class="hljs-tag">true</span>&lt;/<span class="hljs-tag">item</span>&gt;
  &lt;<span class="hljs-tag">item</span> <span class="hljs-tag">name</span>="<span class="hljs-tag">android</span><span class="hljs-pseudo">:windowBackground"</span>&gt;<span class="hljs-at_rule">@<span class="hljs-keyword">android:color/transparent&lt;/item&gt;</span>
  &lt;item name=<span class="hljs-string">"android:windowContentOverlay"</span>&gt;@null&lt;/item&gt;
  &lt;item name=<span class="hljs-string">"android:windowNoTitle"</span>&gt;true&lt;/item&gt;

  &lt;item name=<span class="hljs-string">"android:windowIsFloating"</span>&gt;true&lt;/item&gt;
  &lt;item name=<span class="hljs-string">"android:backgroundDimEnabled"</span>&gt;false&lt;/item&gt;

  &lt;item name=<span class="hljs-string">"android:colorBackgroundCacheHint"</span>&gt;@null&lt;/item&gt;
  &lt;item name=<span class="hljs-string">"android:windowAnimationStyle"</span>&gt;@android:style/Animation&lt;/item&gt;
  &lt;item name=<span class="hljs-string">"android:windowFullscreen"</span>&gt;true&lt;/item&gt;
</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span></pre>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/07/android-transparent-no-display-activity/</id><title type="html">Android 투명 / 보이지 않는 Activity 만들기(Theme.Translucent / Theme.NoDisplay)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/07/android-transparent-no-display-activity/"/><published>2016-12-07T20:09:06+00:00</published><updated>2016-12-07T20:09:06+00:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="android" label="android" /><summary><![CDATA[안드로이드에서 투명한 배경을 가진 Activity나 눈에 보이지 않는 Activity를 만드는 방법 중 가장 쉬운 방법은 Activity의 Theme를 사용하는 것이다. 이러한 Activity를 구성하기 위해 안드로이드에서 제공되는 테마 몇가지를 알아보자. 아래에 나오는 각 테마의 설정 내용은 Android SDK 24 기준임을 참고하기 바란다. Theme.Translucent Theme.Translucent 테마는 안드로이드 3.0 이전부터 존재한 테마로 투명한 배경을 가진 Activity를 만들때 사용할 수 있는 테마다. 일반적으로 구버전의 안드로이드까지 정확히 지원하려면 Theme.Translucent.NoTitleBar를 사용해서 투명한 배경을 가진 Activity를 만들어야 한다. 이 테마는 아래의 3가지 형태로 나뉜다. 각각의 특성은 이름과 설정 내용을 보면 바로 알 수 있다. Theme.Translucent <style name="Theme.Translucent"> <item name="windowBackground">@color/transparent</item> <item name="colorBackgroundCacheHint">@null</item> <item name="windowIsTranslucent">true</item> <!-- Note that we use the base animation style here (that is no animations) because we really have no idea how this kind of activity will be used. --> <item name="windowAnimationStyle">@style/Animation</item> </style> Theme.Translucent.NoTitleBar <style name="Theme.Translucent.NoTitleBar"> <item name="windowNoTitle">true</item> <item name="windowContentOverlay">@null</item> </style> Theme.Translucent.NoTitleBar_Fullscreen <style name="Theme.Translucent.NoTitleBar.Fullscreen"> <item name="windowFullscreen">true</item> </style> 기본적으로 제공되는 위 테마를 사용하는 것도 괜찮으나 필요하다면 아래와 같이 필요한 설정을 추가해서 재정의한 테마를 사용할 수 있다. <style name="NoDisplay" parent="android:Theme"> <item name="android:windowIsTranslucent">true</item> <item name="android:windowBackground">@android:color/transparent</item> <item name="android:windowContentOverlay">@null</item> <item name="android:windowNoTitle">true</item> <item name="android:windowIsFloating">true</item> <item name="android:backgroundDimEnabled">false</item> <item name="android:colorBackgroundCacheHint">@null</item> <item name="android:windowAnimationStyle">@android:style/Animation</item> <item name="android:windowFullscreen">true</item> </style> Theme.NoDisplay Theme.NoDisplay 테마는 Activity를 투명하게 만드는 것이 아니라 아예 보이지 않는 Activity를 만들어 준다. <style name="Theme.NoDisplay"> <item name="windowBackground">@null</item> <item name="windowContentOverlay">@null</item> <item name="windowIsTranslucent">true</item> <item name="windowAnimationStyle">@null</item> <item name="windowDisablePreview">true</item> <item name="windowNoDisplay">true</item> </style> 이 테마를 사용할 때는 유의할 점이 있다. did not call finish() prior to onResume() completing 오류가 발생할 수 있기 때문이다. Theme.NoDisplay 테마를 사용하는 경우에는 onResume 함수가 호출되기 전에 finish()가 호출되어야 하는데 이를 어길 경우 앱에서 오류가 발생한다. 이와 관련해서는 Theme.NoDisplay 테마 사용시 안드로이드 API 23에서 did not call finish() prior to onResume() completing 오류 발생에서 조금 더 자세히 다룬다. 마지막으로 Android cheats and tips: Invisible activity라는 글도 참고하면 좋을 듯하다. 필요에 따라 android:noHistory와 android:excludeFromRecents="true"를 함께 사용함으로써 history와 최근 사용 항목에 남지 않는 Activity를 생성하는 부분을 안내하고 있다.]]></summary><content type="html"><![CDATA[<p>안드로이드에서 투명한 배경을 가진 Activity나 눈에 보이지 않는 Activity를 만드는 방법 중 가장 쉬운 방법은 Activity의 Theme를 사용하는 것이다. 이러한 Activity를 구성하기 위해 안드로이드에서 제공되는 테마 몇가지를 알아보자.</p>
<blockquote>
<p>아래에 나오는 각 테마의 설정 내용은 Android SDK 24 기준임을 참고하기 바란다.</p>
</blockquote>
<hr />
<h3>Theme.Translucent</h3>
<p><a href="https://kairo96.gitbooks.io/android/content/ch4.11.html"></a>
Theme.Translucent 테마는 안드로이드 3.0 이전부터 존재한 테마로 투명한 배경을 가진 Activity를 만들때 사용할 수 있는 테마다. 일반적으로 구버전의 안드로이드까지 정확히 지원하려면 Theme.Translucent.NoTitleBar를 사용해서 투명한 배경을 가진 Activity를 만들어야 한다.</p>
<p>이 테마는 아래의 3가지 형태로 나뉜다. 각각의 특성은 이름과 설정 내용을 보면 바로 알 수 있다.</p>
<ul>
<li>Theme.Translucent</li>
</ul>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Theme.Translucent"</span>&gt;</span><span class="css">
    &lt;<span class="hljs-tag">item</span> <span class="hljs-tag">name</span>="<span class="hljs-tag">windowBackground</span>"&gt;<span class="hljs-at_rule">@<span class="hljs-keyword">color/transparent&lt;/item&gt;</span>
    &lt;item name=<span class="hljs-string">"colorBackgroundCacheHint"</span>&gt;@null&lt;/item&gt;
    &lt;item name=<span class="hljs-string">"windowIsTranslucent"</span>&gt;true&lt;/item&gt;
    &lt;!-- Note that we use the base animation style here (that is no
         animations) because we really have no idea how this kind of
         activity will be used. --&gt;
    &lt;item name=<span class="hljs-string">"windowAnimationStyle"</span>&gt;@style/Animation&lt;/item&gt;
</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span></pre>
<ul>
<li>Theme.Translucent.NoTitleBar</li>
</ul>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Theme.Translucent.NoTitleBar"</span>&gt;</span><span class="css">
    &lt;<span class="hljs-tag">item</span> <span class="hljs-tag">name</span>="<span class="hljs-tag">windowNoTitle</span>"&gt;<span class="hljs-tag">true</span>&lt;/<span class="hljs-tag">item</span>&gt;
    &lt;<span class="hljs-tag">item</span> <span class="hljs-tag">name</span>="<span class="hljs-tag">windowContentOverlay</span>"&gt;<span class="hljs-at_rule">@<span class="hljs-keyword">null&lt;/item&gt;</span>
</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span></pre>
<ul>
<li>Theme.Translucent.NoTitleBar_Fullscreen</li>
</ul>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Theme.Translucent.NoTitleBar.Fullscreen"</span>&gt;</span><span class="css">
    &lt;<span class="hljs-tag">item</span> <span class="hljs-tag">name</span>="<span class="hljs-tag">windowFullscreen</span>"&gt;<span class="hljs-tag">true</span>&lt;/<span class="hljs-tag">item</span>&gt;
</span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span></pre>
<p>기본적으로 제공되는 위 테마를 사용하는 것도 괜찮으나 필요하다면 아래와 같이 필요한 설정을 추가해서 재정의한 테마를 사용할 수 있다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"NoDisplay"</span> <span class="hljs-attribute">parent</span>=<span class="hljs-value">"android:Theme"</span>&gt;</span><span class="css">
  &lt;<span class="hljs-tag">item</span> <span class="hljs-tag">name</span>="<span class="hljs-tag">android</span><span class="hljs-pseudo">:windowIsTranslucent"</span>&gt;<span class="hljs-tag">true</span>&lt;/<span class="hljs-tag">item</span>&gt;
  &lt;<span class="hljs-tag">item</span> <span class="hljs-tag">name</span>="<span class="hljs-tag">android</span><span class="hljs-pseudo">:windowBackground"</span>&gt;<span class="hljs-at_rule">@<span class="hljs-keyword">android:color/transparent&lt;/item&gt;</span>
  &lt;item name=<span class="hljs-string">"android:windowContentOverlay"</span>&gt;@null&lt;/item&gt;
  &lt;item name=<span class="hljs-string">"android:windowNoTitle"</span>&gt;true&lt;/item&gt;

  &lt;item name=<span class="hljs-string">"android:windowIsFloating"</span>&gt;true&lt;/item&gt;
  &lt;item name=<span class="hljs-string">"android:backgroundDimEnabled"</span>&gt;false&lt;/item&gt;

  &lt;item name=<span class="hljs-string">"android:colorBackgroundCacheHint"</span>&gt;@null&lt;/item&gt;
  &lt;item name=<span class="hljs-string">"android:windowAnimationStyle"</span>&gt;@android:style/Animation&lt;/item&gt;
  &lt;item name=<span class="hljs-string">"android:windowFullscreen"</span>&gt;true&lt;/item&gt;
</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span></pre>
<hr />
<h3>Theme.NoDisplay</h3>
<p>Theme.NoDisplay 테마는 Activity를 투명하게 만드는 것이 아니라 아예 보이지 않는 Activity를 만들어 준다.</p>
<pre class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-title">style</span> <span class="hljs-attribute">name</span>=<span class="hljs-value">"Theme.NoDisplay"</span>&gt;</span><span class="css">
    &lt;<span class="hljs-tag">item</span> <span class="hljs-tag">name</span>="<span class="hljs-tag">windowBackground</span>"&gt;<span class="hljs-at_rule">@<span class="hljs-keyword">null&lt;/item&gt;</span>
    &lt;item name=<span class="hljs-string">"windowContentOverlay"</span>&gt;@null&lt;/item&gt;
    &lt;item name=<span class="hljs-string">"windowIsTranslucent"</span>&gt;true&lt;/item&gt;
    &lt;item name=<span class="hljs-string">"windowAnimationStyle"</span>&gt;@null&lt;/item&gt;
    &lt;item name=<span class="hljs-string">"windowDisablePreview"</span>&gt;true&lt;/item&gt;
    &lt;item name=<span class="hljs-string">"windowNoDisplay"</span>&gt;true&lt;/item&gt;
</span></span><span class="hljs-tag">&lt;/<span class="hljs-title">style</span>&gt;</span></pre>
<p>이 테마를 사용할 때는 유의할 점이 있다. <code>did not call finish() prior to onResume() completing</code> 오류가 발생할 수 있기 때문이다. Theme.NoDisplay 테마를 사용하는 경우에는 onResume 함수가 호출되기 전에 finish()가 호출되어야 하는데 이를 어길 경우 앱에서 오류가 발생한다.
이와 관련해서는 <a href="/2016/12/07/android-theme-nodisplay-did-not-call-finish-prior-to-onresume-completing/">Theme.NoDisplay 테마 사용시 안드로이드 API 23에서 did not call finish() prior to onResume() completing 오류 발생</a>에서 조금 더 자세히 다룬다.</p>
<p>마지막으로 <a href="http://androidblog.reindustries.com/android-cheats-and-tips-invisible-activity/">Android cheats and tips: Invisible activity</a>라는 글도 참고하면 좋을 듯하다. 필요에 따라 <code>android:noHistory</code>와 <code>android:excludeFromRecents="true"</code>를 함께 사용함으로써 history와 최근 사용 항목에 남지 않는 Activity를 생성하는 부분을 안내하고 있다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/06/windows-shared-network-folder-disconnect/</id><title type="html">Windows에서 네트워크 상의 공유 폴더 연결 끊기(로그인 아이디/암호를 저장했을 경우)</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/06/windows-shared-network-folder-disconnect/"/><published>2016-12-06T21:48:00+00:00</published><updated>2016-12-06T21:48:00+00:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="tip" label="tip" /><summary><![CDATA[네트워크 상에 공유된 폴더를 연결하게되면 아이디/암호를 넣게되는 경우가 있는데 이때 암호를 저장 했다면 이후부터는 연결시 항상 그 계정을 사용하게 된다. 흔한 경우는 아니지만 이 계정을 변경하려는 경우 기존에 저장된 계정을 제거해야 하는데 그 방법은 아래와 같은 것들이 있다. net use * /d 를 사용하여 기존의 접속을 끊고 다시 연결한다. 탐색기 - 도구 - 폴더옵션 - 보기 - 모든 사용자에게 동일한 폴더 공유 권한을 지정(권장)을 체크아웃 한다. 위 방법 중 하나만 적용해도 문제가 해결될 수 있으나 그렇지 않다면 아래의 방법을 사용한다. cmd 실행 net use \\ip\공유폴더이름 /d net use /persistent:no 출처 : 네트워크 상의 다른 윈도우 운영체제에서 공유된 폴더에 접속시 로그인 암호를 저장 했을 경우 암호를 저장 해제하는 방법을 알려주십시요.]]></summary><content type="html"><![CDATA[<p>네트워크 상에 공유된 폴더를 연결하게되면 아이디/암호를 넣게되는 경우가 있는데 이때 암호를 저장 했다면 이후부터는 연결시 항상 그 계정을 사용하게 된다. 흔한 경우는 아니지만 이 계정을 변경하려는 경우 기존에 저장된 계정을 제거해야 하는데 그 방법은 아래와 같은 것들이 있다.</p>
<ul>
<li><code>net use * /d</code> 를 사용하여 기존의 접속을 끊고 다시 연결한다.</li>
<li>탐색기 - 도구 - 폴더옵션 - 보기 - 모든 사용자에게 동일한 폴더 공유 권한을 지정(권장)을 체크아웃 한다.</li>
</ul>
<p>위 방법 중 하나만 적용해도 문제가 해결될 수 있으나 그렇지 않다면 아래의 방법을 사용한다.</p>
<ul>
<li><code>cmd</code> 실행</li>
</ul>
<pre><code>net use \\ip\공유폴더이름 /d
net use /persistent:no</code></pre>
<p>출처 : <a href="https://answers.microsoft.com/ko-kr/windows/forum/windows_xp-networking/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC/74c60ce5-6730-4e96-aef1-f945bf332cec">네트워크 상의 다른 윈도우 운영체제에서 공유된 폴더에 접속시 로그인 암호를 저장 했을 경우 암호를 저장 해제하는 방법을 알려주십시요.</a></p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/06/how-do-i-associate-a-vagrant-project-directory-with-an-existing-virtualbox-vm/</id><title type="html">VirtualBox VM과 Vagrant 다시 연결하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/06/how-do-i-associate-a-vagrant-project-directory-with-an-existing-virtualbox-vm/"/><published>2016-12-06T21:46:09+00:00</published><updated>2016-12-06T21:46:09+00:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="vagrant" label="vagrant" /><summary><![CDATA[vagrant를 사용하던 중 VirtualBox와의 연결을 잃어버린 경우 vagrant up을 하게되면 새로운 vm을 자동으로 만들게 된다. 나의 경우는 실수로 ".vagrant" 폴더를 지워버리는 바람에 연결이 끊어져 버렸다. 당연히 vagrant가 다시 vm을 만들어도 기본 환경은 모두 구성되어 있으니 크게 문제될 것이 없어야하는 것이 정상이나 나의 경우는 vm 안에 저장된 샘플 데이터를 다시 구성하기 귀찮아서 다시 연결할 방법을 알아보았다. 다시 연결하는 방법은 의외로 간단하다. "Vagrantfile" 파일이 있는 폴더(vagrnat up을 실행하는 곳)로 이동한다. VBoxManage list vms 명령을 실행해서 기존 vm의 ID를 확인한다. $ VBoxManage list vms "virtualMachine" {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx} ".vagrant/machines/default/virtualbox" 폴더로 이동한다. 없다면 이 경로로 폴더를 만든다. 파일명이 "id"인 파일을 만들어서 내용에 "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"(위에서 조회한 대상 vm의 ID)를 넣고 저장한다. 혹시라도 기존 파일이 있는 상태라면 수정하고 그 외 파일들은 지운다. 끝났다. 이제 다시 vagrant up을 실행하면 기존 vm에 연결된 상태로 정상적으로 실행될 것이다.]]></summary><content type="html"><![CDATA[<p><a href="https://www.vagrantup.com/">vagrant</a>를 사용하던 중 <a href="https://www.virtualbox.org/">VirtualBox</a>와의 연결을 잃어버린 경우 <code>vagrant up</code>을 하게되면 새로운 vm을 자동으로 만들게 된다. 나의 경우는 실수로 &quot;.vagrant&quot; 폴더를 지워버리는 바람에 연결이 끊어져 버렸다.</p>
<p>당연히 <a href="https://www.vagrantup.com/">vagrant</a>가 다시 vm을 만들어도 기본 환경은 모두 구성되어 있으니 크게 문제될 것이 없어야하는 것이 정상이나 나의 경우는 vm 안에 저장된 샘플 데이터를 다시 구성하기 귀찮아서 다시 연결할 방법을 알아보았다.</p>
<p>다시 연결하는 방법은 의외로 간단하다.</p>
<ul>
<li>&quot;Vagrantfile&quot; 파일이 있는 폴더(vagrnat up을 실행하는 곳)로 이동한다.</li>
<li><code>VBoxManage list vms</code> 명령을 실행해서 기존 vm의 ID를 확인한다.</li>
</ul>
<pre class="hljs bash">$ VBoxManage list vms
<span class="hljs-string">"virtualMachine"</span> {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}</pre>
<ul>
<li>&quot;.vagrant/machines/default/virtualbox&quot; 폴더로 이동한다. 없다면 이 경로로 폴더를 만든다.</li>
<li>파일명이 &quot;id&quot;인 파일을 만들어서 내용에 &quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&quot;(위에서 조회한 대상 vm의 ID)를 넣고 저장한다. 혹시라도 기존 파일이 있는 상태라면 수정하고 그 외 파일들은 지운다.</li>
</ul>
<p>끝났다. 이제 다시 <code>vagrant up</code>을 실행하면 기존 vm에 연결된 상태로 정상적으로 실행될 것이다.</p>]]></content></entry>
<entry><id>https://blog.asamaru.net/2016/12/06/how-to-do-insertafter-in-javascript/</id><title type="html">자바스크립트 insertAfter() 구현하기</title><link rel="alternate" type="text/html" href="https://blog.asamaru.net/2016/12/06/how-to-do-insertafter-in-javascript/"/><published>2016-12-06T10:53:25+00:00</published><updated>2016-12-06T10:53:25+00:00</updated><author><name>유영재</name><uri>https://blog.asamaru.net/</uri><email>asamaru@asamaru.net</email></author><category term="js" label="js" /><summary><![CDATA[javascript는 insertBefore()만 제공하고 insertAfter() 함수는 제공하지 않는다. 웹 UI 개발시 대부분 jQuery 같은 라이브러리를 사용하니 insertAfter() 함수를 쉽게 사용할 수 있다. 그런데 추가 라이브러리를 사용할 수 없거나 간단히 이 기능만 필요한 경우가 있다. 아래는 구글 등에서 검색시 주로 발견되는 예시 소스다. Object.prototype.insertAfter = function (newNode) { this.parentNode.insertBefore(newNode, this.nextSibling); }; // 또는 function insertAfter(referenceNode, newNode) { referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling); } 그런데 이 방식은 문제가 있다. 다음 노드를 찾는 nextSibling 값이 null이 될 수 있기 때문이다(대상이 맨 마지막 노드일때). 따라서 아래와 같이 사용해야 한다. Object.prototype.insertAfter = function (newNode) { if (!!this.nextSibling) { this.parentNode.insertBefore(newNode, this.nextSibling); } else { this.parentNode.appendChild(newNode); } }; // 또는 function insertAfter(referenceNode, newNode) { if (!!referenceNode.nextSibling) { referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling); } else { referenceNode.parentNode.appendChild(newNode); } } 여기서도 parentNode가 null인 경우에 대해서는 고려되지 않았지만 대부분의 경우 굳이 고려할 필요가 없을 것이다. 필요하다면 이 부분도 추가해주면 된다.]]></summary><content type="html"><![CDATA[<p>javascript는 <a href="http://www.w3schools.com/jsref/met_node_insertbefore.asp">insertBefore()</a>만 제공하고 <code>insertAfter()</code> 함수는 제공하지 않는다.</p>
<p>웹 UI 개발시 대부분 <a href="https://jquery.com/">jQuery</a> 같은 라이브러리를 사용하니 <code>insertAfter()</code> 함수를 쉽게 사용할 수 있다. 그런데 추가 라이브러리를 사용할 수 없거나 간단히 이 기능만 필요한 경우가 있다.</p>
<p>아래는 구글 등에서 검색시 주로 발견되는 예시 소스다.</p>
<pre class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.insertAfter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newNode</span>) </span>{     
  <span class="hljs-keyword">this</span>.parentNode.insertBefore(newNode, <span class="hljs-keyword">this</span>.nextSibling);
};
<span class="hljs-comment">// 또는</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertAfter</span>(<span class="hljs-params">referenceNode, newNode</span>) </span>{
  referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
}</pre>
<p>그런데 이 방식은 문제가 있다. 다음 노드를 찾는 <code>nextSibling</code> 값이 null이 될 수 있기 때문이다(대상이 맨 마지막 노드일때).</p>
<p>따라서 아래와 같이 사용해야 한다.</p>
<pre class="hljs javascript"><span class="hljs-built_in">Object</span>.prototype.insertAfter = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">newNode</span>) </span>{     
  <span class="hljs-keyword">if</span> (!!<span class="hljs-keyword">this</span>.nextSibling) {
    <span class="hljs-keyword">this</span>.parentNode.insertBefore(newNode, <span class="hljs-keyword">this</span>.nextSibling);
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-keyword">this</span>.parentNode.appendChild(newNode);
  }
};
<span class="hljs-comment">// 또는</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insertAfter</span>(<span class="hljs-params">referenceNode, newNode</span>) </span>{   
  <span class="hljs-keyword">if</span> (!!referenceNode.nextSibling) {
    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
  } <span class="hljs-keyword">else</span> {
    referenceNode.parentNode.appendChild(newNode);
  }  
}</pre>
<p>여기서도 <code>parentNode</code>가 null인 경우에 대해서는 고려되지 않았지만 대부분의 경우 굳이 고려할 필요가 없을 것이다. 필요하다면 이 부분도 추가해주면 된다.</p>]]></content></entry>


</feed>