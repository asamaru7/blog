<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | 이 세상에 하나는 남기고 가자]]></title>
  <link href="http://blog.asamaru.net/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.asamaru.net/"/>
  <updated>2015-12-10T21:44:11+09:00</updated>
  <id>http://blog.asamaru.net/</id>
  <author>
    <name><![CDATA[유영재]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[안드로이드 Realm 0.82.2 -> 0.86.0 버전업]]></title>
    <link href="http://blog.asamaru.net/2015/12/10/realm/"/>
    <updated>2015-12-10T20:43:17+09:00</updated>
    <id>http://blog.asamaru.net/2015/12/10/realm</id>
    <content type="html"><![CDATA[<p>모바일 앱 개발시에 DB는 주로 Sqlite 또는 Core Data를 많이 사용한다. 그런데 Sqlite 등을 사용하는 것이 조금 불편한 부분들이 많아서 지난 앱 개발시 <a href="https://realm.io/kr/">Realm</a>을 사용했다. <a href="https://realm.io/kr/">Realm</a>을 사용하면 개발이 용이해지기는 한데 간혹 다루기가 까다로워지는 경우가 있다. 사실 그런 문제 상황은 내가 사용시 뭔가를 잘못했을 확률이 높지만 개인적으로 다소 예민한 라이브러리라고 생각한다. 어찌보면 당연할 수도 있는 것이 아직 1.0 버전이 되지도 못한 라이브러리니 그럴만도 하다. 실제로 아직은 버전업이 자주 발생하고 버전업시에 변경 사항이 다소 있는 편이다. 중요 변경이 있을 때 마이그레이션을 잘못하거나 하면 앱 크래시의 원인이 되기도 하니 버전업시에는 유의해야 한다.
<strong>그렇지만 다행인 것은 <a href="https://realm.io/kr/docs/java/latest/">문서화</a>가 잘되어 있고 한글본도 번역도 빠르게 올라온다.</strong></p>

<hr>

<p>얼마전 기존 프로젝트의 Realm의 0.82.2에서 0.86.0으로 버전업을 했다(버전을 확인한지 그리 오래되지 않았는데 그 사이 많이도 버전업되었다). 그랬더니 아래와 같은 오류가 발생했다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Field &#39;date&#39; is required. Either set @Required to field &#39;date&#39; or migrate using io.realm.internal.Table.convertColumnToNullable(). : io.realm.exceptions.RealmMigrationNeededException: Field &#39;date&#39; is required. Either set @Required to field &#39;date&#39; or migrate using io.realm.internal.Table.convertColumnToNullable().
</code></pre></div>
<p>사용하는 테이블의 <code>date</code> 필드가 <code>required</code>이니 <code>@Required</code> 어노테이션을 붙이거나 테이블을 마이그레이션하라는 안내다. 이미 Realm에서 해결 방법을 친절히도 안내해주고 있다. <code>@Required</code>는 기존에 사용하지 않던 것이라 찾아봤다. <a href="https://realm.io/kr/news/realm-java-0.83.0/">Realm 자바 0.83 — Null 지원!</a>를 보니 0.83 버전에서 데이터값으로 null을 사용할 수 있게 됨에 따라 추가된 어노테이션이다. 그러니 기존 0.82.2의 데이터는 null이 될 수 없었으므로 required 타입으로 인식하는 것이다. 그외에도 다른 변경 사항을 보고 싶다면 <a href="https://github.com/realm/realm-java/blob/master/changelog.txt">changelog</a>를 참고하자.</p>

<p>기존에도 null이 들어올 수 없는 구조로 프로그램되어 있었으니 <code>@Required</code>를 해당 핃르(변수)에 붙이는 것으로 해결하는 것이 맞겠다. 나는 여기서 다른 문제를 겪었었는데 <code>@Required</code>만 붙이면 될 것을 스키마 버전 정보까지 올리는 바람에 엉망이 되었었다. 어쨌든 결론은 이 문제에 대해서는 <code>@Required</code>를 붙이는 방법으로 간단히 해결된다.</p>

<hr>

<p>그런데 문제는 여기서 끝나지 않았다. <a href="https://realm.io/docs/java/latest/api/io/realm/RealmMigration.html">RealmMigration</a> 클래스도 방식이 변경되어 맞춰줬다.</p>

<p>그리고 또 하나. 기존에는 아래와 같이 인스턴스를 생성해서 사용했다.</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">RealmConfiguration</span><span class="o">.</span><span class="na">Builder</span> <span class="n">realmBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RealmConfiguration</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">context</span><span class="o">).</span><span class="na">name</span><span class="o">(</span><span class="n">realmName</span><span class="o">)</span> <span class="o">.</span><span class="na">schemaVersion</span><span class="o">(</span><span class="n">SCHEME_VERSION</span><span class="o">);</span>
<span class="n">RealmConfiguration</span> <span class="n">config</span> <span class="o">=</span> <span class="n">realmBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
<span class="n">Realm</span> <span class="n">realm</span> <span class="o">=</span> <span class="n">Realm</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</code></pre></div>
<p>그런데 여기서 문제가 발생하기 시작했다. 이 부분은 realm 접속을 생성하는 과정으로 사용하는 시점에 처리하고 있었다. 기존에 사용처 자체가 워낙에 간단한 부분이라서 그랬는지는 몰라도 문제가 없었다. 그런데 버전업 이후 이상하게 앱 크래시가 발생했다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">E/AndroidRuntime: FATAL EXCEPTION: main
                  Process: ~~~, PID: 21532
                  java.lang.RuntimeException: Unable to start activity ComponentInfo{~~~/~~~}: java.lang.IllegalArgumentException: Configurations cannot be different if used to open the same file.
...
</code></pre></div>
<p>오류 내용은 이렇다. 동일 table 파일을 다른 Configurations으로 열 수 없다. 이 오류는 처음에 앱이 열릴 때는 발생하지 않다가 종료 후 다시 들어오면 발생했다. 이상했다. 분명이 앱을 종료 했음에도 불구하고 왜 다른 Configurations을 넣고 있다는 것인지.</p>

<p>이번에 알게 되었는데 root activity에서의 finish()는 앱의 종료를 의미하는 것이 아니었다. 마지막 activity가 finish()되면 화면에서는 즉시 종료된 것으로 보이나 프로세스는 살아 남는다. 아마도 시스템 자원이 부족해지면 프로세스가 OS에 의해 죽을 수는 있다. 이와 관련해서는 조만간 별도로 글을 남기려고 한다.</p>

<p>어쨌든 이러한 상황이 발생하는 것으로 보아 기존 버전과 최신 버전의 Realm 생명 주기를 관리하는 방법이 변경된 것으로 보인다. 메뉴얼에 보면 <a href="https://realm.io/kr/docs/java/0.86.0/#section-52">모범 사용예 - Realm 인스턴스들의 생명주기 관리하기</a>라는 부분이 있다. &quot;모범 사용예&quot;라는 항목 자체가 0.85.0 버전부터 있는 것으로 보아 그 시점에 변경이 된 것으로 생각한다. 그런데 여기서 사용하는 함수는 <a href="https://realm.io/news/realm-java-0.81.1/">Realm Java 0.81.1</a>에서 추가된 것으로 소개하고 있다. 기존에 내가 사용하던 것이 0.82.2 였지만 위 문제가 발생하지 않았던 것으로 보아 앞선 예상대로 그 후에 관리 방법이 변경된 것 같기는 하다. 어쨌든 이 부분에 관련된 정보가 있어 발췌한다.</p>

<blockquote>
<p><strong>Realm 인스턴스들의 생명주기 관리하기</strong></p>

<p>RealmObjects과 RealmResults는 데이터 전체를 느긋하게 가져옵니다. 이런 이유로 Realm 오브젝트나 질의 결과를 접근할 때 가능한 오래 Realm 인스턴스를 유지하는 것이 중요합니다. Realm 데이터 커넥션을 열고 닫는 추가 비용을 줄이기 위해 레퍼런스 카운트화된 캐시를 가집니다. 이는 Realm.getDefaultInstance()를 같은 스레드에서 여러번 호출하는 것은 비용이 들지 않고 내부의 리소스는 자체적으로 모든 인스턴스가 닫히면 해제됨을 의미합니다.</p>

<p>모든 액티비티와 프래그먼트의 UI 스레드에서 Realm 인스턴스를 열고 Activity나 Fragment가 파괴될 때 닫는 것은 쉽고 안전한 접근 법입니다.</p>
</blockquote>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// 애플리케이션에서 Realm 설정하기</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyApplication</span> <span class="kd">extends</span> <span class="n">Application</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
        <span class="n">RealmConfiguration</span> <span class="n">realmConfiguration</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RealmConfiguration</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="k">this</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
        <span class="n">Realm</span><span class="o">.</span><span class="na">setDefaultConfiguration</span><span class="o">(</span><span class="n">realmConfiguration</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 액티비티들을 전환하며 onCreate()/onDestroy()가 중첩되면 Activity 2의 onCreate가</span>
<span class="c1">// Activity 1의 onDestroy()보다 먼저 호출 됩니다.</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyActivity</span> <span class="kd">extends</span> <span class="n">Activity</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Realm</span> <span class="n">realm</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
        <span class="n">realm</span> <span class="o">=</span> <span class="n">Realm</span><span class="o">.</span><span class="na">getDefaultInstance</span><span class="o">();</span>
    <span class="o">}</span>    

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onDestroy</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onDestroy</span><span class="o">();</span>
        <span class="n">realm</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 프래그먼트에서 onStart()/onStop()를 사용합니다.</span>
<span class="c1">// 프래그먼트의 onDestroy()는 호출되지 않을 수 있습니다.</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFragment</span> <span class="kd">extends</span> <span class="n">Fragment</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Realm</span> <span class="n">realm</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">();</span>
        <span class="n">realm</span> <span class="o">=</span> <span class="n">Realm</span><span class="o">.</span><span class="na">getDefaultInstance</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
        <span class="n">realm</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<p>그렇다. 이제는 앱 생성시 <code>Realm.setDefaultConfiguration()</code>를 이용해서 Configuration을 지정하고 필요한 곳에서 <code>Realm.getDefaultInstance()</code>으로 인스턴스를 받아 사용하는 것을 권장한다. 위에 이야기한 문제도 이 방식을 사용하면 발생하지 않는다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[안드로이드 Crash Report 도구 : ACRA에서 Fabric(Crashlytics)으로의 전환]]></title>
    <link href="http://blog.asamaru.net/2015/11/11/from-acra-to-fabric/"/>
    <updated>2015-11-11T20:33:16+09:00</updated>
    <id>http://blog.asamaru.net/2015/11/11/from-acra-to-fabric</id>
    <content type="html"><![CDATA[<p>지난 글 <a href="/2015/10/01/android-acra-please-configure-buildconfigclass-in-your-acra-config/">ACRA : Please configure &#39;buildConfigClass&#39; in your ACRA config 오류</a>와 <a href="/2015/09/25/android-6-apache-http-client-removal/">Android 6(API 23 : marshmallow) : Apache HTTP 클라이언트 제거</a>에서 언급했던 것처럼 안드로이드 Crash Report 도구로 ACRA를 사용중이었다.
ACRA 사용중에 만난 오류를 해결하기 위해 시간을 들여서 원인을 찾고 개발자에게 전달해서 개선을 요청할 정도로 나름 애용하려던 도구였는데 오늘 <a href="https://fabric.io">Fabric(Crashlytics)</a>으로 바꿔버렸다.</p>

<p>사실 처음부터 대체할 목적이 있었던 것은 아니었다. 안드로이드용으로 제작된 앱을 iOS용으로도 제작할 일이 있어 개발을 진행하던 중 안드로이드의 ACRA 같은 도구가 iOS에도 있을 것이라는 생각에 몇가지를 찾아보고 있었다. 그때 눈에 띄는 것이 <a href="https://try.crashlytics.com/">Crashlytics</a> 였다(<a href="https://gist.github.com/rino0601/018c7f22aeb23cf2e2a0">Crashlytics 소개 + Android Studio에서 적용하는 방법</a>).</p>

<p>그런데 이 Crashlytics라는 서비스를 운영하는 회사가 트위터에 인수가 되었다(<a href="http://besuccess.com/2013/01/28496/">앱 충돌 리포트 서비스 Crashlytics, 트위터에 인수되다</a>). 그래서 조금 더 알아보니 트위터에서 <a href="https://fabric.io">Fabric</a>이라는 것을 새로 내놓았다.</p>

<p><a href="https://fabric.io">Fabric</a>이 무엇인지에 대해서는 트위터 한글 블로그의 &quot;<a href="https://blog.twitter.com/ko/2014/introducing-fabric-kr">패브릭(Fabric)을 소개합니다.</a>&quot;를 보면 잘 설명되어 있다.</p>

<blockquote>
<p>패브릭(Fabric)은 앱 개발자들이 흔히 직면하는 안정성, 사용자 확보, 수익성, 사용자 인증의 이슈들&gt;을 해결해 줄 세 가지의 모듈형 키트들로 이루어져 있습니다. 패브릭은 크래시리틱스(Crashlytics), 모펍(MoPub), 트위터 등의 서비스를 통합해 개발자들이 더 안정적인 앱을 만들도록 돕습니다. 패브릭은 앱 개발자들이 세계 최고의 모바일 애드 익스체인지(ad exchange)를 통해 수익을 확보할 수 있게 하며, 트위터 로그인 기능과 실시간 콘텐츠 스트림 기능을 통해 더 많은 사용자에 콘텐츠를 전달할 수 있게 하거나 더욱 간단히 사용자를 인증할 수 있도록 해줍니다.</p>
</blockquote>

<p>나는 우선 최초 목적이었던 iOS를 위한 Crash Report 도구의 설치를 위해 xcode 프로젝트에 <a href="https://fabric.io">Fabric</a>을 추가했다. 설치 과정은 복잡하지는 않으나 몇가지 설정할 부분들이 있어서 자칫 까다로워질 수 있지만 <a href="https://fabric.io">Fabric</a>에서 관련 도구를 워낙에 잘 제공 해줘서 시키는대로 따라만 하면 큰 무리없이 적용할 수 있다. &quot;기회가 되면 설치 과정을 글로 남길까?&quot; 생각했었지만 설치 도구가 워낙 잘되어 있어 &quot;굳이 내가 다시 설명할 필요가 있을까?&quot;라는 생각이다. 그 정도로 잘 되어있다. 다만 기본 설치 후 Debug 모드에서는 로그 수집을 하지 않도록 설정하는 등의 몇가지 안내가 필요한 부분들이 있는데 이건 시간이되면 따로 글을 남기려고 한다. 사실 이 부분도 메뉴얼로 모두 제공되고 있으나 막상 찾으려니 귀찮은 것들이다.</p>

<p>결론적으로는 아주 만족스러웠다. Crash Report가 잘되는 것은 물론이고 Hook을 걸 수 있도록 하는 기능도 제공되고 있어서 기존에 ACRA에서 연결해 두었던 자체 로그 수집기로도 기존처럼 정보를 전달하는 것이 가능했다(정확히 이야기 하자면 기존과 동일한 내용을 전달하는 것은 아니고 오류 발생 이벤트만 전달된다). 그리고 <a href="https://fabric.io">Fabric</a>에는 <a href="https://try.crashlytics.com/">Crashlytics</a> 외에도 <a href="https://answers.io/">Answers</a>라는 모듈도 함께 제공된다(사실 더 많은 것들이 있다). 이 모듈은 구글 어날리틱스 처럼 앱에 대한 이벤트를 수집하여 보고서를 제공해 준다. 결정적으로 이 모든 것이 무료.</p>

<p>그래서 안드로이드용 앱에서도 ACRA를 걷어내고 Fabric을 적용했다. 역시 아주 만족스럽다. ACRA에서 보내주는 무지막지한 Crash 로그 대신 잘 정리된 로그를 확인할 수 있게 되었다.</p>

<p>앞선 설명처럼 <a href="https://fabric.io">Fabric</a>에는 여러가지 모듈들이 있는데 이들 중 일부는 각각 독립적인 서비스를 가지고 있다(<a href="https://try.crashlytics.com/">Crashlytics</a>와 <a href="https://answers.io/">Answers</a> 처럼). 이 부분에 관련해서는 트위터 한글 블로그의 &quot;<a href="https://blog.twitter.com/ko/2014/introducing-fabric-kr">패브릭(Fabric)을 소개합니다.</a>&quot;의 내용 마지막에 아래와 같이 안내 되어있다.</p>

<blockquote>
<p>패브릭(Fabric)은 트위터만의 작품이 아닙니다. 패브릭(Fabric)이 가능하도록 키트(Kits)들의 관리, 설치, 업데이트에 관여하는 모든 SDK 벤더들이 만들어낸 것이라고 생각합니다. 당신이 SDK를 관리하는 사람이고, 트위터와 함께 일하고 싶다면 패브릭 파트너십 담당(<a href="mailto:partners@fabric.io">partners@fabric.io</a>)에 메일을 보내 주시길 바랍니다. 개발자 여러분들의 연락을 기다리고 있겠습니다.</p>
</blockquote>

<p>따라서 각각의 서비스를 사용해도 무방할 것으로 보인다. 하지만 <a href="https://fabric.io">Fabric</a>을 사용함으로써 통합 관리를 할 수 있으며 설치 과정이 아주 단순해진다.</p>

<p><strong>결론 : Crash Report 도구가 필요하다면, iOS와 Android 모두 한 곳에서 관리하고 싶다면, 사용자 이벤트 로깅도 하고 싶다면, <a href="https://fabric.io">Fabric</a>을 적극 추천하고 싶다.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android : is not translated in ... Lint Error 해결]]></title>
    <link href="http://blog.asamaru.net/2015/11/05/android-is-not-translated-in-dot-dot-dot-lint-error/"/>
    <updated>2015-11-05T14:27:23+09:00</updated>
    <id>http://blog.asamaru.net/2015/11/05/android-is-not-translated-in-dot-dot-dot-lint-error</id>
    <content type="html"><![CDATA[<p>안드로이드에서 배포를 위한 빌드시에 아래와 같은 오류가 발생하는 경우가 있다. 상황에 따라 언어의 종류(en)는 다를 수 있다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Error:(65) Error: &quot;...&quot; is not translated in &quot;en&quot; (English) [MissingTranslation]
</code></pre></div>
<p>이 오류는 말그대로 다국어 지원에 대한 처리가 제대로 되어 있지 않다는 오류이다. 일반적으로 다국어 지원을 위한 별도의 처리를 한적이 없다면 이 오류는 발생하지 않는 것이 당연하다.
하지만 이번에 이 오류를 만나고 찾아보니 많은 개발자들이 이 문제를 겪는 것 같다. 사실 나는 다국어 지원에 관련된 별도의 처리를 한 상황이었으므로 이 오류를 만나는 것이 당연한 상황이었다.
어쨌든 인터넷에 찾아보면 대부분 다음과 같이 해결법을 제시하고 있다.</p>

<ul>
<li>Lint 관련 설정은 이클립스 메뉴의 Window - Preference - Android - Lint 에서 변경할 수 있는데요..  여기서 MissingTranslation 항목을 찾아 Severity를 warning으로 변경하면 됩니다.</li>
<li><a href="http://mytalkhome.tistory.com/816">Android Studio &quot;is not translated in &quot;en&quot; (English) [MissingTranslation]&quot; 오류 해결하기</a></li>
</ul>

<p>이 방법은 말그대로 제대로 처리되지 않은 부분을 오류에서 경고로 변경하여 빌드를 수행하는 것으로 좋지 못한 방법이다. 게다가 나의 경우는 OSX라서 그런지 안드로이드 스튜디오의 버전 때문인지 위치와 명칭이 많이 달랐다.</p>

<p>유사하지만 다른 방법도 있다. build.gradle에서 lint를 제외하는 것이다. <a href="http://stackoverflow.com/questions/20699147/gradle-build-fails-on-lint-task">gradle build fails on lint task</a></p>
<div class="highlight"><pre><code class="language-text" data-lang="text">android {
  lintOptions {
      checkReleaseBuilds false
  }
}
</code></pre></div>
<p>그리고 또 다른 방법 한가지. <a href="http://stackoverflow.com/questions/28106875/missingtranslation-for-default-language-is-not-translated-in-en">MissingTranslation for default language ( “…” is not translated in “en”)</a>
이 방법은 Strings.xml에서 locale을 아예 미리 입력해 버리는 것이다. 위 오류에 맞추어 en이라고 했지만 자신의 상황에 맞게 입력해야 한다.</p>
<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;resources</span>
    <span class="na">xmlns:tools=</span><span class="s">&quot;http://schemas.android.com/tools&quot;</span>
    <span class="na">tools:locale=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</code></pre></div>
<p>당연히 문제의 원인을 정확히 파악하여 해결하는 것이 가장 좋은 방법이다.
당장 급하고 원인을 찾지 못하겠다면 위의 방법들을 쓸 수도 있겠지만 계속 저렇게 사용하는 것은 권장하고 싶지는 않다.</p>

<p>이제부터는 내가 문제를 만난 상황이다. 사실 나 또한 다국어를 지원할 필요가 있었던 것은 아니다. 다만 사용한 라이브러리 중 하나가 다국어를 지원하고 있었다.
따라서 한국어 부분은 <code>values-ko/strings.xml</code>파일로 분리되어서 처리되고 있었다. 이 상황에서 내가 필요한 것은 설정된 문장의 일부를 변경하는 것이었다.
그래서 내 프로젝트의 <code>values/strings.xml</code>에 필요한 문장들을 재정의 했다. 오류는 나지 않지만 적용되지 않는다. 다시 내 프로젝트에도 <code>values-ko/strings.xml</code> 파일을 만들고 필요한 부분을 재정의 했다.
여기서부터 문제의 시작이다. 아래의 오류가 발생한다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Error:(65) Error: &quot;...&quot; is not translated in &quot;ko&quot;
</code></pre></div>
<p><code>values-ko/strings.xml</code> 파일에 모든 내용을 넣지 않고 필요한 부분만 넣었으므로 나머지 부분이 번역되지 않았다고 오류가 나는 것이다. 간단한 해결 방법은 <code>values-ko/strings.xml</code> 파일에 <code>values/strings.xml</code>의 내용을 모두 복사해 넣어준다. 그런데 이 방법은 싫다. 둘다 한국어인데 굳이 두군데를 관리하고 싶지 않다. 이런 경우라면 아래와 같이 <code>tools:ignore=&quot;MissingTranslation&quot;</code>를 사용해서 문제를 해결할 수 있다.</p>

<p><strong>Strings.xml</strong>
<code>xml
&lt;resources
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;
    tools:ignore=&quot;MissingTranslation&quot;&gt;
</code></p>

<p>명확히 이 영역은 다국어 지원이 필요하지 않은 이므로 명시적으로 번역 누락을 무시하도록 하는 것이다. 어떻게 보면 상기 설명했던 오류를 무시하는 것과 같아 보일 수 있으나 이 방법은 무시할 범위를 명확히 인지하고 해당 영역만 필요에 의해 무시하도록 했다는 것이다.
단, 한가지 추가 작업이 필요하다. <code>values-ko/strings.xml</code> 파일에서 재정의 했던 항목들을 <code>values/strings.xml</code>에도 넣어주어야 한다는 것이다. 안그러면 아래와 같은 오류가 난다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">Error:(3) Error: &quot;XXX&quot; is translated here but not found in default locale [ExtraTranslation]
</code></pre></div>
<p>사실 불편함이 생기는 부분이지만 앞서 설명처럼 반대로 모두를 두군데서 관리하는 것보다 필요한 몇줄만 별도 관리하는 것을 선택했다.</p>

<p><strong>결론적으로 선택은 자유다. 위 방법들 중 필요에 맞게 선택해서 사용하면 되겠다.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android에서 runOnUiThread 작업이 종료 될 때까지 대기하기]]></title>
    <link href="http://blog.asamaru.net/2015/11/03/how-to-wait-for-android-runonuithread-to-be-finished/"/>
    <updated>2015-11-03T15:04:46+09:00</updated>
    <id>http://blog.asamaru.net/2015/11/03/how-to-wait-for-android-runonuithread-to-be-finished</id>
    <content type="html"><![CDATA[<p>아래에서 설명하고자 하는 내용을 뭐라고 표현 해야할지 몰라서 &quot;Android에서 runOnUiThread 작업이 종료 될 때까지 대기하기&quot;라고 글 제목을 정했다.
내용을 요약하자면 thread에서 wait()과 notify()를 이용해서 runOnUiThread 작업이 종료될 때까지 대기하도록 하는 것이다. 쉽게 말해서 runOnUiThread는 main thread에서 처리되므로 비동기로 처리되게 되는데 필요한 작업이 완료되기 전까지 다른 처리를 대기시키는 것이다. 이렇게 설명하는 것도 정확한 설명은 아니다. 그냥 내가 하고자 했던 의도를 설명하고자 한 것이다. 따라서 정확한 의미와는 차이가 있다.</p>

<p>설명하기 어려워 이리저리 이야기 했는데 그냥 내가 하고자 했던 상황을 설명하는게 이해에 도움이 될 것 같다.</p>

<blockquote>
<p>PagerAdapter를 사용하는 상황에서 <code>java.lang.IllegalStateException: The application&#39;s PagerAdapter changed the adapter&#39;s contents without calling PagerAdapter#notifyDataSetChanged!</code> 오류가 발생한다. 이 문제가 발생하는 원인은 notifyDataSetChanged 호출 후 적용되기 전에 PagerAdapter의 데이터가 변경되었기 때문이다.</p>
</blockquote>

<p>보통의 경우 위의 상황이 자주 발생하지는 않는다. 나의 경우엔 PagerAdapter의 데이터가 UI에서 버튼 터치에 의해서 변경되는 상황이다. 상황을 조금 더 자세히 설명해야 할 것 같다.</p>

<ul>
<li>화면 상에 버튼 A, B가 있다.</li>
<li>A 버튼을 누르면 A 데이터 목록을 서버에서 가져와 PagerAdapter에 적용한다.</li>
<li><p>B 버튼을 누르면 B 데이터 목록을 서버에서 가져와 PagerAdapter에 적용한다.</p></li>
<li><p>A 버튼이 눌려진 후 서버에서 데이터를 가져와 PagerAdapter에 반영하고 notifyDataSetChanged()를 runOnUiThread 내부에서 호출했다. runOnUiThread 내부에서 호출하는 이유는 데이터의 변경시 UI가 변경되는 부분들이 있어서 main thread 오류를 막기 위해서 이다.</p></li>
<li><p>notifyDataSetChanged()가 적용되기 전에 버튼 B가 눌려지고 데이터를 가져와 PagerAdapter에 반영되었다.</p></li>
<li><p>notifyDataSetChanged()가 적용되면서 데이터의 변경을 감지하고 <code>java.lang.IllegalStateException: The application&#39;s PagerAdapter changed the adapter&#39;s contents without calling PagerAdapter#notifyDataSetChanged!</code> 오류가 발생한다.</p></li>
</ul>

<p>설명이 되었을런지 모르겠다. 앞서 말한 것과 같이 자주 발생하는 상황은 아니나 A, B 버튼을 번갈아 빠르게 터치하면 오류를 재현할 수 있다. 소스 코드를 올리면 더 이해가 쉬울 수 있는데 작업중인 소스들이 모두 섞여 있어 구분해서 남기는게 힘들어서 말로 설명했다.</p>

<p>일단 기존 소스와 해결된 소스부터 보자. 당연히 동작하는 소스는 아니다. 하지만 무엇을 하고 있는지를 확인하는데는 충분할 것으로 본다.</p>

<p><strong>오류가 발생하던 소스</strong>
<figure class='code notranslate'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PreviewPagerAdapterBase</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">DataItem</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">PagerAdapter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">notifyDataSetChangedRunnalbe</span> <span class="o">=</span> <span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setItems</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">items</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;language-text&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">lang</span><span class="o">=</span><span class="s">&quot;text&quot;</span><span class="o">&gt;</span><span class="n">Helper</span><span class="o">.</span><span class="na">runOnUiThread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">notifyDataSetChanged</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>수정된 소스</strong>
<figure class='code notranslate'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PreviewPagerAdapterBase</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">DataItem</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">PagerAdapter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">notifyDataSetChangedRunnalbe</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">notifyDataSetChanged</span><span class="o">();</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">this</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">setItems</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">items</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;language-text&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">lang</span><span class="o">=</span><span class="s">&quot;text&quot;</span><span class="o">&gt;</span><span class="kd">synchronized</span> <span class="o">(</span><span class="n">notifyDataSetChangedRunnalbe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Helper</span><span class="o">.</span><span class="na">runOnUiThread</span><span class="o">(</span><span class="n">notifyDataSetChangedRunnalbe</span><span class="o">);</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">notifyDataSetChangedRunnalbe</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">hasFirstItem</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>중요한 부분은 notifyDataSetChangedRunnalbe로 synchronized 처리하고 Runnable을 wait()한 다음 처리가 완료된 후 notify() 하는 것이다. 그리고 wait() 호출시 try 처리하고 있는데 InterruptedException이 발생할 수 있기 때문이다. 실제로 위에서 설명한 오류가 발생하는 상황에서는 InterruptedException이 대신 발생하는 것을 확인했다. 하지만 무시되어도 되는 상황이며 catch되었기 때문에 앱이 죽는 것은 막을 수 있다.</p>

<p>wait()와 notify()에 대해서는 <a href="http://warmz.tistory.com/370">Thread(쓰레드) - 동기화(Synchronized) / wait()와 notify()</a>를 참고하면 된다.</p>

<p>사실 위 방법은 <a href="http://stackoverflow.com/a/5996961">how to wait for Android runOnUiThread to be finished?</a>에서 참고한 것이다. 이 글을 보면 이 방법 외에도 여러가지 답변이 있다.</p>

<p>이 글은 정확한 이해를 하고 쓴 글이 아니므로 여러가지 문제가 있을 수 있다. 하지만 내가 원하는 문제에 대한 해결법이 되었기 때문에 기록성으로 글을 남겨둔다.
결론적으로 notifyDataSetChanged()를 명확히 적용하고 넘어 가야하는 상황에서는 위 방법이 도움이 될 수 있다. 그 외의 경우엔 UIThread의 작업을 굳이 sync 할 필요가 떠오르진 않는다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android.view.WindowManager$BadTokenException: Unable to add window 오류]]></title>
    <link href="http://blog.asamaru.net/2015/11/03/android-dot-view-dot-windowmanager/"/>
    <updated>2015-11-03T09:00:30+09:00</updated>
    <id>http://blog.asamaru.net/2015/11/03/android-dot-view-dot-windowmanager</id>
    <content type="html"><![CDATA[<p>안드로이드에서 아래와 같은 오류가 나는 경우가 있다.</p>

<p><code>android.view.WindowManager$BadTokenException: Unable to add window -- token android.os.BinderProxy@420d8488 is not valid; is your activity running?</code></p>

<p>대부분은 Dialog를 띄우러고 할 때 발생한다. 소스로 보자면 아래와 같은 경우다.</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="k">new</span> <span class="n">AlertDialog</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
    <span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;알림&quot;</span><span class="o">)</span>
    <span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="s">&quot;알림 메시지&quot;</span><span class="o">)</span>
    <span class="o">.</span><span class="na">setNegativeButton</span><span class="o">(</span><span class="s">&quot;취소&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span>
    <span class="o">.</span><span class="na">show</span><span class="o">();</span>
</code></pre></div>
<p>위 소스를 실행 했을 때 BadTokenException 오류가 발생한다면 대부분은 context에 Activity Context를 넣지 않고 Application Context를 넣었을 경우다. 이와 관련해서 <a href="/2015/09/04/android-dialog-windowmanager-badtokenexception/">안드로이드에서 Dialog 사용시 WindowManager$BadTokenException 발생</a>이라는 글을 적은 적이 있었다. 이런 경우라면 처음부터 오류가 발생하기 때문에 발견하고 수정하기가 쉽다.</p>

<p>그런데 분명 Activity Context를 넣어주었음에도 불구하고 불특정하게 오류가 발생하는 상황이 있다. 나의 경우는 다음과 같은 상황에서 이 문제가 발생했다.</p>

<p>앱 시작시 splash 화면에서 네트워크 활성 여부를 검사해서 비활성(서버 접속 불가)되어 있다면 알림 Dialog를 띄우고 앱을 종료하도록 했다. 그런데 여기서 불특정하게 오류가 발생하여 앱이 알림 Dialog를 띄우지 못하고 죽어 버리는 현상이 발생했다.</p>

<p>ACRA를 통해 보고된 오류 메시지를 확인하니 위에서 언급했던 오류가 발생하고 있었다. 그래서 원인을 찾기 위해 소스 코드를 확인해 보았으나 아무리 봐도 문제가 될 부분을 찾을 수 없었다. 그래서 구글에서 관련 정보를 찾아보니 <a href="http://stackoverflow.com/a/18665887">“android.view.WindowManager$BadTokenException: Unable to add window” on buider.show()</a>에 원인과 해결 방법이 나와 있었다.</p>

<p>결론은 context의 null 검사 뿐만 아니라  <a href="http://developer.android.com/intl/ko/reference/android/app/Activity.html#isFinishing%28%29">isFinishing()</a>도 함께 검사 해줘야 한다는 것이다.</p>

<p>적용된 코드는 아래와 같다.</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="k">if</span> <span class="o">((</span><span class="n">context</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(!</span><span class="n">context</span><span class="o">.</span><span class="na">isFinishing</span><span class="o">()))</span> <span class="o">{</span>
  <span class="k">new</span> <span class="n">AlertDialog</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">context</span><span class="o">)</span>
      <span class="o">.</span><span class="na">setTitle</span><span class="o">(</span><span class="s">&quot;알림&quot;</span><span class="o">)</span>
      <span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="s">&quot;알림 메시지&quot;</span><span class="o">)</span>
      <span class="o">.</span><span class="na">setNegativeButton</span><span class="o">(</span><span class="s">&quot;취소&quot;</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span>
      <span class="o">.</span><span class="na">show</span><span class="o">();</span>  
<span class="o">}</span>
</code></pre></div>
<p>사실 이것 만으로 오류가 모두 해결된 것인지는 확인하지 못했다(오류 재현이 너무 힘들다).   하지만 안드로이드에서 발생하는 비슷한 다른 오류들을 감안하면 이것이 원인이 맞을 것이라고 생각한다.</p>
]]></content>
  </entry>
  
</feed>
