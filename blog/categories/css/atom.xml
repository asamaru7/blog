<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: css | 이 세상에 하나는 남기고 가자]]></title>
  <link href="http://blog.asamaru.net/blog/categories/css/atom.xml" rel="self"/>
  <link href="http://blog.asamaru.net/"/>
  <updated>2015-09-18T12:28:15+09:00</updated>
  <id>http://blog.asamaru.net/</id>
  <author>
    <name><![CDATA[유영재]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[필요해서 만들어본 CSS Image Sprites 생성기]]></title>
    <link href="http://blog.asamaru.net/2015/09/13/online-css-image-sprites-generator/"/>
    <updated>2015-09-13T20:15:23+09:00</updated>
    <id>http://blog.asamaru.net/2015/09/13/online-css-image-sprites-generator</id>
    <content type="html"><![CDATA[<p>웹 기반 프로그램 개발을 주업으로 하다보니 CSS에 관련된 작업도 많이 하게 된다. 게다가 웹 서비스 성능에 대해 고민을 많이 하게되는 것도 당연하다.
그중에서도 간혹 필요하지만 마땅한 도구가 없어 고민을 하게되던 것 중 하나가 CSS Image Sprite 도구다.
얼마전에도 비슷한 작업이 필요하게되어 온라인 도구들을 찾던 중 마땅한 것이 없어 필요에 의해 도구를 하나 만들어 버렸다.</p>

<p>일단 이 도구에 대해 설명하기 전에 CSS Image Sprite가 무엇인지 부터 알아보자.</p>

<h2>CSS Image Sprite 기법</h2>

<p>간단하게 설명하자면 웹 페이지에서 필요한 이미지들을 한장의 이미지로 묶어 제작/배포하여 HTTP request를 줄임으로써 웹페이지 성능을 높이는 기법이다.
이 부분을 이해하기 위해서는 왜 HTTP request를 줄이는 것이 성능에 관련이 있는지를 알아야한다.
일반적으로 복잡한 웹페이지의 경우 페이지를 읽는데 수십에서 수백개의 request(CSS, JS, Image 등)가 발생한다. 이러한 페이지를 브라우저가 로딩할때 한꺼번에 모든 request를 처리하는 것이 아니라 순차적(보통 동시에 2~4개를 동시에 처리 : 브라우저마다 설정에 따라 다름)으로 처리함에 따라 이 수가 많다면 완료 시간이 늘어날 수 밖에 없다. 이와 관련된 자세한 내용은 얘기가 길어지므로 일단 이 정도만 설명하겠다. 조금 더 자세한 내용이 필요하다면 아래의 사이트를 참고하자.</p>

<ul>
<li><a href="https://css-tricks.com/css-sprites/">https://css-tricks.com/css-sprites/</a></li>
<li><a href="http://alistapart.com/article/sprites">http://alistapart.com/article/sprites</a></li>
<li><a href="http://windtale.net/blog/css-image-sprite-automation-with-grunt-spritesmith/">http://windtale.net/blog/css-image-sprite-automation-with-grunt-spritesmith/</a> (한글)</li>
</ul>


<h2>CSS Image Sprites 생성기</h2>

<p><a href="https://asamaru7.github.io/SpriteImageGenerator/">https://asamaru7.github.io/SpriteImageGenerator/</a>  또는  <a href="http://sprite.asamaru.net">http://sprite.asamaru.net</a>  으로 접속해서 사용할 수 있다.</p>

<p>Github :  <a href="https://github.com/asamaru7/SpriteImageGenerator">https://github.com/asamaru7/SpriteImageGenerator</a>
(만들어서 나와 같은 필요을 느끼는 사람이 있을까 싶어 페이지도 개설할 겸 Github에 등록했다.)</p>

<p>그리고 만든 김에 크롬 익스텐션도 만들어 올렸다. 사실 그냥 바로가기 링크랑 기능이 동일하다.</p>

<p><a href="https://chrome.google.com/webstore/detail/sprite-image-generator/ckdkgoopenkcogopkfpehfcjkkhhofgo?utm_source=gmail">https://chrome.google.com/webstore/detail/sprite-image-generator/ckdkgoopenkcogopkfpehfcjkkhhofgo?utm_source=gmail</a></p>

<p>참고로 사이트는 내용이 크게 어려울 것이 없기 때문에 영어로 만들었다.(사실 영어 잘 못한다. 그래서 오탈자가 많을 수 있다.) 혹시나 다른 나라에서도 사용할까 싶어서 하긴 했는데 아직은 방문자가 거의 없다.</p>

<p>사실 이미 잘만들어진 많은 도구들이 있다. 하지만 굳이 새로 만든 이유는 Export 기능 때문이다. 보통 sprite image를 생성한 후에 사용된 작은 이미지들을 따로 관리하지 않아서 수정하거나 추가할 것이 생겼을 때 골치 아플 수 있다. 그래서 export 기능을 추가 했다. sprite.json 파일을 함께 export하는데 이 파일에서 생성시에 설정한 옵션과 원본 이미지들이 모두 포함되어 있어서 수정이 필요하면 이 파일만 import해서 수정할 수 있다. 나의 경우는 프로그램 소스에 함께 포함시켜 두고 관리한다.</p>

<h3>특징</h3>

<ul>
<li>Retina/Normal sprites 동시 생성 가능</li>
<li>Drag and drop 파일 첨부</li>
<li>이미지 이름 변경 가능(CSS 클래스명에 사용됨)</li>
<li>이미지 이름별/사이즈별 정렬, drag and drop으로 직접 정렬</li>
<li>Support DataURL Export</li>
<li>Export: Sprites 이미지 / 설정 파일 다운로드</li>
<li>설정 파일 Import 기능 : *.sprite.json File (향후 수정시 기존 export를 첨부하여 재작업 가능)</li>
</ul>


<h3>스크린샷</h3>

<p><img src="/img/2015-09-13-online-css-image-sprites-generator-1.png" alt="Sprite CSS Image Generator 설정" />
<img src="/img/2015-09-13-online-css-image-sprites-generator-2.png" alt="Sprite CSS Image Generator 확인" />
<img src="/img/2015-09-13-online-css-image-sprites-generator-3.png" alt="Sprite CSS Image Generator 생성" />
<img src="/img/2015-09-13-online-css-image-sprites-generator-4.png" alt="Sprite CSS Image Generator 추출" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[-webkit-tap-highlight-color 사용하기]]></title>
    <link href="http://blog.asamaru.net/2012/09/26/webkit-tap-highlight-color/"/>
    <updated>2012-09-26T22:45:58+09:00</updated>
    <id>http://blog.asamaru.net/2012/09/26/webkit-tap-highlight-color</id>
    <content type="html"><![CDATA[<p>iOS와 안드로이드의 웹킷 기반 브라우저(사파리, 크롬 등)에서 링크를 터치하면 해당 위치를 표시하는 하이라이트가 나타난다.</p>

<p>이 하이라이트의 색상을 바꾸고 싶을 때 사용할 수 있는 것이 -webkit-tap-highlight-color 이다.</p>

<p>사용법은 아주 간단하다.</p>

<pre><code class="css">-webkit-tap-highlight-color: &lt;color&gt;;
</code></pre>

<p>예를들어 검은색 계열에 불투명도 30%를 지정하고 싶다면</p>

<pre><code class="css">* { -webkit-tap-highlight-color:rgba(0,0,0,0.3); }
</code></pre>

<p>으로 지정하면 된다. *는 모든 개체를 뜻하므로 특정 객체만 해제하려면 CSS selector를 변경하면 된다.</p>

<p>그런데 여기서 문제가 있다.</p>

<p>바로 안드로이드&hellip; 안드로이드는 현재 아이스크림 샌드위치(4.0.4) 기준으로 색상 지정을 지원하지 않는다. (젤리빈에서는 아직 테스트하지 못했다. 향후 OS 업데이트가 되면 확인 후 내용을 수정하겠다.)</p>

<p>다만 아예 숨기는 것은 가능하다. (다시말해 주황색의 하이라이트를 쓰거나 아예 숨기는 것만 가능하다.)</p>

<p>그렇다면 아예 숨기는 방법은</p>

<pre><code class="css">* { -webkit-tap-highlight-color: rgba(255,255,255,0); }
</code></pre>

<p>으로 하면 된다. 앞에 255,255,255는 의미가 없다. 마지막의 alpha값이 0으로 지정되면 된다. 다른 방법으로 rgba 대신 transparent를 지정하는 방법도 있으나 이건 iOS만 지원한다.</p>

<p>애플에서는 <a href="http://developer.apple.com/library/safari/#documentation/appleapplications/reference/safaricssref/articles/standardcssproperties.html">iOS는 1.1.1 버전</a>부터 지원하던 것을 안드로이드는 아직도 제대로 지원하지 않고 있는 것이다.</p>

<p>지난번에 포스팅 했던 <a href="/2012/09/22/i-like-apple/">나는 애플빠다</a>에서도 언급했던 개발 부분에서 다양한 안드로이드의 버그/부실함(?) 중에 하나다. (아래의 내용도 이어서&hellip;)</p>

<p><strong>더 큰 문제는 여기서 끝나지 않는다는 것이다.</strong></p>

<p>안드로이드 중 삼성 계열(현재 갤럭시 노트, 갤럭시 S2 등에서 문제가 있음)에서는 색상 변경이 안될 뿐 아니라 아예 숨겨지지도 않는다. 정말 개발자 입장에서 환장할 노릇이다.</p>

<p>이 부분이 그냥 단순히 예쁘지 않아서 숨기려는 것이 아니라 이 하이라이트에 다른 버그(하이라이트의 위치가 잘못 표기되는 결함)가 존재함에 따라 부득이하게 아예 숨겨버려야 하는 상황임에도 숨기지도 못하는 것이다.</p>

<p>난 정말 이래서 안드로이드가 싫다. 버그에 버그가 꼬리를 물고 나를 괴롭히기 때문이다. 게다가 많기까지 하다.</p>

<p>하지만 이대로 물러설 수 없는, 문제를 해결해야하는 개발자로써 다른 방법을 찾아서 하이라이트를 숨기는 것까지는 성공했다.</p>

<p>아.. 정말 미쳐 버릴 것 같은 상황은 링크 터치 하이라이트는 숨겼는데 인풋폼들의 하이라이트를 숨길 방법이 없다는 것&hellip; 이 부분은 결국 숨기지는 못하고 위치가 잘못 표기되는 버그를 다른 방법으로 해결했다. 마지막으로 버그를 개선하는 과정에서 또 다른 버그들을 발견했다는 것이 더욱 나를 슬프게 한다. 도대체 안드로이드 웹뷰의 버그는 어디까지 인가?</p>

<p>사실 얼마전까지만 해도 익스플로러의 버그들이 나를 괴롭혔는데.. 이때까지만 해도 익스플로러가 최악이라 생각했다. 하지만 세상에는 항상 더 강한 자가 있는법. 안드로이드 버그들이 최강이다. (문제는 개발자가 아니면, 겪어보지 않은 사람은 아무도 공감하지 못한다는 것이 나를 슬프게 한다.)</p>

<p>어쨌든 하이라이트 버그 회피에 대한 자세한 해결 과정은 복잡하므로 소스와 함께 <strike>따로 포스팅할 예정이다.</strike></p>

<p><a href="/2012/10/03/android-tap-highlight-layer/">&ldquo;안드로이드 tap highlight 레이어로 대체하기&rdquo;</a>로 별도 포스팅 한다.</p>
]]></content>
  </entry>
  
</feed>
