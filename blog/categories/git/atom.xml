<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | 이 세상에 하나는 남기고 가자]]></title>
  <link href="http://blog.asamaru.net/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://blog.asamaru.net/"/>
  <updated>2015-09-21T19:40:08+09:00</updated>
  <id>http://blog.asamaru.net/</id>
  <author>
    <name><![CDATA[유영재]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS에 gogs 설치하기]]></title>
    <link href="http://blog.asamaru.net/2015/09/21/how-to-install-gogs-on-centos/"/>
    <updated>2015-09-21T13:58:12+09:00</updated>
    <id>http://blog.asamaru.net/2015/09/21/how-to-install-gogs-on-centos</id>
    <content type="html"><![CDATA[<p>기존에는 SCM(source code management)으로 SVN을 주로 사용했다. 하지만 git를 사용하기 시작하면서 부터 git를 주로 사용하긴 했는데 주로 github를 통해서만 사용했다. 그런데 이번에 회사 프로젝트에서 필요한 부분이 있어 자체 호스팅을 하기 위해 기존에 봐뒀던 <a href="https://about.gitlab.com/">gitlab</a>을 쓰려다가 <a href="http://gogs.io/">gogs</a>를 알게 되면서 이걸 설치했다. gogs를 고른 이유는 간단하기 때문이다(<a href="https://blog.deimos.fr/2014/08/19/github-vs-gitlab-vs-stash-vs-gogs/">GitHub vs GitLab vs Stash vs Gogs</a>를 참고). 사실 아직 제대로 사용해보지 않아서 맞는지는 모르겠지만 gitlab은 ruby 기반이고 난 ruby 환경을 별로 좋아하지 않는다(내가 몰라서 그렇겠지만 이상하게 ruby 기반 프로젝트들은 설치/관리가 어려워서).</p>

<h2>git 설치</h2>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-git-on-centos-7">How To Install Git on CentOS 7</a>를 참고하자. 다른 곳을 참조해도 당연히 무방하다. 난 사실 예전에 yum으로 git가 설치되어 있던 상황으로 이 단계는 건너뛰었다(게다가 나의 centos는 6이다).</p>

<h2>gogs 설치</h2>

<p>기본적으로 설치방법은 <a href="http://gogs.io/docs/installation">gogs Installation</a>에 잘 설명되어 있다. 하지만 centos가 없다. 조금 더 자세히 보면 대신 <a href="http://gogs.io/docs/installation/install_from_packages.html">Install from packages</a>가 있다. 이곳의 설명/링크를 따라 <a href="https://packager.io/gh/pkgr/gogs">packager.io</a>에 가면 설치 방법을 안내받을 수 있다.</p>

<p>찾아가는 수고를 덜어주기 위해 필요한 부분을 옮겨왔다. 2015.09.21 기준이므로 최신 내용을 확인하려면 위의 안내대로 사이트를 방문해서 안내받자.</p>

<pre><code class="bash">sudo rpm --import https://rpm.packager.io/key
echo "[gogs]
name=Repository for pkgr/gogs application.
baseurl=https://rpm.packager.io/gh/pkgr/gogs/centos6/pkgr
enabled=1" | sudo tee /etc/yum.repos.d/gogs.repo
sudo yum install gogs
</code></pre>

<p>그냥 시키는대로 따라하면 설치는 간단히 완료된다. 단, gogs는 계정을 추가하는 부분이 있어 passwd, shadow 파일에 lock이 걸려있으면 아래와 같은 오류가 나며 제대로 설치가 되지 않는다.</p>

<pre><code class="bash">Error in PREIN scriptlet in rpm package gogs-0.6.9-1442807350.69b1d65.centos6.x86_64
useradd: /etc/passwd을(를) 열 수 없습니다
</code></pre>

<p>일단 풀어주고 설치하자.</p>

<pre><code class="bash">$ chattr -i /etc/passwd
$ chattr -i /etc/shadow
</code></pre>

<p>설치가 완료되면 다시 원상복구.</p>

<pre><code class="bash">$ chattr +i /etc/passwd
$ chattr +i /etc/shadow
</code></pre>

<p>설치가 정상적으로 되었다면 아래의 파일이 존재할 것이다.`</p>

<pre><code class="bash">ls /etc/init.d/gogs
la /home/gogs
</code></pre>

<h2>환경구성</h2>

<p>환경설정 파일은 <code>/etc/gogs/conf/app.ini</code>에 있다. 하지만 최초 웹페이지 접속시 자동으로 설치 화면이 뜬다. 게다가 이 파일을 열어보면 상단에 절대로 수정하지 말라고 되어 있다. 따라서 그냥 웹에서 설정하자. 기본적으로 port 3000이 세팅되어 있다.</p>

<p>본격적으로 세팅을 하기 전에 주의사항이 있다. gogs는 DB가 있어야 된다. 따라서 mysql 또는 postgresql이 미리 설치되어 있어야 한다. 이건 뭐 굳이 여기서 설명하지 않아도 다른 곳에 많으니 설치가 되어 있다고 가정하고 설명한다.</p>

<h3>DB 설정</h3>

<p>우선 DB를 세팅한다.</p>

<p>root 계정을 설정하는데 필요없다면 하지 않아도 된다.
<code>bash
mysqladmin -u root password "${MYSQL_PASSWORD}"
mysqladmin -u root --password="${MYSQL_PASSWORD}" password "${MYSQL_PASSWORD}"
</code></p>

<p>하지만 DB는 만들어 줘야 한다.
<code>bash
mysql -u root -p${MYSQL_PASSWORD} -e "CREATE DATABASE IF NOT EXISTS ${APP_NAME}; use ${APP_NAME}; set global storage_engine=INNODB;"
</code></p>

<pre><code class="bash">mysql -u root -p -e "CREATE DATABASE IF NOT EXISTS gogs; use gogs; set global storage_engine=INNODB;"
</code></pre>

<h3>WEB UI를 이용한 설정</h3>

<p>그럼 본격적으로 설정.</p>

<p><a href="http://userdomain:3000/">http://userdomain:3000/</a></p>

<p>필요한 사항을 설정한다. 대부분 보면 뭘 해야할지 알 수 있다. 오류가 나면 해당 안내에 따라 설정하면 된다. 추후 설정에 변경이 필요하면 <code>custom/conf/app.ini</code>파일을 만들어 필요한 설정만 override 하면 된다(나의 경우는 <code>/opt/gogs/custom/conf/app.ini</code> 파일이다. 이 파일 위치를 찾느라 한참을 헤멨다.). <a href="http://gogs.io/docs/installation/configuration_and_run.html">http://gogs.io/docs/installation/configuration_and_run.html</a> 를 참고</p>

<h3>도메인 연결</h3>

<p>이제는 도메인 연결을 할 차례이다.</p>

<p><strong>httpd 2 기준</strong>
<figure class='code notranslate'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> your.domain.com&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;IfModule</span> <span class="s">!mod_proxy.c</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">LoadModule</span> proxy_module modules/mod_proxy.so
</span><span class='line'>  <span class="nt">&lt;/IfModule&gt;</span>
</span><span class='line'>  <span class="nt">&lt;IfModule</span> <span class="s">!proxy_http_module.c</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">LoadModule</span> proxy_http_module modules/mod_proxy_http.so
</span><span class='line'>  <span class="nt">&lt;/IfModule&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nb">ProxyPass</span> / &lt;a href=<span class="s2">&quot;http://localhost:3000/&quot;</span>&gt;http://localhost:3000/&lt;/a&gt;
</span><span class='line'>  <span class="nb">ProxyPassReverse</span> / &lt;a href=<span class="s2">&quot;http://localhost:3000/&quot;</span>&gt;http://localhost:3000/&lt;/a&gt;
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>나의 경우는 apache를 사용중이라 위와 같이 설정하면 되나 nginx를 사용하는 경우라면 아래를 참고하자(packager.io에 안내된 내용이다.).</p>

<p><strong>nginx</strong>
<code>bash
cat &gt; /etc/nginx/sites-available/default &lt;&lt;EOF
server {
  listen          80;
  server_name     ${HOSTNAME};
  location / {
    proxy_pass      http://localhost:6000;
  }
}
EOF
sudo service nginx restart
</code></p>

<h3>서버 시작시 자동시작</h3>

<p>우선 서버 시작시 자동 시작 되도록 설정하자(필요하다면). 나의 경우 <code>setup</code>으로 확인해보니 자동으로 들어가 있지 않았다. 그래서 아래와 같이 시도했다.</p>

<pre><code class="bash"># 서버 부팅시 자동 시작
/sbin/chkconfig --add gogs
/sbin/chkconfig --level 35 gogs on
/sbin/chkconfig --list
</code></pre>

<p>첫줄부터 안된다. &ldquo;gogs 서비스는 chkconfig 를 지원하지 않습니다"라고 오류를 내보낸다. 말그대로 gogs는 chkconfig를 지원하지 않는다. 해서 아래와 같이 서버 시작시 스크립트를 실행하도록 넣어 버렸다.</p>

<pre><code class="bash">$ vi /etc/rc.d/rc.local

# 아래 줄을 추가
/etc/init.d/gogs start
</code></pre>
]]></content>
  </entry>
  
</feed>
