<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | 이 세상에 하나는 남기고 가자]]></title>
  <link href="http://blog.asamaru.net/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://blog.asamaru.net/"/>
  <updated>2015-12-02T21:57:11+09:00</updated>
  <id>http://blog.asamaru.net/</id>
  <author>
    <name><![CDATA[유영재]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[자체 설치한 gitlab-ce에서 gitlab.com으로 이전하다]]></title>
    <link href="http://blog.asamaru.net/2015/10/12/gitlab-ce-to-gitlab-dot-com/"/>
    <updated>2015-10-12T08:26:40+09:00</updated>
    <id>http://blog.asamaru.net/2015/10/12/gitlab-ce-to-gitlab-dot-com</id>
    <content type="html"><![CDATA[<p><a href="/2015/09/22/how-to-install-gitlib-on-centos/">CentOS에 Gitlab 설치하기</a>에 포스팅 했던 것 처럼 회사에서 git를 사용하기 위해 Gitlab CE 버전을 자체 서버에 설치해서 사용했다. 얼마 사용하지는 않았는데 속도가 너무 느린감이 있어서 옮기게 되었다. 사실 Gitlab을 설치한 서버는 사내에 다른 용도로 사용하던 서버로 dual lan이 설정되어 있는데 간혹 네트워크가 느려지는 문제가 있다. gateway를 지정해서 어느정도 문제를 해결해서 사용하긴 하지만 간혹 접속이 느려지는 경우가 있다. 사실 이 문제가 아니라 gitlab 자체가 많이 느린 느낌이다.</p>

<p>그래서 private project를 지원하는 <a href="https://bitbucket.org/">bitbucket</a>으로 옮겼다. 사실 github가 최고이긴하나 굳이 비용을 들여가면서 사용할 이유는 없기 때문이다(아직 다양한 기능을 활용하지 못하니). 그런데 여기서도 문제에 부딪혔다. 네트워크 속도가 느리다. 외국에서 서비스 하고 있다보니 어느 정도는 감안해야 하지만 그래도 너무 느렸다. clone 받는데 30kb/s 가 평균이었다. 그래서 어쩔 수 없이 다른 곳을 알아보았다.</p>

<p>그런데 <a href="https://gitlab.com/">gitlab</a>에서도 무료 호스팅을 해주고 있었다. 전에 gitlab을 다운 받을 때는 자세히 보지 않아서 몰랐지만 이미 제공되고 있었던 것이다. 게대가 bitbucket과 같은 제약 사항도 없다. 앞으로도 유료화하지 않을 것이라는 안내도 되어있다. 그래서 다시 옮겼다.</p>

<p>옮기는 과정은 굳이 설명하지 않아도 될것 같다. gitlab에서 기능을 잘 제공하고 있다. bitbucket에서 자동이전할 수 있는 기능을 제공한다(github, bitbucket, gitorious.org, google code, fogbugz, any repo by url을 제공한다).</p>

<p>결과는 나른 만족스럽다. 이전도 아주 단순하고 gitlab의 ce 버전 이상의 기능을 제공하며 속도도 그럭저럭 쓸만하다. 아주 쾌적한 속도는 아니지만 bitbucket에 비하면 아주 빠르다.</p>

<p>당분간은 gitlab을 사용하게 될 것 같다. 향후에 git의 다양한 기능을 제대로 활용하게되고 익숙해 진다면 github로 이전을 다시 할지는 모르겠으나 이 정도면 아직은 충분한 것 같다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git : 빈 디렉토리 추가하기]]></title>
    <link href="http://blog.asamaru.net/2015/09/25/git-tracking-empty-directories/"/>
    <updated>2015-09-25T10:47:30+09:00</updated>
    <id>http://blog.asamaru.net/2015/09/25/git-tracking-empty-directories</id>
    <content type="html"><![CDATA[<p>기존에는 SVN을 주로 사용하다가 최근 Git를 사용하기 시작했다. 맛보기를 시작한지는 조금 됐는데 본격적으로 사용하려고하니 아직 많이 미숙하다.</p>

<p>오늘은 작업을 하다가 빈 디렉토리를 추가하려고 하니 동작을 하지 않았다. SVN에서는 당연히 추가가 가능했는데 Git에서는 add로 추가해도 new file로 나타나지 않았다.</p>

<p>그래서 찾아보니 원래 Git는 빈 디렉토리는 Tracking 하지 않는다는 글들을 보게되었다. 이런... 불필요한 것을 관리하지 않는 것은 좋지만 log 디렉토리 등과 같이 빈 디렉토리가 추가되어야 할 상황이 있는데 어떻게 하지?</p>

<p>다행히 간단한 방법이 있었다. 사실 간단히 생각하면 아무 파일이나 넣어서 빈 디렉토리가 되지 않으면 되지 않는가? 그래서 많이 사용하는 방법이 .gitignore 또는 .keep 파일을 넣어서 Tracking하는 것이다.</p>

<p>해당 폴더에 가서 아래의 명령으로 .keep 파일을 만들고 add 하면 된다.
<code>bash
touch .keep
</code></p>

<p>한번에 모든 폴더를 검사해서 .keep 파일 넣기.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">git clean -nd <span class="p">|</span> sed s/<span class="s1">&#39;^Would remove &#39;</span>// <span class="p">|</span> xargs -I<span class="o">{}</span> touch <span class="s2">&quot;{}.keep&quot;</span>
</code></pre></div>
<p>log 폴더와 같이 정말 빈 디렉토리만 존재하고 내부에 생성되는 파일은 Tracking할 필요가 없을 때는 .gitignore 파일을 만들고 아래의 내용을 넣는다.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">#ignore all files in this dir...
*
#... except for this one.
!.gitignore
</code></pre></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS에 Gitlab 설치하기]]></title>
    <link href="http://blog.asamaru.net/2015/09/22/how-to-install-gitlib-on-centos/"/>
    <updated>2015-09-22T07:36:21+09:00</updated>
    <id>http://blog.asamaru.net/2015/09/22/how-to-install-gitlib-on-centos</id>
    <content type="html"><![CDATA[<p>지난 포스팅 <a href="http://blog.asamaru.net/2015/09/21/how-to-install-gogs-on-centos/">CentOS에 gogs 설치하기</a>에서 gitlab 대신 gogs를 설치했다. 심플해서 설치/사용이 쉬울 것 같았기 때문에 선택한 것이었다. 설치 후에 사용하면서 느낀 것은 설치도 그리 쉽지만은 않고 사용할 때는 기능이 조금 많이 빈약한 느낌이 든다. 사실 많은 기능을 필요로하는 것은 아닌데 아직은 초기 버전이라 그런지 정말 딱 기본 기능만 있는 느낌이다. 그래서 결국 Gitlab을 추가로 설치해서 비교 중이다.</p>

<h2 id="설치">설치</h2>

<p>Gitlab의 설치는 생각보다 훨씬 간단했다. 다른 사람들의 글의 보니 예전에 의존성 관련해서 설치할 것들이 많았다고 하는데 최근에는 패키지로 거의 한방에 설치가 가능했다.</p>

<p><a href="https://about.gitlab.com/downloads/">Gitlab 다운로드 페이지</a>에 가면 운영체제별로 안내가 잘되어 있다. 나는 이번에도 CentOS 6에 설치하므로 아래의 내용은 그 기준이다.</p>

<p>일단 그냥 시키는대로 주욱 명령을 실행한다. 그럼 그냥 설치 끝이다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo yum install curl openssh-server postfix cronie
sudo service postfix start
sudo chkconfig postfix on
sudo lokkit -s http -s ssh

curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh <span class="p">|</span> sudo bash
sudo yum install gitlab-ce
</code></pre></div>
<h2 id="설정-및-실행">설정 및 실행</h2>

<p>안내 페이지의 마지막에 보면 아래의 명령이 있다. 실행에 앞서 아래의 내용을 먼저 읽어보기를 권장한다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo gitlab-ctl reconfigure
</code></pre></div>
<p>이 명령은 초기설정 과정들을 진행하면서 시간이 조금 걸렸다. 처음엔 멈춰있는줄 알고 작업을 중지시키곤 했다. 그 후에 브라우저에서 접속해서 안내된 계정으로 접속한다. 사실 난 여기서 부터 조금 난해했다. 이미 해당 서버는 웹 서버가 돌고 있었으므로 어떻게 Gitlab 웹 서버가 동시에 뜰 수 있을까? 어딘가 분명 설정이 있을텐데...</p>

<p>그래서 찾아보니 <code>/etc/gitlab/gitlab.rb</code> 파일을 통해 설정이 가능했다. 우선 다른 설정은 다 무시하고 external_url 설정만 보자(실제로 이것만 활성화되어 있고 나머지는 다 주석처리 되어 있다). 이 설정을 통해 웹 서버가 사용할 도메인과 port를 지정할 수 있다.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">external_url</span> <span class="s1">&#39;http://your.domain:port&#39;</span>
</code></pre></div>
<p>이렇게 설정을 완료한 후 <code>sudo gitlab-ctl reconfigure</code> 명령을 실행하면 여기에 맞추어 서버를 알아서 구동해 준다(Gitlab은 내부적으로 웹 서버를 nginx를 사용한다).</p>

<p>이후에는 브라우저에서 접속해서 사용하면 된다.</p>

<h2 id="서버의-시작-종료">서버의 시작 / 종료</h2>

<p>아래의 명령들을 통해 서비스를 시작 / 종료할 수 있다. reconfigure는 설정을 반영해서 다시 설정하는 과정을 거치는 것으로 설정을 변경할 떄만 사용하면 된다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo gitlab-ctl start
</code></pre></div><div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo gitlab-ctl stop
</code></pre></div>
<h2 id="내장-웹서버-nginx-를-사용하지-않고-외부-웹서버에-연결하기">내장 웹서버(nginx)를 사용하지 않고 외부 웹서버에 연결하기</h2>

<p>나의 경우는 이미 웹서버가 설치된 상황이었기 때문에 Gitlab 서버를 동시에 사용하려면 port를 따로 지정해서 사용하는 방법 밖에 없었다. 하지만 그렇게 사용하기는 보기 싫어서 웹 서버를 따로 구성하기로 했다.</p>

<p>자세히 본 것은 아니라서 정확하진 않지만 Gitlab은 내부적으로 <a href="http://unicorn.bogomips.org/">unicorn</a>과 nginx의 조합으로 이뤄져 있고 기능적 처리는 unicon과 연결된다. unicon의 기본 port가 8080으로 설정되어 있기 때문에 이 부분만 연결해주면 외부 웹서버로 연결하는 것도 당연히 가능하다.</p>

<p>아래는 아파치를 사용하는 상황에서의 설정 방법이다. 내용중 LimitRequestBody를 잊지말고 해주는 것이 좋다. 아니면 push에서 오류를 만날 수 있다.</p>
<div class="highlight"><pre><code class="language-apacheconf" data-lang="apacheconf"><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
  <span class="nb">ServerName</span> your.domain
  <span class="nb">ServerSignature</span> <span class="k">Off</span>

  <span class="nb">ProxyPreserveHost</span> <span class="k">On</span>

  <span class="nt">&lt;IfModule</span> <span class="s">!mod_proxy.c</span><span class="nt">&gt;</span>
    <span class="nb">LoadModule</span> proxy_module modules/mod_proxy.so
  <span class="nt">&lt;/IfModule&gt;</span>
  <span class="nt">&lt;IfModule</span> <span class="s">!proxy_http_module.c</span><span class="nt">&gt;</span>
    <span class="nb">LoadModule</span> proxy_http_module modules/mod_proxy_http.so
  <span class="nt">&lt;/IfModule&gt;</span>

  <span class="nt">&lt;Location</span> <span class="s">/</span><span class="nt">&gt;</span>
    <span class="nb">Order</span> deny,allow
    <span class="nb">Allow</span> from <span class="k">all</span>
    <span class="c"># push 전송시 용량 문제를 막기 위해 지정 : error: RPC failed; result=22, HTTP code = 413</span>
    <span class="nb">LimitRequestBody</span> <span class="m">52428800</span>

    <span class="nb">ProxyPassReverse</span> http://127.0.0.1:8080
  <span class="nt">&lt;/Location&gt;</span>

  <span class="nb">RewriteEngine</span> <span class="k">on</span>
  <span class="nb">RewriteCond</span> %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f
  <span class="nb">RewriteRule</span> .* http://127.0.0.1:8080%{REQUEST_URI} [P,QSA]

  <span class="c"># needed for downloading attachments</span>
  <span class="nb">DocumentRoot</span> <span class="sx">/opt/gitlab/embedded/service/gitlab-rails/public</span>
<span class="nt">&lt;/VirtualHost&gt;</span>
</code></pre></div>
<p>그리고 <code>/etc/gitlab/gitlab.rb</code>에 아래의 내용을 추가한다.
<code>ruby
nginx[&#39;enable&#39;] = false
</code></p>

<p>그리고 재설정.
<code>bash
sudo gitlab-ctl reconfigure
</code></p>

<h3 id="예시">예시</h3>

<p>내가 설정한 설정을 예로 보자면 아래와 같다.
<code>ruby
external_url &#39;http://git.asamaru.net&#39;
nginx[&#39;enable&#39;] = false
</code></p>

<p>이렇게 설정하면 위 주소로 접속시 gitlab 화면을 볼 수 있다.</p>

<h2 id="첨언">첨언</h2>

<p>이건 gitlab과 직접적인 관련이 있는 내용은 아니나 도움이 될까해서 적어둔다. gogs나 gitlab 모두 ssh 주소와 http 주소를 제공한다. 별도 설정을 하지 않는한 ssh 주소를 사용할 경우에는 shell 계정으로 push를 하게되고 http 주소를 사용할 경우는 해당 클라이언트(사용자 컴퓨터)의 git 설정에 있는 사용자명으로 push를 해준다. 따라서 이 사용자명을 바꾸고 싶다면 아래의 명령으로 수정할 수 있다. 단, OSX 기준이다. 아마도 linux는 같을 것이라고 보는데... 윈도우는 사용하질 않아서 잘 모르겠다. 윈도우도 git 사용자명 변경에 관련된 검색을 하면 많이 나올테니 쉽게 해결하리라 본다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">git config --global user.name <span class="s2">&quot;사용자명&quot;</span>
git config --global user.email <span class="s2">&quot;사용자 이메일&quot;</span>
</code></pre></div>
<p>이 사용자명(특히 이메일)을 gitlab에 가입된 user와 맞춰주면 변경사항 기록시 서로 연결된다. 따라서 그냥 설정할 것이 아니라 Gitlab 설치와 기본 설정 후 사용할 계정으로 가입 후 그 계정에 맞게 맞추는 것을 권장한다. 나의 경우엔 이메일만 연관이 있고 user는 달라도 상관은 없었다(정확한 기준은 확인해 보지 못했고 실수로 다르게 넣었는데 이메일이 같으니 알아서 연결해 주더라).
사실 Gitlab에서 프로젝트를 생성하고 최초 commit/push 전에 나오는 안내화면에 관련 설정 부분을 안내해 주고 있다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS에 gogs 설치하기]]></title>
    <link href="http://blog.asamaru.net/2015/09/21/how-to-install-gogs-on-centos/"/>
    <updated>2015-09-21T13:58:12+09:00</updated>
    <id>http://blog.asamaru.net/2015/09/21/how-to-install-gogs-on-centos</id>
    <content type="html"><![CDATA[<p>기존에는 SCM(source code management)으로 SVN을 주로 사용했다. 하지만 git를 사용하기 시작하면서 부터 git를 주로 사용하긴 했는데 주로 github를 통해서만 사용했다. 그런데 이번에 회사 프로젝트에서 필요한 부분이 있어 자체 호스팅을 하기 위해 기존에 봐뒀던 <a href="https://about.gitlab.com/">gitlab</a>을 쓰려다가 <a href="http://gogs.io/">gogs</a>를 알게 되면서 이걸 설치했다. gogs를 고른 이유는 간단하기 때문이다(<a href="https://blog.deimos.fr/2014/08/19/github-vs-gitlab-vs-stash-vs-gogs/">GitHub vs GitLab vs Stash vs Gogs</a>를 참고). 사실 아직 제대로 사용해보지 않아서 맞는지는 모르겠지만 gitlab은 ruby 기반이고 난 ruby 환경을 별로 좋아하지 않는다(내가 몰라서 그렇겠지만 이상하게 ruby 기반 프로젝트들은 설치/관리가 어려워서).</p>

<h2 id="git-설치">git 설치</h2>

<p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-git-on-centos-7">How To Install Git on CentOS 7</a>를 참고하자. 다른 곳을 참조해도 당연히 무방하다. 난 사실 예전에 yum으로 git가 설치되어 있던 상황으로 이 단계는 건너뛰었다(게다가 나의 centos는 6이다).</p>

<h2 id="gogs-설치">gogs 설치</h2>

<p>기본적으로 설치방법은 <a href="http://gogs.io/docs/installation">gogs Installation</a>에 잘 설명되어 있다. 하지만 centos가 없다. 조금 더 자세히 보면 대신 <a href="http://gogs.io/docs/installation/install_from_packages.html">Install from packages</a>가 있다. 이곳의 설명/링크를 따라 <a href="https://packager.io/gh/pkgr/gogs">packager.io</a>에 가면 설치 방법을 안내받을 수 있다.</p>

<p>찾아가는 수고를 덜어주기 위해 필요한 부분을 옮겨왔다. 2015.09.21 기준이므로 최신 내용을 확인하려면 위의 안내대로 사이트를 방문해서 안내받자.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo rpm --import https://rpm.packager.io/key
<span class="nb">echo</span> <span class="s2">&quot;[gogs]</span>
<span class="s2">name=Repository for pkgr/gogs application.</span>
<span class="s2">baseurl=https://rpm.packager.io/gh/pkgr/gogs/centos6/pkgr</span>
<span class="s2">enabled=1&quot;</span> <span class="p">|</span> sudo tee /etc/yum.repos.d/gogs.repo
sudo yum install gogs
</code></pre></div>
<p>그냥 시키는대로 따라하면 설치는 간단히 완료된다. 단, gogs는 계정을 추가하는 부분이 있어 passwd, shadow 파일에 lock이 걸려있으면 아래와 같은 오류가 나며 제대로 설치가 되지 않는다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">Error in PREIN scriptlet in rpm package gogs-0.6.9-1442807350.69b1d65.centos6.x86_64
useradd: /etc/passwd을<span class="o">(</span>를<span class="o">)</span> 열 수 없습니다
</code></pre></div>
<p>일단 풀어주고 설치하자.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>chattr -i /etc/passwd
<span class="nv">$ </span>chattr -i /etc/shadow
</code></pre></div>
<p>설치가 완료되면 다시 원상복구.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>chattr +i /etc/passwd
<span class="nv">$ </span>chattr +i /etc/shadow
</code></pre></div>
<p>설치가 정상적으로 되었다면 아래의 파일이 존재할 것이다.`</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">ls /etc/init.d/gogs
la /home/gogs
</code></pre></div>
<p>그리고 나중에 ssh를 통한 clone을 사용할 예정이라면 설치 과정에서 추가된 gogs 계정의 비밀번호를 지정해 두어야 한다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>passwd gogs
</code></pre></div>
<h2 id="환경구성">환경구성</h2>

<p>환경설정 파일은 <code>/etc/gogs/conf/app.ini</code>에 있다. 하지만 최초 웹페이지 접속시 자동으로 설치 화면이 뜬다. 게다가 이 파일을 열어보면 상단에 절대로 수정하지 말라고 되어 있다. 따라서 그냥 웹에서 설정하자.</p>

<p>본격적으로 세팅을 하기 전에 주의사항이 있다. gogs는 DB가 있어야 된다. 따라서 mysql 또는 postgresql이 미리 설치되어 있어야 한다. 이건 뭐 굳이 여기서 설명하지 않아도 설치방법이 다른 곳에 많으니 설치가 되어 있다고 가정하고 설명한다.</p>

<h3 id="db-설정">DB 설정</h3>

<p>우선 DB를 세팅한다.</p>

<p>root 계정을 설정하는데 필요없다면 하지 않아도 된다. 기존에 DB가 이미 설치되어 있다면 당연히 이 부분이 처리가 되어 있을테니 하지 말자.
<code>bash
mysqladmin -u root password &quot;${MYSQL_PASSWORD}&quot;
mysqladmin -u root --password=&quot;${MYSQL_PASSWORD}&quot; password &quot;${MYSQL_PASSWORD}&quot;
</code></p>

<p>하지만 DB는 만들어 줘야 한다.
<code>bash
mysql -u root -p${MYSQL_PASSWORD} -e &quot;CREATE DATABASE IF NOT EXISTS ${APP_NAME}; use ${APP_NAME}; set global storage_engine=INNODB;&quot;
</code></p>

<p><strong>예시</strong>
<code>bash
mysql -u root -p -e &quot;CREATE DATABASE IF NOT EXISTS gogs; use gogs; set global storage_engine=INNODB;&quot;
</code></p>

<h3 id="web-ui를-이용한-설정">WEB UI를 이용한 설정</h3>

<p>그럼 본격적으로 설정을 시작하자.</p>

<p><a href="http://userdomain:3000/">http://userdomain:3000/</a></p>

<p>필요한 사항을 설정한다. 대부분 보면 뭘 해야할지 알 수 있다. 오류가 나면 해당 안내에 따라 설정하면 된다. 추후 설정에 변경이 필요하면 <code>custom/conf/app.ini</code>파일에 필요한 설정만 override 하면 된다(나의 경우는 <code>/opt/gogs/custom/conf/app.ini</code> 파일이다. 이 파일 위치를 찾느라 한참을 헤멨다.). <a href="http://gogs.io/docs/installation/configuration_and_run.html">http://gogs.io/docs/installation/configuration_and_run.html</a> 를 참고</p>

<h3 id="도메인-연결">도메인 연결</h3>

<p>이제는 도메인 연결을 할 차례이다.</p>

<p><strong>httpd 2 기준</strong>
<figure class='code notranslate'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='apacheconf'><span class='line'><span class="nt">&lt;VirtualHost</span> <span class="s">*:80</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nb">ServerName</span> your.domain.com&lt;/p&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;IfModule</span> <span class="s">!mod_proxy.c</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">LoadModule</span> proxy_module modules/mod_proxy.so
</span><span class='line'>  <span class="nt">&lt;/IfModule&gt;</span>
</span><span class='line'>  <span class="nt">&lt;IfModule</span> <span class="s">!proxy_http_module.c</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nb">LoadModule</span> proxy_http_module modules/mod_proxy_http.so
</span><span class='line'>  <span class="nt">&lt;/IfModule&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="nb">ProxyPass</span> / &lt;a href=<span class="s2">&quot;http://localhost:3000/&quot;</span>&gt;http://localhost:3000/&lt;/a&gt;
</span><span class='line'>  <span class="nb">ProxyPassReverse</span> / &lt;a href=<span class="s2">&quot;http://localhost:3000/&quot;</span>&gt;http://localhost:3000/&lt;/a&gt;
</span><span class='line'><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>나의 경우는 apache를 사용중이라 위와 같이 설정하면 되나 nginx를 사용하는 경우라면 아래를 참고하자(packager.io에 안내된 내용이다.).</p>

<p><strong>nginx</strong>
<code>bash
cat &gt; /etc/nginx/sites-available/default &lt;&lt;EOF
server {
  listen          80;
  server_name     ${HOSTNAME};
  location / {
    proxy_pass      http://localhost:6000;
  }
}
EOF
sudo service nginx restart
</code></p>

<h3 id="서버-시작시-자동시작">서버 시작시 자동시작</h3>

<p>우선 서버 시작시 자동 시작 되도록 설정하자(필요하다면). 나의 경우 <code>setup</code>으로 확인해보니 자동으로 들어가 있지 않았다. 그래서 아래와 같이 시도했다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># 서버 부팅시 자동 시작</span>
/sbin/chkconfig --add gogs
/sbin/chkconfig --level <span class="m">35</span> gogs on
/sbin/chkconfig --list
</code></pre></div>
<p>첫줄부터 안된다. &quot;gogs 서비스는 chkconfig 를 지원하지 않습니다&quot;라고 오류를 내보낸다. 말그대로 gogs는 chkconfig를 지원하지 않는다. 해서 아래와 같이 서버 시작시 스크립트를 실행하도록 넣어 버렸다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>vi /etc/rc.d/rc.local

<span class="c"># 아래 줄을 추가</span>
/etc/init.d/gogs start
</code></pre></div>
<h3 id="설정시-유의-사항">설정시 유의 사항</h3>

<p>설치는 위의 과정들을 통해 완료되었다. 하지만 제대로 써보려면 설정을 환경에 맞게 몇가지 조정하는 것이 좋다.</p>

<ul>
<li>ROOT 설정
<code>
[repository]
ROOT = /home/gogs
</code>
기본적으로 ROOT 부분은 <code>ROOT = /home/gogs/gogs-repositories</code>로 되어 있지만 위 처럼 gogs-repositories 부분을 제거해 주는 것이 좋다. 나중에 레포지토리를 생성하게되면 clone 주소를 알려준다. 이때 http와 ssh 주소 두가지를 알려주는데 이때 ssh를 사용하게 되면 주소 부분이 맞지 않게된다. 예를들어 <a href="mailto:gogs@git.asamaru.net">gogs@git.asamaru.net</a>:root/test.git 이라는 주소로 생성된 경우 아래와 같이 clone을 시도할 것이다.</li>
</ul>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">git clone gogs@git.corez.kr:root/test.git
</code></pre></div>
<p>하지만 아래와 같은 오류를 내며 정상적으로 clone이 되지 않는다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">fatal: <span class="s1">&#39;root/test.git&#39;</span> does not appear to be a git repository
fatal: Could not <span class="nb">read </span>from remote repository.

Please make sure you have the correct access rights
and the repository exists.
</code></pre></div>
<p>다시 아래와 같이 해보면 정상적으로 clone 된다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">git clone gogs@git.corez.kr:gogs-repositories/root/test.git
</code></pre></div>
<p>ssh 주소를 사용하는 경우는 계정도 gogs를 사용하며 경로도 gogs의 home에서부터의 경로를 찾기 때문에 &quot;gogs-repositories/&quot;를 추가해 줘야하는 것이다. 이 주소를 일일이 넣는 것이 귀찮으므로 위에 설명한 것처럼 ROOT 경로를 변경해 버리는 것이 편하다. ssh 에서 home 경로를 바꿀 수도 있겠지만 이 방법이 더 나을 것으로 본다.
ROOT를 변경한 후 재시작하고 레포지토리를 만들면 아래의 예시처럼(gogs에서 안내되는 주소) clone을 받을 수 있다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">git clone gogs@git.corez.kr:root/test.git
</code></pre></div>]]></content>
  </entry>
  
</feed>
