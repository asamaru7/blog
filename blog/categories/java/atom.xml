<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | 이 세상에 하나는 남기고 가자]]></title>
  <link href="http://blog.asamaru.net/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://blog.asamaru.net/"/>
  <updated>2015-11-05T21:28:38+09:00</updated>
  <id>http://blog.asamaru.net/</id>
  <author>
    <name><![CDATA[유영재]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android에서 runOnUiThread 작업이 종료 될 때까지 대기하기]]></title>
    <link href="http://blog.asamaru.net/2015/11/03/how-to-wait-for-android-runonuithread-to-be-finished/"/>
    <updated>2015-11-03T15:04:46+09:00</updated>
    <id>http://blog.asamaru.net/2015/11/03/how-to-wait-for-android-runonuithread-to-be-finished</id>
    <content type="html"><![CDATA[<p>아래에서 설명하고자 하는 내용을 뭐라고 표현 해야할지 몰라서 &quot;Android에서 runOnUiThread 작업이 종료 될 때까지 대기하기&quot;라고 글 제목을 정했다.
내용을 요약하자면 thread에서 wait()과 notify()를 이용해서 runOnUiThread 작업이 종료될 때까지 대기하도록 하는 것이다. 쉽게 말해서 runOnUiThread는 main thread에서 처리되므로 비동기로 처리되게 되는데 필요한 작업이 완료되기 전까지 다른 처리를 대기시키는 것이다. 이렇게 설명하는 것도 정확한 설명은 아니다. 그냥 내가 하고자 했던 의도를 설명하고자 한 것이다. 따라서 정확한 의미와는 차이가 있다.</p>

<p>설명하기 어려워 이리저리 이야기 했는데 그냥 내가 하고자 했던 상황을 설명하는게 이해에 도움이 될 것 같다.</p>

<blockquote>
<p>PagerAdapter를 사용하는 상황에서 <code>java.lang.IllegalStateException: The application&#39;s PagerAdapter changed the adapter&#39;s contents without calling PagerAdapter#notifyDataSetChanged!</code> 오류가 발생한다. 이 문제가 발생하는 원인은 notifyDataSetChanged 호출 후 적용되기 전에 PagerAdapter의 데이터가 변경되었기 때문이다.</p>
</blockquote>

<p>보통의 경우 위의 상황이 자주 발생하지는 않는다. 나의 경우엔 PagerAdapter의 데이터가 UI에서 버튼 터치에 의해서 변경되는 상황이다. 상황을 조금 더 자세히 설명해야 할 것 같다.</p>

<ul>
<li>화면 상에 버튼 A, B가 있다.</li>
<li>A 버튼을 누르면 A 데이터 목록을 서버에서 가져와 PagerAdapter에 적용한다.</li>
<li><p>B 버튼을 누르면 B 데이터 목록을 서버에서 가져와 PagerAdapter에 적용한다.</p></li>
<li><p>A 버튼이 눌려진 후 서버에서 데이터를 가져와 PagerAdapter에 반영하고 notifyDataSetChanged()를 runOnUiThread 내부에서 호출했다. runOnUiThread 내부에서 호출하는 이유는 데이터의 변경시 UI가 변경되는 부분들이 있어서 main thread 오류를 막기 위해서 이다.</p></li>
<li><p>notifyDataSetChanged()가 적용되기 전에 버튼 B가 눌려지고 데이터를 가져와 PagerAdapter에 반영되었다.</p></li>
<li><p>notifyDataSetChanged()가 적용되면서 데이터의 변경을 감지하고 <code>java.lang.IllegalStateException: The application&#39;s PagerAdapter changed the adapter&#39;s contents without calling PagerAdapter#notifyDataSetChanged!</code> 오류가 발생한다.</p></li>
</ul>

<p>설명이 되었을런지 모르겠다. 앞서 말한 것과 같이 자주 발생하는 상황은 아니나 A, B 버튼을 번갈아 빠르게 터치하면 오류를 재현할 수 있다. 소스 코드를 올리면 더 이해가 쉬울 수 있는데 작업중인 소스들이 모두 섞여 있어 구분해서 남기는게 힘들어서 말로 설명했다.</p>

<p>일단 기존 소스와 해결된 소스부터 보자. 당연히 동작하는 소스는 아니다. 하지만 무엇을 하고 있는지를 확인하는데는 충분할 것으로 본다.</p>

<p><strong>오류가 발생하던 소스</strong>
<figure class='code notranslate'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PreviewPagerAdapterBase</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">DataItem</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">PagerAdapter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">notifyDataSetChangedRunnalbe</span> <span class="o">=</span> <span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setItems</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">items</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;language-text&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">lang</span><span class="o">=</span><span class="s">&quot;text&quot;</span><span class="o">&gt;</span><span class="n">Helper</span><span class="o">.</span><span class="na">runOnUiThread</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">notifyDataSetChanged</span><span class="o">();</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><strong>수정된 소스</strong>
<figure class='code notranslate'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PreviewPagerAdapterBase</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">DataItem</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="n">PagerAdapter</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="kd">final</span> <span class="n">Runnable</span> <span class="n">notifyDataSetChangedRunnalbe</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">notifyDataSetChanged</span><span class="o">();</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">this</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">setItems</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">items</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">setItems</span><span class="o">(</span><span class="n">items</span><span class="o">);&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;highlight&quot;</span><span class="o">&gt;&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span> <span class="n">class</span><span class="o">=</span><span class="s">&quot;language-text&quot;</span> <span class="n">data</span><span class="o">-</span><span class="n">lang</span><span class="o">=</span><span class="s">&quot;text&quot;</span><span class="o">&gt;</span><span class="kd">synchronized</span> <span class="o">(</span><span class="n">notifyDataSetChangedRunnalbe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Helper</span><span class="o">.</span><span class="na">runOnUiThread</span><span class="o">(</span><span class="n">notifyDataSetChangedRunnalbe</span><span class="o">);</span>
</span><span class='line'>  <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">notifyDataSetChangedRunnalbe</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">return</span> <span class="n">hasFirstItem</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>중요한 부분은 notifyDataSetChangedRunnalbe로 synchronized 처리하고 Runnable을 wait()한 다음 처리가 완료된 후 notify() 하는 것이다. 그리고 wait() 호출시 try 처리하고 있는데 InterruptedException이 발생할 수 있기 때문이다. 실제로 위에서 설명한 오류가 발생하는 상황에서는 InterruptedException이 대신 발생하는 것을 확인했다. 하지만 무시되어도 되는 상황이며 catch되었기 때문에 앱이 죽는 것은 막을 수 있다.</p>

<p>wait()와 notify()에 대해서는 <a href="http://warmz.tistory.com/370">Thread(쓰레드) - 동기화(Synchronized) / wait()와 notify()</a>를 참고하면 된다.</p>

<p>사실 위 방법은 <a href="http://stackoverflow.com/a/5996961">how to wait for Android runOnUiThread to be finished?</a>에서 참고한 것이다. 이 글을 보면 이 방법 외에도 여러가지 답변이 있다.</p>

<p>이 글은 정확한 이해를 하고 쓴 글이 아니므로 여러가지 문제가 있을 수 있다. 하지만 내가 원하는 문제에 대한 해결법이 되었기 때문에 기록성으로 글을 남겨둔다.
결론적으로 notifyDataSetChanged()를 명확히 적용하고 넘어 가야하는 상황에서는 위 방법이 도움이 될 수 있다. 그 외의 경우엔 UIThread의 작업을 굳이 sync 할 필요가 떠오르진 않는다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java setChunkedStreamingMode를 php-fpm 서버와 연결할 때 발생하는 문제]]></title>
    <link href="http://blog.asamaru.net/2015/10/29/java-setchunkedstreamingmode-with-php-fpm-problem/"/>
    <updated>2015-10-29T12:22:02+09:00</updated>
    <id>http://blog.asamaru.net/2015/10/29/java-setchunkedstreamingmode-with-php-fpm-problem</id>
    <content type="html"><![CDATA[<p><a href="/2015/10/01/android-acra-please-configure-buildconfigclass-in-your-acra-config/">ACRA : Please configure &#39;buildConfigClass&#39; in your ACRA config 오류</a>에서  http 접속시 <code>setChunkedStreamingMode</code>를 사용하면 request의 body가 수신되지 못하는 문제를 언급하고 Github에 <a href="https://github.com/ACRA/acra/issues/310#issuecomment-151826809">issue로 등록</a> 했었다. 그런데 어제 ACRA로 부터 답변을 받았다.
간단히 요약하자면 &quot;일반적인 상황에 대한 문제가 아니므로 수정 해 줄 수 없다.&quot;라는 것이다. 게다가 자신의 생각을 바꾸려면 정당한 근거를 제시하란다. 안그래도 영어가 안되서 겨우 report했는데 근거를 달라니...
현재로써는 ACRA를 대체할만한 라이브러리를 찾지 못했기 때문에 어떻게든 방법을 찾아보려고 노력했다. 우선 proxy 상황에서만 문제가 되므로 apache에서 해결 방법이 있을 것이라고 생각하고 자료를 찾아봤다. 이와 관련된 문제와 해결 방법은 무수히 많았지만 정작 해결이 되는 자료는 찾을 수 없었다. 찾았던 정보 중에 도움이 될만한  것들을 링크하고 싶지만 다시 찾으려니 못찾겠다. 구글에서 &quot;http chunked proxy&quot;와 같은 키워드들로 검색하면 무지하게 나온다. 그중 그나마 기억에 남아있는 것 몇가지만 아래에 언급하려고 한다.</p>

<p>일단 nginx를 web 서버로 사용하는 경우라면 <a href="http://serverfault.com/a/408131">Enabling Chunked Uploading in Nginx</a>를 참고하면 해결이 될지도 모르겠다. nginx는 현재 사용을 검토중이고 서비스 서버에 적용되지 않은 상황이라 적용해서 테스트해보지는 못했다.</p>

<p>내가 사용하는 apache에 대해서는 해결 방법을 찾지는 못했지만 관련된 bug report가 된 것이 있었다. <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=55475">mod_proxy breaks HTTP chunked transfer coding</a>. 사실 정확히 동일한 문제는 아니지만 mod_proxy와 관련이 있어서 내용을 봤다. 2.4.8버전에 수정되었다는 말이 있어서 apache도 버전업해서 확인 했지만 도움이 되지는 못했다. php-fpm을 사용하면서 mod_proxy_fcgi를 사용하고 있는데 여기에 문제인 것으로 추정만 하고 있다.</p>

<p><a href="https://gnunet.org/book/export/html/1932">Configuring HTTP(S) reverse proxy functionality using Apache or nginx</a>라는 글도 있으나 역시 도움이 되지 않았다.</p>

<p>그 외에도 무수히 많은 자료를 봤지만 대부분 SenEnv를 사용해서 인자를 넘겨주는 방법들을 제시했는데 모두 해결에 도움이 되지 않았다. 결국 내 서버를 수정하는 것은 방법이 없다는 결론을 내리고 ACRA에 다시 요청했다.</p>

<p>요청 내용은 이렇다.</p>

<blockquote>
<p><code>setChunkedStreamingMode</code>를 사용하는 것은 proxy 상황에서 정상적인 동작을 하지 않는 웹 서버들이 많으니 <code>setFixedLengthStreamingMode</code> 함수로 교체하는 것이 어떠냐?</p>
</blockquote>

<p>사실 ACRA의 경우는 소스를 보면 굳이 <code>setChunkedStreamingMode</code>를 사용할 필요는 없다. 전송할 내용을 미리 다 생성해 놓았기 때문에 길이를 알 수 있는 상황이기 때문이다. 따라서 <code>setFixedLengthStreamingMode</code>를 사용해도 되며 실제로 테스트 결과 정상적으로 값을 받을 수 있었다. 가급적 ACRA를 custom해서 사용하는 것은 피하고 싶으므로 이 요구를 ACRA 측에서 받아들여 줬으면 한다.</p>

<p>마지막으로 <code>setChunkedStreamingMode</code>와 <code>setFixedLengthStreamingMode</code>에 관련된 내용은 <a href="https://byunsooblog.wordpress.com/2013/03/26/urlconnection-httpurlconnection/">URLConnection &amp; HttpURLConnection</a>에서 <code>HttpURLconnection</code>를 설명하는 과정에 나와있다.</p>

<p>내용을 일부를 발췌하여 아래에 추가해 둔다.</p>

<blockquote>
<p><strong>Posting Content</strong></p>

<p>데이터를 웹 서버로 보내기 위해, setDoOutput(true)를 써서 커넥션을 구성한다.</p>

<p>setFixedLengthStreamingMode(int),setChunkedStreamingMode(int)</p>

<ul>
<li>좋은 성능을 위해서, 이 둘 중 하나의 함수를 불러야 한다.</li>
<li>setFixedLengthStreamingMode() : body의 길이를 미리 알고있을때 쓴다.</li>
<li>setChunkedStreamingMode(int) : body의 길이를 모를 때 쓴다.</li>
<li>안그러면 HttpURLConnection은 전송되기전에 완성된 request body를 메모리 buffer에 넣도록 강요된다.

<ul>
<li>이건 heap을 낭비하는 일이고 지연시간을 늘리는 일이다.</li>
</ul></li>
</ul>
</blockquote>

<p>첨언 : 방금 ACRA 측의 답변을 받았다. 다행히 나의 요구사항을 수용해서 패치를 완료했단다. <a href="https://github.com/ACRA/acra/pull/318">Configuring request length instead of using chunked streaming mode.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java reflection을 사용해서 private static final field 변경하기]]></title>
    <link href="http://blog.asamaru.net/2015/09/01/change-private-static-final-field-using-java-reflection/"/>
    <updated>2015-09-01T22:29:00+09:00</updated>
    <id>http://blog.asamaru.net/2015/09/01/change-private-static-final-field-using-java-reflection</id>
    <content type="html"><![CDATA[<p>java에서 final로 지정한 것은 당연히 변경을 하지 말라는 뜻이다.
하지만 간혹 작업을 하다보면 그 값을 수정하고 싶을 때가 있다. 이번에도 안드로이드 작업을 하던 중 중요한 값도 아닐뿐아니라 유연성을 위해 값 변경이 필요한 값을 상수라는 이유만으로 final을 붙여 놓은 필드가 있었다.(아마도 자바 개발자들의 습관인 것 같다.)</p>

<p>그래서 관련된 내용을 검색하던 중 해답을 알려주는 내용을 찾았다.</p>

<p><a href="http://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection">http://stackoverflow.com/questions/3301635/change-private-static-final-field-using-java-reflection</a></p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">static</span> <span class="kt">void</span> <span class="nf">setFinalStatic</span><span class="o">(</span><span class="n">Field</span> <span class="n">field</span><span class="o">,</span> <span class="n">Object</span> <span class="n">newValue</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
  <span class="n">field</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>

  <span class="n">Field</span> <span class="n">modifiersField</span> <span class="o">=</span> <span class="n">Field</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getDeclaredField</span><span class="o">(</span><span class="s">&quot;modifiers&quot;</span><span class="o">);</span>
  <span class="n">modifiersField</span><span class="o">.</span><span class="na">setAccessible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
  <span class="n">modifiersField</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="n">field</span><span class="o">,</span> <span class="n">field</span><span class="o">.</span><span class="na">getModifiers</span><span class="o">()</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">Modifier</span><span class="o">.</span><span class="na">FINAL</span><span class="o">);</span>

  <span class="n">field</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="n">newValue</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div>
<p>상세한 내용은 원본 주소에 가서 보면 친절히 설명되어 있다. 사실 코드를 굳이 해석할 이유도 없고 그냥 저 함수를 써서 원하는 처리를 하면 그만이다.</p>

<p>이번 작업과 상관은 없지만 개인적으로 java는 정말 맘에 들지 않는다. 개인적으로 느끼기에 너무 고지식한 언어 같다. 이렇게 얘기하면 java 추종자들이 난리나겠지만 길게 얘기할 맘은 없다. 난 Objective-C가 좋아.</p>
]]></content>
  </entry>
  
</feed>
