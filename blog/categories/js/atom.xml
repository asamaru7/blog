<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: js | 이 세상에 하나는 남기고 가자]]></title>
  <link href="http://blog.asamaru.net/blog/categories/js/atom.xml" rel="self"/>
  <link href="http://blog.asamaru.net/"/>
  <updated>2015-09-14T22:15:47+09:00</updated>
  <id>http://blog.asamaru.net/</id>
  <author>
    <name><![CDATA[유영재]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[두지점(WGS84 좌표)간 km 거리 계산 함수(php, mysql, javascript)]]></title>
    <link href="http://blog.asamaru.net/2015/09/14/calculate-distance-between-two-wgs84-points/"/>
    <updated>2015-09-14T14:52:05+09:00</updated>
    <id>http://blog.asamaru.net/2015/09/14/calculate-distance-between-two-wgs84-points</id>
    <content type="html"><![CDATA[<p>WGS84 좌표계는 <a href="https://ko.wikipedia.org/wiki/%EC%84%B8%EA%B3%84_%EC%A7%80%EA%B5%AC_%EC%A2%8C%ED%91%9C_%EC%8B%9C%EC%8A%A4%ED%85%9C">위키피디아</a>에 따르면 다음과 같다.</p>

<blockquote><p>World Geodetic System (WGS) 1984년에 제정된 범 지구적 측위 시스템으로 지도학, 측지학, 항법에 많이 사용된다.</p>

<p>통칭 및 약칭은 WGS 84 (aka WGS 1984, EPSG:4326, WGS84)라고 부르며, 2004년에 마지막으로 개정되었다. 이전에 쓰던 초안으로 WGS 72, WGS 66, 그리고 WGS 60이 있다.</p></blockquote>

<p>기존에는 네이버 지도 등에서 KTM 좌표를 사용하기도 했지만 요즘엔 WGS84 좌표를 주로 사용한다.</p>

<p>이번에 작업을 하면서 WGS84 좌표 두개의 거리를 계산해야하는 일이 생겼다. 관련된 내용을 찾아보니 여러자료가 있긴하지만 바로 사용할만한 정보를 찾기가 어려웠다. 사실 계산방법이 조금씩 다르다(따라서 아래의 내용이 아주 정확한 값은 아닐 수 있다). 그래서 조사한김에 내용을 정리해둔다.</p>

<p>아래는 몇가지 언어로 구현된 함수들이다. 반환값은 모두 km 단위로 반환된다. 필요한 단위로의 변환은 당연히 산술계산을 하면된다.</p>

<h2>php</h2>

<pre><code class="php">function getDistance($lat1, $lon1, $lat2, $lon2)
{
    $earth_radius = 6371;
    $dLat = deg2rad($lat2 - $lat1);
    $dLon = deg2rad($lng2 - $lng1);
    $a = sin($dLat/2) * sin($dLat/2) + cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * sin($dLon/2) * sin($dLon/2);
    $c = 2 * asin(sqrt($a));
    $d = $earth_radius * $c;
    return $d;
}
</code></pre>

<h2>MySql</h2>

<p>함수로 구현된 예시이지만 당연히 query에서 return 부분을 직접 사용해도 된다.</p>

<pre><code class="mysql">CREATE FUNCTION distance_between (from_lat DECIMAL(6, 3), from_lng DECIMAL(6, 3), to_lat DECIMAL(6, 3), to_lng DECIMAL(6, 3)) RETURNS DECIMAL(11, 3)
    RETURN 6371 * 2 * ATAN2(SQRT(POW(SIN(RADIANS(to_lat - from_lat)/2), 2) + POW(SIN(RADIANS(to_lng - from_lng)/2), 2) * COS(RADIANS(from_lat)) * COS(RADIANS(to_lat))), SQRT(1 - POW(SIN(RADIANS(to_lat - from_lat)/2), 2) + POW(SIN(RADIANS(to_lng - from_lng)/2), 2) * COS(RADIANS(from_lat)) * COS(RADIANS(to_lat))));
</code></pre>

<h2>javascript</h2>

<pre><code class="javascript">function getDistanceFromLatLonInKm(lat1,lng1,lat2,lng2) {
    function deg2rad(deg) {
        return deg * (Math.PI/180)
    }

    var R = 6371; // Radius of the earth in km
    var dLat = deg2rad(lat2-lat1);  // deg2rad below
    var dLon = deg2rad(lng2-lng1);
    var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon/2) * Math.sin(dLon/2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    var d = R * c; // Distance in km
    return d;
}
</code></pre>

<p><a href="http://www.mapanet.eu/EN/Resources/Script-Distance.htm">http://www.mapanet.eu/EN/Resources/Script-Distance.htm</a> 이 사이트에서는 여러가지 언어로 사용하는 방법이 나와 있으나 위에 나열된 함수와는 계산이 조금 다르다. 특히 &ldquo;Earth radius in km (WGS84)"라고 설명된 값이 6378.137를 사용하고 있다.
<a href="https://en.wikipedia.org/wiki/Earth_radius">위키피디아</a>에서 셜명된 Earth radius 값이 6371이기 때문이다.(지구가 둥글기 때문에 지역마다 값의 차이가 있는 것으로 보인다.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[크로스 브라우저를 지원하는 localStorage 라이브러리 store.js]]></title>
    <link href="http://blog.asamaru.net/2012/09/27/html5-localstorage-store-dot-js/"/>
    <updated>2012-09-27T21:59:06+09:00</updated>
    <id>http://blog.asamaru.net/2012/09/27/html5-localstorage-store-dot-js</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/marcuswestin/store.js">store.js</a> HTML5에 포함된 Web Storage 중 localStorage를 다양한 브라우저에서 사용할 수 있게 지원하는 자바스크립트 라이브러리다.</p>

<p>사실 이러한 기능을 제공하는 라이브러리는 이미 다양하게 개발되어 있다. 특히 이름이 <a href="https://github.com/frankkohlhepp/store-js">store.js</a>로 동일한 라이브러리도 있다.</p>

<p>그럼 기존의 쿠키 등의 방법을 두고 왜 클라이언트에 보관하는 web storage를 사용하는가? 당연히 서버에서 제어가 필요없는 정보를 저장하거나 큰 용량을 저장하고 싶을 떄 사용할 수 있다.</p>

<p>사실 쿠키는 <a href="http://okjungsoo.tistory.com/entry/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%B8-%EC%BF%A0%ED%82%A4-%EC%A0%9C%ED%95%9CBrowser-cookie-restrictions">저장 공간/개수의 한계</a>도 있을 뿐아니라 모든 http 요청(도메인이 같은)에 붙어가므로 트래픽이나 네트웍 성능면에서도 좋지 않다. 당연히 셰션키를 제외한 정보를 서버에 보관하는 셰션을 쓰는 것도 가능하겠지만 이건 서버 자원을 잡아먹으니 꼭 필요한 것이 아니라면 그다지 보안도 필요없고 훼손되어도 상관없는 데이터를 보관하는데 사용하기엔 자원이 아깝다.</p>

<p>간단히 정리하자면 크게 중요한 정보가 아니고 보안상 문제될 것이 없고 서버에서 값을 참조할 필요가 없는 정보를 보관하는데 사용하면 된다.</p>

<p>이런 경우가 별로 없다고 생각할 수 있으나 잘 생각해보면 쿠키를 남발해서 여러가지 문제를 일으키는 것보다 이것이 훨씬 유용한 경우들이 있다.</p>

<p>store.js에 대한 소개를 하고자하는 것이니 web storage에 대한 자세한 정보는 여기를 <a href="http://m.mkexdev.net/59">참고</a>하길 바란다.</p>

<p>자세한 사용법은 <a href="https://github.com/marcuswestin/store.js">https://github.com/marcuswestin/store.js</a>에 방문하면 상세히 나와있다. 게다가 별로 복잡한 것도 없다.</p>

<p>내가 여러가지 라이브러리 중 이 라이브러리를 선택한 이유는 정말 다양한 브라우저를 지원하기 때문이다.</p>

<blockquote><p>Tested in Firefox 2.0, Tested in Firefox 3.0, Tested in Firefox 3.5, Tested in Firefox 3.6, Tested in Firefox 4.0, Tested in Chrome 5, Tested in Chrome 6, Tested in Chrome 7, Tested in Chrome 8, Tested in Chrome 10, Tested in Chrome 11, Tested in Safari 4, Tested in Safari 5, Tested in IE6, Tested in IE7, Tested in IE8, Tested in Opera 10 (Opera 10.54)</p></blockquote>

<p>게다가 사용법도 무지하게 간단하다.</p>

<pre><code class="javascript">// Store 'marcus' at 'username'
store.set('username', 'marcus')

// Get 'username'
store.get('username')

// Remove 'username'
store.remove('username')

// Clear all keys
store.clear()

// Store an object literal - store.js uses JSON.stringify under the hood
store.set('user', { name: 'marcus', likes: 'javascript' })

// Get the stored object - store.js uses JSON.parse under the hood
var user = store.get('user')
alert(user.name + ' likes ' + user.likes)
</code></pre>

<p>아직 일부 브라우저에서 약간의 문제를 가지고 있는 것으로 표기되어 있으나 이 정도면 충분히 만족할만한 수준이라고 생각한다.</p>
]]></content>
  </entry>
  
</feed>
