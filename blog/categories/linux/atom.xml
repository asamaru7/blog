<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | 이 세상에 하나는 남기고 가자]]></title>
  <link href="http://blog.asamaru.net/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.asamaru.net/"/>
  <updated>2015-12-17T09:03:57+09:00</updated>
  <id>http://blog.asamaru.net/</id>
  <author>
    <name><![CDATA[유영재]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Yum Delta RPM 사용하기]]></title>
    <link href="http://blog.asamaru.net/2015/12/16/delta-rpm/"/>
    <updated>2015-12-16T08:47:36+09:00</updated>
    <id>http://blog.asamaru.net/2015/12/16/delta-rpm</id>
    <content type="html"><![CDATA[<p>최근부터 CentOS 7을 사용하면서 yum으로 update를 하면서 아래와 같은 오류가 자주 발생했다. 하지만 항상 나오는 것은 아니다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash">Error: Delta RPMs disabled because /usr/bin/applydeltarpm not installed.
</code></pre></div>
<p>이 메시지가 나오지만 실제로는 동작에는 이상이 없다. 하지만 계속 메시지가 나오니 보기도 싫고 다른 문제가 생길 수도 있을 것으로 생각되어 좀 찾아봤다.</p>

<p>일단 <strong><a href="https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM">Delta RPM</a> 이라고 하는 것은 RPM 패키지 버전별로 변경사항만 가지고 있는 것을 뜻한다.</strong> 다시 말해 update 시에 전체 RPM을 다운 받아서 설치하지 않고 변경사항만 다운 받아서 update를 하게 해준다는 것이다.</p>

<p>처리 과정을 보자면 yum에서 DRPM(Delta RPM)을 다운 받아 이전 패키지에 변경 사항을 병합하여 새로운 RPM을 빌드한 후 설치가 이루어 진다고 한다. 따라서 다운 받는 시간은 줄어들지만 병합하는 시간이 추가로 소요된다. 하지만 네트워크 비용이 더 크기 때문에 사용하는 것이 더 유리하다.</p>

<p><a href="https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM">Delta RPM</a>은 Fedora 11부터 적용되었다고 하며 RPM을 사용하는 다른 Linux에서도 사용중이라고 한다. 그런데 CentOS의 minimal 설치시에는 포함되지 않기 때문에 위 오류가 난다고 한다. 그리고 update 대상이 DRPM을 지원할 경우만 위 오류가 표시되는 것으로 보인다.</p>

<p>이 오류를 제거하고 <a href="https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM">Delta RPM</a>을 사용하는 방법은 간단하다. deltarpm 패키지를 설치하면 된다.</p>

<p>우선 오류에 나와있는 프로그램의 경로(<code>/usr/bin/applydeltarpm</code>)를 이용해서 패키지명을 찾는다. 사실 이 과정은 굳이 할 필요가 없다(이미 패키지명을 알고 있으니).</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>yum provides /usr/bin/applydeltarpm

Loaded plugins: fastestmirror
Loading mirror speeds from cached hostfile
 * base: ftp.daumkakao.com
 * epel: ftp.cuhk.edu.hk
 * extras: ftp.daumkakao.com
 * updates: ftp.daumkakao.com
 * webtatic: sp.repo.webtatic.com
deltarpm-3.6-3.el7.x86_64 : Create deltas between rpms
Repo        : base
Matched from:
Filename    : /usr/bin/applydeltarpm
</code></pre></div>
<p>패키지명을 알았으니 이제 설치만 하면 된다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>yum install deltarpm
</code></pre></div>
<p>끝이다. 이제부터 <a href="https://fedoraproject.org/wiki/Tools/yum/YumDeltaRPM">Delta RPM</a>이 지원되는 패키지는 DRPM을 이용해서 다운받는 시간이 줄어들 것이다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[selinux enforcing 후 로그인이 되지 않을 때 복구 방법(CentOS 7)]]></title>
    <link href="http://blog.asamaru.net/2015/12/10/linux-login-error-with-selinux-enforcing/"/>
    <updated>2015-12-10T10:58:10+09:00</updated>
    <id>http://blog.asamaru.net/2015/12/10/linux-login-error-with-selinux-enforcing</id>
    <content type="html"><![CDATA[<p>이 글은 특수한 상황에 대한 이야기다. 하지만 여러가지 경우에 대한 설명이 포함되어 있어 향후 비슷한 상황에 대한 대처를 위해 남겨둔다.</p>

<p>일단 상황은 이렇다. CentOS 7을 selinux가 disabled 상태로 운영하던 중 selinux를 enforcing 상태로 변경해서 재시작했다. 그후로 부팅은 되나 모든 계정으로 로그인을 할 수 없었다.</p>

<p><strong>이 상황의 발생 원인을 먼저 설명하자면 selinux가 켜지면서 권한 문제로 shell이 /etc/passwd와 /etc/shadow에 접근할 수 없어 로그인을 할 수 없었던 것이다.</strong></p>

<p>이런 상황이 왜 발생했을까? selinux가 꺼진 상태에서 운영하다가 켜서 재시작하게되면 파일에 대한 selinux rule이 적용하는 과정을 거치게 된다(이로인해 변경 후 최초 시작시 시간이 오래 걸리면 적용이 끝나면 다시 한번 재부팅된다). 이 과정이 정상적으로 완료되었었다면 위 문제가 발생하지 않았겠지만 나의 경우는 내가 설정해 놓은 다른 옵션으로 인해 문제가 발생했다.</p>

<p>나의 경우는 보안상의 이유로 <code>chattr +i /etc/passwd</code>, <code>chattr +i /etc/shadow</code>를 적용한다. 그런데 내가 이걸 잊고 그냥 selinux만 켠 것이다. 그로인해 재시작시 두 파일에 대한 selinux rule이 적용되지 못했던 것이다.</p>

<p>로그인을 할 수 없었기 때문에 파일 상태를 확인할 수 없어 single mode로 부팅해서 확인해야 했다.
single mode 부팅에 관련해서는 <a href="http://linux.systemv.pe.kr/centos-7-%EC%8B%B1%EA%B8%80%EB%AA%A8%EB%93%9C-%EB%B6%80%ED%8C%85/">CENTOS 7 싱글모드 부팅</a>에서 잘 설명하고 있다(CentOS 7부터 Grub2로 변경되었다고 한다. 그래서 처음엔 어떻게 single mode 부팅을 해야할지 몰라서 당황했다). 요약하자면 부팅 메시지가 나왔을 때 <code>e</code>를 눌러 편집 모드로 들어가서 <code>ro</code>가 나오는 부분을 찾아서 <code>rw init=/sysroot/bin/sh</code>로 변경한다(찾기가 어려울 수 있다. <code>ro</code>로 시작하는게 아니라 명령줄 내에 <code>ro</code>라고 된 부분이 있다. 나의 경우는 linux16 /vmlinuz-3.10.0-~~ 으로 시작하는 라인에 있었다). 수정 후에는 <code>crtl+x</code>를 눌러서 부팅한다. 부팅이 되고나면 실제 서버의 <code>/</code>는 <code>/sysroot</code>로 마운트되어 있다. 따라서 <code>chroot /sysroot</code>를 하면 기존 서버처럼 <code>/</code> 경로로 변경할 수 있다. 사실 꼭 필요하진 않다. 경로가 헛갈리지 않도록 작업하기 위해서 한다.</p>

<p>single mode로 들어가서 일단 selinux를 끄고(permissive 모드 사용) 다시 부팅했다(여기서 바로 변경해도 되었을 수 있지만 확인을 위해서 일단 다시 부팅했다). 부팅 후 아래와 같이 확인했다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>ls -Z /etc/passwd
-rw-r--r--. root root system_u:object_r:unlabeled_t:s0 /etc/passwd
</code></pre></div>
<p>원래는 <code>/etc/passwd</code>는 <code>passwd_file_t</code>가 되어야 한다. 그런데 <code>unlabeled_t</code>로 되어있어 제대로 로그인 할 수 없었던 것이다. 그래서 <code>restorecon</code>를 사용해서 아래처럼 복구하려고 했다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>restorecon -v /etc/passwd
restorecon reset /etc/passwd context system_u:object_r:unlabeled_t:s0-&gt;system_u:object_r:passwd_file_t:s0
restorecon <span class="nb">set </span>context /etc/passwd-&gt;system_u:object_r:passwd_file_t:s0 failed:<span class="s1">&#39;Operation not permitted&#39;</span>
</code></pre></div>
<p>그런데 위와 같은 오류가 났다. 아마도 selinux를 켜고 최초 부팅시에도 동일한 오류로 인해 정상적으로 rule이 적용되지 않았을 것이다. 그래서 아래와 같이 다시 처리했다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>chattr -i /etc/passwd
<span class="nv">$ </span>chattr -i /etc/shadow
<span class="nv">$ </span>restorecon -v /etc/passwd
<span class="nv">$ </span>restorecon -v /etc/shadow
</code></pre></div>
<p>이제 다시 재부팅하면 기존처럼 로그인이 잘 된다. 아직 selinux를 잘 다루지 못해 발생한 문제이지만 덕분에 여러가지를 알게 되었다. 사실 다행히 이 문제를 vagrant로 띄운 가상 머신에서 겪어서 다양하게 시도해 보면서 좋은 경험을 했다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sftp-only 사용자 추가 (CentOS 7)]]></title>
    <link href="http://blog.asamaru.net/2015/12/09/centos-7-create-sftp-only-user/"/>
    <updated>2015-12-09T11:17:23+09:00</updated>
    <id>http://blog.asamaru.net/2015/12/09/centos-7-create-sftp-only-user</id>
    <content type="html"><![CDATA[<p>linux 서버를 운영하면서 sftp가 필요한 경우가 있다. 일반 계정이라면 sftp로 그냥 접속하면 되지만 특정 사용자에게 shell 접속은 차단하고 파일 업/다운로드만 제공해야 하는 상황이 있을 수 있다. 파일 전송을 주로 해야하는 서버가 아니라면 이런 경우를 위해 ftp 데몬을 구동하는 것도 부담스럽다. 이런 경우라면 sftp 전용 사용자를 추가하는 방법을 사용할 수 있다.</p>

<p>우선 아래의 과정을 보자. 미리 이야기 하지만 아래의 설정 과정은 앞으로 설명하는 요구 사항에 맞추어 작성된 것이다. 따라서 그룹 설정, home directory 설정 등 여러가지 설정들은 자신에게 맞게 변경해도 된다. 단, 설정을 잘못하면 실제로 접속시에 오류가 날 수 있으니 내용을 이해하고 사용하기를 당부한다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>/sbin/groupadd sftp
<span class="nv">$ </span>/usr/sbin/useradd -g sftp <span class="o">[</span>username<span class="o">]</span> -d <span class="o">[</span>user home directory<span class="o">]</span> -s /bin/false
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;[password]&quot;</span> <span class="p">|</span> passwd --stdin <span class="o">[</span>username<span class="o">]</span>

<span class="nv">$ </span>chown -R <span class="o">[</span>username<span class="o">]</span>.sftp <span class="o">[</span>user home directory<span class="o">]</span>
<span class="nv">$ </span>chown root <span class="o">[</span>user home directory<span class="o">]</span>
<span class="nv">$ </span>chmod <span class="m">755</span> <span class="o">[</span>user home directory<span class="o">]</span>

<span class="nv">$ </span>sed -i <span class="s2">&quot;s/Subsystem[[:space:]]*sftp/#Subsystem   sftp/g&quot;</span> /etc/ssh/sshd_config

<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;&quot;</span> &gt;&gt; /etc/ssh/sshd_config
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Subsystem   sftp    internal-sftp&quot;</span> &gt;&gt; /etc/ssh/sshd_config
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;&quot;</span> &gt;&gt; /etc/ssh/sshd_config
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;Match Group sftp&quot;</span> &gt;&gt; /etc/ssh/sshd_config
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;    ChrootDirectory %h&quot;</span> &gt;&gt; /etc/ssh/sshd_config
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;    AllowTcpForwarding no&quot;</span> &gt;&gt; /etc/ssh/sshd_config
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;    X11Forwarding no&quot;</span> &gt;&gt; /etc/ssh/sshd_config
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;    ForceCommand internal-sftp&quot;</span> &gt;&gt; /etc/ssh/sshd_config

<span class="nv">$ </span>setsebool -P ssh_chroot_rw_homedirs on

<span class="nv">$ </span>systemctl restart sshd.service
</code></pre></div>
<p>이제 하나씩 살펴보자</p>

<ul>
<li><p><code>/sbin/groupadd sftp</code> : sftp라는 사용자 그룹을 추가한다. 필요없다면 하지 않아도 되고 다른 이름을 사용해도 된다. 나의 경우는 sftp 전용 사용자들을 묶어서 관리하기 위해 sftp라는 그룹을 추가한 것이다.</p></li>
<li><p><code>/usr/sbin/useradd -g sftp [username] -d [user home directory] -s /bin/false</code></p>

<ul>
<li><code>-g sftp</code> : sftp 그룹에 사용자를 추가한다.</li>
<li><code>[username]</code> : 원하는 사용자명을 입력한다.</li>
<li><code>-d [user home directory]</code> : 사용자의 home directory를 지정한다. 이 옵션은 지정하지 않아도 상관없다. 미지정시 일반 계정을 생성할 때와 동일하게 지정된다(일반적으로 /home/[username]).     그리고 이미 directory가 생성되어 있다면 <code>-d [user home directory]</code>를 지정하지 않고 <code>-M</code>을 사용하여 home directory 생성을 건너뛸 수 있다.</li>
<li><code>-s /bin/false</code> : 이 사용자는 shell로 접속할 수 없음을 지정한다.</li>
</ul></li>
<li><p><code>$ echo &quot;[password]&quot; | passwd --stdin [username]</code> : 추가한 사용자 계정의 비밀번호를 입력한다. 일반적으로 비밀번호를 추가하는 방식으로 그냥 <code>passwd</code>를 사용해도 되나 나의 경우는 자동으로 처리하는 스크립트를 만들려고 하다보니 이런 방식을 사용한 것이다.</p></li>
<li><p><code>chown -R [username].sftp [user home directory]</code> : 사용자가 접속하게 될 폴더의 하위 파일의 소유자를 변경한다. 이 명령도 사용자 추가시 기존에 있던 폴더를 home directory로 지정한 것이 아니라면 실행하지 않아도 된다.</p></li>
<li><p><code>chown root [user home directory]</code> : 나중에 <code>ChrootDirectory</code>를 적용하려면 home directory의 소유자가 root가 되어야 한다. 이유는 chroot()에서 root가 소유한 directory를 요구하기 때문이다. 관련 내용은 <a href="https://www.debian-administration.org/article/590/OpenSSH_SFTP_chroot_with_ChrootDirectory">OpenSSH SFTP chroot() with ChrootDirectory</a>에 나와 있다.</p></li>
<li><p><code>chmod 755 [user home directory]</code> : <code>ChrootDirectory</code> 적용시 소유자를 root로 변경하는 것과 함께 권한도 755로 변경해야 한다. 이렇게되면 사용자의 home directory에서는 쓰기 권한을 제거한 것이므로 하위에 폴더를 더 만들어서 소유자를 <code>[username]</code>로 변경하거나 쓰기 권한을 줘야한다(사용자는 해당 폴더들에서 쓰기를 할 수 있다). 이 부분이 상당히 불편할 수 있는 부분인데 chroot 적용이 되려면 보안상 쓰기 권한을 줄 수 없기 때문에 어쩔 수 없다. 사실 나도 이 부분을 제대로 몰라 한참을 고생한 적이있다.</p></li>
<li><p><code>sed -i &quot;s/Subsystem[[:space:]]*sftp/#Subsystem   sftp/g&quot; /etc/ssh/sshd_config</code> : <code>/etc/ssh/sshd_config</code> 파일에서 <code>Subsystem   sftp</code> 설정 부분을 주석 처리한다. 직접 파일을 열어서 해당 내용을 주석 처리해도 된다.</p></li>
<li><p>echo section : 이 부분은 <code>/etc/ssh/sshd_config</code>에 필요한 부분을 추가하는 과정이다. 꼭 이렇게 해야하는 것은 아니고 직접 파일을 열어서 수정해도 된다. 그리고 나는 그룹 단위로 제어하기 위해서 <code>Match Group sftp</code>를 사용했지만 사용자 단위로 지정하려면 <code>Match User [username]</code>의 형식을 사용해도 된다.</p>

<ul>
<li><code>ChrootDirectory %h</code> : 이 설정은 chroot를 사용자 home directory로 지정하는 것이다. <code>%h</code> 대신 특정 경로를 직접 지정해도 된다.</li>
</ul></li>
<li><p><code>setsebool -P ssh_chroot_rw_homedirs on</code> : 이 부분은 selinux를 사용할 경우에만 해당된다. chroot가 적용된 home directory에 읽기/쓰기를 할 수 있도록 권한을 열어준다. 그런데 테스트 해보니 이 명령은 하지 않아도 파일 업로드는 이상이 없다. 대부분의 경우에 이 옵션을 주도록 설명하고 있어 추가는 해 두었지만 sftp 전용으로 계정을 사용할 경우는 사용하지 않아도 되는 것으로 보인다. 따라서 지정하지 않은 상태에서 업로드를 테스트 해보고 이상이 없다면 처리하지 않아도 되지 않을까 생각한다.</p></li>
<li><p><code>systemctl restart sshd.service</code> : 설정이 완료되었으므로 sshd를 재시작 해주면 바로 사용할 수 있다. <code>[username]</code> 계정으로 접속(<code>sftp [username]@127.0.0.1</code>)해서 테스트 해보고 이상이 없다면 완료된 것이다.</p></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql_secure_installation 자동화]]></title>
    <link href="http://blog.asamaru.net/2015/12/04/mysql-secure-installation-automation/"/>
    <updated>2015-12-04T12:35:49+09:00</updated>
    <id>http://blog.asamaru.net/2015/12/04/mysql-secure-installation-automation</id>
    <content type="html"><![CDATA[<p>이전 글 <a href="2015/12/04/installing-mariadb-on-centos-7/">MariaDB 최신 버전 설치(yum) - CentOS 7</a>에서 MariaDB를 설치하면서 <code>mysql_secure_installation</code> 명령을 자동화하는 부분을 언급했었다. 이 글에서는 이를 설명하려고 한다. 우선 바로 만들어둔 bash shell script를 보자.</p>

<p><strong>mysql_secure_installation_automation.sh</strong></p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>

<span class="c"># https://gist.github.com/Mins/4602864</span>

yum -y install expect

<span class="c"># Not required in actual script</span>
<span class="nv">MYSQL_ROOT_PASSWORD</span><span class="o">=</span>

<span class="nv">SECURE_MYSQL</span><span class="o">=</span><span class="k">$(</span>expect -c <span class="s2">&quot;</span>
<span class="s2">set timeout 3</span>
<span class="s2">spawn mysql_secure_installation</span>
<span class="s2">expect \&quot;Enter current password for root (enter for none):\&quot;</span>
<span class="s2">send \&quot;$MYSQL\r\&quot;</span>
<span class="s2">expect \&quot;Change the root password?\&quot;</span>
<span class="s2">send \&quot;n\r\&quot;</span>
<span class="s2">expect \&quot;Remove anonymous users?\&quot;</span>
<span class="s2">send \&quot;y\r\&quot;</span>
<span class="s2">expect \&quot;Disallow root login remotely?\&quot;</span>
<span class="s2">send \&quot;y\r\&quot;</span>
<span class="s2">expect \&quot;Remove test database and access to it?\&quot;</span>
<span class="s2">send \&quot;y\r\&quot;</span>
<span class="s2">expect \&quot;Reload privilege tables now?\&quot;</span>
<span class="s2">send \&quot;y\r\&quot;</span>
<span class="s2">expect eof</span>
<span class="s2">&quot;</span><span class="k">)</span>

<span class="nb">echo</span> <span class="s2">&quot;$SECURE_MYSQL&quot;</span>
</code></pre></div>
<p>이 스크립트는 <a href="https://gist.github.com/Mins/4602864">mysql_secure_installation automation</a> 스크립트를 참고하여 CentOS에 맞게 조금 수정한 것이다.</p>

<p>위 스크립트를 mysql_secure_installation_automation.sh 파일로 저장했다면 아래와 같이 실행하면 된다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>chmod <span class="m">700</span> mysql_secure_installation_automation.sh
<span class="nv">$ </span>./mysql_secure_installation_automation.sh
</code></pre></div>
<p>특별히 설명할 것도 없지만 간략하게나마 원리를 설명하자면 <code>expect</code>라는 도구를 사용해서 사용자 입력을 대신하도록 하는 것이다. 이를 응용하면 <code>mysql_secure_installation</code> 외에도 여러가지 상황에 적용할 수 있다. 나의 경우는 <code>expect</code>를 이용해서 ssh 비밀번호 자동 입력 기능을 만들어 사용하고 있었다. 사실 ssh의 경우는 key를 등록하는 방식으로 비밀번호 없이 로그인이 가능하고 비밀번호를 외부로 노출하는 것이 보안상 문제가 있지만 간단하게 접속이 필요하고 보안상의 이슈가 없는 곳에서 유용하게 사용하고 있다.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MariaDB 최신 버전 설치(yum) - CentOS 7]]></title>
    <link href="http://blog.asamaru.net/2015/12/04/installing-mariadb-on-centos-7/"/>
    <updated>2015-12-04T08:37:25+09:00</updated>
    <id>http://blog.asamaru.net/2015/12/04/installing-mariadb-on-centos-7</id>
    <content type="html"><![CDATA[<p>CentOS 7에서의 <a href="https://mariadb.org/">MariaDB</a>의 기본적인 설치는 아주 간단하다. yum epel 저장소가 추가된 상태에서 아래와 같이 설치가 가능하다(epel이 없어도 동일할 것으로 생각되나 이 글에서의 주요 내용이 아니기 때문에 테스트 해보지는 않았다).</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>yum install -y mariadb mariadb-server
<span class="nv">$ </span>systemctl <span class="nb">enable </span>mariadb.service
<span class="nv">$ </span>systemctl start mariadb.service
<span class="nv">$ </span>mysql_secure_installation
</code></pre></div>
<p>기본 설치는 끝이다. 이제부터 mariadb을 설정하는 부분이 남았지만 이 부분은 서버 상황에 따라 모두 다르니 여기서는 다루지 않는다. 그리고 한가지 더. <code>mysql_secure_installation</code>를 실행하면 자신의 상황에 맞게 설정하기 위해 몇가지를 물어본다. 그런데 이게 거의 일정하고 설치 자동화를 할 때 입력창이 나오면 처리가 귀찮아진다. 이 부분을 자동화하는 부분에 대해서는 <a href="/2015/12/04/mysql-secure-installation-automation/">mysql_secure_installation 자동화</a>에서 따로 글을 남긴다.</p>

<p>이제부터가 본격적인 이 글에서 하고자하는 이야기다.</p>

<p>위의 방법으로 설치하면 현재 기준으로 5.5.44 버전이 설치된다. 하지만 최신 버전은 10.1.9다. 그렇다면 최신 버전을 설치하려면 어떻게 해야하는가? 아래의 과정을 보자.</p>

<p>우선 yum에 mariadb 저장소를 추가한다. <code>http://yum.mariadb.org/10.1/centos7-amd64</code>는 현재 최신 버전과 CentOS7을 기준으로한 주소다. <a href="http://yum.mariadb.org">http://yum.mariadb.org</a> 를 열어보면 다른 기준에서 사용할 수 있는 레포지토리들도 확인할 수 있다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;[mariadb]&quot;</span> &gt; /etc/yum.repos.d/MariaDB.repo
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;name = MariaDB&quot;</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;baseurl = http://yum.mariadb.org/10.1/rhel7-amd64&quot;</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB&quot;</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;gpgcheck=1&quot;</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
</code></pre></div>
<p>더 간단한 방법도 있다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>wget -O /etc/yum.repos.d/MariaDB.repo http://mariadb.if-not-true-then-false.com/rhel/<span class="k">$(</span>rpm -E %rhel<span class="k">)</span>/<span class="k">$(</span>uname -i<span class="k">)</span>/10_1
</code></pre></div>
<p>이후는 기존과 동일하다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>yum install -y mariadb mariadb-server
<span class="nv">$ </span>systemctl <span class="nb">enable </span>mariadb.service
<span class="nv">$ </span>systemctl start mariadb.service
<span class="nv">$ </span>mysql_secure_installation
</code></pre></div>
<p>단, 10.1.8 버전 이상일 경우만 위와 같이 처리가 가능한 것으로 보인다(<a href="https://mariadb.com/kb/en/mariadb/systemd/">MariaDB Systemd</a>).</p>

<p>따라서 10.0 버전대를 설치한다면  아래와 같이 하면 된다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>yum install -y mariadb mariadb-server
<span class="nv">$ </span>systemctl <span class="nb">enable </span>mysql.service
<span class="nv">$ </span>systemctl start mysql.service
<span class="nv">$ </span>mysql_secure_installation
</code></pre></div>
<p>하지만 약간의 차이가 있다. systemctl에서 사용하는 service 명이 다르다. 왜 다른지는 모르겠지만 설치를 했는데 서비스 등록이 되지 않아서 처음엔 당황스러웠다. 이 부분도 처음과 동일하게 사용하고 싶다면 alias를 사용하는 방법이 있다(<a href="https://www.centos.org/forums/viewtopic.php?f=47&amp;t=47373">service name alias? mariadb-&gt;mysql - how?</a>).</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">&quot;Alias=mysql.service&quot;</span> &gt; /usr/lib/systemd/system/mariadb.service
</code></pre></div>
<p>이렇게 해주면 mariadb라는 이름으로 service를 등록할 수 있다. 큰 의미가 없으니 굳이 적용할 필요는 없으나 혼선을 없애기 위해서라면 적용하는 것도 나쁘지는 않을 듯하다.</p>

<p>자.. 그런데 위 설치 방법대로 따라하면 아래와 같은 화면을 만나게 된다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>systemctl <span class="nb">enable </span>mysql.service
mysql.service is not a native service, redirecting to /sbin/chkconfig.
Executing /sbin/chkconfig mysql on
The unit files have no <span class="o">[</span>Install<span class="o">]</span> section. They are not meant to be enabled
using systemctl.
Possible reasons <span class="k">for</span> having this kind of units are:
1<span class="o">)</span> A unit may be statically enabled by being symlinked from another unit<span class="s1">&#39;s</span>
<span class="s1">   .wants/ or .requires/ directory.</span>
<span class="s1">2) A unit&#39;</span>s purpose may be to act as a helper <span class="k">for</span> some other unit which has
   a requirement dependency on it.
3<span class="o">)</span> A unit may be started when needed via activation <span class="o">(</span>socket, path, timer,
   D-Bus, udev, scripted systemctl call, ...<span class="o">)</span>.
</code></pre></div>
<p>내용을 보면 mariadb가 systemd에 등록되지 않고 chkconfig로 initd에 등록된다. 앞서 설명했던 5.5/10.1 버전 설치와는 다른 결과다. CentOS의 레포지토리를 이용해서 설치하면 <code>/usr/lib/systemd/system/mariadb.service</code> 파일이 함께 설치되는데 MariaDB 레포지토리로 설치하면 이 파일이 설치되지 않는다(확인해보니 다른 몇가지도 차이가 있다).</p>

<p>이 부분은 MariaDB 10.0이 systemd 지원을 아직 제대로 하지 않아서 그런 것 같다(테스트는 해보지 않았지만 찾아보니 Fedora 22 이상부터는 바로 지원이 되는 것으로 보인다).</p>

<p>그냥 이렇게 사용해도 문제는 되지 않지만 기존과 동일하게 systemd로 사용하고 싶다면 10.1 버전을 사용하면 된다.</p>

<hr>

<p>10.0을 굳이 써야 한다면 다음과 같이 처리할 수는 있으나 권장하지는 않는다. 이왕이면 최신 버전을 사용하자.</p>

<p>이미 위 명령을 입력했었다면 아래와 같이 제거하자. 아직 설치하지 않았다면 이 과정은 생략한다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>systemctl disable mysql.service
mysql.service is not a native service, redirecting to /sbin/chkconfig.
Executing /sbin/chkconfig mysql off
</code></pre></div>
<p>아직 설치를 하지 않았다면 10.1과 유사하게 아래의 과정을 처리한다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;[mariadb]&quot;</span> &gt; /etc/yum.repos.d/MariaDB.repo
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;name = MariaDB&quot;</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;baseurl = http://yum.mariadb.org/10.0/rhel7-amd64&quot;</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB&quot;</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
<span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;gpgcheck=1&quot;</span> &gt;&gt; /etc/yum.repos.d/MariaDB.repo
</code></pre></div>
<p>10.1과 유사하게 아래의 방법도 가능하다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>wget -O /etc/yum.repos.d/MariaDB.repo http://mariadb.if-not-true-then-false.com/rhel/<span class="k">$(</span>rpm -E %rhel<span class="k">)</span>/<span class="k">$(</span>uname -i<span class="k">)</span>/10
</code></pre></div>
<p>이제 mariadb 10.0을 설치한다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>yum install -y mariadb mariadb-server
</code></pre></div>
<p>아래의 내용으로 <code>/usr/lib/systemd/system/mariadb.service</code> 파일을 만든다. 이 스크립트는 5.5 설치시에 생성되었던 <code>/usr/lib/systemd/system/mariadb.service</code> 파일을 가져다가 조금 수정했다. 그대로 사용하려니 정상적으로 동작하지 않았다. <code>/usr/libexec/mariadb-prepare-db-dir</code> 파일을 필요로해서 동일하게 넣어주었으나 구동은 되나 실행 스크립트가 종료되지 않고 <code>systemctl stop</code>으로 종료 할 수도 없었다.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># It&#39;s not recommended to modify this file in-place, because it will be</span>
<span class="c"># overwritten during package upgrades.  If you want to customize, the</span>
<span class="c"># best way is to create a file &quot;/etc/systemd/system/mariadb.service&quot;,</span>
<span class="c"># containing</span>
<span class="c">#   .include /lib/systemd/system/mariadb.service</span>
<span class="c">#   ...make your changes here...</span>
<span class="c"># or create a file &quot;/etc/systemd/system/mariadb.service.d/foo.conf&quot;,</span>
<span class="c"># which doesn&#39;t need to include &quot;.include&quot; call and which will be parsed</span>
<span class="c"># after the file mariadb.service itself is parsed.</span>
<span class="c">#</span>
<span class="c"># For more info about custom unit files, see systemd.unit(5) or</span>
<span class="c"># http://fedoraproject.org/wiki/Systemd#How_do_I_customize_a_unit_file.2F_add_a_custom_unit_file.3F</span>

<span class="c"># For example, if you want to increase mariadb&#39;s open-files-limit to 10000,</span>
<span class="c"># you need to increase systemd&#39;s LimitNOFILE setting, so create a file named</span>
<span class="c"># &quot;/etc/systemd/system/mariadb.service.d/limits.conf&quot; containing:</span>
<span class="c">#   [Service]</span>
<span class="c">#   LimitNOFILE=10000</span>

<span class="c"># Note: /usr/lib/... is recommended in the .include line though /lib/...</span>
<span class="c"># still works.</span>
<span class="c"># Don&#39;t forget to reload systemd daemon after you change unit configuration:</span>
<span class="c"># root&gt; systemctl --system daemon-reload</span>

<span class="o">[</span>Unit<span class="o">]</span>
<span class="nv">Description</span><span class="o">=</span>MariaDB database server
<span class="nv">After</span><span class="o">=</span>syslog.target
<span class="nv">After</span><span class="o">=</span>network.target

<span class="o">[</span>Service<span class="o">]</span>
<span class="c">#Type=simple</span>
<span class="nv">Type</span> <span class="o">=</span> forking
<span class="nv">User</span><span class="o">=</span>mysql
<span class="nv">Group</span><span class="o">=</span>mysql
<span class="nv">ExecStart</span> <span class="o">=</span> /etc/rc.d/init.d/mysql start
<span class="nv">ExecStop</span> <span class="o">=</span> /etc/rc.d/init.d/mysql stop

<span class="c">#ExecStartPre=/usr/libexec/mariadb-prepare-db-dir %n</span>
<span class="c"># Note: we set --basedir to prevent probes that might trigger SELinux alarms,</span>
<span class="c"># per bug #547485</span>
<span class="c">#ExecStart=/usr/bin/mysqld_safe --basedir=/usr</span>
<span class="c">#ExecStartPost=/usr/libexec/mariadb-wait-ready $MAINPID</span>

<span class="c"># Give a reasonable amount of time for the server to start up/shut down</span>
<span class="nv">TimeoutSec</span><span class="o">=</span>300

<span class="c"># Place temp files in a secure directory, not /tmp</span>
<span class="nv">PrivateTmp</span><span class="o">=</span><span class="nb">true</span>

<span class="o">[</span>Install<span class="o">]</span>
<span class="nv">WantedBy</span><span class="o">=</span>multi-user.target
</code></pre></div>
<p>이후의 과정은 동일하다. 단, 10.0 설치에서 설명했던 <code>mysql.service</code> 대신 10.1 처럼 <code>mariadb.service</code>을 사용한다. 해당 파일을 만들어 줬으므로.</p>
<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>systemctl daemon-reload

<span class="nv">$ </span>systemctl <span class="nb">enable </span>mariadb.service
<span class="nv">$ </span>systemctl start mariadb.service
<span class="nv">$ </span>mysql_secure_installation
</code></pre></div>
<p>이제 설치가 끝났다.</p>
]]></content>
  </entry>
  
</feed>
